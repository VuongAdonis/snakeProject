
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f98  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d94c  0800d94c  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800d94c  0800d94c  0001d94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d954  0800d954  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d954  0800d954  0001d954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d958  0800d958  0001d958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800d95c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          000028f0  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a04  20002a04  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bd7  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003903  00000000  00000000  00032d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00036620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001028  00000000  00000000  00037858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256e7  00000000  00000000  00038880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b63d  00000000  00000000  0005df67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0134  00000000  00000000  000795a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001496d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005334  00000000  00000000  00149728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800999c 	.word	0x0800999c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0800999c 	.word	0x0800999c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b095      	sub	sp, #84	; 0x54
 8000588:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 800058a:	2000      	movs	r0, #0
 800058c:	f001 f93e 	bl	800180c <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8000590:	4bb0      	ldr	r3, [pc, #704]	; (8000854 <setupAdvance+0x2d0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b298      	uxth	r0, r3
 8000596:	4bb0      	ldr	r3, [pc, #704]	; (8000858 <setupAdvance+0x2d4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b299      	uxth	r1, r3
 800059c:	4baf      	ldr	r3, [pc, #700]	; (800085c <setupAdvance+0x2d8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4baf      	ldr	r3, [pc, #700]	; (8000860 <setupAdvance+0x2dc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4cae      	ldr	r4, [pc, #696]	; (8000864 <setupAdvance+0x2e0>)
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	f001 fb38 	bl	8001c20 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2318      	movs	r3, #24
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f248 4330 	movw	r3, #33840	; 0x8430
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	4aa9      	ldr	r2, [pc, #676]	; (8000868 <setupAdvance+0x2e4>)
 80005c4:	2137      	movs	r1, #55	; 0x37
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f001 fd04 	bl	8001fd4 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80005cc:	4aa7      	ldr	r2, [pc, #668]	; (800086c <setupAdvance+0x2e8>)
 80005ce:	463b      	mov	r3, r7
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	1dbb      	adds	r3, r7, #6
 80005dc:	222c      	movs	r2, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 ff4f 	bl	8008484 <memset>
	char *str2 = convert2str(ID);
 80005e6:	4ba2      	ldr	r3, [pc, #648]	; (8000870 <setupAdvance+0x2ec>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 ffa8 	bl	8002540 <convert2str>
 80005f0:	4603      	mov	r3, r0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80005f4:	463b      	mov	r3, r7
 80005f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 ffeb 	bl	80085d4 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80005fe:	463a      	mov	r2, r7
 8000600:	2300      	movs	r3, #0
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2318      	movs	r3, #24
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f248 4330 	movw	r3, #33840	; 0x8430
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	2000      	movs	r0, #0
 8000616:	f001 fd41 	bl	800209c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800061a:	2300      	movs	r3, #0
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2318      	movs	r3, #24
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	f248 4330 	movw	r3, #33840	; 0x8430
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062c:	4a91      	ldr	r2, [pc, #580]	; (8000874 <setupAdvance+0x2f0>)
 800062e:	2196      	movs	r1, #150	; 0x96
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fd33 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000636:	2300      	movs	r3, #0
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2318      	movs	r3, #24
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	4a8b      	ldr	r2, [pc, #556]	; (8000878 <setupAdvance+0x2f4>)
 800064a:	21d7      	movs	r1, #215	; 0xd7
 800064c:	2014      	movs	r0, #20
 800064e:	f001 fcc1 	bl	8001fd4 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	23f0      	movs	r3, #240	; 0xf0
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	21d2      	movs	r1, #210	; 0xd2
 800065e:	2096      	movs	r0, #150	; 0x96
 8000660:	f001 f9d7 	bl	8001a12 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8000664:	4b85      	ldr	r3, [pc, #532]	; (800087c <setupAdvance+0x2f8>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 ff69 	bl	8002540 <convert2str>
 800066e:	4603      	mov	r3, r0
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8000672:	4b82      	ldr	r3, [pc, #520]	; (800087c <setupAdvance+0x2f8>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2b77      	cmp	r3, #119	; 0x77
 8000678:	d80e      	bhi.n	8000698 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 800067a:	2301      	movs	r3, #1
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2318      	movs	r3, #24
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f248 4330 	movw	r3, #33840	; 0x8430
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800068e:	21d4      	movs	r1, #212	; 0xd4
 8000690:	20a5      	movs	r0, #165	; 0xa5
 8000692:	f001 fc9f 	bl	8001fd4 <lcd_ShowStr>
 8000696:	e00d      	b.n	80006b4 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8000698:	2301      	movs	r3, #1
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	2318      	movs	r3, #24
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006ac:	21d4      	movs	r1, #212	; 0xd4
 80006ae:	209d      	movs	r0, #157	; 0x9d
 80006b0:	f001 fc90 	bl	8001fd4 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80006b4:	4b71      	ldr	r3, [pc, #452]	; (800087c <setupAdvance+0x2f8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b77      	cmp	r3, #119	; 0x77
 80006ba:	d81a      	bhi.n	80006f2 <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80006bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	23dc      	movs	r3, #220	; 0xdc
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	21dc      	movs	r1, #220	; 0xdc
 80006c8:	20cd      	movs	r0, #205	; 0xcd
 80006ca:	f001 f91e 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	23d2      	movs	r3, #210	; 0xd2
 80006d6:	22d7      	movs	r2, #215	; 0xd7
 80006d8:	21dc      	movs	r1, #220	; 0xdc
 80006da:	20cd      	movs	r0, #205	; 0xcd
 80006dc:	f001 f915 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	23d2      	movs	r3, #210	; 0xd2
 80006e8:	22d7      	movs	r2, #215	; 0xd7
 80006ea:	21dc      	movs	r1, #220	; 0xdc
 80006ec:	20e1      	movs	r0, #225	; 0xe1
 80006ee:	f001 f90c 	bl	800190a <lcd_DrawLine>
	}
	if(TIMING > 30)
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <setupAdvance+0x2f8>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b1e      	cmp	r3, #30
 80006f8:	d91a      	bls.n	8000730 <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	23e6      	movs	r3, #230	; 0xe6
 8000702:	22e1      	movs	r2, #225	; 0xe1
 8000704:	21e6      	movs	r1, #230	; 0xe6
 8000706:	20cd      	movs	r0, #205	; 0xcd
 8000708:	f001 f8ff 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 800070c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	23f0      	movs	r3, #240	; 0xf0
 8000714:	22d7      	movs	r2, #215	; 0xd7
 8000716:	21e6      	movs	r1, #230	; 0xe6
 8000718:	20cd      	movs	r0, #205	; 0xcd
 800071a:	f001 f8f6 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	23f0      	movs	r3, #240	; 0xf0
 8000726:	22d7      	movs	r2, #215	; 0xd7
 8000728:	21e6      	movs	r1, #230	; 0xe6
 800072a:	20e1      	movs	r0, #225	; 0xe1
 800072c:	f001 f8ed 	bl	800190a <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 8000730:	2300      	movs	r3, #0
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2318      	movs	r3, #24
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	f248 4330 	movw	r3, #33840	; 0x8430
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <setupAdvance+0x2fc>)
 8000744:	f240 1109 	movw	r1, #265	; 0x109
 8000748:	2014      	movs	r0, #20
 800074a:	f001 fc43 	bl	8001fd4 <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800074e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000758:	22c8      	movs	r2, #200	; 0xc8
 800075a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800075e:	2096      	movs	r0, #150	; 0x96
 8000760:	f001 f957 	bl	8001a12 <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <setupAdvance+0x300>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fee9 	bl	8002540 <convert2str>
 800076e:	4603      	mov	r3, r0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 8000772:	4b44      	ldr	r3, [pc, #272]	; (8000884 <setupAdvance+0x300>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b09      	cmp	r3, #9
 8000778:	d80f      	bhi.n	800079a <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 800077a:	2301      	movs	r3, #1
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2318      	movs	r3, #24
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f248 4330 	movw	r3, #33840	; 0x8430
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800078e:	f240 1109 	movw	r1, #265	; 0x109
 8000792:	20aa      	movs	r0, #170	; 0xaa
 8000794:	f001 fc1e 	bl	8001fd4 <lcd_ShowStr>
 8000798:	e00e      	b.n	80007b8 <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 800079a:	2301      	movs	r3, #1
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	2318      	movs	r3, #24
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ae:	f240 1109 	movw	r1, #265	; 0x109
 80007b2:	20a5      	movs	r0, #165	; 0xa5
 80007b4:	f001 fc0e 	bl	8001fd4 <lcd_ShowStr>
	}

	if(WALL < 30)
 80007b8:	4b32      	ldr	r3, [pc, #200]	; (8000884 <setupAdvance+0x300>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b1d      	cmp	r3, #29
 80007be:	d820      	bhi.n	8000802 <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80007c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007ca:	22e1      	movs	r2, #225	; 0xe1
 80007cc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007d0:	20cd      	movs	r0, #205	; 0xcd
 80007d2:	f001 f89a 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007e0:	22d7      	movs	r2, #215	; 0xd7
 80007e2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007e6:	20cd      	movs	r0, #205	; 0xcd
 80007e8:	f001 f88f 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 80007ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007f6:	22d7      	movs	r2, #215	; 0xd7
 80007f8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007fc:	20e1      	movs	r0, #225	; 0xe1
 80007fe:	f001 f884 	bl	800190a <lcd_DrawLine>
	}
	if(WALL > 0)
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <setupAdvance+0x300>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d020      	beq.n	800084c <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	f44f 718c 	mov.w	r1, #280	; 0x118
 800081a:	20cd      	movs	r0, #205	; 0xcd
 800081c:	f001 f875 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	f44f 7391 	mov.w	r3, #290	; 0x122
 800082a:	22d7      	movs	r2, #215	; 0xd7
 800082c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000830:	20cd      	movs	r0, #205	; 0xcd
 8000832:	f001 f86a 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000840:	22d7      	movs	r2, #215	; 0xd7
 8000842:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000846:	20e1      	movs	r0, #225	; 0xe1
 8000848:	f001 f85f 	bl	800190a <lcd_DrawLine>
	}
}
 800084c:	bf00      	nop
 800084e:	3744      	adds	r7, #68	; 0x44
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000074 	.word	0x20000074
 8000858:	20000078 	.word	0x20000078
 800085c:	2000007c 	.word	0x2000007c
 8000860:	20000080 	.word	0x20000080
 8000864:	0800cbc4 	.word	0x0800cbc4
 8000868:	080099b4 	.word	0x080099b4
 800086c:	080099e4 	.word	0x080099e4
 8000870:	200001a8 	.word	0x200001a8
 8000874:	080099c4 	.word	0x080099c4
 8000878:	080099d4 	.word	0x080099d4
 800087c:	20000000 	.word	0x20000000
 8000880:	080099dc 	.word	0x080099dc
 8000884:	200001ac 	.word	0x200001ac

08000888 <initAdvanceMode>:

void initAdvanceMode()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <initAdvanceMode+0x94>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10e      	bne.n	80008b2 <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <initAdvanceMode+0x98>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	331e      	adds	r3, #30
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <initAdvanceMode+0x98>)
 800089e:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <initAdvanceMode+0x98>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	2b78      	cmp	r3, #120	; 0x78
 80008a6:	d902      	bls.n	80008ae <initAdvanceMode+0x26>
		{
			TIMING = 120;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <initAdvanceMode+0x98>)
 80008aa:	2278      	movs	r2, #120	; 0x78
 80008ac:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008ae:	f7ff fe69 	bl	8000584 <setupAdvance>
	}
	if(button_count[7] == 1)
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <initAdvanceMode+0x94>)
 80008b4:	89db      	ldrh	r3, [r3, #14]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10e      	bne.n	80008d8 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <initAdvanceMode+0x98>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	3b1e      	subs	r3, #30
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <initAdvanceMode+0x98>)
 80008c4:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <initAdvanceMode+0x98>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b1d      	cmp	r3, #29
 80008cc:	d802      	bhi.n	80008d4 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <initAdvanceMode+0x98>)
 80008d0:	221e      	movs	r2, #30
 80008d2:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008d4:	f7ff fe56 	bl	8000584 <setupAdvance>
	}
	if(button_count[11] == 1)
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <initAdvanceMode+0x94>)
 80008da:	8adb      	ldrh	r3, [r3, #22]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10e      	bne.n	80008fe <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <initAdvanceMode+0x9c>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	3305      	adds	r3, #5
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <initAdvanceMode+0x9c>)
 80008ea:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <initAdvanceMode+0x9c>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	2b1e      	cmp	r3, #30
 80008f2:	d902      	bls.n	80008fa <initAdvanceMode+0x72>
		{
			WALL = 30;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <initAdvanceMode+0x9c>)
 80008f6:	221e      	movs	r2, #30
 80008f8:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008fa:	f7ff fe43 	bl	8000584 <setupAdvance>
	}
	if(button_count[15] == 1)
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <initAdvanceMode+0x94>)
 8000900:	8bdb      	ldrh	r3, [r3, #30]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d107      	bne.n	8000916 <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <initAdvanceMode+0x9c>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	3b05      	subs	r3, #5
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <initAdvanceMode+0x9c>)
 8000910:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000912:	f7ff fe37 	bl	8000584 <setupAdvance>
	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000130 	.word	0x20000130
 8000920:	20000000 	.word	0x20000000
 8000924:	200001ac 	.word	0x200001ac

08000928 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <button_init+0x14>)
 8000932:	f005 fdc1 	bl	80064b8 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020c00 	.word	0x40020c00

08000940 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	482f      	ldr	r0, [pc, #188]	; (8000a08 <button_Scan+0xc8>)
 800094c:	f005 fdb4 	bl	80064b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	2108      	movs	r1, #8
 8000954:	482c      	ldr	r0, [pc, #176]	; (8000a08 <button_Scan+0xc8>)
 8000956:	f005 fdaf 	bl	80064b8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800095a:	230a      	movs	r3, #10
 800095c:	2202      	movs	r2, #2
 800095e:	492b      	ldr	r1, [pc, #172]	; (8000a0c <button_Scan+0xcc>)
 8000960:	482b      	ldr	r0, [pc, #172]	; (8000a10 <button_Scan+0xd0>)
 8000962:	f006 fbec 	bl	800713e <HAL_SPI_Receive>
	  int button_index = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	e03f      	b.n	80009f6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db06      	blt.n	800098a <button_Scan+0x4a>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b03      	cmp	r3, #3
 8000980:	dc03      	bgt.n	800098a <button_Scan+0x4a>
			  button_index = i + 4;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3304      	adds	r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e018      	b.n	80009bc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b03      	cmp	r3, #3
 800098e:	dd07      	ble.n	80009a0 <button_Scan+0x60>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b07      	cmp	r3, #7
 8000994:	dc04      	bgt.n	80009a0 <button_Scan+0x60>
			  button_index = 7 - i;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f1c3 0307 	rsb	r3, r3, #7
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e00d      	b.n	80009bc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	dd06      	ble.n	80009b4 <button_Scan+0x74>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0b      	cmp	r3, #11
 80009aa:	dc03      	bgt.n	80009b4 <button_Scan+0x74>
			  button_index = i + 4;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3304      	adds	r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e003      	b.n	80009bc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f1c3 0317 	rsb	r3, r3, #23
 80009ba:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <button_Scan+0xcc>)
 80009be:	881a      	ldrh	r2, [r3, #0]
 80009c0:	897b      	ldrh	r3, [r7, #10]
 80009c2:	4013      	ands	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <button_Scan+0x96>
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <button_Scan+0xd4>)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d4:	e009      	b.n	80009ea <button_Scan+0xaa>
		  else button_count[button_index]++;
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <button_Scan+0xd4>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	3301      	adds	r3, #1
 80009e0:	b299      	uxth	r1, r3
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <button_Scan+0xd4>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	ddbc      	ble.n	8000976 <button_Scan+0x36>
	  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	20000150 	.word	0x20000150
 8000a10:	2000294c 	.word	0x2000294c
 8000a14:	20000130 	.word	0x20000130

08000a18 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	3305      	adds	r3, #5
 8000a26:	b299      	uxth	r1, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <showNotifyExit+0xc0>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f001 fb2e 	bl	800209c <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3314      	adds	r3, #20
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	2310      	movs	r3, #16
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <showNotifyExit+0xc4>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 fb1d 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <showNotifyExit+0xc8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3308      	adds	r3, #8
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	0fda      	lsrs	r2, r3, #31
 8000a78:	4413      	add	r3, r2
 8000a7a:	105b      	asrs	r3, r3, #1
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3b14      	subs	r3, #20
 8000a80:	b299      	uxth	r1, r3
 8000a82:	2301      	movs	r3, #1
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2310      	movs	r3, #16
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	f248 4330 	movw	r3, #33840	; 0x8430
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <showNotifyExit+0xcc>)
 8000a94:	f001 fa9e 	bl	8001fd4 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <showNotifyExit+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	b298      	uxth	r0, r3
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <showNotifyExit+0xbc>)
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <showNotifyExit+0xbc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	0fda      	lsrs	r2, r3, #31
 8000aae:	4413      	add	r3, r2
 8000ab0:	105b      	asrs	r3, r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3319      	adds	r3, #25
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2310      	movs	r3, #16
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <showNotifyExit+0xd0>)
 8000aca:	f001 fa83 	bl	8001fd4 <lcd_ShowStr>
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000004c 	.word	0x2000004c
 8000ad8:	08009a18 	.word	0x08009a18
 8000adc:	08009a24 	.word	0x08009a24
 8000ae0:	2000003c 	.word	0x2000003c
 8000ae4:	08009a30 	.word	0x08009a30
 8000ae8:	08009a34 	.word	0x08009a34

08000aec <drawArrowExit>:

void drawArrowExit()
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8000af2:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <drawArrowExit+0x168>)
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <drawArrowExit+0x168>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	0fda      	lsrs	r2, r3, #31
 8000afe:	4413      	add	r3, r2
 8000b00:	105b      	asrs	r3, r3, #1
 8000b02:	3b08      	subs	r3, #8
 8000b04:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <drawArrowExit+0x168>)
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4b52      	ldr	r3, [pc, #328]	; (8000c54 <drawArrowExit+0x168>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	0fda      	lsrs	r2, r3, #31
 8000b12:	4413      	add	r3, r2
 8000b14:	105b      	asrs	r3, r3, #1
 8000b16:	331c      	adds	r3, #28
 8000b18:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 8000b1a:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <drawArrowExit+0x16c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d003      	beq.n	8000b2a <drawArrowExit+0x3e>
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	f000 80a2 	beq.w	8000c6c <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8000b28:	e135      	b.n	8000d96 <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	; (8000c5c <drawArrowExit+0x170>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <drawArrowExit+0x174>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	b298      	uxth	r0, r3
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <drawArrowExit+0x168>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3323      	adds	r3, #35	; 0x23
 8000b42:	b299      	uxth	r1, r3
 8000b44:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <drawArrowExit+0x170>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <drawArrowExit+0x174>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <drawArrowExit+0x168>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	3b05      	subs	r3, #5
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f248 4430 	movw	r4, #33840	; 0x8430
 8000b62:	9400      	str	r4, [sp, #0]
 8000b64:	f000 fe84 	bl	8001870 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <drawArrowExit+0x170>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3308      	adds	r3, #8
 8000b70:	b298      	uxth	r0, r3
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <drawArrowExit+0x168>)
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <drawArrowExit+0x168>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	0fda      	lsrs	r2, r3, #31
 8000b7e:	4413      	add	r3, r2
 8000b80:	105b      	asrs	r3, r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3b0f      	subs	r3, #15
 8000b86:	b299      	uxth	r1, r3
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	f248 4330 	movw	r3, #33840	; 0x8430
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <drawArrowExit+0x178>)
 8000b9c:	f001 fa1a 	bl	8001fd4 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <drawArrowExit+0x170>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	b298      	uxth	r0, r3
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <drawArrowExit+0x168>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <drawArrowExit+0x168>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	0fda      	lsrs	r2, r3, #31
 8000bb6:	4413      	add	r3, r2
 8000bb8:	105b      	asrs	r3, r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	b299      	uxth	r1, r3
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	f248 4330 	movw	r3, #33840	; 0x8430
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <drawArrowExit+0x17c>)
 8000bd2:	f001 f9ff 	bl	8001fd4 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <drawArrowExit+0x170>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3b0f      	subs	r3, #15
 8000bde:	b298      	uxth	r0, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b299      	uxth	r1, r3
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <drawArrowExit+0x170>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b0a      	subs	r3, #10
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	3b05      	subs	r3, #5
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	9400      	str	r4, [sp, #0]
 8000bfa:	f000 fe86 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <drawArrowExit+0x170>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3b0f      	subs	r3, #15
 8000c06:	b298      	uxth	r0, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <drawArrowExit+0x170>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	3b0a      	subs	r3, #10
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	3305      	adds	r3, #5
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2400      	movs	r4, #0
 8000c20:	9400      	str	r4, [sp, #0]
 8000c22:	f000 fe72 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <drawArrowExit+0x170>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b0a      	subs	r3, #10
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b05      	subs	r3, #5
 8000c36:	b299      	uxth	r1, r3
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <drawArrowExit+0x170>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3b0a      	subs	r3, #10
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3305      	adds	r3, #5
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	9400      	str	r4, [sp, #0]
 8000c4e:	f000 fe5c 	bl	800190a <lcd_DrawLine>
		break;
 8000c52:	e0a0      	b.n	8000d96 <drawArrowExit+0x2aa>
 8000c54:	2000004c 	.word	0x2000004c
 8000c58:	20000060 	.word	0x20000060
 8000c5c:	2000003c 	.word	0x2000003c
 8000c60:	20000038 	.word	0x20000038
 8000c64:	08009a30 	.word	0x08009a30
 8000c68:	08009a34 	.word	0x08009a34
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <drawArrowExit+0x2b4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <drawArrowExit+0x2b8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4413      	add	r3, r2
 8000c7a:	b298      	uxth	r0, r3
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <drawArrowExit+0x2bc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	3323      	adds	r3, #35	; 0x23
 8000c84:	b299      	uxth	r1, r3
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <drawArrowExit+0x2b4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <drawArrowExit+0x2b8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <drawArrowExit+0x2bc>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3b05      	subs	r3, #5
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	f248 4430 	movw	r4, #33840	; 0x8430
 8000ca4:	9400      	str	r4, [sp, #0]
 8000ca6:	f000 fde3 	bl	8001870 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <drawArrowExit+0x2b4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	0fda      	lsrs	r2, r3, #31
 8000cc0:	4413      	add	r3, r2
 8000cc2:	105b      	asrs	r3, r3, #1
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	3b0f      	subs	r3, #15
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	2310      	movs	r3, #16
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	f248 4330 	movw	r3, #33840	; 0x8430
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4a34      	ldr	r2, [pc, #208]	; (8000dac <drawArrowExit+0x2c0>)
 8000cdc:	f001 f97a 	bl	8001fd4 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <drawArrowExit+0x2b4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	b298      	uxth	r0, r3
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	0fda      	lsrs	r2, r3, #31
 8000cf6:	4413      	add	r3, r2
 8000cf8:	105b      	asrs	r3, r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	2301      	movs	r3, #1
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2310      	movs	r3, #16
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	f248 4330 	movw	r3, #33840	; 0x8430
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <drawArrowExit+0x2c4>)
 8000d14:	f001 f95e 	bl	8001fd4 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3b0f      	subs	r3, #15
 8000d20:	b298      	uxth	r0, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b0a      	subs	r3, #10
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	3b05      	subs	r3, #5
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2400      	movs	r4, #0
 8000d3a:	9400      	str	r4, [sp, #0]
 8000d3c:	f000 fde5 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b0f      	subs	r3, #15
 8000d48:	b298      	uxth	r0, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b0a      	subs	r3, #10
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3305      	adds	r3, #5
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2400      	movs	r4, #0
 8000d62:	9400      	str	r4, [sp, #0]
 8000d64:	f000 fdd1 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3b0a      	subs	r3, #10
 8000d70:	b298      	uxth	r0, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b05      	subs	r3, #5
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3b0a      	subs	r3, #10
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3305      	adds	r3, #5
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	9400      	str	r4, [sp, #0]
 8000d90:	f000 fdbb 	bl	800190a <lcd_DrawLine>
		break;
 8000d94:	bf00      	nop
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000003c 	.word	0x2000003c
 8000da4:	20000038 	.word	0x20000038
 8000da8:	2000004c 	.word	0x2000004c
 8000dac:	08009a30 	.word	0x08009a30
 8000db0:	08009a34 	.word	0x08009a34

08000db4 <gameExitUI>:

void gameExitUI()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	showWallnotify();
 8000db8:	f000 f91e 	bl	8000ff8 <showWallnotify>
	showNotifyExit();
 8000dbc:	f7ff fe2c 	bl	8000a18 <showNotifyExit>
	drawArrowExit();
 8000dc0:	f7ff fe94 	bl	8000aec <drawArrowExit>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <askToExit>:

void askToExit()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <askToExit+0x74>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b0a      	cmp	r3, #10
 8000dd2:	d131      	bne.n	8000e38 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <askToExit+0x78>)
 8000dd6:	88db      	ldrh	r3, [r3, #6]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10c      	bne.n	8000df6 <askToExit+0x2e>
		{
			flagExit = 1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <askToExit+0x7c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <askToExit+0x80>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d023      	beq.n	8000e32 <askToExit+0x6a>
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d104      	bne.n	8000df8 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <askToExit+0x80>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
				break;
 8000df4:	e000      	b.n	8000df8 <askToExit+0x30>
			}
		}
 8000df6:	bf00      	nop
		if(button_count[7] == 1)
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <askToExit+0x78>)
 8000dfa:	89db      	ldrh	r3, [r3, #14]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10d      	bne.n	8000e1c <askToExit+0x54>
		{
			flagExit = 1;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <askToExit+0x7c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <askToExit+0x80>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d002      	beq.n	8000e14 <askToExit+0x4c>
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d011      	beq.n	8000e36 <askToExit+0x6e>
 8000e12:	e004      	b.n	8000e1e <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <askToExit+0x80>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	601a      	str	r2, [r3, #0]
				break;
 8000e1a:	e000      	b.n	8000e1e <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 8000e1c:	bf00      	nop
		if(flagExit == 1)
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <askToExit+0x7c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <askToExit+0x70>
		{
			gameExitUI();
 8000e26:	f7ff ffc5 	bl	8000db4 <gameExitUI>
			flagExit = 0;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <askToExit+0x7c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e002      	b.n	8000e38 <askToExit+0x70>
				return;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <askToExit+0x70>
				return;
 8000e36:	bf00      	nop
		}
	}
}
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001bc 	.word	0x200001bc
 8000e40:	20000130 	.word	0x20000130
 8000e44:	200001cc 	.word	0x200001cc
 8000e48:	20000060 	.word	0x20000060

08000e4c <initExit>:

void initExit()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	gameExitUI();
 8000e50:	f7ff ffb0 	bl	8000db4 <gameExitUI>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	; (8000f48 <MX_FSMC_Init+0xf0>)
 8000e90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000eea:	230f      	movs	r3, #15
 8000eec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000ef2:	233c      	movs	r3, #60	; 0x3c
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000efa:	2310      	movs	r3, #16
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000efe:	2311      	movs	r3, #17
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000f06:	2308      	movs	r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000f16:	2310      	movs	r3, #16
 8000f18:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000f1a:	2311      	movs	r3, #17
 8000f1c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000f22:	463a      	mov	r2, r7
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000f2c:	f006 fcea 	bl	8007904 <HAL_SRAM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000f36:	f001 fafd 	bl	8002534 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000154 	.word	0x20000154
 8000f48:	a0000104 	.word	0xa0000104

08000f4c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_FSMC_MspInit+0x88>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d131      	bne.n	8000fcc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_FSMC_MspInit+0x88>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f8a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000f8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_FSMC_MspInit+0x90>)
 8000fa6:	f005 f8eb 	bl	8006180 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000faa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000fae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <HAL_FSMC_MspInit+0x94>)
 8000fc6:	f005 f8db 	bl	8006180 <HAL_GPIO_Init>
 8000fca:	e000      	b.n	8000fce <HAL_FSMC_MspInit+0x82>
    return;
 8000fcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001a4 	.word	0x200001a4
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fec:	f7ff ffae 	bl	8000f4c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <showWallnotify>:
#include "main.h"
#include "button.h"
#include "picture.h"

void showWallnotify()
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <showWallnotify+0xe8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b298      	uxth	r0, r3
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <showWallnotify+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b299      	uxth	r1, r3
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <showWallnotify+0xe8>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	b29c      	uxth	r4, r3
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <showWallnotify+0xec>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <showWallnotify+0xf0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	f248 4230 	movw	r2, #33840	; 0x8430
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4622      	mov	r2, r4
 8001028:	f000 fc22 	bl	8001870 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <showWallnotify+0xe8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b298      	uxth	r0, r3
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <showWallnotify+0xec>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b299      	uxth	r1, r3
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <showWallnotify+0xe8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	b29c      	uxth	r4, r3
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <showWallnotify+0xec>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <showWallnotify+0xf0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	2200      	movs	r2, #0
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	4622      	mov	r2, r4
 8001054:	f000 fc0c 	bl	8001870 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <showWallnotify+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b298      	uxth	r0, r3
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <showWallnotify+0xec>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b299      	uxth	r1, r3
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <showWallnotify+0xe8>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <showWallnotify+0xf0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <showWallnotify+0xec>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	b29b      	uxth	r3, r3
 800107a:	2400      	movs	r4, #0
 800107c:	9400      	str	r4, [sp, #0]
 800107e:	f000 fbf7 	bl	8001870 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <showWallnotify+0xe8>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <showWallnotify+0xf0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b298      	uxth	r0, r3
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <showWallnotify+0xec>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	b299      	uxth	r1, r3
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <showWallnotify+0xe8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <showWallnotify+0xec>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2400      	movs	r4, #0
 80010a6:	9400      	str	r4, [sp, #0]
 80010a8:	f000 fbe2 	bl	8001870 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <showWallnotify+0xe8>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <showWallnotify+0xec>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <showWallnotify+0xf0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b299      	uxth	r1, r3
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <showWallnotify+0xe8>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <showWallnotify+0xec>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2400      	movs	r4, #0
 80010d0:	9400      	str	r4, [sp, #0]
 80010d2:	f000 fbcd 	bl	8001870 <lcd_Fill>

}
 80010d6:	bf00      	nop
 80010d8:	3704      	adds	r7, #4
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000003c 	.word	0x2000003c
 80010e4:	2000004c 	.word	0x2000004c
 80010e8:	20000038 	.word	0x20000038

080010ec <showNotifyOver>:

void showNotifyOver()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 10, overMessage, WHITE, BLACK, 16, 0);
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <showNotifyOver+0x9c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	330a      	adds	r3, #10
 80010fa:	b299      	uxth	r1, r3
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <showNotifyOver+0xa0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2310      	movs	r3, #16
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	2300      	movs	r3, #0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	2000      	movs	r0, #0
 8001112:	f000 ffc3 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <showNotifyOver+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	3308      	adds	r3, #8
 800111e:	b298      	uxth	r0, r3
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <showNotifyOver+0x9c>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <showNotifyOver+0x9c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4413      	add	r3, r2
 800112a:	0fda      	lsrs	r2, r3, #31
 800112c:	4413      	add	r3, r2
 800112e:	105b      	asrs	r3, r3, #1
 8001130:	b29b      	uxth	r3, r3
 8001132:	3b0f      	subs	r3, #15
 8001134:	b299      	uxth	r1, r3
 8001136:	2301      	movs	r3, #1
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2310      	movs	r3, #16
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f248 4330 	movw	r3, #33840	; 0x8430
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2300      	movs	r3, #0
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <showNotifyOver+0xa8>)
 8001148:	f000 ff44 	bl	8001fd4 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <showNotifyOver+0xa4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	3308      	adds	r3, #8
 8001154:	b298      	uxth	r0, r3
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <showNotifyOver+0x9c>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <showNotifyOver+0x9c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	0fda      	lsrs	r2, r3, #31
 8001162:	4413      	add	r3, r2
 8001164:	105b      	asrs	r3, r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	3314      	adds	r3, #20
 800116a:	b299      	uxth	r1, r3
 800116c:	2301      	movs	r3, #1
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2310      	movs	r3, #16
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f248 4330 	movw	r3, #33840	; 0x8430
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <showNotifyOver+0xac>)
 800117e:	f000 ff29 	bl	8001fd4 <lcd_ShowStr>
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000004c 	.word	0x2000004c
 800118c:	20000084 	.word	0x20000084
 8001190:	2000003c 	.word	0x2000003c
 8001194:	08009a38 	.word	0x08009a38
 8001198:	08009a44 	.word	0x08009a44

0800119c <eraseFull>:

void eraseFull()
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <eraseFull+0x4c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <eraseFull+0x50>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b298      	uxth	r0, r3
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <eraseFull+0x54>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3319      	adds	r3, #25
 80011ba:	b299      	uxth	r1, r3
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <eraseFull+0x4c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <eraseFull+0x50>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <eraseFull+0x54>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3b05      	subs	r3, #5
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f248 4430 	movw	r4, #33840	; 0x8430
 80011da:	9400      	str	r4, [sp, #0]
 80011dc:	f000 fb48 	bl	8001870 <lcd_Fill>
}
 80011e0:	bf00      	nop
 80011e2:	3704      	adds	r7, #4
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	2000003c 	.word	0x2000003c
 80011ec:	20000038 	.word	0x20000038
 80011f0:	2000004c 	.word	0x2000004c

080011f4 <drawArrowOver>:

void drawArrowOver()
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 80011fa:	4b87      	ldr	r3, [pc, #540]	; (8001418 <drawArrowOver+0x224>)
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	4b86      	ldr	r3, [pc, #536]	; (8001418 <drawArrowOver+0x224>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	0fda      	lsrs	r2, r3, #31
 8001206:	4413      	add	r3, r2
 8001208:	105b      	asrs	r3, r3, #1
 800120a:	3b08      	subs	r3, #8
 800120c:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <drawArrowOver+0x224>)
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	4b81      	ldr	r3, [pc, #516]	; (8001418 <drawArrowOver+0x224>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	0fda      	lsrs	r2, r3, #31
 800121a:	4413      	add	r3, r2
 800121c:	105b      	asrs	r3, r3, #1
 800121e:	331c      	adds	r3, #28
 8001220:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 8001222:	4b7e      	ldr	r3, [pc, #504]	; (800141c <drawArrowOver+0x228>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <drawArrowOver+0x3c>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d078      	beq.n	8001320 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 800122e:	e0ef      	b.n	8001410 <drawArrowOver+0x21c>
		eraseFull();
 8001230:	f7ff ffb4 	bl	800119c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 8001234:	4b7a      	ldr	r3, [pc, #488]	; (8001420 <drawArrowOver+0x22c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	3308      	adds	r3, #8
 800123c:	b298      	uxth	r0, r3
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <drawArrowOver+0x224>)
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b75      	ldr	r3, [pc, #468]	; (8001418 <drawArrowOver+0x224>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	0fda      	lsrs	r2, r3, #31
 800124a:	4413      	add	r3, r2
 800124c:	105b      	asrs	r3, r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b0f      	subs	r3, #15
 8001252:	b299      	uxth	r1, r3
 8001254:	2301      	movs	r3, #1
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2310      	movs	r3, #16
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001266:	4a6f      	ldr	r2, [pc, #444]	; (8001424 <drawArrowOver+0x230>)
 8001268:	f000 feb4 	bl	8001fd4 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 800126c:	4b6c      	ldr	r3, [pc, #432]	; (8001420 <drawArrowOver+0x22c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	3308      	adds	r3, #8
 8001274:	b298      	uxth	r0, r3
 8001276:	4b68      	ldr	r3, [pc, #416]	; (8001418 <drawArrowOver+0x224>)
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	4b67      	ldr	r3, [pc, #412]	; (8001418 <drawArrowOver+0x224>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	0fda      	lsrs	r2, r3, #31
 8001282:	4413      	add	r3, r2
 8001284:	105b      	asrs	r3, r3, #1
 8001286:	b29b      	uxth	r3, r3
 8001288:	3314      	adds	r3, #20
 800128a:	b299      	uxth	r1, r3
 800128c:	2301      	movs	r3, #1
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	2310      	movs	r3, #16
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	f248 4330 	movw	r3, #33840	; 0x8430
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	4a62      	ldr	r2, [pc, #392]	; (8001428 <drawArrowOver+0x234>)
 800129e:	f000 fe99 	bl	8001fd4 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 80012a2:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <drawArrowOver+0x22c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b0f      	subs	r3, #15
 80012aa:	b298      	uxth	r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	b299      	uxth	r1, r3
 80012b0:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <drawArrowOver+0x22c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b0a      	subs	r3, #10
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b05      	subs	r3, #5
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2400      	movs	r4, #0
 80012c4:	9400      	str	r4, [sp, #0]
 80012c6:	f000 fb20 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <drawArrowOver+0x22c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3b0f      	subs	r3, #15
 80012d2:	b298      	uxth	r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	b299      	uxth	r1, r3
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <drawArrowOver+0x22c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3b0a      	subs	r3, #10
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3305      	adds	r3, #5
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2400      	movs	r4, #0
 80012ec:	9400      	str	r4, [sp, #0]
 80012ee:	f000 fb0c 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <drawArrowOver+0x22c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3b0a      	subs	r3, #10
 80012fa:	b298      	uxth	r0, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b05      	subs	r3, #5
 8001302:	b299      	uxth	r1, r3
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <drawArrowOver+0x22c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b0a      	subs	r3, #10
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	b29b      	uxth	r3, r3
 8001312:	3305      	adds	r3, #5
 8001314:	b29b      	uxth	r3, r3
 8001316:	2400      	movs	r4, #0
 8001318:	9400      	str	r4, [sp, #0]
 800131a:	f000 faf6 	bl	800190a <lcd_DrawLine>
		break;
 800131e:	e077      	b.n	8001410 <drawArrowOver+0x21c>
		eraseFull();
 8001320:	f7ff ff3c 	bl	800119c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <drawArrowOver+0x22c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	3308      	adds	r3, #8
 800132c:	b298      	uxth	r0, r3
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <drawArrowOver+0x224>)
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <drawArrowOver+0x224>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	0fda      	lsrs	r2, r3, #31
 800133a:	4413      	add	r3, r2
 800133c:	105b      	asrs	r3, r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	3b0f      	subs	r3, #15
 8001342:	b299      	uxth	r1, r3
 8001344:	2301      	movs	r3, #1
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2310      	movs	r3, #16
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	4a33      	ldr	r2, [pc, #204]	; (8001424 <drawArrowOver+0x230>)
 8001356:	f000 fe3d 	bl	8001fd4 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <drawArrowOver+0x22c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	3308      	adds	r3, #8
 8001362:	b298      	uxth	r0, r3
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <drawArrowOver+0x224>)
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <drawArrowOver+0x224>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	0fda      	lsrs	r2, r3, #31
 8001370:	4413      	add	r3, r2
 8001372:	105b      	asrs	r3, r3, #1
 8001374:	b29b      	uxth	r3, r3
 8001376:	3314      	adds	r3, #20
 8001378:	b299      	uxth	r1, r3
 800137a:	2301      	movs	r3, #1
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2310      	movs	r3, #16
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f248 4330 	movw	r3, #33840	; 0x8430
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <drawArrowOver+0x234>)
 800138e:	f000 fe21 	bl	8001fd4 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <drawArrowOver+0x22c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	b29b      	uxth	r3, r3
 8001398:	3b0f      	subs	r3, #15
 800139a:	b298      	uxth	r0, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b299      	uxth	r1, r3
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <drawArrowOver+0x22c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3b0a      	subs	r3, #10
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	3b05      	subs	r3, #5
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2400      	movs	r4, #0
 80013b4:	9400      	str	r4, [sp, #0]
 80013b6:	f000 faa8 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <drawArrowOver+0x22c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b0f      	subs	r3, #15
 80013c2:	b298      	uxth	r0, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b299      	uxth	r1, r3
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <drawArrowOver+0x22c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	3b0a      	subs	r3, #10
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3305      	adds	r3, #5
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2400      	movs	r4, #0
 80013dc:	9400      	str	r4, [sp, #0]
 80013de:	f000 fa94 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <drawArrowOver+0x22c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3b0a      	subs	r3, #10
 80013ea:	b298      	uxth	r0, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3b05      	subs	r3, #5
 80013f2:	b299      	uxth	r1, r3
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <drawArrowOver+0x22c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3b0a      	subs	r3, #10
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	3305      	adds	r3, #5
 8001404:	b29b      	uxth	r3, r3
 8001406:	2400      	movs	r4, #0
 8001408:	9400      	str	r4, [sp, #0]
 800140a:	f000 fa7e 	bl	800190a <lcd_DrawLine>
		break;
 800140e:	bf00      	nop
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	2000004c 	.word	0x2000004c
 800141c:	200001b0 	.word	0x200001b0
 8001420:	2000003c 	.word	0x2000003c
 8001424:	08009a38 	.word	0x08009a38
 8001428:	08009a44 	.word	0x08009a44

0800142c <gameOverUI>:

void gameOverUI()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	showWallnotify();
 8001430:	f7ff fde2 	bl	8000ff8 <showWallnotify>
	showNotifyOver();
 8001434:	f7ff fe5a 	bl	80010ec <showNotifyOver>
	drawArrowOver();
 8001438:	f7ff fedc 	bl	80011f4 <drawArrowOver>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <pickOver>:

void pickOver()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <pickOver+0x6c>)
 8001446:	88db      	ldrh	r3, [r3, #6]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d10c      	bne.n	8001466 <pickOver+0x26>
	{
		flagOver = 1;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <pickOver+0x70>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <pickOver+0x74>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d023      	beq.n	80014a2 <pickOver+0x62>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <pickOver+0x28>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <pickOver+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
			break;
 8001464:	e000      	b.n	8001468 <pickOver+0x28>
		}
	}
 8001466:	bf00      	nop
	if(button_count[7] == 1)
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <pickOver+0x6c>)
 800146a:	89db      	ldrh	r3, [r3, #14]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10d      	bne.n	800148c <pickOver+0x4c>
	{
		flagOver = 1;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <pickOver+0x70>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <pickOver+0x74>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <pickOver+0x44>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d011      	beq.n	80014a6 <pickOver+0x66>
 8001482:	e004      	b.n	800148e <pickOver+0x4e>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <pickOver+0x74>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
			break;
 800148a:	e000      	b.n	800148e <pickOver+0x4e>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 800148c:	bf00      	nop
	if(flagOver == 1)
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <pickOver+0x70>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d108      	bne.n	80014a8 <pickOver+0x68>
	{
		gameOverUI();
 8001496:	f7ff ffc9 	bl	800142c <gameOverUI>
		flagOver = 0;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <pickOver+0x70>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e002      	b.n	80014a8 <pickOver+0x68>
			return;
 80014a2:	bf00      	nop
 80014a4:	e000      	b.n	80014a8 <pickOver+0x68>
			return;
 80014a6:	bf00      	nop
	}
}
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000130 	.word	0x20000130
 80014b0:	200001c4 	.word	0x200001c4
 80014b4:	200001b0 	.word	0x200001b0

080014b8 <initOverMode>:

void initOverMode(char* str1)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b090      	sub	sp, #64	; 0x40
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	statusGame = OVERMODE;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <initOverMode+0x54>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <initOverMode+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <initOverMode+0x5c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <initOverMode+0x60>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
	char str[50] = "";
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	222e      	movs	r2, #46	; 0x2e
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f006 ffcd 	bl	8008484 <memset>
	strcat(str, str1);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 f86f 	bl	80085d4 <strcat>
	overMessage = str;
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <initOverMode+0x64>)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	6013      	str	r3, [r2, #0]
	pickOver();
 80014fe:	f7ff ff9f 	bl	8001440 <pickOver>
}
 8001502:	bf00      	nop
 8001504:	3740      	adds	r7, #64	; 0x40
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200001bc 	.word	0x200001bc
 8001510:	200001aa 	.word	0x200001aa
 8001514:	200001b0 	.word	0x200001b0
 8001518:	200001c4 	.word	0x200001c4
 800151c:	20000084 	.word	0x20000084

08001520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b6f      	ldr	r3, [pc, #444]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a6e      	ldr	r2, [pc, #440]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a67      	ldr	r2, [pc, #412]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a60      	ldr	r2, [pc, #384]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a59      	ldr	r2, [pc, #356]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a4b      	ldr	r2, [pc, #300]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a44      	ldr	r2, [pc, #272]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <MX_GPIO_Init+0x1d8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2170      	movs	r1, #112	; 0x70
 80015fe:	483f      	ldr	r0, [pc, #252]	; (80016fc <MX_GPIO_Init+0x1dc>)
 8001600:	f004 ff5a 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	483d      	ldr	r0, [pc, #244]	; (8001700 <MX_GPIO_Init+0x1e0>)
 800160c:	f004 ff54 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	483b      	ldr	r0, [pc, #236]	; (8001704 <MX_GPIO_Init+0x1e4>)
 8001616:	f004 ff4f 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001620:	4839      	ldr	r0, [pc, #228]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001622:	f004 ff49 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2108      	movs	r1, #8
 800162a:	4838      	ldr	r0, [pc, #224]	; (800170c <MX_GPIO_Init+0x1ec>)
 800162c:	f004 ff44 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001630:	2370      	movs	r3, #112	; 0x70
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	482d      	ldr	r0, [pc, #180]	; (80016fc <MX_GPIO_Init+0x1dc>)
 8001648:	f004 fd9a 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800164c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4826      	ldr	r0, [pc, #152]	; (8001700 <MX_GPIO_Init+0x1e0>)
 8001666:	f004 fd8b 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4822      	ldr	r0, [pc, #136]	; (8001708 <MX_GPIO_Init+0x1e8>)
 800167e:	f004 fd7f 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001682:	2330      	movs	r3, #48	; 0x30
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	481a      	ldr	r0, [pc, #104]	; (8001700 <MX_GPIO_Init+0x1e0>)
 8001696:	f004 fd73 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <MX_GPIO_Init+0x1e4>)
 80016b2:	f004 fd65 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_GPIO_Init+0x1e8>)
 80016d0:	f004 fd56 	bl	8006180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80016d4:	2308      	movs	r3, #8
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <MX_GPIO_Init+0x1ec>)
 80016ec:	f004 fd48 	bl	8006180 <HAL_GPIO_Init>

}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40021000 	.word	0x40021000
 8001700:	40020800 	.word	0x40020800
 8001704:	40021800 	.word	0x40021800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020c00 	.word	0x40020c00

08001710 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <LCD_WR_REG+0x1c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	8013      	strh	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	600ffffe 	.word	0x600ffffe

08001730 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <LCD_WR_DATA+0x1c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	8053      	strh	r3, [r2, #2]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	600ffffe 	.word	0x600ffffe

08001750 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <LCD_RD_DATA+0x20>)
 8001758:	885b      	ldrh	r3, [r3, #2]
 800175a:	b29b      	uxth	r3, r3
 800175c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	b29b      	uxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	600ffffe 	.word	0x600ffffe

08001774 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	80fb      	strh	r3, [r7, #6]
 8001786:	4603      	mov	r3, r0
 8001788:	80bb      	strh	r3, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001792:	202a      	movs	r0, #42	; 0x2a
 8001794:	f7ff ffbc 	bl	8001710 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b29b      	uxth	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffc6 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffc0 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffba 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ffb4 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c8:	202b      	movs	r0, #43	; 0x2b
 80017ca:	f7ff ffa1 	bl	8001710 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ffab 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffa5 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017e6:	883b      	ldrh	r3, [r7, #0]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff9f 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017f2:	883b      	ldrh	r3, [r7, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff99 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017fe:	202c      	movs	r0, #44	; 0x2c
 8001800:	f7ff ff86 	bl	8001710 <LCD_WR_REG>
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <lcd_Clear+0x60>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <lcd_Clear+0x60>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	3b01      	subs	r3, #1
 8001824:	b29b      	uxth	r3, r3
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff ffa3 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800182e:	2300      	movs	r3, #0
 8001830:	81fb      	strh	r3, [r7, #14]
 8001832:	e011      	b.n	8001858 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001834:	2300      	movs	r3, #0
 8001836:	81bb      	strh	r3, [r7, #12]
 8001838:	e006      	b.n	8001848 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff77 	bl	8001730 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001842:	89bb      	ldrh	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	81bb      	strh	r3, [r7, #12]
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <lcd_Clear+0x60>)
 800184a:	885b      	ldrh	r3, [r3, #2]
 800184c:	89ba      	ldrh	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3f3      	bcc.n	800183a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	81fb      	strh	r3, [r7, #14]
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <lcd_Clear+0x60>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	89fa      	ldrh	r2, [r7, #14]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3e8      	bcc.n	8001834 <lcd_Clear+0x28>
		}
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200001d4 	.word	0x200001d4

08001870 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4623      	mov	r3, r4
 8001880:	80fb      	strh	r3, [r7, #6]
 8001882:	4603      	mov	r3, r0
 8001884:	80bb      	strh	r3, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	883b      	ldrh	r3, [r7, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	88b9      	ldrh	r1, [r7, #4]
 800189c:	88f8      	ldrh	r0, [r7, #6]
 800189e:	f7ff ff69 	bl	8001774 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	81fb      	strh	r3, [r7, #14]
 80018a6:	e010      	b.n	80018ca <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	81bb      	strh	r3, [r7, #12]
 80018ac:	e006      	b.n	80018bc <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80018ae:	8c3b      	ldrh	r3, [r7, #32]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff3d 	bl	8001730 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80018b6:	89bb      	ldrh	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	81bb      	strh	r3, [r7, #12]
 80018bc:	89ba      	ldrh	r2, [r7, #12]
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3f4      	bcc.n	80018ae <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80018c4:	89fb      	ldrh	r3, [r7, #14]
 80018c6:	3301      	adds	r3, #1
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	89fa      	ldrh	r2, [r7, #14]
 80018cc:	883b      	ldrh	r3, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3ea      	bcc.n	80018a8 <lcd_Fill+0x38>
		}
	}
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}

080018dc <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	88f8      	ldrh	r0, [r7, #6]
 80018f6:	f7ff ff3d 	bl	8001774 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff17 	bl	8001730 <LCD_WR_DATA>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 800190a:	b590      	push	{r4, r7, lr}
 800190c:	b08d      	sub	sp, #52	; 0x34
 800190e:	af00      	add	r7, sp, #0
 8001910:	4604      	mov	r4, r0
 8001912:	4608      	mov	r0, r1
 8001914:	4611      	mov	r1, r2
 8001916:	461a      	mov	r2, r3
 8001918:	4623      	mov	r3, r4
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	4603      	mov	r3, r0
 800191e:	80bb      	strh	r3, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001938:	883a      	ldrh	r2, [r7, #0]
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd02      	ble.n	8001954 <lcd_DrawLine+0x4a>
 800194e:	2301      	movs	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e00b      	b.n	800196c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <lcd_DrawLine+0x56>
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e005      	b.n	800196c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	425b      	negs	r3, r3
 800196a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	dd02      	ble.n	8001978 <lcd_DrawLine+0x6e>
 8001972:	2301      	movs	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	e00b      	b.n	8001990 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <lcd_DrawLine+0x7a>
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e005      	b.n	8001990 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	425b      	negs	r3, r3
 800198e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001990:	6a3a      	ldr	r2, [r7, #32]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	429a      	cmp	r2, r3
 8001996:	dd02      	ble.n	800199e <lcd_DrawLine+0x94>
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	e001      	b.n	80019a2 <lcd_DrawLine+0x98>
	else distance=delta_y;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019a6:	e02b      	b.n	8001a00 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	b291      	uxth	r1, r2
 80019b0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff91 	bl	80018dc <lcd_DrawPoint>
		xerr+=delta_x;
 80019ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	4413      	add	r3, r2
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80019ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dd07      	ble.n	80019e2 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80019d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dd07      	ble.n	80019fa <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80019fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019fc:	3301      	adds	r3, #1
 80019fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dacf      	bge.n	80019a8 <lcd_DrawLine+0x9e>
		}
	}
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3734      	adds	r7, #52	; 0x34
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001a12:	b590      	push	{r4, r7, lr}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af02      	add	r7, sp, #8
 8001a18:	4604      	mov	r4, r0
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4623      	mov	r3, r4
 8001a22:	80fb      	strh	r3, [r7, #6]
 8001a24:	4603      	mov	r3, r0
 8001a26:	80bb      	strh	r3, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001a30:	88bc      	ldrh	r4, [r7, #4]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	88b9      	ldrh	r1, [r7, #4]
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	8b3b      	ldrh	r3, [r7, #24]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	f7ff ff64 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001a42:	883c      	ldrh	r4, [r7, #0]
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	88b9      	ldrh	r1, [r7, #4]
 8001a48:	88f8      	ldrh	r0, [r7, #6]
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f7ff ff5b 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001a54:	883c      	ldrh	r4, [r7, #0]
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	8839      	ldrh	r1, [r7, #0]
 8001a5a:	88f8      	ldrh	r0, [r7, #6]
 8001a5c:	8b3b      	ldrh	r3, [r7, #24]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4623      	mov	r3, r4
 8001a62:	f7ff ff52 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001a66:	883c      	ldrh	r4, [r7, #0]
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	88b9      	ldrh	r1, [r7, #4]
 8001a6c:	8878      	ldrh	r0, [r7, #2]
 8001a6e:	8b3b      	ldrh	r3, [r7, #24]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4623      	mov	r3, r4
 8001a74:	f7ff ff49 	bl	800190a <lcd_DrawLine>
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4604      	mov	r4, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	4603      	mov	r3, r0
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001aa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	fb12 f303 	smulbb	r3, r2, r3
 8001ad6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	3b20      	subs	r3, #32
 8001adc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29c      	uxth	r4, r3
 8001aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	88b9      	ldrh	r1, [r7, #4]
 8001afe:	88f8      	ldrh	r0, [r7, #6]
 8001b00:	4622      	mov	r2, r4
 8001b02:	f7ff fe37 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	827b      	strh	r3, [r7, #18]
 8001b0a:	e07a      	b.n	8001c02 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d028      	beq.n	8001b66 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001b14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d108      	bne.n	8001b2e <lcd_ShowChar+0xae>
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	8a7b      	ldrh	r3, [r7, #18]
 8001b20:	493c      	ldr	r1, [pc, #240]	; (8001c14 <lcd_ShowChar+0x194>)
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	440a      	add	r2, r1
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	e01b      	b.n	8001b66 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d10b      	bne.n	8001b4e <lcd_ShowChar+0xce>
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	8a79      	ldrh	r1, [r7, #18]
 8001b3a:	4837      	ldr	r0, [pc, #220]	; (8001c18 <lcd_ShowChar+0x198>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4403      	add	r3, r0
 8001b46:	440b      	add	r3, r1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	75fb      	strb	r3, [r7, #23]
 8001b4c:	e00b      	b.n	8001b66 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d15a      	bne.n	8001c0c <lcd_ShowChar+0x18c>
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	4930      	ldr	r1, [pc, #192]	; (8001c1c <lcd_ShowChar+0x19c>)
 8001b5c:	0192      	lsls	r2, r2, #6
 8001b5e:	440a      	add	r2, r1
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	75bb      	strb	r3, [r7, #22]
 8001b6a:	e044      	b.n	8001bf6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001b6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d120      	bne.n	8001bb6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001b74:	7dfa      	ldrb	r2, [r7, #23]
 8001b76:	7dbb      	ldrb	r3, [r7, #22]
 8001b78:	fa42 f303 	asr.w	r3, r2, r3
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <lcd_ShowChar+0x10e>
 8001b84:	883b      	ldrh	r3, [r7, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fdd2 	bl	8001730 <LCD_WR_DATA>
 8001b8c:	e003      	b.n	8001b96 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fdcd 	bl	8001730 <LCD_WR_DATA>
				m++;
 8001b96:	7d7b      	ldrb	r3, [r7, #21]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ba4:	fb01 f202 	mul.w	r2, r1, r2
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11f      	bne.n	8001bf0 <lcd_ShowChar+0x170>
				{
					m=0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	757b      	strb	r3, [r7, #21]
					break;
 8001bb4:	e022      	b.n	8001bfc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001bb6:	7dfa      	ldrb	r2, [r7, #23]
 8001bb8:	7dbb      	ldrb	r3, [r7, #22]
 8001bba:	fa42 f303 	asr.w	r3, r2, r3
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <lcd_ShowChar+0x152>
 8001bc6:	883a      	ldrh	r2, [r7, #0]
 8001bc8:	88b9      	ldrh	r1, [r7, #4]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe85 	bl	80018dc <lcd_DrawPoint>
				x++;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	8a3b      	ldrh	r3, [r7, #16]
 8001bdc:	1ad2      	subs	r2, r2, r3
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d105      	bne.n	8001bf0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001be4:	8a3b      	ldrh	r3, [r7, #16]
 8001be6:	80fb      	strh	r3, [r7, #6]
					y++;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	80bb      	strh	r3, [r7, #4]
					break;
 8001bee:	e005      	b.n	8001bfc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	75bb      	strb	r3, [r7, #22]
 8001bf6:	7dbb      	ldrb	r3, [r7, #22]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d9b7      	bls.n	8001b6c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001bfc:	8a7b      	ldrh	r3, [r7, #18]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	827b      	strh	r3, [r7, #18]
 8001c02:	8a7a      	ldrh	r2, [r7, #18]
 8001c04:	89bb      	ldrh	r3, [r7, #12]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d380      	bcc.n	8001b0c <lcd_ShowChar+0x8c>
 8001c0a:	e000      	b.n	8001c0e <lcd_ShowChar+0x18e>
		else return;
 8001c0c:	bf00      	nop
				}
			}
		}
	}
}
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	08009c44 	.word	0x08009c44
 8001c18:	0800a234 	.word	0x0800a234
 8001c1c:	0800b404 	.word	0x0800b404

08001c20 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4604      	mov	r4, r0
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	80fb      	strh	r3, [r7, #6]
 8001c32:	4603      	mov	r3, r0
 8001c34:	80bb      	strh	r3, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29c      	uxth	r4, r3
 8001c4e:	88ba      	ldrh	r2, [r7, #4]
 8001c50:	883b      	ldrh	r3, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	88b9      	ldrh	r1, [r7, #4]
 8001c5c:	88f8      	ldrh	r0, [r7, #6]
 8001c5e:	4622      	mov	r2, r4
 8001c60:	f7ff fd88 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	82fb      	strh	r3, [r7, #22]
 8001c68:	e027      	b.n	8001cba <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	82bb      	strh	r3, [r7, #20]
 8001c6e:	e01d      	b.n	8001cac <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3301      	adds	r3, #1
 8001c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fd48 	bl	8001730 <LCD_WR_DATA>
			k++;
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001ca6:	8abb      	ldrh	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	82bb      	strh	r3, [r7, #20]
 8001cac:	8aba      	ldrh	r2, [r7, #20]
 8001cae:	883b      	ldrh	r3, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3dd      	bcc.n	8001c70 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001cb4:	8afb      	ldrh	r3, [r7, #22]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	82fb      	strh	r3, [r7, #22]
 8001cba:	8afa      	ldrh	r2, [r7, #22]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d3d3      	bcc.n	8001c6a <lcd_ShowPicture+0x4a>
		}
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}

08001ccc <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <lcd_SetDir+0x44>)
 8001ce8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cec:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <lcd_SetDir+0x44>)
 8001cf0:	22f0      	movs	r2, #240	; 0xf0
 8001cf2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001cf4:	e006      	b.n	8001d04 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <lcd_SetDir+0x44>)
 8001cf8:	22f0      	movs	r2, #240	; 0xf0
 8001cfa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <lcd_SetDir+0x44>)
 8001cfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d02:	805a      	strh	r2, [r3, #2]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	200001d4 	.word	0x200001d4

08001d14 <lcd_init>:


void lcd_init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1e:	48aa      	ldr	r0, [pc, #680]	; (8001fc8 <lcd_init+0x2b4>)
 8001d20:	f004 fbca 	bl	80064b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f004 f8f4 	bl	8005f14 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d32:	48a5      	ldr	r0, [pc, #660]	; (8001fc8 <lcd_init+0x2b4>)
 8001d34:	f004 fbc0 	bl	80064b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d3c:	f004 f8ea 	bl	8005f14 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff ffc3 	bl	8001ccc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001d46:	20d3      	movs	r0, #211	; 0xd3
 8001d48:	f7ff fce2 	bl	8001710 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001d4c:	f7ff fd00 	bl	8001750 <LCD_RD_DATA>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b9d      	ldr	r3, [pc, #628]	; (8001fcc <lcd_init+0x2b8>)
 8001d56:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d58:	f7ff fcfa 	bl	8001750 <LCD_RD_DATA>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b9a      	ldr	r3, [pc, #616]	; (8001fcc <lcd_init+0x2b8>)
 8001d62:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d64:	f7ff fcf4 	bl	8001750 <LCD_RD_DATA>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <lcd_init+0x2b8>)
 8001d6e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d70:	4b96      	ldr	r3, [pc, #600]	; (8001fcc <lcd_init+0x2b8>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <lcd_init+0x2b8>)
 8001d7a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d7c:	f7ff fce8 	bl	8001750 <LCD_RD_DATA>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <lcd_init+0x2b8>)
 8001d86:	889b      	ldrh	r3, [r3, #4]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b8f      	ldr	r3, [pc, #572]	; (8001fcc <lcd_init+0x2b8>)
 8001d8e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d90:	20cf      	movs	r0, #207	; 0xcf
 8001d92:	f7ff fcbd 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fcca 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d9c:	20c1      	movs	r0, #193	; 0xc1
 8001d9e:	f7ff fcc7 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001da2:	2030      	movs	r0, #48	; 0x30
 8001da4:	f7ff fcc4 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001da8:	20ed      	movs	r0, #237	; 0xed
 8001daa:	f7ff fcb1 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001dae:	2064      	movs	r0, #100	; 0x64
 8001db0:	f7ff fcbe 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f7ff fcbb 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001dba:	2012      	movs	r0, #18
 8001dbc:	f7ff fcb8 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001dc0:	2081      	movs	r0, #129	; 0x81
 8001dc2:	f7ff fcb5 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001dc6:	20e8      	movs	r0, #232	; 0xe8
 8001dc8:	f7ff fca2 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001dcc:	2085      	movs	r0, #133	; 0x85
 8001dce:	f7ff fcaf 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001dd2:	2010      	movs	r0, #16
 8001dd4:	f7ff fcac 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001dd8:	207a      	movs	r0, #122	; 0x7a
 8001dda:	f7ff fca9 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001dde:	20cb      	movs	r0, #203	; 0xcb
 8001de0:	f7ff fc96 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001de4:	2039      	movs	r0, #57	; 0x39
 8001de6:	f7ff fca3 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001dea:	202c      	movs	r0, #44	; 0x2c
 8001dec:	f7ff fca0 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fc9d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001df6:	2034      	movs	r0, #52	; 0x34
 8001df8:	f7ff fc9a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7ff fc97 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001e02:	20f7      	movs	r0, #247	; 0xf7
 8001e04:	f7ff fc84 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001e08:	2020      	movs	r0, #32
 8001e0a:	f7ff fc91 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001e0e:	20ea      	movs	r0, #234	; 0xea
 8001e10:	f7ff fc7e 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff fc8b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7ff fc88 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001e20:	20c0      	movs	r0, #192	; 0xc0
 8001e22:	f7ff fc75 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001e26:	201b      	movs	r0, #27
 8001e28:	f7ff fc82 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001e2c:	20c1      	movs	r0, #193	; 0xc1
 8001e2e:	f7ff fc6f 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff fc7c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001e38:	20c5      	movs	r0, #197	; 0xc5
 8001e3a:	f7ff fc69 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001e3e:	2030      	movs	r0, #48	; 0x30
 8001e40:	f7ff fc76 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001e44:	2030      	movs	r0, #48	; 0x30
 8001e46:	f7ff fc73 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001e4a:	20c7      	movs	r0, #199	; 0xc7
 8001e4c:	f7ff fc60 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001e50:	20b7      	movs	r0, #183	; 0xb7
 8001e52:	f7ff fc6d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001e56:	2036      	movs	r0, #54	; 0x36
 8001e58:	f7ff fc5a 	bl	8001710 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e5c:	2008      	movs	r0, #8
 8001e5e:	f7ff fc67 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e62:	203a      	movs	r0, #58	; 0x3a
 8001e64:	f7ff fc54 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e68:	2055      	movs	r0, #85	; 0x55
 8001e6a:	f7ff fc61 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e6e:	20b1      	movs	r0, #177	; 0xb1
 8001e70:	f7ff fc4e 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fc5b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e7a:	201a      	movs	r0, #26
 8001e7c:	f7ff fc58 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e80:	20b6      	movs	r0, #182	; 0xb6
 8001e82:	f7ff fc45 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e86:	200a      	movs	r0, #10
 8001e88:	f7ff fc52 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e8c:	20a2      	movs	r0, #162	; 0xa2
 8001e8e:	f7ff fc4f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e92:	20f2      	movs	r0, #242	; 0xf2
 8001e94:	f7ff fc3c 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fc49 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e9e:	2026      	movs	r0, #38	; 0x26
 8001ea0:	f7ff fc36 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff fc43 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001eaa:	20e0      	movs	r0, #224	; 0xe0
 8001eac:	f7ff fc30 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001eb0:	200f      	movs	r0, #15
 8001eb2:	f7ff fc3d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001eb6:	202a      	movs	r0, #42	; 0x2a
 8001eb8:	f7ff fc3a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ebc:	2028      	movs	r0, #40	; 0x28
 8001ebe:	f7ff fc37 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ec2:	2008      	movs	r0, #8
 8001ec4:	f7ff fc34 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001ec8:	200e      	movs	r0, #14
 8001eca:	f7ff fc31 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ece:	2008      	movs	r0, #8
 8001ed0:	f7ff fc2e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ed4:	2054      	movs	r0, #84	; 0x54
 8001ed6:	f7ff fc2b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001eda:	20a9      	movs	r0, #169	; 0xa9
 8001edc:	f7ff fc28 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ee0:	2043      	movs	r0, #67	; 0x43
 8001ee2:	f7ff fc25 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001ee6:	200a      	movs	r0, #10
 8001ee8:	f7ff fc22 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eec:	200f      	movs	r0, #15
 8001eee:	f7ff fc1f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fc1c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fc19 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fc16 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fc13 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001f0a:	20e1      	movs	r0, #225	; 0xe1
 8001f0c:	f7ff fc00 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fc0d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001f16:	2015      	movs	r0, #21
 8001f18:	f7ff fc0a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001f1c:	2017      	movs	r0, #23
 8001f1e:	f7ff fc07 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001f22:	2007      	movs	r0, #7
 8001f24:	f7ff fc04 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001f28:	2011      	movs	r0, #17
 8001f2a:	f7ff fc01 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001f2e:	2006      	movs	r0, #6
 8001f30:	f7ff fbfe 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001f34:	202b      	movs	r0, #43	; 0x2b
 8001f36:	f7ff fbfb 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001f3a:	2056      	movs	r0, #86	; 0x56
 8001f3c:	f7ff fbf8 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001f40:	203c      	movs	r0, #60	; 0x3c
 8001f42:	f7ff fbf5 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001f46:	2005      	movs	r0, #5
 8001f48:	f7ff fbf2 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f4c:	2010      	movs	r0, #16
 8001f4e:	f7ff fbef 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f7ff fbec 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f58:	203f      	movs	r0, #63	; 0x3f
 8001f5a:	f7ff fbe9 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f5e:	203f      	movs	r0, #63	; 0x3f
 8001f60:	f7ff fbe6 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f64:	200f      	movs	r0, #15
 8001f66:	f7ff fbe3 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f6a:	202b      	movs	r0, #43	; 0x2b
 8001f6c:	f7ff fbd0 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff fbdd 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff fbda 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff fbd7 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f82:	203f      	movs	r0, #63	; 0x3f
 8001f84:	f7ff fbd4 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f88:	202a      	movs	r0, #42	; 0x2a
 8001f8a:	f7ff fbc1 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fbce 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fbcb 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fbc8 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001fa0:	20ef      	movs	r0, #239	; 0xef
 8001fa2:	f7ff fbc5 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001fa6:	2011      	movs	r0, #17
 8001fa8:	f7ff fbb2 	bl	8001710 <LCD_WR_REG>
	HAL_Delay(120);
 8001fac:	2078      	movs	r0, #120	; 0x78
 8001fae:	f003 ffb1 	bl	8005f14 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001fb2:	2029      	movs	r0, #41	; 0x29
 8001fb4:	f7ff fbac 	bl	8001710 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <lcd_init+0x2bc>)
 8001fc0:	f004 fa7a 	bl	80064b8 <HAL_GPIO_WritePin>
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	200001d4 	.word	0x200001d4
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b08b      	sub	sp, #44	; 0x2c
 8001fd8:	af04      	add	r7, sp, #16
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	81fb      	strh	r3, [r7, #14]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	81bb      	strh	r3, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001ff2:	e048      	b.n	8002086 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d145      	bne.n	8002086 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ffa:	89fa      	ldrh	r2, [r7, #14]
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <lcd_ShowStr+0xc4>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	429a      	cmp	r2, r3
 800200e:	dc3f      	bgt.n	8002090 <lcd_ShowStr+0xbc>
 8002010:	89ba      	ldrh	r2, [r7, #12]
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <lcd_ShowStr+0xc4>)
 8002014:	885b      	ldrh	r3, [r3, #2]
 8002016:	4619      	mov	r1, r3
 8002018:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800201c:	1acb      	subs	r3, r1, r3
 800201e:	429a      	cmp	r2, r3
 8002020:	dc36      	bgt.n	8002090 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b80      	cmp	r3, #128	; 0x80
 8002028:	d902      	bls.n	8002030 <lcd_ShowStr+0x5c>
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
 800202e:	e02a      	b.n	8002086 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b0d      	cmp	r3, #13
 8002036:	d10b      	bne.n	8002050 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002038:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800203c:	b29a      	uxth	r2, r3
 800203e:	89bb      	ldrh	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002044:	8abb      	ldrh	r3, [r7, #20]
 8002046:	81fb      	strh	r3, [r7, #14]
					str++;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3301      	adds	r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	e017      	b.n	8002080 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	88fc      	ldrh	r4, [r7, #6]
 8002056:	89b9      	ldrh	r1, [r7, #12]
 8002058:	89f8      	ldrh	r0, [r7, #14]
 800205a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4623      	mov	r3, r4
 800206c:	f7ff fd08 	bl	8001a80 <lcd_ShowChar>
					x+=sizey/2;
 8002070:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	b29a      	uxth	r2, r3
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	4413      	add	r3, r2
 800207e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3301      	adds	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1b2      	bne.n	8001ff4 <lcd_ShowStr+0x20>
 800208e:	e000      	b.n	8002092 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002090:	bf00      	nop
			}
		}
	}
}
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	200001d4 	.word	0x200001d4

0800209c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af04      	add	r7, sp, #16
 80020a2:	60ba      	str	r2, [r7, #8]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	81fb      	strh	r3, [r7, #14]
 80020aa:	460b      	mov	r3, r1
 80020ac:	81bb      	strh	r3, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f7fe f88c 	bl	80001d0 <strlen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <lcd_StrCenter+0x60>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	8afb      	ldrh	r3, [r7, #22]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	0fda      	lsrs	r2, r3, #31
 80020ca:	4413      	add	r3, r2
 80020cc:	105b      	asrs	r3, r3, #1
 80020ce:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80020d0:	89fa      	ldrh	r2, [r7, #14]
 80020d2:	8abb      	ldrh	r3, [r7, #20]
 80020d4:	4413      	add	r3, r2
 80020d6:	b298      	uxth	r0, r3
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	89b9      	ldrh	r1, [r7, #12]
 80020dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	8c3b      	ldrh	r3, [r7, #32]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f7ff ff70 	bl	8001fd4 <lcd_ShowStr>
}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200001d4 	.word	0x200001d4

08002100 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002104:	2201      	movs	r2, #1
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <led7_init+0x14>)
 800210a:	f004 f9d5 	bl	80064b8 <HAL_GPIO_WritePin>
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40021800 	.word	0x40021800

08002118 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <led7_Scan+0x104>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	4b3d      	ldr	r3, [pc, #244]	; (800221c <led7_Scan+0x104>)
 8002126:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002128:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <led7_Scan+0x108>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <led7_Scan+0x10c>)
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <led7_Scan+0x104>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <led7_Scan+0x104>)
 8002144:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002146:	4b36      	ldr	r3, [pc, #216]	; (8002220 <led7_Scan+0x108>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d846      	bhi.n	80021dc <led7_Scan+0xc4>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <led7_Scan+0x3c>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	08002183 	.word	0x08002183
 800215c:	080021a1 	.word	0x080021a1
 8002160:	080021bf 	.word	0x080021bf
	case 0:
		spi_buffer |= 0x00b0;
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <led7_Scan+0x104>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800216c:	b29a      	uxth	r2, r3
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <led7_Scan+0x104>)
 8002170:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <led7_Scan+0x104>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <led7_Scan+0x104>)
 800217e:	801a      	strh	r2, [r3, #0]
		break;
 8002180:	e02d      	b.n	80021de <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <led7_Scan+0x104>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <led7_Scan+0x104>)
 800218e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <led7_Scan+0x104>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	f023 0320 	bic.w	r3, r3, #32
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <led7_Scan+0x104>)
 800219c:	801a      	strh	r2, [r3, #0]
		break;
 800219e:	e01e      	b.n	80021de <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <led7_Scan+0x104>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <led7_Scan+0x104>)
 80021ac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <led7_Scan+0x104>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f023 0310 	bic.w	r3, r3, #16
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <led7_Scan+0x104>)
 80021ba:	801a      	strh	r2, [r3, #0]
		break;
 80021bc:	e00f      	b.n	80021de <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <led7_Scan+0x104>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <led7_Scan+0x104>)
 80021ca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <led7_Scan+0x104>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <led7_Scan+0x104>)
 80021d8:	801a      	strh	r2, [r3, #0]
		break;
 80021da:	e000      	b.n	80021de <led7_Scan+0xc6>
	default:
		break;
 80021dc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <led7_Scan+0x108>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	425a      	negs	r2, r3
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	bf58      	it	pl
 80021f0:	4253      	negpl	r3, r2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <led7_Scan+0x108>)
 80021f6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <led7_Scan+0x110>)
 80021fe:	f004 f95b 	bl	80064b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002202:	2301      	movs	r3, #1
 8002204:	2202      	movs	r2, #2
 8002206:	4905      	ldr	r1, [pc, #20]	; (800221c <led7_Scan+0x104>)
 8002208:	4808      	ldr	r0, [pc, #32]	; (800222c <led7_Scan+0x114>)
 800220a:	f004 fe5c 	bl	8006ec6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800220e:	2201      	movs	r2, #1
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <led7_Scan+0x110>)
 8002214:	f004 f950 	bl	80064b8 <HAL_GPIO_WritePin>
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000096 	.word	0x20000096
 8002220:	200001da 	.word	0x200001da
 8002224:	20000088 	.word	0x20000088
 8002228:	40021800 	.word	0x40021800
 800222c:	2000294c 	.word	0x2000294c

08002230 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db0e      	blt.n	8002262 <led7_SetDigit+0x32>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b09      	cmp	r3, #9
 8002248:	dc0b      	bgt.n	8002262 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <led7_SetDigit+0x40>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	b2d9      	uxtb	r1, r3
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <led7_SetDigit+0x44>)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	460a      	mov	r2, r1
 8002260:	701a      	strb	r2, [r3, #0]
	}
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000008c 	.word	0x2000008c
 8002274:	20000088 	.word	0x20000088

08002278 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <led7_SetColon+0x20>
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <led7_SetColon+0x3c>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f023 0308 	bic.w	r3, r3, #8
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <led7_SetColon+0x3c>)
 8002294:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002296:	e006      	b.n	80022a6 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <led7_SetColon+0x3c>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <led7_SetColon+0x3c>)
 80022a4:	801a      	strh	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000096 	.word	0x20000096

080022b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022bc:	f003 fdb8 	bl	8005e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c0:	f000 f888 	bl	80023d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c4:	f7ff f92c 	bl	8001520 <MX_GPIO_Init>
  MX_TIM2_Init();
 80022c8:	f003 fb94 	bl	80059f4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80022cc:	f002 f95a 	bl	8004584 <MX_SPI1_Init>
  MX_FSMC_Init();
 80022d0:	f7fe fdc2 	bl	8000e58 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80022d4:	f000 f8e8 	bl	80024a8 <system_init>
  lcd_Clear(WHITE);
 80022d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022dc:	f7ff fa96 	bl	800180c <lcd_Clear>
  test_lcd();
 80022e0:	f000 f90a 	bl	80024f8 <test_lcd>
//  lcd_Fill(0,  0, 240,  70, RED);
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {
    // lcd_Clear(WHITE);
	   if (flagForButton)
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <main+0xf8>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <main+0x42>
	   {
		   flagForButton= 0;
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <main+0xf8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 80022f2:	f7fe fb25 	bl	8000940 <button_Scan>
		   beginStartGame();
 80022f6:	f002 fd0d 	bl	8004d14 <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <main+0xfc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d007      	beq.n	8002312 <main+0x5a>
 8002302:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <main+0xfc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d003      	beq.n	8002312 <main+0x5a>
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <main+0xfc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d118      	bne.n	8002344 <main+0x8c>
	   {
		   generateFruit();
 8002312:	f001 fbf9 	bl	8003b08 <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <main+0xfc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b05      	cmp	r3, #5
 800231c:	d108      	bne.n	8002330 <main+0x78>
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <main+0x100>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <main+0x78>
		   {
			   generateWall();
 8002326:	f001 fd13 	bl	8003d50 <generateWall>
			   flagForGenerateWall = 0;
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <main+0x100>)
 800232c:	2200      	movs	r2, #0
 800232e:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <main+0x104>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <main+0x92>
		   {
			   flagForSnakeRun= 0;
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <main+0x104>)
 800233a:	2200      	movs	r2, #0
 800233c:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 800233e:	f001 fab7 	bl	80038b0 <snakeRun>
		   if (flagForSnakeRun)
 8002342:	e002      	b.n	800234a <main+0x92>
		   }
	  }else{
		  flagForSnakeRun = 0;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <main+0x104>)
 8002346:	2200      	movs	r2, #0
 8002348:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <main+0xfc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b07      	cmp	r3, #7
 8002350:	d101      	bne.n	8002356 <main+0x9e>
	  {
		  pickOver();
 8002352:	f7ff f875 	bl	8001440 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <main+0xfc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b06      	cmp	r3, #6
 800235c:	d101      	bne.n	8002362 <main+0xaa>
	  {
		  pickStop();
 800235e:	f003 fa09 	bl	8005774 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <main+0xfc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b0a      	cmp	r3, #10
 8002368:	d101      	bne.n	800236e <main+0xb6>
	  {
		  askToExit();
 800236a:	f7fe fd2d 	bl	8000dc8 <askToExit>
	  }
	  if(flagForTiming == 1)
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <main+0x108>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10b      	bne.n	800238e <main+0xd6>
	  {
		  flagForTiming = 0;
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <main+0x108>)
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <main+0xfc>)
 800237e:	2207      	movs	r2, #7
 8002380:	601a      	str	r2, [r3, #0]
		  initOverMode(" TIME OUT ");
 8002382:	4810      	ldr	r0, [pc, #64]	; (80023c4 <main+0x10c>)
 8002384:	f7ff f898 	bl	80014b8 <initOverMode>
		  arrowMode = NORMALMODE;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <main+0x110>)
 800238a:	2203      	movs	r2, #3
 800238c:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <main+0x114>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d1a6      	bne.n	80022e4 <main+0x2c>
	  {
		  TIMING--;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <main+0x118>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <main+0x118>)
 80023a0:	801a      	strh	r2, [r3, #0]
		  showTiming();
 80023a2:	f003 fcaf 	bl	8005d04 <showTiming>
		  setTimerDeTime(1000);
 80023a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023aa:	f002 f80d 	bl	80043c8 <setTimerDeTime>
	   if (flagForButton)
 80023ae:	e799      	b.n	80022e4 <main+0x2c>
 80023b0:	20002928 	.word	0x20002928
 80023b4:	200001bc 	.word	0x200001bc
 80023b8:	20002946 	.word	0x20002946
 80023bc:	2000292e 	.word	0x2000292e
 80023c0:	20002934 	.word	0x20002934
 80023c4:	08009a50 	.word	0x08009a50
 80023c8:	20000014 	.word	0x20000014
 80023cc:	20002940 	.word	0x20002940
 80023d0:	20000000 	.word	0x20000000

080023d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b094      	sub	sp, #80	; 0x50
 80023d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023da:	f107 0320 	add.w	r3, r7, #32
 80023de:	2230      	movs	r2, #48	; 0x30
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f006 f84e 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <SystemClock_Config+0xcc>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <SystemClock_Config+0xcc>)
 8002402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002406:	6413      	str	r3, [r2, #64]	; 0x40
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <SystemClock_Config+0xcc>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002414:	2300      	movs	r3, #0
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <SystemClock_Config+0xd0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <SystemClock_Config+0xd0>)
 800241e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <SystemClock_Config+0xd0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002434:	2301      	movs	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002438:	2310      	movs	r3, #16
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800243c:	2302      	movs	r3, #2
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002444:	2308      	movs	r3, #8
 8002446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002448:	23a8      	movs	r3, #168	; 0xa8
 800244a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800244c:	2302      	movs	r3, #2
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002450:	2304      	movs	r3, #4
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002454:	f107 0320 	add.w	r3, r7, #32
 8002458:	4618      	mov	r0, r3
 800245a:	f004 f847 	bl	80064ec <HAL_RCC_OscConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002464:	f000 f866 	bl	8002534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002468:	230f      	movs	r3, #15
 800246a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246c:	2302      	movs	r3, #2
 800246e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800247a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800247e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2105      	movs	r1, #5
 8002486:	4618      	mov	r0, r3
 8002488:	f004 faa8 	bl	80069dc <HAL_RCC_ClockConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002492:	f000 f84f 	bl	8002534 <Error_Handler>
  }
}
 8002496:	bf00      	nop
 8002498:	3750      	adds	r7, #80	; 0x50
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000

080024a8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2120      	movs	r1, #32
 80024b0:	4810      	ldr	r0, [pc, #64]	; (80024f4 <system_init+0x4c>)
 80024b2:	f004 f801 	bl	80064b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	480e      	ldr	r0, [pc, #56]	; (80024f4 <system_init+0x4c>)
 80024bc:	f003 fffc 	bl	80064b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2110      	movs	r1, #16
 80024c4:	480b      	ldr	r0, [pc, #44]	; (80024f4 <system_init+0x4c>)
 80024c6:	f003 fff7 	bl	80064b8 <HAL_GPIO_WritePin>
	  timer_init();
 80024ca:	f001 ff37 	bl	800433c <timer_init>
	  led7_init();
 80024ce:	f7ff fe17 	bl	8002100 <led7_init>
	  button_init();
 80024d2:	f7fe fa29 	bl	8000928 <button_init>
	  lcd_init();
 80024d6:	f7ff fc1d 	bl	8001d14 <lcd_init>
	  setTimerButton(50);
 80024da:	2032      	movs	r0, #50	; 0x32
 80024dc:	f001 ffac 	bl	8004438 <setTimerButton>
	  setTimerSnakeRun(300);
 80024e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024e4:	f001 ff34 	bl	8004350 <setTimerSnakeRun>
	  setTimerGenerateWall(2000);
 80024e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024ec:	f001 ff88 	bl	8004400 <setTimerGenerateWall>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000

080024f8 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 80024fe:	231f      	movs	r3, #31
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	231d      	movs	r3, #29
 8002504:	221d      	movs	r2, #29
 8002506:	2113      	movs	r1, #19
 8002508:	2013      	movs	r0, #19
 800250a:	f7ff f9b1 	bl	8001870 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 800250e:	2301      	movs	r3, #1
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	2310      	movs	r3, #16
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	231f      	movs	r3, #31
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <test_lcd+0x38>)
 8002520:	2164      	movs	r1, #100	; 0x64
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fdba 	bl	800209c <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	08009a5c 	.word	0x08009a5c

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002538:	b672      	cpsid	i
}
 800253a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800253c:	e7fe      	b.n	800253c <Error_Handler+0x8>
	...

08002540 <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b090      	sub	sp, #64	; 0x40
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	f107 000c 	add.w	r0, r7, #12
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <convert2str+0x2c>)
 8002552:	2132      	movs	r1, #50	; 0x32
 8002554:	f006 f80a 	bl	800856c <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	4618      	mov	r0, r3
 800255e:	f006 f849 	bl	80085f4 <strdup>
 8002562:	4603      	mov	r3, r0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3740      	adds	r7, #64	; 0x40
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	08009a6c 	.word	0x08009a6c

08002570 <lcdDrawWall>:

void lcdDrawWall()
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b083      	sub	sp, #12
 8002574:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <lcdDrawWall+0x3c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b298      	uxth	r0, r3
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <lcdDrawWall+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b299      	uxth	r1, r3
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <lcdDrawWall+0x3c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b29c      	uxth	r4, r3
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <lcdDrawWall+0x40>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <lcdDrawWall+0x44>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	4413      	add	r3, r2
 8002596:	b29b      	uxth	r3, r3
 8002598:	2200      	movs	r2, #0
 800259a:	9200      	str	r2, [sp, #0]
 800259c:	4622      	mov	r2, r4
 800259e:	f7ff f967 	bl	8001870 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 80025a2:	bf00      	nop
 80025a4:	3704      	adds	r7, #4
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000018 	.word	0x20000018
 80025b0:	20000028 	.word	0x20000028
 80025b4:	20000038 	.word	0x20000038

080025b8 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b0a3      	sub	sp, #140	; 0x8c
 80025bc:	af04      	add	r7, sp, #16
 80025be:	4603      	mov	r3, r0
 80025c0:	460a      	mov	r2, r1
 80025c2:	80fb      	strh	r3, [r7, #6]
 80025c4:	4613      	mov	r3, r2
 80025c6:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80025c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025cc:	f7ff f91e 	bl	800180c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80025d0:	4b45      	ldr	r3, [pc, #276]	; (80026e8 <setUpLcdNormalPlay+0x130>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <setUpLcdNormalPlay+0x134>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	211f      	movs	r1, #31
 80025de:	9100      	str	r1, [sp, #0]
 80025e0:	2100      	movs	r1, #0
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff f944 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 80025e8:	2301      	movs	r3, #1
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	2310      	movs	r3, #16
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	231f      	movs	r3, #31
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025f8:	4a3d      	ldr	r2, [pc, #244]	; (80026f0 <setUpLcdNormalPlay+0x138>)
 80025fa:	2105      	movs	r1, #5
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff fce9 	bl	8001fd4 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002602:	4a3c      	ldr	r2, [pc, #240]	; (80026f4 <setUpLcdNormalPlay+0x13c>)
 8002604:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800260c:	6018      	str	r0, [r3, #0]
 800260e:	3304      	adds	r3, #4
 8002610:	7019      	strb	r1, [r3, #0]
 8002612:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002616:	222d      	movs	r2, #45	; 0x2d
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f005 ff32 	bl	8008484 <memset>
	char *str2 = convert2str(ID);
 8002620:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <setUpLcdNormalPlay+0x140>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff8b 	bl	8002540 <convert2str>
 800262a:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 800262c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002630:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002632:	4618      	mov	r0, r3
 8002634:	f005 ffce 	bl	80085d4 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <setUpLcdNormalPlay+0x144>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b298      	uxth	r0, r3
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <setUpLcdNormalPlay+0x148>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b299      	uxth	r1, r3
 8002644:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002648:	2301      	movs	r3, #1
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	2310      	movs	r3, #16
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800265a:	f7ff fcbb 	bl	8001fd4 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <setUpLcdNormalPlay+0x14c>)
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002668:	e883 0003 	stmia.w	r3, {r0, r1}
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	222a      	movs	r2, #42	; 0x2a
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f005 ff05 	bl	8008484 <memset>
	char *str4 = convert2str(SCORE);
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <setUpLcdNormalPlay+0x150>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff5e 	bl	8002540 <convert2str>
 8002684:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800268c:	4618      	mov	r0, r3
 800268e:	f005 ffa1 	bl	80085d4 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <setUpLcdNormalPlay+0x154>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b298      	uxth	r0, r3
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <setUpLcdNormalPlay+0x158>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3305      	adds	r3, #5
 80026a0:	b299      	uxth	r1, r3
 80026a2:	f107 0208 	add.w	r2, r7, #8
 80026a6:	2300      	movs	r3, #0
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	2310      	movs	r3, #16
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	231f      	movs	r3, #31
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026b6:	f7ff fc8d 	bl	8001fd4 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <setUpLcdNormalPlay+0x15c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b298      	uxth	r0, r3
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <setUpLcdNormalPlay+0x160>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b299      	uxth	r1, r3
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <setUpLcdNormalPlay+0x164>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <setUpLcdNormalPlay+0x168>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4c14      	ldr	r4, [pc, #80]	; (8002724 <setUpLcdNormalPlay+0x16c>)
 80026d4:	9400      	str	r4, [sp, #0]
 80026d6:	f7ff faa3 	bl	8001c20 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 80026da:	f7ff ff49 	bl	8002570 <lcdDrawWall>
}
 80026de:	bf00      	nop
 80026e0:	377c      	adds	r7, #124	; 0x7c
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000018 	.word	0x20000018
 80026ec:	20000028 	.word	0x20000028
 80026f0:	08009a70 	.word	0x08009a70
 80026f4:	08009a80 	.word	0x08009a80
 80026f8:	200001a8 	.word	0x200001a8
 80026fc:	20000064 	.word	0x20000064
 8002700:	20000068 	.word	0x20000068
 8002704:	08009ab4 	.word	0x08009ab4
 8002708:	200001aa 	.word	0x200001aa
 800270c:	2000006c 	.word	0x2000006c
 8002710:	20000070 	.word	0x20000070
 8002714:	20000074 	.word	0x20000074
 8002718:	20000078 	.word	0x20000078
 800271c:	2000007c 	.word	0x2000007c
 8002720:	20000080 	.word	0x20000080
 8002724:	0800cbc4 	.word	0x0800cbc4

08002728 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b0a3      	sub	sp, #140	; 0x8c
 800272c:	af04      	add	r7, sp, #16
 800272e:	4603      	mov	r3, r0
 8002730:	460a      	mov	r2, r1
 8002732:	80fb      	strh	r3, [r7, #6]
 8002734:	4613      	mov	r3, r2
 8002736:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002738:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800273c:	f7ff f866 	bl	800180c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002740:	4b44      	ldr	r3, [pc, #272]	; (8002854 <setUpLcdTimingPlay+0x12c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <setUpLcdTimingPlay+0x130>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	211f      	movs	r1, #31
 800274e:	9100      	str	r1, [sp, #0]
 8002750:	2100      	movs	r1, #0
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff f88c 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 8002758:	2301      	movs	r3, #1
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	2310      	movs	r3, #16
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	231f      	movs	r3, #31
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002768:	4a3c      	ldr	r2, [pc, #240]	; (800285c <setUpLcdTimingPlay+0x134>)
 800276a:	2105      	movs	r1, #5
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fc31 	bl	8001fd4 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002772:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <setUpLcdTimingPlay+0x138>)
 8002774:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277c:	6018      	str	r0, [r3, #0]
 800277e:	3304      	adds	r3, #4
 8002780:	7019      	strb	r1, [r3, #0]
 8002782:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002786:	222d      	movs	r2, #45	; 0x2d
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f005 fe7a 	bl	8008484 <memset>
	char *str2 = convert2str(ID);
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <setUpLcdTimingPlay+0x13c>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fed3 	bl	8002540 <convert2str>
 800279a:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 800279c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80027a2:	4618      	mov	r0, r3
 80027a4:	f005 ff16 	bl	80085d4 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <setUpLcdTimingPlay+0x140>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b298      	uxth	r0, r3
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <setUpLcdTimingPlay+0x144>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b299      	uxth	r1, r3
 80027b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027b8:	2301      	movs	r3, #1
 80027ba:	9302      	str	r3, [sp, #8]
 80027bc:	2310      	movs	r3, #16
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027ca:	f7ff fc03 	bl	8001fd4 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 80027ce:	4a28      	ldr	r2, [pc, #160]	; (8002870 <setUpLcdTimingPlay+0x148>)
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	222a      	movs	r2, #42	; 0x2a
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f005 fe4d 	bl	8008484 <memset>
	char *str4 = convert2str(0);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff fea8 	bl	8002540 <convert2str>
 80027f0:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80027f8:	4618      	mov	r0, r3
 80027fa:	f005 feeb 	bl	80085d4 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <setUpLcdTimingPlay+0x14c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b298      	uxth	r0, r3
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <setUpLcdTimingPlay+0x150>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b299      	uxth	r1, r3
 800280a:	f107 0208 	add.w	r2, r7, #8
 800280e:	2301      	movs	r3, #1
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	2310      	movs	r3, #16
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002820:	f7ff fbd8 	bl	8001fd4 <lcd_ShowStr>

	showTiming();
 8002824:	f003 fa6e 	bl	8005d04 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <setUpLcdTimingPlay+0x154>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b298      	uxth	r0, r3
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <setUpLcdTimingPlay+0x158>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b299      	uxth	r1, r3
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <setUpLcdTimingPlay+0x15c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29a      	uxth	r2, r3
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <setUpLcdTimingPlay+0x160>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4c12      	ldr	r4, [pc, #72]	; (800288c <setUpLcdTimingPlay+0x164>)
 8002842:	9400      	str	r4, [sp, #0]
 8002844:	f7ff f9ec 	bl	8001c20 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002848:	f7ff fe92 	bl	8002570 <lcdDrawWall>
}
 800284c:	bf00      	nop
 800284e:	377c      	adds	r7, #124	; 0x7c
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	20000018 	.word	0x20000018
 8002858:	20000028 	.word	0x20000028
 800285c:	08009ae8 	.word	0x08009ae8
 8002860:	08009a80 	.word	0x08009a80
 8002864:	200001a8 	.word	0x200001a8
 8002868:	20000064 	.word	0x20000064
 800286c:	20000068 	.word	0x20000068
 8002870:	08009ab4 	.word	0x08009ab4
 8002874:	2000006c 	.word	0x2000006c
 8002878:	20000070 	.word	0x20000070
 800287c:	20000074 	.word	0x20000074
 8002880:	20000078 	.word	0x20000078
 8002884:	2000007c 	.word	0x2000007c
 8002888:	20000080 	.word	0x20000080
 800288c:	0800cbc4 	.word	0x0800cbc4

08002890 <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b0a3      	sub	sp, #140	; 0x8c
 8002894:	af04      	add	r7, sp, #16
 8002896:	4603      	mov	r3, r0
 8002898:	460a      	mov	r2, r1
 800289a:	80fb      	strh	r3, [r7, #6]
 800289c:	4613      	mov	r3, r2
 800289e:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80028a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028a4:	f7fe ffb2 	bl	800180c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80028a8:	4b44      	ldr	r3, [pc, #272]	; (80029bc <setUpLcdAdvancePlay+0x12c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <setUpLcdAdvancePlay+0x130>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	211f      	movs	r1, #31
 80028b6:	9100      	str	r1, [sp, #0]
 80028b8:	2100      	movs	r1, #0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe ffd8 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 80028c0:	2301      	movs	r3, #1
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	2310      	movs	r3, #16
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	231f      	movs	r3, #31
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028d0:	4a3c      	ldr	r2, [pc, #240]	; (80029c4 <setUpLcdAdvancePlay+0x134>)
 80028d2:	2105      	movs	r1, #5
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fb7d 	bl	8001fd4 <lcd_ShowStr>

	char str1[50] = "ID: ";
 80028da:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <setUpLcdAdvancePlay+0x138>)
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028e4:	6018      	str	r0, [r3, #0]
 80028e6:	3304      	adds	r3, #4
 80028e8:	7019      	strb	r1, [r3, #0]
 80028ea:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80028ee:	222d      	movs	r2, #45	; 0x2d
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fdc6 	bl	8008484 <memset>
	char *str2 = convert2str(ID);
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <setUpLcdAdvancePlay+0x13c>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe1f 	bl	8002540 <convert2str>
 8002902:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002908:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800290a:	4618      	mov	r0, r3
 800290c:	f005 fe62 	bl	80085d4 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <setUpLcdAdvancePlay+0x140>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b298      	uxth	r0, r3
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <setUpLcdAdvancePlay+0x144>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b299      	uxth	r1, r3
 800291c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002920:	2301      	movs	r3, #1
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	2310      	movs	r3, #16
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002932:	f7ff fb4f 	bl	8001fd4 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002936:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <setUpLcdAdvancePlay+0x148>)
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002940:	e883 0003 	stmia.w	r3, {r0, r1}
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	222a      	movs	r2, #42	; 0x2a
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f005 fd99 	bl	8008484 <memset>
	char *str4 = convert2str(0);
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff fdf4 	bl	8002540 <convert2str>
 8002958:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002960:	4618      	mov	r0, r3
 8002962:	f005 fe37 	bl	80085d4 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <setUpLcdAdvancePlay+0x14c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b298      	uxth	r0, r3
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <setUpLcdAdvancePlay+0x150>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b299      	uxth	r1, r3
 8002972:	f107 0208 	add.w	r2, r7, #8
 8002976:	2301      	movs	r3, #1
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	2310      	movs	r3, #16
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002988:	f7ff fb24 	bl	8001fd4 <lcd_ShowStr>

	showTiming();
 800298c:	f003 f9ba 	bl	8005d04 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <setUpLcdAdvancePlay+0x154>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b298      	uxth	r0, r3
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <setUpLcdAdvancePlay+0x158>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b299      	uxth	r1, r3
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <setUpLcdAdvancePlay+0x15c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <setUpLcdAdvancePlay+0x160>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4c12      	ldr	r4, [pc, #72]	; (80029f4 <setUpLcdAdvancePlay+0x164>)
 80029aa:	9400      	str	r4, [sp, #0]
 80029ac:	f7ff f938 	bl	8001c20 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 80029b0:	f7ff fdde 	bl	8002570 <lcdDrawWall>
}
 80029b4:	bf00      	nop
 80029b6:	377c      	adds	r7, #124	; 0x7c
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	20000018 	.word	0x20000018
 80029c0:	20000028 	.word	0x20000028
 80029c4:	08009af8 	.word	0x08009af8
 80029c8:	08009a80 	.word	0x08009a80
 80029cc:	200001a8 	.word	0x200001a8
 80029d0:	20000064 	.word	0x20000064
 80029d4:	20000068 	.word	0x20000068
 80029d8:	08009ab4 	.word	0x08009ab4
 80029dc:	2000006c 	.word	0x2000006c
 80029e0:	20000070 	.word	0x20000070
 80029e4:	20000074 	.word	0x20000074
 80029e8:	20000078 	.word	0x20000078
 80029ec:	2000007c 	.word	0x2000007c
 80029f0:	20000080 	.word	0x20000080
 80029f4:	0800cbc4 	.word	0x0800cbc4

080029f8 <printScore>:

void printScore()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b094      	sub	sp, #80	; 0x50
 80029fc:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <printScore+0xd4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d12a      	bne.n	8002a5c <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <printScore+0xd8>)
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	222a      	movs	r2, #42	; 0x2a
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 fd32 	bl	8008484 <memset>
		char *str4 = convert2str(SCORE);
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <printScore+0xdc>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fd8b 	bl	8002540 <convert2str>
 8002a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a30:	4618      	mov	r0, r3
 8002a32:	f005 fdcf 	bl	80085d4 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 24, 0);
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <printScore+0xe0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b298      	uxth	r0, r3
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <printScore+0xe4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3305      	adds	r3, #5
 8002a44:	b299      	uxth	r1, r3
 8002a46:	1d3a      	adds	r2, r7, #4
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2318      	movs	r3, #24
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	231f      	movs	r3, #31
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a58:	f7ff fabc 	bl	8001fd4 <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <printScore+0xd4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d003      	beq.n	8002a6c <printScore+0x74>
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <printScore+0xd4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d12a      	bne.n	8002ac2 <printScore+0xca>
	{
		char str3[50] = "SCORE: ";
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <printScore+0xd8>)
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a74:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	222a      	movs	r2, #42	; 0x2a
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 fcff 	bl	8008484 <memset>
		char *str4 = convert2str(SCORE);
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <printScore+0xdc>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fd58 	bl	8002540 <convert2str>
 8002a90:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fd9c 	bl	80085d4 <strcat>
		lcd_ShowStr(scoreX, scoreY, str3, RED, BLUE, 16, 0);
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <printScore+0xe0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <printScore+0xe4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b299      	uxth	r1, r3
 8002aa8:	1d3a      	adds	r2, r7, #4
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	2310      	movs	r3, #16
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	231f      	movs	r3, #31
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aba:	f7ff fa8b 	bl	8001fd4 <lcd_ShowStr>

		showTiming();
 8002abe:	f003 f921 	bl	8005d04 <showTiming>
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	3740      	adds	r7, #64	; 0x40
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200001bc 	.word	0x200001bc
 8002ad0:	08009ab4 	.word	0x08009ab4
 8002ad4:	200001aa 	.word	0x200001aa
 8002ad8:	2000006c 	.word	0x2000006c
 8002adc:	20000070 	.word	0x20000070

08002ae0 <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 8002ae6:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <drawHeadSnake+0x244>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	f200 8114 	bhi.w	8002d18 <drawHeadSnake+0x238>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <drawHeadSnake+0x18>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002c91 	.word	0x08002c91
 8002afc:	08002c11 	.word	0x08002c11
 8002b00:	08002b89 	.word	0x08002b89
 8002b04:	08002b09 	.word	0x08002b09
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b08:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <drawHeadSnake+0x244>)
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <drawHeadSnake+0x244>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002b14:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <drawHeadSnake+0x244>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3309      	adds	r3, #9
 8002b1c:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002b1e:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <drawHeadSnake+0x244>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3309      	adds	r3, #9
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002b2c:	9400      	str	r4, [sp, #0]
 8002b2e:	f7fe fe9f 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b32:	4b7c      	ldr	r3, [pc, #496]	; (8002d24 <drawHeadSnake+0x244>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	b298      	uxth	r0, r3
 8002b38:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <drawHeadSnake+0x244>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002b3e:	4b79      	ldr	r3, [pc, #484]	; (8002d24 <drawHeadSnake+0x244>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3304      	adds	r3, #4
 8002b46:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002b48:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <drawHeadSnake+0x244>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3304      	adds	r3, #4
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2400      	movs	r4, #0
 8002b54:	9400      	str	r4, [sp, #0]
 8002b56:	f7fe fe8b 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <drawHeadSnake+0x244>)
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3305      	adds	r3, #5
 8002b62:	b298      	uxth	r0, r3
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <drawHeadSnake+0x244>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <drawHeadSnake+0x244>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3309      	adds	r3, #9
 8002b72:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002b74:	4b6b      	ldr	r3, [pc, #428]	; (8002d24 <drawHeadSnake+0x244>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2400      	movs	r4, #0
 8002b80:	9400      	str	r4, [sp, #0]
 8002b82:	f7fe fe75 	bl	8001870 <lcd_Fill>
		break;
 8002b86:	e0c8      	b.n	8002d1a <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b88:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <drawHeadSnake+0x244>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	b298      	uxth	r0, r3
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <drawHeadSnake+0x244>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <drawHeadSnake+0x244>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3309      	adds	r3, #9
 8002b9c:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002b9e:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <drawHeadSnake+0x244>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3309      	adds	r3, #9
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002bac:	9400      	str	r4, [sp, #0]
 8002bae:	f7fe fe5f 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <drawHeadSnake+0x244>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <drawHeadSnake+0x244>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3305      	adds	r3, #5
 8002bc0:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002bc2:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <drawHeadSnake+0x244>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3304      	adds	r3, #4
 8002bca:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002bcc:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <drawHeadSnake+0x244>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3309      	adds	r3, #9
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2400      	movs	r4, #0
 8002bd8:	9400      	str	r4, [sp, #0]
 8002bda:	f7fe fe49 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <drawHeadSnake+0x244>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3305      	adds	r3, #5
 8002be6:	b298      	uxth	r0, r3
 8002be8:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <drawHeadSnake+0x244>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3305      	adds	r3, #5
 8002bf0:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <drawHeadSnake+0x244>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3309      	adds	r3, #9
 8002bfa:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002bfc:	4b49      	ldr	r3, [pc, #292]	; (8002d24 <drawHeadSnake+0x244>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3309      	adds	r3, #9
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2400      	movs	r4, #0
 8002c08:	9400      	str	r4, [sp, #0]
 8002c0a:	f7fe fe31 	bl	8001870 <lcd_Fill>
		break;
 8002c0e:	e084      	b.n	8002d1a <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c10:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <drawHeadSnake+0x244>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	b298      	uxth	r0, r3
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <drawHeadSnake+0x244>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <drawHeadSnake+0x244>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3309      	adds	r3, #9
 8002c24:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <drawHeadSnake+0x244>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3309      	adds	r3, #9
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002c34:	9400      	str	r4, [sp, #0]
 8002c36:	f7fe fe1b 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <drawHeadSnake+0x244>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	b298      	uxth	r0, r3
 8002c40:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <drawHeadSnake+0x244>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <drawHeadSnake+0x244>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <drawHeadSnake+0x244>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3304      	adds	r3, #4
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	9400      	str	r4, [sp, #0]
 8002c5e:	f7fe fe07 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <drawHeadSnake+0x244>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	b298      	uxth	r0, r3
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <drawHeadSnake+0x244>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3305      	adds	r3, #5
 8002c70:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <drawHeadSnake+0x244>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3304      	adds	r3, #4
 8002c7a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <drawHeadSnake+0x244>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3309      	adds	r3, #9
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2400      	movs	r4, #0
 8002c88:	9400      	str	r4, [sp, #0]
 8002c8a:	f7fe fdf1 	bl	8001870 <lcd_Fill>
		break;
 8002c8e:	e044      	b.n	8002d1a <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <drawHeadSnake+0x244>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	b298      	uxth	r0, r3
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <drawHeadSnake+0x244>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <drawHeadSnake+0x244>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3309      	adds	r3, #9
 8002ca4:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <drawHeadSnake+0x244>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3309      	adds	r3, #9
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002cb4:	9400      	str	r4, [sp, #0]
 8002cb6:	f7fe fddb 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <drawHeadSnake+0x244>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3305      	adds	r3, #5
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <drawHeadSnake+0x244>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <drawHeadSnake+0x244>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3309      	adds	r3, #9
 8002cd2:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <drawHeadSnake+0x244>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3304      	adds	r3, #4
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2400      	movs	r4, #0
 8002ce0:	9400      	str	r4, [sp, #0]
 8002ce2:	f7fe fdc5 	bl	8001870 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <drawHeadSnake+0x244>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3305      	adds	r3, #5
 8002cee:	b298      	uxth	r0, r3
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <drawHeadSnake+0x244>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3305      	adds	r3, #5
 8002cf8:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <drawHeadSnake+0x244>)
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3309      	adds	r3, #9
 8002d02:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <drawHeadSnake+0x244>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3309      	adds	r3, #9
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2400      	movs	r4, #0
 8002d10:	9400      	str	r4, [sp, #0]
 8002d12:	f7fe fdad 	bl	8001870 <lcd_Fill>
		break;
 8002d16:	e000      	b.n	8002d1a <drawHeadSnake+0x23a>
	default:
		break;
 8002d18:	bf00      	nop
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	3704      	adds	r7, #4
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200001e0 	.word	0x200001e0

08002d28 <goLeft>:

void goLeft()
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <goLeft+0x168>)
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80a7 	bne.w	8002e86 <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <goLeft+0x168>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <goLeft+0x168>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4798      	blx	r3
			break;
 8002d46:	e09f      	b.n	8002e88 <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 8002d48:	4b51      	ldr	r3, [pc, #324]	; (8002e90 <goLeft+0x168>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e091      	b.n	8002e78 <goLeft+0x150>
			{
				if (i == 0)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d128      	bne.n	8002dac <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002d5a:	4a4d      	ldr	r2, [pc, #308]	; (8002e90 <goLeft+0x168>)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3305      	adds	r3, #5
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	f107 020c 	add.w	r2, r7, #12
 8002d68:	3304      	adds	r3, #4
 8002d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d6e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 8002d72:	4a47      	ldr	r2, [pc, #284]	; (8002e90 <goLeft+0x168>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3305      	adds	r3, #5
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f1a3 020a 	sub.w	r2, r3, #10
 8002d82:	4943      	ldr	r1, [pc, #268]	; (8002e90 <goLeft+0x168>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3305      	adds	r3, #5
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8002d8e:	4a40      	ldr	r2, [pc, #256]	; (8002e90 <goLeft+0x168>)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3305      	adds	r3, #5
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	493d      	ldr	r1, [pc, #244]	; (8002e90 <goLeft+0x168>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3305      	adds	r3, #5
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002da6:	f7ff fe9b 	bl	8002ae0 <drawHeadSnake>
 8002daa:	e062      	b.n	8002e72 <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002dac:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <goLeft+0x168>)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3305      	adds	r3, #5
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	1d3a      	adds	r2, r7, #4
 8002db8:	3304      	adds	r3, #4
 8002dba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dbe:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002dc2:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <goLeft+0x168>)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3305      	adds	r3, #5
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	f107 020c 	add.w	r2, r7, #12
 8002dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd6:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002dda:	f107 030c 	add.w	r3, r7, #12
 8002dde:	1d3a      	adds	r2, r7, #4
 8002de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002de4:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d123      	bne.n	8002e36 <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002dee:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <goLeft+0x168>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3305      	adds	r3, #5
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b298      	uxth	r0, r3
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <goLeft+0x168>)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3305      	adds	r3, #5
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002e0a:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <goLeft+0x168>)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3305      	adds	r3, #5
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3309      	adds	r3, #9
 8002e1a:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002e1c:	4c1c      	ldr	r4, [pc, #112]	; (8002e90 <goLeft+0x168>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3305      	adds	r3, #5
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4423      	add	r3, r4
 8002e26:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3309      	adds	r3, #9
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2400      	movs	r4, #0
 8002e30:	9400      	str	r4, [sp, #0]
 8002e32:	f7fe fd1d 	bl	8001870 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <goLeft+0x168>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d117      	bne.n	8002e72 <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <goLeft+0x168>)
 8002e44:	331c      	adds	r3, #28
 8002e46:	1d3a      	adds	r2, r7, #4
 8002e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e4c:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	b298      	uxth	r0, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	b299      	uxth	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3309      	adds	r3, #9
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3309      	adds	r3, #9
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002e6c:	9400      	str	r4, [sp, #0]
 8002e6e:	f7fe fcff 	bl	8001870 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <goLeft+0x168>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	f6ff af68 	blt.w	8002d54 <goLeft+0x2c>
					}
				}
			}
			break;
 8002e84:	e000      	b.n	8002e88 <goLeft+0x160>
		}
	}
 8002e86:	bf00      	nop
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	200001e0 	.word	0x200001e0

08002e94 <goRight>:

void goRight()
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002e9a:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <goRight+0x168>)
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 80a7 	bne.w	8002ff2 <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <goRight+0x168>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d103      	bne.n	8002eb4 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <goRight+0x168>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4798      	blx	r3
			break;
 8002eb2:	e09f      	b.n	8002ff4 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 8002eb4:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <goRight+0x168>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e091      	b.n	8002fe4 <goRight+0x150>
			{
				if (i == 0)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d128      	bne.n	8002f18 <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002ec6:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <goRight+0x168>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3305      	adds	r3, #5
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	f107 020c 	add.w	r2, r7, #12
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002eda:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 8002ede:	4a47      	ldr	r2, [pc, #284]	; (8002ffc <goRight+0x168>)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3305      	adds	r3, #5
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f103 020a 	add.w	r2, r3, #10
 8002eee:	4943      	ldr	r1, [pc, #268]	; (8002ffc <goRight+0x168>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3305      	adds	r3, #5
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8002efa:	4a40      	ldr	r2, [pc, #256]	; (8002ffc <goRight+0x168>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3305      	adds	r3, #5
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	493d      	ldr	r1, [pc, #244]	; (8002ffc <goRight+0x168>)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3305      	adds	r3, #5
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002f12:	f7ff fde5 	bl	8002ae0 <drawHeadSnake>
 8002f16:	e062      	b.n	8002fde <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002f18:	4a38      	ldr	r2, [pc, #224]	; (8002ffc <goRight+0x168>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3305      	adds	r3, #5
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	1d3a      	adds	r2, r7, #4
 8002f24:	3304      	adds	r3, #4
 8002f26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f2a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002f2e:	4a33      	ldr	r2, [pc, #204]	; (8002ffc <goRight+0x168>)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3305      	adds	r3, #5
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	f107 020c 	add.w	r2, r7, #12
 8002f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f42:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	1d3a      	adds	r2, r7, #4
 8002f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f50:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d123      	bne.n	8002fa2 <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002f5a:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <goRight+0x168>)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3305      	adds	r3, #5
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	b298      	uxth	r0, r3
 8002f68:	4a24      	ldr	r2, [pc, #144]	; (8002ffc <goRight+0x168>)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3305      	adds	r3, #5
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002f76:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <goRight+0x168>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3305      	adds	r3, #5
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3309      	adds	r3, #9
 8002f86:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002f88:	4c1c      	ldr	r4, [pc, #112]	; (8002ffc <goRight+0x168>)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3305      	adds	r3, #5
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4423      	add	r3, r4
 8002f92:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3309      	adds	r3, #9
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2400      	movs	r4, #0
 8002f9c:	9400      	str	r4, [sp, #0]
 8002f9e:	f7fe fc67 	bl	8001870 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <goRight+0x168>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d117      	bne.n	8002fde <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <goRight+0x168>)
 8002fb0:	331c      	adds	r3, #28
 8002fb2:	1d3a      	adds	r2, r7, #4
 8002fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fb8:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	b298      	uxth	r0, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	b299      	uxth	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3309      	adds	r3, #9
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3309      	adds	r3, #9
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002fd8:	9400      	str	r4, [sp, #0]
 8002fda:	f7fe fc49 	bl	8001870 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <goRight+0x168>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	f6ff af68 	blt.w	8002ec0 <goRight+0x2c>
					}
				}
			}
			break;
 8002ff0:	e000      	b.n	8002ff4 <goRight+0x160>
		}
	}
 8002ff2:	bf00      	nop
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	200001e0 	.word	0x200001e0

08003000 <goUp>:

void goUp()
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003006:	4b58      	ldr	r3, [pc, #352]	; (8003168 <goUp+0x168>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 80a7 	bne.w	800315e <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003010:	4b55      	ldr	r3, [pc, #340]	; (8003168 <goUp+0x168>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d103      	bne.n	8003020 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <goUp+0x168>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4798      	blx	r3
			break;
 800301e:	e09f      	b.n	8003160 <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 8003020:	4b51      	ldr	r3, [pc, #324]	; (8003168 <goUp+0x168>)
 8003022:	2203      	movs	r2, #3
 8003024:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e091      	b.n	8003150 <goUp+0x150>
			{
				if (i == 0)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d128      	bne.n	8003084 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003032:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <goUp+0x168>)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3305      	adds	r3, #5
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	f107 020c 	add.w	r2, r7, #12
 8003040:	3304      	adds	r3, #4
 8003042:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003046:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 800304a:	4a47      	ldr	r2, [pc, #284]	; (8003168 <goUp+0x168>)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3305      	adds	r3, #5
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4944      	ldr	r1, [pc, #272]	; (8003168 <goUp+0x168>)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3305      	adds	r3, #5
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 8003062:	4a41      	ldr	r2, [pc, #260]	; (8003168 <goUp+0x168>)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3305      	adds	r3, #5
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f1a3 020a 	sub.w	r2, r3, #10
 8003072:	493d      	ldr	r1, [pc, #244]	; (8003168 <goUp+0x168>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3305      	adds	r3, #5
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800307e:	f7ff fd2f 	bl	8002ae0 <drawHeadSnake>
 8003082:	e062      	b.n	800314a <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003084:	4a38      	ldr	r2, [pc, #224]	; (8003168 <goUp+0x168>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3305      	adds	r3, #5
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	1d3a      	adds	r2, r7, #4
 8003090:	3304      	adds	r3, #4
 8003092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003096:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800309a:	4a33      	ldr	r2, [pc, #204]	; (8003168 <goUp+0x168>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3305      	adds	r3, #5
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030ae:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	1d3a      	adds	r2, r7, #4
 80030b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030bc:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d123      	bne.n	800310e <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <goUp+0x168>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3305      	adds	r3, #5
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	b298      	uxth	r0, r3
 80030d4:	4a24      	ldr	r2, [pc, #144]	; (8003168 <goUp+0x168>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3305      	adds	r3, #5
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <goUp+0x168>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3305      	adds	r3, #5
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3309      	adds	r3, #9
 80030f2:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80030f4:	4c1c      	ldr	r4, [pc, #112]	; (8003168 <goUp+0x168>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3305      	adds	r3, #5
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4423      	add	r3, r4
 80030fe:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003100:	b29b      	uxth	r3, r3
 8003102:	3309      	adds	r3, #9
 8003104:	b29b      	uxth	r3, r3
 8003106:	2400      	movs	r4, #0
 8003108:	9400      	str	r4, [sp, #0]
 800310a:	f7fe fbb1 	bl	8001870 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <goUp+0x168>)
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	3b01      	subs	r3, #1
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	429a      	cmp	r2, r3
 8003118:	d117      	bne.n	800314a <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <goUp+0x168>)
 800311c:	331c      	adds	r3, #28
 800311e:	1d3a      	adds	r2, r7, #4
 8003120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003124:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	b298      	uxth	r0, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	b299      	uxth	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	b29b      	uxth	r3, r3
 8003134:	3309      	adds	r3, #9
 8003136:	b29a      	uxth	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	b29b      	uxth	r3, r3
 800313c:	3309      	adds	r3, #9
 800313e:	b29b      	uxth	r3, r3
 8003140:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003144:	9400      	str	r4, [sp, #0]
 8003146:	f7fe fb93 	bl	8001870 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <goUp+0x168>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	429a      	cmp	r2, r3
 8003158:	f6ff af68 	blt.w	800302c <goUp+0x2c>
					}
				}
			}
			break;
 800315c:	e000      	b.n	8003160 <goUp+0x160>
		}
	}
 800315e:	bf00      	nop
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	200001e0 	.word	0x200001e0

0800316c <goDown>:

void goDown()
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003172:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <goDown+0x168>)
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80a7 	bne.w	80032ca <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 800317c:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <goDown+0x168>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d103      	bne.n	800318c <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <goDown+0x168>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4798      	blx	r3
			break;
 800318a:	e09f      	b.n	80032cc <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 800318c:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <goDown+0x168>)
 800318e:	2202      	movs	r2, #2
 8003190:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e091      	b.n	80032bc <goDown+0x150>
			{
				if (i == 0)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d128      	bne.n	80031f0 <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800319e:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <goDown+0x168>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3305      	adds	r3, #5
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	f107 020c 	add.w	r2, r7, #12
 80031ac:	3304      	adds	r3, #4
 80031ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031b2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 80031b6:	4a47      	ldr	r2, [pc, #284]	; (80032d4 <goDown+0x168>)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3305      	adds	r3, #5
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4944      	ldr	r1, [pc, #272]	; (80032d4 <goDown+0x168>)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3305      	adds	r3, #5
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 80031ce:	4a41      	ldr	r2, [pc, #260]	; (80032d4 <goDown+0x168>)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3305      	adds	r3, #5
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f103 020a 	add.w	r2, r3, #10
 80031de:	493d      	ldr	r1, [pc, #244]	; (80032d4 <goDown+0x168>)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3305      	adds	r3, #5
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80031ea:	f7ff fc79 	bl	8002ae0 <drawHeadSnake>
 80031ee:	e062      	b.n	80032b6 <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80031f0:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <goDown+0x168>)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3305      	adds	r3, #5
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	1d3a      	adds	r2, r7, #4
 80031fc:	3304      	adds	r3, #4
 80031fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003202:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003206:	4a33      	ldr	r2, [pc, #204]	; (80032d4 <goDown+0x168>)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3305      	adds	r3, #5
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	f107 020c 	add.w	r2, r7, #12
 8003216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	1d3a      	adds	r2, r7, #4
 8003224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003228:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d123      	bne.n	800327a <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <goDown+0x168>)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3305      	adds	r3, #5
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	b298      	uxth	r0, r3
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <goDown+0x168>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3305      	adds	r3, #5
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <goDown+0x168>)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3305      	adds	r3, #5
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800325a:	b29b      	uxth	r3, r3
 800325c:	3309      	adds	r3, #9
 800325e:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003260:	4c1c      	ldr	r4, [pc, #112]	; (80032d4 <goDown+0x168>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3305      	adds	r3, #5
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4423      	add	r3, r4
 800326a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800326c:	b29b      	uxth	r3, r3
 800326e:	3309      	adds	r3, #9
 8003270:	b29b      	uxth	r3, r3
 8003272:	2400      	movs	r4, #0
 8003274:	9400      	str	r4, [sp, #0]
 8003276:	f7fe fafb 	bl	8001870 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <goDown+0x168>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	3b01      	subs	r3, #1
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	429a      	cmp	r2, r3
 8003284:	d117      	bne.n	80032b6 <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <goDown+0x168>)
 8003288:	331c      	adds	r3, #28
 800328a:	1d3a      	adds	r2, r7, #4
 800328c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003290:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	b298      	uxth	r0, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	b299      	uxth	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3309      	adds	r3, #9
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3309      	adds	r3, #9
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80032b0:	9400      	str	r4, [sp, #0]
 80032b2:	f7fe fadd 	bl	8001870 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <goDown+0x168>)
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	f6ff af68 	blt.w	8003198 <goDown+0x2c>
					}
				}
			}
			break;
 80032c8:	e000      	b.n	80032cc <goDown+0x160>
		}
	}
 80032ca:	bf00      	nop
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	200001e0 	.word	0x200001e0

080032d8 <resumeGame>:

void resumeGame()
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b087      	sub	sp, #28
 80032dc:	af02      	add	r7, sp, #8
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 80032de:	4b75      	ldr	r3, [pc, #468]	; (80034b4 <resumeGame+0x1dc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <resumeGame+0x1e0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	b299      	uxth	r1, r3
 80032ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032f8:	22f0      	movs	r2, #240	; 0xf0
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fe fab8 	bl	8001870 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e02c      	b.n	8003360 <resumeGame+0x88>
	{
		if (i == 0)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <resumeGame+0x3a>
			drawHeadSnake();
 800330c:	f7ff fbe8 	bl	8002ae0 <drawHeadSnake>
 8003310:	e023      	b.n	800335a <resumeGame+0x82>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003312:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <resumeGame+0x1e4>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3305      	adds	r3, #5
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b298      	uxth	r0, r3
 8003320:	4a66      	ldr	r2, [pc, #408]	; (80034bc <resumeGame+0x1e4>)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3305      	adds	r3, #5
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800332e:	4a63      	ldr	r2, [pc, #396]	; (80034bc <resumeGame+0x1e4>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3305      	adds	r3, #5
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800333a:	b29b      	uxth	r3, r3
 800333c:	3309      	adds	r3, #9
 800333e:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003340:	4c5e      	ldr	r4, [pc, #376]	; (80034bc <resumeGame+0x1e4>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3305      	adds	r3, #5
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4423      	add	r3, r4
 800334a:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800334c:	b29b      	uxth	r3, r3
 800334e:	3309      	adds	r3, #9
 8003350:	b29b      	uxth	r3, r3
 8003352:	2400      	movs	r4, #0
 8003354:	9400      	str	r4, [sp, #0]
 8003356:	f7fe fa8b 	bl	8001870 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <resumeGame+0x1e4>)
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	429a      	cmp	r2, r3
 8003368:	dbcd      	blt.n	8003306 <resumeGame+0x2e>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	e07e      	b.n	800346e <resumeGame+0x196>
	{
		int X = wallObject.infoWall[i].x;
 8003370:	4953      	ldr	r1, [pc, #332]	; (80034c0 <resumeGame+0x1e8>)
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 8003382:	494f      	ldr	r1, [pc, #316]	; (80034c0 <resumeGame+0x1e8>)
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3304      	adds	r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	b298      	uxth	r0, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b299      	uxth	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3309      	adds	r3, #9
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3309      	adds	r3, #9
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80033b2:	9400      	str	r4, [sp, #0]
 80033b4:	f7fe fa5c 	bl	8001870 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 80033b8:	4941      	ldr	r1, [pc, #260]	; (80034c0 <resumeGame+0x1e8>)
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3308      	adds	r3, #8
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d126      	bne.n	800341c <resumeGame+0x144>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	b298      	uxth	r0, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	330a      	adds	r3, #10
 80033d8:	b299      	uxth	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3309      	adds	r3, #9
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3313      	adds	r3, #19
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80033ee:	9400      	str	r4, [sp, #0]
 80033f0:	f7fe fa3e 	bl	8001870 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	b298      	uxth	r0, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b0a      	subs	r3, #10
 80033fe:	b299      	uxth	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	b29b      	uxth	r3, r3
 8003404:	3309      	adds	r3, #9
 8003406:	b29a      	uxth	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29b      	uxth	r3, r3
 8003410:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003414:	9400      	str	r4, [sp, #0]
 8003416:	f7fe fa2b 	bl	8001870 <lcd_Fill>
 800341a:	e025      	b.n	8003468 <resumeGame+0x190>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	b29b      	uxth	r3, r3
 8003420:	330a      	adds	r3, #10
 8003422:	b298      	uxth	r0, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b299      	uxth	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	b29b      	uxth	r3, r3
 800342c:	3313      	adds	r3, #19
 800342e:	b29a      	uxth	r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	3309      	adds	r3, #9
 8003436:	b29b      	uxth	r3, r3
 8003438:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800343c:	9400      	str	r4, [sp, #0]
 800343e:	f7fe fa17 	bl	8001870 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b0a      	subs	r3, #10
 8003448:	b298      	uxth	r0, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b299      	uxth	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	3309      	adds	r3, #9
 800345c:	b29b      	uxth	r3, r3
 800345e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003462:	9400      	str	r4, [sp, #0]
 8003464:	f7fe fa04 	bl	8001870 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	3301      	adds	r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <resumeGame+0x1e8>)
 8003470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003474:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	f6ff af78 	blt.w	8003370 <resumeGame+0x98>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <resumeGame+0x1ec>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b298      	uxth	r0, r3
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <resumeGame+0x1f0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	b299      	uxth	r1, r3
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <resumeGame+0x1ec>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	3309      	adds	r3, #9
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <resumeGame+0x1f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	3309      	adds	r3, #9
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f240 14cf 	movw	r4, #463	; 0x1cf
 80034a4:	9400      	str	r4, [sp, #0]
 80034a6:	f7fe f9e3 	bl	8001870 <lcd_Fill>
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000028 	.word	0x20000028
 80034b8:	20000038 	.word	0x20000038
 80034bc:	200001e0 	.word	0x200001e0
 80034c0:	200011ac 	.word	0x200011ac
 80034c4:	20000098 	.word	0x20000098
 80034c8:	2000009c 	.word	0x2000009c

080034cc <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <checkOutOfValidRange+0x38>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0c      	blt.n	80034f2 <checkOutOfValidRange+0x26>
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <checkOutOfValidRange+0x38>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	2be6      	cmp	r3, #230	; 0xe6
 80034de:	dc08      	bgt.n	80034f2 <checkOutOfValidRange+0x26>
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <checkOutOfValidRange+0x38>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b45      	cmp	r3, #69	; 0x45
 80034e6:	dd04      	ble.n	80034f2 <checkOutOfValidRange+0x26>
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <checkOutOfValidRange+0x38>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80034f0:	dd01      	ble.n	80034f6 <checkOutOfValidRange+0x2a>
		return 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <checkOutOfValidRange+0x2c>
	return 0;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	200001e0 	.word	0x200001e0

08003508 <checkEatBody>:

int checkEatBody()
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 800350e:	2301      	movs	r3, #1
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	e018      	b.n	8003546 <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <checkEatBody+0x58>)
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4911      	ldr	r1, [pc, #68]	; (8003560 <checkEatBody+0x58>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3305      	adds	r3, #5
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d10b      	bne.n	8003540 <checkEatBody+0x38>
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <checkEatBody+0x58>)
 800352a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <checkEatBody+0x58>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3305      	adds	r3, #5
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	d101      	bne.n	8003540 <checkEatBody+0x38>
			return 1;
 800353c:	2301      	movs	r3, #1
 800353e:	e008      	b.n	8003552 <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3301      	adds	r3, #1
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <checkEatBody+0x58>)
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	dbe1      	blt.n	8003514 <checkEatBody+0xc>
	return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	200001e0 	.word	0x200001e0

08003564 <checkEatFruit>:

int checkEatFruit()
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <checkEatFruit+0x2c>)
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <checkEatFruit+0x30>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d107      	bne.n	8003584 <checkEatFruit+0x20>
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <checkEatFruit+0x2c>)
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	4b07      	ldr	r3, [pc, #28]	; (8003598 <checkEatFruit+0x34>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d101      	bne.n	8003584 <checkEatFruit+0x20>
		return 1;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <checkEatFruit+0x22>
	return 0;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	200001e0 	.word	0x200001e0
 8003594:	20000098 	.word	0x20000098
 8003598:	2000009c 	.word	0x2000009c

0800359c <checkHitWall>:

int checkHitWall()
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	e079      	b.n	800369c <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 80035a8:	4944      	ldr	r1, [pc, #272]	; (80036bc <checkHitWall+0x120>)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3308      	adds	r3, #8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d136      	bne.n	800362c <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <checkHitWall+0x124>)
 80035c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c2:	483e      	ldr	r0, [pc, #248]	; (80036bc <checkHitWall+0x120>)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4403      	add	r3, r0
 80035d0:	3304      	adds	r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b0a      	subs	r3, #10
 80035d6:	4299      	cmp	r1, r3
 80035d8:	d01a      	beq.n	8003610 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <checkHitWall+0x124>)
 80035dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035de:	4837      	ldr	r0, [pc, #220]	; (80036bc <checkHitWall+0x120>)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4403      	add	r3, r0
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 80035f2:	4299      	cmp	r1, r3
 80035f4:	d00c      	beq.n	8003610 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 80035f6:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <checkHitWall+0x124>)
 80035f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fa:	4830      	ldr	r0, [pc, #192]	; (80036bc <checkHitWall+0x120>)
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	3304      	adds	r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 800360c:	4299      	cmp	r1, r3
 800360e:	d142      	bne.n	8003696 <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <checkHitWall+0x124>)
 8003612:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003614:	4829      	ldr	r0, [pc, #164]	; (80036bc <checkHitWall+0x120>)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4403      	add	r3, r0
 8003622:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003624:	4299      	cmp	r1, r3
 8003626:	d136      	bne.n	8003696 <checkHitWall+0xfa>
			{
				return 1;
 8003628:	2301      	movs	r3, #1
 800362a:	e041      	b.n	80036b0 <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <checkHitWall+0x124>)
 800362e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003630:	4822      	ldr	r0, [pc, #136]	; (80036bc <checkHitWall+0x120>)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4403      	add	r3, r0
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330a      	adds	r3, #10
 8003642:	4299      	cmp	r1, r3
 8003644:	d018      	beq.n	8003678 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <checkHitWall+0x124>)
 8003648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364a:	481c      	ldr	r0, [pc, #112]	; (80036bc <checkHitWall+0x120>)
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4403      	add	r3, r0
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 800365c:	4299      	cmp	r1, r3
 800365e:	d00b      	beq.n	8003678 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <checkHitWall+0x124>)
 8003662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003664:	4815      	ldr	r0, [pc, #84]	; (80036bc <checkHitWall+0x120>)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4403      	add	r3, r0
 8003672:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003674:	4299      	cmp	r1, r3
 8003676:	d10e      	bne.n	8003696 <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <checkHitWall+0x124>)
 800367a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800367c:	480f      	ldr	r0, [pc, #60]	; (80036bc <checkHitWall+0x120>)
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4403      	add	r3, r0
 800368a:	3304      	adds	r3, #4
 800368c:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 800368e:	4299      	cmp	r1, r3
 8003690:	d101      	bne.n	8003696 <checkHitWall+0xfa>
			{
				return 1;
 8003692:	2301      	movs	r3, #1
 8003694:	e00c      	b.n	80036b0 <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3301      	adds	r3, #1
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <checkHitWall+0x120>)
 800369e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a2:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	f6ff af7d 	blt.w	80035a8 <checkHitWall+0xc>
			}
		}
	}
	return 0;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	200011ac 	.word	0x200011ac
 80036c0:	200001e0 	.word	0x200001e0

080036c4 <checkHead>:
void checkHead()
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 80036ca:	f7ff feff 	bl	80034cc <checkOutOfValidRange>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(" OUT OF RANGE ");
 80036d4:	4836      	ldr	r0, [pc, #216]	; (80037b0 <checkHead+0xec>)
 80036d6:	f7fd feef 	bl	80014b8 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80036da:	e065      	b.n	80037a8 <checkHead+0xe4>
	}
	if (checkEatBody())
 80036dc:	f7ff ff14 	bl	8003508 <checkEatBody>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(" EAT BODY ");
 80036e6:	4833      	ldr	r0, [pc, #204]	; (80037b4 <checkHead+0xf0>)
 80036e8:	f7fd fee6 	bl	80014b8 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80036ec:	e05c      	b.n	80037a8 <checkHead+0xe4>
	}
	if (checkHitWall())
 80036ee:	f7ff ff55 	bl	800359c <checkHitWall>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <checkHead+0x3c>
	{
		// showGameover
		initOverMode(" HIT WALL ");
 80036f8:	482f      	ldr	r0, [pc, #188]	; (80037b8 <checkHead+0xf4>)
 80036fa:	f7fd fedd 	bl	80014b8 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80036fe:	e053      	b.n	80037a8 <checkHead+0xe4>
	}
	if (checkEatFruit())
 8003700:	f7ff ff30 	bl	8003564 <checkEatFruit>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d04e      	beq.n	80037a8 <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <checkHead+0xf8>)
 800370c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003710:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <checkHead+0xfc>)
 8003714:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003718:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <checkHead+0x100>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	3301      	adds	r3, #1
 8003720:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <checkHead+0x100>)
 8003722:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <checkHead+0x100>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	3b01      	subs	r3, #1
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <checkHead+0x100>)
 800372c:	69d2      	ldr	r2, [r2, #28]
 800372e:	4925      	ldr	r1, [pc, #148]	; (80037c4 <checkHead+0x100>)
 8003730:	3305      	adds	r3, #5
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 8003738:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <checkHead+0x100>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	3b01      	subs	r3, #1
 800373e:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <checkHead+0x100>)
 8003740:	6a12      	ldr	r2, [r2, #32]
 8003742:	4920      	ldr	r1, [pc, #128]	; (80037c4 <checkHead+0x100>)
 8003744:	3305      	adds	r3, #5
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <checkHead+0x100>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	3b01      	subs	r3, #1
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <checkHead+0x100>)
 8003754:	3305      	adds	r3, #5
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 800375e:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <checkHead+0x100>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	3b01      	subs	r3, #1
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <checkHead+0x100>)
 8003766:	3305      	adds	r3, #5
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	b298      	uxth	r0, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b299      	uxth	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	b29b      	uxth	r3, r3
 800377c:	3309      	adds	r3, #9
 800377e:	b29a      	uxth	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	3309      	adds	r3, #9
 8003786:	b29b      	uxth	r3, r3
 8003788:	2400      	movs	r4, #0
 800378a:	9400      	str	r4, [sp, #0]
 800378c:	f7fe f870 	bl	8001870 <lcd_Fill>
		flagEat = 1;
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <checkHead+0x104>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

		SCORE++;
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <checkHead+0x108>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <checkHead+0x108>)
 80037a0:	801a      	strh	r2, [r3, #0]
		printScore();
 80037a2:	f7ff f929 	bl	80029f8 <printScore>
		return;
 80037a6:	bf00      	nop
	}
}
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	08009b08 	.word	0x08009b08
 80037b4:	08009b18 	.word	0x08009b18
 80037b8:	08009b24 	.word	0x08009b24
 80037bc:	20000098 	.word	0x20000098
 80037c0:	2000009c 	.word	0x2000009c
 80037c4:	200001e0 	.word	0x200001e0
 80037c8:	200000a0 	.word	0x200000a0
 80037cc:	200001aa 	.word	0x200001aa

080037d0 <move>:

void move()
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <move+0x4c>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d81b      	bhi.n	8003814 <move+0x44>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <move+0x14>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003805 	.word	0x08003805
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	080037f5 	.word	0x080037f5
 80037f0:	080037fd 	.word	0x080037fd
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <move+0x4c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4798      	blx	r3
		break;
 80037fa:	e00c      	b.n	8003816 <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <move+0x4c>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4798      	blx	r3
		break;
 8003802:	e008      	b.n	8003816 <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <move+0x4c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4798      	blx	r3
		break;
 800380a:	e004      	b.n	8003816 <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <move+0x4c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4798      	blx	r3
		break;
 8003812:	e000      	b.n	8003816 <move+0x46>
	default:
		break;
 8003814:	bf00      	nop
	}
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200001e0 	.word	0x200001e0

08003820 <wallInit>:

void wallInit()
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	e01f      	b.n	800386c <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 800382c:	491f      	ldr	r1, [pc, #124]	; (80038ac <wallInit+0x8c>)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 800383e:	491b      	ldr	r1, [pc, #108]	; (80038ac <wallInit+0x8c>)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3304      	adds	r3, #4
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 8003852:	4916      	ldr	r1, [pc, #88]	; (80038ac <wallInit+0x8c>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3308      	adds	r3, #8
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3301      	adds	r3, #1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003872:	dbdb      	blt.n	800382c <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <wallInit+0x8c>)
 8003876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387a:	461a      	mov	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
	wallObject.vertical = 1;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <wallInit+0x8c>)
 8003884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003888:	461a      	mov	r2, r3
 800388a:	2301      	movs	r3, #1
 800388c:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	wallObject.stopGenerateWallFlag = 0;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <wallInit+0x8c>)
 8003892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	f8c2 3778 	str.w	r3, [r2, #1912]	; 0x778
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200011ac 	.word	0x200011ac

080038b0 <snakeRun>:

void snakeRun()
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af02      	add	r7, sp, #8
	if (button_count[5])
 80038b6:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <snakeRun+0x100>)
 80038b8:	895b      	ldrh	r3, [r3, #10]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <snakeRun+0x1c>
	{
		(*snakeObject.GOUP)();
 80038be:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <snakeRun+0x104>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <snakeRun+0x104>)
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80038ca:	e06e      	b.n	80039aa <snakeRun+0xfa>
		if (button_count[13])
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <snakeRun+0x100>)
 80038ce:	8b5b      	ldrh	r3, [r3, #26]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <snakeRun+0x32>
			(*snakeObject.GODOWN)();
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <snakeRun+0x104>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <snakeRun+0x104>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4798      	blx	r3
}
 80038e0:	e063      	b.n	80039aa <snakeRun+0xfa>
			if (button_count[10])
 80038e2:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <snakeRun+0x100>)
 80038e4:	8a9b      	ldrh	r3, [r3, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <snakeRun+0x48>
				(*snakeObject.GORIGHT)();
 80038ea:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <snakeRun+0x104>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4798      	blx	r3
				(*snakeObject.CHECKHEAD)();
 80038f0:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <snakeRun+0x104>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	4798      	blx	r3
}
 80038f6:	e058      	b.n	80039aa <snakeRun+0xfa>
				if (button_count[8])
 80038f8:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <snakeRun+0x100>)
 80038fa:	8a1b      	ldrh	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <snakeRun+0x5e>
					(*snakeObject.GOLEFT)();
 8003900:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <snakeRun+0x104>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <snakeRun+0x104>)
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4798      	blx	r3
}
 800390c:	e04d      	b.n	80039aa <snakeRun+0xfa>
					if (button_count[9])
 800390e:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <snakeRun+0x100>)
 8003910:	8a5b      	ldrh	r3, [r3, #18]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d022      	beq.n	800395c <snakeRun+0xac>
						snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <snakeRun+0x104>)
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <snakeRun+0x104>)
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
						wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <snakeRun+0x108>)
 800392c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003930:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <snakeRun+0x108>)
 8003942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003946:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
						snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <snakeRun+0x104>)
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	4618      	mov	r0, r3
 8003950:	f001 ff54 	bl	80057fc <initStopGame>
 8003954:	4603      	mov	r3, r0
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <snakeRun+0x104>)
 8003958:	6293      	str	r3, [r2, #40]	; 0x28
}
 800395a:	e026      	b.n	80039aa <snakeRun+0xfa>
						if (button_count[12])
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <snakeRun+0x100>)
 800395e:	8b1b      	ldrh	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01c      	beq.n	800399e <snakeRun+0xee>
							lcd_Clear(WHITE);
 8003964:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003968:	f7fd ff50 	bl	800180c <lcd_Clear>
							xFruit = INT_MIN;
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <snakeRun+0x10c>)
 800396e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003972:	601a      	str	r2, [r3, #0]
							yFruit = INT_MIN;
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <snakeRun+0x110>)
 8003976:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800397a:	601a      	str	r2, [r3, #0]
							snakeInit();
 800397c:	f000 f824 	bl	80039c8 <snakeInit>
							wallInit();
 8003980:	f7ff ff4e 	bl	8003820 <wallInit>
							lcd_Fill(0, 0, 240, 70, RED);
 8003984:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2346      	movs	r3, #70	; 0x46
 800398c:	22f0      	movs	r2, #240	; 0xf0
 800398e:	2100      	movs	r1, #0
 8003990:	2000      	movs	r0, #0
 8003992:	f7fd ff6d 	bl	8001870 <lcd_Fill>
							flagEat = 1;
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <snakeRun+0x114>)
 8003998:	2201      	movs	r2, #1
 800399a:	601a      	str	r2, [r3, #0]
}
 800399c:	e005      	b.n	80039aa <snakeRun+0xfa>
							(*snakeObject.MOVE)();
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <snakeRun+0x104>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <snakeRun+0x104>)
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	4798      	blx	r3
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000130 	.word	0x20000130
 80039b4:	200001e0 	.word	0x200001e0
 80039b8:	200011ac 	.word	0x200011ac
 80039bc:	20000098 	.word	0x20000098
 80039c0:	2000009c 	.word	0x2000009c
 80039c4:	200000a0 	.word	0x200000a0

080039c8 <snakeInit>:

void snakeInit()
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af02      	add	r7, sp, #8
	srand(rst);
 80039ce:	4b45      	ldr	r3, [pc, #276]	; (8003ae4 <snakeInit+0x11c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f004 fd5e 	bl	8008494 <srand>
	rst++;
 80039d8:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <snakeInit+0x11c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a41      	ldr	r2, [pc, #260]	; (8003ae4 <snakeInit+0x11c>)
 80039e0:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <snakeInit+0x120>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 80039e8:	4b40      	ldr	r3, [pc, #256]	; (8003aec <snakeInit+0x124>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <snakeInit+0x124>)
 80039f0:	2214      	movs	r2, #20
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <snakeInit+0x124>)
 80039f6:	2246      	movs	r2, #70	; 0x46
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 80039fa:	4b3c      	ldr	r3, [pc, #240]	; (8003aec <snakeInit+0x124>)
 80039fc:	220a      	movs	r2, #10
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8003a00:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <snakeInit+0x124>)
 8003a02:	2246      	movs	r2, #70	; 0x46
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <snakeInit+0x124>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 8003a0c:	4b37      	ldr	r3, [pc, #220]	; (8003aec <snakeInit+0x124>)
 8003a0e:	2246      	movs	r2, #70	; 0x46
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 8003a12:	2303      	movs	r3, #3
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e010      	b.n	8003a3a <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <snakeInit+0x124>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3305      	adds	r3, #5
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 8003a26:	4a31      	ldr	r2, [pc, #196]	; (8003aec <snakeInit+0x124>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3305      	adds	r3, #5
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3301      	adds	r3, #1
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a40:	dbea      	blt.n	8003a18 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <snakeInit+0x124>)
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <snakeInit+0x128>)
 8003a46:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <snakeInit+0x124>)
 8003a4a:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <snakeInit+0x12c>)
 8003a4c:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <snakeInit+0x124>)
 8003a50:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <snakeInit+0x130>)
 8003a52:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <snakeInit+0x124>)
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <snakeInit+0x134>)
 8003a58:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <snakeInit+0x124>)
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <snakeInit+0x138>)
 8003a5e:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 8003a60:	4b22      	ldr	r3, [pc, #136]	; (8003aec <snakeInit+0x124>)
 8003a62:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <snakeInit+0x13c>)
 8003a64:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <snakeInit+0x124>)
 8003a68:	2203      	movs	r2, #3
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <snakeInit+0x124>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	e02c      	b.n	8003ad2 <snakeInit+0x10a>
	{
		if (i == 0)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <snakeInit+0xbc>
			drawHeadSnake();
 8003a7e:	f7ff f82f 	bl	8002ae0 <drawHeadSnake>
 8003a82:	e023      	b.n	8003acc <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <snakeInit+0x124>)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3305      	adds	r3, #5
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	b298      	uxth	r0, r3
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <snakeInit+0x124>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	3305      	adds	r3, #5
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003aa0:	4a12      	ldr	r2, [pc, #72]	; (8003aec <snakeInit+0x124>)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3309      	adds	r3, #9
 8003ab0:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003ab2:	4c0e      	ldr	r4, [pc, #56]	; (8003aec <snakeInit+0x124>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3305      	adds	r3, #5
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4423      	add	r3, r4
 8003abc:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3309      	adds	r3, #9
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2400      	movs	r4, #0
 8003ac6:	9400      	str	r4, [sp, #0]
 8003ac8:	f7fd fed2 	bl	8001870 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	ddcf      	ble.n	8003a78 <snakeInit+0xb0>
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200001dc 	.word	0x200001dc
 8003ae8:	200000a0 	.word	0x200000a0
 8003aec:	200001e0 	.word	0x200001e0
 8003af0:	0800316d 	.word	0x0800316d
 8003af4:	08002d29 	.word	0x08002d29
 8003af8:	08003001 	.word	0x08003001
 8003afc:	08002e95 	.word	0x08002e95
 8003b00:	080037d1 	.word	0x080037d1
 8003b04:	080036c5 	.word	0x080036c5

08003b08 <generateFruit>:

void generateFruit()
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 8003b0e:	4b89      	ldr	r3, [pc, #548]	; (8003d34 <generateFruit+0x22c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 8109 	bne.w	8003d2a <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 8003b1c:	f004 fce8 	bl	80084f0 <rand>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <generateFruit+0x230>)
 8003b24:	fb83 2301 	smull	r2, r3, r3, r1
 8003b28:	109a      	asrs	r2, r3, #2
 8003b2a:	17cb      	asrs	r3, r1, #31
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1aca      	subs	r2, r1, r3
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <generateFruit+0x234>)
 8003b44:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 8003b46:	f004 fcd3 	bl	80084f0 <rand>
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	4b7c      	ldr	r3, [pc, #496]	; (8003d40 <generateFruit+0x238>)
 8003b4e:	fb83 2301 	smull	r2, r3, r3, r1
 8003b52:	10da      	asrs	r2, r3, #3
 8003b54:	17cb      	asrs	r3, r1, #31
 8003b56:	1ad2      	subs	r2, r2, r3
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	1aca      	subs	r2, r1, r3
 8003b64:	3207      	adds	r2, #7
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b74      	ldr	r3, [pc, #464]	; (8003d44 <generateFruit+0x23c>)
 8003b72:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e021      	b.n	8003bbe <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 8003b7a:	4a73      	ldr	r2, [pc, #460]	; (8003d48 <generateFruit+0x240>)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3305      	adds	r3, #5
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	4b6d      	ldr	r3, [pc, #436]	; (8003d3c <generateFruit+0x234>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d114      	bne.n	8003bb8 <generateFruit+0xb0>
 8003b8e:	4a6e      	ldr	r2, [pc, #440]	; (8003d48 <generateFruit+0x240>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	3305      	adds	r3, #5
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <generateFruit+0x23c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10a      	bne.n	8003bb8 <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 8003ba2:	4b66      	ldr	r3, [pc, #408]	; (8003d3c <generateFruit+0x234>)
 8003ba4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ba8:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 8003baa:	4b66      	ldr	r3, [pc, #408]	; (8003d44 <generateFruit+0x23c>)
 8003bac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bb0:	601a      	str	r2, [r3, #0]
					remind = 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
					break;
 8003bb6:	e007      	b.n	8003bc8 <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b62      	ldr	r3, [pc, #392]	; (8003d48 <generateFruit+0x240>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbd8      	blt.n	8003b7a <generateFruit+0x72>
				}
			}
			if (remind)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80a9 	bne.w	8003d22 <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	e07f      	b.n	8003cd6 <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 8003bd6:	495d      	ldr	r1, [pc, #372]	; (8003d4c <generateFruit+0x244>)
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3308      	adds	r3, #8
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d139      	bne.n	8003c60 <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 8003bec:	4957      	ldr	r1, [pc, #348]	; (8003d4c <generateFruit+0x244>)
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b51      	ldr	r3, [pc, #324]	; (8003d44 <generateFruit+0x23c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d01d      	beq.n	8003c42 <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003c06:	4951      	ldr	r1, [pc, #324]	; (8003d4c <generateFruit+0x244>)
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	3304      	adds	r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f103 020a 	add.w	r2, r3, #10
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <generateFruit+0x23c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d00e      	beq.n	8003c42 <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003c24:	4949      	ldr	r1, [pc, #292]	; (8003d4c <generateFruit+0x244>)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	3304      	adds	r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1a3 020a 	sub.w	r2, r3, #10
 8003c3a:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <generateFruit+0x23c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d146      	bne.n	8003cd0 <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 8003c42:	4942      	ldr	r1, [pc, #264]	; (8003d4c <generateFruit+0x244>)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <generateFruit+0x234>)
 8003c54:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d13a      	bne.n	8003cd0 <generateFruit+0x1c8>
					{
						remind = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
						break;
 8003c5e:	e043      	b.n	8003ce8 <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 8003c60:	493a      	ldr	r1, [pc, #232]	; (8003d4c <generateFruit+0x244>)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <generateFruit+0x234>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d01b      	beq.n	8003cb0 <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003c78:	4934      	ldr	r1, [pc, #208]	; (8003d4c <generateFruit+0x244>)
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f103 020a 	add.w	r2, r3, #10
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <generateFruit+0x234>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d00d      	beq.n	8003cb0 <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003c94:	492d      	ldr	r1, [pc, #180]	; (8003d4c <generateFruit+0x244>)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1a3 020a 	sub.w	r2, r3, #10
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <generateFruit+0x234>)
 8003caa:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d10f      	bne.n	8003cd0 <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8003cb0:	4926      	ldr	r1, [pc, #152]	; (8003d4c <generateFruit+0x244>)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <generateFruit+0x23c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d102      	bne.n	8003cd0 <generateFruit+0x1c8>
					{
						remind = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]
						break;
 8003cce:	e00b      	b.n	8003ce8 <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <generateFruit+0x244>)
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	f6ff af77 	blt.w	8003bd6 <generateFruit+0xce>
					}
				}
			}
			if (remind)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11b      	bne.n	8003d26 <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <generateFruit+0x234>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	b298      	uxth	r0, r3
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <generateFruit+0x23c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	b299      	uxth	r1, r3
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <generateFruit+0x234>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3309      	adds	r3, #9
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <generateFruit+0x23c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3309      	adds	r3, #9
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003d12:	9400      	str	r4, [sp, #0]
 8003d14:	f7fd fdac 	bl	8001870 <lcd_Fill>
			flagEat = 0;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <generateFruit+0x22c>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
			break;
 8003d1e:	bf00      	nop
		}
	}
}
 8003d20:	e003      	b.n	8003d2a <generateFruit+0x222>
				continue;
 8003d22:	bf00      	nop
 8003d24:	e6f8      	b.n	8003b18 <generateFruit+0x10>
				continue;
 8003d26:	bf00      	nop
		{
 8003d28:	e6f6      	b.n	8003b18 <generateFruit+0x10>
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd90      	pop	{r4, r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200000a0 	.word	0x200000a0
 8003d38:	2aaaaaab 	.word	0x2aaaaaab
 8003d3c:	20000098 	.word	0x20000098
 8003d40:	51eb851f 	.word	0x51eb851f
 8003d44:	2000009c 	.word	0x2000009c
 8003d48:	200001e0 	.word	0x200001e0
 8003d4c:	200011ac 	.word	0x200011ac

08003d50 <generateWall>:

void generateWall()
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b08d      	sub	sp, #52	; 0x34
 8003d54:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 8003d56:	4b9c      	ldr	r3, [pc, #624]	; (8003fc8 <generateWall+0x278>)
 8003d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003d60:	4a9a      	ldr	r2, [pc, #616]	; (8003fcc <generateWall+0x27c>)
 8003d62:	8812      	ldrh	r2, [r2, #0]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f280 82de 	bge.w	8004326 <generateWall+0x5d6>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 8003d6a:	4b97      	ldr	r3, [pc, #604]	; (8003fc8 <generateWall+0x278>)
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d70:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 82d7 	bne.w	8004328 <generateWall+0x5d8>
	{
		while (1)
		{
			int remind = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 8003d7e:	f004 fbb7 	bl	80084f0 <rand>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <generateWall+0x280>)
 8003d86:	fb83 1302 	smull	r1, r3, r3, r2
 8003d8a:	1099      	asrs	r1, r3, #2
 8003d8c:	17d3      	asrs	r3, r2, #31
 8003d8e:	1acb      	subs	r3, r1, r3
 8003d90:	2116      	movs	r1, #22
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 8003da4:	f004 fba4 	bl	80084f0 <rand>
 8003da8:	4601      	mov	r1, r0
 8003daa:	4b8a      	ldr	r3, [pc, #552]	; (8003fd4 <generateWall+0x284>)
 8003dac:	fb83 2301 	smull	r2, r3, r3, r1
 8003db0:	440b      	add	r3, r1
 8003db2:	111a      	asrs	r2, r3, #4
 8003db4:	17cb      	asrs	r3, r1, #31
 8003db6:	1ad2      	subs	r2, r2, r3
 8003db8:	4613      	mov	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	1aca      	subs	r2, r1, r3
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	e0e8      	b.n	8003fa8 <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 8003dd6:	497c      	ldr	r1, [pc, #496]	; (8003fc8 <generateWall+0x278>)
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 8003de8:	4977      	ldr	r1, [pc, #476]	; (8003fc8 <generateWall+0x278>)
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3304      	adds	r3, #4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 8003dfc:	4b72      	ldr	r3, [pc, #456]	; (8003fc8 <generateWall+0x278>)
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e02:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d166      	bne.n	8003ed8 <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 8003e0a:	496f      	ldr	r1, [pc, #444]	; (8003fc8 <generateWall+0x278>)
 8003e0c:	6a3a      	ldr	r2, [r7, #32]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3308      	adds	r3, #8
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d120      	bne.n	8003e62 <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3b14      	subs	r3, #20
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d013      	beq.n	8003e52 <generateWall+0x102>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d00e      	beq.n	8003e52 <generateWall+0x102>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3b0a      	subs	r3, #10
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d009      	beq.n	8003e52 <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d004      	beq.n	8003e52 <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	f040 80a8 	bne.w	8003fa2 <generateWall+0x252>
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	f040 80a3 	bne.w	8003fa2 <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8003e60:	e0ab      	b.n	8003fba <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3b0a      	subs	r3, #10
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d008      	beq.n	8003e7e <generateWall+0x12e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	330a      	adds	r3, #10
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d003      	beq.n	8003e7e <generateWall+0x12e>
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d103      	bne.n	8003e86 <generateWall+0x136>
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d025      	beq.n	8003ed2 <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d008      	beq.n	8003ea2 <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	330a      	adds	r3, #10
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d003      	beq.n	8003ea2 <generateWall+0x152>
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d104      	bne.n	8003eac <generateWall+0x15c>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3b0a      	subs	r3, #10
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d012      	beq.n	8003ed2 <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d008      	beq.n	8003ec8 <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	330a      	adds	r3, #10
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d003      	beq.n	8003ec8 <generateWall+0x178>
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d16c      	bne.n	8003fa2 <generateWall+0x252>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	330a      	adds	r3, #10
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d167      	bne.n	8003fa2 <generateWall+0x252>
						{
							remind = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	e064      	b.n	8003fa2 <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 8003ed8:	493b      	ldr	r1, [pc, #236]	; (8003fc8 <generateWall+0x278>)
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d13a      	bne.n	8003f64 <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3b0a      	subs	r3, #10
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d008      	beq.n	8003f0a <generateWall+0x1ba>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	330a      	adds	r3, #10
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d003      	beq.n	8003f0a <generateWall+0x1ba>
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d103      	bne.n	8003f12 <generateWall+0x1c2>
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d025      	beq.n	8003f5e <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d008      	beq.n	8003f2e <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	330a      	adds	r3, #10
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d003      	beq.n	8003f2e <generateWall+0x1de>
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d104      	bne.n	8003f38 <generateWall+0x1e8>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3b0a      	subs	r3, #10
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d012      	beq.n	8003f5e <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d008      	beq.n	8003f54 <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	330a      	adds	r3, #10
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d003      	beq.n	8003f54 <generateWall+0x204>
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d126      	bne.n	8003fa2 <generateWall+0x252>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	330a      	adds	r3, #10
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d121      	bne.n	8003fa2 <generateWall+0x252>
						{
							remind = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8003f62:	e02a      	b.n	8003fba <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3b14      	subs	r3, #20
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d012      	beq.n	8003f94 <generateWall+0x244>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	3314      	adds	r3, #20
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d00d      	beq.n	8003f94 <generateWall+0x244>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	330a      	adds	r3, #10
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d008      	beq.n	8003f94 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d003      	beq.n	8003f94 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <generateWall+0x252>
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d102      	bne.n	8003fa2 <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8003fa0:	e00b      	b.n	8003fba <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <generateWall+0x278>)
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	f6ff af0e 	blt.w	8003dd6 <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 81a8 	bne.w	8004312 <generateWall+0x5c2>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e049      	b.n	800405c <generateWall+0x30c>
 8003fc8:	200011ac 	.word	0x200011ac
 8003fcc:	200001ac 	.word	0x200001ac
 8003fd0:	2e8ba2e9 	.word	0x2e8ba2e9
 8003fd4:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 8003fd8:	4a60      	ldr	r2, [pc, #384]	; (800415c <generateWall+0x40c>)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3305      	adds	r3, #5
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 8003fe6:	4a5d      	ldr	r2, [pc, #372]	; (800415c <generateWall+0x40c>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3305      	adds	r3, #5
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 8003ff4:	4b5a      	ldr	r3, [pc, #360]	; (8004160 <generateWall+0x410>)
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d114      	bne.n	800402c <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	d125      	bne.n	8004056 <generateWall+0x306>
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d009      	beq.n	8004026 <generateWall+0x2d6>
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3b0a      	subs	r3, #10
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d004      	beq.n	8004026 <generateWall+0x2d6>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	330a      	adds	r3, #10
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d117      	bne.n	8004056 <generateWall+0x306>
					{
						remind = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 800402a:	e01c      	b.n	8004066 <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	429a      	cmp	r2, r3
 8004032:	d110      	bne.n	8004056 <generateWall+0x306>
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d009      	beq.n	8004050 <generateWall+0x300>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	3b0a      	subs	r3, #10
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d004      	beq.n	8004050 <generateWall+0x300>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	330a      	adds	r3, #10
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d102      	bne.n	8004056 <generateWall+0x306>
					{
						remind = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004054:	e007      	b.n	8004066 <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	4b3f      	ldr	r3, [pc, #252]	; (800415c <generateWall+0x40c>)
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	429a      	cmp	r2, r3
 8004064:	dbb8      	blt.n	8003fd8 <generateWall+0x288>
					}
				}
			}
			if (remind)
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 8154 	bne.w	8004316 <generateWall+0x5c6>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 800406e:	4b3b      	ldr	r3, [pc, #236]	; (800415c <generateWall+0x40c>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d842      	bhi.n	80040fc <generateWall+0x3ac>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <generateWall+0x32c>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080040c5 	.word	0x080040c5
 8004084:	080040a9 	.word	0x080040a9
 8004088:	0800408d 	.word	0x0800408d
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 800408c:	4b33      	ldr	r3, [pc, #204]	; (800415c <generateWall+0x40c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	429a      	cmp	r2, r3
 8004094:	d134      	bne.n	8004100 <generateWall+0x3b0>
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <generateWall+0x40c>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	3b0a      	subs	r3, #10
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d12e      	bne.n	8004100 <generateWall+0x3b0>
					remind = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80040a6:	e02b      	b.n	8004100 <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <generateWall+0x40c>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d128      	bne.n	8004104 <generateWall+0x3b4>
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <generateWall+0x40c>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	330a      	adds	r3, #10
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d122      	bne.n	8004104 <generateWall+0x3b4>
					remind = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80040c2:	e01f      	b.n	8004104 <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 80040c4:	4b25      	ldr	r3, [pc, #148]	; (800415c <generateWall+0x40c>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	3b0a      	subs	r3, #10
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d11b      	bne.n	8004108 <generateWall+0x3b8>
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <generateWall+0x40c>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d116      	bne.n	8004108 <generateWall+0x3b8>
					remind = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80040de:	e013      	b.n	8004108 <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <generateWall+0x40c>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	330a      	adds	r3, #10
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d10f      	bne.n	800410c <generateWall+0x3bc>
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <generateWall+0x40c>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10a      	bne.n	800410c <generateWall+0x3bc>
					remind= 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80040fa:	e007      	b.n	800410c <generateWall+0x3bc>
				default:
					break;
 80040fc:	bf00      	nop
 80040fe:	e006      	b.n	800410e <generateWall+0x3be>
				break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <generateWall+0x3be>
				break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <generateWall+0x3be>
				break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <generateWall+0x3be>
				break;
 800410c:	bf00      	nop
			}
			if (remind)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8102 	bne.w	800431a <generateWall+0x5ca>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <generateWall+0x410>)
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004120:	2b01      	cmp	r3, #1
 8004122:	d123      	bne.n	800416c <generateWall+0x41c>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <generateWall+0x414>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	429a      	cmp	r2, r3
 800412c:	d139      	bne.n	80041a2 <generateWall+0x452>
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <generateWall+0x418>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	429a      	cmp	r2, r3
 8004136:	f000 80f2 	beq.w	800431e <generateWall+0x5ce>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f1a3 020a 	sub.w	r2, r3, #10
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <generateWall+0x418>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	f000 80ea 	beq.w	800431e <generateWall+0x5ce>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f103 020a 	add.w	r2, r3, #10
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <generateWall+0x418>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d124      	bne.n	80041a2 <generateWall+0x452>
					continue;
 8004158:	e0e1      	b.n	800431e <generateWall+0x5ce>
 800415a:	bf00      	nop
 800415c:	200001e0 	.word	0x200001e0
 8004160:	200011ac 	.word	0x200011ac
 8004164:	20000098 	.word	0x20000098
 8004168:	2000009c 	.word	0x2000009c
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 800416c:	4b70      	ldr	r3, [pc, #448]	; (8004330 <generateWall+0x5e0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	429a      	cmp	r2, r3
 8004174:	d115      	bne.n	80041a2 <generateWall+0x452>
 8004176:	4b6f      	ldr	r3, [pc, #444]	; (8004334 <generateWall+0x5e4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	f000 80d0 	beq.w	8004322 <generateWall+0x5d2>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f1a3 020a 	sub.w	r2, r3, #10
 8004188:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <generateWall+0x5e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	f000 80c8 	beq.w	8004322 <generateWall+0x5d2>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f103 020a 	add.w	r2, r3, #10
 8004198:	4b66      	ldr	r3, [pc, #408]	; (8004334 <generateWall+0x5e4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	f000 80c0 	beq.w	8004322 <generateWall+0x5d2>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 80041a2:	4b65      	ldr	r3, [pc, #404]	; (8004338 <generateWall+0x5e8>)
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80041ac:	4962      	ldr	r1, [pc, #392]	; (8004338 <generateWall+0x5e8>)
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 80041bc:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <generateWall+0x5e8>)
 80041be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c2:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80041c6:	495c      	ldr	r1, [pc, #368]	; (8004338 <generateWall+0x5e8>)
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3304      	adds	r3, #4
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	b298      	uxth	r0, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	b299      	uxth	r1, r3
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3309      	adds	r3, #9
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3309      	adds	r3, #9
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80041f4:	9400      	str	r4, [sp, #0]
 80041f6:	f7fd fb3b 	bl	8001870 <lcd_Fill>
			if (wallObject.vertical == 1)
 80041fa:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <generateWall+0x5e8>)
 80041fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004200:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004204:	2b01      	cmp	r3, #1
 8004206:	d134      	bne.n	8004272 <generateWall+0x522>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	b298      	uxth	r0, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	b29b      	uxth	r3, r3
 8004210:	330a      	adds	r3, #10
 8004212:	b299      	uxth	r1, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	b29b      	uxth	r3, r3
 8004218:	3309      	adds	r3, #9
 800421a:	b29a      	uxth	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	b29b      	uxth	r3, r3
 8004220:	3313      	adds	r3, #19
 8004222:	b29b      	uxth	r3, r3
 8004224:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004228:	9400      	str	r4, [sp, #0]
 800422a:	f7fd fb21 	bl	8001870 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	b298      	uxth	r0, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b0a      	subs	r3, #10
 8004238:	b299      	uxth	r1, r3
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	b29b      	uxth	r3, r3
 800423e:	3309      	adds	r3, #9
 8004240:	b29a      	uxth	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800424e:	9400      	str	r4, [sp, #0]
 8004250:	f7fd fb0e 	bl	8001870 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <generateWall+0x5e8>)
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 800425e:	4936      	ldr	r1, [pc, #216]	; (8004338 <generateWall+0x5e8>)
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	3308      	adds	r3, #8
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e033      	b.n	80042da <generateWall+0x58a>
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	b29b      	uxth	r3, r3
 8004276:	330a      	adds	r3, #10
 8004278:	b298      	uxth	r0, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	b299      	uxth	r1, r3
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	b29b      	uxth	r3, r3
 8004282:	3313      	adds	r3, #19
 8004284:	b29a      	uxth	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	b29b      	uxth	r3, r3
 800428a:	3309      	adds	r3, #9
 800428c:	b29b      	uxth	r3, r3
 800428e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004292:	9400      	str	r4, [sp, #0]
 8004294:	f7fd faec 	bl	8001870 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b0a      	subs	r3, #10
 800429e:	b298      	uxth	r0, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	b299      	uxth	r1, r3
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3309      	adds	r3, #9
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80042b8:	9400      	str	r4, [sp, #0]
 80042ba:	f7fd fad9 	bl	8001870 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 80042be:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <generateWall+0x5e8>)
 80042c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c4:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80042c8:	491b      	ldr	r1, [pc, #108]	; (8004338 <generateWall+0x5e8>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	3308      	adds	r3, #8
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <generateWall+0x5e8>)
 80042dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e0:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80042e4:	3301      	adds	r3, #1
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <generateWall+0x5e8>)
 80042e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ec:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			wallObject.vertical = !wallObject.vertical;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <generateWall+0x5e8>)
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <generateWall+0x5e8>)
 8004308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430c:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
			break;
 8004310:	e00a      	b.n	8004328 <generateWall+0x5d8>
				continue;
 8004312:	bf00      	nop
 8004314:	e531      	b.n	8003d7a <generateWall+0x2a>
				continue;
 8004316:	bf00      	nop
 8004318:	e52f      	b.n	8003d7a <generateWall+0x2a>
				continue;
 800431a:	bf00      	nop
 800431c:	e52d      	b.n	8003d7a <generateWall+0x2a>
					continue;
 800431e:	bf00      	nop
 8004320:	e52b      	b.n	8003d7a <generateWall+0x2a>
					continue;
 8004322:	bf00      	nop
		{
 8004324:	e529      	b.n	8003d7a <generateWall+0x2a>
		return;
 8004326:	bf00      	nop
		}
	}
}
 8004328:	372c      	adds	r7, #44	; 0x2c
 800432a:	46bd      	mov	sp, r7
 800432c:	bd90      	pop	{r4, r7, pc}
 800432e:	bf00      	nop
 8004330:	2000009c 	.word	0x2000009c
 8004334:	20000098 	.word	0x20000098
 8004338:	200011ac 	.word	0x200011ac

0800433c <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004340:	4802      	ldr	r0, [pc, #8]	; (800434c <timer_init+0x10>)
 8004342:	f003 fb73 	bl	8007a2c <HAL_TIM_Base_Start_IT>
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200029a8 	.word	0x200029a8

08004350 <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 800435a:	4a08      	ldr	r2, [pc, #32]	; (800437c <setTimerSnakeRun+0x2c>)
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <setTimerSnakeRun+0x2c>)
 8004362:	881a      	ldrh	r2, [r3, #0]
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <setTimerSnakeRun+0x30>)
 8004366:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <setTimerSnakeRun+0x34>)
 800436a:	2200      	movs	r2, #0
 800436c:	801a      	strh	r2, [r3, #0]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20002932 	.word	0x20002932
 8004380:	20002930 	.word	0x20002930
 8004384:	2000292e 	.word	0x2000292e

08004388 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	4a07      	ldr	r2, [pc, #28]	; (80043bc <setTimerTiming+0x34>)
 800439e:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <setTimerTiming+0x34>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <setTimerTiming+0x38>)
 80043a6:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <setTimerTiming+0x3c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	801a      	strh	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000293c 	.word	0x2000293c
 80043c0:	20002938 	.word	0x20002938
 80043c4:	20002934 	.word	0x20002934

080043c8 <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <setTimerDeTime+0x2c>)
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <setTimerDeTime+0x2c>)
 80043da:	881a      	ldrh	r2, [r3, #0]
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <setTimerDeTime+0x30>)
 80043de:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <setTimerDeTime+0x34>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	801a      	strh	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20002944 	.word	0x20002944
 80043f8:	20002942 	.word	0x20002942
 80043fc:	20002940 	.word	0x20002940

08004400 <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 800440a:	4a08      	ldr	r2, [pc, #32]	; (800442c <setTimerGenerateWall+0x2c>)
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <setTimerGenerateWall+0x2c>)
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <setTimerGenerateWall+0x30>)
 8004416:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <setTimerGenerateWall+0x34>)
 800441a:	2200      	movs	r2, #0
 800441c:	801a      	strh	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000294a 	.word	0x2000294a
 8004430:	20002948 	.word	0x20002948
 8004434:	20002946 	.word	0x20002946

08004438 <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <setTimerButton+0x2c>)
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <setTimerButton+0x2c>)
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <setTimerButton+0x30>)
 800444e:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <setTimerButton+0x34>)
 8004452:	2200      	movs	r2, #0
 8004454:	801a      	strh	r2, [r3, #0]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000292c 	.word	0x2000292c
 8004468:	2000292a 	.word	0x2000292a
 800446c:	20002928 	.word	0x20002928

08004470 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d161      	bne.n	8004546 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(timerForSnakeRun > 0)
 8004482:	4b33      	ldr	r3, [pc, #204]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timerForSnakeRun--;
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004494:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_TIM_PeriodElapsedCallback+0x3c>
				flagForSnakeRun = 1;
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	4b29      	ldr	r3, [pc, #164]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80044aa:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d010      	beq.n	80044d6 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timerForButton--;
 80044b4:	4b29      	ldr	r3, [pc, #164]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80044be:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flagForButton= 1;
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 80044ce:	4b25      	ldr	r3, [pc, #148]	; (8004564 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80044d4:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			timerForTiming--;
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a20      	ldr	r2, [pc, #128]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80044e6:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 80044e8:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				flagForTiming = 1;
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_PeriodElapsedCallback+0xa8>
		{
			timerForDeTime--;
 80044fe:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004508:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				flagForDeTime = 1;
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004514:	2201      	movs	r2, #1
 8004516:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d010      	beq.n	8004542 <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			timerForGenerateWall--;
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800452a:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_TIM_PeriodElapsedCallback+0xd2>
			{
				flagForGenerateWall= 1;
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004536:	2201      	movs	r2, #1
 8004538:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004540:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8004542:	f7fd fde9 	bl	8002118 <led7_Scan>
	}
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20002930 	.word	0x20002930
 8004554:	2000292e 	.word	0x2000292e
 8004558:	20002932 	.word	0x20002932
 800455c:	2000292a 	.word	0x2000292a
 8004560:	20002928 	.word	0x20002928
 8004564:	2000292c 	.word	0x2000292c
 8004568:	20002938 	.word	0x20002938
 800456c:	20002934 	.word	0x20002934
 8004570:	20002942 	.word	0x20002942
 8004574:	20002940 	.word	0x20002940
 8004578:	20002948 	.word	0x20002948
 800457c:	20002946 	.word	0x20002946
 8004580:	2000294a 	.word	0x2000294a

08004584 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004588:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <MX_SPI1_Init+0x64>)
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <MX_SPI1_Init+0x68>)
 800458c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800458e:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <MX_SPI1_Init+0x64>)
 8004590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <MX_SPI1_Init+0x64>)
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <MX_SPI1_Init+0x64>)
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045be:	2200      	movs	r2, #0
 80045c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c8:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045d0:	220a      	movs	r2, #10
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045d4:	4804      	ldr	r0, [pc, #16]	; (80045e8 <MX_SPI1_Init+0x64>)
 80045d6:	f002 fbed 	bl	8006db4 <HAL_SPI_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80045e0:	f7fd ffa8 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000294c 	.word	0x2000294c
 80045ec:	40013000 	.word	0x40013000

080045f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a19      	ldr	r2, [pc, #100]	; (8004674 <HAL_SPI_MspInit+0x84>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d12b      	bne.n	800466a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	4b18      	ldr	r3, [pc, #96]	; (8004678 <HAL_SPI_MspInit+0x88>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_SPI_MspInit+0x88>)
 800461c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004620:	6453      	str	r3, [r2, #68]	; 0x44
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <HAL_SPI_MspInit+0x88>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_SPI_MspInit+0x88>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <HAL_SPI_MspInit+0x88>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_SPI_MspInit+0x88>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800464a:	2338      	movs	r3, #56	; 0x38
 800464c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004656:	2303      	movs	r3, #3
 8004658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800465a:	2305      	movs	r3, #5
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	4619      	mov	r1, r3
 8004664:	4805      	ldr	r0, [pc, #20]	; (800467c <HAL_SPI_MspInit+0x8c>)
 8004666:	f001 fd8b 	bl	8006180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800466a:	bf00      	nop
 800466c:	3728      	adds	r7, #40	; 0x28
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40013000 	.word	0x40013000
 8004678:	40023800 	.word	0x40023800
 800467c:	40020400 	.word	0x40020400

08004680 <startUI>:
#include "software_timer.h"
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"

void startUI(){
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b093      	sub	sp, #76	; 0x4c
 8004684:	af04      	add	r7, sp, #16
	char str1[50] = "";
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	222e      	movs	r2, #46	; 0x2e
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f003 fef7 	bl	8008484 <memset>

	lcd_Clear(BLACK);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fd f8b8 	bl	800180c <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800469c:	4b32      	ldr	r3, [pc, #200]	; (8004768 <startUI+0xe8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	b298      	uxth	r0, r3
 80046a2:	4b32      	ldr	r3, [pc, #200]	; (800476c <startUI+0xec>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b299      	uxth	r1, r3
 80046a8:	4b31      	ldr	r3, [pc, #196]	; (8004770 <startUI+0xf0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <startUI+0xf4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	4c30      	ldr	r4, [pc, #192]	; (8004778 <startUI+0xf8>)
 80046b6:	9400      	str	r4, [sp, #0]
 80046b8:	f7fd fab2 	bl	8001c20 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80046bc:	2300      	movs	r3, #0
 80046be:	9302      	str	r3, [sp, #8]
 80046c0:	2318      	movs	r3, #24
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	f248 4330 	movw	r3, #33840	; 0x8430
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046ce:	4a2b      	ldr	r2, [pc, #172]	; (800477c <startUI+0xfc>)
 80046d0:	2137      	movs	r1, #55	; 0x37
 80046d2:	203c      	movs	r0, #60	; 0x3c
 80046d4:	f7fd fc7e 	bl	8001fd4 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 80046d8:	2300      	movs	r3, #0
 80046da:	9302      	str	r3, [sp, #8]
 80046dc:	2318      	movs	r3, #24
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046ea:	4a25      	ldr	r2, [pc, #148]	; (8004780 <startUI+0x100>)
 80046ec:	2164      	movs	r1, #100	; 0x64
 80046ee:	2028      	movs	r0, #40	; 0x28
 80046f0:	f7fd fc70 	bl	8001fd4 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80046f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	23b4      	movs	r3, #180	; 0xb4
 80046fc:	22b4      	movs	r2, #180	; 0xb4
 80046fe:	2196      	movs	r1, #150	; 0x96
 8004700:	203c      	movs	r0, #60	; 0x3c
 8004702:	f7fd f986 	bl	8001a12 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 8004706:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <startUI+0x104>)
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd ff18 	bl	8002540 <convert2str>
 8004710:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 8004712:	463b      	mov	r3, r7
 8004714:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004716:	4618      	mov	r0, r3
 8004718:	f003 ff5c 	bl	80085d4 <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 800471c:	463a      	mov	r2, r7
 800471e:	2301      	movs	r3, #1
 8004720:	9302      	str	r3, [sp, #8]
 8004722:	2318      	movs	r3, #24
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004730:	2198      	movs	r1, #152	; 0x98
 8004732:	2000      	movs	r0, #0
 8004734:	f7fd fcb2 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8004738:	2300      	movs	r3, #0
 800473a:	9302      	str	r3, [sp, #8]
 800473c:	2318      	movs	r3, #24
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	f248 4330 	movw	r3, #33840	; 0x8430
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800474a:	4a0f      	ldr	r2, [pc, #60]	; (8004788 <startUI+0x108>)
 800474c:	21e6      	movs	r1, #230	; 0xe6
 800474e:	2050      	movs	r0, #80	; 0x50
 8004750:	f7fd fc40 	bl	8001fd4 <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 8004754:	2300      	movs	r3, #0
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	2000      	movs	r0, #0
 800475c:	f001 fab0 	bl	8005cc0 <show7seg>
}
 8004760:	bf00      	nop
 8004762:	373c      	adds	r7, #60	; 0x3c
 8004764:	46bd      	mov	sp, r7
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	20000074 	.word	0x20000074
 800476c:	20000078 	.word	0x20000078
 8004770:	2000007c 	.word	0x2000007c
 8004774:	20000080 	.word	0x20000080
 8004778:	0800cbc4 	.word	0x0800cbc4
 800477c:	08009b30 	.word	0x08009b30
 8004780:	08009b40 	.word	0x08009b40
 8004784:	200001a8 	.word	0x200001a8
 8004788:	08009b50 	.word	0x08009b50

0800478c <eraseArrow>:

void eraseArrow()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	f240 134b 	movw	r3, #331	; 0x14b
 800479a:	22dd      	movs	r2, #221	; 0xdd
 800479c:	21be      	movs	r1, #190	; 0xbe
 800479e:	20b4      	movs	r0, #180	; 0xb4
 80047a0:	f7fd f866 	bl	8001870 <lcd_Fill>
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <drawArrow>:

void drawArrow()
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 80047b2:	f7ff ffeb 	bl	800478c <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <drawArrow+0x98>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	b298      	uxth	r0, r3
 80047bc:	4b22      	ldr	r3, [pc, #136]	; (8004848 <drawArrow+0x9c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	b299      	uxth	r1, r3
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <drawArrow+0xa0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <drawArrow+0xa4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80047d2:	9400      	str	r4, [sp, #0]
 80047d4:	f7fd f899 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <drawArrow+0xa0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b298      	uxth	r0, r3
 80047de:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <drawArrow+0xa4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b299      	uxth	r1, r3
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <drawArrow+0x98>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b29c      	uxth	r4, r3
 80047ea:	4b19      	ldr	r3, [pc, #100]	; (8004850 <drawArrow+0xa4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <drawArrow+0x9c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004802:	9200      	str	r2, [sp, #0]
 8004804:	4622      	mov	r2, r4
 8004806:	f7fd f880 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <drawArrow+0x98>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b298      	uxth	r0, r3
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <drawArrow+0x9c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b299      	uxth	r1, r3
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <drawArrow+0x98>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29c      	uxth	r4, r3
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <drawArrow+0xa4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	4b08      	ldr	r3, [pc, #32]	; (8004848 <drawArrow+0x9c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004834:	9200      	str	r2, [sp, #0]
 8004836:	4622      	mov	r2, r4
 8004838:	f7fd f867 	bl	800190a <lcd_DrawLine>
}
 800483c:	bf00      	nop
 800483e:	3704      	adds	r7, #4
 8004840:	46bd      	mov	sp, r7
 8004842:	bd90      	pop	{r4, r7, pc}
 8004844:	20000008 	.word	0x20000008
 8004848:	20000010 	.word	0x20000010
 800484c:	20000004 	.word	0x20000004
 8004850:	2000000c 	.word	0x2000000c

08004854 <arrowInPickMode>:

void arrowInPickMode()
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 800485a:	4b99      	ldr	r3, [pc, #612]	; (8004ac0 <arrowInPickMode+0x26c>)
 800485c:	88db      	ldrh	r3, [r3, #6]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d117      	bne.n	8004892 <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 8004862:	4b98      	ldr	r3, [pc, #608]	; (8004ac4 <arrowInPickMode+0x270>)
 8004864:	2201      	movs	r2, #1
 8004866:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8004868:	4b97      	ldr	r3, [pc, #604]	; (8004ac8 <arrowInPickMode+0x274>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b05      	cmp	r3, #5
 800486e:	d009      	beq.n	8004884 <arrowInPickMode+0x30>
 8004870:	2b05      	cmp	r3, #5
 8004872:	dc11      	bgt.n	8004898 <arrowInPickMode+0x44>
 8004874:	2b03      	cmp	r3, #3
 8004876:	d00e      	beq.n	8004896 <arrowInPickMode+0x42>
 8004878:	2b04      	cmp	r3, #4
 800487a:	d10d      	bne.n	8004898 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 800487c:	4b92      	ldr	r3, [pc, #584]	; (8004ac8 <arrowInPickMode+0x274>)
 800487e:	2203      	movs	r2, #3
 8004880:	601a      	str	r2, [r3, #0]
			break;
 8004882:	e009      	b.n	8004898 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8004884:	4b90      	ldr	r3, [pc, #576]	; (8004ac8 <arrowInPickMode+0x274>)
 8004886:	2204      	movs	r2, #4
 8004888:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 800488a:	4b90      	ldr	r3, [pc, #576]	; (8004acc <arrowInPickMode+0x278>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
			break;
 8004890:	e002      	b.n	8004898 <arrowInPickMode+0x44>
		}

	}
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <arrowInPickMode+0x44>
			break;
 8004896:	bf00      	nop
	if(button_count[7] == 1)
 8004898:	4b89      	ldr	r3, [pc, #548]	; (8004ac0 <arrowInPickMode+0x26c>)
 800489a:	89db      	ldrh	r3, [r3, #14]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d118      	bne.n	80048d2 <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 80048a0:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <arrowInPickMode+0x270>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 80048a6:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <arrowInPickMode+0x274>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d013      	beq.n	80048d6 <arrowInPickMode+0x82>
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	dc12      	bgt.n	80048d8 <arrowInPickMode+0x84>
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d002      	beq.n	80048bc <arrowInPickMode+0x68>
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d007      	beq.n	80048ca <arrowInPickMode+0x76>
 80048ba:	e00d      	b.n	80048d8 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 80048bc:	4b82      	ldr	r3, [pc, #520]	; (8004ac8 <arrowInPickMode+0x274>)
 80048be:	2204      	movs	r2, #4
 80048c0:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 80048c2:	4b82      	ldr	r3, [pc, #520]	; (8004acc <arrowInPickMode+0x278>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
			break;
 80048c8:	e006      	b.n	80048d8 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 80048ca:	4b7f      	ldr	r3, [pc, #508]	; (8004ac8 <arrowInPickMode+0x274>)
 80048cc:	2205      	movs	r2, #5
 80048ce:	601a      	str	r2, [r3, #0]
			break;
 80048d0:	e002      	b.n	80048d8 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <arrowInPickMode+0x84>
			break;
 80048d6:	bf00      	nop
	if(flagChange == 1)
 80048d8:	4b7a      	ldr	r3, [pc, #488]	; (8004ac4 <arrowInPickMode+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 814d 	bne.w	8004b7c <arrowInPickMode+0x328>
	{
		switch (arrowMode)
 80048e2:	4b79      	ldr	r3, [pc, #484]	; (8004ac8 <arrowInPickMode+0x274>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	f000 80fc 	beq.w	8004ae4 <arrowInPickMode+0x290>
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	f300 8142 	bgt.w	8004b76 <arrowInPickMode+0x322>
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d002      	beq.n	80048fc <arrowInPickMode+0xa8>
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d04f      	beq.n	800499a <arrowInPickMode+0x146>
 80048fa:	e13c      	b.n	8004b76 <arrowInPickMode+0x322>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 80048fc:	4b74      	ldr	r3, [pc, #464]	; (8004ad0 <arrowInPickMode+0x27c>)
 80048fe:	22d2      	movs	r2, #210	; 0xd2
 8004900:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 8004902:	4b74      	ldr	r3, [pc, #464]	; (8004ad4 <arrowInPickMode+0x280>)
 8004904:	22be      	movs	r2, #190	; 0xbe
 8004906:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004908:	2300      	movs	r3, #0
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004910:	22f0      	movs	r2, #240	; 0xf0
 8004912:	21b4      	movs	r1, #180	; 0xb4
 8004914:	2000      	movs	r0, #0
 8004916:	f7fc ffab 	bl	8001870 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 800491a:	2300      	movs	r3, #0
 800491c:	9302      	str	r3, [sp, #8]
 800491e:	2318      	movs	r3, #24
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	f248 4330 	movw	r3, #33840	; 0x8430
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800492c:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <arrowInPickMode+0x284>)
 800492e:	21c8      	movs	r1, #200	; 0xc8
 8004930:	200a      	movs	r0, #10
 8004932:	f7fd fb4f 	bl	8001fd4 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004936:	2300      	movs	r3, #0
 8004938:	9302      	str	r3, [sp, #8]
 800493a:	2318      	movs	r3, #24
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004948:	4a64      	ldr	r2, [pc, #400]	; (8004adc <arrowInPickMode+0x288>)
 800494a:	21fa      	movs	r1, #250	; 0xfa
 800494c:	200a      	movs	r0, #10
 800494e:	f7fd fb41 	bl	8001fd4 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800495c:	2282      	movs	r2, #130	; 0x82
 800495e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004962:	206e      	movs	r0, #110	; 0x6e
 8004964:	f7fc ffd1 	bl	800190a <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004972:	2278      	movs	r2, #120	; 0x78
 8004974:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004978:	206e      	movs	r0, #110	; 0x6e
 800497a:	f7fc ffc6 	bl	800190a <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 800497e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004988:	2282      	movs	r2, #130	; 0x82
 800498a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800498e:	2078      	movs	r0, #120	; 0x78
 8004990:	f7fc ffbb 	bl	800190a <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8004994:	f7ff ff0a 	bl	80047ac <drawArrow>
			break;
 8004998:	e0ed      	b.n	8004b76 <arrowInPickMode+0x322>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80049a2:	22f0      	movs	r2, #240	; 0xf0
 80049a4:	21b4      	movs	r1, #180	; 0xb4
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fc ff62 	bl	8001870 <lcd_Fill>
			if(flagUpDOwn == 0)
 80049ac:	4b47      	ldr	r3, [pc, #284]	; (8004acc <arrowInPickMode+0x278>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d13d      	bne.n	8004a30 <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 80049b4:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <arrowInPickMode+0x27c>)
 80049b6:	22d2      	movs	r2, #210	; 0xd2
 80049b8:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 80049ba:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <arrowInPickMode+0x280>)
 80049bc:	22be      	movs	r2, #190	; 0xbe
 80049be:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 80049c0:	2300      	movs	r3, #0
 80049c2:	9302      	str	r3, [sp, #8]
 80049c4:	2318      	movs	r3, #24
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	f248 4330 	movw	r3, #33840	; 0x8430
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049d2:	4a42      	ldr	r2, [pc, #264]	; (8004adc <arrowInPickMode+0x288>)
 80049d4:	21c8      	movs	r1, #200	; 0xc8
 80049d6:	200a      	movs	r0, #10
 80049d8:	f7fd fafc 	bl	8001fd4 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 80049dc:	2300      	movs	r3, #0
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	2318      	movs	r3, #24
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	f248 4330 	movw	r3, #33840	; 0x8430
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ee:	4a3c      	ldr	r2, [pc, #240]	; (8004ae0 <arrowInPickMode+0x28c>)
 80049f0:	21fa      	movs	r1, #250	; 0xfa
 80049f2:	200a      	movs	r0, #10
 80049f4:	f7fd faee 	bl	8001fd4 <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 80049f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	23be      	movs	r3, #190	; 0xbe
 8004a00:	2282      	movs	r2, #130	; 0x82
 8004a02:	21be      	movs	r1, #190	; 0xbe
 8004a04:	206e      	movs	r0, #110	; 0x6e
 8004a06:	f7fc ff80 	bl	800190a <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	23b4      	movs	r3, #180	; 0xb4
 8004a12:	2278      	movs	r2, #120	; 0x78
 8004a14:	21be      	movs	r1, #190	; 0xbe
 8004a16:	206e      	movs	r0, #110	; 0x6e
 8004a18:	f7fc ff77 	bl	800190a <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	23be      	movs	r3, #190	; 0xbe
 8004a24:	2282      	movs	r2, #130	; 0x82
 8004a26:	21b4      	movs	r1, #180	; 0xb4
 8004a28:	2078      	movs	r0, #120	; 0x78
 8004a2a:	f7fc ff6e 	bl	800190a <lcd_DrawLine>
 8004a2e:	e043      	b.n	8004ab8 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 8004a30:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <arrowInPickMode+0x27c>)
 8004a32:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a36:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8004a38:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <arrowInPickMode+0x280>)
 8004a3a:	22f0      	movs	r2, #240	; 0xf0
 8004a3c:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	2318      	movs	r3, #24
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	f248 4330 	movw	r3, #33840	; 0x8430
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <arrowInPickMode+0x284>)
 8004a52:	21c8      	movs	r1, #200	; 0xc8
 8004a54:	200a      	movs	r0, #10
 8004a56:	f7fd fabd 	bl	8001fd4 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9302      	str	r3, [sp, #8]
 8004a5e:	2318      	movs	r3, #24
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	f248 4330 	movw	r3, #33840	; 0x8430
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <arrowInPickMode+0x288>)
 8004a6e:	21fa      	movs	r1, #250	; 0xfa
 8004a70:	200a      	movs	r0, #10
 8004a72:	f7fd faaf 	bl	8001fd4 <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004a80:	2282      	movs	r2, #130	; 0x82
 8004a82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004a86:	206e      	movs	r0, #110	; 0x6e
 8004a88:	f7fc ff3f 	bl	800190a <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004a96:	2278      	movs	r2, #120	; 0x78
 8004a98:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004a9c:	206e      	movs	r0, #110	; 0x6e
 8004a9e:	f7fc ff34 	bl	800190a <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004aac:	2282      	movs	r2, #130	; 0x82
 8004aae:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004ab2:	2078      	movs	r0, #120	; 0x78
 8004ab4:	f7fc ff29 	bl	800190a <lcd_DrawLine>
			}

			drawArrow();
 8004ab8:	f7ff fe78 	bl	80047ac <drawArrow>
			break;
 8004abc:	e05b      	b.n	8004b76 <arrowInPickMode+0x322>
 8004abe:	bf00      	nop
 8004ac0:	20000130 	.word	0x20000130
 8004ac4:	200001b8 	.word	0x200001b8
 8004ac8:	20000014 	.word	0x20000014
 8004acc:	200001b4 	.word	0x200001b4
 8004ad0:	2000000c 	.word	0x2000000c
 8004ad4:	20000010 	.word	0x20000010
 8004ad8:	08009b58 	.word	0x08009b58
 8004adc:	08009b68 	.word	0x08009b68
 8004ae0:	08009b78 	.word	0x08009b78
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <arrowInPickMode+0x330>)
 8004ae6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004aea:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 8004aec:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <arrowInPickMode+0x334>)
 8004aee:	22f0      	movs	r2, #240	; 0xf0
 8004af0:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004afa:	22f0      	movs	r2, #240	; 0xf0
 8004afc:	21b4      	movs	r1, #180	; 0xb4
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7fc feb6 	bl	8001870 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004b04:	2300      	movs	r3, #0
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	2318      	movs	r3, #24
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <arrowInPickMode+0x338>)
 8004b18:	21c8      	movs	r1, #200	; 0xc8
 8004b1a:	200a      	movs	r0, #10
 8004b1c:	f7fd fa5a 	bl	8001fd4 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 8004b20:	2300      	movs	r3, #0
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	2318      	movs	r3, #24
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <arrowInPickMode+0x33c>)
 8004b34:	21fa      	movs	r1, #250	; 0xfa
 8004b36:	200a      	movs	r0, #10
 8004b38:	f7fd fa4c 	bl	8001fd4 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	23be      	movs	r3, #190	; 0xbe
 8004b44:	2282      	movs	r2, #130	; 0x82
 8004b46:	21be      	movs	r1, #190	; 0xbe
 8004b48:	206e      	movs	r0, #110	; 0x6e
 8004b4a:	f7fc fede 	bl	800190a <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	23b4      	movs	r3, #180	; 0xb4
 8004b56:	2278      	movs	r2, #120	; 0x78
 8004b58:	21be      	movs	r1, #190	; 0xbe
 8004b5a:	206e      	movs	r0, #110	; 0x6e
 8004b5c:	f7fc fed5 	bl	800190a <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	23be      	movs	r3, #190	; 0xbe
 8004b68:	2282      	movs	r2, #130	; 0x82
 8004b6a:	21b4      	movs	r1, #180	; 0xb4
 8004b6c:	2078      	movs	r0, #120	; 0x78
 8004b6e:	f7fc fecc 	bl	800190a <lcd_DrawLine>

			// draw arrow
			drawArrow();
 8004b72:	f7ff fe1b 	bl	80047ac <drawArrow>
		}
		flagChange = 0;
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <arrowInPickMode+0x340>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
	}
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2000000c 	.word	0x2000000c
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	08009b68 	.word	0x08009b68
 8004b90:	08009b78 	.word	0x08009b78
 8004b94:	200001b8 	.word	0x200001b8

08004b98 <pickMode>:

void pickMode(uint16_t id){
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b095      	sub	sp, #84	; 0x54
 8004b9c:	af04      	add	r7, sp, #16
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f7fc fe32 	bl	800180c <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8004ba8:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <pickMode+0x14c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b298      	uxth	r0, r3
 8004bae:	4b4e      	ldr	r3, [pc, #312]	; (8004ce8 <pickMode+0x150>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	b299      	uxth	r1, r3
 8004bb4:	4b4d      	ldr	r3, [pc, #308]	; (8004cec <pickMode+0x154>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <pickMode+0x158>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4c4c      	ldr	r4, [pc, #304]	; (8004cf4 <pickMode+0x15c>)
 8004bc2:	9400      	str	r4, [sp, #0]
 8004bc4:	f7fd f82c 	bl	8001c20 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9302      	str	r3, [sp, #8]
 8004bcc:	2318      	movs	r3, #24
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	f248 4330 	movw	r3, #33840	; 0x8430
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bda:	4a47      	ldr	r2, [pc, #284]	; (8004cf8 <pickMode+0x160>)
 8004bdc:	2137      	movs	r1, #55	; 0x37
 8004bde:	203c      	movs	r0, #60	; 0x3c
 8004be0:	f7fd f9f8 	bl	8001fd4 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8004be4:	4a45      	ldr	r2, [pc, #276]	; (8004cfc <pickMode+0x164>)
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bee:	6018      	str	r0, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	8019      	strh	r1, [r3, #0]
 8004bf4:	f107 030e 	add.w	r3, r7, #14
 8004bf8:	222c      	movs	r2, #44	; 0x2c
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f003 fc41 	bl	8008484 <memset>
	char *str2 = convert2str(id);
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fd fc9b 	bl	8002540 <convert2str>
 8004c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 fcde 	bl	80085d4 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8004c18:	f107 0208 	add.w	r2, r7, #8
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	2318      	movs	r3, #24
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c2e:	2164      	movs	r1, #100	; 0x64
 8004c30:	2000      	movs	r0, #0
 8004c32:	f7fd fa33 	bl	800209c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 8004c36:	2300      	movs	r3, #0
 8004c38:	9302      	str	r3, [sp, #8]
 8004c3a:	2318      	movs	r3, #24
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c48:	4a2d      	ldr	r2, [pc, #180]	; (8004d00 <pickMode+0x168>)
 8004c4a:	2196      	movs	r1, #150	; 0x96
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7fd fa25 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004c52:	2300      	movs	r3, #0
 8004c54:	9302      	str	r3, [sp, #8]
 8004c56:	2318      	movs	r3, #24
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c64:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <pickMode+0x16c>)
 8004c66:	21c8      	movs	r1, #200	; 0xc8
 8004c68:	200a      	movs	r0, #10
 8004c6a:	f7fd f9b3 	bl	8001fd4 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	2318      	movs	r3, #24
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c80:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <pickMode+0x170>)
 8004c82:	21fa      	movs	r1, #250	; 0xfa
 8004c84:	200a      	movs	r0, #10
 8004c86:	f7fd f9a5 	bl	8001fd4 <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <pickMode+0x174>)
 8004c8c:	22d2      	movs	r2, #210	; 0xd2
 8004c8e:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <pickMode+0x178>)
 8004c92:	22be      	movs	r2, #190	; 0xbe
 8004c94:	601a      	str	r2, [r3, #0]
	drawArrow();
 8004c96:	f7ff fd89 	bl	80047ac <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ca4:	2282      	movs	r2, #130	; 0x82
 8004ca6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004caa:	206e      	movs	r0, #110	; 0x6e
 8004cac:	f7fc fe2d 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004cba:	2278      	movs	r2, #120	; 0x78
 8004cbc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004cc0:	206e      	movs	r0, #110	; 0x6e
 8004cc2:	f7fc fe22 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004cd0:	2282      	movs	r2, #130	; 0x82
 8004cd2:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004cd6:	2078      	movs	r0, #120	; 0x78
 8004cd8:	f7fc fe17 	bl	800190a <lcd_DrawLine>

}
 8004cdc:	bf00      	nop
 8004cde:	3744      	adds	r7, #68	; 0x44
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	20000074 	.word	0x20000074
 8004ce8:	20000078 	.word	0x20000078
 8004cec:	2000007c 	.word	0x2000007c
 8004cf0:	20000080 	.word	0x20000080
 8004cf4:	0800cbc4 	.word	0x0800cbc4
 8004cf8:	08009b30 	.word	0x08009b30
 8004cfc:	08009b90 	.word	0x08009b90
 8004d00:	08009b88 	.word	0x08009b88
 8004d04:	08009b58 	.word	0x08009b58
 8004d08:	08009b68 	.word	0x08009b68
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	20000010 	.word	0x20000010

08004d14 <beginStartGame>:

void beginStartGame()
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b094      	sub	sp, #80	; 0x50
 8004d18:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8004d1a:	4ba7      	ldr	r3, [pc, #668]	; (8004fb8 <beginStartGame+0x2a4>)
 8004d1c:	8b9b      	ldrh	r3, [r3, #28]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	f040 81a9 	bne.w	8005076 <beginStartGame+0x362>
	{
		switch (statusGame) {
 8004d24:	4ba5      	ldr	r3, [pc, #660]	; (8004fbc <beginStartGame+0x2a8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b0a      	cmp	r3, #10
 8004d2a:	f200 81a6 	bhi.w	800507a <beginStartGame+0x366>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <beginStartGame+0x20>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d87 	.word	0x08004d87
 8004d3c:	08004d99 	.word	0x08004d99
 8004d40:	0800507b 	.word	0x0800507b
 8004d44:	0800507b 	.word	0x0800507b
 8004d48:	0800507b 	.word	0x0800507b
 8004d4c:	08004f73 	.word	0x08004f73
 8004d50:	08004e83 	.word	0x08004e83
 8004d54:	08004e05 	.word	0x08004e05
 8004d58:	08004e3b 	.word	0x08004e3b
 8004d5c:	0800500b 	.word	0x0800500b
			case INIT:
				statusGame = STARTMODE;
 8004d60:	4b96      	ldr	r3, [pc, #600]	; (8004fbc <beginStartGame+0x2a8>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
				ID = 0;
 8004d66:	4b96      	ldr	r3, [pc, #600]	; (8004fc0 <beginStartGame+0x2ac>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8004d6c:	4b95      	ldr	r3, [pc, #596]	; (8004fc4 <beginStartGame+0x2b0>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8004d72:	4b95      	ldr	r3, [pc, #596]	; (8004fc8 <beginStartGame+0x2b4>)
 8004d74:	2203      	movs	r2, #3
 8004d76:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8004d78:	4b94      	ldr	r3, [pc, #592]	; (8004fcc <beginStartGame+0x2b8>)
 8004d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d7e:	801a      	strh	r2, [r3, #0]
				startUI();
 8004d80:	f7ff fc7e 	bl	8004680 <startUI>
				break;
 8004d84:	e17e      	b.n	8005084 <beginStartGame+0x370>
			case STARTMODE:
				statusGame = PICKMODE;
 8004d86:	4b8d      	ldr	r3, [pc, #564]	; (8004fbc <beginStartGame+0x2a8>)
 8004d88:	2202      	movs	r2, #2
 8004d8a:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8004d8c:	4b8c      	ldr	r3, [pc, #560]	; (8004fc0 <beginStartGame+0x2ac>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff01 	bl	8004b98 <pickMode>
				break;
 8004d96:	e175      	b.n	8005084 <beginStartGame+0x370>
			case PICKMODE:
				switch (arrowMode)
 8004d98:	4b8b      	ldr	r3, [pc, #556]	; (8004fc8 <beginStartGame+0x2b4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d024      	beq.n	8004dea <beginStartGame+0xd6>
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	f300 816c 	bgt.w	800507e <beginStartGame+0x36a>
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d002      	beq.n	8004db0 <beginStartGame+0x9c>
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d011      	beq.n	8004dd2 <beginStartGame+0xbe>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 8004dae:	e166      	b.n	800507e <beginStartGame+0x36a>
					oldStatusGame = NORMALMODE;
 8004db0:	4b87      	ldr	r3, [pc, #540]	; (8004fd0 <beginStartGame+0x2bc>)
 8004db2:	2203      	movs	r2, #3
 8004db4:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 8004db6:	4b81      	ldr	r3, [pc, #516]	; (8004fbc <beginStartGame+0x2a8>)
 8004db8:	2203      	movs	r2, #3
 8004dba:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 8004dbc:	4b80      	ldr	r3, [pc, #512]	; (8004fc0 <beginStartGame+0x2ac>)
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	4a80      	ldr	r2, [pc, #512]	; (8004fc4 <beginStartGame+0x2b0>)
 8004dc2:	8812      	ldrh	r2, [r2, #0]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fd fbf6 	bl	80025b8 <setUpLcdNormalPlay>
					snakeInit();
 8004dcc:	f7fe fdfc 	bl	80039c8 <snakeInit>
					break;
 8004dd0:	e017      	b.n	8004e02 <beginStartGame+0xee>
					oldStatusGame = TIMINGMODE;
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <beginStartGame+0x2bc>)
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8004dd8:	4b7c      	ldr	r3, [pc, #496]	; (8004fcc <beginStartGame+0x2b8>)
 8004dda:	221e      	movs	r2, #30
 8004ddc:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 8004dde:	4b77      	ldr	r3, [pc, #476]	; (8004fbc <beginStartGame+0x2a8>)
 8004de0:	2208      	movs	r2, #8
 8004de2:	601a      	str	r2, [r3, #0]
					setupTiming();
 8004de4:	f000 fe78 	bl	8005ad8 <setupTiming>
					break;
 8004de8:	e00b      	b.n	8004e02 <beginStartGame+0xee>
					oldStatusGame = ADVANCEMODE;
 8004dea:	4b79      	ldr	r3, [pc, #484]	; (8004fd0 <beginStartGame+0x2bc>)
 8004dec:	2205      	movs	r2, #5
 8004dee:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8004df0:	4b76      	ldr	r3, [pc, #472]	; (8004fcc <beginStartGame+0x2b8>)
 8004df2:	221e      	movs	r2, #30
 8004df4:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 8004df6:	4b71      	ldr	r3, [pc, #452]	; (8004fbc <beginStartGame+0x2a8>)
 8004df8:	2209      	movs	r2, #9
 8004dfa:	601a      	str	r2, [r3, #0]
					setupAdvance();
 8004dfc:	f7fb fbc2 	bl	8000584 <setupAdvance>
					break;
 8004e00:	bf00      	nop
				break;
 8004e02:	e13c      	b.n	800507e <beginStartGame+0x36a>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 8004e04:	4b71      	ldr	r3, [pc, #452]	; (8004fcc <beginStartGame+0x2b8>)
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fabd 	bl	8004388 <setTimerTiming>
				setTimerDeTime(1000);
 8004e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e12:	f7ff fad9 	bl	80043c8 <setTimerDeTime>
				oldTiming = TIMING;
 8004e16:	4b6d      	ldr	r3, [pc, #436]	; (8004fcc <beginStartGame+0x2b8>)
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	4b6e      	ldr	r3, [pc, #440]	; (8004fd4 <beginStartGame+0x2c0>)
 8004e1c:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 8004e1e:	4b67      	ldr	r3, [pc, #412]	; (8004fbc <beginStartGame+0x2a8>)
 8004e20:	2204      	movs	r2, #4
 8004e22:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 8004e24:	4b66      	ldr	r3, [pc, #408]	; (8004fc0 <beginStartGame+0x2ac>)
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	4a68      	ldr	r2, [pc, #416]	; (8004fcc <beginStartGame+0x2b8>)
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd fc7a 	bl	8002728 <setUpLcdTimingPlay>
				snakeInit();
 8004e34:	f7fe fdc8 	bl	80039c8 <snakeInit>
				break;
 8004e38:	e124      	b.n	8005084 <beginStartGame+0x370>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 8004e3a:	4b64      	ldr	r3, [pc, #400]	; (8004fcc <beginStartGame+0x2b8>)
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff faa2 	bl	8004388 <setTimerTiming>
				setTimerDeTime(1000);
 8004e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e48:	f7ff fabe 	bl	80043c8 <setTimerDeTime>
				setTimerGenerateWall(2000);
 8004e4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e50:	f7ff fad6 	bl	8004400 <setTimerGenerateWall>
				flagForGenerateWall = 0;
 8004e54:	4b60      	ldr	r3, [pc, #384]	; (8004fd8 <beginStartGame+0x2c4>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	; (8004fcc <beginStartGame+0x2b8>)
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	4b5d      	ldr	r3, [pc, #372]	; (8004fd4 <beginStartGame+0x2c0>)
 8004e60:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 8004e62:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <beginStartGame+0x2a8>)
 8004e64:	2205      	movs	r2, #5
 8004e66:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 8004e68:	4b55      	ldr	r3, [pc, #340]	; (8004fc0 <beginStartGame+0x2ac>)
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	4a57      	ldr	r2, [pc, #348]	; (8004fcc <beginStartGame+0x2b8>)
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd fd0c 	bl	8002890 <setUpLcdAdvancePlay>
				wallInit();
 8004e78:	f7fe fcd2 	bl	8003820 <wallInit>
				snakeInit();
 8004e7c:	f7fe fda4 	bl	80039c8 <snakeInit>
				break;
 8004e80:	e100      	b.n	8005084 <beginStartGame+0x370>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 8004e82:	4b56      	ldr	r3, [pc, #344]	; (8004fdc <beginStartGame+0x2c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d15f      	bne.n	8004f4a <beginStartGame+0x236>
				{
					statusGame = oldStatusGame;
 8004e8a:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <beginStartGame+0x2bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a4b      	ldr	r2, [pc, #300]	; (8004fbc <beginStartGame+0x2a8>)
 8004e90:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 8004e92:	4b4c      	ldr	r3, [pc, #304]	; (8004fc4 <beginStartGame+0x2b0>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 8004e98:	4b48      	ldr	r3, [pc, #288]	; (8004fbc <beginStartGame+0x2a8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d030      	beq.n	8004f02 <beginStartGame+0x1ee>
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	f300 80ee 	bgt.w	8005082 <beginStartGame+0x36e>
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d002      	beq.n	8004eb0 <beginStartGame+0x19c>
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00e      	beq.n	8004ecc <beginStartGame+0x1b8>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8004eae:	e0e8      	b.n	8005082 <beginStartGame+0x36e>
						oldStatusGame = NORMALMODE;
 8004eb0:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <beginStartGame+0x2bc>)
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 8004eb6:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <beginStartGame+0x2ac>)
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	4a42      	ldr	r2, [pc, #264]	; (8004fc4 <beginStartGame+0x2b0>)
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fd fb79 	bl	80025b8 <setUpLcdNormalPlay>
						snakeInit();
 8004ec6:	f7fe fd7f 	bl	80039c8 <snakeInit>
						break;
 8004eca:	e051      	b.n	8004f70 <beginStartGame+0x25c>
						oldStatusGame = TIMINGMODE;
 8004ecc:	4b40      	ldr	r3, [pc, #256]	; (8004fd0 <beginStartGame+0x2bc>)
 8004ece:	2204      	movs	r2, #4
 8004ed0:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8004ed2:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <beginStartGame+0x2c0>)
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <beginStartGame+0x2b8>)
 8004ed8:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8004eda:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <beginStartGame+0x2b8>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fa52 	bl	8004388 <setTimerTiming>
						setTimerDeTime(1000);
 8004ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ee8:	f7ff fa6e 	bl	80043c8 <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 8004eec:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <beginStartGame+0x2ac>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	4a36      	ldr	r2, [pc, #216]	; (8004fcc <beginStartGame+0x2b8>)
 8004ef2:	8812      	ldrh	r2, [r2, #0]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd fc16 	bl	8002728 <setUpLcdTimingPlay>
						snakeInit();
 8004efc:	f7fe fd64 	bl	80039c8 <snakeInit>
						break;
 8004f00:	e036      	b.n	8004f70 <beginStartGame+0x25c>
						oldStatusGame = ADVANCEMODE;
 8004f02:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <beginStartGame+0x2bc>)
 8004f04:	2205      	movs	r2, #5
 8004f06:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8004f08:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <beginStartGame+0x2c0>)
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <beginStartGame+0x2b8>)
 8004f0e:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <beginStartGame+0x2b8>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fa37 	bl	8004388 <setTimerTiming>
						setTimerDeTime(1000);
 8004f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f1e:	f7ff fa53 	bl	80043c8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8004f22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004f26:	f7ff fa6b 	bl	8004400 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <beginStartGame+0x2c4>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 8004f30:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <beginStartGame+0x2ac>)
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <beginStartGame+0x2b8>)
 8004f36:	8812      	ldrh	r2, [r2, #0]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd fca8 	bl	8002890 <setUpLcdAdvancePlay>
						snakeInit();
 8004f40:	f7fe fd42 	bl	80039c8 <snakeInit>
						wallInit();
 8004f44:	f7fe fc6c 	bl	8003820 <wallInit>
						break;
 8004f48:	e012      	b.n	8004f70 <beginStartGame+0x25c>
					statusGame = STARTMODE;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <beginStartGame+0x2a8>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
					ID = 0;
 8004f50:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <beginStartGame+0x2ac>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <beginStartGame+0x2b0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <beginStartGame+0x2b4>)
 8004f5e:	2203      	movs	r2, #3
 8004f60:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <beginStartGame+0x2b8>)
 8004f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f68:	801a      	strh	r2, [r3, #0]
					startUI();
 8004f6a:	f7ff fb89 	bl	8004680 <startUI>
				break;
 8004f6e:	e088      	b.n	8005082 <beginStartGame+0x36e>
 8004f70:	e087      	b.n	8005082 <beginStartGame+0x36e>
			case STOPMODE:
				if(arrowStopMode == RESUME)
 8004f72:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <beginStartGame+0x2cc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d134      	bne.n	8004fe4 <beginStartGame+0x2d0>
				{
					statusGame = oldStatusGame;
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <beginStartGame+0x2bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0f      	ldr	r2, [pc, #60]	; (8004fbc <beginStartGame+0x2a8>)
 8004f80:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <beginStartGame+0x2a8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d003      	beq.n	8004f92 <beginStartGame+0x27e>
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <beginStartGame+0x2a8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d10f      	bne.n	8004fb2 <beginStartGame+0x29e>
					{
						setTimerTiming(TIMING);
 8004f92:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <beginStartGame+0x2b8>)
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff f9f6 	bl	8004388 <setTimerTiming>
						setTimerDeTime(1000);
 8004f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fa0:	f7ff fa12 	bl	80043c8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8004fa4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004fa8:	f7ff fa2a 	bl	8004400 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8004fac:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <beginStartGame+0x2c4>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 8004fb2:	f7fe f991 	bl	80032d8 <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8004fb6:	e065      	b.n	8005084 <beginStartGame+0x370>
 8004fb8:	20000130 	.word	0x20000130
 8004fbc:	200001bc 	.word	0x200001bc
 8004fc0:	200001a8 	.word	0x200001a8
 8004fc4:	200001aa 	.word	0x200001aa
 8004fc8:	20000014 	.word	0x20000014
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	200001c0 	.word	0x200001c0
 8004fd4:	200001d0 	.word	0x200001d0
 8004fd8:	20002946 	.word	0x20002946
 8004fdc:	200001b0 	.word	0x200001b0
 8004fe0:	2000005c 	.word	0x2000005c
					statusGame = STARTMODE;
 8004fe4:	4bb1      	ldr	r3, [pc, #708]	; (80052ac <beginStartGame+0x598>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
					ID = 0;
 8004fea:	4bb1      	ldr	r3, [pc, #708]	; (80052b0 <beginStartGame+0x59c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8004ff0:	4bb0      	ldr	r3, [pc, #704]	; (80052b4 <beginStartGame+0x5a0>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8004ff6:	4bb0      	ldr	r3, [pc, #704]	; (80052b8 <beginStartGame+0x5a4>)
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8004ffc:	4baf      	ldr	r3, [pc, #700]	; (80052bc <beginStartGame+0x5a8>)
 8004ffe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005002:	801a      	strh	r2, [r3, #0]
					startUI();
 8005004:	f7ff fb3c 	bl	8004680 <startUI>
				break;
 8005008:	e03c      	b.n	8005084 <beginStartGame+0x370>
			case EXITMODE:
				if(arrowExitMode == YES)
 800500a:	4bad      	ldr	r3, [pc, #692]	; (80052c0 <beginStartGame+0x5ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d112      	bne.n	8005038 <beginStartGame+0x324>
				{
					statusGame = STARTMODE;
 8005012:	4ba6      	ldr	r3, [pc, #664]	; (80052ac <beginStartGame+0x598>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005018:	4ba5      	ldr	r3, [pc, #660]	; (80052b0 <beginStartGame+0x59c>)
 800501a:	2200      	movs	r2, #0
 800501c:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 800501e:	4ba5      	ldr	r3, [pc, #660]	; (80052b4 <beginStartGame+0x5a0>)
 8005020:	2200      	movs	r2, #0
 8005022:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005024:	4ba4      	ldr	r3, [pc, #656]	; (80052b8 <beginStartGame+0x5a4>)
 8005026:	2203      	movs	r2, #3
 8005028:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 800502a:	4ba4      	ldr	r3, [pc, #656]	; (80052bc <beginStartGame+0x5a8>)
 800502c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005030:	801a      	strh	r2, [r3, #0]
					startUI();
 8005032:	f7ff fb25 	bl	8004680 <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 8005036:	e020      	b.n	800507a <beginStartGame+0x366>
					statusGame = oldStatusGame;
 8005038:	4ba2      	ldr	r3, [pc, #648]	; (80052c4 <beginStartGame+0x5b0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a9b      	ldr	r2, [pc, #620]	; (80052ac <beginStartGame+0x598>)
 800503e:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005040:	4b9a      	ldr	r3, [pc, #616]	; (80052ac <beginStartGame+0x598>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d003      	beq.n	8005050 <beginStartGame+0x33c>
 8005048:	4b98      	ldr	r3, [pc, #608]	; (80052ac <beginStartGame+0x598>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b05      	cmp	r3, #5
 800504e:	d10f      	bne.n	8005070 <beginStartGame+0x35c>
						setTimerTiming(TIMING);
 8005050:	4b9a      	ldr	r3, [pc, #616]	; (80052bc <beginStartGame+0x5a8>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff f997 	bl	8004388 <setTimerTiming>
						setTimerDeTime(1000);
 800505a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800505e:	f7ff f9b3 	bl	80043c8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005062:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005066:	f7ff f9cb 	bl	8004400 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 800506a:	4b97      	ldr	r3, [pc, #604]	; (80052c8 <beginStartGame+0x5b4>)
 800506c:	2200      	movs	r2, #0
 800506e:	801a      	strh	r2, [r3, #0]
					resumeGame();
 8005070:	f7fe f932 	bl	80032d8 <resumeGame>
				break;
 8005074:	e001      	b.n	800507a <beginStartGame+0x366>
		}
	}
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <beginStartGame+0x370>
				break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <beginStartGame+0x370>
				break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <beginStartGame+0x370>
				break;
 8005082:	bf00      	nop
	if(statusGame == STARTMODE){
 8005084:	4b89      	ldr	r3, [pc, #548]	; (80052ac <beginStartGame+0x598>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	f040 8161 	bne.w	8005350 <beginStartGame+0x63c>
		char str1[50] = "";
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	222e      	movs	r2, #46	; 0x2e
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f003 f9f2 	bl	8008484 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 80050a0:	4b83      	ldr	r3, [pc, #524]	; (80052b0 <beginStartGame+0x59c>)
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050aa:	e14d      	b.n	8005348 <beginStartGame+0x634>
		{
			if(button_count[i] == 1)
 80050ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050ae:	4a87      	ldr	r2, [pc, #540]	; (80052cc <beginStartGame+0x5b8>)
 80050b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	f040 8144 	bne.w	8005342 <beginStartGame+0x62e>
			{
				button_count[i] == 0;
				switch (i)
 80050ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050bc:	2b0d      	cmp	r3, #13
 80050be:	f200 811c 	bhi.w	80052fa <beginStartGame+0x5e6>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <beginStartGame+0x3b4>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	08005101 	.word	0x08005101
 80050cc:	0800512d 	.word	0x0800512d
 80050d0:	08005159 	.word	0x08005159
 80050d4:	08005341 	.word	0x08005341
 80050d8:	08005185 	.word	0x08005185
 80050dc:	080051ad 	.word	0x080051ad
 80050e0:	080051d5 	.word	0x080051d5
 80050e4:	08005341 	.word	0x08005341
 80050e8:	080051fd 	.word	0x080051fd
 80050ec:	08005229 	.word	0x08005229
 80050f0:	08005255 	.word	0x08005255
 80050f4:	08005341 	.word	0x08005341
 80050f8:	08005281 	.word	0x08005281
 80050fc:	080052d9 	.word	0x080052d9
				{
					case 0:
						val = val*10 + i+1;
 8005100:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005102:	461a      	mov	r2, r3
 8005104:	0092      	lsls	r2, r2, #2
 8005106:	4413      	add	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800510e:	4413      	add	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	3301      	adds	r3, #1
 8005114:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005116:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005118:	4618      	mov	r0, r3
 800511a:	f7fd fa11 	bl	8002540 <convert2str>
 800511e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005124:	4618      	mov	r0, r3
 8005126:	f003 fa55 	bl	80085d4 <strcat>
						break;
 800512a:	e0e6      	b.n	80052fa <beginStartGame+0x5e6>
					case 1:
						val = val*10 + i+1;
 800512c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800512e:	461a      	mov	r2, r3
 8005130:	0092      	lsls	r2, r2, #2
 8005132:	4413      	add	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800513a:	4413      	add	r3, r2
 800513c:	b29b      	uxth	r3, r3
 800513e:	3301      	adds	r3, #1
 8005140:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005142:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005144:	4618      	mov	r0, r3
 8005146:	f7fd f9fb 	bl	8002540 <convert2str>
 800514a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005150:	4618      	mov	r0, r3
 8005152:	f003 fa3f 	bl	80085d4 <strcat>
						break;
 8005156:	e0d0      	b.n	80052fa <beginStartGame+0x5e6>
					case 2:
						val = val*10 + i+1;
 8005158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800515a:	461a      	mov	r2, r3
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	4413      	add	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005166:	4413      	add	r3, r2
 8005168:	b29b      	uxth	r3, r3
 800516a:	3301      	adds	r3, #1
 800516c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800516e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd f9e5 	bl	8002540 <convert2str>
 8005176:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800517c:	4618      	mov	r0, r3
 800517e:	f003 fa29 	bl	80085d4 <strcat>
						break;
 8005182:	e0ba      	b.n	80052fa <beginStartGame+0x5e6>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 8005184:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005186:	461a      	mov	r2, r3
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	4413      	add	r3, r2
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005192:	4413      	add	r3, r2
 8005194:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd f9d1 	bl	8002540 <convert2str>
 800519e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051a4:	4618      	mov	r0, r3
 80051a6:	f003 fa15 	bl	80085d4 <strcat>
						break;
 80051aa:	e0a6      	b.n	80052fa <beginStartGame+0x5e6>
					case 5:
						val = val*10 + i;
 80051ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051ae:	461a      	mov	r2, r3
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051ba:	4413      	add	r3, r2
 80051bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80051be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd f9bd 	bl	8002540 <convert2str>
 80051c6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051cc:	4618      	mov	r0, r3
 80051ce:	f003 fa01 	bl	80085d4 <strcat>
						break;
 80051d2:	e092      	b.n	80052fa <beginStartGame+0x5e6>
					case 6:
						val = val*10 + i;
 80051d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051d6:	461a      	mov	r2, r3
 80051d8:	0092      	lsls	r2, r2, #2
 80051da:	4413      	add	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051e2:	4413      	add	r3, r2
 80051e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80051e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fd f9a9 	bl	8002540 <convert2str>
 80051ee:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f4:	4618      	mov	r0, r3
 80051f6:	f003 f9ed 	bl	80085d4 <strcat>
						break;
 80051fa:	e07e      	b.n	80052fa <beginStartGame+0x5e6>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 80051fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051fe:	461a      	mov	r2, r3
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4413      	add	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800520a:	4413      	add	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005214:	4618      	mov	r0, r3
 8005216:	f7fd f993 	bl	8002540 <convert2str>
 800521a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005220:	4618      	mov	r0, r3
 8005222:	f003 f9d7 	bl	80085d4 <strcat>
						break;
 8005226:	e068      	b.n	80052fa <beginStartGame+0x5e6>
					case 9:
						val = val*10 + i-1;
 8005228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800522a:	461a      	mov	r2, r3
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	4413      	add	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005236:	4413      	add	r3, r2
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800523e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd f97d 	bl	8002540 <convert2str>
 8005246:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800524c:	4618      	mov	r0, r3
 800524e:	f003 f9c1 	bl	80085d4 <strcat>
						break;
 8005252:	e052      	b.n	80052fa <beginStartGame+0x5e6>
					case 10:
						val = val*10 + i-1;
 8005254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005256:	461a      	mov	r2, r3
 8005258:	0092      	lsls	r2, r2, #2
 800525a:	4413      	add	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005262:	4413      	add	r3, r2
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800526a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd f967 	bl	8002540 <convert2str>
 8005272:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005278:	4618      	mov	r0, r3
 800527a:	f003 f9ab 	bl	80085d4 <strcat>
						break;
 800527e:	e03c      	b.n	80052fa <beginStartGame+0x5e6>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <beginStartGame+0x5bc>)
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 8005288:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800528a:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <beginStartGame+0x5c0>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	08db      	lsrs	r3, r3, #3
 8005292:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005294:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005296:	4618      	mov	r0, r3
 8005298:	f7fd f952 	bl	8002540 <convert2str>
 800529c:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a2:	4618      	mov	r0, r3
 80052a4:	f003 f996 	bl	80085d4 <strcat>
						break;
 80052a8:	e027      	b.n	80052fa <beginStartGame+0x5e6>
 80052aa:	bf00      	nop
 80052ac:	200001bc 	.word	0x200001bc
 80052b0:	200001a8 	.word	0x200001a8
 80052b4:	200001aa 	.word	0x200001aa
 80052b8:	20000014 	.word	0x20000014
 80052bc:	20000000 	.word	0x20000000
 80052c0:	20000060 	.word	0x20000060
 80052c4:	200001c0 	.word	0x200001c0
 80052c8:	20002946 	.word	0x20002946
 80052cc:	20000130 	.word	0x20000130
 80052d0:	08009bc4 	.word	0x08009bc4
 80052d4:	cccccccd 	.word	0xcccccccd
					case 13:
						val = val*10;
 80052d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052da:	461a      	mov	r2, r3
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	4413      	add	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80052e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd f92a 	bl	8002540 <convert2str>
 80052ec:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052f2:	4618      	mov	r0, r3
 80052f4:	f003 f96e 	bl	80085d4 <strcat>
						break;
 80052f8:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 80052fa:	2300      	movs	r3, #0
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	23b4      	movs	r3, #180	; 0xb4
 8005300:	22b4      	movs	r2, #180	; 0xb4
 8005302:	2196      	movs	r1, #150	; 0x96
 8005304:	203c      	movs	r0, #60	; 0x3c
 8005306:	f7fc fab3 	bl	8001870 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 800530a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	23b4      	movs	r3, #180	; 0xb4
 8005312:	22b4      	movs	r2, #180	; 0xb4
 8005314:	2196      	movs	r1, #150	; 0x96
 8005316:	203c      	movs	r0, #60	; 0x3c
 8005318:	f7fc fb7b 	bl	8001a12 <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 800531c:	1d3a      	adds	r2, r7, #4
 800531e:	2301      	movs	r3, #1
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	2318      	movs	r3, #24
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005330:	2198      	movs	r1, #152	; 0x98
 8005332:	2000      	movs	r0, #0
 8005334:	f7fc feb2 	bl	800209c <lcd_StrCenter>

				ID = val;
 8005338:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <beginStartGame+0x6a0>)
 800533a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800533c:	8013      	strh	r3, [r2, #0]
 800533e:	e000      	b.n	8005342 <beginStartGame+0x62e>
						continue;
 8005340:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 8005342:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005344:	3301      	adds	r3, #1
 8005346:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005348:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800534a:	2b0d      	cmp	r3, #13
 800534c:	f67f aeae 	bls.w	80050ac <beginStartGame+0x398>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <beginStartGame+0x6a4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d101      	bne.n	800535c <beginStartGame+0x648>
	{
		initTimingMode();
 8005358:	f000 fd12 	bl	8005d80 <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 800535c:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <beginStartGame+0x6a4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b09      	cmp	r3, #9
 8005362:	d101      	bne.n	8005368 <beginStartGame+0x654>
	{
		initAdvanceMode();
 8005364:	f7fb fa90 	bl	8000888 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 8005368:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <beginStartGame+0x6a4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d00e      	beq.n	800538e <beginStartGame+0x67a>
	{
		if(statusGame == PICKMODE)
 8005370:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <beginStartGame+0x6a4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d101      	bne.n	800537c <beginStartGame+0x668>
		{
			arrowInPickMode();
 8005378:	f7ff fa6c 	bl	8004854 <arrowInPickMode>
		}
		if(button_count[12] == 1)
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <beginStartGame+0x6a8>)
 800537e:	8b1b      	ldrh	r3, [r3, #24]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d104      	bne.n	800538e <beginStartGame+0x67a>
		{
			statusGame = EXITMODE;
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <beginStartGame+0x6a4>)
 8005386:	220a      	movs	r2, #10
 8005388:	601a      	str	r2, [r3, #0]
			initExit();
 800538a:	f7fb fd5f 	bl	8000e4c <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <beginStartGame+0x6a4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d009      	beq.n	80053aa <beginStartGame+0x696>
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <beginStartGame+0x6a4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b05      	cmp	r3, #5
 800539c:	d005      	beq.n	80053aa <beginStartGame+0x696>
	{
		setTimerDeTime(0);
 800539e:	2000      	movs	r0, #0
 80053a0:	f7ff f812 	bl	80043c8 <setTimerDeTime>
		setTimerGenerateWall(0);
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff f82b 	bl	8004400 <setTimerGenerateWall>
	}
}
 80053aa:	bf00      	nop
 80053ac:	3740      	adds	r7, #64	; 0x40
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200001a8 	.word	0x200001a8
 80053b8:	200001bc 	.word	0x200001bc
 80053bc:	20000130 	.word	0x20000130

080053c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	4b10      	ldr	r3, [pc, #64]	; (800540c <HAL_MspInit+0x4c>)
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	4a0f      	ldr	r2, [pc, #60]	; (800540c <HAL_MspInit+0x4c>)
 80053d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d4:	6453      	str	r3, [r2, #68]	; 0x44
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <HAL_MspInit+0x4c>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4b09      	ldr	r3, [pc, #36]	; (800540c <HAL_MspInit+0x4c>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	4a08      	ldr	r2, [pc, #32]	; (800540c <HAL_MspInit+0x4c>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <HAL_MspInit+0x4c>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800

08005410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005414:	e7fe      	b.n	8005414 <NMI_Handler+0x4>

08005416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005416:	b480      	push	{r7}
 8005418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800541a:	e7fe      	b.n	800541a <HardFault_Handler+0x4>

0800541c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005420:	e7fe      	b.n	8005420 <MemManage_Handler+0x4>

08005422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005426:	e7fe      	b.n	8005426 <BusFault_Handler+0x4>

08005428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800542c:	e7fe      	b.n	800542c <UsageFault_Handler+0x4>

0800542e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800544a:	b480      	push	{r7}
 800544c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800544e:	bf00      	nop
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800545c:	f000 fd3a 	bl	8005ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005460:	bf00      	nop
 8005462:	bd80      	pop	{r7, pc}

08005464 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005468:	4802      	ldr	r0, [pc, #8]	; (8005474 <TIM2_IRQHandler+0x10>)
 800546a:	f002 fb4f 	bl	8007b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	200029a8 	.word	0x200029a8

08005478 <showNotifyStop>:
#include "stop_game.h"
#include "snake.h"
#include "software_timer.h"

void showNotifyStop()
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 800547e:	4b25      	ldr	r3, [pc, #148]	; (8005514 <showNotifyStop+0x9c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	330a      	adds	r3, #10
 8005486:	b299      	uxth	r1, r3
 8005488:	2300      	movs	r3, #0
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	2310      	movs	r3, #16
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	2300      	movs	r3, #0
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005498:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <showNotifyStop+0xa0>)
 800549a:	2000      	movs	r0, #0
 800549c:	f7fc fdfe 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <showNotifyStop+0xa4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3308      	adds	r3, #8
 80054a8:	b298      	uxth	r0, r3
 80054aa:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <showNotifyStop+0x9c>)
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <showNotifyStop+0x9c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4413      	add	r3, r2
 80054b4:	0fda      	lsrs	r2, r3, #31
 80054b6:	4413      	add	r3, r2
 80054b8:	105b      	asrs	r3, r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b14      	subs	r3, #20
 80054be:	b299      	uxth	r1, r3
 80054c0:	2301      	movs	r3, #1
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	2310      	movs	r3, #16
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	f248 4330 	movw	r3, #33840	; 0x8430
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2300      	movs	r3, #0
 80054d0:	4a13      	ldr	r2, [pc, #76]	; (8005520 <showNotifyStop+0xa8>)
 80054d2:	f7fc fd7f 	bl	8001fd4 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <showNotifyStop+0xa4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3308      	adds	r3, #8
 80054de:	b298      	uxth	r0, r3
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <showNotifyStop+0x9c>)
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <showNotifyStop+0x9c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	0fda      	lsrs	r2, r3, #31
 80054ec:	4413      	add	r3, r2
 80054ee:	105b      	asrs	r3, r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	330f      	adds	r3, #15
 80054f4:	b299      	uxth	r1, r3
 80054f6:	2301      	movs	r3, #1
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	2310      	movs	r3, #16
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f248 4330 	movw	r3, #33840	; 0x8430
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	4a07      	ldr	r2, [pc, #28]	; (8005524 <showNotifyStop+0xac>)
 8005508:	f7fc fd64 	bl	8001fd4 <lcd_ShowStr>
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	2000004c 	.word	0x2000004c
 8005518:	08009bc8 	.word	0x08009bc8
 800551c:	2000003c 	.word	0x2000003c
 8005520:	08009bd8 	.word	0x08009bd8
 8005524:	08009be0 	.word	0x08009be0

08005528 <drawArrowStop>:


void drawArrowStop()
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800552e:	4b87      	ldr	r3, [pc, #540]	; (800574c <drawArrowStop+0x224>)
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	4b86      	ldr	r3, [pc, #536]	; (800574c <drawArrowStop+0x224>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4413      	add	r3, r2
 8005538:	0fda      	lsrs	r2, r3, #31
 800553a:	4413      	add	r3, r2
 800553c:	105b      	asrs	r3, r3, #1
 800553e:	3b08      	subs	r3, #8
 8005540:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8005542:	4b82      	ldr	r3, [pc, #520]	; (800574c <drawArrowStop+0x224>)
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	4b81      	ldr	r3, [pc, #516]	; (800574c <drawArrowStop+0x224>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4413      	add	r3, r2
 800554c:	0fda      	lsrs	r2, r3, #31
 800554e:	4413      	add	r3, r2
 8005550:	105b      	asrs	r3, r3, #1
 8005552:	331c      	adds	r3, #28
 8005554:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 8005556:	4b7e      	ldr	r3, [pc, #504]	; (8005750 <drawArrowStop+0x228>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d07a      	beq.n	8005654 <drawArrowStop+0x12c>
 800555e:	2b02      	cmp	r3, #2
 8005560:	f040 80f0 	bne.w	8005744 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8005564:	f7fb fe1a 	bl	800119c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 8005568:	4b7a      	ldr	r3, [pc, #488]	; (8005754 <drawArrowStop+0x22c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	3308      	adds	r3, #8
 8005570:	b298      	uxth	r0, r3
 8005572:	4b76      	ldr	r3, [pc, #472]	; (800574c <drawArrowStop+0x224>)
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	4b75      	ldr	r3, [pc, #468]	; (800574c <drawArrowStop+0x224>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4413      	add	r3, r2
 800557c:	0fda      	lsrs	r2, r3, #31
 800557e:	4413      	add	r3, r2
 8005580:	105b      	asrs	r3, r3, #1
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b14      	subs	r3, #20
 8005586:	b299      	uxth	r1, r3
 8005588:	2301      	movs	r3, #1
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	2310      	movs	r3, #16
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	f248 4330 	movw	r3, #33840	; 0x8430
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800559a:	4a6f      	ldr	r2, [pc, #444]	; (8005758 <drawArrowStop+0x230>)
 800559c:	f7fc fd1a 	bl	8001fd4 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80055a0:	4b6c      	ldr	r3, [pc, #432]	; (8005754 <drawArrowStop+0x22c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3308      	adds	r3, #8
 80055a8:	b298      	uxth	r0, r3
 80055aa:	4b68      	ldr	r3, [pc, #416]	; (800574c <drawArrowStop+0x224>)
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	4b67      	ldr	r3, [pc, #412]	; (800574c <drawArrowStop+0x224>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4413      	add	r3, r2
 80055b4:	0fda      	lsrs	r2, r3, #31
 80055b6:	4413      	add	r3, r2
 80055b8:	105b      	asrs	r3, r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	330f      	adds	r3, #15
 80055be:	b299      	uxth	r1, r3
 80055c0:	2301      	movs	r3, #1
 80055c2:	9302      	str	r3, [sp, #8]
 80055c4:	2310      	movs	r3, #16
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	f248 4330 	movw	r3, #33840	; 0x8430
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2300      	movs	r3, #0
 80055d0:	4a62      	ldr	r2, [pc, #392]	; (800575c <drawArrowStop+0x234>)
 80055d2:	f7fc fcff 	bl	8001fd4 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 80055d6:	4b5f      	ldr	r3, [pc, #380]	; (8005754 <drawArrowStop+0x22c>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b0f      	subs	r3, #15
 80055de:	b298      	uxth	r0, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	b299      	uxth	r1, r3
 80055e4:	4b5b      	ldr	r3, [pc, #364]	; (8005754 <drawArrowStop+0x22c>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b0a      	subs	r3, #10
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b05      	subs	r3, #5
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2400      	movs	r4, #0
 80055f8:	9400      	str	r4, [sp, #0]
 80055fa:	f7fc f986 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80055fe:	4b55      	ldr	r3, [pc, #340]	; (8005754 <drawArrowStop+0x22c>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b0f      	subs	r3, #15
 8005606:	b298      	uxth	r0, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	b299      	uxth	r1, r3
 800560c:	4b51      	ldr	r3, [pc, #324]	; (8005754 <drawArrowStop+0x22c>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b0a      	subs	r3, #10
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	b29b      	uxth	r3, r3
 800561a:	3305      	adds	r3, #5
 800561c:	b29b      	uxth	r3, r3
 800561e:	2400      	movs	r4, #0
 8005620:	9400      	str	r4, [sp, #0]
 8005622:	f7fc f972 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8005626:	4b4b      	ldr	r3, [pc, #300]	; (8005754 <drawArrowStop+0x22c>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b0a      	subs	r3, #10
 800562e:	b298      	uxth	r0, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b05      	subs	r3, #5
 8005636:	b299      	uxth	r1, r3
 8005638:	4b46      	ldr	r3, [pc, #280]	; (8005754 <drawArrowStop+0x22c>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b0a      	subs	r3, #10
 8005640:	b29a      	uxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	b29b      	uxth	r3, r3
 8005646:	3305      	adds	r3, #5
 8005648:	b29b      	uxth	r3, r3
 800564a:	2400      	movs	r4, #0
 800564c:	9400      	str	r4, [sp, #0]
 800564e:	f7fc f95c 	bl	800190a <lcd_DrawLine>
		break;
 8005652:	e077      	b.n	8005744 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 8005654:	f7fb fda2 	bl	800119c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8005658:	4b3e      	ldr	r3, [pc, #248]	; (8005754 <drawArrowStop+0x22c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	3308      	adds	r3, #8
 8005660:	b298      	uxth	r0, r3
 8005662:	4b3a      	ldr	r3, [pc, #232]	; (800574c <drawArrowStop+0x224>)
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	4b39      	ldr	r3, [pc, #228]	; (800574c <drawArrowStop+0x224>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4413      	add	r3, r2
 800566c:	0fda      	lsrs	r2, r3, #31
 800566e:	4413      	add	r3, r2
 8005670:	105b      	asrs	r3, r3, #1
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b14      	subs	r3, #20
 8005676:	b299      	uxth	r1, r3
 8005678:	2301      	movs	r3, #1
 800567a:	9302      	str	r3, [sp, #8]
 800567c:	2310      	movs	r3, #16
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	f248 4330 	movw	r3, #33840	; 0x8430
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2300      	movs	r3, #0
 8005688:	4a33      	ldr	r2, [pc, #204]	; (8005758 <drawArrowStop+0x230>)
 800568a:	f7fc fca3 	bl	8001fd4 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <drawArrowStop+0x22c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	3308      	adds	r3, #8
 8005696:	b298      	uxth	r0, r3
 8005698:	4b2c      	ldr	r3, [pc, #176]	; (800574c <drawArrowStop+0x224>)
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <drawArrowStop+0x224>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	0fda      	lsrs	r2, r3, #31
 80056a4:	4413      	add	r3, r2
 80056a6:	105b      	asrs	r3, r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	330f      	adds	r3, #15
 80056ac:	b299      	uxth	r1, r3
 80056ae:	2301      	movs	r3, #1
 80056b0:	9302      	str	r3, [sp, #8]
 80056b2:	2310      	movs	r3, #16
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	f248 4330 	movw	r3, #33840	; 0x8430
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <drawArrowStop+0x234>)
 80056c2:	f7fc fc87 	bl	8001fd4 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 80056c6:	4b23      	ldr	r3, [pc, #140]	; (8005754 <drawArrowStop+0x22c>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b0f      	subs	r3, #15
 80056ce:	b298      	uxth	r0, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	b299      	uxth	r1, r3
 80056d4:	4b1f      	ldr	r3, [pc, #124]	; (8005754 <drawArrowStop+0x22c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b0a      	subs	r3, #10
 80056dc:	b29a      	uxth	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b05      	subs	r3, #5
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2400      	movs	r4, #0
 80056e8:	9400      	str	r4, [sp, #0]
 80056ea:	f7fc f90e 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 80056ee:	4b19      	ldr	r3, [pc, #100]	; (8005754 <drawArrowStop+0x22c>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b0f      	subs	r3, #15
 80056f6:	b298      	uxth	r0, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b299      	uxth	r1, r3
 80056fc:	4b15      	ldr	r3, [pc, #84]	; (8005754 <drawArrowStop+0x22c>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b0a      	subs	r3, #10
 8005704:	b29a      	uxth	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	3305      	adds	r3, #5
 800570c:	b29b      	uxth	r3, r3
 800570e:	2400      	movs	r4, #0
 8005710:	9400      	str	r4, [sp, #0]
 8005712:	f7fc f8fa 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <drawArrowStop+0x22c>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b0a      	subs	r3, #10
 800571e:	b298      	uxth	r0, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b05      	subs	r3, #5
 8005726:	b299      	uxth	r1, r3
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <drawArrowStop+0x22c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b0a      	subs	r3, #10
 8005730:	b29a      	uxth	r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	3305      	adds	r3, #5
 8005738:	b29b      	uxth	r3, r3
 800573a:	2400      	movs	r4, #0
 800573c:	9400      	str	r4, [sp, #0]
 800573e:	f7fc f8e4 	bl	800190a <lcd_DrawLine>
		break;
 8005742:	bf00      	nop
	}
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bd90      	pop	{r4, r7, pc}
 800574c:	2000004c 	.word	0x2000004c
 8005750:	2000005c 	.word	0x2000005c
 8005754:	2000003c 	.word	0x2000003c
 8005758:	08009bd8 	.word	0x08009bd8
 800575c:	08009be0 	.word	0x08009be0

08005760 <gameStopUI>:

void gameStopUI()
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
	showWallnotify();
 8005764:	f7fb fc48 	bl	8000ff8 <showWallnotify>
	showNotifyStop();
 8005768:	f7ff fe86 	bl	8005478 <showNotifyStop>
	drawArrowStop();
 800576c:	f7ff fedc 	bl	8005528 <drawArrowStop>
}
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}

08005774 <pickStop>:

void pickStop()
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 8005778:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <pickStop+0x78>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b06      	cmp	r3, #6
 800577e:	d133      	bne.n	80057e8 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <pickStop+0x7c>)
 8005782:	88db      	ldrh	r3, [r3, #6]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10f      	bne.n	80057a8 <pickStop+0x34>
		{
			flagStop = 1;
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <pickStop+0x80>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <pickStop+0x84>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d002      	beq.n	800579c <pickStop+0x28>
 8005796:	2b02      	cmp	r3, #2
 8005798:	d107      	bne.n	80057aa <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 800579a:	e025      	b.n	80057e8 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <pickStop+0x84>)
 800579e:	2202      	movs	r2, #2
 80057a0:	601a      	str	r2, [r3, #0]
				gameStopUI();
 80057a2:	f7ff ffdd 	bl	8005760 <gameStopUI>
				break;
 80057a6:	e000      	b.n	80057aa <pickStop+0x36>
			}
		}
 80057a8:	bf00      	nop
		if(button_count[7] == 1)
 80057aa:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <pickStop+0x7c>)
 80057ac:	89db      	ldrh	r3, [r3, #14]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d10e      	bne.n	80057d0 <pickStop+0x5c>
		{
			flagStop = 1;
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <pickStop+0x80>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <pickStop+0x84>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d012      	beq.n	80057e6 <pickStop+0x72>
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d106      	bne.n	80057d2 <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <pickStop+0x84>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
				gameStopUI();
 80057ca:	f7ff ffc9 	bl	8005760 <gameStopUI>
				break;
 80057ce:	e000      	b.n	80057d2 <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 80057d0:	bf00      	nop
		if(flagStop == 1)
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <pickStop+0x80>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d106      	bne.n	80057e8 <pickStop+0x74>
		{
			gameStopUI();
 80057da:	f7ff ffc1 	bl	8005760 <gameStopUI>
			flagStop = 0;
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <pickStop+0x80>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e000      	b.n	80057e8 <pickStop+0x74>
				return;
 80057e6:	bf00      	nop
		}
	}
}
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200001bc 	.word	0x200001bc
 80057f0:	20000130 	.word	0x20000130
 80057f4:	200001c8 	.word	0x200001c8
 80057f8:	2000005c 	.word	0x2000005c

080057fc <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d110      	bne.n	800582e <initStopGame+0x32>
	{
		statusGame = STOPMODE;
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <initStopGame+0x3c>)
 800580e:	2206      	movs	r2, #6
 8005810:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <initStopGame+0x40>)
 8005814:	2202      	movs	r2, #2
 8005816:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 8005818:	2000      	movs	r0, #0
 800581a:	f7fe fdb5 	bl	8004388 <setTimerTiming>
		setTimerGenerateWall(0);
 800581e:	2000      	movs	r0, #0
 8005820:	f7fe fdee 	bl	8004400 <setTimerGenerateWall>
		flagStop = 1;
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <initStopGame+0x44>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
		pickStop();
 800582a:	f7ff ffa3 	bl	8005774 <pickStop>
	}
	return 0;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200001bc 	.word	0x200001bc
 800583c:	2000005c 	.word	0x2000005c
 8005840:	200001c8 	.word	0x200001c8

08005844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
	return 1;
 8005848:	2301      	movs	r3, #1
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <_kill>:

int _kill(int pid, int sig)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800585e:	f002 fde7 	bl	8008430 <__errno>
 8005862:	4603      	mov	r3, r0
 8005864:	2216      	movs	r2, #22
 8005866:	601a      	str	r2, [r3, #0]
	return -1;
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <_exit>:

void _exit (int status)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800587c:	f04f 31ff 	mov.w	r1, #4294967295
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ffe7 	bl	8005854 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005886:	e7fe      	b.n	8005886 <_exit+0x12>

08005888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e00a      	b.n	80058b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800589a:	f3af 8000 	nop.w
 800589e:	4601      	mov	r1, r0
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	60ba      	str	r2, [r7, #8]
 80058a6:	b2ca      	uxtb	r2, r1
 80058a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3301      	adds	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	dbf0      	blt.n	800589a <_read+0x12>
	}

return len;
 80058b8:	687b      	ldr	r3, [r7, #4]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e009      	b.n	80058e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	60ba      	str	r2, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	3301      	adds	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	dbf1      	blt.n	80058d4 <_write+0x12>
	}
	return len;
 80058f0:	687b      	ldr	r3, [r7, #4]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <_close>:

int _close(int file)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
	return -1;
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005922:	605a      	str	r2, [r3, #4]
	return 0;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <_isatty>:

int _isatty(int file)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
	return 1;
 800593a:	2301      	movs	r3, #1
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	return 0;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800596c:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <_sbrk+0x5c>)
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <_sbrk+0x60>)
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005978:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <_sbrk+0x64>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005980:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <_sbrk+0x64>)
 8005982:	4a12      	ldr	r2, [pc, #72]	; (80059cc <_sbrk+0x68>)
 8005984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <_sbrk+0x64>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	429a      	cmp	r2, r3
 8005992:	d207      	bcs.n	80059a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005994:	f002 fd4c 	bl	8008430 <__errno>
 8005998:	4603      	mov	r3, r0
 800599a:	220c      	movs	r2, #12
 800599c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800599e:	f04f 33ff 	mov.w	r3, #4294967295
 80059a2:	e009      	b.n	80059b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <_sbrk+0x64>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <_sbrk+0x64>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	4a05      	ldr	r2, [pc, #20]	; (80059c8 <_sbrk+0x64>)
 80059b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059b6:	68fb      	ldr	r3, [r7, #12]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20020000 	.word	0x20020000
 80059c4:	00000400 	.word	0x00000400
 80059c8:	200029a4 	.word	0x200029a4
 80059cc:	20002a08 	.word	0x20002a08

080059d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <SystemInit+0x20>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <SystemInit+0x20>)
 80059dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059fa:	f107 0308 	add.w	r3, r7, #8
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	605a      	str	r2, [r3, #4]
 8005a04:	609a      	str	r2, [r3, #8]
 8005a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a08:	463b      	mov	r3, r7
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a10:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a1a:	f240 3247 	movw	r2, #839	; 0x347
 8005a1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005a26:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a28:	2263      	movs	r2, #99	; 0x63
 8005a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a2c:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a32:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a38:	4813      	ldr	r0, [pc, #76]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a3a:	f001 ffa7 	bl	800798c <HAL_TIM_Base_Init>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005a44:	f7fc fd76 	bl	8002534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	4619      	mov	r1, r3
 8005a54:	480c      	ldr	r0, [pc, #48]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a56:	f002 f961 	bl	8007d1c <HAL_TIM_ConfigClockSource>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005a60:	f7fc fd68 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a64:	2300      	movs	r3, #0
 8005a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4805      	ldr	r0, [pc, #20]	; (8005a88 <MX_TIM2_Init+0x94>)
 8005a72:	f002 fb7d 	bl	8008170 <HAL_TIMEx_MasterConfigSynchronization>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005a7c:	f7fc fd5a 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a80:	bf00      	nop
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200029a8 	.word	0x200029a8

08005a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9c:	d115      	bne.n	8005aca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_TIM_Base_MspInit+0x48>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <HAL_TIM_Base_MspInit+0x48>)
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6413      	str	r3, [r2, #64]	; 0x40
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_TIM_Base_MspInit+0x48>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005aba:	2200      	movs	r2, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	201c      	movs	r0, #28
 8005ac0:	f000 fb27 	bl	8006112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ac4:	201c      	movs	r0, #28
 8005ac6:	f000 fb40 	bl	800614a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800

08005ad8 <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b095      	sub	sp, #84	; 0x54
 8005adc:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f7fb fe94 	bl	800180c <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005ae4:	4b6b      	ldr	r3, [pc, #428]	; (8005c94 <setupTiming+0x1bc>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	b298      	uxth	r0, r3
 8005aea:	4b6b      	ldr	r3, [pc, #428]	; (8005c98 <setupTiming+0x1c0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	b299      	uxth	r1, r3
 8005af0:	4b6a      	ldr	r3, [pc, #424]	; (8005c9c <setupTiming+0x1c4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <setupTiming+0x1c8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4c69      	ldr	r4, [pc, #420]	; (8005ca4 <setupTiming+0x1cc>)
 8005afe:	9400      	str	r4, [sp, #0]
 8005b00:	f7fc f88e 	bl	8001c20 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005b04:	2300      	movs	r3, #0
 8005b06:	9302      	str	r3, [sp, #8]
 8005b08:	2318      	movs	r3, #24
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	f248 4330 	movw	r3, #33840	; 0x8430
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b16:	4a64      	ldr	r2, [pc, #400]	; (8005ca8 <setupTiming+0x1d0>)
 8005b18:	2137      	movs	r1, #55	; 0x37
 8005b1a:	203c      	movs	r0, #60	; 0x3c
 8005b1c:	f7fc fa5a 	bl	8001fd4 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8005b20:	4a62      	ldr	r2, [pc, #392]	; (8005cac <setupTiming+0x1d4>)
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b28:	6018      	str	r0, [r3, #0]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	8019      	strh	r1, [r3, #0]
 8005b2e:	f107 030a 	add.w	r3, r7, #10
 8005b32:	222c      	movs	r2, #44	; 0x2c
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f002 fca4 	bl	8008484 <memset>
	char *str2 = convert2str(ID);
 8005b3c:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <setupTiming+0x1d8>)
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fc fcfd 	bl	8002540 <convert2str>
 8005b46:	4603      	mov	r3, r0
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 fd40 	bl	80085d4 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8005b54:	1d3a      	adds	r2, r7, #4
 8005b56:	2300      	movs	r3, #0
 8005b58:	9302      	str	r3, [sp, #8]
 8005b5a:	2318      	movs	r3, #24
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	f248 4330 	movw	r3, #33840	; 0x8430
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f7fc fa96 	bl	800209c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8005b70:	2300      	movs	r3, #0
 8005b72:	9302      	str	r3, [sp, #8]
 8005b74:	2318      	movs	r3, #24
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	f248 4330 	movw	r3, #33840	; 0x8430
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b82:	4a4c      	ldr	r2, [pc, #304]	; (8005cb4 <setupTiming+0x1dc>)
 8005b84:	2196      	movs	r1, #150	; 0x96
 8005b86:	2000      	movs	r0, #0
 8005b88:	f7fc fa88 	bl	800209c <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	2318      	movs	r3, #24
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f248 4330 	movw	r3, #33840	; 0x8430
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b9e:	4a46      	ldr	r2, [pc, #280]	; (8005cb8 <setupTiming+0x1e0>)
 8005ba0:	21d2      	movs	r1, #210	; 0xd2
 8005ba2:	2014      	movs	r0, #20
 8005ba4:	f7fc fa16 	bl	8001fd4 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8005ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	23f0      	movs	r3, #240	; 0xf0
 8005bb0:	22c8      	movs	r2, #200	; 0xc8
 8005bb2:	21d2      	movs	r1, #210	; 0xd2
 8005bb4:	2096      	movs	r0, #150	; 0x96
 8005bb6:	f7fb ff2c 	bl	8001a12 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8005bba:	4b40      	ldr	r3, [pc, #256]	; (8005cbc <setupTiming+0x1e4>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fc fcbe 	bl	8002540 <convert2str>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <setupTiming+0x1e4>)
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	2b77      	cmp	r3, #119	; 0x77
 8005bce:	d80e      	bhi.n	8005bee <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	9302      	str	r3, [sp, #8]
 8005bd4:	2318      	movs	r3, #24
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	f248 4330 	movw	r3, #33840	; 0x8430
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be4:	21d4      	movs	r1, #212	; 0xd4
 8005be6:	20a5      	movs	r0, #165	; 0xa5
 8005be8:	f7fc f9f4 	bl	8001fd4 <lcd_ShowStr>
 8005bec:	e00d      	b.n	8005c0a <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8005bee:	2301      	movs	r3, #1
 8005bf0:	9302      	str	r3, [sp, #8]
 8005bf2:	2318      	movs	r3, #24
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	f248 4330 	movw	r3, #33840	; 0x8430
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c02:	21d4      	movs	r1, #212	; 0xd4
 8005c04:	209d      	movs	r0, #157	; 0x9d
 8005c06:	f7fc f9e5 	bl	8001fd4 <lcd_ShowStr>
	}

	if(TIMING < 120)
 8005c0a:	4b2c      	ldr	r3, [pc, #176]	; (8005cbc <setupTiming+0x1e4>)
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	2b77      	cmp	r3, #119	; 0x77
 8005c10:	d81a      	bhi.n	8005c48 <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 8005c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	23c8      	movs	r3, #200	; 0xc8
 8005c1a:	22b9      	movs	r2, #185	; 0xb9
 8005c1c:	21c8      	movs	r1, #200	; 0xc8
 8005c1e:	20a5      	movs	r0, #165	; 0xa5
 8005c20:	f7fb fe73 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 8005c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	23c8      	movs	r3, #200	; 0xc8
 8005c2c:	22a5      	movs	r2, #165	; 0xa5
 8005c2e:	21b4      	movs	r1, #180	; 0xb4
 8005c30:	20af      	movs	r0, #175	; 0xaf
 8005c32:	f7fb fe6a 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 8005c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	23b4      	movs	r3, #180	; 0xb4
 8005c3e:	22af      	movs	r2, #175	; 0xaf
 8005c40:	21c8      	movs	r1, #200	; 0xc8
 8005c42:	20b9      	movs	r0, #185	; 0xb9
 8005c44:	f7fb fe61 	bl	800190a <lcd_DrawLine>
	}
	if(TIMING > 30)
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <setupTiming+0x1e4>)
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	2b1e      	cmp	r3, #30
 8005c4e:	d91c      	bls.n	8005c8a <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 8005c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	23fa      	movs	r3, #250	; 0xfa
 8005c58:	22b9      	movs	r2, #185	; 0xb9
 8005c5a:	21fa      	movs	r1, #250	; 0xfa
 8005c5c:	20a5      	movs	r0, #165	; 0xa5
 8005c5e:	f7fb fe54 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 8005c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005c6c:	22af      	movs	r2, #175	; 0xaf
 8005c6e:	21fa      	movs	r1, #250	; 0xfa
 8005c70:	20a5      	movs	r0, #165	; 0xa5
 8005c72:	f7fb fe4a 	bl	800190a <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 8005c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005c80:	22af      	movs	r2, #175	; 0xaf
 8005c82:	21fa      	movs	r1, #250	; 0xfa
 8005c84:	20b9      	movs	r0, #185	; 0xb9
 8005c86:	f7fb fe40 	bl	800190a <lcd_DrawLine>
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3744      	adds	r7, #68	; 0x44
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000074 	.word	0x20000074
 8005c98:	20000078 	.word	0x20000078
 8005c9c:	2000007c 	.word	0x2000007c
 8005ca0:	20000080 	.word	0x20000080
 8005ca4:	0800cbc4 	.word	0x0800cbc4
 8005ca8:	08009be8 	.word	0x08009be8
 8005cac:	08009c10 	.word	0x08009c10
 8005cb0:	200001a8 	.word	0x200001a8
 8005cb4:	08009bf8 	.word	0x08009bf8
 8005cb8:	08009c08 	.word	0x08009c08
 8005cbc:	20000000 	.word	0x20000000

08005cc0 <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7fc faac 	bl	8002230 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2101      	movs	r1, #1
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	f7fc faa7 	bl	8002230 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2102      	movs	r1, #2
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc faa2 	bl	8002230 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 8005cec:	2200      	movs	r2, #0
 8005cee:	2103      	movs	r1, #3
 8005cf0:	6838      	ldr	r0, [r7, #0]
 8005cf2:	f7fc fa9d 	bl	8002230 <led7_SetDigit>
	led7_SetColon(1);
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	f7fc fabe 	bl	8002278 <led7_SetColon>
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <showTiming>:

void showTiming()
{
 8005d04:	b5b0      	push	{r4, r5, r7, lr}
 8005d06:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <showTiming+0x6c>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <showTiming+0x70>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	099b      	lsrs	r3, r3, #6
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	4618      	mov	r0, r3
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <showTiming+0x6c>)
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <showTiming+0x74>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461c      	mov	r4, r3
 8005d28:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <showTiming+0x6c>)
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <showTiming+0x74>)
 8005d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d32:	0959      	lsrs	r1, r3, #5
 8005d34:	460b      	mov	r3, r1
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	1a5b      	subs	r3, r3, r1
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <showTiming+0x78>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <showTiming+0x6c>)
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <showTiming+0x78>)
 8005d52:	fba3 1302 	umull	r1, r3, r3, r2
 8005d56:	08d9      	lsrs	r1, r3, #3
 8005d58:	460b      	mov	r3, r1
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	462a      	mov	r2, r5
 8005d66:	4621      	mov	r1, r4
 8005d68:	f7ff ffaa 	bl	8005cc0 <show7seg>
}
 8005d6c:	bf00      	nop
 8005d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d70:	20000000 	.word	0x20000000
 8005d74:	1b4e81b5 	.word	0x1b4e81b5
 8005d78:	88888889 	.word	0x88888889
 8005d7c:	cccccccd 	.word	0xcccccccd

08005d80 <initTimingMode>:

void initTimingMode()
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8005d84:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <initTimingMode+0x54>)
 8005d86:	88db      	ldrh	r3, [r3, #6]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10e      	bne.n	8005daa <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <initTimingMode+0x58>)
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	331e      	adds	r3, #30
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <initTimingMode+0x58>)
 8005d96:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <initTimingMode+0x58>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	2b78      	cmp	r3, #120	; 0x78
 8005d9e:	d902      	bls.n	8005da6 <initTimingMode+0x26>
		{
			TIMING = 120;
 8005da0:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <initTimingMode+0x58>)
 8005da2:	2278      	movs	r2, #120	; 0x78
 8005da4:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8005da6:	f7ff fe97 	bl	8005ad8 <setupTiming>
	}
	if(button_count[7] == 1)
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <initTimingMode+0x54>)
 8005dac:	89db      	ldrh	r3, [r3, #14]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d10e      	bne.n	8005dd0 <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <initTimingMode+0x58>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	3b1e      	subs	r3, #30
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <initTimingMode+0x58>)
 8005dbc:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <initTimingMode+0x58>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	2b1d      	cmp	r3, #29
 8005dc4:	d802      	bhi.n	8005dcc <initTimingMode+0x4c>
		{
			TIMING = 30;
 8005dc6:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <initTimingMode+0x58>)
 8005dc8:	221e      	movs	r2, #30
 8005dca:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8005dcc:	f7ff fe84 	bl	8005ad8 <setupTiming>
	}
}
 8005dd0:	bf00      	nop
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000130 	.word	0x20000130
 8005dd8:	20000000 	.word	0x20000000

08005ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005de0:	480d      	ldr	r0, [pc, #52]	; (8005e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005de2:	490e      	ldr	r1, [pc, #56]	; (8005e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005de4:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005de8:	e002      	b.n	8005df0 <LoopCopyDataInit>

08005dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dee:	3304      	adds	r3, #4

08005df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005df4:	d3f9      	bcc.n	8005dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005df6:	4a0b      	ldr	r2, [pc, #44]	; (8005e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005df8:	4c0b      	ldr	r4, [pc, #44]	; (8005e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dfc:	e001      	b.n	8005e02 <LoopFillZerobss>

08005dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e00:	3204      	adds	r2, #4

08005e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e04:	d3fb      	bcc.n	8005dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e06:	f7ff fde3 	bl	80059d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e0a:	f002 fb17 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e0e:	f7fc fa53 	bl	80022b8 <main>
  bx  lr    
 8005e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e1c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8005e20:	0800d95c 	.word	0x0800d95c
  ldr r2, =_sbss
 8005e24:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8005e28:	20002a04 	.word	0x20002a04

08005e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e2c:	e7fe      	b.n	8005e2c <ADC_IRQHandler>
	...

08005e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e34:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_Init+0x40>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <HAL_Init+0x40>)
 8005e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_Init+0x40>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <HAL_Init+0x40>)
 8005e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <HAL_Init+0x40>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <HAL_Init+0x40>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e58:	2003      	movs	r0, #3
 8005e5a:	f000 f94f 	bl	80060fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e5e:	200f      	movs	r0, #15
 8005e60:	f000 f808 	bl	8005e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e64:	f7ff faac 	bl	80053c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023c00 	.word	0x40023c00

08005e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <HAL_InitTick+0x54>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_InitTick+0x58>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f967 	bl	8006166 <HAL_SYSTICK_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e00e      	b.n	8005ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d80a      	bhi.n	8005ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	f000 f92f 	bl	8006112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005eb4:	4a06      	ldr	r2, [pc, #24]	; (8005ed0 <HAL_InitTick+0x5c>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200000a4 	.word	0x200000a4
 8005ecc:	200000ac 	.word	0x200000ac
 8005ed0:	200000a8 	.word	0x200000a8

08005ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_IncTick+0x20>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_IncTick+0x24>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	4a04      	ldr	r2, [pc, #16]	; (8005ef8 <HAL_IncTick+0x24>)
 8005ee6:	6013      	str	r3, [r2, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	200000ac 	.word	0x200000ac
 8005ef8:	200029f0 	.word	0x200029f0

08005efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return uwTick;
 8005f00:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <HAL_GetTick+0x14>)
 8005f02:	681b      	ldr	r3, [r3, #0]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	200029f0 	.word	0x200029f0

08005f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f1c:	f7ff ffee 	bl	8005efc <HAL_GetTick>
 8005f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d005      	beq.n	8005f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <HAL_Delay+0x44>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f3a:	bf00      	nop
 8005f3c:	f7ff ffde 	bl	8005efc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d8f7      	bhi.n	8005f3c <HAL_Delay+0x28>
  {
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	200000ac 	.word	0x200000ac

08005f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f8e:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	60d3      	str	r3, [r2, #12]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	e000ed00 	.word	0xe000ed00

08005fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <__NVIC_GetPriorityGrouping+0x18>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	f003 0307 	and.w	r3, r3, #7
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	db0b      	blt.n	8005fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	f003 021f 	and.w	r2, r3, #31
 8005fd8:	4907      	ldr	r1, [pc, #28]	; (8005ff8 <__NVIC_EnableIRQ+0x38>)
 8005fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	e000e100 	.word	0xe000e100

08005ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	6039      	str	r1, [r7, #0]
 8006006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600c:	2b00      	cmp	r3, #0
 800600e:	db0a      	blt.n	8006026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	490c      	ldr	r1, [pc, #48]	; (8006048 <__NVIC_SetPriority+0x4c>)
 8006016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601a:	0112      	lsls	r2, r2, #4
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	440b      	add	r3, r1
 8006020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006024:	e00a      	b.n	800603c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <__NVIC_SetPriority+0x50>)
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	3b04      	subs	r3, #4
 8006034:	0112      	lsls	r2, r2, #4
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	440b      	add	r3, r1
 800603a:	761a      	strb	r2, [r3, #24]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000e100 	.word	0xe000e100
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f1c3 0307 	rsb	r3, r3, #7
 800606a:	2b04      	cmp	r3, #4
 800606c:	bf28      	it	cs
 800606e:	2304      	movcs	r3, #4
 8006070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3304      	adds	r3, #4
 8006076:	2b06      	cmp	r3, #6
 8006078:	d902      	bls.n	8006080 <NVIC_EncodePriority+0x30>
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	3b03      	subs	r3, #3
 800607e:	e000      	b.n	8006082 <NVIC_EncodePriority+0x32>
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006084:	f04f 32ff 	mov.w	r2, #4294967295
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43da      	mvns	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	401a      	ands	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006098:	f04f 31ff 	mov.w	r1, #4294967295
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	fa01 f303 	lsl.w	r3, r1, r3
 80060a2:	43d9      	mvns	r1, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a8:	4313      	orrs	r3, r2
         );
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060c8:	d301      	bcc.n	80060ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ca:	2301      	movs	r3, #1
 80060cc:	e00f      	b.n	80060ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060ce:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <SysTick_Config+0x40>)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060d6:	210f      	movs	r1, #15
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	f7ff ff8e 	bl	8005ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <SysTick_Config+0x40>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060e6:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <SysTick_Config+0x40>)
 80060e8:	2207      	movs	r2, #7
 80060ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	e000e010 	.word	0xe000e010

080060fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff ff29 	bl	8005f5c <__NVIC_SetPriorityGrouping>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006112:	b580      	push	{r7, lr}
 8006114:	b086      	sub	sp, #24
 8006116:	af00      	add	r7, sp, #0
 8006118:	4603      	mov	r3, r0
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006124:	f7ff ff3e 	bl	8005fa4 <__NVIC_GetPriorityGrouping>
 8006128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	f7ff ff8e 	bl	8006050 <NVIC_EncodePriority>
 8006134:	4602      	mov	r2, r0
 8006136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff ff5d 	bl	8005ffc <__NVIC_SetPriority>
}
 8006142:	bf00      	nop
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	4603      	mov	r3, r0
 8006152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff ff31 	bl	8005fc0 <__NVIC_EnableIRQ>
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ffa2 	bl	80060b8 <SysTick_Config>
 8006174:	4603      	mov	r3, r0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	; 0x24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006192:	2300      	movs	r3, #0
 8006194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e16b      	b.n	8006474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800619c:	2201      	movs	r2, #1
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4013      	ands	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	f040 815a 	bne.w	800646e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d005      	beq.n	80061d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d130      	bne.n	8006234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	2203      	movs	r2, #3
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4013      	ands	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006208:	2201      	movs	r2, #1
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4013      	ands	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f003 0201 	and.w	r2, r3, #1
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b03      	cmp	r3, #3
 800623e:	d017      	beq.n	8006270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	2203      	movs	r2, #3
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4013      	ands	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4313      	orrs	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d123      	bne.n	80062c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	08da      	lsrs	r2, r3, #3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3208      	adds	r2, #8
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	220f      	movs	r2, #15
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	08da      	lsrs	r2, r3, #3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3208      	adds	r2, #8
 80062be:	69b9      	ldr	r1, [r7, #24]
 80062c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	2203      	movs	r2, #3
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f003 0203 	and.w	r2, r3, #3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80b4 	beq.w	800646e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	4b60      	ldr	r3, [pc, #384]	; (800648c <HAL_GPIO_Init+0x30c>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	4a5f      	ldr	r2, [pc, #380]	; (800648c <HAL_GPIO_Init+0x30c>)
 8006310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006314:	6453      	str	r3, [r2, #68]	; 0x44
 8006316:	4b5d      	ldr	r3, [pc, #372]	; (800648c <HAL_GPIO_Init+0x30c>)
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006322:	4a5b      	ldr	r2, [pc, #364]	; (8006490 <HAL_GPIO_Init+0x310>)
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	3302      	adds	r3, #2
 800632a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	220f      	movs	r2, #15
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a52      	ldr	r2, [pc, #328]	; (8006494 <HAL_GPIO_Init+0x314>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d02b      	beq.n	80063a6 <HAL_GPIO_Init+0x226>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a51      	ldr	r2, [pc, #324]	; (8006498 <HAL_GPIO_Init+0x318>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d025      	beq.n	80063a2 <HAL_GPIO_Init+0x222>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a50      	ldr	r2, [pc, #320]	; (800649c <HAL_GPIO_Init+0x31c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01f      	beq.n	800639e <HAL_GPIO_Init+0x21e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a4f      	ldr	r2, [pc, #316]	; (80064a0 <HAL_GPIO_Init+0x320>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d019      	beq.n	800639a <HAL_GPIO_Init+0x21a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a4e      	ldr	r2, [pc, #312]	; (80064a4 <HAL_GPIO_Init+0x324>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_GPIO_Init+0x216>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a4d      	ldr	r2, [pc, #308]	; (80064a8 <HAL_GPIO_Init+0x328>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00d      	beq.n	8006392 <HAL_GPIO_Init+0x212>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a4c      	ldr	r2, [pc, #304]	; (80064ac <HAL_GPIO_Init+0x32c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <HAL_GPIO_Init+0x20e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a4b      	ldr	r2, [pc, #300]	; (80064b0 <HAL_GPIO_Init+0x330>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <HAL_GPIO_Init+0x20a>
 8006386:	2307      	movs	r3, #7
 8006388:	e00e      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 800638a:	2308      	movs	r3, #8
 800638c:	e00c      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 800638e:	2306      	movs	r3, #6
 8006390:	e00a      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 8006392:	2305      	movs	r3, #5
 8006394:	e008      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 8006396:	2304      	movs	r3, #4
 8006398:	e006      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 800639a:	2303      	movs	r3, #3
 800639c:	e004      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 800639e:	2302      	movs	r3, #2
 80063a0:	e002      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_GPIO_Init+0x228>
 80063a6:	2300      	movs	r3, #0
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	f002 0203 	and.w	r2, r2, #3
 80063ae:	0092      	lsls	r2, r2, #2
 80063b0:	4093      	lsls	r3, r2
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063b8:	4935      	ldr	r1, [pc, #212]	; (8006490 <HAL_GPIO_Init+0x310>)
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	089b      	lsrs	r3, r3, #2
 80063be:	3302      	adds	r3, #2
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063c6:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <HAL_GPIO_Init+0x334>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4013      	ands	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063ea:	4a32      	ldr	r2, [pc, #200]	; (80064b4 <HAL_GPIO_Init+0x334>)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <HAL_GPIO_Init+0x334>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <HAL_GPIO_Init+0x334>)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <HAL_GPIO_Init+0x334>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	43db      	mvns	r3, r3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	4013      	ands	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800643e:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <HAL_GPIO_Init+0x334>)
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <HAL_GPIO_Init+0x334>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006468:	4a12      	ldr	r2, [pc, #72]	; (80064b4 <HAL_GPIO_Init+0x334>)
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3301      	adds	r3, #1
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b0f      	cmp	r3, #15
 8006478:	f67f ae90 	bls.w	800619c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	3724      	adds	r7, #36	; 0x24
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40023800 	.word	0x40023800
 8006490:	40013800 	.word	0x40013800
 8006494:	40020000 	.word	0x40020000
 8006498:	40020400 	.word	0x40020400
 800649c:	40020800 	.word	0x40020800
 80064a0:	40020c00 	.word	0x40020c00
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40021400 	.word	0x40021400
 80064ac:	40021800 	.word	0x40021800
 80064b0:	40021c00 	.word	0x40021c00
 80064b4:	40013c00 	.word	0x40013c00

080064b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	807b      	strh	r3, [r7, #2]
 80064c4:	4613      	mov	r3, r2
 80064c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064c8:	787b      	ldrb	r3, [r7, #1]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064d4:	e003      	b.n	80064de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064d6:	887b      	ldrh	r3, [r7, #2]
 80064d8:	041a      	lsls	r2, r3, #16
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	619a      	str	r2, [r3, #24]
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e267      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d075      	beq.n	80065f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800650a:	4b88      	ldr	r3, [pc, #544]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00c      	beq.n	8006530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006516:	4b85      	ldr	r3, [pc, #532]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800651e:	2b08      	cmp	r3, #8
 8006520:	d112      	bne.n	8006548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006522:	4b82      	ldr	r3, [pc, #520]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652e:	d10b      	bne.n	8006548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006530:	4b7e      	ldr	r3, [pc, #504]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d05b      	beq.n	80065f4 <HAL_RCC_OscConfig+0x108>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d157      	bne.n	80065f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e242      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006550:	d106      	bne.n	8006560 <HAL_RCC_OscConfig+0x74>
 8006552:	4b76      	ldr	r3, [pc, #472]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a75      	ldr	r2, [pc, #468]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e01d      	b.n	800659c <HAL_RCC_OscConfig+0xb0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x98>
 800656a:	4b70      	ldr	r3, [pc, #448]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a6f      	ldr	r2, [pc, #444]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4b6d      	ldr	r3, [pc, #436]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a6c      	ldr	r2, [pc, #432]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800657c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e00b      	b.n	800659c <HAL_RCC_OscConfig+0xb0>
 8006584:	4b69      	ldr	r3, [pc, #420]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a68      	ldr	r2, [pc, #416]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800658a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	4b66      	ldr	r3, [pc, #408]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a65      	ldr	r2, [pc, #404]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800659a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d013      	beq.n	80065cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7ff fcaa 	bl	8005efc <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065ac:	f7ff fca6 	bl	8005efc <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e207      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065be:	4b5b      	ldr	r3, [pc, #364]	; (800672c <HAL_RCC_OscConfig+0x240>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0xc0>
 80065ca:	e014      	b.n	80065f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065cc:	f7ff fc96 	bl	8005efc <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d4:	f7ff fc92 	bl	8005efc <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b64      	cmp	r3, #100	; 0x64
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e1f3      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065e6:	4b51      	ldr	r3, [pc, #324]	; (800672c <HAL_RCC_OscConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0xe8>
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d063      	beq.n	80066ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006602:	4b4a      	ldr	r3, [pc, #296]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800660e:	4b47      	ldr	r3, [pc, #284]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006616:	2b08      	cmp	r3, #8
 8006618:	d11c      	bne.n	8006654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800661a:	4b44      	ldr	r3, [pc, #272]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d116      	bne.n	8006654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006626:	4b41      	ldr	r3, [pc, #260]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_RCC_OscConfig+0x152>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d001      	beq.n	800663e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e1c7      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800663e:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4937      	ldr	r1, [pc, #220]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006652:	e03a      	b.n	80066ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d020      	beq.n	800669e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800665c:	4b34      	ldr	r3, [pc, #208]	; (8006730 <HAL_RCC_OscConfig+0x244>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006662:	f7ff fc4b 	bl	8005efc <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800666a:	f7ff fc47 	bl	8005efc <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e1a8      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800667c:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006688:	4b28      	ldr	r3, [pc, #160]	; (800672c <HAL_RCC_OscConfig+0x240>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4925      	ldr	r1, [pc, #148]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]
 800669c:	e015      	b.n	80066ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <HAL_RCC_OscConfig+0x244>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7ff fc2a 	bl	8005efc <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066ac:	f7ff fc26 	bl	8005efc <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e187      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066be:	4b1b      	ldr	r3, [pc, #108]	; (800672c <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d036      	beq.n	8006744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d016      	beq.n	800670c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066de:	4b15      	ldr	r3, [pc, #84]	; (8006734 <HAL_RCC_OscConfig+0x248>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7ff fc0a 	bl	8005efc <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ec:	f7ff fc06 	bl	8005efc <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e167      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_RCC_OscConfig+0x240>)
 8006700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0x200>
 800670a:	e01b      	b.n	8006744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <HAL_RCC_OscConfig+0x248>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006712:	f7ff fbf3 	bl	8005efc <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006718:	e00e      	b.n	8006738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800671a:	f7ff fbef 	bl	8005efc <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d907      	bls.n	8006738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e150      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
 800672c:	40023800 	.word	0x40023800
 8006730:	42470000 	.word	0x42470000
 8006734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006738:	4b88      	ldr	r3, [pc, #544]	; (800695c <HAL_RCC_OscConfig+0x470>)
 800673a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1ea      	bne.n	800671a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8097 	beq.w	8006880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006756:	4b81      	ldr	r3, [pc, #516]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	4b7d      	ldr	r3, [pc, #500]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4a7c      	ldr	r2, [pc, #496]	; (800695c <HAL_RCC_OscConfig+0x470>)
 800676c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006770:	6413      	str	r3, [r2, #64]	; 0x40
 8006772:	4b7a      	ldr	r3, [pc, #488]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677a:	60bb      	str	r3, [r7, #8]
 800677c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006782:	4b77      	ldr	r3, [pc, #476]	; (8006960 <HAL_RCC_OscConfig+0x474>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d118      	bne.n	80067c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800678e:	4b74      	ldr	r3, [pc, #464]	; (8006960 <HAL_RCC_OscConfig+0x474>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a73      	ldr	r2, [pc, #460]	; (8006960 <HAL_RCC_OscConfig+0x474>)
 8006794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679a:	f7ff fbaf 	bl	8005efc <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a2:	f7ff fbab 	bl	8005efc <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e10c      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b4:	4b6a      	ldr	r3, [pc, #424]	; (8006960 <HAL_RCC_OscConfig+0x474>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d106      	bne.n	80067d6 <HAL_RCC_OscConfig+0x2ea>
 80067c8:	4b64      	ldr	r3, [pc, #400]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	4a63      	ldr	r2, [pc, #396]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	6713      	str	r3, [r2, #112]	; 0x70
 80067d4:	e01c      	b.n	8006810 <HAL_RCC_OscConfig+0x324>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x30c>
 80067de:	4b5f      	ldr	r3, [pc, #380]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a5e      	ldr	r2, [pc, #376]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ea:	4b5c      	ldr	r3, [pc, #368]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	4a5b      	ldr	r2, [pc, #364]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6713      	str	r3, [r2, #112]	; 0x70
 80067f6:	e00b      	b.n	8006810 <HAL_RCC_OscConfig+0x324>
 80067f8:	4b58      	ldr	r3, [pc, #352]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fc:	4a57      	ldr	r2, [pc, #348]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	6713      	str	r3, [r2, #112]	; 0x70
 8006804:	4b55      	ldr	r3, [pc, #340]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	4a54      	ldr	r2, [pc, #336]	; (800695c <HAL_RCC_OscConfig+0x470>)
 800680a:	f023 0304 	bic.w	r3, r3, #4
 800680e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d015      	beq.n	8006844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006818:	f7ff fb70 	bl	8005efc <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681e:	e00a      	b.n	8006836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006820:	f7ff fb6c 	bl	8005efc <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f241 3288 	movw	r2, #5000	; 0x1388
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e0cb      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006836:	4b49      	ldr	r3, [pc, #292]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0ee      	beq.n	8006820 <HAL_RCC_OscConfig+0x334>
 8006842:	e014      	b.n	800686e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006844:	f7ff fb5a 	bl	8005efc <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684a:	e00a      	b.n	8006862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800684c:	f7ff fb56 	bl	8005efc <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f241 3288 	movw	r2, #5000	; 0x1388
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e0b5      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006862:	4b3e      	ldr	r3, [pc, #248]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1ee      	bne.n	800684c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d105      	bne.n	8006880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006874:	4b39      	ldr	r3, [pc, #228]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	4a38      	ldr	r2, [pc, #224]	; (800695c <HAL_RCC_OscConfig+0x470>)
 800687a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80a1 	beq.w	80069cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800688a:	4b34      	ldr	r3, [pc, #208]	; (800695c <HAL_RCC_OscConfig+0x470>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b08      	cmp	r3, #8
 8006894:	d05c      	beq.n	8006950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d141      	bne.n	8006922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689e:	4b31      	ldr	r3, [pc, #196]	; (8006964 <HAL_RCC_OscConfig+0x478>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7ff fb2a 	bl	8005efc <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ac:	f7ff fb26 	bl	8005efc <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e087      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068be:	4b27      	ldr	r3, [pc, #156]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	3b01      	subs	r3, #1
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	491b      	ldr	r1, [pc, #108]	; (800695c <HAL_RCC_OscConfig+0x470>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <HAL_RCC_OscConfig+0x478>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fa:	f7ff faff 	bl	8005efc <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006902:	f7ff fafb 	bl	8005efc <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e05c      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f0      	beq.n	8006902 <HAL_RCC_OscConfig+0x416>
 8006920:	e054      	b.n	80069cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006922:	4b10      	ldr	r3, [pc, #64]	; (8006964 <HAL_RCC_OscConfig+0x478>)
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006928:	f7ff fae8 	bl	8005efc <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006930:	f7ff fae4 	bl	8005efc <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e045      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCC_OscConfig+0x470>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f0      	bne.n	8006930 <HAL_RCC_OscConfig+0x444>
 800694e:	e03d      	b.n	80069cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d107      	bne.n	8006968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e038      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
 800695c:	40023800 	.word	0x40023800
 8006960:	40007000 	.word	0x40007000
 8006964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006968:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_RCC_OscConfig+0x4ec>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d028      	beq.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d121      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698e:	429a      	cmp	r2, r3
 8006990:	d11a      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800699e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d111      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	3b01      	subs	r3, #1
 80069b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d107      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40023800 	.word	0x40023800

080069dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0cc      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069f0:	4b68      	ldr	r3, [pc, #416]	; (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d90c      	bls.n	8006a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fe:	4b65      	ldr	r3, [pc, #404]	; (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a06:	4b63      	ldr	r3, [pc, #396]	; (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0b8      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a30:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	4a58      	ldr	r2, [pc, #352]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a48:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4a52      	ldr	r2, [pc, #328]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a54:	4b50      	ldr	r3, [pc, #320]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	494d      	ldr	r1, [pc, #308]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d044      	beq.n	8006afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d107      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d119      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e07f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d107      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9a:	4b3f      	ldr	r3, [pc, #252]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e06f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aaa:	4b3b      	ldr	r3, [pc, #236]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e067      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aba:	4b37      	ldr	r3, [pc, #220]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	4934      	ldr	r1, [pc, #208]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006acc:	f7ff fa16 	bl	8005efc <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad4:	f7ff fa12 	bl	8005efc <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e04f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aea:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 020c 	and.w	r2, r3, #12
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d1eb      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d20c      	bcs.n	8006b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b20      	ldr	r3, [pc, #128]	; (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e032      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b30:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4916      	ldr	r1, [pc, #88]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b4e:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	490e      	ldr	r1, [pc, #56]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b62:	f000 f821 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	490a      	ldr	r1, [pc, #40]	; (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006b74:	5ccb      	ldrb	r3, [r1, r3]
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff f976 	bl	8005e74 <HAL_InitTick>

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40023c00 	.word	0x40023c00
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	0800d7f4 	.word	0x0800d7f4
 8006ba0:	200000a4 	.word	0x200000a4
 8006ba4:	200000a8 	.word	0x200000a8

08006ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bac:	b094      	sub	sp, #80	; 0x50
 8006bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb8:	2300      	movs	r3, #0
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc0:	4b79      	ldr	r3, [pc, #484]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d00d      	beq.n	8006be8 <HAL_RCC_GetSysClockFreq+0x40>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	f200 80e1 	bhi.w	8006d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_RCC_GetSysClockFreq+0x34>
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bda:	e0db      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bdc:	4b73      	ldr	r3, [pc, #460]	; (8006dac <HAL_RCC_GetSysClockFreq+0x204>)
 8006bde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006be0:	e0db      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006be2:	4b73      	ldr	r3, [pc, #460]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006be6:	e0d8      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be8:	4b6f      	ldr	r3, [pc, #444]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bf2:	4b6d      	ldr	r3, [pc, #436]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d063      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfe:	4b6a      	ldr	r3, [pc, #424]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	099b      	lsrs	r3, r3, #6
 8006c04:	2200      	movs	r2, #0
 8006c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
 8006c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f04f 0000 	mov.w	r0, #0
 8006c22:	f04f 0100 	mov.w	r1, #0
 8006c26:	0159      	lsls	r1, r3, #5
 8006c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c2c:	0150      	lsls	r0, r2, #5
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4621      	mov	r1, r4
 8006c34:	1a51      	subs	r1, r2, r1
 8006c36:	6139      	str	r1, [r7, #16]
 8006c38:	4629      	mov	r1, r5
 8006c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	018b      	lsls	r3, r1, #6
 8006c50:	4651      	mov	r1, sl
 8006c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c56:	4651      	mov	r1, sl
 8006c58:	018a      	lsls	r2, r1, #6
 8006c5a:	4651      	mov	r1, sl
 8006c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8006c60:	4659      	mov	r1, fp
 8006c62:	eb63 0901 	sbc.w	r9, r3, r1
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c7a:	4690      	mov	r8, r2
 8006c7c:	4699      	mov	r9, r3
 8006c7e:	4623      	mov	r3, r4
 8006c80:	eb18 0303 	adds.w	r3, r8, r3
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	462b      	mov	r3, r5
 8006c88:	eb49 0303 	adc.w	r3, r9, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	024b      	lsls	r3, r1, #9
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	024a      	lsls	r2, r1, #9
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cae:	2200      	movs	r2, #0
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cb8:	f7f9 fae2 	bl	8000280 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc4:	e058      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b38      	ldr	r3, [pc, #224]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cd6:	623b      	str	r3, [r7, #32]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
 8006cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	f04f 0000 	mov.w	r0, #0
 8006ce8:	f04f 0100 	mov.w	r1, #0
 8006cec:	0159      	lsls	r1, r3, #5
 8006cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf2:	0150      	lsls	r0, r2, #5
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cfe:	4649      	mov	r1, r9
 8006d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d18:	ebb2 040a 	subs.w	r4, r2, sl
 8006d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	00eb      	lsls	r3, r5, #3
 8006d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d2e:	00e2      	lsls	r2, r4, #3
 8006d30:	4614      	mov	r4, r2
 8006d32:	461d      	mov	r5, r3
 8006d34:	4643      	mov	r3, r8
 8006d36:	18e3      	adds	r3, r4, r3
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	eb45 0303 	adc.w	r3, r5, r3
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d4e:	4629      	mov	r1, r5
 8006d50:	028b      	lsls	r3, r1, #10
 8006d52:	4621      	mov	r1, r4
 8006d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d58:	4621      	mov	r1, r4
 8006d5a:	028a      	lsls	r2, r1, #10
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d62:	2200      	movs	r2, #0
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	61fa      	str	r2, [r7, #28]
 8006d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d6c:	f7f9 fa88 	bl	8000280 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4613      	mov	r3, r2
 8006d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	3301      	adds	r3, #1
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d92:	e002      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCC_GetSysClockFreq+0x204>)
 8006d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3750      	adds	r7, #80	; 0x50
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800
 8006dac:	00f42400 	.word	0x00f42400
 8006db0:	007a1200 	.word	0x007a1200

08006db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e07b      	b.n	8006ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd6:	d009      	beq.n	8006dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61da      	str	r2, [r3, #28]
 8006dde:	e005      	b.n	8006dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fd fbf2 	bl	80045f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e70:	ea42 0103 	orr.w	r1, r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	0c1b      	lsrs	r3, r3, #16
 8006e8a:	f003 0104 	and.w	r1, r3, #4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0210 	and.w	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b088      	sub	sp, #32
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	603b      	str	r3, [r7, #0]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_SPI_Transmit+0x22>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e126      	b.n	8007136 <HAL_SPI_Transmit+0x270>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ef0:	f7ff f804 	bl	8005efc <HAL_GetTick>
 8006ef4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d002      	beq.n	8006f0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f06:	2302      	movs	r3, #2
 8006f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f0a:	e10b      	b.n	8007124 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_SPI_Transmit+0x52>
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f1c:	e102      	b.n	8007124 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2203      	movs	r2, #3
 8006f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f64:	d10f      	bne.n	8006f86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d007      	beq.n	8006fa4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fac:	d14b      	bne.n	8007046 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0xf6>
 8006fb6:	8afb      	ldrh	r3, [r7, #22]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d13e      	bne.n	800703a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	881a      	ldrh	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	1c9a      	adds	r2, r3, #2
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fe0:	e02b      	b.n	800703a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d112      	bne.n	8007016 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	881a      	ldrh	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	86da      	strh	r2, [r3, #54]	; 0x36
 8007014:	e011      	b.n	800703a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007016:	f7fe ff71 	bl	8005efc <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d803      	bhi.n	800702e <HAL_SPI_Transmit+0x168>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d102      	bne.n	8007034 <HAL_SPI_Transmit+0x16e>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007038:	e074      	b.n	8007124 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1ce      	bne.n	8006fe2 <HAL_SPI_Transmit+0x11c>
 8007044:	e04c      	b.n	80070e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_SPI_Transmit+0x18e>
 800704e:	8afb      	ldrh	r3, [r7, #22]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d140      	bne.n	80070d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800707a:	e02c      	b.n	80070d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	d113      	bne.n	80070b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	7812      	ldrb	r2, [r2, #0]
 8007096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80070b0:	e011      	b.n	80070d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070b2:	f7fe ff23 	bl	8005efc <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d803      	bhi.n	80070ca <HAL_SPI_Transmit+0x204>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d102      	bne.n	80070d0 <HAL_SPI_Transmit+0x20a>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070d4:	e026      	b.n	8007124 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1cd      	bne.n	800707c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fbcb 	bl	8007880 <SPI_EndRxTxTransaction>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070fe:	2300      	movs	r3, #0
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e000      	b.n	8007124 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007134:	7ffb      	ldrb	r3, [r7, #31]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b088      	sub	sp, #32
 8007142:	af02      	add	r7, sp, #8
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800715a:	d112      	bne.n	8007182 <HAL_SPI_Receive+0x44>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10e      	bne.n	8007182 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2204      	movs	r2, #4
 8007168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800716c:	88fa      	ldrh	r2, [r7, #6]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f8f1 	bl	8007360 <HAL_SPI_TransmitReceive>
 800717e:	4603      	mov	r3, r0
 8007180:	e0ea      	b.n	8007358 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_SPI_Receive+0x52>
 800718c:	2302      	movs	r3, #2
 800718e:	e0e3      	b.n	8007358 <HAL_SPI_Receive+0x21a>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007198:	f7fe feb0 	bl	8005efc <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d002      	beq.n	80071b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80071aa:	2302      	movs	r3, #2
 80071ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071ae:	e0ca      	b.n	8007346 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_SPI_Receive+0x7e>
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071c0:	e0c1      	b.n	8007346 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2204      	movs	r2, #4
 80071c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007208:	d10f      	bne.n	800722a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007228:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d007      	beq.n	8007248 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007246:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d162      	bne.n	8007316 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007250:	e02e      	b.n	80072b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	d115      	bne.n	800728c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f103 020c 	add.w	r2, r3, #12
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	7812      	ldrb	r2, [r2, #0]
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	87da      	strh	r2, [r3, #62]	; 0x3e
 800728a:	e011      	b.n	80072b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800728c:	f7fe fe36 	bl	8005efc <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d803      	bhi.n	80072a4 <HAL_SPI_Receive+0x166>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d102      	bne.n	80072aa <HAL_SPI_Receive+0x16c>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072ae:	e04a      	b.n	8007346 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1cb      	bne.n	8007252 <HAL_SPI_Receive+0x114>
 80072ba:	e031      	b.n	8007320 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d113      	bne.n	80072f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	b292      	uxth	r2, r2
 80072d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	1c9a      	adds	r2, r3, #2
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072f0:	e011      	b.n	8007316 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f2:	f7fe fe03 	bl	8005efc <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d803      	bhi.n	800730a <HAL_SPI_Receive+0x1cc>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d102      	bne.n	8007310 <HAL_SPI_Receive+0x1d2>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007314:	e017      	b.n	8007346 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1cd      	bne.n	80072bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fa45 	bl	80077b4 <SPI_EndRxTransaction>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	75fb      	strb	r3, [r7, #23]
 8007342:	e000      	b.n	8007346 <HAL_SPI_Receive+0x208>
  }

error :
 8007344:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08c      	sub	sp, #48	; 0x30
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800736e:	2301      	movs	r3, #1
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x26>
 8007382:	2302      	movs	r3, #2
 8007384:	e18a      	b.n	800769c <HAL_SPI_TransmitReceive+0x33c>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800738e:	f7fe fdb5 	bl	8005efc <HAL_GetTick>
 8007392:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073a4:	887b      	ldrh	r3, [r7, #2]
 80073a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d00f      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x70>
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b6:	d107      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x68>
 80073c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d003      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073c8:	2302      	movs	r3, #2
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073ce:	e15b      	b.n	8007688 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_SPI_TransmitReceive+0x82>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_SPI_TransmitReceive+0x82>
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073e8:	e14e      	b.n	8007688 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d003      	beq.n	80073fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2205      	movs	r2, #5
 80073fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	887a      	ldrh	r2, [r7, #2]
 800740e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	887a      	ldrh	r2, [r7, #2]
 8007426:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d007      	beq.n	8007452 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800745a:	d178      	bne.n	800754e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_SPI_TransmitReceive+0x10a>
 8007464:	8b7b      	ldrh	r3, [r7, #26]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d166      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	881a      	ldrh	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	1c9a      	adds	r2, r3, #2
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748e:	e053      	b.n	8007538 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b02      	cmp	r3, #2
 800749c:	d11b      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x176>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d016      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x176>
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d113      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	881a      	ldrh	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	1c9a      	adds	r2, r3, #2
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d119      	bne.n	8007518 <HAL_SPI_TransmitReceive+0x1b8>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d014      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	b292      	uxth	r2, r2
 80074fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	1c9a      	adds	r2, r3, #2
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007514:	2301      	movs	r3, #1
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007518:	f7fe fcf0 	bl	8005efc <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007524:	429a      	cmp	r2, r3
 8007526:	d807      	bhi.n	8007538 <HAL_SPI_TransmitReceive+0x1d8>
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d003      	beq.n	8007538 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007536:	e0a7      	b.n	8007688 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1a6      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x130>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1a1      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x130>
 800754c:	e07c      	b.n	8007648 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_SPI_TransmitReceive+0x1fc>
 8007556:	8b7b      	ldrh	r3, [r7, #26]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d16b      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	330c      	adds	r3, #12
 8007566:	7812      	ldrb	r2, [r2, #0]
 8007568:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007582:	e057      	b.n	8007634 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	d11c      	bne.n	80075cc <HAL_SPI_TransmitReceive+0x26c>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x26c>
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d114      	bne.n	80075cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	7812      	ldrb	r2, [r2, #0]
 80075ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d119      	bne.n	800760e <HAL_SPI_TransmitReceive+0x2ae>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d014      	beq.n	800760e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800760a:	2301      	movs	r3, #1
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800760e:	f7fe fc75 	bl	8005efc <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800761a:	429a      	cmp	r2, r3
 800761c:	d803      	bhi.n	8007626 <HAL_SPI_TransmitReceive+0x2c6>
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d102      	bne.n	800762c <HAL_SPI_TransmitReceive+0x2cc>
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007632:	e029      	b.n	8007688 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1a2      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x224>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d19d      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f917 	bl	8007880 <SPI_EndRxTxTransaction>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d006      	beq.n	8007666 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007664:	e010      	b.n	8007688 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	e000      	b.n	8007688 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007686:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007698:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800769c:	4618      	mov	r0, r3
 800769e:	3730      	adds	r7, #48	; 0x30
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076b4:	f7fe fc22 	bl	8005efc <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4413      	add	r3, r2
 80076c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076c4:	f7fe fc1a 	bl	8005efc <HAL_GetTick>
 80076c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ca:	4b39      	ldr	r3, [pc, #228]	; (80077b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	015b      	lsls	r3, r3, #5
 80076d0:	0d1b      	lsrs	r3, r3, #20
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	fb02 f303 	mul.w	r3, r2, r3
 80076d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076da:	e054      	b.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e2:	d050      	beq.n	8007786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076e4:	f7fe fc0a 	bl	8005efc <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d902      	bls.n	80076fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13d      	bne.n	8007776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007712:	d111      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771c:	d004      	beq.n	8007728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007726:	d107      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007740:	d10f      	bne.n	8007762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e017      	b.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3b01      	subs	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4013      	ands	r3, r2
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	429a      	cmp	r2, r3
 8007794:	bf0c      	ite	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	2300      	movne	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d19b      	bne.n	80076dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200000a4 	.word	0x200000a4

080077b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c8:	d111      	bne.n	80077ee <SPI_EndRxTransaction+0x3a>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d2:	d004      	beq.n	80077de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077dc:	d107      	bne.n	80077ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f6:	d12a      	bne.n	800784e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007800:	d012      	beq.n	8007828 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2200      	movs	r2, #0
 800780a:	2180      	movs	r1, #128	; 0x80
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff ff49 	bl	80076a4 <SPI_WaitFlagStateUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d02d      	beq.n	8007874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	f043 0220 	orr.w	r2, r3, #32
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e026      	b.n	8007876 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2200      	movs	r2, #0
 8007830:	2101      	movs	r1, #1
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff ff36 	bl	80076a4 <SPI_WaitFlagStateUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01a      	beq.n	8007874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007842:	f043 0220 	orr.w	r2, r3, #32
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e013      	b.n	8007876 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2200      	movs	r2, #0
 8007856:	2101      	movs	r1, #1
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff ff23 	bl	80076a4 <SPI_WaitFlagStateUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e000      	b.n	8007876 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800788c:	4b1b      	ldr	r3, [pc, #108]	; (80078fc <SPI_EndRxTxTransaction+0x7c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <SPI_EndRxTxTransaction+0x80>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	0d5b      	lsrs	r3, r3, #21
 8007898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800789c:	fb02 f303 	mul.w	r3, r2, r3
 80078a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078aa:	d112      	bne.n	80078d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	2180      	movs	r1, #128	; 0x80
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fef4 	bl	80076a4 <SPI_WaitFlagStateUntilTimeout>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f043 0220 	orr.w	r2, r3, #32
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e00f      	b.n	80078f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	3b01      	subs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d0f2      	beq.n	80078d2 <SPI_EndRxTxTransaction+0x52>
 80078ec:	e000      	b.n	80078f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80078ee:	bf00      	nop
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200000a4 	.word	0x200000a4
 8007900:	165e9f81 	.word	0x165e9f81

08007904 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e034      	b.n	8007984 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7f9 fb58 	bl	8000fe4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3308      	adds	r3, #8
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f000 fca6 	bl	8008290 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	461a      	mov	r2, r3
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	f000 fcf0 	bl	8008334 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6858      	ldr	r0, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	f000 fd25 	bl	80083b0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	6892      	ldr	r2, [r2, #8]
 800796e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	6892      	ldr	r2, [r2, #8]
 800797a:	f041 0101 	orr.w	r1, r1, #1
 800797e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e041      	b.n	8007a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fe f86a 	bl	8005a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f000 fa96 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d001      	beq.n	8007a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e04e      	b.n	8007ae2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a23      	ldr	r2, [pc, #140]	; (8007af0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d022      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6e:	d01d      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d018      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1c      	ldr	r2, [pc, #112]	; (8007afc <HAL_TIM_Base_Start_IT+0xd0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00e      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a19      	ldr	r2, [pc, #100]	; (8007b04 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x80>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIM_Base_Start_IT+0xdc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d111      	bne.n	8007ad0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d010      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ace:	e007      	b.n	8007ae0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	40010400 	.word	0x40010400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40001800 	.word	0x40001800

08007b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d122      	bne.n	8007b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d11b      	bne.n	8007b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0202 	mvn.w	r2, #2
 8007b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f9b5 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9a7 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f9b8 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d122      	bne.n	8007bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d11b      	bne.n	8007bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0204 	mvn.w	r2, #4
 8007b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f98b 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007ba8:	e005      	b.n	8007bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f97d 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f98e 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d122      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d11b      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0208 	mvn.w	r2, #8
 8007be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2204      	movs	r2, #4
 8007be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f961 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007bfc:	e005      	b.n	8007c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f953 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f964 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d122      	bne.n	8007c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d11b      	bne.n	8007c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0210 	mvn.w	r2, #16
 8007c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2208      	movs	r2, #8
 8007c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f937 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007c50:	e005      	b.n	8007c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f929 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f93a 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d10e      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d107      	bne.n	8007c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0201 	mvn.w	r2, #1
 8007c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fc fbf0 	bl	8004470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b80      	cmp	r3, #128	; 0x80
 8007c9c:	d10e      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	d107      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fae0 	bl	800827c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d10e      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd4:	2b40      	cmp	r3, #64	; 0x40
 8007cd6:	d107      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f8ff 	bl	8007ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d10e      	bne.n	8007d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d107      	bne.n	8007d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0220 	mvn.w	r2, #32
 8007d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 faaa 	bl	8008268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIM_ConfigClockSource+0x1c>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e0b4      	b.n	8007ea2 <HAL_TIM_ConfigClockSource+0x186>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d70:	d03e      	beq.n	8007df0 <HAL_TIM_ConfigClockSource+0xd4>
 8007d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d76:	f200 8087 	bhi.w	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	f000 8086 	beq.w	8007e8e <HAL_TIM_ConfigClockSource+0x172>
 8007d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d86:	d87f      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d88:	2b70      	cmp	r3, #112	; 0x70
 8007d8a:	d01a      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8007d8c:	2b70      	cmp	r3, #112	; 0x70
 8007d8e:	d87b      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d90:	2b60      	cmp	r3, #96	; 0x60
 8007d92:	d050      	beq.n	8007e36 <HAL_TIM_ConfigClockSource+0x11a>
 8007d94:	2b60      	cmp	r3, #96	; 0x60
 8007d96:	d877      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b50      	cmp	r3, #80	; 0x50
 8007d9a:	d03c      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0xfa>
 8007d9c:	2b50      	cmp	r3, #80	; 0x50
 8007d9e:	d873      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d058      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x13a>
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d86f      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d064      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007dac:	2b30      	cmp	r3, #48	; 0x30
 8007dae:	d86b      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d060      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d867      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d05c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d05a      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007dc0:	e062      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6899      	ldr	r1, [r3, #8]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f000 f9ad 	bl	8008130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	609a      	str	r2, [r3, #8]
      break;
 8007dee:	e04f      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	6899      	ldr	r1, [r3, #8]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f000 f996 	bl	8008130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e12:	609a      	str	r2, [r3, #8]
      break;
 8007e14:	e03c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6859      	ldr	r1, [r3, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f000 f90a 	bl	800803c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2150      	movs	r1, #80	; 0x50
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f963 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007e34:	e02c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6859      	ldr	r1, [r3, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f000 f929 	bl	800809a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2160      	movs	r1, #96	; 0x60
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f953 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007e54:	e01c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f000 f8ea 	bl	800803c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f943 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007e74:	e00c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f000 f93a 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007e86:	e003      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a40      	ldr	r2, [pc, #256]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d00f      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3d      	ldr	r2, [pc, #244]	; (8008014 <TIM_Base_SetConfig+0x118>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00b      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3c      	ldr	r2, [pc, #240]	; (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3b      	ldr	r2, [pc, #236]	; (800801c <TIM_Base_SetConfig+0x120>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3a      	ldr	r2, [pc, #232]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2f      	ldr	r2, [pc, #188]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d02b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5c:	d027      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2c      	ldr	r2, [pc, #176]	; (8008014 <TIM_Base_SetConfig+0x118>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d023      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2b      	ldr	r2, [pc, #172]	; (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01f      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2a      	ldr	r2, [pc, #168]	; (800801c <TIM_Base_SetConfig+0x120>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a29      	ldr	r2, [pc, #164]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d017      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a28      	ldr	r2, [pc, #160]	; (8008024 <TIM_Base_SetConfig+0x128>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a27      	ldr	r2, [pc, #156]	; (8008028 <TIM_Base_SetConfig+0x12c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00f      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a26      	ldr	r2, [pc, #152]	; (800802c <TIM_Base_SetConfig+0x130>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a25      	ldr	r2, [pc, #148]	; (8008030 <TIM_Base_SetConfig+0x134>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a24      	ldr	r2, [pc, #144]	; (8008034 <TIM_Base_SetConfig+0x138>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d003      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a23      	ldr	r2, [pc, #140]	; (8008038 <TIM_Base_SetConfig+0x13c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d108      	bne.n	8007fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_Base_SetConfig+0xf8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a0c      	ldr	r2, [pc, #48]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d103      	bne.n	8007ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	615a      	str	r2, [r3, #20]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40010400 	.word	0x40010400
 8008024:	40014000 	.word	0x40014000
 8008028:	40014400 	.word	0x40014400
 800802c:	40014800 	.word	0x40014800
 8008030:	40001800 	.word	0x40001800
 8008034:	40001c00 	.word	0x40001c00
 8008038:	40002000 	.word	0x40002000

0800803c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f023 030a 	bic.w	r3, r3, #10
 8008078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	621a      	str	r2, [r3, #32]
}
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800809a:	b480      	push	{r7}
 800809c:	b087      	sub	sp, #28
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0210 	bic.w	r2, r3, #16
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	031b      	lsls	r3, r3, #12
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	f043 0307 	orr.w	r3, r3, #7
 800811c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	609a      	str	r2, [r3, #8]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800814a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	021a      	lsls	r2, r3, #8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	431a      	orrs	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4313      	orrs	r3, r2
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	609a      	str	r2, [r3, #8]
}
 8008164:	bf00      	nop
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008184:	2302      	movs	r3, #2
 8008186:	e05a      	b.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a21      	ldr	r2, [pc, #132]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d022      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d4:	d01d      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d018      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1b      	ldr	r2, [pc, #108]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d013      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a1a      	ldr	r2, [pc, #104]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00e      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a18      	ldr	r2, [pc, #96]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d009      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a17      	ldr	r2, [pc, #92]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d004      	beq.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a15      	ldr	r2, [pc, #84]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d10c      	bne.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	4313      	orrs	r3, r2
 8008222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	40010000 	.word	0x40010000
 8008250:	40000400 	.word	0x40000400
 8008254:	40000800 	.word	0x40000800
 8008258:	40000c00 	.word	0x40000c00
 800825c:	40010400 	.word	0x40010400
 8008260:	40014000 	.word	0x40014000
 8008264:	40001800 	.word	0x40001800

08008268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4b20      	ldr	r3, [pc, #128]	; (8008330 <FSMC_NORSRAM_Init+0xa0>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082ba:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80082c0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80082c6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80082cc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80082d2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80082d8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80082de:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80082e4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80082ea:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80082f0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80082f6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80082fc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d103      	bne.n	8008314 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008312:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	fff00080 	.word	0xfff00080

08008334 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008356:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008362:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800836a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008372:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	3b01      	subs	r3, #1
 800837a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800837c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	3b02      	subs	r3, #2
 8008384:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008386:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800838c:	4313      	orrs	r3, r2
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6979      	ldr	r1, [r7, #20]
 800839c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c8:	d122      	bne.n	8008410 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	4b15      	ldr	r3, [pc, #84]	; (800842c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80083d8:	4013      	ands	r3, r2
 80083da:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083e6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80083ee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80083f6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083fc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6979      	ldr	r1, [r7, #20]
 800840a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800840e:	e005      	b.n	800841c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	cff00000 	.word	0xcff00000

08008430 <__errno>:
 8008430:	4b01      	ldr	r3, [pc, #4]	; (8008438 <__errno+0x8>)
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	200000b0 	.word	0x200000b0

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4d0d      	ldr	r5, [pc, #52]	; (8008474 <__libc_init_array+0x38>)
 8008440:	4c0d      	ldr	r4, [pc, #52]	; (8008478 <__libc_init_array+0x3c>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	2600      	movs	r6, #0
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	4d0b      	ldr	r5, [pc, #44]	; (800847c <__libc_init_array+0x40>)
 800844e:	4c0c      	ldr	r4, [pc, #48]	; (8008480 <__libc_init_array+0x44>)
 8008450:	f001 faa4 	bl	800999c <_init>
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	2600      	movs	r6, #0
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	0800d954 	.word	0x0800d954
 8008478:	0800d954 	.word	0x0800d954
 800847c:	0800d954 	.word	0x0800d954
 8008480:	0800d958 	.word	0x0800d958

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <srand>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <srand+0x44>)
 8008498:	681d      	ldr	r5, [r3, #0]
 800849a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800849c:	4604      	mov	r4, r0
 800849e:	b9b3      	cbnz	r3, 80084ce <srand+0x3a>
 80084a0:	2018      	movs	r0, #24
 80084a2:	f000 f8f5 	bl	8008690 <malloc>
 80084a6:	4602      	mov	r2, r0
 80084a8:	63a8      	str	r0, [r5, #56]	; 0x38
 80084aa:	b920      	cbnz	r0, 80084b6 <srand+0x22>
 80084ac:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <srand+0x48>)
 80084ae:	480c      	ldr	r0, [pc, #48]	; (80084e0 <srand+0x4c>)
 80084b0:	2142      	movs	r1, #66	; 0x42
 80084b2:	f000 f8bd 	bl	8008630 <__assert_func>
 80084b6:	490b      	ldr	r1, [pc, #44]	; (80084e4 <srand+0x50>)
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <srand+0x54>)
 80084ba:	e9c0 1300 	strd	r1, r3, [r0]
 80084be:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <srand+0x58>)
 80084c0:	6083      	str	r3, [r0, #8]
 80084c2:	230b      	movs	r3, #11
 80084c4:	8183      	strh	r3, [r0, #12]
 80084c6:	2100      	movs	r1, #0
 80084c8:	2001      	movs	r0, #1
 80084ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80084ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80084d0:	2200      	movs	r2, #0
 80084d2:	611c      	str	r4, [r3, #16]
 80084d4:	615a      	str	r2, [r3, #20]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	200000b0 	.word	0x200000b0
 80084dc:	0800d808 	.word	0x0800d808
 80084e0:	0800d81f 	.word	0x0800d81f
 80084e4:	abcd330e 	.word	0xabcd330e
 80084e8:	e66d1234 	.word	0xe66d1234
 80084ec:	0005deec 	.word	0x0005deec

080084f0 <rand>:
 80084f0:	4b16      	ldr	r3, [pc, #88]	; (800854c <rand+0x5c>)
 80084f2:	b510      	push	{r4, lr}
 80084f4:	681c      	ldr	r4, [r3, #0]
 80084f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084f8:	b9b3      	cbnz	r3, 8008528 <rand+0x38>
 80084fa:	2018      	movs	r0, #24
 80084fc:	f000 f8c8 	bl	8008690 <malloc>
 8008500:	63a0      	str	r0, [r4, #56]	; 0x38
 8008502:	b928      	cbnz	r0, 8008510 <rand+0x20>
 8008504:	4602      	mov	r2, r0
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <rand+0x60>)
 8008508:	4812      	ldr	r0, [pc, #72]	; (8008554 <rand+0x64>)
 800850a:	214e      	movs	r1, #78	; 0x4e
 800850c:	f000 f890 	bl	8008630 <__assert_func>
 8008510:	4a11      	ldr	r2, [pc, #68]	; (8008558 <rand+0x68>)
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <rand+0x6c>)
 8008514:	e9c0 2300 	strd	r2, r3, [r0]
 8008518:	4b11      	ldr	r3, [pc, #68]	; (8008560 <rand+0x70>)
 800851a:	6083      	str	r3, [r0, #8]
 800851c:	230b      	movs	r3, #11
 800851e:	8183      	strh	r3, [r0, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	2300      	movs	r3, #0
 8008524:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008528:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800852a:	4a0e      	ldr	r2, [pc, #56]	; (8008564 <rand+0x74>)
 800852c:	6920      	ldr	r0, [r4, #16]
 800852e:	6963      	ldr	r3, [r4, #20]
 8008530:	490d      	ldr	r1, [pc, #52]	; (8008568 <rand+0x78>)
 8008532:	4342      	muls	r2, r0
 8008534:	fb01 2203 	mla	r2, r1, r3, r2
 8008538:	fba0 0101 	umull	r0, r1, r0, r1
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	eb42 0001 	adc.w	r0, r2, r1
 8008542:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008546:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800854a:	bd10      	pop	{r4, pc}
 800854c:	200000b0 	.word	0x200000b0
 8008550:	0800d808 	.word	0x0800d808
 8008554:	0800d81f 	.word	0x0800d81f
 8008558:	abcd330e 	.word	0xabcd330e
 800855c:	e66d1234 	.word	0xe66d1234
 8008560:	0005deec 	.word	0x0005deec
 8008564:	5851f42d 	.word	0x5851f42d
 8008568:	4c957f2d 	.word	0x4c957f2d

0800856c <sniprintf>:
 800856c:	b40c      	push	{r2, r3}
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <sniprintf+0x64>)
 8008572:	1e0c      	subs	r4, r1, #0
 8008574:	681d      	ldr	r5, [r3, #0]
 8008576:	b09d      	sub	sp, #116	; 0x74
 8008578:	da08      	bge.n	800858c <sniprintf+0x20>
 800857a:	238b      	movs	r3, #139	; 0x8b
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	f04f 30ff 	mov.w	r0, #4294967295
 8008582:	b01d      	add	sp, #116	; 0x74
 8008584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008588:	b002      	add	sp, #8
 800858a:	4770      	bx	lr
 800858c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008590:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008594:	bf14      	ite	ne
 8008596:	f104 33ff 	addne.w	r3, r4, #4294967295
 800859a:	4623      	moveq	r3, r4
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085a4:	9002      	str	r0, [sp, #8]
 80085a6:	9006      	str	r0, [sp, #24]
 80085a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80085ae:	ab21      	add	r3, sp, #132	; 0x84
 80085b0:	a902      	add	r1, sp, #8
 80085b2:	4628      	mov	r0, r5
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	f000 f9bd 	bl	8008934 <_svfiprintf_r>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	bfbc      	itt	lt
 80085be:	238b      	movlt	r3, #139	; 0x8b
 80085c0:	602b      	strlt	r3, [r5, #0]
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	d0dd      	beq.n	8008582 <sniprintf+0x16>
 80085c6:	9b02      	ldr	r3, [sp, #8]
 80085c8:	2200      	movs	r2, #0
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	e7d9      	b.n	8008582 <sniprintf+0x16>
 80085ce:	bf00      	nop
 80085d0:	200000b0 	.word	0x200000b0

080085d4 <strcat>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4602      	mov	r2, r0
 80085d8:	7814      	ldrb	r4, [r2, #0]
 80085da:	4613      	mov	r3, r2
 80085dc:	3201      	adds	r2, #1
 80085de:	2c00      	cmp	r4, #0
 80085e0:	d1fa      	bne.n	80085d8 <strcat+0x4>
 80085e2:	3b01      	subs	r3, #1
 80085e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ec:	2a00      	cmp	r2, #0
 80085ee:	d1f9      	bne.n	80085e4 <strcat+0x10>
 80085f0:	bd10      	pop	{r4, pc}
	...

080085f4 <strdup>:
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <strdup+0xc>)
 80085f6:	4601      	mov	r1, r0
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	f000 b803 	b.w	8008604 <_strdup_r>
 80085fe:	bf00      	nop
 8008600:	200000b0 	.word	0x200000b0

08008604 <_strdup_r>:
 8008604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	460d      	mov	r5, r1
 800860c:	f7f7 fde0 	bl	80001d0 <strlen>
 8008610:	1c42      	adds	r2, r0, #1
 8008612:	4611      	mov	r1, r2
 8008614:	4620      	mov	r0, r4
 8008616:	9201      	str	r2, [sp, #4]
 8008618:	f000 f8bc 	bl	8008794 <_malloc_r>
 800861c:	4604      	mov	r4, r0
 800861e:	b118      	cbz	r0, 8008628 <_strdup_r+0x24>
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	4629      	mov	r1, r5
 8008624:	f000 f83c 	bl	80086a0 <memcpy>
 8008628:	4620      	mov	r0, r4
 800862a:	b003      	add	sp, #12
 800862c:	bd30      	pop	{r4, r5, pc}
	...

08008630 <__assert_func>:
 8008630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008632:	4614      	mov	r4, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <__assert_func+0x2c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4605      	mov	r5, r0
 800863c:	68d8      	ldr	r0, [r3, #12]
 800863e:	b14c      	cbz	r4, 8008654 <__assert_func+0x24>
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <__assert_func+0x30>)
 8008642:	9100      	str	r1, [sp, #0]
 8008644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008648:	4906      	ldr	r1, [pc, #24]	; (8008664 <__assert_func+0x34>)
 800864a:	462b      	mov	r3, r5
 800864c:	f000 f80e 	bl	800866c <fiprintf>
 8008650:	f000 fe2e 	bl	80092b0 <abort>
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <__assert_func+0x38>)
 8008656:	461c      	mov	r4, r3
 8008658:	e7f3      	b.n	8008642 <__assert_func+0x12>
 800865a:	bf00      	nop
 800865c:	200000b0 	.word	0x200000b0
 8008660:	0800d87a 	.word	0x0800d87a
 8008664:	0800d887 	.word	0x0800d887
 8008668:	0800d8b5 	.word	0x0800d8b5

0800866c <fiprintf>:
 800866c:	b40e      	push	{r1, r2, r3}
 800866e:	b503      	push	{r0, r1, lr}
 8008670:	4601      	mov	r1, r0
 8008672:	ab03      	add	r3, sp, #12
 8008674:	4805      	ldr	r0, [pc, #20]	; (800868c <fiprintf+0x20>)
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	f000 fa83 	bl	8008b88 <_vfiprintf_r>
 8008682:	b002      	add	sp, #8
 8008684:	f85d eb04 	ldr.w	lr, [sp], #4
 8008688:	b003      	add	sp, #12
 800868a:	4770      	bx	lr
 800868c:	200000b0 	.word	0x200000b0

08008690 <malloc>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <malloc+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f000 b87d 	b.w	8008794 <_malloc_r>
 800869a:	bf00      	nop
 800869c:	200000b0 	.word	0x200000b0

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}

080086bc <_free_r>:
 80086bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086be:	2900      	cmp	r1, #0
 80086c0:	d044      	beq.n	800874c <_free_r+0x90>
 80086c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c6:	9001      	str	r0, [sp, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f1a1 0404 	sub.w	r4, r1, #4
 80086ce:	bfb8      	it	lt
 80086d0:	18e4      	addlt	r4, r4, r3
 80086d2:	f001 f82f 	bl	8009734 <__malloc_lock>
 80086d6:	4a1e      	ldr	r2, [pc, #120]	; (8008750 <_free_r+0x94>)
 80086d8:	9801      	ldr	r0, [sp, #4]
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	b933      	cbnz	r3, 80086ec <_free_r+0x30>
 80086de:	6063      	str	r3, [r4, #4]
 80086e0:	6014      	str	r4, [r2, #0]
 80086e2:	b003      	add	sp, #12
 80086e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086e8:	f001 b82a 	b.w	8009740 <__malloc_unlock>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d908      	bls.n	8008702 <_free_r+0x46>
 80086f0:	6825      	ldr	r5, [r4, #0]
 80086f2:	1961      	adds	r1, r4, r5
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf01      	itttt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	1949      	addeq	r1, r1, r5
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	e7ed      	b.n	80086de <_free_r+0x22>
 8008702:	461a      	mov	r2, r3
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	b10b      	cbz	r3, 800870c <_free_r+0x50>
 8008708:	42a3      	cmp	r3, r4
 800870a:	d9fa      	bls.n	8008702 <_free_r+0x46>
 800870c:	6811      	ldr	r1, [r2, #0]
 800870e:	1855      	adds	r5, r2, r1
 8008710:	42a5      	cmp	r5, r4
 8008712:	d10b      	bne.n	800872c <_free_r+0x70>
 8008714:	6824      	ldr	r4, [r4, #0]
 8008716:	4421      	add	r1, r4
 8008718:	1854      	adds	r4, r2, r1
 800871a:	42a3      	cmp	r3, r4
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	d1e0      	bne.n	80086e2 <_free_r+0x26>
 8008720:	681c      	ldr	r4, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	6053      	str	r3, [r2, #4]
 8008726:	4421      	add	r1, r4
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	e7da      	b.n	80086e2 <_free_r+0x26>
 800872c:	d902      	bls.n	8008734 <_free_r+0x78>
 800872e:	230c      	movs	r3, #12
 8008730:	6003      	str	r3, [r0, #0]
 8008732:	e7d6      	b.n	80086e2 <_free_r+0x26>
 8008734:	6825      	ldr	r5, [r4, #0]
 8008736:	1961      	adds	r1, r4, r5
 8008738:	428b      	cmp	r3, r1
 800873a:	bf04      	itt	eq
 800873c:	6819      	ldreq	r1, [r3, #0]
 800873e:	685b      	ldreq	r3, [r3, #4]
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	bf04      	itt	eq
 8008744:	1949      	addeq	r1, r1, r5
 8008746:	6021      	streq	r1, [r4, #0]
 8008748:	6054      	str	r4, [r2, #4]
 800874a:	e7ca      	b.n	80086e2 <_free_r+0x26>
 800874c:	b003      	add	sp, #12
 800874e:	bd30      	pop	{r4, r5, pc}
 8008750:	200029f4 	.word	0x200029f4

08008754 <sbrk_aligned>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	4e0e      	ldr	r6, [pc, #56]	; (8008790 <sbrk_aligned+0x3c>)
 8008758:	460c      	mov	r4, r1
 800875a:	6831      	ldr	r1, [r6, #0]
 800875c:	4605      	mov	r5, r0
 800875e:	b911      	cbnz	r1, 8008766 <sbrk_aligned+0x12>
 8008760:	f000 fcd6 	bl	8009110 <_sbrk_r>
 8008764:	6030      	str	r0, [r6, #0]
 8008766:	4621      	mov	r1, r4
 8008768:	4628      	mov	r0, r5
 800876a:	f000 fcd1 	bl	8009110 <_sbrk_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d00a      	beq.n	8008788 <sbrk_aligned+0x34>
 8008772:	1cc4      	adds	r4, r0, #3
 8008774:	f024 0403 	bic.w	r4, r4, #3
 8008778:	42a0      	cmp	r0, r4
 800877a:	d007      	beq.n	800878c <sbrk_aligned+0x38>
 800877c:	1a21      	subs	r1, r4, r0
 800877e:	4628      	mov	r0, r5
 8008780:	f000 fcc6 	bl	8009110 <_sbrk_r>
 8008784:	3001      	adds	r0, #1
 8008786:	d101      	bne.n	800878c <sbrk_aligned+0x38>
 8008788:	f04f 34ff 	mov.w	r4, #4294967295
 800878c:	4620      	mov	r0, r4
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	200029f8 	.word	0x200029f8

08008794 <_malloc_r>:
 8008794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008798:	1ccd      	adds	r5, r1, #3
 800879a:	f025 0503 	bic.w	r5, r5, #3
 800879e:	3508      	adds	r5, #8
 80087a0:	2d0c      	cmp	r5, #12
 80087a2:	bf38      	it	cc
 80087a4:	250c      	movcc	r5, #12
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	4607      	mov	r7, r0
 80087aa:	db01      	blt.n	80087b0 <_malloc_r+0x1c>
 80087ac:	42a9      	cmp	r1, r5
 80087ae:	d905      	bls.n	80087bc <_malloc_r+0x28>
 80087b0:	230c      	movs	r3, #12
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	2600      	movs	r6, #0
 80087b6:	4630      	mov	r0, r6
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	4e2e      	ldr	r6, [pc, #184]	; (8008878 <_malloc_r+0xe4>)
 80087be:	f000 ffb9 	bl	8009734 <__malloc_lock>
 80087c2:	6833      	ldr	r3, [r6, #0]
 80087c4:	461c      	mov	r4, r3
 80087c6:	bb34      	cbnz	r4, 8008816 <_malloc_r+0x82>
 80087c8:	4629      	mov	r1, r5
 80087ca:	4638      	mov	r0, r7
 80087cc:	f7ff ffc2 	bl	8008754 <sbrk_aligned>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	4604      	mov	r4, r0
 80087d4:	d14d      	bne.n	8008872 <_malloc_r+0xde>
 80087d6:	6834      	ldr	r4, [r6, #0]
 80087d8:	4626      	mov	r6, r4
 80087da:	2e00      	cmp	r6, #0
 80087dc:	d140      	bne.n	8008860 <_malloc_r+0xcc>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4631      	mov	r1, r6
 80087e2:	4638      	mov	r0, r7
 80087e4:	eb04 0803 	add.w	r8, r4, r3
 80087e8:	f000 fc92 	bl	8009110 <_sbrk_r>
 80087ec:	4580      	cmp	r8, r0
 80087ee:	d13a      	bne.n	8008866 <_malloc_r+0xd2>
 80087f0:	6821      	ldr	r1, [r4, #0]
 80087f2:	3503      	adds	r5, #3
 80087f4:	1a6d      	subs	r5, r5, r1
 80087f6:	f025 0503 	bic.w	r5, r5, #3
 80087fa:	3508      	adds	r5, #8
 80087fc:	2d0c      	cmp	r5, #12
 80087fe:	bf38      	it	cc
 8008800:	250c      	movcc	r5, #12
 8008802:	4629      	mov	r1, r5
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff ffa5 	bl	8008754 <sbrk_aligned>
 800880a:	3001      	adds	r0, #1
 800880c:	d02b      	beq.n	8008866 <_malloc_r+0xd2>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	442b      	add	r3, r5
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	e00e      	b.n	8008834 <_malloc_r+0xa0>
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	1b52      	subs	r2, r2, r5
 800881a:	d41e      	bmi.n	800885a <_malloc_r+0xc6>
 800881c:	2a0b      	cmp	r2, #11
 800881e:	d916      	bls.n	800884e <_malloc_r+0xba>
 8008820:	1961      	adds	r1, r4, r5
 8008822:	42a3      	cmp	r3, r4
 8008824:	6025      	str	r5, [r4, #0]
 8008826:	bf18      	it	ne
 8008828:	6059      	strne	r1, [r3, #4]
 800882a:	6863      	ldr	r3, [r4, #4]
 800882c:	bf08      	it	eq
 800882e:	6031      	streq	r1, [r6, #0]
 8008830:	5162      	str	r2, [r4, r5]
 8008832:	604b      	str	r3, [r1, #4]
 8008834:	4638      	mov	r0, r7
 8008836:	f104 060b 	add.w	r6, r4, #11
 800883a:	f000 ff81 	bl	8009740 <__malloc_unlock>
 800883e:	f026 0607 	bic.w	r6, r6, #7
 8008842:	1d23      	adds	r3, r4, #4
 8008844:	1af2      	subs	r2, r6, r3
 8008846:	d0b6      	beq.n	80087b6 <_malloc_r+0x22>
 8008848:	1b9b      	subs	r3, r3, r6
 800884a:	50a3      	str	r3, [r4, r2]
 800884c:	e7b3      	b.n	80087b6 <_malloc_r+0x22>
 800884e:	6862      	ldr	r2, [r4, #4]
 8008850:	42a3      	cmp	r3, r4
 8008852:	bf0c      	ite	eq
 8008854:	6032      	streq	r2, [r6, #0]
 8008856:	605a      	strne	r2, [r3, #4]
 8008858:	e7ec      	b.n	8008834 <_malloc_r+0xa0>
 800885a:	4623      	mov	r3, r4
 800885c:	6864      	ldr	r4, [r4, #4]
 800885e:	e7b2      	b.n	80087c6 <_malloc_r+0x32>
 8008860:	4634      	mov	r4, r6
 8008862:	6876      	ldr	r6, [r6, #4]
 8008864:	e7b9      	b.n	80087da <_malloc_r+0x46>
 8008866:	230c      	movs	r3, #12
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	4638      	mov	r0, r7
 800886c:	f000 ff68 	bl	8009740 <__malloc_unlock>
 8008870:	e7a1      	b.n	80087b6 <_malloc_r+0x22>
 8008872:	6025      	str	r5, [r4, #0]
 8008874:	e7de      	b.n	8008834 <_malloc_r+0xa0>
 8008876:	bf00      	nop
 8008878:	200029f4 	.word	0x200029f4

0800887c <__ssputs_r>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	688e      	ldr	r6, [r1, #8]
 8008882:	429e      	cmp	r6, r3
 8008884:	4682      	mov	sl, r0
 8008886:	460c      	mov	r4, r1
 8008888:	4690      	mov	r8, r2
 800888a:	461f      	mov	r7, r3
 800888c:	d838      	bhi.n	8008900 <__ssputs_r+0x84>
 800888e:	898a      	ldrh	r2, [r1, #12]
 8008890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008894:	d032      	beq.n	80088fc <__ssputs_r+0x80>
 8008896:	6825      	ldr	r5, [r4, #0]
 8008898:	6909      	ldr	r1, [r1, #16]
 800889a:	eba5 0901 	sub.w	r9, r5, r1
 800889e:	6965      	ldr	r5, [r4, #20]
 80088a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088a8:	3301      	adds	r3, #1
 80088aa:	444b      	add	r3, r9
 80088ac:	106d      	asrs	r5, r5, #1
 80088ae:	429d      	cmp	r5, r3
 80088b0:	bf38      	it	cc
 80088b2:	461d      	movcc	r5, r3
 80088b4:	0553      	lsls	r3, r2, #21
 80088b6:	d531      	bpl.n	800891c <__ssputs_r+0xa0>
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7ff ff6b 	bl	8008794 <_malloc_r>
 80088be:	4606      	mov	r6, r0
 80088c0:	b950      	cbnz	r0, 80088d8 <__ssputs_r+0x5c>
 80088c2:	230c      	movs	r3, #12
 80088c4:	f8ca 3000 	str.w	r3, [sl]
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d8:	6921      	ldr	r1, [r4, #16]
 80088da:	464a      	mov	r2, r9
 80088dc:	f7ff fee0 	bl	80086a0 <memcpy>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	6126      	str	r6, [r4, #16]
 80088ee:	6165      	str	r5, [r4, #20]
 80088f0:	444e      	add	r6, r9
 80088f2:	eba5 0509 	sub.w	r5, r5, r9
 80088f6:	6026      	str	r6, [r4, #0]
 80088f8:	60a5      	str	r5, [r4, #8]
 80088fa:	463e      	mov	r6, r7
 80088fc:	42be      	cmp	r6, r7
 80088fe:	d900      	bls.n	8008902 <__ssputs_r+0x86>
 8008900:	463e      	mov	r6, r7
 8008902:	6820      	ldr	r0, [r4, #0]
 8008904:	4632      	mov	r2, r6
 8008906:	4641      	mov	r1, r8
 8008908:	f000 fefa 	bl	8009700 <memmove>
 800890c:	68a3      	ldr	r3, [r4, #8]
 800890e:	1b9b      	subs	r3, r3, r6
 8008910:	60a3      	str	r3, [r4, #8]
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	4433      	add	r3, r6
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	2000      	movs	r0, #0
 800891a:	e7db      	b.n	80088d4 <__ssputs_r+0x58>
 800891c:	462a      	mov	r2, r5
 800891e:	f000 ff15 	bl	800974c <_realloc_r>
 8008922:	4606      	mov	r6, r0
 8008924:	2800      	cmp	r0, #0
 8008926:	d1e1      	bne.n	80088ec <__ssputs_r+0x70>
 8008928:	6921      	ldr	r1, [r4, #16]
 800892a:	4650      	mov	r0, sl
 800892c:	f7ff fec6 	bl	80086bc <_free_r>
 8008930:	e7c7      	b.n	80088c2 <__ssputs_r+0x46>
	...

08008934 <_svfiprintf_r>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	4698      	mov	r8, r3
 800893a:	898b      	ldrh	r3, [r1, #12]
 800893c:	061b      	lsls	r3, r3, #24
 800893e:	b09d      	sub	sp, #116	; 0x74
 8008940:	4607      	mov	r7, r0
 8008942:	460d      	mov	r5, r1
 8008944:	4614      	mov	r4, r2
 8008946:	d50e      	bpl.n	8008966 <_svfiprintf_r+0x32>
 8008948:	690b      	ldr	r3, [r1, #16]
 800894a:	b963      	cbnz	r3, 8008966 <_svfiprintf_r+0x32>
 800894c:	2140      	movs	r1, #64	; 0x40
 800894e:	f7ff ff21 	bl	8008794 <_malloc_r>
 8008952:	6028      	str	r0, [r5, #0]
 8008954:	6128      	str	r0, [r5, #16]
 8008956:	b920      	cbnz	r0, 8008962 <_svfiprintf_r+0x2e>
 8008958:	230c      	movs	r3, #12
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e0d1      	b.n	8008b06 <_svfiprintf_r+0x1d2>
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	616b      	str	r3, [r5, #20]
 8008966:	2300      	movs	r3, #0
 8008968:	9309      	str	r3, [sp, #36]	; 0x24
 800896a:	2320      	movs	r3, #32
 800896c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008970:	f8cd 800c 	str.w	r8, [sp, #12]
 8008974:	2330      	movs	r3, #48	; 0x30
 8008976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b20 <_svfiprintf_r+0x1ec>
 800897a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800897e:	f04f 0901 	mov.w	r9, #1
 8008982:	4623      	mov	r3, r4
 8008984:	469a      	mov	sl, r3
 8008986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898a:	b10a      	cbz	r2, 8008990 <_svfiprintf_r+0x5c>
 800898c:	2a25      	cmp	r2, #37	; 0x25
 800898e:	d1f9      	bne.n	8008984 <_svfiprintf_r+0x50>
 8008990:	ebba 0b04 	subs.w	fp, sl, r4
 8008994:	d00b      	beq.n	80089ae <_svfiprintf_r+0x7a>
 8008996:	465b      	mov	r3, fp
 8008998:	4622      	mov	r2, r4
 800899a:	4629      	mov	r1, r5
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff ff6d 	bl	800887c <__ssputs_r>
 80089a2:	3001      	adds	r0, #1
 80089a4:	f000 80aa 	beq.w	8008afc <_svfiprintf_r+0x1c8>
 80089a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089aa:	445a      	add	r2, fp
 80089ac:	9209      	str	r2, [sp, #36]	; 0x24
 80089ae:	f89a 3000 	ldrb.w	r3, [sl]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 80a2 	beq.w	8008afc <_svfiprintf_r+0x1c8>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295
 80089be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c2:	f10a 0a01 	add.w	sl, sl, #1
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	9307      	str	r3, [sp, #28]
 80089ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ce:	931a      	str	r3, [sp, #104]	; 0x68
 80089d0:	4654      	mov	r4, sl
 80089d2:	2205      	movs	r2, #5
 80089d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d8:	4851      	ldr	r0, [pc, #324]	; (8008b20 <_svfiprintf_r+0x1ec>)
 80089da:	f7f7 fc01 	bl	80001e0 <memchr>
 80089de:	9a04      	ldr	r2, [sp, #16]
 80089e0:	b9d8      	cbnz	r0, 8008a1a <_svfiprintf_r+0xe6>
 80089e2:	06d0      	lsls	r0, r2, #27
 80089e4:	bf44      	itt	mi
 80089e6:	2320      	movmi	r3, #32
 80089e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ec:	0711      	lsls	r1, r2, #28
 80089ee:	bf44      	itt	mi
 80089f0:	232b      	movmi	r3, #43	; 0x2b
 80089f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f6:	f89a 3000 	ldrb.w	r3, [sl]
 80089fa:	2b2a      	cmp	r3, #42	; 0x2a
 80089fc:	d015      	beq.n	8008a2a <_svfiprintf_r+0xf6>
 80089fe:	9a07      	ldr	r2, [sp, #28]
 8008a00:	4654      	mov	r4, sl
 8008a02:	2000      	movs	r0, #0
 8008a04:	f04f 0c0a 	mov.w	ip, #10
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a0e:	3b30      	subs	r3, #48	; 0x30
 8008a10:	2b09      	cmp	r3, #9
 8008a12:	d94e      	bls.n	8008ab2 <_svfiprintf_r+0x17e>
 8008a14:	b1b0      	cbz	r0, 8008a44 <_svfiprintf_r+0x110>
 8008a16:	9207      	str	r2, [sp, #28]
 8008a18:	e014      	b.n	8008a44 <_svfiprintf_r+0x110>
 8008a1a:	eba0 0308 	sub.w	r3, r0, r8
 8008a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	46a2      	mov	sl, r4
 8008a28:	e7d2      	b.n	80089d0 <_svfiprintf_r+0x9c>
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	1d19      	adds	r1, r3, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	9103      	str	r1, [sp, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbb      	ittet	lt
 8008a36:	425b      	neglt	r3, r3
 8008a38:	f042 0202 	orrlt.w	r2, r2, #2
 8008a3c:	9307      	strge	r3, [sp, #28]
 8008a3e:	9307      	strlt	r3, [sp, #28]
 8008a40:	bfb8      	it	lt
 8008a42:	9204      	strlt	r2, [sp, #16]
 8008a44:	7823      	ldrb	r3, [r4, #0]
 8008a46:	2b2e      	cmp	r3, #46	; 0x2e
 8008a48:	d10c      	bne.n	8008a64 <_svfiprintf_r+0x130>
 8008a4a:	7863      	ldrb	r3, [r4, #1]
 8008a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a4e:	d135      	bne.n	8008abc <_svfiprintf_r+0x188>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	1d1a      	adds	r2, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9203      	str	r2, [sp, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfb8      	it	lt
 8008a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a60:	3402      	adds	r4, #2
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b30 <_svfiprintf_r+0x1fc>
 8008a68:	7821      	ldrb	r1, [r4, #0]
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f7f7 fbb7 	bl	80001e0 <memchr>
 8008a72:	b140      	cbz	r0, 8008a86 <_svfiprintf_r+0x152>
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	eba0 000a 	sub.w	r0, r0, sl
 8008a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a7e:	9b04      	ldr	r3, [sp, #16]
 8008a80:	4303      	orrs	r3, r0
 8008a82:	3401      	adds	r4, #1
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8a:	4826      	ldr	r0, [pc, #152]	; (8008b24 <_svfiprintf_r+0x1f0>)
 8008a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a90:	2206      	movs	r2, #6
 8008a92:	f7f7 fba5 	bl	80001e0 <memchr>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d038      	beq.n	8008b0c <_svfiprintf_r+0x1d8>
 8008a9a:	4b23      	ldr	r3, [pc, #140]	; (8008b28 <_svfiprintf_r+0x1f4>)
 8008a9c:	bb1b      	cbnz	r3, 8008ae6 <_svfiprintf_r+0x1b2>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	3307      	adds	r3, #7
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	9303      	str	r3, [sp, #12]
 8008aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aac:	4433      	add	r3, r6
 8008aae:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab0:	e767      	b.n	8008982 <_svfiprintf_r+0x4e>
 8008ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	2001      	movs	r0, #1
 8008aba:	e7a5      	b.n	8008a08 <_svfiprintf_r+0xd4>
 8008abc:	2300      	movs	r3, #0
 8008abe:	3401      	adds	r4, #1
 8008ac0:	9305      	str	r3, [sp, #20]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f04f 0c0a 	mov.w	ip, #10
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ace:	3a30      	subs	r2, #48	; 0x30
 8008ad0:	2a09      	cmp	r2, #9
 8008ad2:	d903      	bls.n	8008adc <_svfiprintf_r+0x1a8>
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0c5      	beq.n	8008a64 <_svfiprintf_r+0x130>
 8008ad8:	9105      	str	r1, [sp, #20]
 8008ada:	e7c3      	b.n	8008a64 <_svfiprintf_r+0x130>
 8008adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e7f0      	b.n	8008ac8 <_svfiprintf_r+0x194>
 8008ae6:	ab03      	add	r3, sp, #12
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	462a      	mov	r2, r5
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <_svfiprintf_r+0x1f8>)
 8008aee:	a904      	add	r1, sp, #16
 8008af0:	4638      	mov	r0, r7
 8008af2:	f3af 8000 	nop.w
 8008af6:	1c42      	adds	r2, r0, #1
 8008af8:	4606      	mov	r6, r0
 8008afa:	d1d6      	bne.n	8008aaa <_svfiprintf_r+0x176>
 8008afc:	89ab      	ldrh	r3, [r5, #12]
 8008afe:	065b      	lsls	r3, r3, #25
 8008b00:	f53f af2c 	bmi.w	800895c <_svfiprintf_r+0x28>
 8008b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b06:	b01d      	add	sp, #116	; 0x74
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	ab03      	add	r3, sp, #12
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	462a      	mov	r2, r5
 8008b12:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <_svfiprintf_r+0x1f8>)
 8008b14:	a904      	add	r1, sp, #16
 8008b16:	4638      	mov	r0, r7
 8008b18:	f000 f9d4 	bl	8008ec4 <_printf_i>
 8008b1c:	e7eb      	b.n	8008af6 <_svfiprintf_r+0x1c2>
 8008b1e:	bf00      	nop
 8008b20:	0800d8b6 	.word	0x0800d8b6
 8008b24:	0800d8c0 	.word	0x0800d8c0
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	0800887d 	.word	0x0800887d
 8008b30:	0800d8bc 	.word	0x0800d8bc

08008b34 <__sfputc_r>:
 8008b34:	6893      	ldr	r3, [r2, #8]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	b410      	push	{r4}
 8008b3c:	6093      	str	r3, [r2, #8]
 8008b3e:	da08      	bge.n	8008b52 <__sfputc_r+0x1e>
 8008b40:	6994      	ldr	r4, [r2, #24]
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	db01      	blt.n	8008b4a <__sfputc_r+0x16>
 8008b46:	290a      	cmp	r1, #10
 8008b48:	d103      	bne.n	8008b52 <__sfputc_r+0x1e>
 8008b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b4e:	f000 baef 	b.w	8009130 <__swbuf_r>
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	1c58      	adds	r0, r3, #1
 8008b56:	6010      	str	r0, [r2, #0]
 8008b58:	7019      	strb	r1, [r3, #0]
 8008b5a:	4608      	mov	r0, r1
 8008b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <__sfputs_r>:
 8008b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b64:	4606      	mov	r6, r0
 8008b66:	460f      	mov	r7, r1
 8008b68:	4614      	mov	r4, r2
 8008b6a:	18d5      	adds	r5, r2, r3
 8008b6c:	42ac      	cmp	r4, r5
 8008b6e:	d101      	bne.n	8008b74 <__sfputs_r+0x12>
 8008b70:	2000      	movs	r0, #0
 8008b72:	e007      	b.n	8008b84 <__sfputs_r+0x22>
 8008b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f7ff ffda 	bl	8008b34 <__sfputc_r>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d1f3      	bne.n	8008b6c <__sfputs_r+0xa>
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b88 <_vfiprintf_r>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	b09d      	sub	sp, #116	; 0x74
 8008b90:	4614      	mov	r4, r2
 8008b92:	4698      	mov	r8, r3
 8008b94:	4606      	mov	r6, r0
 8008b96:	b118      	cbz	r0, 8008ba0 <_vfiprintf_r+0x18>
 8008b98:	6983      	ldr	r3, [r0, #24]
 8008b9a:	b90b      	cbnz	r3, 8008ba0 <_vfiprintf_r+0x18>
 8008b9c:	f000 fcaa 	bl	80094f4 <__sinit>
 8008ba0:	4b89      	ldr	r3, [pc, #548]	; (8008dc8 <_vfiprintf_r+0x240>)
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	d11b      	bne.n	8008bde <_vfiprintf_r+0x56>
 8008ba6:	6875      	ldr	r5, [r6, #4]
 8008ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008baa:	07d9      	lsls	r1, r3, #31
 8008bac:	d405      	bmi.n	8008bba <_vfiprintf_r+0x32>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	059a      	lsls	r2, r3, #22
 8008bb2:	d402      	bmi.n	8008bba <_vfiprintf_r+0x32>
 8008bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb6:	f000 fd3b 	bl	8009630 <__retarget_lock_acquire_recursive>
 8008bba:	89ab      	ldrh	r3, [r5, #12]
 8008bbc:	071b      	lsls	r3, r3, #28
 8008bbe:	d501      	bpl.n	8008bc4 <_vfiprintf_r+0x3c>
 8008bc0:	692b      	ldr	r3, [r5, #16]
 8008bc2:	b9eb      	cbnz	r3, 8008c00 <_vfiprintf_r+0x78>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f000 fb04 	bl	80091d4 <__swsetup_r>
 8008bcc:	b1c0      	cbz	r0, 8008c00 <_vfiprintf_r+0x78>
 8008bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd0:	07dc      	lsls	r4, r3, #31
 8008bd2:	d50e      	bpl.n	8008bf2 <_vfiprintf_r+0x6a>
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	b01d      	add	sp, #116	; 0x74
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	4b7b      	ldr	r3, [pc, #492]	; (8008dcc <_vfiprintf_r+0x244>)
 8008be0:	429d      	cmp	r5, r3
 8008be2:	d101      	bne.n	8008be8 <_vfiprintf_r+0x60>
 8008be4:	68b5      	ldr	r5, [r6, #8]
 8008be6:	e7df      	b.n	8008ba8 <_vfiprintf_r+0x20>
 8008be8:	4b79      	ldr	r3, [pc, #484]	; (8008dd0 <_vfiprintf_r+0x248>)
 8008bea:	429d      	cmp	r5, r3
 8008bec:	bf08      	it	eq
 8008bee:	68f5      	ldreq	r5, [r6, #12]
 8008bf0:	e7da      	b.n	8008ba8 <_vfiprintf_r+0x20>
 8008bf2:	89ab      	ldrh	r3, [r5, #12]
 8008bf4:	0598      	lsls	r0, r3, #22
 8008bf6:	d4ed      	bmi.n	8008bd4 <_vfiprintf_r+0x4c>
 8008bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bfa:	f000 fd1a 	bl	8009632 <__retarget_lock_release_recursive>
 8008bfe:	e7e9      	b.n	8008bd4 <_vfiprintf_r+0x4c>
 8008c00:	2300      	movs	r3, #0
 8008c02:	9309      	str	r3, [sp, #36]	; 0x24
 8008c04:	2320      	movs	r3, #32
 8008c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c0e:	2330      	movs	r3, #48	; 0x30
 8008c10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dd4 <_vfiprintf_r+0x24c>
 8008c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c18:	f04f 0901 	mov.w	r9, #1
 8008c1c:	4623      	mov	r3, r4
 8008c1e:	469a      	mov	sl, r3
 8008c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c24:	b10a      	cbz	r2, 8008c2a <_vfiprintf_r+0xa2>
 8008c26:	2a25      	cmp	r2, #37	; 0x25
 8008c28:	d1f9      	bne.n	8008c1e <_vfiprintf_r+0x96>
 8008c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c2e:	d00b      	beq.n	8008c48 <_vfiprintf_r+0xc0>
 8008c30:	465b      	mov	r3, fp
 8008c32:	4622      	mov	r2, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff ff93 	bl	8008b62 <__sfputs_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	f000 80aa 	beq.w	8008d96 <_vfiprintf_r+0x20e>
 8008c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c44:	445a      	add	r2, fp
 8008c46:	9209      	str	r2, [sp, #36]	; 0x24
 8008c48:	f89a 3000 	ldrb.w	r3, [sl]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80a2 	beq.w	8008d96 <_vfiprintf_r+0x20e>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f04f 32ff 	mov.w	r2, #4294967295
 8008c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c5c:	f10a 0a01 	add.w	sl, sl, #1
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c68:	931a      	str	r3, [sp, #104]	; 0x68
 8008c6a:	4654      	mov	r4, sl
 8008c6c:	2205      	movs	r2, #5
 8008c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c72:	4858      	ldr	r0, [pc, #352]	; (8008dd4 <_vfiprintf_r+0x24c>)
 8008c74:	f7f7 fab4 	bl	80001e0 <memchr>
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	b9d8      	cbnz	r0, 8008cb4 <_vfiprintf_r+0x12c>
 8008c7c:	06d1      	lsls	r1, r2, #27
 8008c7e:	bf44      	itt	mi
 8008c80:	2320      	movmi	r3, #32
 8008c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c86:	0713      	lsls	r3, r2, #28
 8008c88:	bf44      	itt	mi
 8008c8a:	232b      	movmi	r3, #43	; 0x2b
 8008c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c90:	f89a 3000 	ldrb.w	r3, [sl]
 8008c94:	2b2a      	cmp	r3, #42	; 0x2a
 8008c96:	d015      	beq.n	8008cc4 <_vfiprintf_r+0x13c>
 8008c98:	9a07      	ldr	r2, [sp, #28]
 8008c9a:	4654      	mov	r4, sl
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	f04f 0c0a 	mov.w	ip, #10
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca8:	3b30      	subs	r3, #48	; 0x30
 8008caa:	2b09      	cmp	r3, #9
 8008cac:	d94e      	bls.n	8008d4c <_vfiprintf_r+0x1c4>
 8008cae:	b1b0      	cbz	r0, 8008cde <_vfiprintf_r+0x156>
 8008cb0:	9207      	str	r2, [sp, #28]
 8008cb2:	e014      	b.n	8008cde <_vfiprintf_r+0x156>
 8008cb4:	eba0 0308 	sub.w	r3, r0, r8
 8008cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	9304      	str	r3, [sp, #16]
 8008cc0:	46a2      	mov	sl, r4
 8008cc2:	e7d2      	b.n	8008c6a <_vfiprintf_r+0xe2>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	1d19      	adds	r1, r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	9103      	str	r1, [sp, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	bfbb      	ittet	lt
 8008cd0:	425b      	neglt	r3, r3
 8008cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008cd6:	9307      	strge	r3, [sp, #28]
 8008cd8:	9307      	strlt	r3, [sp, #28]
 8008cda:	bfb8      	it	lt
 8008cdc:	9204      	strlt	r2, [sp, #16]
 8008cde:	7823      	ldrb	r3, [r4, #0]
 8008ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce2:	d10c      	bne.n	8008cfe <_vfiprintf_r+0x176>
 8008ce4:	7863      	ldrb	r3, [r4, #1]
 8008ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce8:	d135      	bne.n	8008d56 <_vfiprintf_r+0x1ce>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	1d1a      	adds	r2, r3, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	9203      	str	r2, [sp, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfb8      	it	lt
 8008cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cfa:	3402      	adds	r4, #2
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008de4 <_vfiprintf_r+0x25c>
 8008d02:	7821      	ldrb	r1, [r4, #0]
 8008d04:	2203      	movs	r2, #3
 8008d06:	4650      	mov	r0, sl
 8008d08:	f7f7 fa6a 	bl	80001e0 <memchr>
 8008d0c:	b140      	cbz	r0, 8008d20 <_vfiprintf_r+0x198>
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	eba0 000a 	sub.w	r0, r0, sl
 8008d14:	fa03 f000 	lsl.w	r0, r3, r0
 8008d18:	9b04      	ldr	r3, [sp, #16]
 8008d1a:	4303      	orrs	r3, r0
 8008d1c:	3401      	adds	r4, #1
 8008d1e:	9304      	str	r3, [sp, #16]
 8008d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d24:	482c      	ldr	r0, [pc, #176]	; (8008dd8 <_vfiprintf_r+0x250>)
 8008d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d2a:	2206      	movs	r2, #6
 8008d2c:	f7f7 fa58 	bl	80001e0 <memchr>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d03f      	beq.n	8008db4 <_vfiprintf_r+0x22c>
 8008d34:	4b29      	ldr	r3, [pc, #164]	; (8008ddc <_vfiprintf_r+0x254>)
 8008d36:	bb1b      	cbnz	r3, 8008d80 <_vfiprintf_r+0x1f8>
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	3307      	adds	r3, #7
 8008d3c:	f023 0307 	bic.w	r3, r3, #7
 8008d40:	3308      	adds	r3, #8
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d46:	443b      	add	r3, r7
 8008d48:	9309      	str	r3, [sp, #36]	; 0x24
 8008d4a:	e767      	b.n	8008c1c <_vfiprintf_r+0x94>
 8008d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d50:	460c      	mov	r4, r1
 8008d52:	2001      	movs	r0, #1
 8008d54:	e7a5      	b.n	8008ca2 <_vfiprintf_r+0x11a>
 8008d56:	2300      	movs	r3, #0
 8008d58:	3401      	adds	r4, #1
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f04f 0c0a 	mov.w	ip, #10
 8008d62:	4620      	mov	r0, r4
 8008d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d68:	3a30      	subs	r2, #48	; 0x30
 8008d6a:	2a09      	cmp	r2, #9
 8008d6c:	d903      	bls.n	8008d76 <_vfiprintf_r+0x1ee>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0c5      	beq.n	8008cfe <_vfiprintf_r+0x176>
 8008d72:	9105      	str	r1, [sp, #20]
 8008d74:	e7c3      	b.n	8008cfe <_vfiprintf_r+0x176>
 8008d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e7f0      	b.n	8008d62 <_vfiprintf_r+0x1da>
 8008d80:	ab03      	add	r3, sp, #12
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	462a      	mov	r2, r5
 8008d86:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <_vfiprintf_r+0x258>)
 8008d88:	a904      	add	r1, sp, #16
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f3af 8000 	nop.w
 8008d90:	4607      	mov	r7, r0
 8008d92:	1c78      	adds	r0, r7, #1
 8008d94:	d1d6      	bne.n	8008d44 <_vfiprintf_r+0x1bc>
 8008d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d98:	07d9      	lsls	r1, r3, #31
 8008d9a:	d405      	bmi.n	8008da8 <_vfiprintf_r+0x220>
 8008d9c:	89ab      	ldrh	r3, [r5, #12]
 8008d9e:	059a      	lsls	r2, r3, #22
 8008da0:	d402      	bmi.n	8008da8 <_vfiprintf_r+0x220>
 8008da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008da4:	f000 fc45 	bl	8009632 <__retarget_lock_release_recursive>
 8008da8:	89ab      	ldrh	r3, [r5, #12]
 8008daa:	065b      	lsls	r3, r3, #25
 8008dac:	f53f af12 	bmi.w	8008bd4 <_vfiprintf_r+0x4c>
 8008db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008db2:	e711      	b.n	8008bd8 <_vfiprintf_r+0x50>
 8008db4:	ab03      	add	r3, sp, #12
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	462a      	mov	r2, r5
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <_vfiprintf_r+0x258>)
 8008dbc:	a904      	add	r1, sp, #16
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f880 	bl	8008ec4 <_printf_i>
 8008dc4:	e7e4      	b.n	8008d90 <_vfiprintf_r+0x208>
 8008dc6:	bf00      	nop
 8008dc8:	0800d90c 	.word	0x0800d90c
 8008dcc:	0800d92c 	.word	0x0800d92c
 8008dd0:	0800d8ec 	.word	0x0800d8ec
 8008dd4:	0800d8b6 	.word	0x0800d8b6
 8008dd8:	0800d8c0 	.word	0x0800d8c0
 8008ddc:	00000000 	.word	0x00000000
 8008de0:	08008b63 	.word	0x08008b63
 8008de4:	0800d8bc 	.word	0x0800d8bc

08008de8 <_printf_common>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	4616      	mov	r6, r2
 8008dee:	4699      	mov	r9, r3
 8008df0:	688a      	ldr	r2, [r1, #8]
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	bfb8      	it	lt
 8008dfc:	4613      	movlt	r3, r2
 8008dfe:	6033      	str	r3, [r6, #0]
 8008e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e04:	4607      	mov	r7, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	b10a      	cbz	r2, 8008e0e <_printf_common+0x26>
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	6033      	str	r3, [r6, #0]
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	0699      	lsls	r1, r3, #26
 8008e12:	bf42      	ittt	mi
 8008e14:	6833      	ldrmi	r3, [r6, #0]
 8008e16:	3302      	addmi	r3, #2
 8008e18:	6033      	strmi	r3, [r6, #0]
 8008e1a:	6825      	ldr	r5, [r4, #0]
 8008e1c:	f015 0506 	ands.w	r5, r5, #6
 8008e20:	d106      	bne.n	8008e30 <_printf_common+0x48>
 8008e22:	f104 0a19 	add.w	sl, r4, #25
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	6832      	ldr	r2, [r6, #0]
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dc26      	bgt.n	8008e7e <_printf_common+0x96>
 8008e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e34:	1e13      	subs	r3, r2, #0
 8008e36:	6822      	ldr	r2, [r4, #0]
 8008e38:	bf18      	it	ne
 8008e3a:	2301      	movne	r3, #1
 8008e3c:	0692      	lsls	r2, r2, #26
 8008e3e:	d42b      	bmi.n	8008e98 <_printf_common+0xb0>
 8008e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e44:	4649      	mov	r1, r9
 8008e46:	4638      	mov	r0, r7
 8008e48:	47c0      	blx	r8
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d01e      	beq.n	8008e8c <_printf_common+0xa4>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	68e5      	ldr	r5, [r4, #12]
 8008e52:	6832      	ldr	r2, [r6, #0]
 8008e54:	f003 0306 	and.w	r3, r3, #6
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	bf08      	it	eq
 8008e5c:	1aad      	subeq	r5, r5, r2
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	6922      	ldr	r2, [r4, #16]
 8008e62:	bf0c      	ite	eq
 8008e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e68:	2500      	movne	r5, #0
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	bfc4      	itt	gt
 8008e6e:	1a9b      	subgt	r3, r3, r2
 8008e70:	18ed      	addgt	r5, r5, r3
 8008e72:	2600      	movs	r6, #0
 8008e74:	341a      	adds	r4, #26
 8008e76:	42b5      	cmp	r5, r6
 8008e78:	d11a      	bne.n	8008eb0 <_printf_common+0xc8>
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	e008      	b.n	8008e90 <_printf_common+0xa8>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4652      	mov	r2, sl
 8008e82:	4649      	mov	r1, r9
 8008e84:	4638      	mov	r0, r7
 8008e86:	47c0      	blx	r8
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d103      	bne.n	8008e94 <_printf_common+0xac>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e94:	3501      	adds	r5, #1
 8008e96:	e7c6      	b.n	8008e26 <_printf_common+0x3e>
 8008e98:	18e1      	adds	r1, r4, r3
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	2030      	movs	r0, #48	; 0x30
 8008e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ea2:	4422      	add	r2, r4
 8008ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eac:	3302      	adds	r3, #2
 8008eae:	e7c7      	b.n	8008e40 <_printf_common+0x58>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	47c0      	blx	r8
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d0e6      	beq.n	8008e8c <_printf_common+0xa4>
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7d9      	b.n	8008e76 <_printf_common+0x8e>
	...

08008ec4 <_printf_i>:
 8008ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	7e0f      	ldrb	r7, [r1, #24]
 8008eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ecc:	2f78      	cmp	r7, #120	; 0x78
 8008ece:	4691      	mov	r9, r2
 8008ed0:	4680      	mov	r8, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	469a      	mov	sl, r3
 8008ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eda:	d807      	bhi.n	8008eec <_printf_i+0x28>
 8008edc:	2f62      	cmp	r7, #98	; 0x62
 8008ede:	d80a      	bhi.n	8008ef6 <_printf_i+0x32>
 8008ee0:	2f00      	cmp	r7, #0
 8008ee2:	f000 80d8 	beq.w	8009096 <_printf_i+0x1d2>
 8008ee6:	2f58      	cmp	r7, #88	; 0x58
 8008ee8:	f000 80a3 	beq.w	8009032 <_printf_i+0x16e>
 8008eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ef4:	e03a      	b.n	8008f6c <_printf_i+0xa8>
 8008ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008efa:	2b15      	cmp	r3, #21
 8008efc:	d8f6      	bhi.n	8008eec <_printf_i+0x28>
 8008efe:	a101      	add	r1, pc, #4	; (adr r1, 8008f04 <_printf_i+0x40>)
 8008f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f04:	08008f5d 	.word	0x08008f5d
 8008f08:	08008f71 	.word	0x08008f71
 8008f0c:	08008eed 	.word	0x08008eed
 8008f10:	08008eed 	.word	0x08008eed
 8008f14:	08008eed 	.word	0x08008eed
 8008f18:	08008eed 	.word	0x08008eed
 8008f1c:	08008f71 	.word	0x08008f71
 8008f20:	08008eed 	.word	0x08008eed
 8008f24:	08008eed 	.word	0x08008eed
 8008f28:	08008eed 	.word	0x08008eed
 8008f2c:	08008eed 	.word	0x08008eed
 8008f30:	0800907d 	.word	0x0800907d
 8008f34:	08008fa1 	.word	0x08008fa1
 8008f38:	0800905f 	.word	0x0800905f
 8008f3c:	08008eed 	.word	0x08008eed
 8008f40:	08008eed 	.word	0x08008eed
 8008f44:	0800909f 	.word	0x0800909f
 8008f48:	08008eed 	.word	0x08008eed
 8008f4c:	08008fa1 	.word	0x08008fa1
 8008f50:	08008eed 	.word	0x08008eed
 8008f54:	08008eed 	.word	0x08008eed
 8008f58:	08009067 	.word	0x08009067
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	1d1a      	adds	r2, r3, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	602a      	str	r2, [r5, #0]
 8008f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e0a3      	b.n	80090b8 <_printf_i+0x1f4>
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	6829      	ldr	r1, [r5, #0]
 8008f74:	0606      	lsls	r6, r0, #24
 8008f76:	f101 0304 	add.w	r3, r1, #4
 8008f7a:	d50a      	bpl.n	8008f92 <_printf_i+0xce>
 8008f7c:	680e      	ldr	r6, [r1, #0]
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	2e00      	cmp	r6, #0
 8008f82:	da03      	bge.n	8008f8c <_printf_i+0xc8>
 8008f84:	232d      	movs	r3, #45	; 0x2d
 8008f86:	4276      	negs	r6, r6
 8008f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f8c:	485e      	ldr	r0, [pc, #376]	; (8009108 <_printf_i+0x244>)
 8008f8e:	230a      	movs	r3, #10
 8008f90:	e019      	b.n	8008fc6 <_printf_i+0x102>
 8008f92:	680e      	ldr	r6, [r1, #0]
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f9a:	bf18      	it	ne
 8008f9c:	b236      	sxthne	r6, r6
 8008f9e:	e7ef      	b.n	8008f80 <_printf_i+0xbc>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	6820      	ldr	r0, [r4, #0]
 8008fa4:	1d19      	adds	r1, r3, #4
 8008fa6:	6029      	str	r1, [r5, #0]
 8008fa8:	0601      	lsls	r1, r0, #24
 8008faa:	d501      	bpl.n	8008fb0 <_printf_i+0xec>
 8008fac:	681e      	ldr	r6, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <_printf_i+0xf2>
 8008fb0:	0646      	lsls	r6, r0, #25
 8008fb2:	d5fb      	bpl.n	8008fac <_printf_i+0xe8>
 8008fb4:	881e      	ldrh	r6, [r3, #0]
 8008fb6:	4854      	ldr	r0, [pc, #336]	; (8009108 <_printf_i+0x244>)
 8008fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8008fba:	bf0c      	ite	eq
 8008fbc:	2308      	moveq	r3, #8
 8008fbe:	230a      	movne	r3, #10
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fc6:	6865      	ldr	r5, [r4, #4]
 8008fc8:	60a5      	str	r5, [r4, #8]
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	bfa2      	ittt	ge
 8008fce:	6821      	ldrge	r1, [r4, #0]
 8008fd0:	f021 0104 	bicge.w	r1, r1, #4
 8008fd4:	6021      	strge	r1, [r4, #0]
 8008fd6:	b90e      	cbnz	r6, 8008fdc <_printf_i+0x118>
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	d04d      	beq.n	8009078 <_printf_i+0x1b4>
 8008fdc:	4615      	mov	r5, r2
 8008fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8008fe6:	5dc7      	ldrb	r7, [r0, r7]
 8008fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fec:	4637      	mov	r7, r6
 8008fee:	42bb      	cmp	r3, r7
 8008ff0:	460e      	mov	r6, r1
 8008ff2:	d9f4      	bls.n	8008fde <_printf_i+0x11a>
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d10b      	bne.n	8009010 <_printf_i+0x14c>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	07de      	lsls	r6, r3, #31
 8008ffc:	d508      	bpl.n	8009010 <_printf_i+0x14c>
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	6861      	ldr	r1, [r4, #4]
 8009002:	4299      	cmp	r1, r3
 8009004:	bfde      	ittt	le
 8009006:	2330      	movle	r3, #48	; 0x30
 8009008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800900c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009010:	1b52      	subs	r2, r2, r5
 8009012:	6122      	str	r2, [r4, #16]
 8009014:	f8cd a000 	str.w	sl, [sp]
 8009018:	464b      	mov	r3, r9
 800901a:	aa03      	add	r2, sp, #12
 800901c:	4621      	mov	r1, r4
 800901e:	4640      	mov	r0, r8
 8009020:	f7ff fee2 	bl	8008de8 <_printf_common>
 8009024:	3001      	adds	r0, #1
 8009026:	d14c      	bne.n	80090c2 <_printf_i+0x1fe>
 8009028:	f04f 30ff 	mov.w	r0, #4294967295
 800902c:	b004      	add	sp, #16
 800902e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009032:	4835      	ldr	r0, [pc, #212]	; (8009108 <_printf_i+0x244>)
 8009034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009038:	6829      	ldr	r1, [r5, #0]
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009040:	6029      	str	r1, [r5, #0]
 8009042:	061d      	lsls	r5, r3, #24
 8009044:	d514      	bpl.n	8009070 <_printf_i+0x1ac>
 8009046:	07df      	lsls	r7, r3, #31
 8009048:	bf44      	itt	mi
 800904a:	f043 0320 	orrmi.w	r3, r3, #32
 800904e:	6023      	strmi	r3, [r4, #0]
 8009050:	b91e      	cbnz	r6, 800905a <_printf_i+0x196>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	f023 0320 	bic.w	r3, r3, #32
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	2310      	movs	r3, #16
 800905c:	e7b0      	b.n	8008fc0 <_printf_i+0xfc>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	f043 0320 	orr.w	r3, r3, #32
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	2378      	movs	r3, #120	; 0x78
 8009068:	4828      	ldr	r0, [pc, #160]	; (800910c <_printf_i+0x248>)
 800906a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800906e:	e7e3      	b.n	8009038 <_printf_i+0x174>
 8009070:	0659      	lsls	r1, r3, #25
 8009072:	bf48      	it	mi
 8009074:	b2b6      	uxthmi	r6, r6
 8009076:	e7e6      	b.n	8009046 <_printf_i+0x182>
 8009078:	4615      	mov	r5, r2
 800907a:	e7bb      	b.n	8008ff4 <_printf_i+0x130>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	6826      	ldr	r6, [r4, #0]
 8009080:	6961      	ldr	r1, [r4, #20]
 8009082:	1d18      	adds	r0, r3, #4
 8009084:	6028      	str	r0, [r5, #0]
 8009086:	0635      	lsls	r5, r6, #24
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	d501      	bpl.n	8009090 <_printf_i+0x1cc>
 800908c:	6019      	str	r1, [r3, #0]
 800908e:	e002      	b.n	8009096 <_printf_i+0x1d2>
 8009090:	0670      	lsls	r0, r6, #25
 8009092:	d5fb      	bpl.n	800908c <_printf_i+0x1c8>
 8009094:	8019      	strh	r1, [r3, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	4615      	mov	r5, r2
 800909c:	e7ba      	b.n	8009014 <_printf_i+0x150>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	602a      	str	r2, [r5, #0]
 80090a4:	681d      	ldr	r5, [r3, #0]
 80090a6:	6862      	ldr	r2, [r4, #4]
 80090a8:	2100      	movs	r1, #0
 80090aa:	4628      	mov	r0, r5
 80090ac:	f7f7 f898 	bl	80001e0 <memchr>
 80090b0:	b108      	cbz	r0, 80090b6 <_printf_i+0x1f2>
 80090b2:	1b40      	subs	r0, r0, r5
 80090b4:	6060      	str	r0, [r4, #4]
 80090b6:	6863      	ldr	r3, [r4, #4]
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	2300      	movs	r3, #0
 80090bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c0:	e7a8      	b.n	8009014 <_printf_i+0x150>
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4649      	mov	r1, r9
 80090c8:	4640      	mov	r0, r8
 80090ca:	47d0      	blx	sl
 80090cc:	3001      	adds	r0, #1
 80090ce:	d0ab      	beq.n	8009028 <_printf_i+0x164>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	079b      	lsls	r3, r3, #30
 80090d4:	d413      	bmi.n	80090fe <_printf_i+0x23a>
 80090d6:	68e0      	ldr	r0, [r4, #12]
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	4298      	cmp	r0, r3
 80090dc:	bfb8      	it	lt
 80090de:	4618      	movlt	r0, r3
 80090e0:	e7a4      	b.n	800902c <_printf_i+0x168>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4632      	mov	r2, r6
 80090e6:	4649      	mov	r1, r9
 80090e8:	4640      	mov	r0, r8
 80090ea:	47d0      	blx	sl
 80090ec:	3001      	adds	r0, #1
 80090ee:	d09b      	beq.n	8009028 <_printf_i+0x164>
 80090f0:	3501      	adds	r5, #1
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	9903      	ldr	r1, [sp, #12]
 80090f6:	1a5b      	subs	r3, r3, r1
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	dcf2      	bgt.n	80090e2 <_printf_i+0x21e>
 80090fc:	e7eb      	b.n	80090d6 <_printf_i+0x212>
 80090fe:	2500      	movs	r5, #0
 8009100:	f104 0619 	add.w	r6, r4, #25
 8009104:	e7f5      	b.n	80090f2 <_printf_i+0x22e>
 8009106:	bf00      	nop
 8009108:	0800d8c7 	.word	0x0800d8c7
 800910c:	0800d8d8 	.word	0x0800d8d8

08009110 <_sbrk_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d06      	ldr	r5, [pc, #24]	; (800912c <_sbrk_r+0x1c>)
 8009114:	2300      	movs	r3, #0
 8009116:	4604      	mov	r4, r0
 8009118:	4608      	mov	r0, r1
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	f7fc fc22 	bl	8005964 <_sbrk>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_sbrk_r+0x1a>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_sbrk_r+0x1a>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	20002a00 	.word	0x20002a00

08009130 <__swbuf_r>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	460e      	mov	r6, r1
 8009134:	4614      	mov	r4, r2
 8009136:	4605      	mov	r5, r0
 8009138:	b118      	cbz	r0, 8009142 <__swbuf_r+0x12>
 800913a:	6983      	ldr	r3, [r0, #24]
 800913c:	b90b      	cbnz	r3, 8009142 <__swbuf_r+0x12>
 800913e:	f000 f9d9 	bl	80094f4 <__sinit>
 8009142:	4b21      	ldr	r3, [pc, #132]	; (80091c8 <__swbuf_r+0x98>)
 8009144:	429c      	cmp	r4, r3
 8009146:	d12b      	bne.n	80091a0 <__swbuf_r+0x70>
 8009148:	686c      	ldr	r4, [r5, #4]
 800914a:	69a3      	ldr	r3, [r4, #24]
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	071a      	lsls	r2, r3, #28
 8009152:	d52f      	bpl.n	80091b4 <__swbuf_r+0x84>
 8009154:	6923      	ldr	r3, [r4, #16]
 8009156:	b36b      	cbz	r3, 80091b4 <__swbuf_r+0x84>
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	6820      	ldr	r0, [r4, #0]
 800915c:	1ac0      	subs	r0, r0, r3
 800915e:	6963      	ldr	r3, [r4, #20]
 8009160:	b2f6      	uxtb	r6, r6
 8009162:	4283      	cmp	r3, r0
 8009164:	4637      	mov	r7, r6
 8009166:	dc04      	bgt.n	8009172 <__swbuf_r+0x42>
 8009168:	4621      	mov	r1, r4
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f92e 	bl	80093cc <_fflush_r>
 8009170:	bb30      	cbnz	r0, 80091c0 <__swbuf_r+0x90>
 8009172:	68a3      	ldr	r3, [r4, #8]
 8009174:	3b01      	subs	r3, #1
 8009176:	60a3      	str	r3, [r4, #8]
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	701e      	strb	r6, [r3, #0]
 8009180:	6963      	ldr	r3, [r4, #20]
 8009182:	3001      	adds	r0, #1
 8009184:	4283      	cmp	r3, r0
 8009186:	d004      	beq.n	8009192 <__swbuf_r+0x62>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	07db      	lsls	r3, r3, #31
 800918c:	d506      	bpl.n	800919c <__swbuf_r+0x6c>
 800918e:	2e0a      	cmp	r6, #10
 8009190:	d104      	bne.n	800919c <__swbuf_r+0x6c>
 8009192:	4621      	mov	r1, r4
 8009194:	4628      	mov	r0, r5
 8009196:	f000 f919 	bl	80093cc <_fflush_r>
 800919a:	b988      	cbnz	r0, 80091c0 <__swbuf_r+0x90>
 800919c:	4638      	mov	r0, r7
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <__swbuf_r+0x9c>)
 80091a2:	429c      	cmp	r4, r3
 80091a4:	d101      	bne.n	80091aa <__swbuf_r+0x7a>
 80091a6:	68ac      	ldr	r4, [r5, #8]
 80091a8:	e7cf      	b.n	800914a <__swbuf_r+0x1a>
 80091aa:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <__swbuf_r+0xa0>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	bf08      	it	eq
 80091b0:	68ec      	ldreq	r4, [r5, #12]
 80091b2:	e7ca      	b.n	800914a <__swbuf_r+0x1a>
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 f80c 	bl	80091d4 <__swsetup_r>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d0cb      	beq.n	8009158 <__swbuf_r+0x28>
 80091c0:	f04f 37ff 	mov.w	r7, #4294967295
 80091c4:	e7ea      	b.n	800919c <__swbuf_r+0x6c>
 80091c6:	bf00      	nop
 80091c8:	0800d90c 	.word	0x0800d90c
 80091cc:	0800d92c 	.word	0x0800d92c
 80091d0:	0800d8ec 	.word	0x0800d8ec

080091d4 <__swsetup_r>:
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <__swsetup_r+0xcc>)
 80091d6:	b570      	push	{r4, r5, r6, lr}
 80091d8:	681d      	ldr	r5, [r3, #0]
 80091da:	4606      	mov	r6, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	b125      	cbz	r5, 80091ea <__swsetup_r+0x16>
 80091e0:	69ab      	ldr	r3, [r5, #24]
 80091e2:	b913      	cbnz	r3, 80091ea <__swsetup_r+0x16>
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 f985 	bl	80094f4 <__sinit>
 80091ea:	4b2e      	ldr	r3, [pc, #184]	; (80092a4 <__swsetup_r+0xd0>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	d10f      	bne.n	8009210 <__swsetup_r+0x3c>
 80091f0:	686c      	ldr	r4, [r5, #4]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091f8:	0719      	lsls	r1, r3, #28
 80091fa:	d42c      	bmi.n	8009256 <__swsetup_r+0x82>
 80091fc:	06dd      	lsls	r5, r3, #27
 80091fe:	d411      	bmi.n	8009224 <__swsetup_r+0x50>
 8009200:	2309      	movs	r3, #9
 8009202:	6033      	str	r3, [r6, #0]
 8009204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	e03e      	b.n	800928e <__swsetup_r+0xba>
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <__swsetup_r+0xd4>)
 8009212:	429c      	cmp	r4, r3
 8009214:	d101      	bne.n	800921a <__swsetup_r+0x46>
 8009216:	68ac      	ldr	r4, [r5, #8]
 8009218:	e7eb      	b.n	80091f2 <__swsetup_r+0x1e>
 800921a:	4b24      	ldr	r3, [pc, #144]	; (80092ac <__swsetup_r+0xd8>)
 800921c:	429c      	cmp	r4, r3
 800921e:	bf08      	it	eq
 8009220:	68ec      	ldreq	r4, [r5, #12]
 8009222:	e7e6      	b.n	80091f2 <__swsetup_r+0x1e>
 8009224:	0758      	lsls	r0, r3, #29
 8009226:	d512      	bpl.n	800924e <__swsetup_r+0x7a>
 8009228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800922a:	b141      	cbz	r1, 800923e <__swsetup_r+0x6a>
 800922c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009230:	4299      	cmp	r1, r3
 8009232:	d002      	beq.n	800923a <__swsetup_r+0x66>
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff fa41 	bl	80086bc <_free_r>
 800923a:	2300      	movs	r3, #0
 800923c:	6363      	str	r3, [r4, #52]	; 0x34
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f043 0308 	orr.w	r3, r3, #8
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	b94b      	cbnz	r3, 800926e <__swsetup_r+0x9a>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009264:	d003      	beq.n	800926e <__swsetup_r+0x9a>
 8009266:	4621      	mov	r1, r4
 8009268:	4630      	mov	r0, r6
 800926a:	f000 fa09 	bl	8009680 <__smakebuf_r>
 800926e:	89a0      	ldrh	r0, [r4, #12]
 8009270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009274:	f010 0301 	ands.w	r3, r0, #1
 8009278:	d00a      	beq.n	8009290 <__swsetup_r+0xbc>
 800927a:	2300      	movs	r3, #0
 800927c:	60a3      	str	r3, [r4, #8]
 800927e:	6963      	ldr	r3, [r4, #20]
 8009280:	425b      	negs	r3, r3
 8009282:	61a3      	str	r3, [r4, #24]
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	b943      	cbnz	r3, 800929a <__swsetup_r+0xc6>
 8009288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800928c:	d1ba      	bne.n	8009204 <__swsetup_r+0x30>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	0781      	lsls	r1, r0, #30
 8009292:	bf58      	it	pl
 8009294:	6963      	ldrpl	r3, [r4, #20]
 8009296:	60a3      	str	r3, [r4, #8]
 8009298:	e7f4      	b.n	8009284 <__swsetup_r+0xb0>
 800929a:	2000      	movs	r0, #0
 800929c:	e7f7      	b.n	800928e <__swsetup_r+0xba>
 800929e:	bf00      	nop
 80092a0:	200000b0 	.word	0x200000b0
 80092a4:	0800d90c 	.word	0x0800d90c
 80092a8:	0800d92c 	.word	0x0800d92c
 80092ac:	0800d8ec 	.word	0x0800d8ec

080092b0 <abort>:
 80092b0:	b508      	push	{r3, lr}
 80092b2:	2006      	movs	r0, #6
 80092b4:	f000 faa2 	bl	80097fc <raise>
 80092b8:	2001      	movs	r0, #1
 80092ba:	f7fc fadb 	bl	8005874 <_exit>
	...

080092c0 <__sflush_r>:
 80092c0:	898a      	ldrh	r2, [r1, #12]
 80092c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	4605      	mov	r5, r0
 80092c8:	0710      	lsls	r0, r2, #28
 80092ca:	460c      	mov	r4, r1
 80092cc:	d458      	bmi.n	8009380 <__sflush_r+0xc0>
 80092ce:	684b      	ldr	r3, [r1, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc05      	bgt.n	80092e0 <__sflush_r+0x20>
 80092d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dc02      	bgt.n	80092e0 <__sflush_r+0x20>
 80092da:	2000      	movs	r0, #0
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d0f9      	beq.n	80092da <__sflush_r+0x1a>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092ec:	682f      	ldr	r7, [r5, #0]
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	d032      	beq.n	8009358 <__sflush_r+0x98>
 80092f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	075a      	lsls	r2, r3, #29
 80092f8:	d505      	bpl.n	8009306 <__sflush_r+0x46>
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	1ac0      	subs	r0, r0, r3
 80092fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009300:	b10b      	cbz	r3, 8009306 <__sflush_r+0x46>
 8009302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009304:	1ac0      	subs	r0, r0, r3
 8009306:	2300      	movs	r3, #0
 8009308:	4602      	mov	r2, r0
 800930a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800930c:	6a21      	ldr	r1, [r4, #32]
 800930e:	4628      	mov	r0, r5
 8009310:	47b0      	blx	r6
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	d106      	bne.n	8009326 <__sflush_r+0x66>
 8009318:	6829      	ldr	r1, [r5, #0]
 800931a:	291d      	cmp	r1, #29
 800931c:	d82c      	bhi.n	8009378 <__sflush_r+0xb8>
 800931e:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <__sflush_r+0x108>)
 8009320:	40ca      	lsrs	r2, r1
 8009322:	07d6      	lsls	r6, r2, #31
 8009324:	d528      	bpl.n	8009378 <__sflush_r+0xb8>
 8009326:	2200      	movs	r2, #0
 8009328:	6062      	str	r2, [r4, #4]
 800932a:	04d9      	lsls	r1, r3, #19
 800932c:	6922      	ldr	r2, [r4, #16]
 800932e:	6022      	str	r2, [r4, #0]
 8009330:	d504      	bpl.n	800933c <__sflush_r+0x7c>
 8009332:	1c42      	adds	r2, r0, #1
 8009334:	d101      	bne.n	800933a <__sflush_r+0x7a>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b903      	cbnz	r3, 800933c <__sflush_r+0x7c>
 800933a:	6560      	str	r0, [r4, #84]	; 0x54
 800933c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800933e:	602f      	str	r7, [r5, #0]
 8009340:	2900      	cmp	r1, #0
 8009342:	d0ca      	beq.n	80092da <__sflush_r+0x1a>
 8009344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009348:	4299      	cmp	r1, r3
 800934a:	d002      	beq.n	8009352 <__sflush_r+0x92>
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff f9b5 	bl	80086bc <_free_r>
 8009352:	2000      	movs	r0, #0
 8009354:	6360      	str	r0, [r4, #52]	; 0x34
 8009356:	e7c1      	b.n	80092dc <__sflush_r+0x1c>
 8009358:	6a21      	ldr	r1, [r4, #32]
 800935a:	2301      	movs	r3, #1
 800935c:	4628      	mov	r0, r5
 800935e:	47b0      	blx	r6
 8009360:	1c41      	adds	r1, r0, #1
 8009362:	d1c7      	bne.n	80092f4 <__sflush_r+0x34>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0c4      	beq.n	80092f4 <__sflush_r+0x34>
 800936a:	2b1d      	cmp	r3, #29
 800936c:	d001      	beq.n	8009372 <__sflush_r+0xb2>
 800936e:	2b16      	cmp	r3, #22
 8009370:	d101      	bne.n	8009376 <__sflush_r+0xb6>
 8009372:	602f      	str	r7, [r5, #0]
 8009374:	e7b1      	b.n	80092da <__sflush_r+0x1a>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e7ad      	b.n	80092dc <__sflush_r+0x1c>
 8009380:	690f      	ldr	r7, [r1, #16]
 8009382:	2f00      	cmp	r7, #0
 8009384:	d0a9      	beq.n	80092da <__sflush_r+0x1a>
 8009386:	0793      	lsls	r3, r2, #30
 8009388:	680e      	ldr	r6, [r1, #0]
 800938a:	bf08      	it	eq
 800938c:	694b      	ldreq	r3, [r1, #20]
 800938e:	600f      	str	r7, [r1, #0]
 8009390:	bf18      	it	ne
 8009392:	2300      	movne	r3, #0
 8009394:	eba6 0807 	sub.w	r8, r6, r7
 8009398:	608b      	str	r3, [r1, #8]
 800939a:	f1b8 0f00 	cmp.w	r8, #0
 800939e:	dd9c      	ble.n	80092da <__sflush_r+0x1a>
 80093a0:	6a21      	ldr	r1, [r4, #32]
 80093a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093a4:	4643      	mov	r3, r8
 80093a6:	463a      	mov	r2, r7
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b0      	blx	r6
 80093ac:	2800      	cmp	r0, #0
 80093ae:	dc06      	bgt.n	80093be <__sflush_r+0xfe>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	e78e      	b.n	80092dc <__sflush_r+0x1c>
 80093be:	4407      	add	r7, r0
 80093c0:	eba8 0800 	sub.w	r8, r8, r0
 80093c4:	e7e9      	b.n	800939a <__sflush_r+0xda>
 80093c6:	bf00      	nop
 80093c8:	20400001 	.word	0x20400001

080093cc <_fflush_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	690b      	ldr	r3, [r1, #16]
 80093d0:	4605      	mov	r5, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	b913      	cbnz	r3, 80093dc <_fflush_r+0x10>
 80093d6:	2500      	movs	r5, #0
 80093d8:	4628      	mov	r0, r5
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	b118      	cbz	r0, 80093e6 <_fflush_r+0x1a>
 80093de:	6983      	ldr	r3, [r0, #24]
 80093e0:	b90b      	cbnz	r3, 80093e6 <_fflush_r+0x1a>
 80093e2:	f000 f887 	bl	80094f4 <__sinit>
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <_fflush_r+0x6c>)
 80093e8:	429c      	cmp	r4, r3
 80093ea:	d11b      	bne.n	8009424 <_fflush_r+0x58>
 80093ec:	686c      	ldr	r4, [r5, #4]
 80093ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ef      	beq.n	80093d6 <_fflush_r+0xa>
 80093f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093f8:	07d0      	lsls	r0, r2, #31
 80093fa:	d404      	bmi.n	8009406 <_fflush_r+0x3a>
 80093fc:	0599      	lsls	r1, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_fflush_r+0x3a>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f000 f915 	bl	8009630 <__retarget_lock_acquire_recursive>
 8009406:	4628      	mov	r0, r5
 8009408:	4621      	mov	r1, r4
 800940a:	f7ff ff59 	bl	80092c0 <__sflush_r>
 800940e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009410:	07da      	lsls	r2, r3, #31
 8009412:	4605      	mov	r5, r0
 8009414:	d4e0      	bmi.n	80093d8 <_fflush_r+0xc>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	059b      	lsls	r3, r3, #22
 800941a:	d4dd      	bmi.n	80093d8 <_fflush_r+0xc>
 800941c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800941e:	f000 f908 	bl	8009632 <__retarget_lock_release_recursive>
 8009422:	e7d9      	b.n	80093d8 <_fflush_r+0xc>
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <_fflush_r+0x70>)
 8009426:	429c      	cmp	r4, r3
 8009428:	d101      	bne.n	800942e <_fflush_r+0x62>
 800942a:	68ac      	ldr	r4, [r5, #8]
 800942c:	e7df      	b.n	80093ee <_fflush_r+0x22>
 800942e:	4b04      	ldr	r3, [pc, #16]	; (8009440 <_fflush_r+0x74>)
 8009430:	429c      	cmp	r4, r3
 8009432:	bf08      	it	eq
 8009434:	68ec      	ldreq	r4, [r5, #12]
 8009436:	e7da      	b.n	80093ee <_fflush_r+0x22>
 8009438:	0800d90c 	.word	0x0800d90c
 800943c:	0800d92c 	.word	0x0800d92c
 8009440:	0800d8ec 	.word	0x0800d8ec

08009444 <std>:
 8009444:	2300      	movs	r3, #0
 8009446:	b510      	push	{r4, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	e9c0 3300 	strd	r3, r3, [r0]
 800944e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009452:	6083      	str	r3, [r0, #8]
 8009454:	8181      	strh	r1, [r0, #12]
 8009456:	6643      	str	r3, [r0, #100]	; 0x64
 8009458:	81c2      	strh	r2, [r0, #14]
 800945a:	6183      	str	r3, [r0, #24]
 800945c:	4619      	mov	r1, r3
 800945e:	2208      	movs	r2, #8
 8009460:	305c      	adds	r0, #92	; 0x5c
 8009462:	f7ff f80f 	bl	8008484 <memset>
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <std+0x38>)
 8009468:	6263      	str	r3, [r4, #36]	; 0x24
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <std+0x3c>)
 800946c:	62a3      	str	r3, [r4, #40]	; 0x28
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <std+0x40>)
 8009470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <std+0x44>)
 8009474:	6224      	str	r4, [r4, #32]
 8009476:	6323      	str	r3, [r4, #48]	; 0x30
 8009478:	bd10      	pop	{r4, pc}
 800947a:	bf00      	nop
 800947c:	08009835 	.word	0x08009835
 8009480:	08009857 	.word	0x08009857
 8009484:	0800988f 	.word	0x0800988f
 8009488:	080098b3 	.word	0x080098b3

0800948c <_cleanup_r>:
 800948c:	4901      	ldr	r1, [pc, #4]	; (8009494 <_cleanup_r+0x8>)
 800948e:	f000 b8af 	b.w	80095f0 <_fwalk_reent>
 8009492:	bf00      	nop
 8009494:	080093cd 	.word	0x080093cd

08009498 <__sfmoreglue>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	2268      	movs	r2, #104	; 0x68
 800949c:	1e4d      	subs	r5, r1, #1
 800949e:	4355      	muls	r5, r2
 80094a0:	460e      	mov	r6, r1
 80094a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094a6:	f7ff f975 	bl	8008794 <_malloc_r>
 80094aa:	4604      	mov	r4, r0
 80094ac:	b140      	cbz	r0, 80094c0 <__sfmoreglue+0x28>
 80094ae:	2100      	movs	r1, #0
 80094b0:	e9c0 1600 	strd	r1, r6, [r0]
 80094b4:	300c      	adds	r0, #12
 80094b6:	60a0      	str	r0, [r4, #8]
 80094b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094bc:	f7fe ffe2 	bl	8008484 <memset>
 80094c0:	4620      	mov	r0, r4
 80094c2:	bd70      	pop	{r4, r5, r6, pc}

080094c4 <__sfp_lock_acquire>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sfp_lock_acquire+0x8>)
 80094c6:	f000 b8b3 	b.w	8009630 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	200029fd 	.word	0x200029fd

080094d0 <__sfp_lock_release>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__sfp_lock_release+0x8>)
 80094d2:	f000 b8ae 	b.w	8009632 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	200029fd 	.word	0x200029fd

080094dc <__sinit_lock_acquire>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__sinit_lock_acquire+0x8>)
 80094de:	f000 b8a7 	b.w	8009630 <__retarget_lock_acquire_recursive>
 80094e2:	bf00      	nop
 80094e4:	200029fe 	.word	0x200029fe

080094e8 <__sinit_lock_release>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sinit_lock_release+0x8>)
 80094ea:	f000 b8a2 	b.w	8009632 <__retarget_lock_release_recursive>
 80094ee:	bf00      	nop
 80094f0:	200029fe 	.word	0x200029fe

080094f4 <__sinit>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4604      	mov	r4, r0
 80094f8:	f7ff fff0 	bl	80094dc <__sinit_lock_acquire>
 80094fc:	69a3      	ldr	r3, [r4, #24]
 80094fe:	b11b      	cbz	r3, 8009508 <__sinit+0x14>
 8009500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009504:	f7ff bff0 	b.w	80094e8 <__sinit_lock_release>
 8009508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800950c:	6523      	str	r3, [r4, #80]	; 0x50
 800950e:	4b13      	ldr	r3, [pc, #76]	; (800955c <__sinit+0x68>)
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <__sinit+0x6c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	62a2      	str	r2, [r4, #40]	; 0x28
 8009516:	42a3      	cmp	r3, r4
 8009518:	bf04      	itt	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	61a3      	streq	r3, [r4, #24]
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f820 	bl	8009564 <__sfp>
 8009524:	6060      	str	r0, [r4, #4]
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f81c 	bl	8009564 <__sfp>
 800952c:	60a0      	str	r0, [r4, #8]
 800952e:	4620      	mov	r0, r4
 8009530:	f000 f818 	bl	8009564 <__sfp>
 8009534:	2200      	movs	r2, #0
 8009536:	60e0      	str	r0, [r4, #12]
 8009538:	2104      	movs	r1, #4
 800953a:	6860      	ldr	r0, [r4, #4]
 800953c:	f7ff ff82 	bl	8009444 <std>
 8009540:	68a0      	ldr	r0, [r4, #8]
 8009542:	2201      	movs	r2, #1
 8009544:	2109      	movs	r1, #9
 8009546:	f7ff ff7d 	bl	8009444 <std>
 800954a:	68e0      	ldr	r0, [r4, #12]
 800954c:	2202      	movs	r2, #2
 800954e:	2112      	movs	r1, #18
 8009550:	f7ff ff78 	bl	8009444 <std>
 8009554:	2301      	movs	r3, #1
 8009556:	61a3      	str	r3, [r4, #24]
 8009558:	e7d2      	b.n	8009500 <__sinit+0xc>
 800955a:	bf00      	nop
 800955c:	0800d804 	.word	0x0800d804
 8009560:	0800948d 	.word	0x0800948d

08009564 <__sfp>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	4607      	mov	r7, r0
 8009568:	f7ff ffac 	bl	80094c4 <__sfp_lock_acquire>
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <__sfp+0x84>)
 800956e:	681e      	ldr	r6, [r3, #0]
 8009570:	69b3      	ldr	r3, [r6, #24]
 8009572:	b913      	cbnz	r3, 800957a <__sfp+0x16>
 8009574:	4630      	mov	r0, r6
 8009576:	f7ff ffbd 	bl	80094f4 <__sinit>
 800957a:	3648      	adds	r6, #72	; 0x48
 800957c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009580:	3b01      	subs	r3, #1
 8009582:	d503      	bpl.n	800958c <__sfp+0x28>
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	b30b      	cbz	r3, 80095cc <__sfp+0x68>
 8009588:	6836      	ldr	r6, [r6, #0]
 800958a:	e7f7      	b.n	800957c <__sfp+0x18>
 800958c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009590:	b9d5      	cbnz	r5, 80095c8 <__sfp+0x64>
 8009592:	4b16      	ldr	r3, [pc, #88]	; (80095ec <__sfp+0x88>)
 8009594:	60e3      	str	r3, [r4, #12]
 8009596:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800959a:	6665      	str	r5, [r4, #100]	; 0x64
 800959c:	f000 f847 	bl	800962e <__retarget_lock_init_recursive>
 80095a0:	f7ff ff96 	bl	80094d0 <__sfp_lock_release>
 80095a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095ac:	6025      	str	r5, [r4, #0]
 80095ae:	61a5      	str	r5, [r4, #24]
 80095b0:	2208      	movs	r2, #8
 80095b2:	4629      	mov	r1, r5
 80095b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095b8:	f7fe ff64 	bl	8008484 <memset>
 80095bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095c4:	4620      	mov	r0, r4
 80095c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c8:	3468      	adds	r4, #104	; 0x68
 80095ca:	e7d9      	b.n	8009580 <__sfp+0x1c>
 80095cc:	2104      	movs	r1, #4
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ff62 	bl	8009498 <__sfmoreglue>
 80095d4:	4604      	mov	r4, r0
 80095d6:	6030      	str	r0, [r6, #0]
 80095d8:	2800      	cmp	r0, #0
 80095da:	d1d5      	bne.n	8009588 <__sfp+0x24>
 80095dc:	f7ff ff78 	bl	80094d0 <__sfp_lock_release>
 80095e0:	230c      	movs	r3, #12
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	e7ee      	b.n	80095c4 <__sfp+0x60>
 80095e6:	bf00      	nop
 80095e8:	0800d804 	.word	0x0800d804
 80095ec:	ffff0001 	.word	0xffff0001

080095f0 <_fwalk_reent>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4606      	mov	r6, r0
 80095f6:	4688      	mov	r8, r1
 80095f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095fc:	2700      	movs	r7, #0
 80095fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009602:	f1b9 0901 	subs.w	r9, r9, #1
 8009606:	d505      	bpl.n	8009614 <_fwalk_reent+0x24>
 8009608:	6824      	ldr	r4, [r4, #0]
 800960a:	2c00      	cmp	r4, #0
 800960c:	d1f7      	bne.n	80095fe <_fwalk_reent+0xe>
 800960e:	4638      	mov	r0, r7
 8009610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009614:	89ab      	ldrh	r3, [r5, #12]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d907      	bls.n	800962a <_fwalk_reent+0x3a>
 800961a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800961e:	3301      	adds	r3, #1
 8009620:	d003      	beq.n	800962a <_fwalk_reent+0x3a>
 8009622:	4629      	mov	r1, r5
 8009624:	4630      	mov	r0, r6
 8009626:	47c0      	blx	r8
 8009628:	4307      	orrs	r7, r0
 800962a:	3568      	adds	r5, #104	; 0x68
 800962c:	e7e9      	b.n	8009602 <_fwalk_reent+0x12>

0800962e <__retarget_lock_init_recursive>:
 800962e:	4770      	bx	lr

08009630 <__retarget_lock_acquire_recursive>:
 8009630:	4770      	bx	lr

08009632 <__retarget_lock_release_recursive>:
 8009632:	4770      	bx	lr

08009634 <__swhatbuf_r>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	460e      	mov	r6, r1
 8009638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963c:	2900      	cmp	r1, #0
 800963e:	b096      	sub	sp, #88	; 0x58
 8009640:	4614      	mov	r4, r2
 8009642:	461d      	mov	r5, r3
 8009644:	da08      	bge.n	8009658 <__swhatbuf_r+0x24>
 8009646:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	602a      	str	r2, [r5, #0]
 800964e:	061a      	lsls	r2, r3, #24
 8009650:	d410      	bmi.n	8009674 <__swhatbuf_r+0x40>
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	e00e      	b.n	8009676 <__swhatbuf_r+0x42>
 8009658:	466a      	mov	r2, sp
 800965a:	f000 f951 	bl	8009900 <_fstat_r>
 800965e:	2800      	cmp	r0, #0
 8009660:	dbf1      	blt.n	8009646 <__swhatbuf_r+0x12>
 8009662:	9a01      	ldr	r2, [sp, #4]
 8009664:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009668:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800966c:	425a      	negs	r2, r3
 800966e:	415a      	adcs	r2, r3
 8009670:	602a      	str	r2, [r5, #0]
 8009672:	e7ee      	b.n	8009652 <__swhatbuf_r+0x1e>
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	2000      	movs	r0, #0
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	b016      	add	sp, #88	; 0x58
 800967c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009680 <__smakebuf_r>:
 8009680:	898b      	ldrh	r3, [r1, #12]
 8009682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009684:	079d      	lsls	r5, r3, #30
 8009686:	4606      	mov	r6, r0
 8009688:	460c      	mov	r4, r1
 800968a:	d507      	bpl.n	800969c <__smakebuf_r+0x1c>
 800968c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	2301      	movs	r3, #1
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	b002      	add	sp, #8
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	ab01      	add	r3, sp, #4
 800969e:	466a      	mov	r2, sp
 80096a0:	f7ff ffc8 	bl	8009634 <__swhatbuf_r>
 80096a4:	9900      	ldr	r1, [sp, #0]
 80096a6:	4605      	mov	r5, r0
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff f873 	bl	8008794 <_malloc_r>
 80096ae:	b948      	cbnz	r0, 80096c4 <__smakebuf_r+0x44>
 80096b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b4:	059a      	lsls	r2, r3, #22
 80096b6:	d4ef      	bmi.n	8009698 <__smakebuf_r+0x18>
 80096b8:	f023 0303 	bic.w	r3, r3, #3
 80096bc:	f043 0302 	orr.w	r3, r3, #2
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	e7e3      	b.n	800968c <__smakebuf_r+0xc>
 80096c4:	4b0d      	ldr	r3, [pc, #52]	; (80096fc <__smakebuf_r+0x7c>)
 80096c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	9b00      	ldr	r3, [sp, #0]
 80096d4:	6163      	str	r3, [r4, #20]
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	6120      	str	r0, [r4, #16]
 80096da:	b15b      	cbz	r3, 80096f4 <__smakebuf_r+0x74>
 80096dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f91f 	bl	8009924 <_isatty_r>
 80096e6:	b128      	cbz	r0, 80096f4 <__smakebuf_r+0x74>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	89a0      	ldrh	r0, [r4, #12]
 80096f6:	4305      	orrs	r5, r0
 80096f8:	81a5      	strh	r5, [r4, #12]
 80096fa:	e7cd      	b.n	8009698 <__smakebuf_r+0x18>
 80096fc:	0800948d 	.word	0x0800948d

08009700 <memmove>:
 8009700:	4288      	cmp	r0, r1
 8009702:	b510      	push	{r4, lr}
 8009704:	eb01 0402 	add.w	r4, r1, r2
 8009708:	d902      	bls.n	8009710 <memmove+0x10>
 800970a:	4284      	cmp	r4, r0
 800970c:	4623      	mov	r3, r4
 800970e:	d807      	bhi.n	8009720 <memmove+0x20>
 8009710:	1e43      	subs	r3, r0, #1
 8009712:	42a1      	cmp	r1, r4
 8009714:	d008      	beq.n	8009728 <memmove+0x28>
 8009716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800971a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800971e:	e7f8      	b.n	8009712 <memmove+0x12>
 8009720:	4402      	add	r2, r0
 8009722:	4601      	mov	r1, r0
 8009724:	428a      	cmp	r2, r1
 8009726:	d100      	bne.n	800972a <memmove+0x2a>
 8009728:	bd10      	pop	{r4, pc}
 800972a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800972e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009732:	e7f7      	b.n	8009724 <memmove+0x24>

08009734 <__malloc_lock>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__malloc_lock+0x8>)
 8009736:	f7ff bf7b 	b.w	8009630 <__retarget_lock_acquire_recursive>
 800973a:	bf00      	nop
 800973c:	200029fc 	.word	0x200029fc

08009740 <__malloc_unlock>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__malloc_unlock+0x8>)
 8009742:	f7ff bf76 	b.w	8009632 <__retarget_lock_release_recursive>
 8009746:	bf00      	nop
 8009748:	200029fc 	.word	0x200029fc

0800974c <_realloc_r>:
 800974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009750:	4680      	mov	r8, r0
 8009752:	4614      	mov	r4, r2
 8009754:	460e      	mov	r6, r1
 8009756:	b921      	cbnz	r1, 8009762 <_realloc_r+0x16>
 8009758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800975c:	4611      	mov	r1, r2
 800975e:	f7ff b819 	b.w	8008794 <_malloc_r>
 8009762:	b92a      	cbnz	r2, 8009770 <_realloc_r+0x24>
 8009764:	f7fe ffaa 	bl	80086bc <_free_r>
 8009768:	4625      	mov	r5, r4
 800976a:	4628      	mov	r0, r5
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	f000 f8fa 	bl	8009968 <_malloc_usable_size_r>
 8009774:	4284      	cmp	r4, r0
 8009776:	4607      	mov	r7, r0
 8009778:	d802      	bhi.n	8009780 <_realloc_r+0x34>
 800977a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800977e:	d812      	bhi.n	80097a6 <_realloc_r+0x5a>
 8009780:	4621      	mov	r1, r4
 8009782:	4640      	mov	r0, r8
 8009784:	f7ff f806 	bl	8008794 <_malloc_r>
 8009788:	4605      	mov	r5, r0
 800978a:	2800      	cmp	r0, #0
 800978c:	d0ed      	beq.n	800976a <_realloc_r+0x1e>
 800978e:	42bc      	cmp	r4, r7
 8009790:	4622      	mov	r2, r4
 8009792:	4631      	mov	r1, r6
 8009794:	bf28      	it	cs
 8009796:	463a      	movcs	r2, r7
 8009798:	f7fe ff82 	bl	80086a0 <memcpy>
 800979c:	4631      	mov	r1, r6
 800979e:	4640      	mov	r0, r8
 80097a0:	f7fe ff8c 	bl	80086bc <_free_r>
 80097a4:	e7e1      	b.n	800976a <_realloc_r+0x1e>
 80097a6:	4635      	mov	r5, r6
 80097a8:	e7df      	b.n	800976a <_realloc_r+0x1e>

080097aa <_raise_r>:
 80097aa:	291f      	cmp	r1, #31
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4604      	mov	r4, r0
 80097b0:	460d      	mov	r5, r1
 80097b2:	d904      	bls.n	80097be <_raise_r+0x14>
 80097b4:	2316      	movs	r3, #22
 80097b6:	6003      	str	r3, [r0, #0]
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097c0:	b112      	cbz	r2, 80097c8 <_raise_r+0x1e>
 80097c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097c6:	b94b      	cbnz	r3, 80097dc <_raise_r+0x32>
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 f831 	bl	8009830 <_getpid_r>
 80097ce:	462a      	mov	r2, r5
 80097d0:	4601      	mov	r1, r0
 80097d2:	4620      	mov	r0, r4
 80097d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d8:	f000 b818 	b.w	800980c <_kill_r>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d00a      	beq.n	80097f6 <_raise_r+0x4c>
 80097e0:	1c59      	adds	r1, r3, #1
 80097e2:	d103      	bne.n	80097ec <_raise_r+0x42>
 80097e4:	2316      	movs	r3, #22
 80097e6:	6003      	str	r3, [r0, #0]
 80097e8:	2001      	movs	r0, #1
 80097ea:	e7e7      	b.n	80097bc <_raise_r+0x12>
 80097ec:	2400      	movs	r4, #0
 80097ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097f2:	4628      	mov	r0, r5
 80097f4:	4798      	blx	r3
 80097f6:	2000      	movs	r0, #0
 80097f8:	e7e0      	b.n	80097bc <_raise_r+0x12>
	...

080097fc <raise>:
 80097fc:	4b02      	ldr	r3, [pc, #8]	; (8009808 <raise+0xc>)
 80097fe:	4601      	mov	r1, r0
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	f7ff bfd2 	b.w	80097aa <_raise_r>
 8009806:	bf00      	nop
 8009808:	200000b0 	.word	0x200000b0

0800980c <_kill_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	; (800982c <_kill_r+0x20>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	4611      	mov	r1, r2
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	f7fc f81b 	bl	8005854 <_kill>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d102      	bne.n	8009828 <_kill_r+0x1c>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	b103      	cbz	r3, 8009828 <_kill_r+0x1c>
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	bd38      	pop	{r3, r4, r5, pc}
 800982a:	bf00      	nop
 800982c:	20002a00 	.word	0x20002a00

08009830 <_getpid_r>:
 8009830:	f7fc b808 	b.w	8005844 <_getpid>

08009834 <__sread>:
 8009834:	b510      	push	{r4, lr}
 8009836:	460c      	mov	r4, r1
 8009838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983c:	f000 f89c 	bl	8009978 <_read_r>
 8009840:	2800      	cmp	r0, #0
 8009842:	bfab      	itete	ge
 8009844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009846:	89a3      	ldrhlt	r3, [r4, #12]
 8009848:	181b      	addge	r3, r3, r0
 800984a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800984e:	bfac      	ite	ge
 8009850:	6563      	strge	r3, [r4, #84]	; 0x54
 8009852:	81a3      	strhlt	r3, [r4, #12]
 8009854:	bd10      	pop	{r4, pc}

08009856 <__swrite>:
 8009856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985a:	461f      	mov	r7, r3
 800985c:	898b      	ldrh	r3, [r1, #12]
 800985e:	05db      	lsls	r3, r3, #23
 8009860:	4605      	mov	r5, r0
 8009862:	460c      	mov	r4, r1
 8009864:	4616      	mov	r6, r2
 8009866:	d505      	bpl.n	8009874 <__swrite+0x1e>
 8009868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986c:	2302      	movs	r3, #2
 800986e:	2200      	movs	r2, #0
 8009870:	f000 f868 	bl	8009944 <_lseek_r>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800987a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	4632      	mov	r2, r6
 8009882:	463b      	mov	r3, r7
 8009884:	4628      	mov	r0, r5
 8009886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800988a:	f000 b817 	b.w	80098bc <_write_r>

0800988e <__sseek>:
 800988e:	b510      	push	{r4, lr}
 8009890:	460c      	mov	r4, r1
 8009892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009896:	f000 f855 	bl	8009944 <_lseek_r>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	bf15      	itete	ne
 80098a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098aa:	81a3      	strheq	r3, [r4, #12]
 80098ac:	bf18      	it	ne
 80098ae:	81a3      	strhne	r3, [r4, #12]
 80098b0:	bd10      	pop	{r4, pc}

080098b2 <__sclose>:
 80098b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b6:	f000 b813 	b.w	80098e0 <_close_r>
	...

080098bc <_write_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4d07      	ldr	r5, [pc, #28]	; (80098dc <_write_r+0x20>)
 80098c0:	4604      	mov	r4, r0
 80098c2:	4608      	mov	r0, r1
 80098c4:	4611      	mov	r1, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	602a      	str	r2, [r5, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f7fb fff9 	bl	80058c2 <_write>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_write_r+0x1e>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_write_r+0x1e>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	20002a00 	.word	0x20002a00

080098e0 <_close_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4d06      	ldr	r5, [pc, #24]	; (80098fc <_close_r+0x1c>)
 80098e4:	2300      	movs	r3, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	4608      	mov	r0, r1
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	f7fc f805 	bl	80058fa <_close>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_close_r+0x1a>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_close_r+0x1a>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20002a00 	.word	0x20002a00

08009900 <_fstat_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d07      	ldr	r5, [pc, #28]	; (8009920 <_fstat_r+0x20>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	4611      	mov	r1, r2
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	f7fc f800 	bl	8005912 <_fstat>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d102      	bne.n	800991c <_fstat_r+0x1c>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	b103      	cbz	r3, 800991c <_fstat_r+0x1c>
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	bd38      	pop	{r3, r4, r5, pc}
 800991e:	bf00      	nop
 8009920:	20002a00 	.word	0x20002a00

08009924 <_isatty_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d06      	ldr	r5, [pc, #24]	; (8009940 <_isatty_r+0x1c>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	602b      	str	r3, [r5, #0]
 8009930:	f7fb ffff 	bl	8005932 <_isatty>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d102      	bne.n	800993e <_isatty_r+0x1a>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	b103      	cbz	r3, 800993e <_isatty_r+0x1a>
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	20002a00 	.word	0x20002a00

08009944 <_lseek_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4d07      	ldr	r5, [pc, #28]	; (8009964 <_lseek_r+0x20>)
 8009948:	4604      	mov	r4, r0
 800994a:	4608      	mov	r0, r1
 800994c:	4611      	mov	r1, r2
 800994e:	2200      	movs	r2, #0
 8009950:	602a      	str	r2, [r5, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f7fb fff8 	bl	8005948 <_lseek>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_lseek_r+0x1e>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_lseek_r+0x1e>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20002a00 	.word	0x20002a00

08009968 <_malloc_usable_size_r>:
 8009968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800996c:	1f18      	subs	r0, r3, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfbc      	itt	lt
 8009972:	580b      	ldrlt	r3, [r1, r0]
 8009974:	18c0      	addlt	r0, r0, r3
 8009976:	4770      	bx	lr

08009978 <_read_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4d07      	ldr	r5, [pc, #28]	; (8009998 <_read_r+0x20>)
 800997c:	4604      	mov	r4, r0
 800997e:	4608      	mov	r0, r1
 8009980:	4611      	mov	r1, r2
 8009982:	2200      	movs	r2, #0
 8009984:	602a      	str	r2, [r5, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	f7fb ff7e 	bl	8005888 <_read>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_read_r+0x1e>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_read_r+0x1e>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20002a00 	.word	0x20002a00

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
