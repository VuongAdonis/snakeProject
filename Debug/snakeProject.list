
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b30  0800cd44  0800cd44  0001cd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016874  08016874  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08016874  08016874  00026874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801687c  0801687c  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801687c  0801687c  0002687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016880  08016880  00026880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08016884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00002a5c  20000110  20000110  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002b6c  20002b6c  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab9d  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b67  00000000  00000000  0004acdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0004f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  00050fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029151  00000000  00000000  00052488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f3e  00000000  00000000  0007b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0006  00000000  00000000  000a1517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018151d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067b4  00000000  00000000  00181570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd2c 	.word	0x0800cd2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800cd2c 	.word	0x0800cd2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <MX_ADC1_Init+0x108>)
 8000598:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <MX_ADC1_Init+0x10c>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800059c:	4b3b      	ldr	r3, [pc, #236]	; (800068c <MX_ADC1_Init+0x108>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a2:	4b3a      	ldr	r3, [pc, #232]	; (800068c <MX_ADC1_Init+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <MX_ADC1_Init+0x108>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ae:	4b37      	ldr	r3, [pc, #220]	; (800068c <MX_ADC1_Init+0x108>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <MX_ADC1_Init+0x108>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005bc:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <MX_ADC1_Init+0x108>)
 80005c4:	4a33      	ldr	r2, [pc, #204]	; (8000694 <MX_ADC1_Init+0x110>)
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <MX_ADC1_Init+0x108>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_ADC1_Init+0x108>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <MX_ADC1_Init+0x108>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_ADC1_Init+0x108>)
 80005de:	2201      	movs	r2, #1
 80005e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e2:	482a      	ldr	r0, [pc, #168]	; (800068c <MX_ADC1_Init+0x108>)
 80005e4:	f006 fdea 	bl	80071bc <HAL_ADC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f002 fcab 	bl	8002f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	4822      	ldr	r0, [pc, #136]	; (800068c <MX_ADC1_Init+0x108>)
 8000604:	f006 ff4c 	bl	80074a0 <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800060e:	f002 fc9b 	bl	8002f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000612:	2309      	movs	r3, #9
 8000614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	481b      	ldr	r0, [pc, #108]	; (800068c <MX_ADC1_Init+0x108>)
 8000620:	f006 ff3e 	bl	80074a0 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800062a:	f002 fc8d 	bl	8002f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800062e:	230a      	movs	r3, #10
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000632:	2303      	movs	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <MX_ADC1_Init+0x108>)
 800063c:	f006 ff30 	bl	80074a0 <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000646:	f002 fc7f 	bl	8002f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800064a:	230b      	movs	r3, #11
 800064c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_ADC1_Init+0x108>)
 8000658:	f006 ff22 	bl	80074a0 <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000662:	f002 fc71 	bl	8002f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000666:	230c      	movs	r3, #12
 8000668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800066a:	2305      	movs	r3, #5
 800066c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0x108>)
 8000674:	f006 ff14 	bl	80074a0 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800067e:	f002 fc63 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000012c 	.word	0x2000012c
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a3c      	ldr	r2, [pc, #240]	; (80007a8 <HAL_ADC_MspInit+0x110>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d171      	bne.n	800079e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a33      	ldr	r2, [pc, #204]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <HAL_ADC_MspInit+0x114>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800070e:	2307      	movs	r3, #7
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4823      	ldr	r0, [pc, #140]	; (80007b0 <HAL_ADC_MspInit+0x118>)
 8000722:	f007 fe71 	bl	8008408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000726:	2303      	movs	r3, #3
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	2303      	movs	r3, #3
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0x11c>)
 800073a:	f007 fe65 	bl	8008408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <HAL_ADC_MspInit+0x124>)
 8000742:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000764:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000784:	f007 fa3e 	bl	8007c04 <HAL_DMA_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800078e:	f002 fbdb 	bl	8002f48 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40012000 	.word	0x40012000
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020400 	.word	0x40020400
 80007b8:	20000174 	.word	0x20000174
 80007bc:	40026410 	.word	0x40026410

080007c0 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b095      	sub	sp, #84	; 0x54
 80007c4:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f001 fd12 	bl	80021f0 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80007cc:	4bb0      	ldr	r3, [pc, #704]	; (8000a90 <setupAdvance+0x2d0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	b298      	uxth	r0, r3
 80007d2:	4bb0      	ldr	r3, [pc, #704]	; (8000a94 <setupAdvance+0x2d4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b299      	uxth	r1, r3
 80007d8:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <setupAdvance+0x2d8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4baf      	ldr	r3, [pc, #700]	; (8000a9c <setupAdvance+0x2dc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4cae      	ldr	r4, [pc, #696]	; (8000aa0 <setupAdvance+0x2e0>)
 80007e6:	9400      	str	r4, [sp, #0]
 80007e8:	f001 ff0c 	bl	8002604 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80007ec:	2300      	movs	r3, #0
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2318      	movs	r3, #24
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	f248 4330 	movw	r3, #33840	; 0x8430
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	4aa9      	ldr	r2, [pc, #676]	; (8000aa4 <setupAdvance+0x2e4>)
 8000800:	2137      	movs	r1, #55	; 0x37
 8000802:	203c      	movs	r0, #60	; 0x3c
 8000804:	f002 f8d8 	bl	80029b8 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8000808:	4aa7      	ldr	r2, [pc, #668]	; (8000aa8 <setupAdvance+0x2e8>)
 800080a:	463b      	mov	r3, r7
 800080c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000810:	6018      	str	r0, [r3, #0]
 8000812:	3304      	adds	r3, #4
 8000814:	8019      	strh	r1, [r3, #0]
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	222c      	movs	r2, #44	; 0x2c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f00a fff9 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 8000822:	4ba2      	ldr	r3, [pc, #648]	; (8000aac <setupAdvance+0x2ec>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fbe6 	bl	8002ff8 <convert2str>
 800082c:	4603      	mov	r3, r0
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8000830:	463b      	mov	r3, r7
 8000832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000834:	4618      	mov	r0, r3
 8000836:	f00b f895 	bl	800b964 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 800083a:	463a      	mov	r2, r7
 800083c:	2300      	movs	r3, #0
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2318      	movs	r3, #24
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f248 4330 	movw	r3, #33840	; 0x8430
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084e:	2164      	movs	r1, #100	; 0x64
 8000850:	2000      	movs	r0, #0
 8000852:	f002 f915 	bl	8002a80 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8000856:	2300      	movs	r3, #0
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2318      	movs	r3, #24
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000868:	4a91      	ldr	r2, [pc, #580]	; (8000ab0 <setupAdvance+0x2f0>)
 800086a:	2196      	movs	r1, #150	; 0x96
 800086c:	2000      	movs	r0, #0
 800086e:	f002 f907 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000872:	2300      	movs	r3, #0
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2318      	movs	r3, #24
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	f248 4330 	movw	r3, #33840	; 0x8430
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000884:	4a8b      	ldr	r2, [pc, #556]	; (8000ab4 <setupAdvance+0x2f4>)
 8000886:	21d7      	movs	r1, #215	; 0xd7
 8000888:	2014      	movs	r0, #20
 800088a:	f002 f895 	bl	80029b8 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 800088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	23f0      	movs	r3, #240	; 0xf0
 8000896:	22c8      	movs	r2, #200	; 0xc8
 8000898:	21d2      	movs	r1, #210	; 0xd2
 800089a:	2096      	movs	r0, #150	; 0x96
 800089c:	f001 fdab 	bl	80023f6 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 80008a0:	4b85      	ldr	r3, [pc, #532]	; (8000ab8 <setupAdvance+0x2f8>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fba7 	bl	8002ff8 <convert2str>
 80008aa:	4603      	mov	r3, r0
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 80008ae:	4b82      	ldr	r3, [pc, #520]	; (8000ab8 <setupAdvance+0x2f8>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	2b77      	cmp	r3, #119	; 0x77
 80008b4:	d80e      	bhi.n	80008d4 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 80008b6:	2301      	movs	r3, #1
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	2318      	movs	r3, #24
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f248 4330 	movw	r3, #33840	; 0x8430
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008ca:	21d4      	movs	r1, #212	; 0xd4
 80008cc:	20a5      	movs	r0, #165	; 0xa5
 80008ce:	f002 f873 	bl	80029b8 <lcd_ShowStr>
 80008d2:	e00d      	b.n	80008f0 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 80008d4:	2301      	movs	r3, #1
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	2318      	movs	r3, #24
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	f248 4330 	movw	r3, #33840	; 0x8430
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008e8:	21d4      	movs	r1, #212	; 0xd4
 80008ea:	209d      	movs	r0, #157	; 0x9d
 80008ec:	f002 f864 	bl	80029b8 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80008f0:	4b71      	ldr	r3, [pc, #452]	; (8000ab8 <setupAdvance+0x2f8>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	2b77      	cmp	r3, #119	; 0x77
 80008f6:	d81a      	bhi.n	800092e <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80008f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	23dc      	movs	r3, #220	; 0xdc
 8000900:	22e1      	movs	r2, #225	; 0xe1
 8000902:	21dc      	movs	r1, #220	; 0xdc
 8000904:	20cd      	movs	r0, #205	; 0xcd
 8000906:	f001 fcf2 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	23d2      	movs	r3, #210	; 0xd2
 8000912:	22d7      	movs	r2, #215	; 0xd7
 8000914:	21dc      	movs	r1, #220	; 0xdc
 8000916:	20cd      	movs	r0, #205	; 0xcd
 8000918:	f001 fce9 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 800091c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	23d2      	movs	r3, #210	; 0xd2
 8000924:	22d7      	movs	r2, #215	; 0xd7
 8000926:	21dc      	movs	r1, #220	; 0xdc
 8000928:	20e1      	movs	r0, #225	; 0xe1
 800092a:	f001 fce0 	bl	80022ee <lcd_DrawLine>
	}
	if(TIMING > 30)
 800092e:	4b62      	ldr	r3, [pc, #392]	; (8000ab8 <setupAdvance+0x2f8>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2b1e      	cmp	r3, #30
 8000934:	d91a      	bls.n	800096c <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 8000936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	23e6      	movs	r3, #230	; 0xe6
 800093e:	22e1      	movs	r2, #225	; 0xe1
 8000940:	21e6      	movs	r1, #230	; 0xe6
 8000942:	20cd      	movs	r0, #205	; 0xcd
 8000944:	f001 fcd3 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 8000948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	23f0      	movs	r3, #240	; 0xf0
 8000950:	22d7      	movs	r2, #215	; 0xd7
 8000952:	21e6      	movs	r1, #230	; 0xe6
 8000954:	20cd      	movs	r0, #205	; 0xcd
 8000956:	f001 fcca 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	23f0      	movs	r3, #240	; 0xf0
 8000962:	22d7      	movs	r2, #215	; 0xd7
 8000964:	21e6      	movs	r1, #230	; 0xe6
 8000966:	20e1      	movs	r0, #225	; 0xe1
 8000968:	f001 fcc1 	bl	80022ee <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 800096c:	2300      	movs	r3, #0
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2318      	movs	r3, #24
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	f248 4330 	movw	r3, #33840	; 0x8430
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097e:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <setupAdvance+0x2fc>)
 8000980:	f240 1109 	movw	r1, #265	; 0x109
 8000984:	2014      	movs	r0, #20
 8000986:	f002 f817 	bl	80029b8 <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000994:	22c8      	movs	r2, #200	; 0xc8
 8000996:	f44f 7182 	mov.w	r1, #260	; 0x104
 800099a:	2096      	movs	r0, #150	; 0x96
 800099c:	f001 fd2b 	bl	80023f6 <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <setupAdvance+0x300>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fb27 	bl	8002ff8 <convert2str>
 80009aa:	4603      	mov	r3, r0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <setupAdvance+0x300>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d80f      	bhi.n	80009d6 <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 80009b6:	2301      	movs	r3, #1
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	2318      	movs	r3, #24
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	f248 4330 	movw	r3, #33840	; 0x8430
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ca:	f240 1109 	movw	r1, #265	; 0x109
 80009ce:	20aa      	movs	r0, #170	; 0xaa
 80009d0:	f001 fff2 	bl	80029b8 <lcd_ShowStr>
 80009d4:	e00e      	b.n	80009f4 <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 80009d6:	2301      	movs	r3, #1
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2318      	movs	r3, #24
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f248 4330 	movw	r3, #33840	; 0x8430
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ea:	f240 1109 	movw	r1, #265	; 0x109
 80009ee:	20a5      	movs	r0, #165	; 0xa5
 80009f0:	f001 ffe2 	bl	80029b8 <lcd_ShowStr>
	}

	if(WALL < 30)
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <setupAdvance+0x300>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	2b1d      	cmp	r3, #29
 80009fa:	d820      	bhi.n	8000a3e <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80009fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000a06:	22e1      	movs	r2, #225	; 0xe1
 8000a08:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a0c:	20cd      	movs	r0, #205	; 0xcd
 8000a0e:	f001 fc6e 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 8000a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a1c:	22d7      	movs	r2, #215	; 0xd7
 8000a1e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a22:	20cd      	movs	r0, #205	; 0xcd
 8000a24:	f001 fc63 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 8000a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a32:	22d7      	movs	r2, #215	; 0xd7
 8000a34:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a38:	20e1      	movs	r0, #225	; 0xe1
 8000a3a:	f001 fc58 	bl	80022ee <lcd_DrawLine>
	}
	if(WALL > 0)
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <setupAdvance+0x300>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d020      	beq.n	8000a88 <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 8000a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a50:	22e1      	movs	r2, #225	; 0xe1
 8000a52:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a56:	20cd      	movs	r0, #205	; 0xcd
 8000a58:	f001 fc49 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a66:	22d7      	movs	r2, #215	; 0xd7
 8000a68:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a6c:	20cd      	movs	r0, #205	; 0xcd
 8000a6e:	f001 fc3e 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 8000a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a7c:	22d7      	movs	r2, #215	; 0xd7
 8000a7e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a82:	20e1      	movs	r0, #225	; 0xe1
 8000a84:	f001 fc33 	bl	80022ee <lcd_DrawLine>
	}
}
 8000a88:	bf00      	nop
 8000a8a:	3744      	adds	r7, #68	; 0x44
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000074 	.word	0x20000074
 8000a94:	20000078 	.word	0x20000078
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	20000080 	.word	0x20000080
 8000aa0:	08015adc 	.word	0x08015adc
 8000aa4:	0800cd44 	.word	0x0800cd44
 8000aa8:	0800cd74 	.word	0x0800cd74
 8000aac:	20000254 	.word	0x20000254
 8000ab0:	0800cd54 	.word	0x0800cd54
 8000ab4:	0800cd64 	.word	0x0800cd64
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	0800cd6c 	.word	0x0800cd6c
 8000ac0:	20000258 	.word	0x20000258

08000ac4 <initAdvanceMode>:

void initAdvanceMode()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <initAdvanceMode+0x94>)
 8000aca:	88db      	ldrh	r3, [r3, #6]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d10e      	bne.n	8000aee <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <initAdvanceMode+0x98>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	331e      	adds	r3, #30
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <initAdvanceMode+0x98>)
 8000ada:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <initAdvanceMode+0x98>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	2b78      	cmp	r3, #120	; 0x78
 8000ae2:	d902      	bls.n	8000aea <initAdvanceMode+0x26>
		{
			TIMING = 120;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <initAdvanceMode+0x98>)
 8000ae6:	2278      	movs	r2, #120	; 0x78
 8000ae8:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000aea:	f7ff fe69 	bl	80007c0 <setupAdvance>
	}
	if(button_count[7] == 1)
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <initAdvanceMode+0x94>)
 8000af0:	89db      	ldrh	r3, [r3, #14]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d10e      	bne.n	8000b14 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <initAdvanceMode+0x98>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	3b1e      	subs	r3, #30
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <initAdvanceMode+0x98>)
 8000b00:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <initAdvanceMode+0x98>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b1d      	cmp	r3, #29
 8000b08:	d802      	bhi.n	8000b10 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <initAdvanceMode+0x98>)
 8000b0c:	221e      	movs	r2, #30
 8000b0e:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000b10:	f7ff fe56 	bl	80007c0 <setupAdvance>
	}
	if(button_count[11] == 1)
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <initAdvanceMode+0x94>)
 8000b16:	8adb      	ldrh	r3, [r3, #22]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10e      	bne.n	8000b3a <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	3305      	adds	r3, #5
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b26:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	2b1e      	cmp	r3, #30
 8000b2e:	d902      	bls.n	8000b36 <initAdvanceMode+0x72>
		{
			WALL = 30;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b32:	221e      	movs	r2, #30
 8000b34:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000b36:	f7ff fe43 	bl	80007c0 <setupAdvance>
	}
	if(button_count[15] == 1)
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <initAdvanceMode+0x94>)
 8000b3c:	8bdb      	ldrh	r3, [r3, #30]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d107      	bne.n	8000b52 <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	3b05      	subs	r3, #5
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b4c:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000b4e:	f7ff fe37 	bl	80007c0 <setupAdvance>
	}
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001d4 	.word	0x200001d4
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000258 	.word	0x20000258

08000b64 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
	for (int i= 0; i < 6; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	e007      	b.n	8000b80 <button_init+0x1c>
	{
		buttonForSnake[i]= 0;
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <button_init+0x30>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2100      	movs	r1, #0
 8000b76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i= 0; i < 6; i++)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	ddf4      	ble.n	8000b70 <button_init+0xc>
	}
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200001f4 	.word	0x200001f4

08000b98 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
//	for (int i= 0; i < 16; i++)
//	{
//		button_count[i]= 0;
//	}
	 for (int i= 0; i < 4; i++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	e1b3      	b.n	8000f0c <button_Scan+0x374>
	 {
	 	switch (i)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	f200 81ac 	bhi.w	8000f04 <button_Scan+0x36c>
 8000bac:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <button_Scan+0x1c>)
 8000bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb2:	bf00      	nop
 8000bb4:	08000bc5 	.word	0x08000bc5
 8000bb8:	08000c7d 	.word	0x08000c7d
 8000bbc:	08000d41 	.word	0x08000d41
 8000bc0:	08000e31 	.word	0x08000e31
	 	{
	 		case 0:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4894      	ldr	r0, [pc, #592]	; (8000e1c <button_Scan+0x284>)
 8000bca:	f007 fdd1 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4892      	ldr	r0, [pc, #584]	; (8000e1c <button_Scan+0x284>)
 8000bd4:	f007 fdcc 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2108      	movs	r1, #8
 8000bdc:	4890      	ldr	r0, [pc, #576]	; (8000e20 <button_Scan+0x288>)
 8000bde:	f007 fdc7 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be8:	488e      	ldr	r0, [pc, #568]	; (8000e24 <button_Scan+0x28c>)
 8000bea:	f007 fdc1 	bl	8008770 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	488c      	ldr	r0, [pc, #560]	; (8000e24 <button_Scan+0x28c>)
 8000bf4:	f007 fda4 	bl	8008740 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d106      	bne.n	8000c0c <button_Scan+0x74>
	 				button_count[0]+= 1;
 8000bfe:	4b8a      	ldr	r3, [pc, #552]	; (8000e28 <button_Scan+0x290>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b88      	ldr	r3, [pc, #544]	; (8000e28 <button_Scan+0x290>)
 8000c08:	801a      	strh	r2, [r3, #0]
	 						else
	 							button_count[3]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000c0a:	e17c      	b.n	8000f06 <button_Scan+0x36e>
	 				button_count[0]= 0;
 8000c0c:	4b86      	ldr	r3, [pc, #536]	; (8000e28 <button_Scan+0x290>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	4883      	ldr	r0, [pc, #524]	; (8000e24 <button_Scan+0x28c>)
 8000c18:	f007 fd92 	bl	8008740 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d106      	bne.n	8000c30 <button_Scan+0x98>
	 					button_count[1]+= 1;
 8000c22:	4b81      	ldr	r3, [pc, #516]	; (8000e28 <button_Scan+0x290>)
 8000c24:	885b      	ldrh	r3, [r3, #2]
 8000c26:	3301      	adds	r3, #1
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b7f      	ldr	r3, [pc, #508]	; (8000e28 <button_Scan+0x290>)
 8000c2c:	805a      	strh	r2, [r3, #2]
	 			break;
 8000c2e:	e16a      	b.n	8000f06 <button_Scan+0x36e>
	 					button_count[1]= 0;
 8000c30:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <button_Scan+0x290>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	805a      	strh	r2, [r3, #2]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4879      	ldr	r0, [pc, #484]	; (8000e20 <button_Scan+0x288>)
 8000c3a:	f007 fd81 	bl	8008740 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <button_Scan+0xba>
	 						button_count[2]+= 1;
 8000c44:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <button_Scan+0x290>)
 8000c46:	889b      	ldrh	r3, [r3, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b76      	ldr	r3, [pc, #472]	; (8000e28 <button_Scan+0x290>)
 8000c4e:	809a      	strh	r2, [r3, #4]
	 			break;
 8000c50:	e159      	b.n	8000f06 <button_Scan+0x36e>
	 						button_count[2]= 0;
 8000c52:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <button_Scan+0x290>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	809a      	strh	r2, [r3, #4]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4871      	ldr	r0, [pc, #452]	; (8000e20 <button_Scan+0x288>)
 8000c5c:	f007 fd70 	bl	8008740 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d106      	bne.n	8000c74 <button_Scan+0xdc>
	 							button_count[3]+= 1;
 8000c66:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <button_Scan+0x290>)
 8000c68:	88db      	ldrh	r3, [r3, #6]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b6e      	ldr	r3, [pc, #440]	; (8000e28 <button_Scan+0x290>)
 8000c70:	80da      	strh	r2, [r3, #6]
	 			break;
 8000c72:	e148      	b.n	8000f06 <button_Scan+0x36e>
	 							button_count[3]= 0;
 8000c74:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <button_Scan+0x290>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	80da      	strh	r2, [r3, #6]
	 			break;
 8000c7a:	e144      	b.n	8000f06 <button_Scan+0x36e>
	 		case 1:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4866      	ldr	r0, [pc, #408]	; (8000e1c <button_Scan+0x284>)
 8000c82:	f007 fd75 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2110      	movs	r1, #16
 8000c8a:	4864      	ldr	r0, [pc, #400]	; (8000e1c <button_Scan+0x284>)
 8000c8c:	f007 fd70 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2108      	movs	r1, #8
 8000c94:	4862      	ldr	r0, [pc, #392]	; (8000e20 <button_Scan+0x288>)
 8000c96:	f007 fd6b 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca0:	4860      	ldr	r0, [pc, #384]	; (8000e24 <button_Scan+0x28c>)
 8000ca2:	f007 fd65 	bl	8008770 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000caa:	485e      	ldr	r0, [pc, #376]	; (8000e24 <button_Scan+0x28c>)
 8000cac:	f007 fd48 	bl	8008740 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d106      	bne.n	8000cc4 <button_Scan+0x12c>
	 				button_count[4]+= 1;
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <button_Scan+0x290>)
 8000cb8:	891b      	ldrh	r3, [r3, #8]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <button_Scan+0x290>)
 8000cc0:	811a      	strh	r2, [r3, #8]
	 						else
	 							button_count[7]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000cc2:	e120      	b.n	8000f06 <button_Scan+0x36e>
	 				button_count[4]= 0;
 8000cc4:	4b58      	ldr	r3, [pc, #352]	; (8000e28 <button_Scan+0x290>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	811a      	strh	r2, [r3, #8]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	4855      	ldr	r0, [pc, #340]	; (8000e24 <button_Scan+0x28c>)
 8000cd0:	f007 fd36 	bl	8008740 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10c      	bne.n	8000cf4 <button_Scan+0x15c>
	 					button_count[5]+= 1;
 8000cda:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <button_Scan+0x290>)
 8000cdc:	895b      	ldrh	r3, [r3, #10]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <button_Scan+0x290>)
 8000ce4:	815a      	strh	r2, [r3, #10]
	 					buttonForSnake[0]+= 1;
 8000ce6:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <button_Scan+0x294>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <button_Scan+0x294>)
 8000cf0:	801a      	strh	r2, [r3, #0]
	 			break;
 8000cf2:	e108      	b.n	8000f06 <button_Scan+0x36e>
	 					button_count[5]= 0;
 8000cf4:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <button_Scan+0x290>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	815a      	strh	r2, [r3, #10]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4848      	ldr	r0, [pc, #288]	; (8000e20 <button_Scan+0x288>)
 8000cfe:	f007 fd1f 	bl	8008740 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d106      	bne.n	8000d16 <button_Scan+0x17e>
	 						button_count[6]+= 1;
 8000d08:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <button_Scan+0x290>)
 8000d0a:	899b      	ldrh	r3, [r3, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <button_Scan+0x290>)
 8000d12:	819a      	strh	r2, [r3, #12]
	 			break;
 8000d14:	e0f7      	b.n	8000f06 <button_Scan+0x36e>
	 						button_count[6]= 0;
 8000d16:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <button_Scan+0x290>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	819a      	strh	r2, [r3, #12]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	4840      	ldr	r0, [pc, #256]	; (8000e20 <button_Scan+0x288>)
 8000d20:	f007 fd0e 	bl	8008740 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <button_Scan+0x1a0>
	 							button_count[7]+= 1;
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <button_Scan+0x290>)
 8000d2c:	89db      	ldrh	r3, [r3, #14]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <button_Scan+0x290>)
 8000d34:	81da      	strh	r2, [r3, #14]
	 			break;
 8000d36:	e0e6      	b.n	8000f06 <button_Scan+0x36e>
	 							button_count[7]= 0;
 8000d38:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <button_Scan+0x290>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	81da      	strh	r2, [r3, #14]
	 			break;
 8000d3e:	e0e2      	b.n	8000f06 <button_Scan+0x36e>
	 		case 2:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2120      	movs	r1, #32
 8000d44:	4835      	ldr	r0, [pc, #212]	; (8000e1c <button_Scan+0x284>)
 8000d46:	f007 fd13 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4833      	ldr	r0, [pc, #204]	; (8000e1c <button_Scan+0x284>)
 8000d50:	f007 fd0e 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	4831      	ldr	r0, [pc, #196]	; (8000e20 <button_Scan+0x288>)
 8000d5a:	f007 fd09 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	482f      	ldr	r0, [pc, #188]	; (8000e24 <button_Scan+0x28c>)
 8000d66:	f007 fd03 	bl	8008770 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6e:	482d      	ldr	r0, [pc, #180]	; (8000e24 <button_Scan+0x28c>)
 8000d70:	f007 fce6 	bl	8008740 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10c      	bne.n	8000d94 <button_Scan+0x1fc>
	 			{
	 				button_count[8]+= 1;
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <button_Scan+0x290>)
 8000d7c:	8a1b      	ldrh	r3, [r3, #16]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <button_Scan+0x290>)
 8000d84:	821a      	strh	r2, [r3, #16]
	 				buttonForSnake[1]+= 1;
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <button_Scan+0x294>)
 8000d88:	885b      	ldrh	r3, [r3, #2]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <button_Scan+0x294>)
 8000d90:	805a      	strh	r2, [r3, #2]
	 						else
	 							button_count[11]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000d92:	e0b8      	b.n	8000f06 <button_Scan+0x36e>
	 				button_count[8]= 0;
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <button_Scan+0x290>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	821a      	strh	r2, [r3, #16]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4821      	ldr	r0, [pc, #132]	; (8000e24 <button_Scan+0x28c>)
 8000da0:	f007 fcce 	bl	8008740 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10c      	bne.n	8000dc4 <button_Scan+0x22c>
	 					button_count[9]+= 1;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <button_Scan+0x290>)
 8000dac:	8a5b      	ldrh	r3, [r3, #18]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <button_Scan+0x290>)
 8000db4:	825a      	strh	r2, [r3, #18]
	 					buttonForSnake[2]+= 1;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <button_Scan+0x294>)
 8000db8:	889b      	ldrh	r3, [r3, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <button_Scan+0x294>)
 8000dc0:	809a      	strh	r2, [r3, #4]
	 			break;
 8000dc2:	e0a0      	b.n	8000f06 <button_Scan+0x36e>
	 					button_count[9]= 0;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <button_Scan+0x290>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	825a      	strh	r2, [r3, #18]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <button_Scan+0x288>)
 8000dce:	f007 fcb7 	bl	8008740 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10c      	bne.n	8000df2 <button_Scan+0x25a>
	 						button_count[10]+= 1;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <button_Scan+0x290>)
 8000dda:	8a9b      	ldrh	r3, [r3, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <button_Scan+0x290>)
 8000de2:	829a      	strh	r2, [r3, #20]
	 						buttonForSnake[3]+= 1;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <button_Scan+0x294>)
 8000de6:	88db      	ldrh	r3, [r3, #6]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <button_Scan+0x294>)
 8000dee:	80da      	strh	r2, [r3, #6]
	 			break;
 8000df0:	e089      	b.n	8000f06 <button_Scan+0x36e>
	 						button_count[10]= 0;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <button_Scan+0x290>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	829a      	strh	r2, [r3, #20]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <button_Scan+0x288>)
 8000dfc:	f007 fca0 	bl	8008740 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <button_Scan+0x27c>
	 							button_count[11]+= 1;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <button_Scan+0x290>)
 8000e08:	8adb      	ldrh	r3, [r3, #22]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <button_Scan+0x290>)
 8000e10:	82da      	strh	r2, [r3, #22]
	 			break;
 8000e12:	e078      	b.n	8000f06 <button_Scan+0x36e>
	 							button_count[11]= 0;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <button_Scan+0x290>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	82da      	strh	r2, [r3, #22]
	 			break;
 8000e1a:	e074      	b.n	8000f06 <button_Scan+0x36e>
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40021800 	.word	0x40021800
 8000e28:	200001d4 	.word	0x200001d4
 8000e2c:	200001f4 	.word	0x200001f4
	 		case 3:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	483a      	ldr	r0, [pc, #232]	; (8000f20 <button_Scan+0x388>)
 8000e36:	f007 fc9b 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4838      	ldr	r0, [pc, #224]	; (8000f20 <button_Scan+0x388>)
 8000e40:	f007 fc96 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2108      	movs	r1, #8
 8000e48:	4836      	ldr	r0, [pc, #216]	; (8000f24 <button_Scan+0x38c>)
 8000e4a:	f007 fc91 	bl	8008770 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e54:	4834      	ldr	r0, [pc, #208]	; (8000f28 <button_Scan+0x390>)
 8000e56:	f007 fc8b 	bl	8008770 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5e:	4832      	ldr	r0, [pc, #200]	; (8000f28 <button_Scan+0x390>)
 8000e60:	f007 fc6e 	bl	8008740 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10c      	bne.n	8000e84 <button_Scan+0x2ec>
	 			{
	 				button_count[12]+= 1;
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <button_Scan+0x394>)
 8000e6c:	8b1b      	ldrh	r3, [r3, #24]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <button_Scan+0x394>)
 8000e74:	831a      	strh	r2, [r3, #24]
	 				buttonForSnake[4]+= 1;
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <button_Scan+0x398>)
 8000e78:	891b      	ldrh	r3, [r3, #8]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <button_Scan+0x398>)
 8000e80:	811a      	strh	r2, [r3, #8]
							else
								button_count[15]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000e82:	e040      	b.n	8000f06 <button_Scan+0x36e>
	 				button_count[12]= 0;
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <button_Scan+0x394>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	831a      	strh	r2, [r3, #24]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <button_Scan+0x390>)
 8000e90:	f007 fc56 	bl	8008740 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <button_Scan+0x31c>
	 					button_count[13]+= 1;
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <button_Scan+0x394>)
 8000e9c:	8b5b      	ldrh	r3, [r3, #26]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <button_Scan+0x394>)
 8000ea4:	835a      	strh	r2, [r3, #26]
	 					buttonForSnake[5]+= 1;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <button_Scan+0x398>)
 8000ea8:	895b      	ldrh	r3, [r3, #10]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <button_Scan+0x398>)
 8000eb0:	815a      	strh	r2, [r3, #10]
	 			break;
 8000eb2:	e028      	b.n	8000f06 <button_Scan+0x36e>
	 					button_count[13]= 0;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <button_Scan+0x394>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	835a      	strh	r2, [r3, #26]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000eba:	2140      	movs	r1, #64	; 0x40
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <button_Scan+0x38c>)
 8000ebe:	f007 fc3f 	bl	8008740 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d108      	bne.n	8000eda <button_Scan+0x342>
	 						button_count[14]+= 1;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <button_Scan+0x394>)
 8000eca:	8b9b      	ldrh	r3, [r3, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <button_Scan+0x394>)
 8000ed2:	839a      	strh	r2, [r3, #28]
							button_init();
 8000ed4:	f7ff fe46 	bl	8000b64 <button_init>
	 			break;
 8000ed8:	e015      	b.n	8000f06 <button_Scan+0x36e>
	 						button_count[14]= 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <button_Scan+0x394>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	839a      	strh	r2, [r3, #28]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	4810      	ldr	r0, [pc, #64]	; (8000f24 <button_Scan+0x38c>)
 8000ee4:	f007 fc2c 	bl	8008740 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <button_Scan+0x364>
	 							button_count[15]+= 1;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <button_Scan+0x394>)
 8000ef0:	8bdb      	ldrh	r3, [r3, #30]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <button_Scan+0x394>)
 8000ef8:	83da      	strh	r2, [r3, #30]
	 			break;
 8000efa:	e004      	b.n	8000f06 <button_Scan+0x36e>
								button_count[15]= 0;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <button_Scan+0x394>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	83da      	strh	r2, [r3, #30]
	 			break;
 8000f02:	e000      	b.n	8000f06 <button_Scan+0x36e>
	 		default:
	 			break;
 8000f04:	bf00      	nop
	 for (int i= 0; i < 4; i++)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	f77f ae48 	ble.w	8000ba4 <button_Scan+0xc>
//					break;
//				}
//		  }
//		  mask = mask >> 1;
//	  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	200001d4 	.word	0x200001d4
 8000f30:	200001f4 	.word	0x200001f4

08000f34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_DMA_Init+0x3c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <MX_DMA_Init+0x3c>)
 8000f44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_DMA_Init+0x3c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2038      	movs	r0, #56	; 0x38
 8000f5c:	f006 fe1b 	bl	8007b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f60:	2038      	movs	r0, #56	; 0x38
 8000f62:	f006 fe34 	bl	8007bce <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <showNotifyExit+0xbc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3305      	adds	r3, #5
 8000f82:	b299      	uxth	r1, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2310      	movs	r3, #16
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <showNotifyExit+0xc0>)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f001 fd72 	bl	8002a80 <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <showNotifyExit+0xbc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3314      	adds	r3, #20
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2310      	movs	r3, #16
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	4a20      	ldr	r2, [pc, #128]	; (8001038 <showNotifyExit+0xc4>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f001 fd61 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <showNotifyExit+0xc8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	b298      	uxth	r0, r3
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <showNotifyExit+0xbc>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <showNotifyExit+0xbc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	0fda      	lsrs	r2, r3, #31
 8000fd4:	4413      	add	r3, r2
 8000fd6:	105b      	asrs	r3, r3, #1
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	3b14      	subs	r3, #20
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	2301      	movs	r3, #1
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f248 4330 	movw	r3, #33840	; 0x8430
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <showNotifyExit+0xcc>)
 8000ff0:	f001 fce2 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <showNotifyExit+0xc8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <showNotifyExit+0xbc>)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <showNotifyExit+0xbc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	0fda      	lsrs	r2, r3, #31
 800100a:	4413      	add	r3, r2
 800100c:	105b      	asrs	r3, r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	3319      	adds	r3, #25
 8001012:	b299      	uxth	r1, r3
 8001014:	2301      	movs	r3, #1
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2310      	movs	r3, #16
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <showNotifyExit+0xd0>)
 8001026:	f001 fcc7 	bl	80029b8 <lcd_ShowStr>
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000004c 	.word	0x2000004c
 8001034:	0800cda8 	.word	0x0800cda8
 8001038:	0800cdb4 	.word	0x0800cdb4
 800103c:	2000003c 	.word	0x2000003c
 8001040:	0800cdc0 	.word	0x0800cdc0
 8001044:	0800cdc4 	.word	0x0800cdc4

08001048 <drawArrowExit>:

void drawArrowExit()
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b087      	sub	sp, #28
 800104c:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800104e:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <drawArrowExit+0x168>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <drawArrowExit+0x168>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	0fda      	lsrs	r2, r3, #31
 800105a:	4413      	add	r3, r2
 800105c:	105b      	asrs	r3, r3, #1
 800105e:	3b08      	subs	r3, #8
 8001060:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <drawArrowExit+0x168>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <drawArrowExit+0x168>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	0fda      	lsrs	r2, r3, #31
 800106e:	4413      	add	r3, r2
 8001070:	105b      	asrs	r3, r3, #1
 8001072:	331c      	adds	r3, #28
 8001074:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <drawArrowExit+0x16c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d003      	beq.n	8001086 <drawArrowExit+0x3e>
 800107e:	2b04      	cmp	r3, #4
 8001080:	f000 80a2 	beq.w	80011c8 <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8001084:	e135      	b.n	80012f2 <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8001086:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <drawArrowExit+0x170>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <drawArrowExit+0x174>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b298      	uxth	r0, r3
 8001096:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <drawArrowExit+0x168>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	3323      	adds	r3, #35	; 0x23
 800109e:	b299      	uxth	r1, r3
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <drawArrowExit+0x170>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b45      	ldr	r3, [pc, #276]	; (80011bc <drawArrowExit+0x174>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <drawArrowExit+0x168>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	3b05      	subs	r3, #5
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	f248 4430 	movw	r4, #33840	; 0x8430
 80010be:	9400      	str	r4, [sp, #0]
 80010c0:	f001 f8c8 	bl	8002254 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <drawArrowExit+0x170>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3308      	adds	r3, #8
 80010cc:	b298      	uxth	r0, r3
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <drawArrowExit+0x168>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <drawArrowExit+0x168>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	0fda      	lsrs	r2, r3, #31
 80010da:	4413      	add	r3, r2
 80010dc:	105b      	asrs	r3, r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3b0f      	subs	r3, #15
 80010e2:	b299      	uxth	r1, r3
 80010e4:	2301      	movs	r3, #1
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2310      	movs	r3, #16
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f248 4330 	movw	r3, #33840	; 0x8430
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010f6:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <drawArrowExit+0x178>)
 80010f8:	f001 fc5e 	bl	80029b8 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <drawArrowExit+0x170>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b29b      	uxth	r3, r3
 8001102:	3308      	adds	r3, #8
 8001104:	b298      	uxth	r0, r3
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <drawArrowExit+0x168>)
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <drawArrowExit+0x168>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	0fda      	lsrs	r2, r3, #31
 8001112:	4413      	add	r3, r2
 8001114:	105b      	asrs	r3, r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	3314      	adds	r3, #20
 800111a:	b299      	uxth	r1, r3
 800111c:	2301      	movs	r3, #1
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2310      	movs	r3, #16
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f248 4330 	movw	r3, #33840	; 0x8430
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2300      	movs	r3, #0
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <drawArrowExit+0x17c>)
 800112e:	f001 fc43 	bl	80029b8 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <drawArrowExit+0x170>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3b0f      	subs	r3, #15
 800113a:	b298      	uxth	r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	b299      	uxth	r1, r3
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <drawArrowExit+0x170>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	b29b      	uxth	r3, r3
 8001146:	3b0a      	subs	r3, #10
 8001148:	b29a      	uxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b05      	subs	r3, #5
 8001150:	b29b      	uxth	r3, r3
 8001152:	2400      	movs	r4, #0
 8001154:	9400      	str	r4, [sp, #0]
 8001156:	f001 f8ca 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <drawArrowExit+0x170>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	b29b      	uxth	r3, r3
 8001160:	3b0f      	subs	r3, #15
 8001162:	b298      	uxth	r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	b299      	uxth	r1, r3
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <drawArrowExit+0x170>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b0a      	subs	r3, #10
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b29b      	uxth	r3, r3
 8001176:	3305      	adds	r3, #5
 8001178:	b29b      	uxth	r3, r3
 800117a:	2400      	movs	r4, #0
 800117c:	9400      	str	r4, [sp, #0]
 800117e:	f001 f8b6 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <drawArrowExit+0x170>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	b29b      	uxth	r3, r3
 8001188:	3b0a      	subs	r3, #10
 800118a:	b298      	uxth	r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b05      	subs	r3, #5
 8001192:	b299      	uxth	r1, r3
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <drawArrowExit+0x170>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b0a      	subs	r3, #10
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3305      	adds	r3, #5
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	2400      	movs	r4, #0
 80011a8:	9400      	str	r4, [sp, #0]
 80011aa:	f001 f8a0 	bl	80022ee <lcd_DrawLine>
		break;
 80011ae:	e0a0      	b.n	80012f2 <drawArrowExit+0x2aa>
 80011b0:	2000004c 	.word	0x2000004c
 80011b4:	20000060 	.word	0x20000060
 80011b8:	2000003c 	.word	0x2000003c
 80011bc:	20000038 	.word	0x20000038
 80011c0:	0800cdc0 	.word	0x0800cdc0
 80011c4:	0800cdc4 	.word	0x0800cdc4
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <drawArrowExit+0x2b4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <drawArrowExit+0x2b8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	b298      	uxth	r0, r3
 80011d8:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <drawArrowExit+0x2bc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	3323      	adds	r3, #35	; 0x23
 80011e0:	b299      	uxth	r1, r3
 80011e2:	4b46      	ldr	r3, [pc, #280]	; (80012fc <drawArrowExit+0x2b4>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b45      	ldr	r3, [pc, #276]	; (8001300 <drawArrowExit+0x2b8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b44      	ldr	r3, [pc, #272]	; (8001304 <drawArrowExit+0x2bc>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3b05      	subs	r3, #5
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f248 4430 	movw	r4, #33840	; 0x8430
 8001200:	9400      	str	r4, [sp, #0]
 8001202:	f001 f827 	bl	8002254 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <drawArrowExit+0x2b4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	3308      	adds	r3, #8
 800120e:	b298      	uxth	r0, r3
 8001210:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <drawArrowExit+0x2bc>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <drawArrowExit+0x2bc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4413      	add	r3, r2
 800121a:	0fda      	lsrs	r2, r3, #31
 800121c:	4413      	add	r3, r2
 800121e:	105b      	asrs	r3, r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	3b0f      	subs	r3, #15
 8001224:	b299      	uxth	r1, r3
 8001226:	2301      	movs	r3, #1
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2310      	movs	r3, #16
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f248 4330 	movw	r3, #33840	; 0x8430
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <drawArrowExit+0x2c0>)
 8001238:	f001 fbbe 	bl	80029b8 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <drawArrowExit+0x2b4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3308      	adds	r3, #8
 8001244:	b298      	uxth	r0, r3
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <drawArrowExit+0x2bc>)
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <drawArrowExit+0x2bc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	0fda      	lsrs	r2, r3, #31
 8001252:	4413      	add	r3, r2
 8001254:	105b      	asrs	r3, r3, #1
 8001256:	b29b      	uxth	r3, r3
 8001258:	3314      	adds	r3, #20
 800125a:	b299      	uxth	r1, r3
 800125c:	2301      	movs	r3, #1
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2310      	movs	r3, #16
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	f248 4330 	movw	r3, #33840	; 0x8430
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800126e:	4a27      	ldr	r2, [pc, #156]	; (800130c <drawArrowExit+0x2c4>)
 8001270:	f001 fba2 	bl	80029b8 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <drawArrowExit+0x2b4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b0f      	subs	r3, #15
 800127c:	b298      	uxth	r0, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b299      	uxth	r1, r3
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <drawArrowExit+0x2b4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	b29b      	uxth	r3, r3
 8001288:	3b0a      	subs	r3, #10
 800128a:	b29a      	uxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b05      	subs	r3, #5
 8001292:	b29b      	uxth	r3, r3
 8001294:	2400      	movs	r4, #0
 8001296:	9400      	str	r4, [sp, #0]
 8001298:	f001 f829 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <drawArrowExit+0x2b4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b0f      	subs	r3, #15
 80012a4:	b298      	uxth	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b299      	uxth	r1, r3
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <drawArrowExit+0x2b4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b0a      	subs	r3, #10
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3305      	adds	r3, #5
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2400      	movs	r4, #0
 80012be:	9400      	str	r4, [sp, #0]
 80012c0:	f001 f815 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <drawArrowExit+0x2b4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3b0a      	subs	r3, #10
 80012cc:	b298      	uxth	r0, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	3b05      	subs	r3, #5
 80012d4:	b299      	uxth	r1, r3
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <drawArrowExit+0x2b4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	3b0a      	subs	r3, #10
 80012de:	b29a      	uxth	r2, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3305      	adds	r3, #5
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2400      	movs	r4, #0
 80012ea:	9400      	str	r4, [sp, #0]
 80012ec:	f000 ffff 	bl	80022ee <lcd_DrawLine>
		break;
 80012f0:	bf00      	nop
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000003c 	.word	0x2000003c
 8001300:	20000038 	.word	0x20000038
 8001304:	2000004c 	.word	0x2000004c
 8001308:	0800cdc0 	.word	0x0800cdc0
 800130c:	0800cdc4 	.word	0x0800cdc4

08001310 <gameExitUI>:

void gameExitUI()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	showWallnotify();
 8001314:	f000 f91e 	bl	8001554 <showWallnotify>
	showNotifyExit();
 8001318:	f7ff fe2c 	bl	8000f74 <showNotifyExit>
	drawArrowExit();
 800131c:	f7ff fe94 	bl	8001048 <drawArrowExit>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <askToExit>:

void askToExit()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <askToExit+0x74>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b0a      	cmp	r3, #10
 800132e:	d131      	bne.n	8001394 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <askToExit+0x78>)
 8001332:	88db      	ldrh	r3, [r3, #6]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10c      	bne.n	8001352 <askToExit+0x2e>
		{
			flagExit = 1;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <askToExit+0x7c>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <askToExit+0x80>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d023      	beq.n	800138e <askToExit+0x6a>
 8001346:	2b04      	cmp	r3, #4
 8001348:	d104      	bne.n	8001354 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <askToExit+0x80>)
 800134c:	2203      	movs	r2, #3
 800134e:	601a      	str	r2, [r3, #0]
				break;
 8001350:	e000      	b.n	8001354 <askToExit+0x30>
			}
		}
 8001352:	bf00      	nop
		if(button_count[7] == 1)
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <askToExit+0x78>)
 8001356:	89db      	ldrh	r3, [r3, #14]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10d      	bne.n	8001378 <askToExit+0x54>
		{
			flagExit = 1;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <askToExit+0x7c>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <askToExit+0x80>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d002      	beq.n	8001370 <askToExit+0x4c>
 800136a:	2b04      	cmp	r3, #4
 800136c:	d011      	beq.n	8001392 <askToExit+0x6e>
 800136e:	e004      	b.n	800137a <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <askToExit+0x80>)
 8001372:	2204      	movs	r2, #4
 8001374:	601a      	str	r2, [r3, #0]
				break;
 8001376:	e000      	b.n	800137a <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 8001378:	bf00      	nop
		if(flagExit == 1)
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <askToExit+0x7c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <askToExit+0x70>
		{
			gameExitUI();
 8001382:	f7ff ffc5 	bl	8001310 <gameExitUI>
			flagExit = 0;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <askToExit+0x7c>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e002      	b.n	8001394 <askToExit+0x70>
				return;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <askToExit+0x70>
				return;
 8001392:	bf00      	nop
		}
	}
}
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000268 	.word	0x20000268
 800139c:	200001d4 	.word	0x200001d4
 80013a0:	20000278 	.word	0x20000278
 80013a4:	20000060 	.word	0x20000060

080013a8 <initExit>:

void initExit()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	gameExitUI();
 80013ac:	f7ff ffb0 	bl	8001310 <gameExitUI>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <MX_FSMC_Init+0xec>)
 80013e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_FSMC_Init+0xec>)
 80013ea:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <MX_FSMC_Init+0xf0>)
 80013ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_FSMC_Init+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <MX_FSMC_Init+0xec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_FSMC_Init+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001402:	2210      	movs	r2, #16
 8001404:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <MX_FSMC_Init+0xec>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_FSMC_Init+0xec>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001428:	2200      	movs	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_FSMC_Init+0xec>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_FSMC_Init+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001446:	230f      	movs	r3, #15
 8001448:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800144a:	230f      	movs	r3, #15
 800144c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800144e:	233c      	movs	r3, #60	; 0x3c
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001456:	2310      	movs	r3, #16
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800145a:	2311      	movs	r3, #17
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001462:	2308      	movs	r3, #8
 8001464:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001466:	230f      	movs	r3, #15
 8001468:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800146a:	2309      	movs	r3, #9
 800146c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001472:	2310      	movs	r3, #16
 8001474:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001476:	2311      	movs	r3, #17
 8001478:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800147e:	463a      	mov	r2, r7
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_FSMC_Init+0xec>)
 8001488:	f008 f8b4 	bl	80095f4 <HAL_SRAM_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001492:	f001 fd59 	bl	8002f48 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001496:	bf00      	nop
 8001498:	3738      	adds	r7, #56	; 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000200 	.word	0x20000200
 80014a4:	a0000104 	.word	0xa0000104

080014a8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_FSMC_MspInit+0x88>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d131      	bne.n	8001528 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_FSMC_MspInit+0x88>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_FSMC_MspInit+0x8c>)
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_FSMC_MspInit+0x8c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6393      	str	r3, [r2, #56]	; 0x38
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_FSMC_MspInit+0x8c>)
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014e6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014f8:	230c      	movs	r3, #12
 80014fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_FSMC_MspInit+0x90>)
 8001502:	f006 ff81 	bl	8008408 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001506:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800150a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001518:	230c      	movs	r3, #12
 800151a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_FSMC_MspInit+0x94>)
 8001522:	f006 ff71 	bl	8008408 <HAL_GPIO_Init>
 8001526:	e000      	b.n	800152a <HAL_FSMC_MspInit+0x82>
    return;
 8001528:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000250 	.word	0x20000250
 8001534:	40023800 	.word	0x40023800
 8001538:	40021000 	.word	0x40021000
 800153c:	40020c00 	.word	0x40020c00

08001540 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001548:	f7ff ffae 	bl	80014a8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <showWallnotify>:
#include "button.h"
#include "picture.h"
#include "uart.h"

void showWallnotify()
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b083      	sub	sp, #12
 8001558:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <showWallnotify+0xe8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b298      	uxth	r0, r3
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <showWallnotify+0xec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b299      	uxth	r1, r3
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <showWallnotify+0xe8>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	b29c      	uxth	r4, r3
 800156c:	4b34      	ldr	r3, [pc, #208]	; (8001640 <showWallnotify+0xec>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <showWallnotify+0xf0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	f248 4230 	movw	r2, #33840	; 0x8430
 8001580:	9200      	str	r2, [sp, #0]
 8001582:	4622      	mov	r2, r4
 8001584:	f000 fe66 	bl	8002254 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <showWallnotify+0xe8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b298      	uxth	r0, r3
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <showWallnotify+0xec>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b299      	uxth	r1, r3
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <showWallnotify+0xe8>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	b29c      	uxth	r4, r3
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <showWallnotify+0xec>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <showWallnotify+0xf0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4622      	mov	r2, r4
 80015b0:	f000 fe50 	bl	8002254 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <showWallnotify+0xe8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b298      	uxth	r0, r3
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <showWallnotify+0xec>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b299      	uxth	r1, r3
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <showWallnotify+0xe8>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <showWallnotify+0xf0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <showWallnotify+0xec>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2400      	movs	r4, #0
 80015d8:	9400      	str	r4, [sp, #0]
 80015da:	f000 fe3b 	bl	8002254 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <showWallnotify+0xe8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <showWallnotify+0xf0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b298      	uxth	r0, r3
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <showWallnotify+0xec>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	b299      	uxth	r1, r3
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <showWallnotify+0xe8>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <showWallnotify+0xec>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2400      	movs	r4, #0
 8001602:	9400      	str	r4, [sp, #0]
 8001604:	f000 fe26 	bl	8002254 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <showWallnotify+0xe8>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	b298      	uxth	r0, r3
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <showWallnotify+0xec>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <showWallnotify+0xf0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b299      	uxth	r1, r3
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <showWallnotify+0xe8>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <showWallnotify+0xec>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	b29b      	uxth	r3, r3
 800162a:	2400      	movs	r4, #0
 800162c:	9400      	str	r4, [sp, #0]
 800162e:	f000 fe11 	bl	8002254 <lcd_Fill>

}
 8001632:	bf00      	nop
 8001634:	3704      	adds	r7, #4
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	2000003c 	.word	0x2000003c
 8001640:	2000004c 	.word	0x2000004c
 8001644:	20000038 	.word	0x20000038

08001648 <showNotifyOver>:

void showNotifyOver(uint16_t overVal)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	; 0x50
 800164c:	af04      	add	r7, sp, #16
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	char str1[50] = "";
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	222e      	movs	r2, #46	; 0x2e
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f00a f8d8 	bl	800b814 <memset>
	char* str2;
	switch(overVal)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d816      	bhi.n	8001698 <showNotifyOver+0x50>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <showNotifyOver+0x28>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001681 	.word	0x08001681
 8001674:	08001687 	.word	0x08001687
 8001678:	0800168d 	.word	0x0800168d
 800167c:	08001693 	.word	0x08001693
	{
	case 0:
		str2 = " HIT WALL ";
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <showNotifyOver+0xf4>)
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001684:	e008      	b.n	8001698 <showNotifyOver+0x50>
	case 1:
		str2 = " TIME OUT ";
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <showNotifyOver+0xf8>)
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800168a:	e005      	b.n	8001698 <showNotifyOver+0x50>
	case 2:
		str2 = " EAT BODY ";
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <showNotifyOver+0xfc>)
 800168e:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001690:	e002      	b.n	8001698 <showNotifyOver+0x50>
	case 3:
		str2 = " OUT OF RANGE ";
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <showNotifyOver+0x100>)
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001696:	bf00      	nop
	}
	strcat(str1, str2);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800169e:	4618      	mov	r0, r3
 80016a0:	f00a f960 	bl	800b964 <strcat>
	lcd_StrCenter(0, overWallY[0] + 10, str1, WHITE, BLACK, 16, 0);
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <showNotifyOver+0x104>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	330a      	adds	r3, #10
 80016ac:	b299      	uxth	r1, r3
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2300      	movs	r3, #0
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	2310      	movs	r3, #16
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c2:	2000      	movs	r0, #0
 80016c4:	f001 f9dc 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <showNotifyOver+0x108>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3308      	adds	r3, #8
 80016d0:	b298      	uxth	r0, r3
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <showNotifyOver+0x104>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <showNotifyOver+0x104>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	0fda      	lsrs	r2, r3, #31
 80016de:	4413      	add	r3, r2
 80016e0:	105b      	asrs	r3, r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b0f      	subs	r3, #15
 80016e6:	b299      	uxth	r1, r3
 80016e8:	2301      	movs	r3, #1
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2310      	movs	r3, #16
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f248 4330 	movw	r3, #33840	; 0x8430
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <showNotifyOver+0x10c>)
 80016fa:	f001 f95d 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <showNotifyOver+0x108>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	3308      	adds	r3, #8
 8001706:	b298      	uxth	r0, r3
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <showNotifyOver+0x104>)
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <showNotifyOver+0x104>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4413      	add	r3, r2
 8001712:	0fda      	lsrs	r2, r3, #31
 8001714:	4413      	add	r3, r2
 8001716:	105b      	asrs	r3, r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	3314      	adds	r3, #20
 800171c:	b299      	uxth	r1, r3
 800171e:	2301      	movs	r3, #1
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2310      	movs	r3, #16
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f248 4330 	movw	r3, #33840	; 0x8430
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <showNotifyOver+0x110>)
 8001730:	f001 f942 	bl	80029b8 <lcd_ShowStr>
}
 8001734:	bf00      	nop
 8001736:	3740      	adds	r7, #64	; 0x40
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800cdc8 	.word	0x0800cdc8
 8001740:	0800cdd4 	.word	0x0800cdd4
 8001744:	0800cde0 	.word	0x0800cde0
 8001748:	0800cdec 	.word	0x0800cdec
 800174c:	2000004c 	.word	0x2000004c
 8001750:	2000003c 	.word	0x2000003c
 8001754:	0800cdfc 	.word	0x0800cdfc
 8001758:	0800ce08 	.word	0x0800ce08

0800175c <eraseFull>:

void eraseFull()
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <eraseFull+0x4c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <eraseFull+0x50>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b298      	uxth	r0, r3
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <eraseFull+0x54>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	3319      	adds	r3, #25
 800177a:	b299      	uxth	r1, r3
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <eraseFull+0x4c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <eraseFull+0x50>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <eraseFull+0x54>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b05      	subs	r3, #5
 8001794:	b29b      	uxth	r3, r3
 8001796:	f248 4430 	movw	r4, #33840	; 0x8430
 800179a:	9400      	str	r4, [sp, #0]
 800179c:	f000 fd5a 	bl	8002254 <lcd_Fill>

}
 80017a0:	bf00      	nop
 80017a2:	3704      	adds	r7, #4
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	2000003c 	.word	0x2000003c
 80017ac:	20000038 	.word	0x20000038
 80017b0:	2000004c 	.word	0x2000004c

080017b4 <drawArrowOver>:

void drawArrowOver()
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 80017ba:	4b87      	ldr	r3, [pc, #540]	; (80019d8 <drawArrowOver+0x224>)
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	4b86      	ldr	r3, [pc, #536]	; (80019d8 <drawArrowOver+0x224>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	0fda      	lsrs	r2, r3, #31
 80017c6:	4413      	add	r3, r2
 80017c8:	105b      	asrs	r3, r3, #1
 80017ca:	3b08      	subs	r3, #8
 80017cc:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 80017ce:	4b82      	ldr	r3, [pc, #520]	; (80019d8 <drawArrowOver+0x224>)
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <drawArrowOver+0x224>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	0fda      	lsrs	r2, r3, #31
 80017da:	4413      	add	r3, r2
 80017dc:	105b      	asrs	r3, r3, #1
 80017de:	331c      	adds	r3, #28
 80017e0:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 80017e2:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <drawArrowOver+0x228>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <drawArrowOver+0x3c>
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d078      	beq.n	80018e0 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 80017ee:	e0ef      	b.n	80019d0 <drawArrowOver+0x21c>
		eraseFull();
 80017f0:	f7ff ffb4 	bl	800175c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 80017f4:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <drawArrowOver+0x22c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3308      	adds	r3, #8
 80017fc:	b298      	uxth	r0, r3
 80017fe:	4b76      	ldr	r3, [pc, #472]	; (80019d8 <drawArrowOver+0x224>)
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <drawArrowOver+0x224>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	0fda      	lsrs	r2, r3, #31
 800180a:	4413      	add	r3, r2
 800180c:	105b      	asrs	r3, r3, #1
 800180e:	b29b      	uxth	r3, r3
 8001810:	3b0f      	subs	r3, #15
 8001812:	b299      	uxth	r1, r3
 8001814:	2301      	movs	r3, #1
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	2310      	movs	r3, #16
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001826:	4a6f      	ldr	r2, [pc, #444]	; (80019e4 <drawArrowOver+0x230>)
 8001828:	f001 f8c6 	bl	80029b8 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 800182c:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <drawArrowOver+0x22c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	3308      	adds	r3, #8
 8001834:	b298      	uxth	r0, r3
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <drawArrowOver+0x224>)
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <drawArrowOver+0x224>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	0fda      	lsrs	r2, r3, #31
 8001842:	4413      	add	r3, r2
 8001844:	105b      	asrs	r3, r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	3314      	adds	r3, #20
 800184a:	b299      	uxth	r1, r3
 800184c:	2301      	movs	r3, #1
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2310      	movs	r3, #16
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f248 4330 	movw	r3, #33840	; 0x8430
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <drawArrowOver+0x234>)
 800185e:	f001 f8ab 	bl	80029b8 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <drawArrowOver+0x22c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b0f      	subs	r3, #15
 800186a:	b298      	uxth	r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	b299      	uxth	r1, r3
 8001870:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <drawArrowOver+0x22c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b0a      	subs	r3, #10
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b05      	subs	r3, #5
 8001880:	b29b      	uxth	r3, r3
 8001882:	2400      	movs	r4, #0
 8001884:	9400      	str	r4, [sp, #0]
 8001886:	f000 fd32 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800188a:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <drawArrowOver+0x22c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b0f      	subs	r3, #15
 8001892:	b298      	uxth	r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	b299      	uxth	r1, r3
 8001898:	4b51      	ldr	r3, [pc, #324]	; (80019e0 <drawArrowOver+0x22c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b0a      	subs	r3, #10
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3305      	adds	r3, #5
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2400      	movs	r4, #0
 80018ac:	9400      	str	r4, [sp, #0]
 80018ae:	f000 fd1e 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80018b2:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <drawArrowOver+0x22c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b0a      	subs	r3, #10
 80018ba:	b298      	uxth	r0, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b05      	subs	r3, #5
 80018c2:	b299      	uxth	r1, r3
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <drawArrowOver+0x22c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b0a      	subs	r3, #10
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3305      	adds	r3, #5
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2400      	movs	r4, #0
 80018d8:	9400      	str	r4, [sp, #0]
 80018da:	f000 fd08 	bl	80022ee <lcd_DrawLine>
		break;
 80018de:	e077      	b.n	80019d0 <drawArrowOver+0x21c>
		eraseFull();
 80018e0:	f7ff ff3c 	bl	800175c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <drawArrowOver+0x22c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3308      	adds	r3, #8
 80018ec:	b298      	uxth	r0, r3
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <drawArrowOver+0x224>)
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <drawArrowOver+0x224>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	0fda      	lsrs	r2, r3, #31
 80018fa:	4413      	add	r3, r2
 80018fc:	105b      	asrs	r3, r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b0f      	subs	r3, #15
 8001902:	b299      	uxth	r1, r3
 8001904:	2301      	movs	r3, #1
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2310      	movs	r3, #16
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <drawArrowOver+0x230>)
 8001916:	f001 f84f 	bl	80029b8 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <drawArrowOver+0x22c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	3308      	adds	r3, #8
 8001922:	b298      	uxth	r0, r3
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <drawArrowOver+0x224>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <drawArrowOver+0x224>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4413      	add	r3, r2
 800192e:	0fda      	lsrs	r2, r3, #31
 8001930:	4413      	add	r3, r2
 8001932:	105b      	asrs	r3, r3, #1
 8001934:	b29b      	uxth	r3, r3
 8001936:	3314      	adds	r3, #20
 8001938:	b299      	uxth	r1, r3
 800193a:	2301      	movs	r3, #1
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2310      	movs	r3, #16
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	f248 4330 	movw	r3, #33840	; 0x8430
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <drawArrowOver+0x234>)
 800194e:	f001 f833 	bl	80029b8 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <drawArrowOver+0x22c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b0f      	subs	r3, #15
 800195a:	b298      	uxth	r0, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b299      	uxth	r1, r3
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <drawArrowOver+0x22c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b0a      	subs	r3, #10
 8001968:	b29a      	uxth	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b05      	subs	r3, #5
 8001970:	b29b      	uxth	r3, r3
 8001972:	2400      	movs	r4, #0
 8001974:	9400      	str	r4, [sp, #0]
 8001976:	f000 fcba 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <drawArrowOver+0x22c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b0f      	subs	r3, #15
 8001982:	b298      	uxth	r0, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b299      	uxth	r1, r3
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <drawArrowOver+0x22c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b0a      	subs	r3, #10
 8001990:	b29a      	uxth	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	3305      	adds	r3, #5
 8001998:	b29b      	uxth	r3, r3
 800199a:	2400      	movs	r4, #0
 800199c:	9400      	str	r4, [sp, #0]
 800199e:	f000 fca6 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <drawArrowOver+0x22c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b0a      	subs	r3, #10
 80019aa:	b298      	uxth	r0, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b05      	subs	r3, #5
 80019b2:	b299      	uxth	r1, r3
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <drawArrowOver+0x22c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b0a      	subs	r3, #10
 80019bc:	b29a      	uxth	r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3305      	adds	r3, #5
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2400      	movs	r4, #0
 80019c8:	9400      	str	r4, [sp, #0]
 80019ca:	f000 fc90 	bl	80022ee <lcd_DrawLine>
		break;
 80019ce:	bf00      	nop
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	2000004c 	.word	0x2000004c
 80019dc:	2000025c 	.word	0x2000025c
 80019e0:	2000003c 	.word	0x2000003c
 80019e4:	0800cdfc 	.word	0x0800cdfc
 80019e8:	0800ce08 	.word	0x0800ce08

080019ec <gameOverUI>:

void gameOverUI(uint16_t overVal)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
	showWallnotify();
 80019f6:	f7ff fdad 	bl	8001554 <showWallnotify>
	showNotifyOver(overVal);
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fe23 	bl	8001648 <showNotifyOver>
	drawArrowOver();
 8001a02:	f7ff fed7 	bl	80017b4 <drawArrowOver>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <pickOver>:

void pickOver(uint16_t overVal)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	if(button_count[3] == 1)
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <pickOver+0x78>)
 8001a1c:	88db      	ldrh	r3, [r3, #6]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10c      	bne.n	8001a3c <pickOver+0x2c>
	{
		flagOver = 1;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <pickOver+0x7c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <pickOver+0x80>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d025      	beq.n	8001a7c <pickOver+0x6c>
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d104      	bne.n	8001a3e <pickOver+0x2e>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <pickOver+0x80>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
			break;
 8001a3a:	e000      	b.n	8001a3e <pickOver+0x2e>
		}
	}
 8001a3c:	bf00      	nop
	if(button_count[7] == 1)
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <pickOver+0x78>)
 8001a40:	89db      	ldrh	r3, [r3, #14]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10d      	bne.n	8001a62 <pickOver+0x52>
	{
		flagOver = 1;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <pickOver+0x7c>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <pickOver+0x80>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <pickOver+0x4a>
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d013      	beq.n	8001a80 <pickOver+0x70>
 8001a58:	e004      	b.n	8001a64 <pickOver+0x54>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <pickOver+0x80>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
			break;
 8001a60:	e000      	b.n	8001a64 <pickOver+0x54>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 8001a62:	bf00      	nop
	if(flagOver == 1)
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <pickOver+0x7c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10a      	bne.n	8001a82 <pickOver+0x72>
	{
		gameOverUI(overVal);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ffbc 	bl	80019ec <gameOverUI>
		flagOver = 0;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <pickOver+0x7c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e002      	b.n	8001a82 <pickOver+0x72>
			return;
 8001a7c:	bf00      	nop
 8001a7e:	e000      	b.n	8001a82 <pickOver+0x72>
			return;
 8001a80:	bf00      	nop
	}
}
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200001d4 	.word	0x200001d4
 8001a8c:	20000270 	.word	0x20000270
 8001a90:	2000025c 	.word	0x2000025c

08001a94 <initOverMode>:

void initOverMode(uint16_t overVal)
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b0a6      	sub	sp, #152	; 0x98
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
	TOTALSCORE = TOTALSCORE + SCORE;
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <initOverMode+0x1b8>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <initOverMode+0x1bc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <initOverMode+0x1bc>)
 8001aac:	6013      	str	r3, [r2, #0]
	TOTALTIMEPLAY = TOTALTIMEPLAY + TOTALTIME;
 8001aae:	4b69      	ldr	r3, [pc, #420]	; (8001c54 <initOverMode+0x1c0>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <initOverMode+0x1c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a67      	ldr	r2, [pc, #412]	; (8001c58 <initOverMode+0x1c4>)
 8001abc:	6013      	str	r3, [r2, #0]
	TOTALPLAY = TOTALPLAY + 1;
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <initOverMode+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <initOverMode+0x1c8>)
 8001ac6:	6013      	str	r3, [r2, #0]

	char str1[70] = "GAME_FINISH#";
 8001ac8:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <initOverMode+0x1cc>)
 8001aca:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ad2:	7023      	strb	r3, [r4, #0]
 8001ad4:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8001ad8:	2239      	movs	r2, #57	; 0x39
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f009 fe99 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 8001ae2:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <initOverMode+0x1d0>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fa86 	bl	8002ff8 <convert2str>
 8001aec:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	strcat(str1, str2);
 8001af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001af4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001af8:	4618      	mov	r0, r3
 8001afa:	f009 ff33 	bl	800b964 <strcat>
	char str3[50] = "has finished game, performance value: ";
 8001afe:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <initOverMode+0x1d4>)
 8001b00:	f107 040c 	add.w	r4, r7, #12
 8001b04:	461d      	mov	r5, r3
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b12:	6020      	str	r0, [r4, #0]
 8001b14:	3404      	adds	r4, #4
 8001b16:	8021      	strh	r1, [r4, #0]
 8001b18:	3402      	adds	r4, #2
 8001b1a:	0c0b      	lsrs	r3, r1, #16
 8001b1c:	7023      	strb	r3, [r4, #0]
 8001b1e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	f8c3 2007 	str.w	r2, [r3, #7]
	char *str4 = convert2str(SCORE);
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <initOverMode+0x1b8>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fa61 	bl	8002ff8 <convert2str>
 8001b36:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	strcat(str3, str4);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b42:	4618      	mov	r0, r3
 8001b44:	f009 ff0e 	bl	800b964 <strcat>
	strcat(str1, str3);
 8001b48:	f107 020c 	add.w	r2, r7, #12
 8001b4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f009 ff06 	bl	800b964 <strcat>
	strcat(str1, "#");
 8001b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fb37 	bl	80001d0 <strlen>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b6a:	4413      	add	r3, r2
 8001b6c:	493f      	ldr	r1, [pc, #252]	; (8001c6c <initOverMode+0x1d8>)
 8001b6e:	461a      	mov	r2, r3
 8001b70:	460b      	mov	r3, r1
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	8013      	strh	r3, [r2, #0]

	char *str5 = convert2str(TOTALSCORE/TOTALPLAY);
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <initOverMode+0x1bc>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <initOverMode+0x1c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fa37 	bl	8002ff8 <convert2str>
 8001b8a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	strcat(str1, str5);
 8001b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b92:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b96:	4618      	mov	r0, r3
 8001b98:	f009 fee4 	bl	800b964 <strcat>
	strcat(str1, "#");
 8001b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fb15 	bl	80001d0 <strlen>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bae:	4413      	add	r3, r2
 8001bb0:	492e      	ldr	r1, [pc, #184]	; (8001c6c <initOverMode+0x1d8>)
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	8013      	strh	r3, [r2, #0]

	char *str6 = convert2str(TOTALTIMEPLAY/TOTALPLAY);
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <initOverMode+0x1c4>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <initOverMode+0x1c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 fa15 	bl	8002ff8 <convert2str>
 8001bce:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	strcat(str1, str6);
 8001bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f009 fec2 	bl	800b964 <strcat>
	strcat(str1, "#");
 8001be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe faf3 	bl	80001d0 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf2:	4413      	add	r3, r2
 8001bf4:	491d      	ldr	r1, [pc, #116]	; (8001c6c <initOverMode+0x1d8>)
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8001bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fae4 	bl	80001d0 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 ffe0 	bl	8006bd8 <uart_EspSendBytes>

	statusGame = OVERMODE;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <initOverMode+0x1dc>)
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <initOverMode+0x1b8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
	TOTALTIME = 0;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <initOverMode+0x1c0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <initOverMode+0x1e0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <initOverMode+0x1e4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
	pickOver(overVal);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fee9 	bl	8001a10 <pickOver>
	OVERMESSAGE = overVal;
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <initOverMode+0x1e8>)
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	8013      	strh	r3, [r2, #0]

}
 8001c44:	bf00      	nop
 8001c46:	3798      	adds	r7, #152	; 0x98
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4c:	20000256 	.word	0x20000256
 8001c50:	20000284 	.word	0x20000284
 8001c54:	20000280 	.word	0x20000280
 8001c58:	20000288 	.word	0x20000288
 8001c5c:	2000028c 	.word	0x2000028c
 8001c60:	0800ce14 	.word	0x0800ce14
 8001c64:	20000254 	.word	0x20000254
 8001c68:	0800ce5c 	.word	0x0800ce5c
 8001c6c:	0800ce10 	.word	0x0800ce10
 8001c70:	20000268 	.word	0x20000268
 8001c74:	2000025c 	.word	0x2000025c
 8001c78:	20000270 	.word	0x20000270
 8001c7c:	2000027e 	.word	0x2000027e

08001c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	4ba3      	ldr	r3, [pc, #652]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4aa2      	ldr	r2, [pc, #648]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001ca0:	f043 0310 	orr.w	r3, r3, #16
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4ba0      	ldr	r3, [pc, #640]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	4b9c      	ldr	r3, [pc, #624]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a9b      	ldr	r2, [pc, #620]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b99      	ldr	r3, [pc, #612]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a94      	ldr	r2, [pc, #592]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	4b8e      	ldr	r3, [pc, #568]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a8d      	ldr	r2, [pc, #564]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b87      	ldr	r3, [pc, #540]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a86      	ldr	r2, [pc, #536]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b84      	ldr	r3, [pc, #528]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b80      	ldr	r3, [pc, #512]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a7f      	ldr	r2, [pc, #508]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b7d      	ldr	r3, [pc, #500]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a78      	ldr	r2, [pc, #480]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a71      	ldr	r2, [pc, #452]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <MX_GPIO_Init+0x2a8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2170      	movs	r1, #112	; 0x70
 8001d7a:	486c      	ldr	r0, [pc, #432]	; (8001f2c <MX_GPIO_Init+0x2ac>)
 8001d7c:	f006 fcf8 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	486a      	ldr	r0, [pc, #424]	; (8001f30 <MX_GPIO_Init+0x2b0>)
 8001d88:	f006 fcf2 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ESP12_BUSY_Pin|ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001d92:	4868      	ldr	r0, [pc, #416]	; (8001f34 <MX_GPIO_Init+0x2b4>)
 8001d94:	f006 fcec 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	4866      	ldr	r0, [pc, #408]	; (8001f38 <MX_GPIO_Init+0x2b8>)
 8001d9e:	f006 fce7 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da8:	4864      	ldr	r0, [pc, #400]	; (8001f3c <MX_GPIO_Init+0x2bc>)
 8001daa:	f006 fce1 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2108      	movs	r1, #8
 8001db2:	4863      	ldr	r0, [pc, #396]	; (8001f40 <MX_GPIO_Init+0x2c0>)
 8001db4:	f006 fcdc 	bl	8008770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001db8:	2370      	movs	r3, #112	; 0x70
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4857      	ldr	r0, [pc, #348]	; (8001f2c <MX_GPIO_Init+0x2ac>)
 8001dd0:	f006 fb1a 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	4850      	ldr	r0, [pc, #320]	; (8001f30 <MX_GPIO_Init+0x2b0>)
 8001dee:	f006 fb0b 	bl	8008408 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R2_Pin;
 8001df2:	2308      	movs	r3, #8
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e06:	4619      	mov	r1, r3
 8001e08:	4849      	ldr	r0, [pc, #292]	; (8001f30 <MX_GPIO_Init+0x2b0>)
 8001e0a:	f006 fafd 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R1_Pin|R0_Pin;
 8001e0e:	2330      	movs	r3, #48	; 0x30
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	4845      	ldr	r0, [pc, #276]	; (8001f3c <MX_GPIO_Init+0x2bc>)
 8001e26:	f006 faef 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = C2_Pin|C3_Pin;
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	483c      	ldr	r0, [pc, #240]	; (8001f30 <MX_GPIO_Init+0x2b0>)
 8001e3e:	f006 fae3 	bl	8008408 <HAL_GPIO_Init>

    /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin;
 8001e42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4838      	ldr	r0, [pc, #224]	; (8001f38 <MX_GPIO_Init+0x2b8>)
 8001e58:	f006 fad6 	bl	8008408 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R3_Pin;
 8001e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4830      	ldr	r0, [pc, #192]	; (8001f38 <MX_GPIO_Init+0x2b8>)
 8001e76:	f006 fac7 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin|ESP12_PWR_Pin;
 8001e7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e90:	4619      	mov	r1, r3
 8001e92:	4828      	ldr	r0, [pc, #160]	; (8001f34 <MX_GPIO_Init+0x2b4>)
 8001e94:	f006 fab8 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4824      	ldr	r0, [pc, #144]	; (8001f3c <MX_GPIO_Init+0x2bc>)
 8001eac:	f006 faac 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001eb0:	2330      	movs	r3, #48	; 0x30
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481b      	ldr	r0, [pc, #108]	; (8001f30 <MX_GPIO_Init+0x2b0>)
 8001ec4:	f006 faa0 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001ec8:	2340      	movs	r3, #64	; 0x40
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	4816      	ldr	r0, [pc, #88]	; (8001f38 <MX_GPIO_Init+0x2b8>)
 8001ee0:	f006 fa92 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <MX_GPIO_Init+0x2bc>)
 8001efe:	f006 fa83 	bl	8008408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001f02:	2308      	movs	r3, #8
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f06:	2301      	movs	r3, #1
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	4619      	mov	r1, r3
 8001f18:	4809      	ldr	r0, [pc, #36]	; (8001f40 <MX_GPIO_Init+0x2c0>)
 8001f1a:	f006 fa75 	bl	8008408 <HAL_GPIO_Init>

}
 8001f1e:	bf00      	nop
 8001f20:	3738      	adds	r7, #56	; 0x38
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020c00 	.word	0x40020c00

08001f44 <runInit>:
#include "lcd.h"
#include "button.h"


void runInit()
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af04      	add	r7, sp, #16
	lcd_ShowPicture(75, 10, 94, 120, gImage_logoTeam);
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <runInit+0x178>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2378      	movs	r3, #120	; 0x78
 8001f50:	225e      	movs	r2, #94	; 0x5e
 8001f52:	210a      	movs	r1, #10
 8001f54:	204b      	movs	r0, #75	; 0x4b
 8001f56:	f000 fb55 	bl	8002604 <lcd_ShowPicture>
	lcd_ShowStr(40, 130, "THESIS DESIGN PROJECT", WHITE, BLACK, 16, 0);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	2310      	movs	r3, #16
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	2300      	movs	r3, #0
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f6a:	4a55      	ldr	r2, [pc, #340]	; (80020c0 <runInit+0x17c>)
 8001f6c:	2182      	movs	r1, #130	; 0x82
 8001f6e:	2028      	movs	r0, #40	; 0x28
 8001f70:	f000 fd22 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(100, 160, "GVHD:", WHITE, BLACK, 16, 0);
 8001f74:	2300      	movs	r3, #0
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	2310      	movs	r3, #16
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f84:	4a4f      	ldr	r2, [pc, #316]	; (80020c4 <runInit+0x180>)
 8001f86:	21a0      	movs	r1, #160	; 0xa0
 8001f88:	2064      	movs	r0, #100	; 0x64
 8001f8a:	f000 fd15 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(70, 180, "Vu Trong Thien", WHITE, BLACK, 16, 0);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	2310      	movs	r3, #16
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2300      	movs	r3, #0
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	; (80020c8 <runInit+0x184>)
 8001fa0:	21b4      	movs	r1, #180	; 0xb4
 8001fa2:	2046      	movs	r0, #70	; 0x46
 8001fa4:	f000 fd08 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(20, 200, "FULL NAME", WHITE, BLACK, 16, 0);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	2310      	movs	r3, #16
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb8:	4a44      	ldr	r2, [pc, #272]	; (80020cc <runInit+0x188>)
 8001fba:	21c8      	movs	r1, #200	; 0xc8
 8001fbc:	2014      	movs	r0, #20
 8001fbe:	f000 fcfb 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(190, 200, "ID", WHITE, BLACK, 16, 0);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd2:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <runInit+0x18c>)
 8001fd4:	21c8      	movs	r1, #200	; 0xc8
 8001fd6:	20be      	movs	r0, #190	; 0xbe
 8001fd8:	f000 fcee 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(20, 220, "N.H.Vuong", WHITE, BLACK, 16, 0);
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <runInit+0x190>)
 8001fee:	21dc      	movs	r1, #220	; 0xdc
 8001ff0:	2014      	movs	r0, #20
 8001ff2:	f000 fce1 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(170, 220, "2112677", WHITE, BLACK, 16, 0);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002006:	4a34      	ldr	r2, [pc, #208]	; (80020d8 <runInit+0x194>)
 8002008:	21dc      	movs	r1, #220	; 0xdc
 800200a:	20aa      	movs	r0, #170	; 0xaa
 800200c:	f000 fcd4 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(20, 240, "T.V.Binh", WHITE, BLACK, 16, 0);
 8002010:	2300      	movs	r3, #0
 8002012:	9302      	str	r3, [sp, #8]
 8002014:	2310      	movs	r3, #16
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <runInit+0x198>)
 8002022:	21f0      	movs	r1, #240	; 0xf0
 8002024:	2014      	movs	r0, #20
 8002026:	f000 fcc7 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(170, 240, "2112909", WHITE, BLACK, 16, 0);
 800202a:	2300      	movs	r3, #0
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2310      	movs	r3, #16
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2300      	movs	r3, #0
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203a:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <runInit+0x19c>)
 800203c:	21f0      	movs	r1, #240	; 0xf0
 800203e:	20aa      	movs	r0, #170	; 0xaa
 8002040:	f000 fcba 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(20, 260, "D.N.An", WHITE, BLACK, 16, 0);
 8002044:	2300      	movs	r3, #0
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	2310      	movs	r3, #16
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <runInit+0x1a0>)
 8002056:	f44f 7182 	mov.w	r1, #260	; 0x104
 800205a:	2014      	movs	r0, #20
 800205c:	f000 fcac 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(170, 260, "2112726", WHITE, BLACK, 16, 0);
 8002060:	2300      	movs	r3, #0
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	2310      	movs	r3, #16
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <runInit+0x1a4>)
 8002072:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002076:	20aa      	movs	r0, #170	; 0xaa
 8002078:	f000 fc9e 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(20, 280, "B.N.T.Luan", WHITE, BLACK, 16, 0);
 800207c:	2300      	movs	r3, #0
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	2310      	movs	r3, #16
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2300      	movs	r3, #0
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800208c:	4a17      	ldr	r2, [pc, #92]	; (80020ec <runInit+0x1a8>)
 800208e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002092:	2014      	movs	r0, #20
 8002094:	f000 fc90 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(170, 280, "2111700", WHITE, BLACK, 16, 0);
 8002098:	2300      	movs	r3, #0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2310      	movs	r3, #16
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a8:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <runInit+0x1ac>)
 80020aa:	f44f 718c 	mov.w	r1, #280	; 0x118
 80020ae:	20aa      	movs	r0, #170	; 0xaa
 80020b0:	f000 fc82 	bl	80029b8 <lcd_ShowStr>

}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	080102bc 	.word	0x080102bc
 80020c0:	0800ce90 	.word	0x0800ce90
 80020c4:	0800cea8 	.word	0x0800cea8
 80020c8:	0800ceb0 	.word	0x0800ceb0
 80020cc:	0800cec0 	.word	0x0800cec0
 80020d0:	0800cecc 	.word	0x0800cecc
 80020d4:	0800ced0 	.word	0x0800ced0
 80020d8:	0800cedc 	.word	0x0800cedc
 80020dc:	0800cee4 	.word	0x0800cee4
 80020e0:	0800cef0 	.word	0x0800cef0
 80020e4:	0800cef8 	.word	0x0800cef8
 80020e8:	0800cf00 	.word	0x0800cf00
 80020ec:	0800cf08 	.word	0x0800cf08
 80020f0:	0800cf14 	.word	0x0800cf14

080020f4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <LCD_WR_REG+0x1c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	8013      	strh	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	600ffffe 	.word	0x600ffffe

08002114 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <LCD_WR_DATA+0x1c>)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	8053      	strh	r3, [r2, #2]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	600ffffe 	.word	0x600ffffe

08002134 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <LCD_RD_DATA+0x20>)
 800213c:	885b      	ldrh	r3, [r3, #2]
 800213e:	b29b      	uxth	r3, r3
 8002140:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	b29b      	uxth	r3, r3
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	600ffffe 	.word	0x600ffffe

08002158 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4623      	mov	r3, r4
 8002168:	80fb      	strh	r3, [r7, #6]
 800216a:	4603      	mov	r3, r0
 800216c:	80bb      	strh	r3, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002176:	202a      	movs	r0, #42	; 0x2a
 8002178:	f7ff ffbc 	bl	80020f4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffc6 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ffc0 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ffba 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ffb4 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80021ac:	202b      	movs	r0, #43	; 0x2b
 80021ae:	f7ff ffa1 	bl	80020f4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80021b2:	88bb      	ldrh	r3, [r7, #4]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ffab 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80021be:	88bb      	ldrh	r3, [r7, #4]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ffa5 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80021ca:	883b      	ldrh	r3, [r7, #0]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff9f 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80021d6:	883b      	ldrh	r3, [r7, #0]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff99 	bl	8002114 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80021e2:	202c      	movs	r0, #44	; 0x2c
 80021e4:	f7ff ff86 	bl	80020f4 <LCD_WR_REG>
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}

080021f0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <lcd_Clear+0x60>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <lcd_Clear+0x60>)
 8002204:	885b      	ldrh	r3, [r3, #2]
 8002206:	3b01      	subs	r3, #1
 8002208:	b29b      	uxth	r3, r3
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff ffa3 	bl	8002158 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002212:	2300      	movs	r3, #0
 8002214:	81fb      	strh	r3, [r7, #14]
 8002216:	e011      	b.n	800223c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8002218:	2300      	movs	r3, #0
 800221a:	81bb      	strh	r3, [r7, #12]
 800221c:	e006      	b.n	800222c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff77 	bl	8002114 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8002226:	89bb      	ldrh	r3, [r7, #12]
 8002228:	3301      	adds	r3, #1
 800222a:	81bb      	strh	r3, [r7, #12]
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <lcd_Clear+0x60>)
 800222e:	885b      	ldrh	r3, [r3, #2]
 8002230:	89ba      	ldrh	r2, [r7, #12]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3f3      	bcc.n	800221e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	81fb      	strh	r3, [r7, #14]
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <lcd_Clear+0x60>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	89fa      	ldrh	r2, [r7, #14]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3e8      	bcc.n	8002218 <lcd_Clear+0x28>
		}
	}
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000290 	.word	0x20000290

08002254 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	4604      	mov	r4, r0
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	80fb      	strh	r3, [r7, #6]
 8002266:	4603      	mov	r3, r0
 8002268:	80bb      	strh	r3, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]
 800226e:	4613      	mov	r3, r2
 8002270:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	883b      	ldrh	r3, [r7, #0]
 800227a:	3b01      	subs	r3, #1
 800227c:	b29b      	uxth	r3, r3
 800227e:	88b9      	ldrh	r1, [r7, #4]
 8002280:	88f8      	ldrh	r0, [r7, #6]
 8002282:	f7ff ff69 	bl	8002158 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002286:	88bb      	ldrh	r3, [r7, #4]
 8002288:	81fb      	strh	r3, [r7, #14]
 800228a:	e010      	b.n	80022ae <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	81bb      	strh	r3, [r7, #12]
 8002290:	e006      	b.n	80022a0 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002292:	8c3b      	ldrh	r3, [r7, #32]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff3d 	bl	8002114 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800229a:	89bb      	ldrh	r3, [r7, #12]
 800229c:	3301      	adds	r3, #1
 800229e:	81bb      	strh	r3, [r7, #12]
 80022a0:	89ba      	ldrh	r2, [r7, #12]
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3f4      	bcc.n	8002292 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80022a8:	89fb      	ldrh	r3, [r7, #14]
 80022aa:	3301      	adds	r3, #1
 80022ac:	81fb      	strh	r3, [r7, #14]
 80022ae:	89fa      	ldrh	r2, [r7, #14]
 80022b0:	883b      	ldrh	r3, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3ea      	bcc.n	800228c <lcd_Fill+0x38>
		}
	}
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
 80022ca:	460b      	mov	r3, r1
 80022cc:	80bb      	strh	r3, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80022d2:	88bb      	ldrh	r3, [r7, #4]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	88b9      	ldrh	r1, [r7, #4]
 80022d8:	88f8      	ldrh	r0, [r7, #6]
 80022da:	f7ff ff3d 	bl	8002158 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff17 	bl	8002114 <LCD_WR_DATA>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b08d      	sub	sp, #52	; 0x34
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4604      	mov	r4, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	461a      	mov	r2, r3
 80022fc:	4623      	mov	r3, r4
 80022fe:	80fb      	strh	r3, [r7, #6]
 8002300:	4603      	mov	r3, r0
 8002302:	80bb      	strh	r3, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800231c:	883a      	ldrh	r2, [r7, #0]
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8002328:	88bb      	ldrh	r3, [r7, #4]
 800232a:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	dd02      	ble.n	8002338 <lcd_DrawLine+0x4a>
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e00b      	b.n	8002350 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <lcd_DrawLine+0x56>
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e005      	b.n	8002350 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	425b      	negs	r3, r3
 800234e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	dd02      	ble.n	800235c <lcd_DrawLine+0x6e>
 8002356:	2301      	movs	r3, #1
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e00b      	b.n	8002374 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <lcd_DrawLine+0x7a>
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e005      	b.n	8002374 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	425b      	negs	r3, r3
 8002372:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	429a      	cmp	r2, r3
 800237a:	dd02      	ble.n	8002382 <lcd_DrawLine+0x94>
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e001      	b.n	8002386 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002386:	2300      	movs	r3, #0
 8002388:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800238a:	e02b      	b.n	80023e4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	b29b      	uxth	r3, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	b291      	uxth	r1, r2
 8002394:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff91 	bl	80022c0 <lcd_DrawPoint>
		xerr+=delta_x;
 800239e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	4413      	add	r3, r2
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80023ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dd07      	ble.n	80023c6 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80023b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dd07      	ble.n	80023de <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80023de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023e0:	3301      	adds	r3, #1
 80023e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80023e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dacf      	bge.n	800238c <lcd_DrawLine+0x9e>
		}
	}
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3734      	adds	r7, #52	; 0x34
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}

080023f6 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80023f6:	b590      	push	{r4, r7, lr}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	4604      	mov	r4, r0
 80023fe:	4608      	mov	r0, r1
 8002400:	4611      	mov	r1, r2
 8002402:	461a      	mov	r2, r3
 8002404:	4623      	mov	r3, r4
 8002406:	80fb      	strh	r3, [r7, #6]
 8002408:	4603      	mov	r3, r0
 800240a:	80bb      	strh	r3, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8002414:	88bc      	ldrh	r4, [r7, #4]
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	88b9      	ldrh	r1, [r7, #4]
 800241a:	88f8      	ldrh	r0, [r7, #6]
 800241c:	8b3b      	ldrh	r3, [r7, #24]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4623      	mov	r3, r4
 8002422:	f7ff ff64 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8002426:	883c      	ldrh	r4, [r7, #0]
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	88b9      	ldrh	r1, [r7, #4]
 800242c:	88f8      	ldrh	r0, [r7, #6]
 800242e:	8b3b      	ldrh	r3, [r7, #24]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	4623      	mov	r3, r4
 8002434:	f7ff ff5b 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8002438:	883c      	ldrh	r4, [r7, #0]
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	8839      	ldrh	r1, [r7, #0]
 800243e:	88f8      	ldrh	r0, [r7, #6]
 8002440:	8b3b      	ldrh	r3, [r7, #24]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4623      	mov	r3, r4
 8002446:	f7ff ff52 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800244a:	883c      	ldrh	r4, [r7, #0]
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	88b9      	ldrh	r1, [r7, #4]
 8002450:	8878      	ldrh	r0, [r7, #2]
 8002452:	8b3b      	ldrh	r3, [r7, #24]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4623      	mov	r3, r4
 8002458:	f7ff ff49 	bl	80022ee <lcd_DrawLine>
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4623      	mov	r3, r4
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	4603      	mov	r3, r0
 8002478:	80bb      	strh	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	70fb      	strb	r3, [r7, #3]
 800247e:	4613      	mov	r3, r2
 8002480:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002482:	2300      	movs	r3, #0
 8002484:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800248a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	fb12 f303 	smulbb	r3, r2, r3
 80024ba:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	3b20      	subs	r3, #32
 80024c0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4413      	add	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29c      	uxth	r4, r3
 80024d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	88bb      	ldrh	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29b      	uxth	r3, r3
 80024e0:	88b9      	ldrh	r1, [r7, #4]
 80024e2:	88f8      	ldrh	r0, [r7, #6]
 80024e4:	4622      	mov	r2, r4
 80024e6:	f7ff fe37 	bl	8002158 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	827b      	strh	r3, [r7, #18]
 80024ee:	e07a      	b.n	80025e6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80024f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	d028      	beq.n	800254a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80024f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d108      	bne.n	8002512 <lcd_ShowChar+0xae>
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	8a7b      	ldrh	r3, [r7, #18]
 8002504:	493c      	ldr	r1, [pc, #240]	; (80025f8 <lcd_ShowChar+0x194>)
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	440a      	add	r2, r1
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	75fb      	strb	r3, [r7, #23]
 8002510:	e01b      	b.n	800254a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002512:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002516:	2b18      	cmp	r3, #24
 8002518:	d10b      	bne.n	8002532 <lcd_ShowChar+0xce>
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	8a79      	ldrh	r1, [r7, #18]
 800251e:	4837      	ldr	r0, [pc, #220]	; (80025fc <lcd_ShowChar+0x198>)
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4403      	add	r3, r0
 800252a:	440b      	add	r3, r1
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	75fb      	strb	r3, [r7, #23]
 8002530:	e00b      	b.n	800254a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002536:	2b20      	cmp	r3, #32
 8002538:	d15a      	bne.n	80025f0 <lcd_ShowChar+0x18c>
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	8a7b      	ldrh	r3, [r7, #18]
 800253e:	4930      	ldr	r1, [pc, #192]	; (8002600 <lcd_ShowChar+0x19c>)
 8002540:	0192      	lsls	r2, r2, #6
 8002542:	440a      	add	r2, r1
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800254a:	2300      	movs	r3, #0
 800254c:	75bb      	strb	r3, [r7, #22]
 800254e:	e044      	b.n	80025da <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002550:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002554:	2b00      	cmp	r3, #0
 8002556:	d120      	bne.n	800259a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002558:	7dfa      	ldrb	r2, [r7, #23]
 800255a:	7dbb      	ldrb	r3, [r7, #22]
 800255c:	fa42 f303 	asr.w	r3, r2, r3
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <lcd_ShowChar+0x10e>
 8002568:	883b      	ldrh	r3, [r7, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fdd2 	bl	8002114 <LCD_WR_DATA>
 8002570:	e003      	b.n	800257a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fdcd 	bl	8002114 <LCD_WR_DATA>
				m++;
 800257a:	7d7b      	ldrb	r3, [r7, #21]
 800257c:	3301      	adds	r3, #1
 800257e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002580:	7d7b      	ldrb	r3, [r7, #21]
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	fbb3 f1f2 	udiv	r1, r3, r2
 8002588:	fb01 f202 	mul.w	r2, r1, r2
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11f      	bne.n	80025d4 <lcd_ShowChar+0x170>
				{
					m=0;
 8002594:	2300      	movs	r3, #0
 8002596:	757b      	strb	r3, [r7, #21]
					break;
 8002598:	e022      	b.n	80025e0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800259a:	7dfa      	ldrb	r2, [r7, #23]
 800259c:	7dbb      	ldrb	r3, [r7, #22]
 800259e:	fa42 f303 	asr.w	r3, r2, r3
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <lcd_ShowChar+0x152>
 80025aa:	883a      	ldrh	r2, [r7, #0]
 80025ac:	88b9      	ldrh	r1, [r7, #4]
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fe85 	bl	80022c0 <lcd_DrawPoint>
				x++;
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	3301      	adds	r3, #1
 80025ba:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	8a3b      	ldrh	r3, [r7, #16]
 80025c0:	1ad2      	subs	r2, r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d105      	bne.n	80025d4 <lcd_ShowChar+0x170>
				{
					x=x0;
 80025c8:	8a3b      	ldrh	r3, [r7, #16]
 80025ca:	80fb      	strh	r3, [r7, #6]
					y++;
 80025cc:	88bb      	ldrh	r3, [r7, #4]
 80025ce:	3301      	adds	r3, #1
 80025d0:	80bb      	strh	r3, [r7, #4]
					break;
 80025d2:	e005      	b.n	80025e0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80025d4:	7dbb      	ldrb	r3, [r7, #22]
 80025d6:	3301      	adds	r3, #1
 80025d8:	75bb      	strb	r3, [r7, #22]
 80025da:	7dbb      	ldrb	r3, [r7, #22]
 80025dc:	2b07      	cmp	r3, #7
 80025de:	d9b7      	bls.n	8002550 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80025e0:	8a7b      	ldrh	r3, [r7, #18]
 80025e2:	3301      	adds	r3, #1
 80025e4:	827b      	strh	r3, [r7, #18]
 80025e6:	8a7a      	ldrh	r2, [r7, #18]
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d380      	bcc.n	80024f0 <lcd_ShowChar+0x8c>
 80025ee:	e000      	b.n	80025f2 <lcd_ShowChar+0x18e>
		else return;
 80025f0:	bf00      	nop
				}
			}
		}
	}
}
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	0800d33c 	.word	0x0800d33c
 80025fc:	0800d92c 	.word	0x0800d92c
 8002600:	0800eafc 	.word	0x0800eafc

08002604 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	4604      	mov	r4, r0
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4623      	mov	r3, r4
 8002614:	80fb      	strh	r3, [r7, #6]
 8002616:	4603      	mov	r3, r0
 8002618:	80bb      	strh	r3, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	807b      	strh	r3, [r7, #2]
 800261e:	4613      	mov	r3, r2
 8002620:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4413      	add	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29c      	uxth	r4, r3
 8002632:	88ba      	ldrh	r2, [r7, #4]
 8002634:	883b      	ldrh	r3, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	88b9      	ldrh	r1, [r7, #4]
 8002640:	88f8      	ldrh	r0, [r7, #6]
 8002642:	4622      	mov	r2, r4
 8002644:	f7ff fd88 	bl	8002158 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8002648:	2300      	movs	r3, #0
 800264a:	82fb      	strh	r3, [r7, #22]
 800264c:	e027      	b.n	800269e <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 800264e:	2300      	movs	r3, #0
 8002650:	82bb      	strh	r3, [r7, #20]
 8002652:	e01d      	b.n	8002690 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	3301      	adds	r3, #1
 8002666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	b21b      	sxth	r3, r3
 800267c:	b29b      	uxth	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fd48 	bl	8002114 <LCD_WR_DATA>
			k++;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	3301      	adds	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 800268a:	8abb      	ldrh	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	82bb      	strh	r3, [r7, #20]
 8002690:	8aba      	ldrh	r2, [r7, #20]
 8002692:	883b      	ldrh	r3, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d3dd      	bcc.n	8002654 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8002698:	8afb      	ldrh	r3, [r7, #22]
 800269a:	3301      	adds	r3, #1
 800269c:	82fb      	strh	r3, [r7, #22]
 800269e:	8afa      	ldrh	r2, [r7, #22]
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d3d3      	bcc.n	800264e <lcd_ShowPicture+0x4a>
		}
	}
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd90      	pop	{r4, r7, pc}

080026b0 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <lcd_SetDir+0x44>)
 80026cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026d0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <lcd_SetDir+0x44>)
 80026d4:	22f0      	movs	r2, #240	; 0xf0
 80026d6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80026d8:	e006      	b.n	80026e8 <lcd_SetDir+0x38>
		lcddev.width=240;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <lcd_SetDir+0x44>)
 80026dc:	22f0      	movs	r2, #240	; 0xf0
 80026de:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <lcd_SetDir+0x44>)
 80026e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026e6:	805a      	strh	r2, [r3, #2]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	20000290 	.word	0x20000290

080026f8 <lcd_init>:


void lcd_init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002702:	48aa      	ldr	r0, [pc, #680]	; (80029ac <lcd_init+0x2b4>)
 8002704:	f006 f834 	bl	8008770 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800270c:	f004 fd32 	bl	8007174 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002716:	48a5      	ldr	r0, [pc, #660]	; (80029ac <lcd_init+0x2b4>)
 8002718:	f006 f82a 	bl	8008770 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800271c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002720:	f004 fd28 	bl	8007174 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002724:	2000      	movs	r0, #0
 8002726:	f7ff ffc3 	bl	80026b0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800272a:	20d3      	movs	r0, #211	; 0xd3
 800272c:	f7ff fce2 	bl	80020f4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002730:	f7ff fd00 	bl	8002134 <LCD_RD_DATA>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	4b9d      	ldr	r3, [pc, #628]	; (80029b0 <lcd_init+0x2b8>)
 800273a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800273c:	f7ff fcfa 	bl	8002134 <LCD_RD_DATA>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b9a      	ldr	r3, [pc, #616]	; (80029b0 <lcd_init+0x2b8>)
 8002746:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002748:	f7ff fcf4 	bl	8002134 <LCD_RD_DATA>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	4b97      	ldr	r3, [pc, #604]	; (80029b0 <lcd_init+0x2b8>)
 8002752:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002754:	4b96      	ldr	r3, [pc, #600]	; (80029b0 <lcd_init+0x2b8>)
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b94      	ldr	r3, [pc, #592]	; (80029b0 <lcd_init+0x2b8>)
 800275e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002760:	f7ff fce8 	bl	8002134 <LCD_RD_DATA>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b91      	ldr	r3, [pc, #580]	; (80029b0 <lcd_init+0x2b8>)
 800276a:	889b      	ldrh	r3, [r3, #4]
 800276c:	4313      	orrs	r3, r2
 800276e:	b29a      	uxth	r2, r3
 8002770:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <lcd_init+0x2b8>)
 8002772:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002774:	20cf      	movs	r0, #207	; 0xcf
 8002776:	f7ff fcbd 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff fcca 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002780:	20c1      	movs	r0, #193	; 0xc1
 8002782:	f7ff fcc7 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002786:	2030      	movs	r0, #48	; 0x30
 8002788:	f7ff fcc4 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800278c:	20ed      	movs	r0, #237	; 0xed
 800278e:	f7ff fcb1 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002792:	2064      	movs	r0, #100	; 0x64
 8002794:	f7ff fcbe 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002798:	2003      	movs	r0, #3
 800279a:	f7ff fcbb 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800279e:	2012      	movs	r0, #18
 80027a0:	f7ff fcb8 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80027a4:	2081      	movs	r0, #129	; 0x81
 80027a6:	f7ff fcb5 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80027aa:	20e8      	movs	r0, #232	; 0xe8
 80027ac:	f7ff fca2 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80027b0:	2085      	movs	r0, #133	; 0x85
 80027b2:	f7ff fcaf 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80027b6:	2010      	movs	r0, #16
 80027b8:	f7ff fcac 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80027bc:	207a      	movs	r0, #122	; 0x7a
 80027be:	f7ff fca9 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80027c2:	20cb      	movs	r0, #203	; 0xcb
 80027c4:	f7ff fc96 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80027c8:	2039      	movs	r0, #57	; 0x39
 80027ca:	f7ff fca3 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80027ce:	202c      	movs	r0, #44	; 0x2c
 80027d0:	f7ff fca0 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff fc9d 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80027da:	2034      	movs	r0, #52	; 0x34
 80027dc:	f7ff fc9a 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7ff fc97 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80027e6:	20f7      	movs	r0, #247	; 0xf7
 80027e8:	f7ff fc84 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80027ec:	2020      	movs	r0, #32
 80027ee:	f7ff fc91 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80027f2:	20ea      	movs	r0, #234	; 0xea
 80027f4:	f7ff fc7e 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fc8b 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7ff fc88 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002804:	20c0      	movs	r0, #192	; 0xc0
 8002806:	f7ff fc75 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800280a:	201b      	movs	r0, #27
 800280c:	f7ff fc82 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002810:	20c1      	movs	r0, #193	; 0xc1
 8002812:	f7ff fc6f 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002816:	2001      	movs	r0, #1
 8002818:	f7ff fc7c 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800281c:	20c5      	movs	r0, #197	; 0xc5
 800281e:	f7ff fc69 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002822:	2030      	movs	r0, #48	; 0x30
 8002824:	f7ff fc76 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002828:	2030      	movs	r0, #48	; 0x30
 800282a:	f7ff fc73 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800282e:	20c7      	movs	r0, #199	; 0xc7
 8002830:	f7ff fc60 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002834:	20b7      	movs	r0, #183	; 0xb7
 8002836:	f7ff fc6d 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800283a:	2036      	movs	r0, #54	; 0x36
 800283c:	f7ff fc5a 	bl	80020f4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002840:	2008      	movs	r0, #8
 8002842:	f7ff fc67 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002846:	203a      	movs	r0, #58	; 0x3a
 8002848:	f7ff fc54 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800284c:	2055      	movs	r0, #85	; 0x55
 800284e:	f7ff fc61 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002852:	20b1      	movs	r0, #177	; 0xb1
 8002854:	f7ff fc4e 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fc5b 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800285e:	201a      	movs	r0, #26
 8002860:	f7ff fc58 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002864:	20b6      	movs	r0, #182	; 0xb6
 8002866:	f7ff fc45 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800286a:	200a      	movs	r0, #10
 800286c:	f7ff fc52 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002870:	20a2      	movs	r0, #162	; 0xa2
 8002872:	f7ff fc4f 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002876:	20f2      	movs	r0, #242	; 0xf2
 8002878:	f7ff fc3c 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7ff fc49 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002882:	2026      	movs	r0, #38	; 0x26
 8002884:	f7ff fc36 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002888:	2001      	movs	r0, #1
 800288a:	f7ff fc43 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800288e:	20e0      	movs	r0, #224	; 0xe0
 8002890:	f7ff fc30 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002894:	200f      	movs	r0, #15
 8002896:	f7ff fc3d 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800289a:	202a      	movs	r0, #42	; 0x2a
 800289c:	f7ff fc3a 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80028a0:	2028      	movs	r0, #40	; 0x28
 80028a2:	f7ff fc37 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80028a6:	2008      	movs	r0, #8
 80028a8:	f7ff fc34 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80028ac:	200e      	movs	r0, #14
 80028ae:	f7ff fc31 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80028b2:	2008      	movs	r0, #8
 80028b4:	f7ff fc2e 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80028b8:	2054      	movs	r0, #84	; 0x54
 80028ba:	f7ff fc2b 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80028be:	20a9      	movs	r0, #169	; 0xa9
 80028c0:	f7ff fc28 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80028c4:	2043      	movs	r0, #67	; 0x43
 80028c6:	f7ff fc25 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80028ca:	200a      	movs	r0, #10
 80028cc:	f7ff fc22 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80028d0:	200f      	movs	r0, #15
 80028d2:	f7ff fc1f 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7ff fc1c 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7ff fc19 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7ff fc16 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff fc13 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80028ee:	20e1      	movs	r0, #225	; 0xe1
 80028f0:	f7ff fc00 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7ff fc0d 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80028fa:	2015      	movs	r0, #21
 80028fc:	f7ff fc0a 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002900:	2017      	movs	r0, #23
 8002902:	f7ff fc07 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002906:	2007      	movs	r0, #7
 8002908:	f7ff fc04 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800290c:	2011      	movs	r0, #17
 800290e:	f7ff fc01 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002912:	2006      	movs	r0, #6
 8002914:	f7ff fbfe 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002918:	202b      	movs	r0, #43	; 0x2b
 800291a:	f7ff fbfb 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800291e:	2056      	movs	r0, #86	; 0x56
 8002920:	f7ff fbf8 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002924:	203c      	movs	r0, #60	; 0x3c
 8002926:	f7ff fbf5 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800292a:	2005      	movs	r0, #5
 800292c:	f7ff fbf2 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002930:	2010      	movs	r0, #16
 8002932:	f7ff fbef 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002936:	200f      	movs	r0, #15
 8002938:	f7ff fbec 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800293c:	203f      	movs	r0, #63	; 0x3f
 800293e:	f7ff fbe9 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002942:	203f      	movs	r0, #63	; 0x3f
 8002944:	f7ff fbe6 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002948:	200f      	movs	r0, #15
 800294a:	f7ff fbe3 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800294e:	202b      	movs	r0, #43	; 0x2b
 8002950:	f7ff fbd0 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff fbdd 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff fbda 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff fbd7 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002966:	203f      	movs	r0, #63	; 0x3f
 8002968:	f7ff fbd4 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800296c:	202a      	movs	r0, #42	; 0x2a
 800296e:	f7ff fbc1 	bl	80020f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7ff fbce 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fbcb 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff fbc8 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002984:	20ef      	movs	r0, #239	; 0xef
 8002986:	f7ff fbc5 	bl	8002114 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800298a:	2011      	movs	r0, #17
 800298c:	f7ff fbb2 	bl	80020f4 <LCD_WR_REG>
	HAL_Delay(120);
 8002990:	2078      	movs	r0, #120	; 0x78
 8002992:	f004 fbef 	bl	8007174 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002996:	2029      	movs	r0, #41	; 0x29
 8002998:	f7ff fbac 	bl	80020f4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029a2:	4804      	ldr	r0, [pc, #16]	; (80029b4 <lcd_init+0x2bc>)
 80029a4:	f005 fee4 	bl	8008770 <HAL_GPIO_WritePin>
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40020800 	.word	0x40020800
 80029b0:	20000290 	.word	0x20000290
 80029b4:	40020000 	.word	0x40020000

080029b8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af04      	add	r7, sp, #16
 80029be:	60ba      	str	r2, [r7, #8]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	81fb      	strh	r3, [r7, #14]
 80029c6:	460b      	mov	r3, r1
 80029c8:	81bb      	strh	r3, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80029d6:	e048      	b.n	8002a6a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d145      	bne.n	8002a6a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80029de:	89fa      	ldrh	r2, [r7, #14]
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <lcd_ShowStr+0xc4>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	1acb      	subs	r3, r1, r3
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dc3f      	bgt.n	8002a74 <lcd_ShowStr+0xbc>
 80029f4:	89ba      	ldrh	r2, [r7, #12]
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <lcd_ShowStr+0xc4>)
 80029f8:	885b      	ldrh	r3, [r3, #2]
 80029fa:	4619      	mov	r1, r3
 80029fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a00:	1acb      	subs	r3, r1, r3
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dc36      	bgt.n	8002a74 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b80      	cmp	r3, #128	; 0x80
 8002a0c:	d902      	bls.n	8002a14 <lcd_ShowStr+0x5c>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
 8002a12:	e02a      	b.n	8002a6a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b0d      	cmp	r3, #13
 8002a1a:	d10b      	bne.n	8002a34 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002a28:	8abb      	ldrh	r3, [r7, #20]
 8002a2a:	81fb      	strh	r3, [r7, #14]
					str++;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	e017      	b.n	8002a64 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	88fc      	ldrh	r4, [r7, #6]
 8002a3a:	89b9      	ldrh	r1, [r7, #12]
 8002a3c:	89f8      	ldrh	r0, [r7, #14]
 8002a3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7ff fd08 	bl	8002464 <lcd_ShowChar>
					x+=sizey/2;
 8002a54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	4413      	add	r3, r2
 8002a62:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1b2      	bne.n	80029d8 <lcd_ShowStr+0x20>
 8002a72:	e000      	b.n	8002a76 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002a74:	bf00      	nop
			}
		}
	}
}
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	20000290 	.word	0x20000290

08002a80 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	60ba      	str	r2, [r7, #8]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	81fb      	strh	r3, [r7, #14]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	81bb      	strh	r3, [r7, #12]
 8002a92:	4613      	mov	r3, r2
 8002a94:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f7fd fb9a 	bl	80001d0 <strlen>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <lcd_StrCenter+0x60>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	8afb      	ldrh	r3, [r7, #22]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	0fda      	lsrs	r2, r3, #31
 8002aae:	4413      	add	r3, r2
 8002ab0:	105b      	asrs	r3, r3, #1
 8002ab2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002ab4:	89fa      	ldrh	r2, [r7, #14]
 8002ab6:	8abb      	ldrh	r3, [r7, #20]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b298      	uxth	r0, r3
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	89b9      	ldrh	r1, [r7, #12]
 8002ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	8c3b      	ldrh	r3, [r7, #32]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f7ff ff70 	bl	80029b8 <lcd_ShowStr>
}
 8002ad8:	bf00      	nop
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000290 	.word	0x20000290

08002ae4 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2140      	movs	r1, #64	; 0x40
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <led7_init+0x14>)
 8002aee:	f005 fe3f 	bl	8008770 <HAL_GPIO_WritePin>
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021800 	.word	0x40021800

08002afc <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002b00:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <led7_Scan+0x104>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <led7_Scan+0x104>)
 8002b0a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <led7_Scan+0x108>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <led7_Scan+0x10c>)
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <led7_Scan+0x104>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b21b      	sxth	r3, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <led7_Scan+0x104>)
 8002b28:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <led7_Scan+0x108>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d846      	bhi.n	8002bc0 <led7_Scan+0xc4>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <led7_Scan+0x3c>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b67 	.word	0x08002b67
 8002b40:	08002b85 	.word	0x08002b85
 8002b44:	08002ba3 	.word	0x08002ba3
	case 0:
		spi_buffer |= 0x00b0;
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <led7_Scan+0x104>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <led7_Scan+0x104>)
 8002b54:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <led7_Scan+0x104>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <led7_Scan+0x104>)
 8002b62:	801a      	strh	r2, [r3, #0]
		break;
 8002b64:	e02d      	b.n	8002bc2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <led7_Scan+0x104>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <led7_Scan+0x104>)
 8002b72:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002b74:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <led7_Scan+0x104>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f023 0320 	bic.w	r3, r3, #32
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <led7_Scan+0x104>)
 8002b80:	801a      	strh	r2, [r3, #0]
		break;
 8002b82:	e01e      	b.n	8002bc2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <led7_Scan+0x104>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <led7_Scan+0x104>)
 8002b90:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <led7_Scan+0x104>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	f023 0310 	bic.w	r3, r3, #16
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <led7_Scan+0x104>)
 8002b9e:	801a      	strh	r2, [r3, #0]
		break;
 8002ba0:	e00f      	b.n	8002bc2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <led7_Scan+0x104>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <led7_Scan+0x104>)
 8002bae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <led7_Scan+0x104>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <led7_Scan+0x104>)
 8002bbc:	801a      	strh	r2, [r3, #0]
		break;
 8002bbe:	e000      	b.n	8002bc2 <led7_Scan+0xc6>
	default:
		break;
 8002bc0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <led7_Scan+0x108>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	425a      	negs	r2, r3
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	bf58      	it	pl
 8002bd4:	4253      	negpl	r3, r2
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <led7_Scan+0x108>)
 8002bda:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	480a      	ldr	r0, [pc, #40]	; (8002c0c <led7_Scan+0x110>)
 8002be2:	f005 fdc5 	bl	8008770 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002be6:	2301      	movs	r3, #1
 8002be8:	2202      	movs	r2, #2
 8002bea:	4905      	ldr	r1, [pc, #20]	; (8002c00 <led7_Scan+0x104>)
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <led7_Scan+0x114>)
 8002bee:	f006 fafa 	bl	80091e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <led7_Scan+0x110>)
 8002bf8:	f005 fdba 	bl	8008770 <HAL_GPIO_WritePin>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000092 	.word	0x20000092
 8002c04:	20000296 	.word	0x20000296
 8002c08:	20000084 	.word	0x20000084
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	20002a24 	.word	0x20002a24

08002c14 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0e      	blt.n	8002c46 <led7_SetDigit+0x32>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b09      	cmp	r3, #9
 8002c2c:	dc0b      	bgt.n	8002c46 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <led7_SetDigit+0x40>)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	b2d9      	uxtb	r1, r3
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <led7_SetDigit+0x44>)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4413      	add	r3, r2
 8002c42:	460a      	mov	r2, r1
 8002c44:	701a      	strb	r2, [r3, #0]
	}
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000088 	.word	0x20000088
 8002c58:	20000084 	.word	0x20000084

08002c5c <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <led7_SetColon+0x20>
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <led7_SetColon+0x3c>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	f023 0308 	bic.w	r3, r3, #8
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <led7_SetColon+0x3c>)
 8002c78:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002c7a:	e006      	b.n	8002c8a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <led7_SetColon+0x3c>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <led7_SetColon+0x3c>)
 8002c88:	801a      	strh	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000092 	.word	0x20000092

08002c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca0:	f004 f9f6 	bl	8007090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca4:	f000 f8b6 	bl	8002e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ca8:	f7fe ffea 	bl	8001c80 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cac:	f7fe f942 	bl	8000f34 <MX_DMA_Init>
  MX_TIM2_Init();
 8002cb0:	f003 fcea 	bl	8006688 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002cb4:	f002 fa44 	bl	8005140 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002cb8:	f7fe fb7c 	bl	80013b4 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8002cbc:	f004 f944 	bl	8006f48 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002cc0:	f7fd fc60 	bl	8000584 <MX_ADC1_Init>
  MX_TIM13_Init();
 8002cc4:	f003 fd2c 	bl	8006720 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002cc8:	f000 f90e 	bl	8002ee8 <system_init>
  lcd_Clear(BLACK);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7ff fa8f 	bl	80021f0 <lcd_Clear>
//  test_lcd();
  runInit();
 8002cd2:	f7ff f937 	bl	8001f44 <runInit>
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {

    // lcd_Clear(WHITE);
	   if (flagForButton)
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <main+0x148>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <main+0x50>
	   {
		   flagForButton= 0;
 8002cde:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <main+0x148>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 8002ce4:	f7fd ff58 	bl	8000b98 <button_Scan>
//		   test_Esp();
//		  lightProcess();
		   beginStartGame();
 8002ce8:	f002 fdf2 	bl	80058d0 <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002cec:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <main+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d007      	beq.n	8002d04 <main+0x68>
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <main+0x14c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d003      	beq.n	8002d04 <main+0x68>
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <main+0x14c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d126      	bne.n	8002d52 <main+0xb6>
	   {
		   generateFruit();
 8002d04:	f001 fc70 	bl	80045e8 <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <main+0x14c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d108      	bne.n	8002d22 <main+0x86>
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <main+0x150>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <main+0x86>
		   {
			   generateWall();
 8002d18:	f001 fd8a 	bl	8004830 <generateWall>
			   flagForGenerateWall = 0;
 8002d1c:	4b33      	ldr	r3, [pc, #204]	; (8002dec <main+0x150>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 8002d22:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <main+0x154>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <main+0x98>
		   {
			   flagForSnakeRun= 0;
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <main+0x154>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 8002d30:	f001 fb1c 	bl	800436c <snakeRun>
		   }
		   if(flagForUart == 1)
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <main+0x158>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d110      	bne.n	8002d5e <main+0xc2>
		   {
//			   uartSendPlay();
			   TOTALTIME = TOTALTIME + 1;
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <main+0x15c>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <main+0x15c>)
 8002d46:	801a      	strh	r2, [r3, #0]
			   setTimerUart(1000);
 8002d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d4c:	f002 f8e4 	bl	8004f18 <setTimerUart>
		   if(flagForUart == 1)
 8002d50:	e005      	b.n	8002d5e <main+0xc2>
		   }
	  }else{
		  setTimerUart(0);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f002 f8e0 	bl	8004f18 <setTimerUart>
		  flagForSnakeRun = 0;
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <main+0x154>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <main+0x14c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b07      	cmp	r3, #7
 8002d64:	d104      	bne.n	8002d70 <main+0xd4>
	  {
		  pickOver(OVERMESSAGE);
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <main+0x160>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fe50 	bl	8001a10 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <main+0x14c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d101      	bne.n	8002d7c <main+0xe0>
	  {
		  pickStop();
 8002d78:	f003 fb02 	bl	8006380 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <main+0x14c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d101      	bne.n	8002d88 <main+0xec>
	  {
		  askToExit();
 8002d84:	f7fe face 	bl	8001324 <askToExit>
	  }
	  if(flagForTiming == 1)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <main+0x164>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10b      	bne.n	8002da8 <main+0x10c>
	  {
		  flagForTiming = 0;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <main+0x164>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <main+0x14c>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
		  initOverMode(1);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7fe fe79 	bl	8001a94 <initOverMode>
		  arrowMode = NORMALMODE;
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <main+0x168>)
 8002da4:	2203      	movs	r2, #3
 8002da6:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <main+0x16c>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10b      	bne.n	8002dc8 <main+0x12c>
	  {
		  TIMING--;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <main+0x170>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <main+0x170>)
 8002dba:	801a      	strh	r2, [r3, #0]
		  showTiming();
 8002dbc:	f003 fe8a 	bl	8006ad4 <showTiming>
		  setTimerDeTime(1000);
 8002dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc4:	f002 f870 	bl	8004ea8 <setTimerDeTime>
	  }
	  if(flagForSendSensor == 1)
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <main+0x174>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d182      	bne.n	8002cd6 <main+0x3a>
	  {
		  sensor_Read();
 8002dd0:	f000 f8ce 	bl	8002f70 <sensor_Read>
		  uartSendSensor();
 8002dd4:	f004 f80c 	bl	8006df0 <uartSendSensor>
		  setTimerSendSensor(10000);
 8002dd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002ddc:	f002 f8d4 	bl	8004f88 <setTimerSendSensor>
	   if (flagForButton)
 8002de0:	e779      	b.n	8002cd6 <main+0x3a>
 8002de2:	bf00      	nop
 8002de4:	200029f4 	.word	0x200029f4
 8002de8:	20000268 	.word	0x20000268
 8002dec:	20002a12 	.word	0x20002a12
 8002df0:	200029fa 	.word	0x200029fa
 8002df4:	20002a18 	.word	0x20002a18
 8002df8:	20000280 	.word	0x20000280
 8002dfc:	2000027e 	.word	0x2000027e
 8002e00:	20002a00 	.word	0x20002a00
 8002e04:	20000014 	.word	0x20000014
 8002e08:	20002a0c 	.word	0x20002a0c
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20002a1e 	.word	0x20002a1e

08002e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b094      	sub	sp, #80	; 0x50
 8002e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1a:	f107 0320 	add.w	r3, r7, #32
 8002e1e:	2230      	movs	r2, #48	; 0x30
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f008 fcf6 	bl	800b814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e70:	2302      	movs	r3, #2
 8002e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e74:	2301      	movs	r3, #1
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e78:	2310      	movs	r3, #16
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e80:	2300      	movs	r3, #0
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e84:	2308      	movs	r3, #8
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e88:	23a8      	movs	r3, #168	; 0xa8
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e90:	2304      	movs	r3, #4
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fc83 	bl	80087a4 <HAL_RCC_OscConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ea4:	f000 f850 	bl	8002f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eac:	2302      	movs	r3, #2
 8002eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002eb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002eba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ebe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	2105      	movs	r1, #5
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 fee4 	bl	8008c94 <HAL_RCC_ClockConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ed2:	f000 f839 	bl	8002f48 <Error_Handler>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3750      	adds	r7, #80	; 0x50
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2120      	movs	r1, #32
 8002ef0:	4814      	ldr	r0, [pc, #80]	; (8002f44 <system_init+0x5c>)
 8002ef2:	f005 fc3d 	bl	8008770 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	4812      	ldr	r0, [pc, #72]	; (8002f44 <system_init+0x5c>)
 8002efc:	f005 fc38 	bl	8008770 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2110      	movs	r1, #16
 8002f04:	480f      	ldr	r0, [pc, #60]	; (8002f44 <system_init+0x5c>)
 8002f06:	f005 fc33 	bl	8008770 <HAL_GPIO_WritePin>
	  timer_init();
 8002f0a:	f001 ff87 	bl	8004e1c <timer_init>
	  led7_init();
 8002f0e:	f7ff fde9 	bl	8002ae4 <led7_init>
	  button_init();
 8002f12:	f7fd fe27 	bl	8000b64 <button_init>
	  lcd_init();
 8002f16:	f7ff fbef 	bl	80026f8 <lcd_init>
	  uart_init_esp();
 8002f1a:	f003 fe47 	bl	8006bac <uart_init_esp>
	  sensor_init();
 8002f1e:	f000 f819 	bl	8002f54 <sensor_init>
	  setTimerButton(50);
 8002f22:	2032      	movs	r0, #50	; 0x32
 8002f24:	f002 f814 	bl	8004f50 <setTimerButton>
	  setTimerSnakeRun(250);
 8002f28:	20fa      	movs	r0, #250	; 0xfa
 8002f2a:	f001 ff81 	bl	8004e30 <setTimerSnakeRun>
	  setTimerGenerateWall(4000);
 8002f2e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002f32:	f001 ffd5 	bl	8004ee0 <setTimerGenerateWall>
	  setTimerSendSensor(10000);
 8002f36:	f242 7010 	movw	r0, #10000	; 0x2710
 8002f3a:	f002 f825 	bl	8004f88 <setTimerSendSensor>
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000

08002f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <Error_Handler+0x8>
	...

08002f54 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002f58:	2205      	movs	r2, #5
 8002f5a:	4903      	ldr	r1, [pc, #12]	; (8002f68 <sensor_init+0x14>)
 8002f5c:	4803      	ldr	r0, [pc, #12]	; (8002f6c <sensor_init+0x18>)
 8002f5e:	f004 f971 	bl	8007244 <HAL_ADC_Start_DMA>
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000029c 	.word	0x2000029c
 8002f6c:	2000012c 	.word	0x2000012c

08002f70 <sensor_Read>:

void sensor_Read(){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002f74:	2205      	movs	r2, #5
 8002f76:	4903      	ldr	r1, [pc, #12]	; (8002f84 <sensor_Read+0x14>)
 8002f78:	4803      	ldr	r0, [pc, #12]	; (8002f88 <sensor_Read+0x18>)
 8002f7a:	f004 f963 	bl	8007244 <HAL_ADC_Start_DMA>
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000029c 	.word	0x2000029c
 8002f88:	2000012c 	.word	0x2000012c

08002f8c <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <sensor_GetLight+0x14>)
 8002f92:	889b      	ldrh	r3, [r3, #4]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	2000029c 	.word	0x2000029c

08002fa4 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <sensor_GetPotentiometer+0x14>)
 8002faa:	88db      	ldrh	r3, [r3, #6]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000029c 	.word	0x2000029c

08002fbc <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <sensor_GetTemperature+0x30>)
 8002fc2:	891b      	ldrh	r3, [r3, #8]
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fcc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002ff0 <sensor_GetTemperature+0x34>
 8002fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ff4 <sensor_GetTemperature+0x38>
 8002fd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fdc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	2000029c 	.word	0x2000029c
 8002ff0:	43a50000 	.word	0x43a50000
 8002ff4:	457ff000 	.word	0x457ff000

08002ff8 <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b090      	sub	sp, #64	; 0x40
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	f107 000c 	add.w	r0, r7, #12
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <convert2str+0x2c>)
 800300a:	2132      	movs	r1, #50	; 0x32
 800300c:	f008 fc76 	bl	800b8fc <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4618      	mov	r0, r3
 8003016:	f008 fcb5 	bl	800b984 <strdup>
 800301a:	4603      	mov	r3, r0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3740      	adds	r7, #64	; 0x40
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	0800cf1c 	.word	0x0800cf1c

08003028 <lcdDrawWall>:

void lcdDrawWall()
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b083      	sub	sp, #12
 800302c:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <lcdDrawWall+0x3c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b298      	uxth	r0, r3
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <lcdDrawWall+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b299      	uxth	r1, r3
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <lcdDrawWall+0x3c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b29c      	uxth	r4, r3
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <lcdDrawWall+0x40>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <lcdDrawWall+0x44>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2200      	movs	r2, #0
 8003052:	9200      	str	r2, [sp, #0]
 8003054:	4622      	mov	r2, r4
 8003056:	f7ff f8fd 	bl	8002254 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 800305a:	bf00      	nop
 800305c:	3704      	adds	r7, #4
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	bf00      	nop
 8003064:	20000018 	.word	0x20000018
 8003068:	20000028 	.word	0x20000028
 800306c:	20000038 	.word	0x20000038

08003070 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b0a3      	sub	sp, #140	; 0x8c
 8003074:	af04      	add	r7, sp, #16
 8003076:	4603      	mov	r3, r0
 8003078:	460a      	mov	r2, r1
 800307a:	80fb      	strh	r3, [r7, #6]
 800307c:	4613      	mov	r3, r2
 800307e:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8003080:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003084:	f7ff f8b4 	bl	80021f0 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8003088:	4b45      	ldr	r3, [pc, #276]	; (80031a0 <setUpLcdNormalPlay+0x130>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	b29a      	uxth	r2, r3
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <setUpLcdNormalPlay+0x134>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	211f      	movs	r1, #31
 8003096:	9100      	str	r1, [sp, #0]
 8003098:	2100      	movs	r1, #0
 800309a:	2000      	movs	r0, #0
 800309c:	f7ff f8da 	bl	8002254 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 80030a0:	2301      	movs	r3, #1
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	2310      	movs	r3, #16
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	231f      	movs	r3, #31
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030b0:	4a3d      	ldr	r2, [pc, #244]	; (80031a8 <setUpLcdNormalPlay+0x138>)
 80030b2:	2105      	movs	r1, #5
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff fc7f 	bl	80029b8 <lcd_ShowStr>

	char str1[50] = "ID: ";
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <setUpLcdNormalPlay+0x13c>)
 80030bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c4:	6018      	str	r0, [r3, #0]
 80030c6:	3304      	adds	r3, #4
 80030c8:	7019      	strb	r1, [r3, #0]
 80030ca:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80030ce:	222d      	movs	r2, #45	; 0x2d
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f008 fb9e 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <setUpLcdNormalPlay+0x140>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff8b 	bl	8002ff8 <convert2str>
 80030e2:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 80030e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030e8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030ea:	4618      	mov	r0, r3
 80030ec:	f008 fc3a 	bl	800b964 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80030f0:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <setUpLcdNormalPlay+0x144>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	b298      	uxth	r0, r3
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <setUpLcdNormalPlay+0x148>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	b299      	uxth	r1, r3
 80030fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003100:	2301      	movs	r3, #1
 8003102:	9302      	str	r3, [sp, #8]
 8003104:	2310      	movs	r3, #16
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003112:	f7ff fc51 	bl	80029b8 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8003116:	4a29      	ldr	r2, [pc, #164]	; (80031bc <setUpLcdNormalPlay+0x14c>)
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003120:	e883 0003 	stmia.w	r3, {r0, r1}
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	222a      	movs	r2, #42	; 0x2a
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f008 fb71 	bl	800b814 <memset>
	char *str4 = convert2str(SCORE);
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <setUpLcdNormalPlay+0x150>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff5e 	bl	8002ff8 <convert2str>
 800313c:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003144:	4618      	mov	r0, r3
 8003146:	f008 fc0d 	bl	800b964 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <setUpLcdNormalPlay+0x154>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b298      	uxth	r0, r3
 8003150:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <setUpLcdNormalPlay+0x158>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3305      	adds	r3, #5
 8003158:	b299      	uxth	r1, r3
 800315a:	f107 0208 	add.w	r2, r7, #8
 800315e:	2300      	movs	r3, #0
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	2310      	movs	r3, #16
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	231f      	movs	r3, #31
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800316e:	f7ff fc23 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <setUpLcdNormalPlay+0x15c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b298      	uxth	r0, r3
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <setUpLcdNormalPlay+0x160>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b299      	uxth	r1, r3
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <setUpLcdNormalPlay+0x164>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <setUpLcdNormalPlay+0x168>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	4c14      	ldr	r4, [pc, #80]	; (80031dc <setUpLcdNormalPlay+0x16c>)
 800318c:	9400      	str	r4, [sp, #0]
 800318e:	f7ff fa39 	bl	8002604 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8003192:	f7ff ff49 	bl	8003028 <lcdDrawWall>
}
 8003196:	bf00      	nop
 8003198:	377c      	adds	r7, #124	; 0x7c
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000018 	.word	0x20000018
 80031a4:	20000028 	.word	0x20000028
 80031a8:	0800cf20 	.word	0x0800cf20
 80031ac:	0800cf30 	.word	0x0800cf30
 80031b0:	20000254 	.word	0x20000254
 80031b4:	20000064 	.word	0x20000064
 80031b8:	20000068 	.word	0x20000068
 80031bc:	0800cf64 	.word	0x0800cf64
 80031c0:	20000256 	.word	0x20000256
 80031c4:	2000006c 	.word	0x2000006c
 80031c8:	20000070 	.word	0x20000070
 80031cc:	20000074 	.word	0x20000074
 80031d0:	20000078 	.word	0x20000078
 80031d4:	2000007c 	.word	0x2000007c
 80031d8:	20000080 	.word	0x20000080
 80031dc:	08015adc 	.word	0x08015adc

080031e0 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b0a3      	sub	sp, #140	; 0x8c
 80031e4:	af04      	add	r7, sp, #16
 80031e6:	4603      	mov	r3, r0
 80031e8:	460a      	mov	r2, r1
 80031ea:	80fb      	strh	r3, [r7, #6]
 80031ec:	4613      	mov	r3, r2
 80031ee:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80031f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031f4:	f7fe fffc 	bl	80021f0 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80031f8:	4b45      	ldr	r3, [pc, #276]	; (8003310 <setUpLcdTimingPlay+0x130>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b45      	ldr	r3, [pc, #276]	; (8003314 <setUpLcdTimingPlay+0x134>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	211f      	movs	r1, #31
 8003206:	9100      	str	r1, [sp, #0]
 8003208:	2100      	movs	r1, #0
 800320a:	2000      	movs	r0, #0
 800320c:	f7ff f822 	bl	8002254 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 8003210:	2301      	movs	r3, #1
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	2310      	movs	r3, #16
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	231f      	movs	r3, #31
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003220:	4a3d      	ldr	r2, [pc, #244]	; (8003318 <setUpLcdTimingPlay+0x138>)
 8003222:	2105      	movs	r1, #5
 8003224:	2000      	movs	r0, #0
 8003226:	f7ff fbc7 	bl	80029b8 <lcd_ShowStr>

	char str1[50] = "ID: ";
 800322a:	4a3c      	ldr	r2, [pc, #240]	; (800331c <setUpLcdTimingPlay+0x13c>)
 800322c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	3304      	adds	r3, #4
 8003238:	7019      	strb	r1, [r3, #0]
 800323a:	f107 0341 	add.w	r3, r7, #65	; 0x41
 800323e:	222d      	movs	r2, #45	; 0x2d
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f008 fae6 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 8003248:	4b35      	ldr	r3, [pc, #212]	; (8003320 <setUpLcdTimingPlay+0x140>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fed3 	bl	8002ff8 <convert2str>
 8003252:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8003254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003258:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800325a:	4618      	mov	r0, r3
 800325c:	f008 fb82 	bl	800b964 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <setUpLcdTimingPlay+0x144>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b298      	uxth	r0, r3
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <setUpLcdTimingPlay+0x148>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b299      	uxth	r1, r3
 800326c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003270:	2301      	movs	r3, #1
 8003272:	9302      	str	r3, [sp, #8]
 8003274:	2310      	movs	r3, #16
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003282:	f7ff fb99 	bl	80029b8 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8003286:	4a29      	ldr	r2, [pc, #164]	; (800332c <setUpLcdTimingPlay+0x14c>)
 8003288:	f107 0308 	add.w	r3, r7, #8
 800328c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003290:	e883 0003 	stmia.w	r3, {r0, r1}
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	222a      	movs	r2, #42	; 0x2a
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f008 fab9 	bl	800b814 <memset>
	char *str4 = convert2str(0);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7ff fea8 	bl	8002ff8 <convert2str>
 80032a8:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80032b0:	4618      	mov	r0, r3
 80032b2:	f008 fb57 	bl	800b964 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <setUpLcdTimingPlay+0x150>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b298      	uxth	r0, r3
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <setUpLcdTimingPlay+0x154>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3305      	adds	r3, #5
 80032c4:	b299      	uxth	r1, r3
 80032c6:	f107 0208 	add.w	r2, r7, #8
 80032ca:	2301      	movs	r3, #1
 80032cc:	9302      	str	r3, [sp, #8]
 80032ce:	2310      	movs	r3, #16
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032dc:	f7ff fb6c 	bl	80029b8 <lcd_ShowStr>

	showTiming();
 80032e0:	f003 fbf8 	bl	8006ad4 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <setUpLcdTimingPlay+0x158>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b298      	uxth	r0, r3
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <setUpLcdTimingPlay+0x15c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b299      	uxth	r1, r3
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <setUpLcdTimingPlay+0x160>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <setUpLcdTimingPlay+0x164>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4c12      	ldr	r4, [pc, #72]	; (8003348 <setUpLcdTimingPlay+0x168>)
 80032fe:	9400      	str	r4, [sp, #0]
 8003300:	f7ff f980 	bl	8002604 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8003304:	f7ff fe90 	bl	8003028 <lcdDrawWall>
}
 8003308:	bf00      	nop
 800330a:	377c      	adds	r7, #124	; 0x7c
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}
 8003310:	20000018 	.word	0x20000018
 8003314:	20000028 	.word	0x20000028
 8003318:	0800cf98 	.word	0x0800cf98
 800331c:	0800cf30 	.word	0x0800cf30
 8003320:	20000254 	.word	0x20000254
 8003324:	20000064 	.word	0x20000064
 8003328:	20000068 	.word	0x20000068
 800332c:	0800cf64 	.word	0x0800cf64
 8003330:	2000006c 	.word	0x2000006c
 8003334:	20000070 	.word	0x20000070
 8003338:	20000074 	.word	0x20000074
 800333c:	20000078 	.word	0x20000078
 8003340:	2000007c 	.word	0x2000007c
 8003344:	20000080 	.word	0x20000080
 8003348:	08015adc 	.word	0x08015adc

0800334c <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b0a3      	sub	sp, #140	; 0x8c
 8003350:	af04      	add	r7, sp, #16
 8003352:	4603      	mov	r3, r0
 8003354:	460a      	mov	r2, r1
 8003356:	80fb      	strh	r3, [r7, #6]
 8003358:	4613      	mov	r3, r2
 800335a:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 800335c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003360:	f7fe ff46 	bl	80021f0 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8003364:	4b45      	ldr	r3, [pc, #276]	; (800347c <setUpLcdAdvancePlay+0x130>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	b29a      	uxth	r2, r3
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <setUpLcdAdvancePlay+0x134>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	211f      	movs	r1, #31
 8003372:	9100      	str	r1, [sp, #0]
 8003374:	2100      	movs	r1, #0
 8003376:	2000      	movs	r0, #0
 8003378:	f7fe ff6c 	bl	8002254 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 800337c:	2301      	movs	r3, #1
 800337e:	9302      	str	r3, [sp, #8]
 8003380:	2310      	movs	r3, #16
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	231f      	movs	r3, #31
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800338c:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <setUpLcdAdvancePlay+0x138>)
 800338e:	2105      	movs	r1, #5
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff fb11 	bl	80029b8 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8003396:	4a3c      	ldr	r2, [pc, #240]	; (8003488 <setUpLcdAdvancePlay+0x13c>)
 8003398:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800339c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033a0:	6018      	str	r0, [r3, #0]
 80033a2:	3304      	adds	r3, #4
 80033a4:	7019      	strb	r1, [r3, #0]
 80033a6:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80033aa:	222d      	movs	r2, #45	; 0x2d
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f008 fa30 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 80033b4:	4b35      	ldr	r3, [pc, #212]	; (800348c <setUpLcdAdvancePlay+0x140>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fe1d 	bl	8002ff8 <convert2str>
 80033be:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 80033c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80033c6:	4618      	mov	r0, r3
 80033c8:	f008 facc 	bl	800b964 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <setUpLcdAdvancePlay+0x144>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b298      	uxth	r0, r3
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <setUpLcdAdvancePlay+0x148>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b299      	uxth	r1, r3
 80033d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033dc:	2301      	movs	r3, #1
 80033de:	9302      	str	r3, [sp, #8]
 80033e0:	2310      	movs	r3, #16
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033ee:	f7ff fae3 	bl	80029b8 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 80033f2:	4a29      	ldr	r2, [pc, #164]	; (8003498 <setUpLcdAdvancePlay+0x14c>)
 80033f4:	f107 0308 	add.w	r3, r7, #8
 80033f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	222a      	movs	r2, #42	; 0x2a
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f008 fa03 	bl	800b814 <memset>
	char *str4 = convert2str(0);
 800340e:	2000      	movs	r0, #0
 8003410:	f7ff fdf2 	bl	8002ff8 <convert2str>
 8003414:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800341c:	4618      	mov	r0, r3
 800341e:	f008 faa1 	bl	800b964 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <setUpLcdAdvancePlay+0x150>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b298      	uxth	r0, r3
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <setUpLcdAdvancePlay+0x154>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	3305      	adds	r3, #5
 8003430:	b299      	uxth	r1, r3
 8003432:	f107 0208 	add.w	r2, r7, #8
 8003436:	2301      	movs	r3, #1
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	2310      	movs	r3, #16
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003448:	f7ff fab6 	bl	80029b8 <lcd_ShowStr>

	showTiming();
 800344c:	f003 fb42 	bl	8006ad4 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8003450:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <setUpLcdAdvancePlay+0x158>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b298      	uxth	r0, r3
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <setUpLcdAdvancePlay+0x15c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b299      	uxth	r1, r3
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <setUpLcdAdvancePlay+0x160>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <setUpLcdAdvancePlay+0x164>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	4c12      	ldr	r4, [pc, #72]	; (80034b4 <setUpLcdAdvancePlay+0x168>)
 800346a:	9400      	str	r4, [sp, #0]
 800346c:	f7ff f8ca 	bl	8002604 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8003470:	f7ff fdda 	bl	8003028 <lcdDrawWall>
}
 8003474:	bf00      	nop
 8003476:	377c      	adds	r7, #124	; 0x7c
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}
 800347c:	20000018 	.word	0x20000018
 8003480:	20000028 	.word	0x20000028
 8003484:	0800cfa8 	.word	0x0800cfa8
 8003488:	0800cf30 	.word	0x0800cf30
 800348c:	20000254 	.word	0x20000254
 8003490:	20000064 	.word	0x20000064
 8003494:	20000068 	.word	0x20000068
 8003498:	0800cf64 	.word	0x0800cf64
 800349c:	2000006c 	.word	0x2000006c
 80034a0:	20000070 	.word	0x20000070
 80034a4:	20000074 	.word	0x20000074
 80034a8:	20000078 	.word	0x20000078
 80034ac:	2000007c 	.word	0x2000007c
 80034b0:	20000080 	.word	0x20000080
 80034b4:	08015adc 	.word	0x08015adc

080034b8 <printScore>:

void printScore()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b094      	sub	sp, #80	; 0x50
 80034bc:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <printScore+0xd8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d12a      	bne.n	800351c <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 80034c6:	4a33      	ldr	r2, [pc, #204]	; (8003594 <printScore+0xdc>)
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	222a      	movs	r2, #42	; 0x2a
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f008 f99a 	bl	800b814 <memset>
		char *str4 = convert2str(SCORE);
 80034e0:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <printScore+0xe0>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fd87 	bl	8002ff8 <convert2str>
 80034ea:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034f0:	4618      	mov	r0, r3
 80034f2:	f008 fa37 	bl	800b964 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <printScore+0xe4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b298      	uxth	r0, r3
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <printScore+0xe8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	3305      	adds	r3, #5
 8003504:	b299      	uxth	r1, r3
 8003506:	1d3a      	adds	r2, r7, #4
 8003508:	2300      	movs	r3, #0
 800350a:	9302      	str	r3, [sp, #8]
 800350c:	2310      	movs	r3, #16
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	231f      	movs	r3, #31
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003518:	f7ff fa4e 	bl	80029b8 <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <printScore+0xd8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d003      	beq.n	800352c <printScore+0x74>
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <printScore+0xd8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b05      	cmp	r3, #5
 800352a:	d12c      	bne.n	8003586 <printScore+0xce>
	{
		char str3[50] = "SCORE: ";
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <printScore+0xdc>)
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003534:	e883 0003 	stmia.w	r3, {r0, r1}
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	222a      	movs	r2, #42	; 0x2a
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f008 f967 	bl	800b814 <memset>
		char *str4 = convert2str(SCORE);
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <printScore+0xe0>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fd54 	bl	8002ff8 <convert2str>
 8003550:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003556:	4618      	mov	r0, r3
 8003558:	f008 fa04 	bl	800b964 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <printScore+0xe4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b298      	uxth	r0, r3
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <printScore+0xe8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	3305      	adds	r3, #5
 800356a:	b299      	uxth	r1, r3
 800356c:	1d3a      	adds	r2, r7, #4
 800356e:	2300      	movs	r3, #0
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	2310      	movs	r3, #16
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	231f      	movs	r3, #31
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800357e:	f7ff fa1b 	bl	80029b8 <lcd_ShowStr>

		showTiming();
 8003582:	f003 faa7 	bl	8006ad4 <showTiming>
	}
}
 8003586:	bf00      	nop
 8003588:	3740      	adds	r7, #64	; 0x40
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000268 	.word	0x20000268
 8003594:	0800cf64 	.word	0x0800cf64
 8003598:	20000256 	.word	0x20000256
 800359c:	2000006c 	.word	0x2000006c
 80035a0:	20000070 	.word	0x20000070

080035a4 <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 80035aa:	4b8f      	ldr	r3, [pc, #572]	; (80037e8 <drawHeadSnake+0x244>)
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	f200 8114 	bhi.w	80037dc <drawHeadSnake+0x238>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <drawHeadSnake+0x18>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	08003755 	.word	0x08003755
 80035c0:	080036d5 	.word	0x080036d5
 80035c4:	0800364d 	.word	0x0800364d
 80035c8:	080035cd 	.word	0x080035cd
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035cc:	4b86      	ldr	r3, [pc, #536]	; (80037e8 <drawHeadSnake+0x244>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	b298      	uxth	r0, r3
 80035d2:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <drawHeadSnake+0x244>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80035d8:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <drawHeadSnake+0x244>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3309      	adds	r3, #9
 80035e0:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <drawHeadSnake+0x244>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3309      	adds	r3, #9
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80035f0:	9400      	str	r4, [sp, #0]
 80035f2:	f7fe fe2f 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035f6:	4b7c      	ldr	r3, [pc, #496]	; (80037e8 <drawHeadSnake+0x244>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	b298      	uxth	r0, r3
 80035fc:	4b7a      	ldr	r3, [pc, #488]	; (80037e8 <drawHeadSnake+0x244>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8003602:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <drawHeadSnake+0x244>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003606:	b29b      	uxth	r3, r3
 8003608:	3304      	adds	r3, #4
 800360a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 800360c:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <drawHeadSnake+0x244>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003610:	b29b      	uxth	r3, r3
 8003612:	3304      	adds	r3, #4
 8003614:	b29b      	uxth	r3, r3
 8003616:	2400      	movs	r4, #0
 8003618:	9400      	str	r4, [sp, #0]
 800361a:	f7fe fe1b 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800361e:	4b72      	ldr	r3, [pc, #456]	; (80037e8 <drawHeadSnake+0x244>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	b29b      	uxth	r3, r3
 8003624:	3305      	adds	r3, #5
 8003626:	b298      	uxth	r0, r3
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <drawHeadSnake+0x244>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 800362e:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <drawHeadSnake+0x244>)
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8003632:	b29b      	uxth	r3, r3
 8003634:	3309      	adds	r3, #9
 8003636:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003638:	4b6b      	ldr	r3, [pc, #428]	; (80037e8 <drawHeadSnake+0x244>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800363c:	b29b      	uxth	r3, r3
 800363e:	3304      	adds	r3, #4
 8003640:	b29b      	uxth	r3, r3
 8003642:	2400      	movs	r4, #0
 8003644:	9400      	str	r4, [sp, #0]
 8003646:	f7fe fe05 	bl	8002254 <lcd_Fill>
		break;
 800364a:	e0c8      	b.n	80037de <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <drawHeadSnake+0x244>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	b298      	uxth	r0, r3
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <drawHeadSnake+0x244>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003658:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <drawHeadSnake+0x244>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800365c:	b29b      	uxth	r3, r3
 800365e:	3309      	adds	r3, #9
 8003660:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003662:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <drawHeadSnake+0x244>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003666:	b29b      	uxth	r3, r3
 8003668:	3309      	adds	r3, #9
 800366a:	b29b      	uxth	r3, r3
 800366c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003670:	9400      	str	r4, [sp, #0]
 8003672:	f7fe fdef 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003676:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <drawHeadSnake+0x244>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	b298      	uxth	r0, r3
 800367c:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <drawHeadSnake+0x244>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	b29b      	uxth	r3, r3
 8003682:	3305      	adds	r3, #5
 8003684:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003686:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <drawHeadSnake+0x244>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800368a:	b29b      	uxth	r3, r3
 800368c:	3304      	adds	r3, #4
 800368e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003690:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <drawHeadSnake+0x244>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003694:	b29b      	uxth	r3, r3
 8003696:	3309      	adds	r3, #9
 8003698:	b29b      	uxth	r3, r3
 800369a:	2400      	movs	r4, #0
 800369c:	9400      	str	r4, [sp, #0]
 800369e:	f7fe fdd9 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80036a2:	4b51      	ldr	r3, [pc, #324]	; (80037e8 <drawHeadSnake+0x244>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3305      	adds	r3, #5
 80036aa:	b298      	uxth	r0, r3
 80036ac:	4b4e      	ldr	r3, [pc, #312]	; (80037e8 <drawHeadSnake+0x244>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3305      	adds	r3, #5
 80036b4:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80036b6:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <drawHeadSnake+0x244>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3309      	adds	r3, #9
 80036be:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <drawHeadSnake+0x244>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3309      	adds	r3, #9
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2400      	movs	r4, #0
 80036cc:	9400      	str	r4, [sp, #0]
 80036ce:	f7fe fdc1 	bl	8002254 <lcd_Fill>
		break;
 80036d2:	e084      	b.n	80037de <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80036d4:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <drawHeadSnake+0x244>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	b298      	uxth	r0, r3
 80036da:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <drawHeadSnake+0x244>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80036e0:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <drawHeadSnake+0x244>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3309      	adds	r3, #9
 80036e8:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80036ea:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <drawHeadSnake+0x244>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3309      	adds	r3, #9
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80036f8:	9400      	str	r4, [sp, #0]
 80036fa:	f7fe fdab 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80036fe:	4b3a      	ldr	r3, [pc, #232]	; (80037e8 <drawHeadSnake+0x244>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	b298      	uxth	r0, r3
 8003704:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <drawHeadSnake+0x244>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 800370a:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <drawHeadSnake+0x244>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800370e:	b29b      	uxth	r3, r3
 8003710:	3304      	adds	r3, #4
 8003712:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8003714:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <drawHeadSnake+0x244>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003718:	b29b      	uxth	r3, r3
 800371a:	3304      	adds	r3, #4
 800371c:	b29b      	uxth	r3, r3
 800371e:	2400      	movs	r4, #0
 8003720:	9400      	str	r4, [sp, #0]
 8003722:	f7fe fd97 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <drawHeadSnake+0x244>)
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	b298      	uxth	r0, r3
 800372c:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <drawHeadSnake+0x244>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	b29b      	uxth	r3, r3
 8003732:	3305      	adds	r3, #5
 8003734:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <drawHeadSnake+0x244>)
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800373a:	b29b      	uxth	r3, r3
 800373c:	3304      	adds	r3, #4
 800373e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <drawHeadSnake+0x244>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003744:	b29b      	uxth	r3, r3
 8003746:	3309      	adds	r3, #9
 8003748:	b29b      	uxth	r3, r3
 800374a:	2400      	movs	r4, #0
 800374c:	9400      	str	r4, [sp, #0]
 800374e:	f7fe fd81 	bl	8002254 <lcd_Fill>
		break;
 8003752:	e044      	b.n	80037de <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <drawHeadSnake+0x244>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	b298      	uxth	r0, r3
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <drawHeadSnake+0x244>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <drawHeadSnake+0x244>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003764:	b29b      	uxth	r3, r3
 8003766:	3309      	adds	r3, #9
 8003768:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <drawHeadSnake+0x244>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800376e:	b29b      	uxth	r3, r3
 8003770:	3309      	adds	r3, #9
 8003772:	b29b      	uxth	r3, r3
 8003774:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003778:	9400      	str	r4, [sp, #0]
 800377a:	f7fe fd6b 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <drawHeadSnake+0x244>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	b29b      	uxth	r3, r3
 8003784:	3305      	adds	r3, #5
 8003786:	b298      	uxth	r0, r3
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <drawHeadSnake+0x244>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <drawHeadSnake+0x244>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8003792:	b29b      	uxth	r3, r3
 8003794:	3309      	adds	r3, #9
 8003796:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <drawHeadSnake+0x244>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800379c:	b29b      	uxth	r3, r3
 800379e:	3304      	adds	r3, #4
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2400      	movs	r4, #0
 80037a4:	9400      	str	r4, [sp, #0]
 80037a6:	f7fe fd55 	bl	8002254 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <drawHeadSnake+0x244>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3305      	adds	r3, #5
 80037b2:	b298      	uxth	r0, r3
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <drawHeadSnake+0x244>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3305      	adds	r3, #5
 80037bc:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <drawHeadSnake+0x244>)
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3309      	adds	r3, #9
 80037c6:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80037c8:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <drawHeadSnake+0x244>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3309      	adds	r3, #9
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2400      	movs	r4, #0
 80037d4:	9400      	str	r4, [sp, #0]
 80037d6:	f7fe fd3d 	bl	8002254 <lcd_Fill>
		break;
 80037da:	e000      	b.n	80037de <drawHeadSnake+0x23a>
	default:
		break;
 80037dc:	bf00      	nop
	}
}
 80037de:	bf00      	nop
 80037e0:	3704      	adds	r7, #4
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200002ac 	.word	0x200002ac

080037ec <goLeft>:

void goLeft()
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 80037f2:	4b58      	ldr	r3, [pc, #352]	; (8003954 <goLeft+0x168>)
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 80a7 	bne.w	800394a <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80037fc:	4b55      	ldr	r3, [pc, #340]	; (8003954 <goLeft+0x168>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8003804:	4b53      	ldr	r3, [pc, #332]	; (8003954 <goLeft+0x168>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4798      	blx	r3
			break;
 800380a:	e09f      	b.n	800394c <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 800380c:	4b51      	ldr	r3, [pc, #324]	; (8003954 <goLeft+0x168>)
 800380e:	2201      	movs	r2, #1
 8003810:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e091      	b.n	800393c <goLeft+0x150>
			{
				if (i == 0)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d128      	bne.n	8003870 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800381e:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <goLeft+0x168>)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3305      	adds	r3, #5
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	f107 020c 	add.w	r2, r7, #12
 800382c:	3304      	adds	r3, #4
 800382e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003832:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 8003836:	4a47      	ldr	r2, [pc, #284]	; (8003954 <goLeft+0x168>)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3305      	adds	r3, #5
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f1a3 020a 	sub.w	r2, r3, #10
 8003846:	4943      	ldr	r1, [pc, #268]	; (8003954 <goLeft+0x168>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3305      	adds	r3, #5
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8003852:	4a40      	ldr	r2, [pc, #256]	; (8003954 <goLeft+0x168>)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3305      	adds	r3, #5
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	493d      	ldr	r1, [pc, #244]	; (8003954 <goLeft+0x168>)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3305      	adds	r3, #5
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800386a:	f7ff fe9b 	bl	80035a4 <drawHeadSnake>
 800386e:	e062      	b.n	8003936 <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003870:	4a38      	ldr	r2, [pc, #224]	; (8003954 <goLeft+0x168>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3305      	adds	r3, #5
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	1d3a      	adds	r2, r7, #4
 800387c:	3304      	adds	r3, #4
 800387e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003882:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003886:	4a33      	ldr	r2, [pc, #204]	; (8003954 <goLeft+0x168>)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3305      	adds	r3, #5
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	3304      	adds	r3, #4
 8003892:	f107 020c 	add.w	r2, r7, #12
 8003896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800389a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800389e:	f107 030c 	add.w	r3, r7, #12
 80038a2:	1d3a      	adds	r2, r7, #4
 80038a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a8:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d123      	bne.n	80038fa <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038b2:	4a28      	ldr	r2, [pc, #160]	; (8003954 <goLeft+0x168>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3305      	adds	r3, #5
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b298      	uxth	r0, r3
 80038c0:	4a24      	ldr	r2, [pc, #144]	; (8003954 <goLeft+0x168>)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3305      	adds	r3, #5
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <goLeft+0x168>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3305      	adds	r3, #5
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3309      	adds	r3, #9
 80038de:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80038e0:	4c1c      	ldr	r4, [pc, #112]	; (8003954 <goLeft+0x168>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3305      	adds	r3, #5
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4423      	add	r3, r4
 80038ea:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3309      	adds	r3, #9
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2400      	movs	r4, #0
 80038f4:	9400      	str	r4, [sp, #0]
 80038f6:	f7fe fcad 	bl	8002254 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <goLeft+0x168>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	3b01      	subs	r3, #1
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	429a      	cmp	r2, r3
 8003904:	d117      	bne.n	8003936 <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <goLeft+0x168>)
 8003908:	331c      	adds	r3, #28
 800390a:	1d3a      	adds	r2, r7, #4
 800390c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003910:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	b298      	uxth	r0, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	b299      	uxth	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	b29b      	uxth	r3, r3
 8003920:	3309      	adds	r3, #9
 8003922:	b29a      	uxth	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	b29b      	uxth	r3, r3
 8003928:	3309      	adds	r3, #9
 800392a:	b29b      	uxth	r3, r3
 800392c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003930:	9400      	str	r4, [sp, #0]
 8003932:	f7fe fc8f 	bl	8002254 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <goLeft+0x168>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	429a      	cmp	r2, r3
 8003944:	f6ff af68 	blt.w	8003818 <goLeft+0x2c>
					}
				}
			}
			break;
 8003948:	e000      	b.n	800394c <goLeft+0x160>
		}
	}
 800394a:	bf00      	nop
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	200002ac 	.word	0x200002ac

08003958 <goRight>:

void goRight()
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800395e:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <goRight+0x168>)
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 80a7 	bne.w	8003ab6 <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003968:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <goRight+0x168>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d103      	bne.n	8003978 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 8003970:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <goRight+0x168>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4798      	blx	r3
			break;
 8003976:	e09f      	b.n	8003ab8 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 8003978:	4b51      	ldr	r3, [pc, #324]	; (8003ac0 <goRight+0x168>)
 800397a:	2200      	movs	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e091      	b.n	8003aa8 <goRight+0x150>
			{
				if (i == 0)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d128      	bne.n	80039dc <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800398a:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <goRight+0x168>)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3305      	adds	r3, #5
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	f107 020c 	add.w	r2, r7, #12
 8003998:	3304      	adds	r3, #4
 800399a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800399e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 80039a2:	4a47      	ldr	r2, [pc, #284]	; (8003ac0 <goRight+0x168>)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3305      	adds	r3, #5
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f103 020a 	add.w	r2, r3, #10
 80039b2:	4943      	ldr	r1, [pc, #268]	; (8003ac0 <goRight+0x168>)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3305      	adds	r3, #5
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	440b      	add	r3, r1
 80039bc:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 80039be:	4a40      	ldr	r2, [pc, #256]	; (8003ac0 <goRight+0x168>)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3305      	adds	r3, #5
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	493d      	ldr	r1, [pc, #244]	; (8003ac0 <goRight+0x168>)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3305      	adds	r3, #5
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80039d6:	f7ff fde5 	bl	80035a4 <drawHeadSnake>
 80039da:	e062      	b.n	8003aa2 <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80039dc:	4a38      	ldr	r2, [pc, #224]	; (8003ac0 <goRight+0x168>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3305      	adds	r3, #5
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	1d3a      	adds	r2, r7, #4
 80039e8:	3304      	adds	r3, #4
 80039ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039ee:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 80039f2:	4a33      	ldr	r2, [pc, #204]	; (8003ac0 <goRight+0x168>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	3305      	adds	r3, #5
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	f107 020c 	add.w	r2, r7, #12
 8003a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a06:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	1d3a      	adds	r2, r7, #4
 8003a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a14:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d123      	bne.n	8003a66 <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a1e:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <goRight+0x168>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3305      	adds	r3, #5
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	b298      	uxth	r0, r3
 8003a2c:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <goRight+0x168>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3305      	adds	r3, #5
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003a3a:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <goRight+0x168>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3305      	adds	r3, #5
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3309      	adds	r3, #9
 8003a4a:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003a4c:	4c1c      	ldr	r4, [pc, #112]	; (8003ac0 <goRight+0x168>)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3305      	adds	r3, #5
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4423      	add	r3, r4
 8003a56:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3309      	adds	r3, #9
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2400      	movs	r4, #0
 8003a60:	9400      	str	r4, [sp, #0]
 8003a62:	f7fe fbf7 	bl	8002254 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <goRight+0x168>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d117      	bne.n	8003aa2 <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <goRight+0x168>)
 8003a74:	331c      	adds	r3, #28
 8003a76:	1d3a      	adds	r2, r7, #4
 8003a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a7c:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	b298      	uxth	r0, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	b299      	uxth	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3309      	adds	r3, #9
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3309      	adds	r3, #9
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003a9c:	9400      	str	r4, [sp, #0]
 8003a9e:	f7fe fbd9 	bl	8002254 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <goRight+0x168>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f6ff af68 	blt.w	8003984 <goRight+0x2c>
					}
				}
			}
			break;
 8003ab4:	e000      	b.n	8003ab8 <goRight+0x160>
		}
	}
 8003ab6:	bf00      	nop
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	200002ac 	.word	0x200002ac

08003ac4 <goUp>:

void goUp()
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <goUp+0x168>)
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 80a7 	bne.w	8003c22 <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <goUp+0x168>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d103      	bne.n	8003ae4 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <goUp+0x168>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4798      	blx	r3
			break;
 8003ae2:	e09f      	b.n	8003c24 <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 8003ae4:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <goUp+0x168>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e091      	b.n	8003c14 <goUp+0x150>
			{
				if (i == 0)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d128      	bne.n	8003b48 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003af6:	4a4d      	ldr	r2, [pc, #308]	; (8003c2c <goUp+0x168>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3305      	adds	r3, #5
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	f107 020c 	add.w	r2, r7, #12
 8003b04:	3304      	adds	r3, #4
 8003b06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b0a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8003b0e:	4a47      	ldr	r2, [pc, #284]	; (8003c2c <goUp+0x168>)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3305      	adds	r3, #5
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4944      	ldr	r1, [pc, #272]	; (8003c2c <goUp+0x168>)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3305      	adds	r3, #5
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	440b      	add	r3, r1
 8003b24:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 8003b26:	4a41      	ldr	r2, [pc, #260]	; (8003c2c <goUp+0x168>)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3305      	adds	r3, #5
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f1a3 020a 	sub.w	r2, r3, #10
 8003b36:	493d      	ldr	r1, [pc, #244]	; (8003c2c <goUp+0x168>)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3305      	adds	r3, #5
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003b42:	f7ff fd2f 	bl	80035a4 <drawHeadSnake>
 8003b46:	e062      	b.n	8003c0e <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003b48:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <goUp+0x168>)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3305      	adds	r3, #5
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	1d3a      	adds	r2, r7, #4
 8003b54:	3304      	adds	r3, #4
 8003b56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b5a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003b5e:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <goUp+0x168>)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3305      	adds	r3, #5
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	f107 020c 	add.w	r2, r7, #12
 8003b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b72:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	1d3a      	adds	r2, r7, #4
 8003b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b80:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d123      	bne.n	8003bd2 <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003b8a:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <goUp+0x168>)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3305      	adds	r3, #5
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b298      	uxth	r0, r3
 8003b98:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <goUp+0x168>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3305      	adds	r3, #5
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003ba6:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <goUp+0x168>)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3305      	adds	r3, #5
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3309      	adds	r3, #9
 8003bb6:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003bb8:	4c1c      	ldr	r4, [pc, #112]	; (8003c2c <goUp+0x168>)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3305      	adds	r3, #5
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4423      	add	r3, r4
 8003bc2:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3309      	adds	r3, #9
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2400      	movs	r4, #0
 8003bcc:	9400      	str	r4, [sp, #0]
 8003bce:	f7fe fb41 	bl	8002254 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <goUp+0x168>)
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d117      	bne.n	8003c0e <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <goUp+0x168>)
 8003be0:	331c      	adds	r3, #28
 8003be2:	1d3a      	adds	r2, r7, #4
 8003be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003be8:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	b298      	uxth	r0, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	b299      	uxth	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3309      	adds	r3, #9
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3309      	adds	r3, #9
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003c08:	9400      	str	r4, [sp, #0]
 8003c0a:	f7fe fb23 	bl	8002254 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3301      	adds	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <goUp+0x168>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	f6ff af68 	blt.w	8003af0 <goUp+0x2c>
					}
				}
			}
			break;
 8003c20:	e000      	b.n	8003c24 <goUp+0x160>
		}
	}
 8003c22:	bf00      	nop
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd90      	pop	{r4, r7, pc}
 8003c2c:	200002ac 	.word	0x200002ac

08003c30 <goDown>:

void goDown()
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003c36:	4b58      	ldr	r3, [pc, #352]	; (8003d98 <goDown+0x168>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 80a7 	bne.w	8003d8e <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003c40:	4b55      	ldr	r3, [pc, #340]	; (8003d98 <goDown+0x168>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d103      	bne.n	8003c50 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8003c48:	4b53      	ldr	r3, [pc, #332]	; (8003d98 <goDown+0x168>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4798      	blx	r3
			break;
 8003c4e:	e09f      	b.n	8003d90 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 8003c50:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <goDown+0x168>)
 8003c52:	2202      	movs	r2, #2
 8003c54:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e091      	b.n	8003d80 <goDown+0x150>
			{
				if (i == 0)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d128      	bne.n	8003cb4 <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003c62:	4a4d      	ldr	r2, [pc, #308]	; (8003d98 <goDown+0x168>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3305      	adds	r3, #5
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f107 020c 	add.w	r2, r7, #12
 8003c70:	3304      	adds	r3, #4
 8003c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c76:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8003c7a:	4a47      	ldr	r2, [pc, #284]	; (8003d98 <goDown+0x168>)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3305      	adds	r3, #5
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	4944      	ldr	r1, [pc, #272]	; (8003d98 <goDown+0x168>)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3305      	adds	r3, #5
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 8003c92:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <goDown+0x168>)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3305      	adds	r3, #5
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f103 020a 	add.w	r2, r3, #10
 8003ca2:	493d      	ldr	r1, [pc, #244]	; (8003d98 <goDown+0x168>)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3305      	adds	r3, #5
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003cae:	f7ff fc79 	bl	80035a4 <drawHeadSnake>
 8003cb2:	e062      	b.n	8003d7a <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003cb4:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <goDown+0x168>)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3305      	adds	r3, #5
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	1d3a      	adds	r2, r7, #4
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003cc6:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003cca:	4a33      	ldr	r2, [pc, #204]	; (8003d98 <goDown+0x168>)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3305      	adds	r3, #5
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	f107 020c 	add.w	r2, r7, #12
 8003cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cde:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	1d3a      	adds	r2, r7, #4
 8003ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cec:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d123      	bne.n	8003d3e <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003cf6:	4a28      	ldr	r2, [pc, #160]	; (8003d98 <goDown+0x168>)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3305      	adds	r3, #5
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	b298      	uxth	r0, r3
 8003d04:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <goDown+0x168>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3305      	adds	r3, #5
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003d12:	4a21      	ldr	r2, [pc, #132]	; (8003d98 <goDown+0x168>)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3305      	adds	r3, #5
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3309      	adds	r3, #9
 8003d22:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003d24:	4c1c      	ldr	r4, [pc, #112]	; (8003d98 <goDown+0x168>)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3305      	adds	r3, #5
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4423      	add	r3, r4
 8003d2e:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3309      	adds	r3, #9
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2400      	movs	r4, #0
 8003d38:	9400      	str	r4, [sp, #0]
 8003d3a:	f7fe fa8b 	bl	8002254 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <goDown+0x168>)
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	3b01      	subs	r3, #1
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d117      	bne.n	8003d7a <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <goDown+0x168>)
 8003d4c:	331c      	adds	r3, #28
 8003d4e:	1d3a      	adds	r2, r7, #4
 8003d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d54:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	b298      	uxth	r0, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	b299      	uxth	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3309      	adds	r3, #9
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3309      	adds	r3, #9
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003d74:	9400      	str	r4, [sp, #0]
 8003d76:	f7fe fa6d 	bl	8002254 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <goDown+0x168>)
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	f6ff af68 	blt.w	8003c5c <goDown+0x2c>
					}
				}
			}
			break;
 8003d8c:	e000      	b.n	8003d90 <goDown+0x160>
		}
	}
 8003d8e:	bf00      	nop
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}
 8003d98:	200002ac 	.word	0x200002ac

08003d9c <resumeGame>:

void resumeGame()
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af02      	add	r7, sp, #8
	uartSendContinuePlay();
 8003da2:	f002 ff5f 	bl	8006c64 <uartSendContinuePlay>
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 8003da6:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <resumeGame+0x1e0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <resumeGame+0x1e4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	b299      	uxth	r1, r3
 8003db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003dc0:	22f0      	movs	r2, #240	; 0xf0
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f7fe fa46 	bl	8002254 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e02c      	b.n	8003e28 <resumeGame+0x8c>
	{
		if (i == 0)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <resumeGame+0x3e>
			drawHeadSnake();
 8003dd4:	f7ff fbe6 	bl	80035a4 <drawHeadSnake>
 8003dd8:	e023      	b.n	8003e22 <resumeGame+0x86>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003dda:	4a6a      	ldr	r2, [pc, #424]	; (8003f84 <resumeGame+0x1e8>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3305      	adds	r3, #5
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	b298      	uxth	r0, r3
 8003de8:	4a66      	ldr	r2, [pc, #408]	; (8003f84 <resumeGame+0x1e8>)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3305      	adds	r3, #5
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003df6:	4a63      	ldr	r2, [pc, #396]	; (8003f84 <resumeGame+0x1e8>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3305      	adds	r3, #5
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3309      	adds	r3, #9
 8003e06:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003e08:	4c5e      	ldr	r4, [pc, #376]	; (8003f84 <resumeGame+0x1e8>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3305      	adds	r3, #5
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4423      	add	r3, r4
 8003e12:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3309      	adds	r3, #9
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2400      	movs	r4, #0
 8003e1c:	9400      	str	r4, [sp, #0]
 8003e1e:	f7fe fa19 	bl	8002254 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3301      	adds	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <resumeGame+0x1e8>)
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dbcd      	blt.n	8003dce <resumeGame+0x32>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	e07e      	b.n	8003f36 <resumeGame+0x19a>
	{
		int X = wallObject.infoWall[i].x;
 8003e38:	4953      	ldr	r1, [pc, #332]	; (8003f88 <resumeGame+0x1ec>)
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 8003e4a:	494f      	ldr	r1, [pc, #316]	; (8003f88 <resumeGame+0x1ec>)
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3304      	adds	r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	b298      	uxth	r0, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b299      	uxth	r1, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3309      	adds	r3, #9
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3309      	adds	r3, #9
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003e7a:	9400      	str	r4, [sp, #0]
 8003e7c:	f7fe f9ea 	bl	8002254 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 8003e80:	4941      	ldr	r1, [pc, #260]	; (8003f88 <resumeGame+0x1ec>)
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3308      	adds	r3, #8
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d126      	bne.n	8003ee4 <resumeGame+0x148>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	b298      	uxth	r0, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	330a      	adds	r3, #10
 8003ea0:	b299      	uxth	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3309      	adds	r3, #9
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3313      	adds	r3, #19
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003eb6:	9400      	str	r4, [sp, #0]
 8003eb8:	f7fe f9cc 	bl	8002254 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	b298      	uxth	r0, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b0a      	subs	r3, #10
 8003ec6:	b299      	uxth	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3309      	adds	r3, #9
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003edc:	9400      	str	r4, [sp, #0]
 8003ede:	f7fe f9b9 	bl	8002254 <lcd_Fill>
 8003ee2:	e025      	b.n	8003f30 <resumeGame+0x194>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	330a      	adds	r3, #10
 8003eea:	b298      	uxth	r0, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	b299      	uxth	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3313      	adds	r3, #19
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3309      	adds	r3, #9
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003f04:	9400      	str	r4, [sp, #0]
 8003f06:	f7fe f9a5 	bl	8002254 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b0a      	subs	r3, #10
 8003f10:	b298      	uxth	r0, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b299      	uxth	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3309      	adds	r3, #9
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003f2a:	9400      	str	r4, [sp, #0]
 8003f2c:	f7fe f992 	bl	8002254 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <resumeGame+0x1ec>)
 8003f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f6ff af78 	blt.w	8003e38 <resumeGame+0x9c>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <resumeGame+0x1f0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b298      	uxth	r0, r3
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <resumeGame+0x1f4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b299      	uxth	r1, r3
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <resumeGame+0x1f0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3309      	adds	r3, #9
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <resumeGame+0x1f4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3309      	adds	r3, #9
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003f6c:	9400      	str	r4, [sp, #0]
 8003f6e:	f7fe f971 	bl	8002254 <lcd_Fill>
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd90      	pop	{r4, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000028 	.word	0x20000028
 8003f80:	20000038 	.word	0x20000038
 8003f84:	200002ac 	.word	0x200002ac
 8003f88:	20001278 	.word	0x20001278
 8003f8c:	20000094 	.word	0x20000094
 8003f90:	20000098 	.word	0x20000098

08003f94 <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <checkOutOfValidRange+0x38>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0c      	blt.n	8003fba <checkOutOfValidRange+0x26>
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <checkOutOfValidRange+0x38>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	2be6      	cmp	r3, #230	; 0xe6
 8003fa6:	dc08      	bgt.n	8003fba <checkOutOfValidRange+0x26>
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <checkOutOfValidRange+0x38>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	2b45      	cmp	r3, #69	; 0x45
 8003fae:	dd04      	ble.n	8003fba <checkOutOfValidRange+0x26>
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <checkOutOfValidRange+0x38>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003fb8:	dd01      	ble.n	8003fbe <checkOutOfValidRange+0x2a>
		return 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <checkOutOfValidRange+0x2c>
	return 0;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	200002ac 	.word	0x200002ac

08003fd0 <checkEatBody>:

int checkEatBody()
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	e018      	b.n	800400e <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <checkEatBody+0x58>)
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	4911      	ldr	r1, [pc, #68]	; (8004028 <checkEatBody+0x58>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3305      	adds	r3, #5
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	440b      	add	r3, r1
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d10b      	bne.n	8004008 <checkEatBody+0x38>
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <checkEatBody+0x58>)
 8003ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff4:	490c      	ldr	r1, [pc, #48]	; (8004028 <checkEatBody+0x58>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3305      	adds	r3, #5
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d101      	bne.n	8004008 <checkEatBody+0x38>
			return 1;
 8004004:	2301      	movs	r3, #1
 8004006:	e008      	b.n	800401a <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3301      	adds	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <checkEatBody+0x58>)
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	dbe1      	blt.n	8003fdc <checkEatBody+0xc>
	return 0;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	200002ac 	.word	0x200002ac

0800402c <checkEatFruit>:

int checkEatFruit()
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <checkEatFruit+0x2c>)
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <checkEatFruit+0x30>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d107      	bne.n	800404c <checkEatFruit+0x20>
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <checkEatFruit+0x2c>)
 800403e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <checkEatFruit+0x34>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d101      	bne.n	800404c <checkEatFruit+0x20>
		return 1;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <checkEatFruit+0x22>
	return 0;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	200002ac 	.word	0x200002ac
 800405c:	20000094 	.word	0x20000094
 8004060:	20000098 	.word	0x20000098

08004064 <checkHitWall>:

int checkHitWall()
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	e079      	b.n	8004164 <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 8004070:	4944      	ldr	r1, [pc, #272]	; (8004184 <checkHitWall+0x120>)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3308      	adds	r3, #8
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d136      	bne.n	80040f4 <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8004086:	4b40      	ldr	r3, [pc, #256]	; (8004188 <checkHitWall+0x124>)
 8004088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800408a:	483e      	ldr	r0, [pc, #248]	; (8004184 <checkHitWall+0x120>)
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4403      	add	r3, r0
 8004098:	3304      	adds	r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3b0a      	subs	r3, #10
 800409e:	4299      	cmp	r1, r3
 80040a0:	d01a      	beq.n	80040d8 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 80040a2:	4b39      	ldr	r3, [pc, #228]	; (8004188 <checkHitWall+0x124>)
 80040a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040a6:	4837      	ldr	r0, [pc, #220]	; (8004184 <checkHitWall+0x120>)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4403      	add	r3, r0
 80040b4:	3304      	adds	r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 80040ba:	4299      	cmp	r1, r3
 80040bc:	d00c      	beq.n	80040d8 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 80040be:	4b32      	ldr	r3, [pc, #200]	; (8004188 <checkHitWall+0x124>)
 80040c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040c2:	4830      	ldr	r0, [pc, #192]	; (8004184 <checkHitWall+0x120>)
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4403      	add	r3, r0
 80040d0:	3304      	adds	r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 80040d4:	4299      	cmp	r1, r3
 80040d6:	d142      	bne.n	800415e <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <checkHitWall+0x124>)
 80040da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040dc:	4829      	ldr	r0, [pc, #164]	; (8004184 <checkHitWall+0x120>)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4403      	add	r3, r0
 80040ea:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d136      	bne.n	800415e <checkHitWall+0xfa>
			{
				return 1;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e041      	b.n	8004178 <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <checkHitWall+0x124>)
 80040f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040f8:	4822      	ldr	r0, [pc, #136]	; (8004184 <checkHitWall+0x120>)
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330a      	adds	r3, #10
 800410a:	4299      	cmp	r1, r3
 800410c:	d018      	beq.n	8004140 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <checkHitWall+0x124>)
 8004110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004112:	481c      	ldr	r0, [pc, #112]	; (8004184 <checkHitWall+0x120>)
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4403      	add	r3, r0
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8004124:	4299      	cmp	r1, r3
 8004126:	d00b      	beq.n	8004140 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <checkHitWall+0x124>)
 800412a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800412c:	4815      	ldr	r0, [pc, #84]	; (8004184 <checkHitWall+0x120>)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4403      	add	r3, r0
 800413a:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 800413c:	4299      	cmp	r1, r3
 800413e:	d10e      	bne.n	800415e <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <checkHitWall+0x124>)
 8004142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004144:	480f      	ldr	r0, [pc, #60]	; (8004184 <checkHitWall+0x120>)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4403      	add	r3, r0
 8004152:	3304      	adds	r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8004156:	4299      	cmp	r1, r3
 8004158:	d101      	bne.n	800415e <checkHitWall+0xfa>
			{
				return 1;
 800415a:	2301      	movs	r3, #1
 800415c:	e00c      	b.n	8004178 <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3301      	adds	r3, #1
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <checkHitWall+0x120>)
 8004166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416a:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	f6ff af7d 	blt.w	8004070 <checkHitWall+0xc>
			}
		}
	}
	return 0;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20001278 	.word	0x20001278
 8004188:	200002ac 	.word	0x200002ac

0800418c <checkHead>:
void checkHead()
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b085      	sub	sp, #20
 8004190:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 8004192:	f7ff feff 	bl	8003f94 <checkOutOfValidRange>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(3);
 800419c:	2003      	movs	r0, #3
 800419e:	f7fd fc79 	bl	8001a94 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80041a2:	e065      	b.n	8004270 <checkHead+0xe4>
	}
	if (checkEatBody())
 80041a4:	f7ff ff14 	bl	8003fd0 <checkEatBody>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(2);
 80041ae:	2002      	movs	r0, #2
 80041b0:	f7fd fc70 	bl	8001a94 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80041b4:	e05c      	b.n	8004270 <checkHead+0xe4>
	}
	if (checkHitWall())
 80041b6:	f7ff ff55 	bl	8004064 <checkHitWall>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <checkHead+0x3c>
	{
		// showGameover
		initOverMode(0);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7fd fc67 	bl	8001a94 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80041c6:	e053      	b.n	8004270 <checkHead+0xe4>
	}
	if (checkEatFruit())
 80041c8:	f7ff ff30 	bl	800402c <checkEatFruit>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04e      	beq.n	8004270 <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <checkHead+0xec>)
 80041d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041d8:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <checkHead+0xf0>)
 80041dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041e0:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 80041e2:	4b27      	ldr	r3, [pc, #156]	; (8004280 <checkHead+0xf4>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	3301      	adds	r3, #1
 80041e8:	4a25      	ldr	r2, [pc, #148]	; (8004280 <checkHead+0xf4>)
 80041ea:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <checkHead+0xf4>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	3b01      	subs	r3, #1
 80041f2:	4a23      	ldr	r2, [pc, #140]	; (8004280 <checkHead+0xf4>)
 80041f4:	69d2      	ldr	r2, [r2, #28]
 80041f6:	4922      	ldr	r1, [pc, #136]	; (8004280 <checkHead+0xf4>)
 80041f8:	3305      	adds	r3, #5
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	440b      	add	r3, r1
 80041fe:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <checkHead+0xf4>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	3b01      	subs	r3, #1
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <checkHead+0xf4>)
 8004208:	6a12      	ldr	r2, [r2, #32]
 800420a:	491d      	ldr	r1, [pc, #116]	; (8004280 <checkHead+0xf4>)
 800420c:	3305      	adds	r3, #5
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <checkHead+0xf4>)
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	3b01      	subs	r3, #1
 800421a:	4a19      	ldr	r2, [pc, #100]	; (8004280 <checkHead+0xf4>)
 800421c:	3305      	adds	r3, #5
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <checkHead+0xf4>)
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	3b01      	subs	r3, #1
 800422c:	4a14      	ldr	r2, [pc, #80]	; (8004280 <checkHead+0xf4>)
 800422e:	3305      	adds	r3, #5
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b298      	uxth	r0, r3
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b299      	uxth	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	b29b      	uxth	r3, r3
 8004244:	3309      	adds	r3, #9
 8004246:	b29a      	uxth	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	3309      	adds	r3, #9
 800424e:	b29b      	uxth	r3, r3
 8004250:	2400      	movs	r4, #0
 8004252:	9400      	str	r4, [sp, #0]
 8004254:	f7fd fffe 	bl	8002254 <lcd_Fill>
		flagEat = 1;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <checkHead+0xf8>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

		SCORE++;
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <checkHead+0xfc>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <checkHead+0xfc>)
 8004268:	801a      	strh	r2, [r3, #0]
		printScore();
 800426a:	f7ff f925 	bl	80034b8 <printScore>
		return;
 800426e:	bf00      	nop
	}
}
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	bf00      	nop
 8004278:	20000094 	.word	0x20000094
 800427c:	20000098 	.word	0x20000098
 8004280:	200002ac 	.word	0x200002ac
 8004284:	2000009c 	.word	0x2000009c
 8004288:	20000256 	.word	0x20000256

0800428c <move>:

void move()
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <move+0x4c>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d81b      	bhi.n	80042d0 <move+0x44>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <move+0x14>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042c1 	.word	0x080042c1
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042b1 	.word	0x080042b1
 80042ac:	080042b9 	.word	0x080042b9
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <move+0x4c>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4798      	blx	r3
		break;
 80042b6:	e00c      	b.n	80042d2 <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <move+0x4c>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4798      	blx	r3
		break;
 80042be:	e008      	b.n	80042d2 <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <move+0x4c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4798      	blx	r3
		break;
 80042c6:	e004      	b.n	80042d2 <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <move+0x4c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4798      	blx	r3
		break;
 80042ce:	e000      	b.n	80042d2 <move+0x46>
	default:
		break;
 80042d0:	bf00      	nop
	}
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200002ac 	.word	0x200002ac

080042dc <wallInit>:

void wallInit()
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	e01f      	b.n	8004328 <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 80042e8:	491f      	ldr	r1, [pc, #124]	; (8004368 <wallInit+0x8c>)
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 80042fa:	491b      	ldr	r1, [pc, #108]	; (8004368 <wallInit+0x8c>)
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3304      	adds	r3, #4
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 800430e:	4916      	ldr	r1, [pc, #88]	; (8004368 <wallInit+0x8c>)
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3308      	adds	r3, #8
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3301      	adds	r3, #1
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800432e:	dbdb      	blt.n	80042e8 <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <wallInit+0x8c>)
 8004332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
	wallObject.vertical = 1;
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <wallInit+0x8c>)
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	461a      	mov	r2, r3
 8004346:	2301      	movs	r3, #1
 8004348:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	wallObject.stopGenerateWallFlag = 0;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <wallInit+0x8c>)
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	f8c2 3778 	str.w	r3, [r2, #1912]	; 0x778
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20001278 	.word	0x20001278

0800436c <snakeRun>:

void snakeRun()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af02      	add	r7, sp, #8
	if (buttonForSnake[0])
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <snakeRun+0x124>)
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <snakeRun+0x22>
	{
		buttonForSnake[0]= 0;
 800437a:	4b45      	ldr	r3, [pc, #276]	; (8004490 <snakeRun+0x124>)
 800437c:	2200      	movs	r2, #0
 800437e:	801a      	strh	r2, [r3, #0]
		(*snakeObject.GOUP)();
 8004380:	4b44      	ldr	r3, [pc, #272]	; (8004494 <snakeRun+0x128>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8004386:	4b43      	ldr	r3, [pc, #268]	; (8004494 <snakeRun+0x128>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800438c:	e07d      	b.n	800448a <snakeRun+0x11e>
		if (buttonForSnake[1])
 800438e:	4b40      	ldr	r3, [pc, #256]	; (8004490 <snakeRun+0x124>)
 8004390:	885b      	ldrh	r3, [r3, #2]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <snakeRun+0x3e>
			buttonForSnake[1]= 0;
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <snakeRun+0x124>)
 8004398:	2200      	movs	r2, #0
 800439a:	805a      	strh	r2, [r3, #2]
			(*snakeObject.GOLEFT)();
 800439c:	4b3d      	ldr	r3, [pc, #244]	; (8004494 <snakeRun+0x128>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 80043a2:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <snakeRun+0x128>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4798      	blx	r3
}
 80043a8:	e06f      	b.n	800448a <snakeRun+0x11e>
			if (buttonForSnake[2])
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <snakeRun+0x124>)
 80043ac:	889b      	ldrh	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d025      	beq.n	80043fe <snakeRun+0x92>
				buttonForSnake[2]= 0;
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <snakeRun+0x124>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	809a      	strh	r2, [r3, #4]
				snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 80043b8:	4b36      	ldr	r3, [pc, #216]	; (8004494 <snakeRun+0x128>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <snakeRun+0x128>)
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
				wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 80043cc:	4b32      	ldr	r3, [pc, #200]	; (8004498 <snakeRun+0x12c>)
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <snakeRun+0x12c>)
 80043e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e8:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
				snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 80043ec:	4b29      	ldr	r3, [pc, #164]	; (8004494 <snakeRun+0x128>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	4618      	mov	r0, r3
 80043f2:	f002 f809 	bl	8006408 <initStopGame>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4a26      	ldr	r2, [pc, #152]	; (8004494 <snakeRun+0x128>)
 80043fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80043fc:	e045      	b.n	800448a <snakeRun+0x11e>
				if (buttonForSnake[3])
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <snakeRun+0x124>)
 8004400:	88db      	ldrh	r3, [r3, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <snakeRun+0xae>
					buttonForSnake[3]= 0;
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <snakeRun+0x124>)
 8004408:	2200      	movs	r2, #0
 800440a:	80da      	strh	r2, [r3, #6]
					(*snakeObject.GORIGHT)();
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <snakeRun+0x128>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <snakeRun+0x128>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4798      	blx	r3
}
 8004418:	e037      	b.n	800448a <snakeRun+0x11e>
					if (buttonForSnake[4])
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <snakeRun+0x124>)
 800441c:	891b      	ldrh	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01f      	beq.n	8004462 <snakeRun+0xf6>
						buttonForSnake[4]= 0;
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <snakeRun+0x124>)
 8004424:	2200      	movs	r2, #0
 8004426:	811a      	strh	r2, [r3, #8]
						lcd_Clear(WHITE);
 8004428:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800442c:	f7fd fee0 	bl	80021f0 <lcd_Clear>
						xFruit = INT_MIN;
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <snakeRun+0x130>)
 8004432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004436:	601a      	str	r2, [r3, #0]
						yFruit = INT_MIN;
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <snakeRun+0x134>)
 800443a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800443e:	601a      	str	r2, [r3, #0]
						snakeInit();
 8004440:	f000 f832 	bl	80044a8 <snakeInit>
						wallInit();
 8004444:	f7ff ff4a 	bl	80042dc <wallInit>
						lcd_Fill(0, 0, 240, 70, RED);
 8004448:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2346      	movs	r3, #70	; 0x46
 8004450:	22f0      	movs	r2, #240	; 0xf0
 8004452:	2100      	movs	r1, #0
 8004454:	2000      	movs	r0, #0
 8004456:	f7fd fefd 	bl	8002254 <lcd_Fill>
						flagEat = 1;
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <snakeRun+0x138>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
}
 8004460:	e013      	b.n	800448a <snakeRun+0x11e>
						if (buttonForSnake[5])
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <snakeRun+0x124>)
 8004464:	895b      	ldrh	r3, [r3, #10]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <snakeRun+0x112>
							buttonForSnake[5]= 0;
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <snakeRun+0x124>)
 800446c:	2200      	movs	r2, #0
 800446e:	815a      	strh	r2, [r3, #10]
							(*snakeObject.GODOWN)();
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <snakeRun+0x128>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <snakeRun+0x128>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4798      	blx	r3
}
 800447c:	e005      	b.n	800448a <snakeRun+0x11e>
							(*snakeObject.MOVE)();
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <snakeRun+0x128>)
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <snakeRun+0x128>)
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	4798      	blx	r3
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200001f4 	.word	0x200001f4
 8004494:	200002ac 	.word	0x200002ac
 8004498:	20001278 	.word	0x20001278
 800449c:	20000094 	.word	0x20000094
 80044a0:	20000098 	.word	0x20000098
 80044a4:	2000009c 	.word	0x2000009c

080044a8 <snakeInit>:

void snakeInit()
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af02      	add	r7, sp, #8
	srand(rst);
 80044ae:	4b45      	ldr	r3, [pc, #276]	; (80045c4 <snakeInit+0x11c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f007 f9b6 	bl	800b824 <srand>
	rst++;
 80044b8:	4b42      	ldr	r3, [pc, #264]	; (80045c4 <snakeInit+0x11c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	4a41      	ldr	r2, [pc, #260]	; (80045c4 <snakeInit+0x11c>)
 80044c0:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <snakeInit+0x120>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 80044c8:	4b40      	ldr	r3, [pc, #256]	; (80045cc <snakeInit+0x124>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 80044ce:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <snakeInit+0x124>)
 80044d0:	2214      	movs	r2, #20
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 80044d4:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <snakeInit+0x124>)
 80044d6:	2246      	movs	r2, #70	; 0x46
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 80044da:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <snakeInit+0x124>)
 80044dc:	220a      	movs	r2, #10
 80044de:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 80044e0:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <snakeInit+0x124>)
 80044e2:	2246      	movs	r2, #70	; 0x46
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 80044e6:	4b39      	ldr	r3, [pc, #228]	; (80045cc <snakeInit+0x124>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <snakeInit+0x124>)
 80044ee:	2246      	movs	r2, #70	; 0x46
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 80044f2:	2303      	movs	r3, #3
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	e010      	b.n	800451a <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 80044f8:	4a34      	ldr	r2, [pc, #208]	; (80045cc <snakeInit+0x124>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3305      	adds	r3, #5
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 8004506:	4a31      	ldr	r2, [pc, #196]	; (80045cc <snakeInit+0x124>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3305      	adds	r3, #5
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	2200      	movs	r2, #0
 8004512:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3301      	adds	r3, #1
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004520:	dbea      	blt.n	80044f8 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <snakeInit+0x124>)
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <snakeInit+0x128>)
 8004526:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 8004528:	4b28      	ldr	r3, [pc, #160]	; (80045cc <snakeInit+0x124>)
 800452a:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <snakeInit+0x12c>)
 800452c:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 800452e:	4b27      	ldr	r3, [pc, #156]	; (80045cc <snakeInit+0x124>)
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <snakeInit+0x130>)
 8004532:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <snakeInit+0x124>)
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <snakeInit+0x134>)
 8004538:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <snakeInit+0x124>)
 800453c:	4a28      	ldr	r2, [pc, #160]	; (80045e0 <snakeInit+0x138>)
 800453e:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 8004540:	4b22      	ldr	r3, [pc, #136]	; (80045cc <snakeInit+0x124>)
 8004542:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <snakeInit+0x13c>)
 8004544:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <snakeInit+0x124>)
 8004548:	2203      	movs	r2, #3
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <snakeInit+0x124>)
 800454e:	2200      	movs	r2, #0
 8004550:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	e02c      	b.n	80045b2 <snakeInit+0x10a>
	{
		if (i == 0)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <snakeInit+0xbc>
			drawHeadSnake();
 800455e:	f7ff f821 	bl	80035a4 <drawHeadSnake>
 8004562:	e023      	b.n	80045ac <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8004564:	4a19      	ldr	r2, [pc, #100]	; (80045cc <snakeInit+0x124>)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3305      	adds	r3, #5
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	b298      	uxth	r0, r3
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <snakeInit+0x124>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	3305      	adds	r3, #5
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <snakeInit+0x124>)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	3305      	adds	r3, #5
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800458c:	b29b      	uxth	r3, r3
 800458e:	3309      	adds	r3, #9
 8004590:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8004592:	4c0e      	ldr	r4, [pc, #56]	; (80045cc <snakeInit+0x124>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3305      	adds	r3, #5
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4423      	add	r3, r4
 800459c:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3309      	adds	r3, #9
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2400      	movs	r4, #0
 80045a6:	9400      	str	r4, [sp, #0]
 80045a8:	f7fd fe54 	bl	8002254 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	ddcf      	ble.n	8004558 <snakeInit+0xb0>
	}
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200002a8 	.word	0x200002a8
 80045c8:	2000009c 	.word	0x2000009c
 80045cc:	200002ac 	.word	0x200002ac
 80045d0:	08003c31 	.word	0x08003c31
 80045d4:	080037ed 	.word	0x080037ed
 80045d8:	08003ac5 	.word	0x08003ac5
 80045dc:	08003959 	.word	0x08003959
 80045e0:	0800428d 	.word	0x0800428d
 80045e4:	0800418d 	.word	0x0800418d

080045e8 <generateFruit>:

void generateFruit()
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 80045ee:	4b89      	ldr	r3, [pc, #548]	; (8004814 <generateFruit+0x22c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	f040 8109 	bne.w	800480a <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 80045fc:	f007 f940 	bl	800b880 <rand>
 8004600:	4601      	mov	r1, r0
 8004602:	4b85      	ldr	r3, [pc, #532]	; (8004818 <generateFruit+0x230>)
 8004604:	fb83 2301 	smull	r2, r3, r3, r1
 8004608:	109a      	asrs	r2, r3, #2
 800460a:	17cb      	asrs	r3, r1, #31
 800460c:	1ad2      	subs	r2, r2, r3
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1aca      	subs	r2, r1, r3
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	461a      	mov	r2, r3
 8004622:	4b7e      	ldr	r3, [pc, #504]	; (800481c <generateFruit+0x234>)
 8004624:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 8004626:	f007 f92b 	bl	800b880 <rand>
 800462a:	4601      	mov	r1, r0
 800462c:	4b7c      	ldr	r3, [pc, #496]	; (8004820 <generateFruit+0x238>)
 800462e:	fb83 2301 	smull	r2, r3, r3, r1
 8004632:	10da      	asrs	r2, r3, #3
 8004634:	17cb      	asrs	r3, r1, #31
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	1aca      	subs	r2, r1, r3
 8004644:	3207      	adds	r2, #7
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	461a      	mov	r2, r3
 8004650:	4b74      	ldr	r3, [pc, #464]	; (8004824 <generateFruit+0x23c>)
 8004652:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	e021      	b.n	800469e <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 800465a:	4a73      	ldr	r2, [pc, #460]	; (8004828 <generateFruit+0x240>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3305      	adds	r3, #5
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b6d      	ldr	r3, [pc, #436]	; (800481c <generateFruit+0x234>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d114      	bne.n	8004698 <generateFruit+0xb0>
 800466e:	4a6e      	ldr	r2, [pc, #440]	; (8004828 <generateFruit+0x240>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3305      	adds	r3, #5
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <generateFruit+0x23c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d10a      	bne.n	8004698 <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 8004682:	4b66      	ldr	r3, [pc, #408]	; (800481c <generateFruit+0x234>)
 8004684:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004688:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 800468a:	4b66      	ldr	r3, [pc, #408]	; (8004824 <generateFruit+0x23c>)
 800468c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004690:	601a      	str	r2, [r3, #0]
					remind = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
					break;
 8004696:	e007      	b.n	80046a8 <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3301      	adds	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b62      	ldr	r3, [pc, #392]	; (8004828 <generateFruit+0x240>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	dbd8      	blt.n	800465a <generateFruit+0x72>
				}
			}
			if (remind)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 80a9 	bne.w	8004802 <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 80046b0:	2300      	movs	r3, #0
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e07f      	b.n	80047b6 <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 80046b6:	495d      	ldr	r1, [pc, #372]	; (800482c <generateFruit+0x244>)
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3308      	adds	r3, #8
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d139      	bne.n	8004740 <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 80046cc:	4957      	ldr	r1, [pc, #348]	; (800482c <generateFruit+0x244>)
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3304      	adds	r3, #4
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b51      	ldr	r3, [pc, #324]	; (8004824 <generateFruit+0x23c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d01d      	beq.n	8004722 <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 80046e6:	4951      	ldr	r1, [pc, #324]	; (800482c <generateFruit+0x244>)
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	3304      	adds	r3, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f103 020a 	add.w	r2, r3, #10
 80046fc:	4b49      	ldr	r3, [pc, #292]	; (8004824 <generateFruit+0x23c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d00e      	beq.n	8004722 <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8004704:	4949      	ldr	r1, [pc, #292]	; (800482c <generateFruit+0x244>)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	3304      	adds	r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1a3 020a 	sub.w	r2, r3, #10
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <generateFruit+0x23c>)
 800471c:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d146      	bne.n	80047b0 <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 8004722:	4942      	ldr	r1, [pc, #264]	; (800482c <generateFruit+0x244>)
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b3a      	ldr	r3, [pc, #232]	; (800481c <generateFruit+0x234>)
 8004734:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8004736:	429a      	cmp	r2, r3
 8004738:	d13a      	bne.n	80047b0 <generateFruit+0x1c8>
					{
						remind = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
						break;
 800473e:	e043      	b.n	80047c8 <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 8004740:	493a      	ldr	r1, [pc, #232]	; (800482c <generateFruit+0x244>)
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <generateFruit+0x234>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d01b      	beq.n	8004790 <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8004758:	4934      	ldr	r1, [pc, #208]	; (800482c <generateFruit+0x244>)
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f103 020a 	add.w	r2, r3, #10
 800476c:	4b2b      	ldr	r3, [pc, #172]	; (800481c <generateFruit+0x234>)
 800476e:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d00d      	beq.n	8004790 <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8004774:	492d      	ldr	r1, [pc, #180]	; (800482c <generateFruit+0x244>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1a3 020a 	sub.w	r2, r3, #10
 8004788:	4b24      	ldr	r3, [pc, #144]	; (800481c <generateFruit+0x234>)
 800478a:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d10f      	bne.n	80047b0 <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8004790:	4926      	ldr	r1, [pc, #152]	; (800482c <generateFruit+0x244>)
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3304      	adds	r3, #4
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b20      	ldr	r3, [pc, #128]	; (8004824 <generateFruit+0x23c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d102      	bne.n	80047b0 <generateFruit+0x1c8>
					{
						remind = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
						break;
 80047ae:	e00b      	b.n	80047c8 <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3301      	adds	r3, #1
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <generateFruit+0x244>)
 80047b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047bc:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	f6ff af77 	blt.w	80046b6 <generateFruit+0xce>
					}
				}
			}
			if (remind)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11b      	bne.n	8004806 <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <generateFruit+0x234>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b298      	uxth	r0, r3
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <generateFruit+0x23c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b299      	uxth	r1, r3
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <generateFruit+0x234>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3309      	adds	r3, #9
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <generateFruit+0x23c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3309      	adds	r3, #9
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f240 14cf 	movw	r4, #463	; 0x1cf
 80047f2:	9400      	str	r4, [sp, #0]
 80047f4:	f7fd fd2e 	bl	8002254 <lcd_Fill>
			flagEat = 0;
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <generateFruit+0x22c>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
			break;
 80047fe:	bf00      	nop
		}
	}
}
 8004800:	e003      	b.n	800480a <generateFruit+0x222>
				continue;
 8004802:	bf00      	nop
 8004804:	e6f8      	b.n	80045f8 <generateFruit+0x10>
				continue;
 8004806:	bf00      	nop
		{
 8004808:	e6f6      	b.n	80045f8 <generateFruit+0x10>
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	bf00      	nop
 8004814:	2000009c 	.word	0x2000009c
 8004818:	2aaaaaab 	.word	0x2aaaaaab
 800481c:	20000094 	.word	0x20000094
 8004820:	51eb851f 	.word	0x51eb851f
 8004824:	20000098 	.word	0x20000098
 8004828:	200002ac 	.word	0x200002ac
 800482c:	20001278 	.word	0x20001278

08004830 <generateWall>:

void generateWall()
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b08d      	sub	sp, #52	; 0x34
 8004834:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 8004836:	4b9c      	ldr	r3, [pc, #624]	; (8004aa8 <generateWall+0x278>)
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004840:	4a9a      	ldr	r2, [pc, #616]	; (8004aac <generateWall+0x27c>)
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	4293      	cmp	r3, r2
 8004846:	f280 82de 	bge.w	8004e06 <generateWall+0x5d6>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 800484a:	4b97      	ldr	r3, [pc, #604]	; (8004aa8 <generateWall+0x278>)
 800484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004850:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 82d7 	bne.w	8004e08 <generateWall+0x5d8>
	{
		while (1)
		{
			int remind = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 800485e:	f007 f80f 	bl	800b880 <rand>
 8004862:	4602      	mov	r2, r0
 8004864:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <generateWall+0x280>)
 8004866:	fb83 1302 	smull	r1, r3, r3, r2
 800486a:	1099      	asrs	r1, r3, #2
 800486c:	17d3      	asrs	r3, r2, #31
 800486e:	1acb      	subs	r3, r1, r3
 8004870:	2116      	movs	r1, #22
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 8004884:	f006 fffc 	bl	800b880 <rand>
 8004888:	4601      	mov	r1, r0
 800488a:	4b8a      	ldr	r3, [pc, #552]	; (8004ab4 <generateWall+0x284>)
 800488c:	fb83 2301 	smull	r2, r3, r3, r1
 8004890:	440b      	add	r3, r1
 8004892:	111a      	asrs	r2, r3, #4
 8004894:	17cb      	asrs	r3, r1, #31
 8004896:	1ad2      	subs	r2, r2, r3
 8004898:	4613      	mov	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	1aca      	subs	r2, r1, r3
 80048a4:	3208      	adds	r2, #8
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	e0e8      	b.n	8004a88 <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 80048b6:	497c      	ldr	r1, [pc, #496]	; (8004aa8 <generateWall+0x278>)
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 80048c8:	4977      	ldr	r1, [pc, #476]	; (8004aa8 <generateWall+0x278>)
 80048ca:	6a3a      	ldr	r2, [r7, #32]
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3304      	adds	r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 80048dc:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <generateWall+0x278>)
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d166      	bne.n	80049b8 <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 80048ea:	496f      	ldr	r1, [pc, #444]	; (8004aa8 <generateWall+0x278>)
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3308      	adds	r3, #8
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d120      	bne.n	8004942 <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3b14      	subs	r3, #20
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	429a      	cmp	r2, r3
 8004908:	d013      	beq.n	8004932 <generateWall+0x102>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3314      	adds	r3, #20
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	429a      	cmp	r2, r3
 8004912:	d00e      	beq.n	8004932 <generateWall+0x102>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b0a      	subs	r3, #10
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	429a      	cmp	r2, r3
 800491c:	d009      	beq.n	8004932 <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	429a      	cmp	r2, r3
 8004926:	d004      	beq.n	8004932 <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	f040 80a8 	bne.w	8004a82 <generateWall+0x252>
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	429a      	cmp	r2, r3
 8004938:	f040 80a3 	bne.w	8004a82 <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 800493c:	2301      	movs	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8004940:	e0ab      	b.n	8004a9a <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b0a      	subs	r3, #10
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	429a      	cmp	r2, r3
 800494a:	d008      	beq.n	800495e <generateWall+0x12e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	330a      	adds	r3, #10
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	429a      	cmp	r2, r3
 8004954:	d003      	beq.n	800495e <generateWall+0x12e>
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	429a      	cmp	r2, r3
 800495c:	d103      	bne.n	8004966 <generateWall+0x136>
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	429a      	cmp	r2, r3
 8004964:	d025      	beq.n	80049b2 <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	429a      	cmp	r2, r3
 800496e:	d008      	beq.n	8004982 <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	330a      	adds	r3, #10
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	429a      	cmp	r2, r3
 8004978:	d003      	beq.n	8004982 <generateWall+0x152>
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	429a      	cmp	r2, r3
 8004980:	d104      	bne.n	800498c <generateWall+0x15c>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3b0a      	subs	r3, #10
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	429a      	cmp	r2, r3
 800498a:	d012      	beq.n	80049b2 <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	429a      	cmp	r2, r3
 8004994:	d008      	beq.n	80049a8 <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	330a      	adds	r3, #10
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	429a      	cmp	r2, r3
 800499e:	d003      	beq.n	80049a8 <generateWall+0x178>
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d16c      	bne.n	8004a82 <generateWall+0x252>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	330a      	adds	r3, #10
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d167      	bne.n	8004a82 <generateWall+0x252>
						{
							remind = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	e064      	b.n	8004a82 <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 80049b8:	493b      	ldr	r1, [pc, #236]	; (8004aa8 <generateWall+0x278>)
 80049ba:	6a3a      	ldr	r2, [r7, #32]
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	3308      	adds	r3, #8
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d13a      	bne.n	8004a44 <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3b0a      	subs	r3, #10
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d008      	beq.n	80049ea <generateWall+0x1ba>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	330a      	adds	r3, #10
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d003      	beq.n	80049ea <generateWall+0x1ba>
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d103      	bne.n	80049f2 <generateWall+0x1c2>
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d025      	beq.n	8004a3e <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d008      	beq.n	8004a0e <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	330a      	adds	r3, #10
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d003      	beq.n	8004a0e <generateWall+0x1de>
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d104      	bne.n	8004a18 <generateWall+0x1e8>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b0a      	subs	r3, #10
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d012      	beq.n	8004a3e <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d008      	beq.n	8004a34 <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	330a      	adds	r3, #10
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d003      	beq.n	8004a34 <generateWall+0x204>
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d126      	bne.n	8004a82 <generateWall+0x252>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	330a      	adds	r3, #10
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d121      	bne.n	8004a82 <generateWall+0x252>
						{
							remind = 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8004a42:	e02a      	b.n	8004a9a <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3b14      	subs	r3, #20
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d012      	beq.n	8004a74 <generateWall+0x244>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3314      	adds	r3, #20
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d00d      	beq.n	8004a74 <generateWall+0x244>
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	330a      	adds	r3, #10
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d008      	beq.n	8004a74 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d003      	beq.n	8004a74 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d106      	bne.n	8004a82 <generateWall+0x252>
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d102      	bne.n	8004a82 <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8004a80:	e00b      	b.n	8004a9a <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	3301      	adds	r3, #1
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <generateWall+0x278>)
 8004a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8e:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004a92:	6a3a      	ldr	r2, [r7, #32]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	f6ff af0e 	blt.w	80048b6 <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 81a8 	bne.w	8004df2 <generateWall+0x5c2>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e049      	b.n	8004b3c <generateWall+0x30c>
 8004aa8:	20001278 	.word	0x20001278
 8004aac:	20000258 	.word	0x20000258
 8004ab0:	2e8ba2e9 	.word	0x2e8ba2e9
 8004ab4:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 8004ab8:	4a60      	ldr	r2, [pc, #384]	; (8004c3c <generateWall+0x40c>)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3305      	adds	r3, #5
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 8004ac6:	4a5d      	ldr	r2, [pc, #372]	; (8004c3c <generateWall+0x40c>)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3305      	adds	r3, #5
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 8004ad4:	4b5a      	ldr	r3, [pc, #360]	; (8004c40 <generateWall+0x410>)
 8004ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ada:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d114      	bne.n	8004b0c <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d125      	bne.n	8004b36 <generateWall+0x306>
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d009      	beq.n	8004b06 <generateWall+0x2d6>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3b0a      	subs	r3, #10
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d004      	beq.n	8004b06 <generateWall+0x2d6>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	330a      	adds	r3, #10
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d117      	bne.n	8004b36 <generateWall+0x306>
					{
						remind = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004b0a:	e01c      	b.n	8004b46 <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d110      	bne.n	8004b36 <generateWall+0x306>
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d009      	beq.n	8004b30 <generateWall+0x300>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	3b0a      	subs	r3, #10
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d004      	beq.n	8004b30 <generateWall+0x300>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	330a      	adds	r3, #10
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d102      	bne.n	8004b36 <generateWall+0x306>
					{
						remind = 1;
 8004b30:	2301      	movs	r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004b34:	e007      	b.n	8004b46 <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	4b3f      	ldr	r3, [pc, #252]	; (8004c3c <generateWall+0x40c>)
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	dbb8      	blt.n	8004ab8 <generateWall+0x288>
					}
				}
			}
			if (remind)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f040 8154 	bne.w	8004df6 <generateWall+0x5c6>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <generateWall+0x40c>)
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d842      	bhi.n	8004bdc <generateWall+0x3ac>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <generateWall+0x32c>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004ba5 	.word	0x08004ba5
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b6d 	.word	0x08004b6d
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 8004b6c:	4b33      	ldr	r3, [pc, #204]	; (8004c3c <generateWall+0x40c>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d134      	bne.n	8004be0 <generateWall+0x3b0>
 8004b76:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <generateWall+0x40c>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	3b0a      	subs	r3, #10
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d12e      	bne.n	8004be0 <generateWall+0x3b0>
					remind = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004b86:	e02b      	b.n	8004be0 <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 8004b88:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <generateWall+0x40c>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d128      	bne.n	8004be4 <generateWall+0x3b4>
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <generateWall+0x40c>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	330a      	adds	r3, #10
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d122      	bne.n	8004be4 <generateWall+0x3b4>
					remind = 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004ba2:	e01f      	b.n	8004be4 <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <generateWall+0x40c>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	3b0a      	subs	r3, #10
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d11b      	bne.n	8004be8 <generateWall+0x3b8>
 8004bb0:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <generateWall+0x40c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d116      	bne.n	8004be8 <generateWall+0x3b8>
					remind = 1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004bbe:	e013      	b.n	8004be8 <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <generateWall+0x40c>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	330a      	adds	r3, #10
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d10f      	bne.n	8004bec <generateWall+0x3bc>
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <generateWall+0x40c>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d10a      	bne.n	8004bec <generateWall+0x3bc>
					remind= 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004bda:	e007      	b.n	8004bec <generateWall+0x3bc>
				default:
					break;
 8004bdc:	bf00      	nop
 8004bde:	e006      	b.n	8004bee <generateWall+0x3be>
				break;
 8004be0:	bf00      	nop
 8004be2:	e004      	b.n	8004bee <generateWall+0x3be>
				break;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <generateWall+0x3be>
				break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <generateWall+0x3be>
				break;
 8004bec:	bf00      	nop
			}
			if (remind)
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 8102 	bne.w	8004dfa <generateWall+0x5ca>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <generateWall+0x410>)
 8004bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfc:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d123      	bne.n	8004c4c <generateWall+0x41c>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <generateWall+0x414>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d139      	bne.n	8004c82 <generateWall+0x452>
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <generateWall+0x418>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f000 80f2 	beq.w	8004dfe <generateWall+0x5ce>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f1a3 020a 	sub.w	r2, r3, #10
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <generateWall+0x418>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	f000 80ea 	beq.w	8004dfe <generateWall+0x5ce>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f103 020a 	add.w	r2, r3, #10
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <generateWall+0x418>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d124      	bne.n	8004c82 <generateWall+0x452>
					continue;
 8004c38:	e0e1      	b.n	8004dfe <generateWall+0x5ce>
 8004c3a:	bf00      	nop
 8004c3c:	200002ac 	.word	0x200002ac
 8004c40:	20001278 	.word	0x20001278
 8004c44:	20000094 	.word	0x20000094
 8004c48:	20000098 	.word	0x20000098
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 8004c4c:	4b70      	ldr	r3, [pc, #448]	; (8004e10 <generateWall+0x5e0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d115      	bne.n	8004c82 <generateWall+0x452>
 8004c56:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <generateWall+0x5e4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	f000 80d0 	beq.w	8004e02 <generateWall+0x5d2>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f1a3 020a 	sub.w	r2, r3, #10
 8004c68:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <generateWall+0x5e4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	f000 80c8 	beq.w	8004e02 <generateWall+0x5d2>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f103 020a 	add.w	r2, r3, #10
 8004c78:	4b66      	ldr	r3, [pc, #408]	; (8004e14 <generateWall+0x5e4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f000 80c0 	beq.w	8004e02 <generateWall+0x5d2>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 8004c82:	4b65      	ldr	r3, [pc, #404]	; (8004e18 <generateWall+0x5e8>)
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004c8c:	4962      	ldr	r1, [pc, #392]	; (8004e18 <generateWall+0x5e8>)
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 8004c9c:	4b5e      	ldr	r3, [pc, #376]	; (8004e18 <generateWall+0x5e8>)
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004ca6:	495c      	ldr	r1, [pc, #368]	; (8004e18 <generateWall+0x5e8>)
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	b298      	uxth	r0, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	b299      	uxth	r1, r3
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3309      	adds	r3, #9
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3309      	adds	r3, #9
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004cd4:	9400      	str	r4, [sp, #0]
 8004cd6:	f7fd fabd 	bl	8002254 <lcd_Fill>
			if (wallObject.vertical == 1)
 8004cda:	4b4f      	ldr	r3, [pc, #316]	; (8004e18 <generateWall+0x5e8>)
 8004cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce0:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d134      	bne.n	8004d52 <generateWall+0x522>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	b298      	uxth	r0, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	330a      	adds	r3, #10
 8004cf2:	b299      	uxth	r1, r3
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3309      	adds	r3, #9
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3313      	adds	r3, #19
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004d08:	9400      	str	r4, [sp, #0]
 8004d0a:	f7fd faa3 	bl	8002254 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	b298      	uxth	r0, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b0a      	subs	r3, #10
 8004d18:	b299      	uxth	r1, r3
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3309      	adds	r3, #9
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004d2e:	9400      	str	r4, [sp, #0]
 8004d30:	f7fd fa90 	bl	8002254 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 8004d34:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <generateWall+0x5e8>)
 8004d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3a:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004d3e:	4936      	ldr	r1, [pc, #216]	; (8004e18 <generateWall+0x5e8>)
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e033      	b.n	8004dba <generateWall+0x58a>
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	330a      	adds	r3, #10
 8004d58:	b298      	uxth	r0, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	b299      	uxth	r1, r3
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3313      	adds	r3, #19
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3309      	adds	r3, #9
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004d72:	9400      	str	r4, [sp, #0]
 8004d74:	f7fd fa6e 	bl	8002254 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b0a      	subs	r3, #10
 8004d7e:	b298      	uxth	r0, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	b299      	uxth	r1, r3
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3309      	adds	r3, #9
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004d98:	9400      	str	r4, [sp, #0]
 8004d9a:	f7fd fa5b 	bl	8002254 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 8004d9e:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <generateWall+0x5e8>)
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004da8:	491b      	ldr	r1, [pc, #108]	; (8004e18 <generateWall+0x5e8>)
 8004daa:	4613      	mov	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3308      	adds	r3, #8
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 8004dba:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <generateWall+0x5e8>)
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc0:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <generateWall+0x5e8>)
 8004dc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dcc:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			wallObject.vertical = !wallObject.vertical;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <generateWall+0x5e8>)
 8004dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd6:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <generateWall+0x5e8>)
 8004de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dec:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
			break;
 8004df0:	e00a      	b.n	8004e08 <generateWall+0x5d8>
				continue;
 8004df2:	bf00      	nop
 8004df4:	e531      	b.n	800485a <generateWall+0x2a>
				continue;
 8004df6:	bf00      	nop
 8004df8:	e52f      	b.n	800485a <generateWall+0x2a>
				continue;
 8004dfa:	bf00      	nop
 8004dfc:	e52d      	b.n	800485a <generateWall+0x2a>
					continue;
 8004dfe:	bf00      	nop
 8004e00:	e52b      	b.n	800485a <generateWall+0x2a>
					continue;
 8004e02:	bf00      	nop
		{
 8004e04:	e529      	b.n	800485a <generateWall+0x2a>
		return;
 8004e06:	bf00      	nop
		}
	}
}
 8004e08:	372c      	adds	r7, #44	; 0x2c
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000098 	.word	0x20000098
 8004e14:	20000094 	.word	0x20000094
 8004e18:	20001278 	.word	0x20001278

08004e1c <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004e20:	4802      	ldr	r0, [pc, #8]	; (8004e2c <timer_init+0x10>)
 8004e22:	f004 fc7f 	bl	8009724 <HAL_TIM_Base_Start_IT>
}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20002a80 	.word	0x20002a80

08004e30 <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 8004e3a:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <setTimerSnakeRun+0x2c>)
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <setTimerSnakeRun+0x2c>)
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <setTimerSnakeRun+0x30>)
 8004e46:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <setTimerSnakeRun+0x34>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	801a      	strh	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	200029fe 	.word	0x200029fe
 8004e60:	200029fc 	.word	0x200029fc
 8004e64:	200029fa 	.word	0x200029fa

08004e68 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <setTimerTiming+0x34>)
 8004e7e:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <setTimerTiming+0x34>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <setTimerTiming+0x38>)
 8004e86:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <setTimerTiming+0x3c>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	801a      	strh	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20002a08 	.word	0x20002a08
 8004ea0:	20002a04 	.word	0x20002a04
 8004ea4:	20002a00 	.word	0x20002a00

08004ea8 <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 8004eb2:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <setTimerDeTime+0x2c>)
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <setTimerDeTime+0x2c>)
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <setTimerDeTime+0x30>)
 8004ebe:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <setTimerDeTime+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	801a      	strh	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20002a10 	.word	0x20002a10
 8004ed8:	20002a0e 	.word	0x20002a0e
 8004edc:	20002a0c 	.word	0x20002a0c

08004ee0 <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <setTimerGenerateWall+0x2c>)
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <setTimerGenerateWall+0x2c>)
 8004ef2:	881a      	ldrh	r2, [r3, #0]
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <setTimerGenerateWall+0x30>)
 8004ef6:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <setTimerGenerateWall+0x34>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	801a      	strh	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20002a16 	.word	0x20002a16
 8004f10:	20002a14 	.word	0x20002a14
 8004f14:	20002a12 	.word	0x20002a12

08004f18 <setTimerUart>:

void setTimerUart(uint16_t duration)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
	timerForUart_MUL= duration/ TIMER_CYCLE_2;
 8004f22:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <setTimerUart+0x2c>)
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	8013      	strh	r3, [r2, #0]
	timerForUart= timerForUart_MUL;
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <setTimerUart+0x2c>)
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <setTimerUart+0x30>)
 8004f2e:	801a      	strh	r2, [r3, #0]
	flagForUart= 0;
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <setTimerUart+0x34>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	801a      	strh	r2, [r3, #0]
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20002a1c 	.word	0x20002a1c
 8004f48:	20002a1a 	.word	0x20002a1a
 8004f4c:	20002a18 	.word	0x20002a18

08004f50 <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 8004f5a:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <setTimerButton+0x2c>)
 8004f5c:	88fb      	ldrh	r3, [r7, #6]
 8004f5e:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <setTimerButton+0x2c>)
 8004f62:	881a      	ldrh	r2, [r3, #0]
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <setTimerButton+0x30>)
 8004f66:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <setTimerButton+0x34>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	801a      	strh	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200029f8 	.word	0x200029f8
 8004f80:	200029f6 	.word	0x200029f6
 8004f84:	200029f4 	.word	0x200029f4

08004f88 <setTimerSendSensor>:

void setTimerSendSensor(uint16_t duration)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
	timerForSendSensor_MUL= duration/TIMER_CYCLE_2;
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <setTimerSendSensor+0x2c>)
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	8013      	strh	r3, [r2, #0]
	timerForSendSensor= timerForSendSensor_MUL;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <setTimerSendSensor+0x2c>)
 8004f9a:	881a      	ldrh	r2, [r3, #0]
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <setTimerSendSensor+0x30>)
 8004f9e:	801a      	strh	r2, [r3, #0]
	flagForSendSensor= 0;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <setTimerSendSensor+0x34>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	801a      	strh	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20002a22 	.word	0x20002a22
 8004fb8:	20002a20 	.word	0x20002a20
 8004fbc:	20002a1e 	.word	0x20002a1e

08004fc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	f040 808c 	bne.w	80050ec <HAL_TIM_PeriodElapsedCallback+0x12c>
		if(timerForSnakeRun > 0)
 8004fd4:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			timerForSnakeRun--;
 8004fdc:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004fe6:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <HAL_TIM_PeriodElapsedCallback+0x3e>
				flagForSnakeRun = 1;
 8004ff0:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 8004ff6:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004ffc:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 8004ffe:	4b40      	ldr	r3, [pc, #256]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d010      	beq.n	8005028 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			timerForButton--;
 8005006:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	4b3c      	ldr	r3, [pc, #240]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005010:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				flagForButton= 1;
 800501a:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800501c:	2201      	movs	r2, #1
 800501e:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 8005020:	4b39      	ldr	r3, [pc, #228]	; (8005108 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005022:	881a      	ldrh	r2, [r3, #0]
 8005024:	4b36      	ldr	r3, [pc, #216]	; (8005100 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005026:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 8005028:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			timerForTiming--;
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3b01      	subs	r3, #1
 8005036:	4a35      	ldr	r2, [pc, #212]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005038:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 800503a:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <HAL_TIM_PeriodElapsedCallback+0x88>
			{
				flagForTiming = 1;
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005044:	2201      	movs	r2, #1
 8005046:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 8005048:	4b32      	ldr	r3, [pc, #200]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00c      	beq.n	800506a <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			timerForDeTime--;
 8005050:	4b30      	ldr	r3, [pc, #192]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800505a:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 800505c:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				flagForDeTime = 1;
 8005064:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005066:	2201      	movs	r2, #1
 8005068:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			timerForGenerateWall--;
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	4b28      	ldr	r3, [pc, #160]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800507c:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_PeriodElapsedCallback+0xd4>
			{
				flagForGenerateWall= 1;
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8005088:	2201      	movs	r2, #1
 800508a:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800508e:	881a      	ldrh	r2, [r3, #0]
 8005090:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8005092:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForUart > 0)
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <HAL_TIM_PeriodElapsedCallback+0xfe>
		{
			timerForUart--;
 800509c:	4b22      	ldr	r3, [pc, #136]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80050a6:	801a      	strh	r2, [r3, #0]
			if (timerForUart <= 0)
 80050a8:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_TIM_PeriodElapsedCallback+0xfe>
			{
				flagForUart= 1;
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	801a      	strh	r2, [r3, #0]
				timerForUart= timerForUart_MUL;
 80050b6:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80050bc:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForSendSensor > 0)
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x128>
		{
			timerForSendSensor--;
 80050c6:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	4b19      	ldr	r3, [pc, #100]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80050d0:	801a      	strh	r2, [r3, #0]
			if (timerForSendSensor <= 0)
 80050d2:	4b18      	ldr	r3, [pc, #96]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_PeriodElapsedCallback+0x128>
			{
				flagForSendSensor= 1;
 80050da:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80050dc:	2201      	movs	r2, #1
 80050de:	801a      	strh	r2, [r3, #0]
				timerForSendSensor= timerForSendSensor_MUL;
 80050e0:	4b16      	ldr	r3, [pc, #88]	; (800513c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	4b13      	ldr	r3, [pc, #76]	; (8005134 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80050e6:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 80050e8:	f7fd fd08 	bl	8002afc <led7_Scan>
	}
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	200029fc 	.word	0x200029fc
 80050f8:	200029fa 	.word	0x200029fa
 80050fc:	200029fe 	.word	0x200029fe
 8005100:	200029f6 	.word	0x200029f6
 8005104:	200029f4 	.word	0x200029f4
 8005108:	200029f8 	.word	0x200029f8
 800510c:	20002a04 	.word	0x20002a04
 8005110:	20002a00 	.word	0x20002a00
 8005114:	20002a0e 	.word	0x20002a0e
 8005118:	20002a0c 	.word	0x20002a0c
 800511c:	20002a14 	.word	0x20002a14
 8005120:	20002a12 	.word	0x20002a12
 8005124:	20002a16 	.word	0x20002a16
 8005128:	20002a1a 	.word	0x20002a1a
 800512c:	20002a18 	.word	0x20002a18
 8005130:	20002a1c 	.word	0x20002a1c
 8005134:	20002a20 	.word	0x20002a20
 8005138:	20002a1e 	.word	0x20002a1e
 800513c:	20002a22 	.word	0x20002a22

08005140 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <MX_SPI1_Init+0x68>)
 8005148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800514a:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <MX_SPI1_Init+0x64>)
 800514c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005154:	2200      	movs	r2, #0
 8005156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <MX_SPI1_Init+0x64>)
 800515a:	2200      	movs	r2, #0
 800515c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005160:	2200      	movs	r2, #0
 8005162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005166:	2200      	movs	r2, #0
 8005168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <MX_SPI1_Init+0x64>)
 800516c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005174:	2200      	movs	r2, #0
 8005176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <MX_SPI1_Init+0x64>)
 800517a:	2200      	movs	r2, #0
 800517c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005180:	2200      	movs	r2, #0
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005184:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005186:	2200      	movs	r2, #0
 8005188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <MX_SPI1_Init+0x64>)
 800518c:	220a      	movs	r2, #10
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005190:	4804      	ldr	r0, [pc, #16]	; (80051a4 <MX_SPI1_Init+0x64>)
 8005192:	f003 ff9f 	bl	80090d4 <HAL_SPI_Init>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800519c:	f7fd fed4 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80051a0:	bf00      	nop
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20002a24 	.word	0x20002a24
 80051a8:	40013000 	.word	0x40013000

080051ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_SPI_MspInit+0x84>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d12b      	bne.n	8005226 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051dc:	6453      	str	r3, [r2, #68]	; 0x44
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_SPI_MspInit+0x88>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005206:	2338      	movs	r3, #56	; 0x38
 8005208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520a:	2302      	movs	r3, #2
 800520c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005212:	2303      	movs	r3, #3
 8005214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005216:	2305      	movs	r3, #5
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521a:	f107 0314 	add.w	r3, r7, #20
 800521e:	4619      	mov	r1, r3
 8005220:	4805      	ldr	r0, [pc, #20]	; (8005238 <HAL_SPI_MspInit+0x8c>)
 8005222:	f003 f8f1 	bl	8008408 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005226:	bf00      	nop
 8005228:	3728      	adds	r7, #40	; 0x28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40013000 	.word	0x40013000
 8005234:	40023800 	.word	0x40023800
 8005238:	40020400 	.word	0x40020400

0800523c <startUI>:
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"
#include "uart.h"

void startUI(){
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b093      	sub	sp, #76	; 0x4c
 8005240:	af04      	add	r7, sp, #16
	char str1[50] = "";
 8005242:	2300      	movs	r3, #0
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	222e      	movs	r2, #46	; 0x2e
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f006 fae1 	bl	800b814 <memset>

	lcd_Clear(BLACK);
 8005252:	2000      	movs	r0, #0
 8005254:	f7fc ffcc 	bl	80021f0 <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005258:	4b32      	ldr	r3, [pc, #200]	; (8005324 <startUI+0xe8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b298      	uxth	r0, r3
 800525e:	4b32      	ldr	r3, [pc, #200]	; (8005328 <startUI+0xec>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	b299      	uxth	r1, r3
 8005264:	4b31      	ldr	r3, [pc, #196]	; (800532c <startUI+0xf0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b29a      	uxth	r2, r3
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <startUI+0xf4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	4c30      	ldr	r4, [pc, #192]	; (8005334 <startUI+0xf8>)
 8005272:	9400      	str	r4, [sp, #0]
 8005274:	f7fd f9c6 	bl	8002604 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005278:	2300      	movs	r3, #0
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	2318      	movs	r3, #24
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	f248 4330 	movw	r3, #33840	; 0x8430
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800528a:	4a2b      	ldr	r2, [pc, #172]	; (8005338 <startUI+0xfc>)
 800528c:	2137      	movs	r1, #55	; 0x37
 800528e:	203c      	movs	r0, #60	; 0x3c
 8005290:	f7fd fb92 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 8005294:	2300      	movs	r3, #0
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	2318      	movs	r3, #24
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	f248 4330 	movw	r3, #33840	; 0x8430
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a6:	4a25      	ldr	r2, [pc, #148]	; (800533c <startUI+0x100>)
 80052a8:	2164      	movs	r1, #100	; 0x64
 80052aa:	2028      	movs	r0, #40	; 0x28
 80052ac:	f7fd fb84 	bl	80029b8 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80052b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	23b4      	movs	r3, #180	; 0xb4
 80052b8:	22b4      	movs	r2, #180	; 0xb4
 80052ba:	2196      	movs	r1, #150	; 0x96
 80052bc:	203c      	movs	r0, #60	; 0x3c
 80052be:	f7fd f89a 	bl	80023f6 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 80052c2:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <startUI+0x104>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd fe96 	bl	8002ff8 <convert2str>
 80052cc:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 80052ce:	463b      	mov	r3, r7
 80052d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052d2:	4618      	mov	r0, r3
 80052d4:	f006 fb46 	bl	800b964 <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 80052d8:	463a      	mov	r2, r7
 80052da:	2301      	movs	r3, #1
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	2318      	movs	r3, #24
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ec:	2198      	movs	r1, #152	; 0x98
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7fd fbc6 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 80052f4:	2300      	movs	r3, #0
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	2318      	movs	r3, #24
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	f248 4330 	movw	r3, #33840	; 0x8430
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005306:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <startUI+0x108>)
 8005308:	21e6      	movs	r1, #230	; 0xe6
 800530a:	2050      	movs	r0, #80	; 0x50
 800530c:	f7fd fb54 	bl	80029b8 <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 8005310:	2300      	movs	r3, #0
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	2000      	movs	r0, #0
 8005318:	f001 fbba 	bl	8006a90 <show7seg>
}
 800531c:	bf00      	nop
 800531e:	373c      	adds	r7, #60	; 0x3c
 8005320:	46bd      	mov	sp, r7
 8005322:	bd90      	pop	{r4, r7, pc}
 8005324:	20000074 	.word	0x20000074
 8005328:	20000078 	.word	0x20000078
 800532c:	2000007c 	.word	0x2000007c
 8005330:	20000080 	.word	0x20000080
 8005334:	08015adc 	.word	0x08015adc
 8005338:	0800cfb8 	.word	0x0800cfb8
 800533c:	0800cfc8 	.word	0x0800cfc8
 8005340:	20000254 	.word	0x20000254
 8005344:	0800cfd8 	.word	0x0800cfd8

08005348 <eraseArrow>:

void eraseArrow()
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	f240 134b 	movw	r3, #331	; 0x14b
 8005356:	22dd      	movs	r2, #221	; 0xdd
 8005358:	21be      	movs	r1, #190	; 0xbe
 800535a:	20b4      	movs	r0, #180	; 0xb4
 800535c:	f7fc ff7a 	bl	8002254 <lcd_Fill>
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <drawArrow>:

void drawArrow()
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b083      	sub	sp, #12
 800536c:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 800536e:	f7ff ffeb 	bl	8005348 <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 8005372:	4b23      	ldr	r3, [pc, #140]	; (8005400 <drawArrow+0x98>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b298      	uxth	r0, r3
 8005378:	4b22      	ldr	r3, [pc, #136]	; (8005404 <drawArrow+0x9c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	b299      	uxth	r1, r3
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <drawArrow+0xa0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	b29a      	uxth	r2, r3
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <drawArrow+0xa4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800538e:	9400      	str	r4, [sp, #0]
 8005390:	f7fc ffad 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <drawArrow+0xa0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	b298      	uxth	r0, r3
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <drawArrow+0xa4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	b299      	uxth	r1, r3
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <drawArrow+0x98>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	b29c      	uxth	r4, r3
 80053a6:	4b19      	ldr	r3, [pc, #100]	; (800540c <drawArrow+0xa4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <drawArrow+0x9c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053be:	9200      	str	r2, [sp, #0]
 80053c0:	4622      	mov	r2, r4
 80053c2:	f7fc ff94 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <drawArrow+0x98>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	b298      	uxth	r0, r3
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <drawArrow+0x9c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	b299      	uxth	r1, r3
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <drawArrow+0x98>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	b29c      	uxth	r4, r3
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <drawArrow+0xa4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <drawArrow+0x9c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f0:	9200      	str	r2, [sp, #0]
 80053f2:	4622      	mov	r2, r4
 80053f4:	f7fc ff7b 	bl	80022ee <lcd_DrawLine>
}
 80053f8:	bf00      	nop
 80053fa:	3704      	adds	r7, #4
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd90      	pop	{r4, r7, pc}
 8005400:	20000008 	.word	0x20000008
 8005404:	20000010 	.word	0x20000010
 8005408:	20000004 	.word	0x20000004
 800540c:	2000000c 	.word	0x2000000c

08005410 <arrowInPickMode>:

void arrowInPickMode()
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8005416:	4b99      	ldr	r3, [pc, #612]	; (800567c <arrowInPickMode+0x26c>)
 8005418:	88db      	ldrh	r3, [r3, #6]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d117      	bne.n	800544e <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 800541e:	4b98      	ldr	r3, [pc, #608]	; (8005680 <arrowInPickMode+0x270>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8005424:	4b97      	ldr	r3, [pc, #604]	; (8005684 <arrowInPickMode+0x274>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b05      	cmp	r3, #5
 800542a:	d009      	beq.n	8005440 <arrowInPickMode+0x30>
 800542c:	2b05      	cmp	r3, #5
 800542e:	dc11      	bgt.n	8005454 <arrowInPickMode+0x44>
 8005430:	2b03      	cmp	r3, #3
 8005432:	d00e      	beq.n	8005452 <arrowInPickMode+0x42>
 8005434:	2b04      	cmp	r3, #4
 8005436:	d10d      	bne.n	8005454 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 8005438:	4b92      	ldr	r3, [pc, #584]	; (8005684 <arrowInPickMode+0x274>)
 800543a:	2203      	movs	r2, #3
 800543c:	601a      	str	r2, [r3, #0]
			break;
 800543e:	e009      	b.n	8005454 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8005440:	4b90      	ldr	r3, [pc, #576]	; (8005684 <arrowInPickMode+0x274>)
 8005442:	2204      	movs	r2, #4
 8005444:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 8005446:	4b90      	ldr	r3, [pc, #576]	; (8005688 <arrowInPickMode+0x278>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
			break;
 800544c:	e002      	b.n	8005454 <arrowInPickMode+0x44>
		}

	}
 800544e:	bf00      	nop
 8005450:	e000      	b.n	8005454 <arrowInPickMode+0x44>
			break;
 8005452:	bf00      	nop
	if(button_count[7] == 1)
 8005454:	4b89      	ldr	r3, [pc, #548]	; (800567c <arrowInPickMode+0x26c>)
 8005456:	89db      	ldrh	r3, [r3, #14]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d118      	bne.n	800548e <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 800545c:	4b88      	ldr	r3, [pc, #544]	; (8005680 <arrowInPickMode+0x270>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 8005462:	4b88      	ldr	r3, [pc, #544]	; (8005684 <arrowInPickMode+0x274>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b05      	cmp	r3, #5
 8005468:	d013      	beq.n	8005492 <arrowInPickMode+0x82>
 800546a:	2b05      	cmp	r3, #5
 800546c:	dc12      	bgt.n	8005494 <arrowInPickMode+0x84>
 800546e:	2b03      	cmp	r3, #3
 8005470:	d002      	beq.n	8005478 <arrowInPickMode+0x68>
 8005472:	2b04      	cmp	r3, #4
 8005474:	d007      	beq.n	8005486 <arrowInPickMode+0x76>
 8005476:	e00d      	b.n	8005494 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 8005478:	4b82      	ldr	r3, [pc, #520]	; (8005684 <arrowInPickMode+0x274>)
 800547a:	2204      	movs	r2, #4
 800547c:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 800547e:	4b82      	ldr	r3, [pc, #520]	; (8005688 <arrowInPickMode+0x278>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
			break;
 8005484:	e006      	b.n	8005494 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 8005486:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <arrowInPickMode+0x274>)
 8005488:	2205      	movs	r2, #5
 800548a:	601a      	str	r2, [r3, #0]
			break;
 800548c:	e002      	b.n	8005494 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <arrowInPickMode+0x84>
			break;
 8005492:	bf00      	nop
	if(flagChange == 1)
 8005494:	4b7a      	ldr	r3, [pc, #488]	; (8005680 <arrowInPickMode+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 814d 	bne.w	8005738 <arrowInPickMode+0x328>
	{
		switch (arrowMode)
 800549e:	4b79      	ldr	r3, [pc, #484]	; (8005684 <arrowInPickMode+0x274>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	f000 80fc 	beq.w	80056a0 <arrowInPickMode+0x290>
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	f300 8142 	bgt.w	8005732 <arrowInPickMode+0x322>
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d002      	beq.n	80054b8 <arrowInPickMode+0xa8>
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d04f      	beq.n	8005556 <arrowInPickMode+0x146>
 80054b6:	e13c      	b.n	8005732 <arrowInPickMode+0x322>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 80054b8:	4b74      	ldr	r3, [pc, #464]	; (800568c <arrowInPickMode+0x27c>)
 80054ba:	22d2      	movs	r2, #210	; 0xd2
 80054bc:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 80054be:	4b74      	ldr	r3, [pc, #464]	; (8005690 <arrowInPickMode+0x280>)
 80054c0:	22be      	movs	r2, #190	; 0xbe
 80054c2:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 80054c4:	2300      	movs	r3, #0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80054cc:	22f0      	movs	r2, #240	; 0xf0
 80054ce:	21b4      	movs	r1, #180	; 0xb4
 80054d0:	2000      	movs	r0, #0
 80054d2:	f7fc febf 	bl	8002254 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 80054d6:	2300      	movs	r3, #0
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	2318      	movs	r3, #24
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	f248 4330 	movw	r3, #33840	; 0x8430
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054e8:	4a6a      	ldr	r2, [pc, #424]	; (8005694 <arrowInPickMode+0x284>)
 80054ea:	21c8      	movs	r1, #200	; 0xc8
 80054ec:	200a      	movs	r0, #10
 80054ee:	f7fd fa63 	bl	80029b8 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80054f2:	2300      	movs	r3, #0
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	2318      	movs	r3, #24
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f248 4330 	movw	r3, #33840	; 0x8430
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005504:	4a64      	ldr	r2, [pc, #400]	; (8005698 <arrowInPickMode+0x288>)
 8005506:	21fa      	movs	r1, #250	; 0xfa
 8005508:	200a      	movs	r0, #10
 800550a:	f7fd fa55 	bl	80029b8 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 800550e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005518:	2282      	movs	r2, #130	; 0x82
 800551a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800551e:	206e      	movs	r0, #110	; 0x6e
 8005520:	f7fc fee5 	bl	80022ee <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8005524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800552e:	2278      	movs	r2, #120	; 0x78
 8005530:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005534:	206e      	movs	r0, #110	; 0x6e
 8005536:	f7fc feda 	bl	80022ee <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 800553a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005544:	2282      	movs	r2, #130	; 0x82
 8005546:	f44f 719b 	mov.w	r1, #310	; 0x136
 800554a:	2078      	movs	r0, #120	; 0x78
 800554c:	f7fc fecf 	bl	80022ee <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8005550:	f7ff ff0a 	bl	8005368 <drawArrow>
			break;
 8005554:	e0ed      	b.n	8005732 <arrowInPickMode+0x322>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 8005556:	2300      	movs	r3, #0
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800555e:	22f0      	movs	r2, #240	; 0xf0
 8005560:	21b4      	movs	r1, #180	; 0xb4
 8005562:	2000      	movs	r0, #0
 8005564:	f7fc fe76 	bl	8002254 <lcd_Fill>
			if(flagUpDOwn == 0)
 8005568:	4b47      	ldr	r3, [pc, #284]	; (8005688 <arrowInPickMode+0x278>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d13d      	bne.n	80055ec <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 8005570:	4b46      	ldr	r3, [pc, #280]	; (800568c <arrowInPickMode+0x27c>)
 8005572:	22d2      	movs	r2, #210	; 0xd2
 8005574:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 8005576:	4b46      	ldr	r3, [pc, #280]	; (8005690 <arrowInPickMode+0x280>)
 8005578:	22be      	movs	r2, #190	; 0xbe
 800557a:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 800557c:	2300      	movs	r3, #0
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	2318      	movs	r3, #24
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	f248 4330 	movw	r3, #33840	; 0x8430
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800558e:	4a42      	ldr	r2, [pc, #264]	; (8005698 <arrowInPickMode+0x288>)
 8005590:	21c8      	movs	r1, #200	; 0xc8
 8005592:	200a      	movs	r0, #10
 8005594:	f7fd fa10 	bl	80029b8 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 8005598:	2300      	movs	r3, #0
 800559a:	9302      	str	r3, [sp, #8]
 800559c:	2318      	movs	r3, #24
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055aa:	4a3c      	ldr	r2, [pc, #240]	; (800569c <arrowInPickMode+0x28c>)
 80055ac:	21fa      	movs	r1, #250	; 0xfa
 80055ae:	200a      	movs	r0, #10
 80055b0:	f7fd fa02 	bl	80029b8 <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 80055b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	23be      	movs	r3, #190	; 0xbe
 80055bc:	2282      	movs	r2, #130	; 0x82
 80055be:	21be      	movs	r1, #190	; 0xbe
 80055c0:	206e      	movs	r0, #110	; 0x6e
 80055c2:	f7fc fe94 	bl	80022ee <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 80055c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	23b4      	movs	r3, #180	; 0xb4
 80055ce:	2278      	movs	r2, #120	; 0x78
 80055d0:	21be      	movs	r1, #190	; 0xbe
 80055d2:	206e      	movs	r0, #110	; 0x6e
 80055d4:	f7fc fe8b 	bl	80022ee <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 80055d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	23be      	movs	r3, #190	; 0xbe
 80055e0:	2282      	movs	r2, #130	; 0x82
 80055e2:	21b4      	movs	r1, #180	; 0xb4
 80055e4:	2078      	movs	r0, #120	; 0x78
 80055e6:	f7fc fe82 	bl	80022ee <lcd_DrawLine>
 80055ea:	e043      	b.n	8005674 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <arrowInPickMode+0x27c>)
 80055ee:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055f2:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 80055f4:	4b26      	ldr	r3, [pc, #152]	; (8005690 <arrowInPickMode+0x280>)
 80055f6:	22f0      	movs	r2, #240	; 0xf0
 80055f8:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 80055fa:	2300      	movs	r3, #0
 80055fc:	9302      	str	r3, [sp, #8]
 80055fe:	2318      	movs	r3, #24
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	f248 4330 	movw	r3, #33840	; 0x8430
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800560c:	4a21      	ldr	r2, [pc, #132]	; (8005694 <arrowInPickMode+0x284>)
 800560e:	21c8      	movs	r1, #200	; 0xc8
 8005610:	200a      	movs	r0, #10
 8005612:	f7fd f9d1 	bl	80029b8 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8005616:	2300      	movs	r3, #0
 8005618:	9302      	str	r3, [sp, #8]
 800561a:	2318      	movs	r3, #24
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	f248 4330 	movw	r3, #33840	; 0x8430
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005628:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <arrowInPickMode+0x288>)
 800562a:	21fa      	movs	r1, #250	; 0xfa
 800562c:	200a      	movs	r0, #10
 800562e:	f7fd f9c3 	bl	80029b8 <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 8005632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800563c:	2282      	movs	r2, #130	; 0x82
 800563e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005642:	206e      	movs	r0, #110	; 0x6e
 8005644:	f7fc fe53 	bl	80022ee <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 8005648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8005652:	2278      	movs	r2, #120	; 0x78
 8005654:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005658:	206e      	movs	r0, #110	; 0x6e
 800565a:	f7fc fe48 	bl	80022ee <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 800565e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005668:	2282      	movs	r2, #130	; 0x82
 800566a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800566e:	2078      	movs	r0, #120	; 0x78
 8005670:	f7fc fe3d 	bl	80022ee <lcd_DrawLine>
			}

			drawArrow();
 8005674:	f7ff fe78 	bl	8005368 <drawArrow>
			break;
 8005678:	e05b      	b.n	8005732 <arrowInPickMode+0x322>
 800567a:	bf00      	nop
 800567c:	200001d4 	.word	0x200001d4
 8005680:	20000264 	.word	0x20000264
 8005684:	20000014 	.word	0x20000014
 8005688:	20000260 	.word	0x20000260
 800568c:	2000000c 	.word	0x2000000c
 8005690:	20000010 	.word	0x20000010
 8005694:	0800cfe0 	.word	0x0800cfe0
 8005698:	0800cff0 	.word	0x0800cff0
 800569c:	0800d000 	.word	0x0800d000
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <arrowInPickMode+0x330>)
 80056a2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056a6:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 80056a8:	4b26      	ldr	r3, [pc, #152]	; (8005744 <arrowInPickMode+0x334>)
 80056aa:	22f0      	movs	r2, #240	; 0xf0
 80056ac:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 80056ae:	2300      	movs	r3, #0
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80056b6:	22f0      	movs	r2, #240	; 0xf0
 80056b8:	21b4      	movs	r1, #180	; 0xb4
 80056ba:	2000      	movs	r0, #0
 80056bc:	f7fc fdca 	bl	8002254 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80056c0:	2300      	movs	r3, #0
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	2318      	movs	r3, #24
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	f248 4330 	movw	r3, #33840	; 0x8430
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056d2:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <arrowInPickMode+0x338>)
 80056d4:	21c8      	movs	r1, #200	; 0xc8
 80056d6:	200a      	movs	r0, #10
 80056d8:	f7fd f96e 	bl	80029b8 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 80056dc:	2300      	movs	r3, #0
 80056de:	9302      	str	r3, [sp, #8]
 80056e0:	2318      	movs	r3, #24
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	f248 4330 	movw	r3, #33840	; 0x8430
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <arrowInPickMode+0x33c>)
 80056f0:	21fa      	movs	r1, #250	; 0xfa
 80056f2:	200a      	movs	r0, #10
 80056f4:	f7fd f960 	bl	80029b8 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 80056f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	23be      	movs	r3, #190	; 0xbe
 8005700:	2282      	movs	r2, #130	; 0x82
 8005702:	21be      	movs	r1, #190	; 0xbe
 8005704:	206e      	movs	r0, #110	; 0x6e
 8005706:	f7fc fdf2 	bl	80022ee <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 800570a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	23b4      	movs	r3, #180	; 0xb4
 8005712:	2278      	movs	r2, #120	; 0x78
 8005714:	21be      	movs	r1, #190	; 0xbe
 8005716:	206e      	movs	r0, #110	; 0x6e
 8005718:	f7fc fde9 	bl	80022ee <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 800571c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	23be      	movs	r3, #190	; 0xbe
 8005724:	2282      	movs	r2, #130	; 0x82
 8005726:	21b4      	movs	r1, #180	; 0xb4
 8005728:	2078      	movs	r0, #120	; 0x78
 800572a:	f7fc fde0 	bl	80022ee <lcd_DrawLine>

			// draw arrow
			drawArrow();
 800572e:	f7ff fe1b 	bl	8005368 <drawArrow>
		}
		flagChange = 0;
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <arrowInPickMode+0x340>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
	}
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000000c 	.word	0x2000000c
 8005744:	20000010 	.word	0x20000010
 8005748:	0800cff0 	.word	0x0800cff0
 800574c:	0800d000 	.word	0x0800d000
 8005750:	20000264 	.word	0x20000264

08005754 <pickMode>:

void pickMode(uint16_t id){
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b095      	sub	sp, #84	; 0x54
 8005758:	af04      	add	r7, sp, #16
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 800575e:	2000      	movs	r0, #0
 8005760:	f7fc fd46 	bl	80021f0 <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005764:	4b4e      	ldr	r3, [pc, #312]	; (80058a0 <pickMode+0x14c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b298      	uxth	r0, r3
 800576a:	4b4e      	ldr	r3, [pc, #312]	; (80058a4 <pickMode+0x150>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	b299      	uxth	r1, r3
 8005770:	4b4d      	ldr	r3, [pc, #308]	; (80058a8 <pickMode+0x154>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	4b4d      	ldr	r3, [pc, #308]	; (80058ac <pickMode+0x158>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	4c4c      	ldr	r4, [pc, #304]	; (80058b0 <pickMode+0x15c>)
 800577e:	9400      	str	r4, [sp, #0]
 8005780:	f7fc ff40 	bl	8002604 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005784:	2300      	movs	r3, #0
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	2318      	movs	r3, #24
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	f248 4330 	movw	r3, #33840	; 0x8430
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005796:	4a47      	ldr	r2, [pc, #284]	; (80058b4 <pickMode+0x160>)
 8005798:	2137      	movs	r1, #55	; 0x37
 800579a:	203c      	movs	r0, #60	; 0x3c
 800579c:	f7fd f90c 	bl	80029b8 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80057a0:	4a45      	ldr	r2, [pc, #276]	; (80058b8 <pickMode+0x164>)
 80057a2:	f107 0308 	add.w	r3, r7, #8
 80057a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057aa:	6018      	str	r0, [r3, #0]
 80057ac:	3304      	adds	r3, #4
 80057ae:	8019      	strh	r1, [r3, #0]
 80057b0:	f107 030e 	add.w	r3, r7, #14
 80057b4:	222c      	movs	r2, #44	; 0x2c
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f006 f82b 	bl	800b814 <memset>
	char *str2 = convert2str(id);
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fd fc19 	bl	8002ff8 <convert2str>
 80057c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80057c8:	f107 0308 	add.w	r3, r7, #8
 80057cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ce:	4618      	mov	r0, r3
 80057d0:	f006 f8c8 	bl	800b964 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80057d4:	f107 0208 	add.w	r2, r7, #8
 80057d8:	2300      	movs	r3, #0
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	2318      	movs	r3, #24
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057ea:	2164      	movs	r1, #100	; 0x64
 80057ec:	2000      	movs	r0, #0
 80057ee:	f7fd f947 	bl	8002a80 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 80057f2:	2300      	movs	r3, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	2318      	movs	r3, #24
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	f248 4330 	movw	r3, #33840	; 0x8430
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005804:	4a2d      	ldr	r2, [pc, #180]	; (80058bc <pickMode+0x168>)
 8005806:	2196      	movs	r1, #150	; 0x96
 8005808:	2000      	movs	r0, #0
 800580a:	f7fd f939 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 800580e:	2300      	movs	r3, #0
 8005810:	9302      	str	r3, [sp, #8]
 8005812:	2318      	movs	r3, #24
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	f248 4330 	movw	r3, #33840	; 0x8430
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <pickMode+0x16c>)
 8005822:	21c8      	movs	r1, #200	; 0xc8
 8005824:	200a      	movs	r0, #10
 8005826:	f7fd f8c7 	bl	80029b8 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 800582a:	2300      	movs	r3, #0
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	2318      	movs	r3, #24
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	f248 4330 	movw	r3, #33840	; 0x8430
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800583c:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <pickMode+0x170>)
 800583e:	21fa      	movs	r1, #250	; 0xfa
 8005840:	200a      	movs	r0, #10
 8005842:	f7fd f8b9 	bl	80029b8 <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 8005846:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <pickMode+0x174>)
 8005848:	22d2      	movs	r2, #210	; 0xd2
 800584a:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 800584c:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <pickMode+0x178>)
 800584e:	22be      	movs	r2, #190	; 0xbe
 8005850:	601a      	str	r2, [r3, #0]
	drawArrow();
 8005852:	f7ff fd89 	bl	8005368 <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8005856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005860:	2282      	movs	r2, #130	; 0x82
 8005862:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005866:	206e      	movs	r0, #110	; 0x6e
 8005868:	f7fc fd41 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 800586c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	f44f 739b 	mov.w	r3, #310	; 0x136
 8005876:	2278      	movs	r2, #120	; 0x78
 8005878:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800587c:	206e      	movs	r0, #110	; 0x6e
 800587e:	f7fc fd36 	bl	80022ee <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8005882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800588c:	2282      	movs	r2, #130	; 0x82
 800588e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005892:	2078      	movs	r0, #120	; 0x78
 8005894:	f7fc fd2b 	bl	80022ee <lcd_DrawLine>

}
 8005898:	bf00      	nop
 800589a:	3744      	adds	r7, #68	; 0x44
 800589c:	46bd      	mov	sp, r7
 800589e:	bd90      	pop	{r4, r7, pc}
 80058a0:	20000074 	.word	0x20000074
 80058a4:	20000078 	.word	0x20000078
 80058a8:	2000007c 	.word	0x2000007c
 80058ac:	20000080 	.word	0x20000080
 80058b0:	08015adc 	.word	0x08015adc
 80058b4:	0800cfb8 	.word	0x0800cfb8
 80058b8:	0800d018 	.word	0x0800d018
 80058bc:	0800d010 	.word	0x0800d010
 80058c0:	0800cfe0 	.word	0x0800cfe0
 80058c4:	0800cff0 	.word	0x0800cff0
 80058c8:	2000000c 	.word	0x2000000c
 80058cc:	20000010 	.word	0x20000010

080058d0 <beginStartGame>:

void beginStartGame()
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b094      	sub	sp, #80	; 0x50
 80058d4:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 80058d6:	4b9d      	ldr	r3, [pc, #628]	; (8005b4c <beginStartGame+0x27c>)
 80058d8:	8b9b      	ldrh	r3, [r3, #28]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	f040 81bc 	bne.w	8005c58 <beginStartGame+0x388>
	{
		// button_init();
		switch (statusGame) {
 80058e0:	4b9b      	ldr	r3, [pc, #620]	; (8005b50 <beginStartGame+0x280>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b0a      	cmp	r3, #10
 80058e6:	f200 81b9 	bhi.w	8005c5c <beginStartGame+0x38c>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <beginStartGame+0x20>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	08005943 	.word	0x08005943
 80058f8:	0800595b 	.word	0x0800595b
 80058fc:	08005c5d 	.word	0x08005c5d
 8005900:	08005c5d 	.word	0x08005c5d
 8005904:	08005c5d 	.word	0x08005c5d
 8005908:	08005b79 	.word	0x08005b79
 800590c:	08005a5d 	.word	0x08005a5d
 8005910:	080059cf 	.word	0x080059cf
 8005914:	08005a0d 	.word	0x08005a0d
 8005918:	08005bed 	.word	0x08005bed
			case INIT:
				statusGame = STARTMODE;
 800591c:	4b8c      	ldr	r3, [pc, #560]	; (8005b50 <beginStartGame+0x280>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
				ID = 0;
 8005922:	4b8c      	ldr	r3, [pc, #560]	; (8005b54 <beginStartGame+0x284>)
 8005924:	2200      	movs	r2, #0
 8005926:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8005928:	4b8b      	ldr	r3, [pc, #556]	; (8005b58 <beginStartGame+0x288>)
 800592a:	2200      	movs	r2, #0
 800592c:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 800592e:	4b8b      	ldr	r3, [pc, #556]	; (8005b5c <beginStartGame+0x28c>)
 8005930:	2203      	movs	r2, #3
 8005932:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8005934:	4b8a      	ldr	r3, [pc, #552]	; (8005b60 <beginStartGame+0x290>)
 8005936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800593a:	801a      	strh	r2, [r3, #0]
				startUI();
 800593c:	f7ff fc7e 	bl	800523c <startUI>
				break;
 8005940:	e191      	b.n	8005c66 <beginStartGame+0x396>
			case STARTMODE:
				TOTALTIME = 0;
 8005942:	4b88      	ldr	r3, [pc, #544]	; (8005b64 <beginStartGame+0x294>)
 8005944:	2200      	movs	r2, #0
 8005946:	801a      	strh	r2, [r3, #0]
				statusGame = PICKMODE;
 8005948:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <beginStartGame+0x280>)
 800594a:	2202      	movs	r2, #2
 800594c:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 800594e:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <beginStartGame+0x284>)
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fefe 	bl	8005754 <pickMode>
				break;
 8005958:	e185      	b.n	8005c66 <beginStartGame+0x396>
			case PICKMODE:
				switch (arrowMode)
 800595a:	4b80      	ldr	r3, [pc, #512]	; (8005b5c <beginStartGame+0x28c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b05      	cmp	r3, #5
 8005960:	d028      	beq.n	80059b4 <beginStartGame+0xe4>
 8005962:	2b05      	cmp	r3, #5
 8005964:	f300 817c 	bgt.w	8005c60 <beginStartGame+0x390>
 8005968:	2b03      	cmp	r3, #3
 800596a:	d002      	beq.n	8005972 <beginStartGame+0xa2>
 800596c:	2b04      	cmp	r3, #4
 800596e:	d015      	beq.n	800599c <beginStartGame+0xcc>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 8005970:	e176      	b.n	8005c60 <beginStartGame+0x390>
					oldStatusGame = NORMALMODE;
 8005972:	4b7d      	ldr	r3, [pc, #500]	; (8005b68 <beginStartGame+0x298>)
 8005974:	2203      	movs	r2, #3
 8005976:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 8005978:	4b75      	ldr	r3, [pc, #468]	; (8005b50 <beginStartGame+0x280>)
 800597a:	2203      	movs	r2, #3
 800597c:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 800597e:	4b75      	ldr	r3, [pc, #468]	; (8005b54 <beginStartGame+0x284>)
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	4a75      	ldr	r2, [pc, #468]	; (8005b58 <beginStartGame+0x288>)
 8005984:	8812      	ldrh	r2, [r2, #0]
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd fb71 	bl	8003070 <setUpLcdNormalPlay>
					setTimerUart(1000);
 800598e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005992:	f7ff fac1 	bl	8004f18 <setTimerUart>
					snakeInit();
 8005996:	f7fe fd87 	bl	80044a8 <snakeInit>
					break;
 800599a:	e017      	b.n	80059cc <beginStartGame+0xfc>
					oldStatusGame = TIMINGMODE;
 800599c:	4b72      	ldr	r3, [pc, #456]	; (8005b68 <beginStartGame+0x298>)
 800599e:	2204      	movs	r2, #4
 80059a0:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 80059a2:	4b6f      	ldr	r3, [pc, #444]	; (8005b60 <beginStartGame+0x290>)
 80059a4:	221e      	movs	r2, #30
 80059a6:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 80059a8:	4b69      	ldr	r3, [pc, #420]	; (8005b50 <beginStartGame+0x280>)
 80059aa:	2208      	movs	r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
					setupTiming();
 80059ae:	f000 ff7b 	bl	80068a8 <setupTiming>
					break;
 80059b2:	e00b      	b.n	80059cc <beginStartGame+0xfc>
					oldStatusGame = ADVANCEMODE;
 80059b4:	4b6c      	ldr	r3, [pc, #432]	; (8005b68 <beginStartGame+0x298>)
 80059b6:	2205      	movs	r2, #5
 80059b8:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 80059ba:	4b69      	ldr	r3, [pc, #420]	; (8005b60 <beginStartGame+0x290>)
 80059bc:	221e      	movs	r2, #30
 80059be:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 80059c0:	4b63      	ldr	r3, [pc, #396]	; (8005b50 <beginStartGame+0x280>)
 80059c2:	2209      	movs	r2, #9
 80059c4:	601a      	str	r2, [r3, #0]
					setupAdvance();
 80059c6:	f7fa fefb 	bl	80007c0 <setupAdvance>
					break;
 80059ca:	bf00      	nop
				break;
 80059cc:	e148      	b.n	8005c60 <beginStartGame+0x390>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 80059ce:	4b64      	ldr	r3, [pc, #400]	; (8005b60 <beginStartGame+0x290>)
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fa48 	bl	8004e68 <setTimerTiming>
				setTimerDeTime(1000);
 80059d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059dc:	f7ff fa64 	bl	8004ea8 <setTimerDeTime>
				oldTiming = TIMING;
 80059e0:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <beginStartGame+0x290>)
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <beginStartGame+0x29c>)
 80059e6:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 80059e8:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <beginStartGame+0x280>)
 80059ea:	2204      	movs	r2, #4
 80059ec:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 80059ee:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <beginStartGame+0x284>)
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	4a5b      	ldr	r2, [pc, #364]	; (8005b60 <beginStartGame+0x290>)
 80059f4:	8812      	ldrh	r2, [r2, #0]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fd fbf1 	bl	80031e0 <setUpLcdTimingPlay>
				setTimerUart(1000);
 80059fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a02:	f7ff fa89 	bl	8004f18 <setTimerUart>
				snakeInit();
 8005a06:	f7fe fd4f 	bl	80044a8 <snakeInit>
				break;
 8005a0a:	e12c      	b.n	8005c66 <beginStartGame+0x396>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 8005a0c:	4b54      	ldr	r3, [pc, #336]	; (8005b60 <beginStartGame+0x290>)
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fa29 	bl	8004e68 <setTimerTiming>
				setTimerDeTime(1000);
 8005a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a1a:	f7ff fa45 	bl	8004ea8 <setTimerDeTime>
				setTimerGenerateWall(2000);
 8005a1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a22:	f7ff fa5d 	bl	8004ee0 <setTimerGenerateWall>
				flagForGenerateWall = 0;
 8005a26:	4b52      	ldr	r3, [pc, #328]	; (8005b70 <beginStartGame+0x2a0>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 8005a2c:	4b4c      	ldr	r3, [pc, #304]	; (8005b60 <beginStartGame+0x290>)
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	4b4e      	ldr	r3, [pc, #312]	; (8005b6c <beginStartGame+0x29c>)
 8005a32:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 8005a34:	4b46      	ldr	r3, [pc, #280]	; (8005b50 <beginStartGame+0x280>)
 8005a36:	2205      	movs	r2, #5
 8005a38:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 8005a3a:	4b46      	ldr	r3, [pc, #280]	; (8005b54 <beginStartGame+0x284>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	4a48      	ldr	r2, [pc, #288]	; (8005b60 <beginStartGame+0x290>)
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fd fc81 	bl	800334c <setUpLcdAdvancePlay>
				setTimerUart(1000);
 8005a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a4e:	f7ff fa63 	bl	8004f18 <setTimerUart>
				wallInit();
 8005a52:	f7fe fc43 	bl	80042dc <wallInit>
				snakeInit();
 8005a56:	f7fe fd27 	bl	80044a8 <snakeInit>
				break;
 8005a5a:	e104      	b.n	8005c66 <beginStartGame+0x396>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 8005a5c:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <beginStartGame+0x2a4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d15f      	bne.n	8005b24 <beginStartGame+0x254>
				{
					statusGame = oldStatusGame;
 8005a64:	4b40      	ldr	r3, [pc, #256]	; (8005b68 <beginStartGame+0x298>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a39      	ldr	r2, [pc, #228]	; (8005b50 <beginStartGame+0x280>)
 8005a6a:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 8005a6c:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <beginStartGame+0x288>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <beginStartGame+0x280>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d030      	beq.n	8005adc <beginStartGame+0x20c>
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	f300 80f2 	bgt.w	8005c64 <beginStartGame+0x394>
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d002      	beq.n	8005a8a <beginStartGame+0x1ba>
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d00e      	beq.n	8005aa6 <beginStartGame+0x1d6>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8005a88:	e0ec      	b.n	8005c64 <beginStartGame+0x394>
						oldStatusGame = NORMALMODE;
 8005a8a:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <beginStartGame+0x298>)
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 8005a90:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <beginStartGame+0x284>)
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	4a30      	ldr	r2, [pc, #192]	; (8005b58 <beginStartGame+0x288>)
 8005a96:	8812      	ldrh	r2, [r2, #0]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd fae8 	bl	8003070 <setUpLcdNormalPlay>
						snakeInit();
 8005aa0:	f7fe fd02 	bl	80044a8 <snakeInit>
						break;
 8005aa4:	e051      	b.n	8005b4a <beginStartGame+0x27a>
						oldStatusGame = TIMINGMODE;
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <beginStartGame+0x298>)
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005aac:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <beginStartGame+0x29c>)
 8005aae:	881a      	ldrh	r2, [r3, #0]
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <beginStartGame+0x290>)
 8005ab2:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <beginStartGame+0x290>)
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff f9d5 	bl	8004e68 <setTimerTiming>
						setTimerDeTime(1000);
 8005abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ac2:	f7ff f9f1 	bl	8004ea8 <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 8005ac6:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <beginStartGame+0x284>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <beginStartGame+0x290>)
 8005acc:	8812      	ldrh	r2, [r2, #0]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fd fb85 	bl	80031e0 <setUpLcdTimingPlay>
						snakeInit();
 8005ad6:	f7fe fce7 	bl	80044a8 <snakeInit>
						break;
 8005ada:	e036      	b.n	8005b4a <beginStartGame+0x27a>
						oldStatusGame = ADVANCEMODE;
 8005adc:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <beginStartGame+0x298>)
 8005ade:	2205      	movs	r2, #5
 8005ae0:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <beginStartGame+0x29c>)
 8005ae4:	881a      	ldrh	r2, [r3, #0]
 8005ae6:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <beginStartGame+0x290>)
 8005ae8:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005aea:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <beginStartGame+0x290>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff f9ba 	bl	8004e68 <setTimerTiming>
						setTimerDeTime(1000);
 8005af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005af8:	f7ff f9d6 	bl	8004ea8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005afc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b00:	f7ff f9ee 	bl	8004ee0 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005b04:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <beginStartGame+0x2a0>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <beginStartGame+0x284>)
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <beginStartGame+0x290>)
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd fc19 	bl	800334c <setUpLcdAdvancePlay>
						snakeInit();
 8005b1a:	f7fe fcc5 	bl	80044a8 <snakeInit>
						wallInit();
 8005b1e:	f7fe fbdd 	bl	80042dc <wallInit>
						break;
 8005b22:	e012      	b.n	8005b4a <beginStartGame+0x27a>
					statusGame = STARTMODE;
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <beginStartGame+0x280>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <beginStartGame+0x284>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005b30:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <beginStartGame+0x288>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <beginStartGame+0x28c>)
 8005b38:	2203      	movs	r2, #3
 8005b3a:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <beginStartGame+0x290>)
 8005b3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b42:	801a      	strh	r2, [r3, #0]
					startUI();
 8005b44:	f7ff fb7a 	bl	800523c <startUI>
				break;
 8005b48:	e08c      	b.n	8005c64 <beginStartGame+0x394>
 8005b4a:	e08b      	b.n	8005c64 <beginStartGame+0x394>
 8005b4c:	200001d4 	.word	0x200001d4
 8005b50:	20000268 	.word	0x20000268
 8005b54:	20000254 	.word	0x20000254
 8005b58:	20000256 	.word	0x20000256
 8005b5c:	20000014 	.word	0x20000014
 8005b60:	20000000 	.word	0x20000000
 8005b64:	20000280 	.word	0x20000280
 8005b68:	2000026c 	.word	0x2000026c
 8005b6c:	2000027c 	.word	0x2000027c
 8005b70:	20002a12 	.word	0x20002a12
 8005b74:	2000025c 	.word	0x2000025c
			case STOPMODE:
				if(arrowStopMode == RESUME)
 8005b78:	4baf      	ldr	r3, [pc, #700]	; (8005e38 <beginStartGame+0x568>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d122      	bne.n	8005bc6 <beginStartGame+0x2f6>
				{
					statusGame = oldStatusGame;
 8005b80:	4bae      	ldr	r3, [pc, #696]	; (8005e3c <beginStartGame+0x56c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4aae      	ldr	r2, [pc, #696]	; (8005e40 <beginStartGame+0x570>)
 8005b86:	6013      	str	r3, [r2, #0]
					setTimerUart(1000);
 8005b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b8c:	f7ff f9c4 	bl	8004f18 <setTimerUart>
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005b90:	4bab      	ldr	r3, [pc, #684]	; (8005e40 <beginStartGame+0x570>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d003      	beq.n	8005ba0 <beginStartGame+0x2d0>
 8005b98:	4ba9      	ldr	r3, [pc, #676]	; (8005e40 <beginStartGame+0x570>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d10f      	bne.n	8005bc0 <beginStartGame+0x2f0>
					{
						setTimerTiming(TIMING);
 8005ba0:	4ba8      	ldr	r3, [pc, #672]	; (8005e44 <beginStartGame+0x574>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff f95f 	bl	8004e68 <setTimerTiming>
						setTimerDeTime(1000);
 8005baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bae:	f7ff f97b 	bl	8004ea8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005bb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005bb6:	f7ff f993 	bl	8004ee0 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005bba:	4ba3      	ldr	r3, [pc, #652]	; (8005e48 <beginStartGame+0x578>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 8005bc0:	f7fe f8ec 	bl	8003d9c <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8005bc4:	e04f      	b.n	8005c66 <beginStartGame+0x396>
					statusGame = STARTMODE;
 8005bc6:	4b9e      	ldr	r3, [pc, #632]	; (8005e40 <beginStartGame+0x570>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005bcc:	4b9f      	ldr	r3, [pc, #636]	; (8005e4c <beginStartGame+0x57c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005bd2:	4b9f      	ldr	r3, [pc, #636]	; (8005e50 <beginStartGame+0x580>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005bd8:	4b9e      	ldr	r3, [pc, #632]	; (8005e54 <beginStartGame+0x584>)
 8005bda:	2203      	movs	r2, #3
 8005bdc:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005bde:	4b99      	ldr	r3, [pc, #612]	; (8005e44 <beginStartGame+0x574>)
 8005be0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005be4:	801a      	strh	r2, [r3, #0]
					startUI();
 8005be6:	f7ff fb29 	bl	800523c <startUI>
				break;
 8005bea:	e03c      	b.n	8005c66 <beginStartGame+0x396>
			case EXITMODE:
				if(arrowExitMode == YES)
 8005bec:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <beginStartGame+0x588>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d112      	bne.n	8005c1a <beginStartGame+0x34a>
				{
					statusGame = STARTMODE;
 8005bf4:	4b92      	ldr	r3, [pc, #584]	; (8005e40 <beginStartGame+0x570>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005bfa:	4b94      	ldr	r3, [pc, #592]	; (8005e4c <beginStartGame+0x57c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005c00:	4b93      	ldr	r3, [pc, #588]	; (8005e50 <beginStartGame+0x580>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005c06:	4b93      	ldr	r3, [pc, #588]	; (8005e54 <beginStartGame+0x584>)
 8005c08:	2203      	movs	r2, #3
 8005c0a:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005c0c:	4b8d      	ldr	r3, [pc, #564]	; (8005e44 <beginStartGame+0x574>)
 8005c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c12:	801a      	strh	r2, [r3, #0]
					startUI();
 8005c14:	f7ff fb12 	bl	800523c <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 8005c18:	e020      	b.n	8005c5c <beginStartGame+0x38c>
					statusGame = oldStatusGame;
 8005c1a:	4b88      	ldr	r3, [pc, #544]	; (8005e3c <beginStartGame+0x56c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a88      	ldr	r2, [pc, #544]	; (8005e40 <beginStartGame+0x570>)
 8005c20:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005c22:	4b87      	ldr	r3, [pc, #540]	; (8005e40 <beginStartGame+0x570>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d003      	beq.n	8005c32 <beginStartGame+0x362>
 8005c2a:	4b85      	ldr	r3, [pc, #532]	; (8005e40 <beginStartGame+0x570>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d10f      	bne.n	8005c52 <beginStartGame+0x382>
						setTimerTiming(TIMING);
 8005c32:	4b84      	ldr	r3, [pc, #528]	; (8005e44 <beginStartGame+0x574>)
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff f916 	bl	8004e68 <setTimerTiming>
						setTimerDeTime(1000);
 8005c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c40:	f7ff f932 	bl	8004ea8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005c44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005c48:	f7ff f94a 	bl	8004ee0 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005c4c:	4b7e      	ldr	r3, [pc, #504]	; (8005e48 <beginStartGame+0x578>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	801a      	strh	r2, [r3, #0]
					resumeGame();
 8005c52:	f7fe f8a3 	bl	8003d9c <resumeGame>
				break;
 8005c56:	e001      	b.n	8005c5c <beginStartGame+0x38c>
		}
	}
 8005c58:	bf00      	nop
 8005c5a:	e004      	b.n	8005c66 <beginStartGame+0x396>
				break;
 8005c5c:	bf00      	nop
 8005c5e:	e002      	b.n	8005c66 <beginStartGame+0x396>
				break;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <beginStartGame+0x396>
				break;
 8005c64:	bf00      	nop
	if(statusGame == STARTMODE){
 8005c66:	4b76      	ldr	r3, [pc, #472]	; (8005e40 <beginStartGame+0x570>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	f040 815f 	bne.w	8005f2e <beginStartGame+0x65e>
		char str1[50] = "";
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	f107 0308 	add.w	r3, r7, #8
 8005c78:	222e      	movs	r2, #46	; 0x2e
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f005 fdc9 	bl	800b814 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 8005c82:	4b72      	ldr	r3, [pc, #456]	; (8005e4c <beginStartGame+0x57c>)
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c8c:	e14b      	b.n	8005f26 <beginStartGame+0x656>
		{
			if(button_count[i] == 1)
 8005c8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c90:	4a72      	ldr	r2, [pc, #456]	; (8005e5c <beginStartGame+0x58c>)
 8005c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	f040 8142 	bne.w	8005f20 <beginStartGame+0x650>
			{
//				button_count[i] = 0;
				switch (i)
 8005c9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c9e:	2b0d      	cmp	r3, #13
 8005ca0:	f200 811a 	bhi.w	8005ed8 <beginStartGame+0x608>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <beginStartGame+0x3dc>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005ce5 	.word	0x08005ce5
 8005cb0:	08005d11 	.word	0x08005d11
 8005cb4:	08005d3d 	.word	0x08005d3d
 8005cb8:	08005f1f 	.word	0x08005f1f
 8005cbc:	08005d69 	.word	0x08005d69
 8005cc0:	08005d91 	.word	0x08005d91
 8005cc4:	08005db9 	.word	0x08005db9
 8005cc8:	08005f1f 	.word	0x08005f1f
 8005ccc:	08005de1 	.word	0x08005de1
 8005cd0:	08005e0d 	.word	0x08005e0d
 8005cd4:	08005e61 	.word	0x08005e61
 8005cd8:	08005f1f 	.word	0x08005f1f
 8005cdc:	08005e8d 	.word	0x08005e8d
 8005ce0:	08005eb7 	.word	0x08005eb7
				{
					case 0:
						val = val*10 + i+1;
 8005ce4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	0092      	lsls	r2, r2, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cf2:	4413      	add	r3, r2
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005cfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fd f97b 	bl	8002ff8 <convert2str>
 8005d02:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f005 fe2b 	bl	800b964 <strcat>
						break;
 8005d0e:	e0e3      	b.n	8005ed8 <beginStartGame+0x608>
					case 1:
						val = val*10 + i+1;
 8005d10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d12:	461a      	mov	r2, r3
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d1e:	4413      	add	r3, r2
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005d26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd f965 	bl	8002ff8 <convert2str>
 8005d2e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d34:	4618      	mov	r0, r3
 8005d36:	f005 fe15 	bl	800b964 <strcat>
						break;
 8005d3a:	e0cd      	b.n	8005ed8 <beginStartGame+0x608>
					case 2:
						val = val*10 + i+1;
 8005d3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d3e:	461a      	mov	r2, r3
 8005d40:	0092      	lsls	r2, r2, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d4a:	4413      	add	r3, r2
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3301      	adds	r3, #1
 8005d50:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005d52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fd f94f 	bl	8002ff8 <convert2str>
 8005d5a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d60:	4618      	mov	r0, r3
 8005d62:	f005 fdff 	bl	800b964 <strcat>
						break;
 8005d66:	e0b7      	b.n	8005ed8 <beginStartGame+0x608>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 8005d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	0092      	lsls	r2, r2, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d76:	4413      	add	r3, r2
 8005d78:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005d7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fd f93b 	bl	8002ff8 <convert2str>
 8005d82:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f005 fdeb 	bl	800b964 <strcat>
						break;
 8005d8e:	e0a3      	b.n	8005ed8 <beginStartGame+0x608>
					case 5:
						val = val*10 + i;
 8005d90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d92:	461a      	mov	r2, r3
 8005d94:	0092      	lsls	r2, r2, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d9e:	4413      	add	r3, r2
 8005da0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005da2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fd f927 	bl	8002ff8 <convert2str>
 8005daa:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005dac:	1d3b      	adds	r3, r7, #4
 8005dae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db0:	4618      	mov	r0, r3
 8005db2:	f005 fdd7 	bl	800b964 <strcat>
						break;
 8005db6:	e08f      	b.n	8005ed8 <beginStartGame+0x608>
					case 6:
						val = val*10 + i;
 8005db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dba:	461a      	mov	r2, r3
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dc6:	4413      	add	r3, r2
 8005dc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005dca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fd f913 	bl	8002ff8 <convert2str>
 8005dd2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f005 fdc3 	bl	800b964 <strcat>
						break;
 8005dde:	e07b      	b.n	8005ed8 <beginStartGame+0x608>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 8005de0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005de2:	461a      	mov	r2, r3
 8005de4:	0092      	lsls	r2, r2, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dee:	4413      	add	r3, r2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005df6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd f8fd 	bl	8002ff8 <convert2str>
 8005dfe:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005e00:	1d3b      	adds	r3, r7, #4
 8005e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e04:	4618      	mov	r0, r3
 8005e06:	f005 fdad 	bl	800b964 <strcat>
						break;
 8005e0a:	e065      	b.n	8005ed8 <beginStartGame+0x608>
					case 9:
						val = val*10 + i-1;
 8005e0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e0e:	461a      	mov	r2, r3
 8005e10:	0092      	lsls	r2, r2, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e1a:	4413      	add	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005e22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fd f8e7 	bl	8002ff8 <convert2str>
 8005e2a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e30:	4618      	mov	r0, r3
 8005e32:	f005 fd97 	bl	800b964 <strcat>
						break;
 8005e36:	e04f      	b.n	8005ed8 <beginStartGame+0x608>
 8005e38:	2000005c 	.word	0x2000005c
 8005e3c:	2000026c 	.word	0x2000026c
 8005e40:	20000268 	.word	0x20000268
 8005e44:	20000000 	.word	0x20000000
 8005e48:	20002a12 	.word	0x20002a12
 8005e4c:	20000254 	.word	0x20000254
 8005e50:	20000256 	.word	0x20000256
 8005e54:	20000014 	.word	0x20000014
 8005e58:	20000060 	.word	0x20000060
 8005e5c:	200001d4 	.word	0x200001d4
					case 10:
						val = val*10 + i-1;
 8005e60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e62:	461a      	mov	r2, r3
 8005e64:	0092      	lsls	r2, r2, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e6e:	4413      	add	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005e76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd f8bd 	bl	8002ff8 <convert2str>
 8005e7e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005e80:	1d3b      	adds	r3, r7, #4
 8005e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e84:	4618      	mov	r0, r3
 8005e86:	f005 fd6d 	bl	800b964 <strcat>
						break;
 8005e8a:	e025      	b.n	8005ed8 <beginStartGame+0x608>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8005e8c:	4b40      	ldr	r3, [pc, #256]	; (8005f90 <beginStartGame+0x6c0>)
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 8005e94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e96:	4a3f      	ldr	r2, [pc, #252]	; (8005f94 <beginStartGame+0x6c4>)
 8005e98:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005ea0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd f8a8 	bl	8002ff8 <convert2str>
 8005ea8:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f005 fd58 	bl	800b964 <strcat>
						break;
 8005eb4:	e010      	b.n	8005ed8 <beginStartGame+0x608>
					case 13:
						val = val*10;
 8005eb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005eb8:	461a      	mov	r2, r3
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005ec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd f897 	bl	8002ff8 <convert2str>
 8005eca:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f005 fd47 	bl	800b964 <strcat>
						break;
 8005ed6:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	23b4      	movs	r3, #180	; 0xb4
 8005ede:	22b4      	movs	r2, #180	; 0xb4
 8005ee0:	2196      	movs	r1, #150	; 0x96
 8005ee2:	203c      	movs	r0, #60	; 0x3c
 8005ee4:	f7fc f9b6 	bl	8002254 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8005ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	23b4      	movs	r3, #180	; 0xb4
 8005ef0:	22b4      	movs	r2, #180	; 0xb4
 8005ef2:	2196      	movs	r1, #150	; 0x96
 8005ef4:	203c      	movs	r0, #60	; 0x3c
 8005ef6:	f7fc fa7e 	bl	80023f6 <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8005efa:	1d3a      	adds	r2, r7, #4
 8005efc:	2301      	movs	r3, #1
 8005efe:	9302      	str	r3, [sp, #8]
 8005f00:	2318      	movs	r3, #24
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f0e:	2198      	movs	r1, #152	; 0x98
 8005f10:	2000      	movs	r0, #0
 8005f12:	f7fc fdb5 	bl	8002a80 <lcd_StrCenter>

				ID = val;
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <beginStartGame+0x6c8>)
 8005f18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f1a:	8013      	strh	r3, [r2, #0]
 8005f1c:	e000      	b.n	8005f20 <beginStartGame+0x650>
						continue;
 8005f1e:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 8005f20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f22:	3301      	adds	r3, #1
 8005f24:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f28:	2b0d      	cmp	r3, #13
 8005f2a:	f67f aeb0 	bls.w	8005c8e <beginStartGame+0x3be>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <beginStartGame+0x6cc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d101      	bne.n	8005f3a <beginStartGame+0x66a>
	{
		initTimingMode();
 8005f36:	f000 fe0b 	bl	8006b50 <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <beginStartGame+0x6cc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d101      	bne.n	8005f46 <beginStartGame+0x676>
	{
		initAdvanceMode();
 8005f42:	f7fa fdbf 	bl	8000ac4 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 8005f46:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <beginStartGame+0x6cc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d00e      	beq.n	8005f6c <beginStartGame+0x69c>
	{
		if(statusGame == PICKMODE)
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <beginStartGame+0x6cc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d101      	bne.n	8005f5a <beginStartGame+0x68a>
		{
			arrowInPickMode();
 8005f56:	f7ff fa5b 	bl	8005410 <arrowInPickMode>
		}
		if(button_count[12] == 1)
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <beginStartGame+0x6d0>)
 8005f5c:	8b1b      	ldrh	r3, [r3, #24]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d104      	bne.n	8005f6c <beginStartGame+0x69c>
		{
			statusGame = EXITMODE;
 8005f62:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <beginStartGame+0x6cc>)
 8005f64:	220a      	movs	r2, #10
 8005f66:	601a      	str	r2, [r3, #0]
			initExit();
 8005f68:	f7fb fa1e 	bl	80013a8 <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <beginStartGame+0x6cc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d009      	beq.n	8005f88 <beginStartGame+0x6b8>
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <beginStartGame+0x6cc>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d005      	beq.n	8005f88 <beginStartGame+0x6b8>
	{
		setTimerDeTime(0);
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f7fe ff93 	bl	8004ea8 <setTimerDeTime>
		setTimerGenerateWall(0);
 8005f82:	2000      	movs	r0, #0
 8005f84:	f7fe ffac 	bl	8004ee0 <setTimerGenerateWall>
	}
}
 8005f88:	bf00      	nop
 8005f8a:	3740      	adds	r7, #64	; 0x40
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	0800d04c 	.word	0x0800d04c
 8005f94:	cccccccd 	.word	0xcccccccd
 8005f98:	20000254 	.word	0x20000254
 8005f9c:	20000268 	.word	0x20000268
 8005fa0:	200001d4 	.word	0x200001d4

08005fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <HAL_MspInit+0x4c>)
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	4a0f      	ldr	r2, [pc, #60]	; (8005ff0 <HAL_MspInit+0x4c>)
 8005fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <HAL_MspInit+0x4c>)
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <HAL_MspInit+0x4c>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	4a08      	ldr	r2, [pc, #32]	; (8005ff0 <HAL_MspInit+0x4c>)
 8005fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_MspInit+0x4c>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40023800 	.word	0x40023800

08005ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ff8:	e7fe      	b.n	8005ff8 <NMI_Handler+0x4>

08005ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ffe:	e7fe      	b.n	8005ffe <HardFault_Handler+0x4>

08006000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006004:	e7fe      	b.n	8006004 <MemManage_Handler+0x4>

08006006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006006:	b480      	push	{r7}
 8006008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800600a:	e7fe      	b.n	800600a <BusFault_Handler+0x4>

0800600c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006010:	e7fe      	b.n	8006010 <UsageFault_Handler+0x4>

08006012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006016:	bf00      	nop
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006040:	f001 f878 	bl	8007134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006044:	bf00      	nop
 8006046:	bd80      	pop	{r7, pc}

08006048 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800604c:	4802      	ldr	r0, [pc, #8]	; (8006058 <TIM2_IRQHandler+0x10>)
 800604e:	f003 fc32 	bl	80098b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006052:	bf00      	nop
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20002a80 	.word	0x20002a80

0800605c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006060:	4802      	ldr	r0, [pc, #8]	; (800606c <USART2_IRQHandler+0x10>)
 8006062:	f004 fb6d 	bl	800a740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20002b14 	.word	0x20002b14

08006070 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006074:	4802      	ldr	r0, [pc, #8]	; (8006080 <DMA2_Stream0_IRQHandler+0x10>)
 8006076:	f001 ff5d 	bl	8007f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000174 	.word	0x20000174

08006084 <showNotifyStop>:
#include "software_timer.h"
#include "uart.h"
#include "game_over.h"

void showNotifyStop()
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 800608a:	4b25      	ldr	r3, [pc, #148]	; (8006120 <showNotifyStop+0x9c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	330a      	adds	r3, #10
 8006092:	b299      	uxth	r1, r3
 8006094:	2300      	movs	r3, #0
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	2310      	movs	r3, #16
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	2300      	movs	r3, #0
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <showNotifyStop+0xa0>)
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7fc fcea 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 80060ac:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <showNotifyStop+0xa4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3308      	adds	r3, #8
 80060b4:	b298      	uxth	r0, r3
 80060b6:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <showNotifyStop+0x9c>)
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <showNotifyStop+0x9c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4413      	add	r3, r2
 80060c0:	0fda      	lsrs	r2, r3, #31
 80060c2:	4413      	add	r3, r2
 80060c4:	105b      	asrs	r3, r3, #1
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b14      	subs	r3, #20
 80060ca:	b299      	uxth	r1, r3
 80060cc:	2301      	movs	r3, #1
 80060ce:	9302      	str	r3, [sp, #8]
 80060d0:	2310      	movs	r3, #16
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f248 4330 	movw	r3, #33840	; 0x8430
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2300      	movs	r3, #0
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <showNotifyStop+0xa8>)
 80060de:	f7fc fc6b 	bl	80029b8 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <showNotifyStop+0xa4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3308      	adds	r3, #8
 80060ea:	b298      	uxth	r0, r3
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <showNotifyStop+0x9c>)
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <showNotifyStop+0x9c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	0fda      	lsrs	r2, r3, #31
 80060f8:	4413      	add	r3, r2
 80060fa:	105b      	asrs	r3, r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	330f      	adds	r3, #15
 8006100:	b299      	uxth	r1, r3
 8006102:	2301      	movs	r3, #1
 8006104:	9302      	str	r3, [sp, #8]
 8006106:	2310      	movs	r3, #16
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	f248 4330 	movw	r3, #33840	; 0x8430
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	4a07      	ldr	r2, [pc, #28]	; (8006130 <showNotifyStop+0xac>)
 8006114:	f7fc fc50 	bl	80029b8 <lcd_ShowStr>
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000004c 	.word	0x2000004c
 8006124:	0800d050 	.word	0x0800d050
 8006128:	2000003c 	.word	0x2000003c
 800612c:	0800d060 	.word	0x0800d060
 8006130:	0800d068 	.word	0x0800d068

08006134 <drawArrowStop>:


void drawArrowStop()
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b087      	sub	sp, #28
 8006138:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800613a:	4b87      	ldr	r3, [pc, #540]	; (8006358 <drawArrowStop+0x224>)
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	4b86      	ldr	r3, [pc, #536]	; (8006358 <drawArrowStop+0x224>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4413      	add	r3, r2
 8006144:	0fda      	lsrs	r2, r3, #31
 8006146:	4413      	add	r3, r2
 8006148:	105b      	asrs	r3, r3, #1
 800614a:	3b08      	subs	r3, #8
 800614c:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 800614e:	4b82      	ldr	r3, [pc, #520]	; (8006358 <drawArrowStop+0x224>)
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	4b81      	ldr	r3, [pc, #516]	; (8006358 <drawArrowStop+0x224>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4413      	add	r3, r2
 8006158:	0fda      	lsrs	r2, r3, #31
 800615a:	4413      	add	r3, r2
 800615c:	105b      	asrs	r3, r3, #1
 800615e:	331c      	adds	r3, #28
 8006160:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 8006162:	4b7e      	ldr	r3, [pc, #504]	; (800635c <drawArrowStop+0x228>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d07a      	beq.n	8006260 <drawArrowStop+0x12c>
 800616a:	2b02      	cmp	r3, #2
 800616c:	f040 80f0 	bne.w	8006350 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8006170:	f7fb faf4 	bl	800175c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 8006174:	4b7a      	ldr	r3, [pc, #488]	; (8006360 <drawArrowStop+0x22c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	3308      	adds	r3, #8
 800617c:	b298      	uxth	r0, r3
 800617e:	4b76      	ldr	r3, [pc, #472]	; (8006358 <drawArrowStop+0x224>)
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	4b75      	ldr	r3, [pc, #468]	; (8006358 <drawArrowStop+0x224>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4413      	add	r3, r2
 8006188:	0fda      	lsrs	r2, r3, #31
 800618a:	4413      	add	r3, r2
 800618c:	105b      	asrs	r3, r3, #1
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b14      	subs	r3, #20
 8006192:	b299      	uxth	r1, r3
 8006194:	2301      	movs	r3, #1
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	2310      	movs	r3, #16
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	f248 4330 	movw	r3, #33840	; 0x8430
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061a6:	4a6f      	ldr	r2, [pc, #444]	; (8006364 <drawArrowStop+0x230>)
 80061a8:	f7fc fc06 	bl	80029b8 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80061ac:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <drawArrowStop+0x22c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3308      	adds	r3, #8
 80061b4:	b298      	uxth	r0, r3
 80061b6:	4b68      	ldr	r3, [pc, #416]	; (8006358 <drawArrowStop+0x224>)
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	4b67      	ldr	r3, [pc, #412]	; (8006358 <drawArrowStop+0x224>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	0fda      	lsrs	r2, r3, #31
 80061c2:	4413      	add	r3, r2
 80061c4:	105b      	asrs	r3, r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	330f      	adds	r3, #15
 80061ca:	b299      	uxth	r1, r3
 80061cc:	2301      	movs	r3, #1
 80061ce:	9302      	str	r3, [sp, #8]
 80061d0:	2310      	movs	r3, #16
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	f248 4330 	movw	r3, #33840	; 0x8430
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	4a62      	ldr	r2, [pc, #392]	; (8006368 <drawArrowStop+0x234>)
 80061de:	f7fc fbeb 	bl	80029b8 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 80061e2:	4b5f      	ldr	r3, [pc, #380]	; (8006360 <drawArrowStop+0x22c>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b0f      	subs	r3, #15
 80061ea:	b298      	uxth	r0, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	b299      	uxth	r1, r3
 80061f0:	4b5b      	ldr	r3, [pc, #364]	; (8006360 <drawArrowStop+0x22c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b0a      	subs	r3, #10
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b05      	subs	r3, #5
 8006200:	b29b      	uxth	r3, r3
 8006202:	2400      	movs	r4, #0
 8006204:	9400      	str	r4, [sp, #0]
 8006206:	f7fc f872 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800620a:	4b55      	ldr	r3, [pc, #340]	; (8006360 <drawArrowStop+0x22c>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b0f      	subs	r3, #15
 8006212:	b298      	uxth	r0, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	b299      	uxth	r1, r3
 8006218:	4b51      	ldr	r3, [pc, #324]	; (8006360 <drawArrowStop+0x22c>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b0a      	subs	r3, #10
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	b29b      	uxth	r3, r3
 8006226:	3305      	adds	r3, #5
 8006228:	b29b      	uxth	r3, r3
 800622a:	2400      	movs	r4, #0
 800622c:	9400      	str	r4, [sp, #0]
 800622e:	f7fc f85e 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8006232:	4b4b      	ldr	r3, [pc, #300]	; (8006360 <drawArrowStop+0x22c>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b0a      	subs	r3, #10
 800623a:	b298      	uxth	r0, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b05      	subs	r3, #5
 8006242:	b299      	uxth	r1, r3
 8006244:	4b46      	ldr	r3, [pc, #280]	; (8006360 <drawArrowStop+0x22c>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b0a      	subs	r3, #10
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	b29b      	uxth	r3, r3
 8006252:	3305      	adds	r3, #5
 8006254:	b29b      	uxth	r3, r3
 8006256:	2400      	movs	r4, #0
 8006258:	9400      	str	r4, [sp, #0]
 800625a:	f7fc f848 	bl	80022ee <lcd_DrawLine>
		break;
 800625e:	e077      	b.n	8006350 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 8006260:	f7fb fa7c 	bl	800175c <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8006264:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <drawArrowStop+0x22c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	3308      	adds	r3, #8
 800626c:	b298      	uxth	r0, r3
 800626e:	4b3a      	ldr	r3, [pc, #232]	; (8006358 <drawArrowStop+0x224>)
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	4b39      	ldr	r3, [pc, #228]	; (8006358 <drawArrowStop+0x224>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4413      	add	r3, r2
 8006278:	0fda      	lsrs	r2, r3, #31
 800627a:	4413      	add	r3, r2
 800627c:	105b      	asrs	r3, r3, #1
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b14      	subs	r3, #20
 8006282:	b299      	uxth	r1, r3
 8006284:	2301      	movs	r3, #1
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	2310      	movs	r3, #16
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	f248 4330 	movw	r3, #33840	; 0x8430
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	2300      	movs	r3, #0
 8006294:	4a33      	ldr	r2, [pc, #204]	; (8006364 <drawArrowStop+0x230>)
 8006296:	f7fc fb8f 	bl	80029b8 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 800629a:	4b31      	ldr	r3, [pc, #196]	; (8006360 <drawArrowStop+0x22c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3308      	adds	r3, #8
 80062a2:	b298      	uxth	r0, r3
 80062a4:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <drawArrowStop+0x224>)
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <drawArrowStop+0x224>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4413      	add	r3, r2
 80062ae:	0fda      	lsrs	r2, r3, #31
 80062b0:	4413      	add	r3, r2
 80062b2:	105b      	asrs	r3, r3, #1
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	330f      	adds	r3, #15
 80062b8:	b299      	uxth	r1, r3
 80062ba:	2301      	movs	r3, #1
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	2310      	movs	r3, #16
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	f248 4330 	movw	r3, #33840	; 0x8430
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062cc:	4a26      	ldr	r2, [pc, #152]	; (8006368 <drawArrowStop+0x234>)
 80062ce:	f7fc fb73 	bl	80029b8 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 80062d2:	4b23      	ldr	r3, [pc, #140]	; (8006360 <drawArrowStop+0x22c>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b0f      	subs	r3, #15
 80062da:	b298      	uxth	r0, r3
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	b299      	uxth	r1, r3
 80062e0:	4b1f      	ldr	r3, [pc, #124]	; (8006360 <drawArrowStop+0x22c>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b0a      	subs	r3, #10
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b05      	subs	r3, #5
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2400      	movs	r4, #0
 80062f4:	9400      	str	r4, [sp, #0]
 80062f6:	f7fb fffa 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 80062fa:	4b19      	ldr	r3, [pc, #100]	; (8006360 <drawArrowStop+0x22c>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b0f      	subs	r3, #15
 8006302:	b298      	uxth	r0, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	b299      	uxth	r1, r3
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <drawArrowStop+0x22c>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b0a      	subs	r3, #10
 8006310:	b29a      	uxth	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	3305      	adds	r3, #5
 8006318:	b29b      	uxth	r3, r3
 800631a:	2400      	movs	r4, #0
 800631c:	9400      	str	r4, [sp, #0]
 800631e:	f7fb ffe6 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8006322:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <drawArrowStop+0x22c>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b0a      	subs	r3, #10
 800632a:	b298      	uxth	r0, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b05      	subs	r3, #5
 8006332:	b299      	uxth	r1, r3
 8006334:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <drawArrowStop+0x22c>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b0a      	subs	r3, #10
 800633c:	b29a      	uxth	r2, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	3305      	adds	r3, #5
 8006344:	b29b      	uxth	r3, r3
 8006346:	2400      	movs	r4, #0
 8006348:	9400      	str	r4, [sp, #0]
 800634a:	f7fb ffd0 	bl	80022ee <lcd_DrawLine>
		break;
 800634e:	bf00      	nop
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bd90      	pop	{r4, r7, pc}
 8006358:	2000004c 	.word	0x2000004c
 800635c:	2000005c 	.word	0x2000005c
 8006360:	2000003c 	.word	0x2000003c
 8006364:	0800d060 	.word	0x0800d060
 8006368:	0800d068 	.word	0x0800d068

0800636c <gameStopUI>:

void gameStopUI()
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
	showWallnotify();
 8006370:	f7fb f8f0 	bl	8001554 <showWallnotify>
	showNotifyStop();
 8006374:	f7ff fe86 	bl	8006084 <showNotifyStop>
	drawArrowStop();
 8006378:	f7ff fedc 	bl	8006134 <drawArrowStop>
}
 800637c:	bf00      	nop
 800637e:	bd80      	pop	{r7, pc}

08006380 <pickStop>:

void pickStop()
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 8006384:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <pickStop+0x78>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b06      	cmp	r3, #6
 800638a:	d133      	bne.n	80063f4 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <pickStop+0x7c>)
 800638e:	88db      	ldrh	r3, [r3, #6]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d10f      	bne.n	80063b4 <pickStop+0x34>
		{
			flagStop = 1;
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <pickStop+0x80>)
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 800639a:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <pickStop+0x84>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <pickStop+0x28>
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d107      	bne.n	80063b6 <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 80063a6:	e025      	b.n	80063f4 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 80063a8:	4b16      	ldr	r3, [pc, #88]	; (8006404 <pickStop+0x84>)
 80063aa:	2202      	movs	r2, #2
 80063ac:	601a      	str	r2, [r3, #0]
				gameStopUI();
 80063ae:	f7ff ffdd 	bl	800636c <gameStopUI>
				break;
 80063b2:	e000      	b.n	80063b6 <pickStop+0x36>
			}
		}
 80063b4:	bf00      	nop
		if(button_count[7] == 1)
 80063b6:	4b11      	ldr	r3, [pc, #68]	; (80063fc <pickStop+0x7c>)
 80063b8:	89db      	ldrh	r3, [r3, #14]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d10e      	bne.n	80063dc <pickStop+0x5c>
		{
			flagStop = 1;
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <pickStop+0x80>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <pickStop+0x84>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d012      	beq.n	80063f2 <pickStop+0x72>
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d106      	bne.n	80063de <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <pickStop+0x84>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
				gameStopUI();
 80063d6:	f7ff ffc9 	bl	800636c <gameStopUI>
				break;
 80063da:	e000      	b.n	80063de <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 80063dc:	bf00      	nop
		if(flagStop == 1)
 80063de:	4b08      	ldr	r3, [pc, #32]	; (8006400 <pickStop+0x80>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d106      	bne.n	80063f4 <pickStop+0x74>
		{
			gameStopUI();
 80063e6:	f7ff ffc1 	bl	800636c <gameStopUI>
			flagStop = 0;
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <pickStop+0x80>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e000      	b.n	80063f4 <pickStop+0x74>
				return;
 80063f2:	bf00      	nop
		}
	}
}
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000268 	.word	0x20000268
 80063fc:	200001d4 	.word	0x200001d4
 8006400:	20000274 	.word	0x20000274
 8006404:	2000005c 	.word	0x2000005c

08006408 <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b097      	sub	sp, #92	; 0x5c
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d14d      	bne.n	80064b4 <initStopGame+0xac>
	{
		char str1[60] = "GAME_PLAY#";
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <initStopGame+0xb8>)
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006420:	c303      	stmia	r3!, {r0, r1}
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	3302      	adds	r3, #2
 8006426:	0c12      	lsrs	r2, r2, #16
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	f107 0313 	add.w	r3, r7, #19
 800642e:	2231      	movs	r2, #49	; 0x31
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f005 f9ee 	bl	800b814 <memset>
		char *str2 = convert2str(ID);
 8006438:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <initStopGame+0xbc>)
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f7fc fddb 	bl	8002ff8 <convert2str>
 8006442:	6578      	str	r0, [r7, #84]	; 0x54
		strcat(str1, str2);
 8006444:	f107 0308 	add.w	r3, r7, #8
 8006448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800644a:	4618      	mov	r0, r3
 800644c:	f005 fa8a 	bl	800b964 <strcat>
		char str3[15] = "has stop game#";
 8006450:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <initStopGame+0xc0>)
 8006452:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8006456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006458:	c407      	stmia	r4!, {r0, r1, r2}
 800645a:	8023      	strh	r3, [r4, #0]
 800645c:	3402      	adds	r4, #2
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	7023      	strb	r3, [r4, #0]
		strcat(str1, str3);
 8006462:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006466:	f107 0308 	add.w	r3, r7, #8
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f005 fa79 	bl	800b964 <strcat>
		uart_EspSendBytes(str1, strlen(str1));
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	4618      	mov	r0, r3
 8006478:	f7f9 feaa 	bl	80001d0 <strlen>
 800647c:	4603      	mov	r3, r0
 800647e:	b29a      	uxth	r2, r3
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fba6 	bl	8006bd8 <uart_EspSendBytes>

		statusGame = STOPMODE;
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <initStopGame+0xc4>)
 800648e:	2206      	movs	r2, #6
 8006490:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <initStopGame+0xc8>)
 8006494:	2202      	movs	r2, #2
 8006496:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 8006498:	2000      	movs	r0, #0
 800649a:	f7fe fce5 	bl	8004e68 <setTimerTiming>
		setTimerUart(0);
 800649e:	2000      	movs	r0, #0
 80064a0:	f7fe fd3a 	bl	8004f18 <setTimerUart>
		setTimerGenerateWall(0);
 80064a4:	2000      	movs	r0, #0
 80064a6:	f7fe fd1b 	bl	8004ee0 <setTimerGenerateWall>
		flagStop = 1;
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <initStopGame+0xcc>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
		pickStop();
 80064b0:	f7ff ff66 	bl	8006380 <pickStop>
	}
	return 0;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	375c      	adds	r7, #92	; 0x5c
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd90      	pop	{r4, r7, pc}
 80064be:	bf00      	nop
 80064c0:	0800d070 	.word	0x0800d070
 80064c4:	20000254 	.word	0x20000254
 80064c8:	0800d0ac 	.word	0x0800d0ac
 80064cc:	20000268 	.word	0x20000268
 80064d0:	2000005c 	.word	0x2000005c
 80064d4:	20000274 	.word	0x20000274

080064d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
	return 1;
 80064dc:	2301      	movs	r3, #1
}
 80064de:	4618      	mov	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <_kill>:

int _kill(int pid, int sig)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80064f2:	f005 f965 	bl	800b7c0 <__errno>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2216      	movs	r2, #22
 80064fa:	601a      	str	r2, [r3, #0]
	return -1;
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <_exit>:

void _exit (int status)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006510:	f04f 31ff 	mov.w	r1, #4294967295
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ffe7 	bl	80064e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800651a:	e7fe      	b.n	800651a <_exit+0x12>

0800651c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e00a      	b.n	8006544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800652e:	f3af 8000 	nop.w
 8006532:	4601      	mov	r1, r0
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	60ba      	str	r2, [r7, #8]
 800653a:	b2ca      	uxtb	r2, r1
 800653c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	3301      	adds	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	dbf0      	blt.n	800652e <_read+0x12>
	}

return len;
 800654c:	687b      	ldr	r3, [r7, #4]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e009      	b.n	800657c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	60ba      	str	r2, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	3301      	adds	r3, #1
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	dbf1      	blt.n	8006568 <_write+0x12>
	}
	return len;
 8006584:	687b      	ldr	r3, [r7, #4]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <_close>:

int _close(int file)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
	return -1;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b6:	605a      	str	r2, [r3, #4]
	return 0;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <_isatty>:

int _isatty(int file)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
	return 1;
 80065ce:	2301      	movs	r3, #1
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
	return 0;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006600:	4a14      	ldr	r2, [pc, #80]	; (8006654 <_sbrk+0x5c>)
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <_sbrk+0x60>)
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800660c:	4b13      	ldr	r3, [pc, #76]	; (800665c <_sbrk+0x64>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006614:	4b11      	ldr	r3, [pc, #68]	; (800665c <_sbrk+0x64>)
 8006616:	4a12      	ldr	r2, [pc, #72]	; (8006660 <_sbrk+0x68>)
 8006618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <_sbrk+0x64>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	429a      	cmp	r2, r3
 8006626:	d207      	bcs.n	8006638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006628:	f005 f8ca 	bl	800b7c0 <__errno>
 800662c:	4603      	mov	r3, r0
 800662e:	220c      	movs	r2, #12
 8006630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
 8006636:	e009      	b.n	800664c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <_sbrk+0x64>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <_sbrk+0x64>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	4a05      	ldr	r2, [pc, #20]	; (800665c <_sbrk+0x64>)
 8006648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20020000 	.word	0x20020000
 8006658:	00000400 	.word	0x00000400
 800665c:	20002a7c 	.word	0x20002a7c
 8006660:	20002b70 	.word	0x20002b70

08006664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <SystemInit+0x20>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	4a05      	ldr	r2, [pc, #20]	; (8006684 <SystemInit+0x20>)
 8006670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	e000ed00 	.word	0xe000ed00

08006688 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800668e:	f107 0308 	add.w	r3, r7, #8
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	609a      	str	r2, [r3, #8]
 800669a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800669c:	463b      	mov	r3, r7
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <MX_TIM2_Init+0x94>)
 80066a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80066ac:	4b1b      	ldr	r3, [pc, #108]	; (800671c <MX_TIM2_Init+0x94>)
 80066ae:	f240 3247 	movw	r2, #839	; 0x347
 80066b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066b4:	4b19      	ldr	r3, [pc, #100]	; (800671c <MX_TIM2_Init+0x94>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80066ba:	4b18      	ldr	r3, [pc, #96]	; (800671c <MX_TIM2_Init+0x94>)
 80066bc:	2263      	movs	r2, #99	; 0x63
 80066be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066c0:	4b16      	ldr	r3, [pc, #88]	; (800671c <MX_TIM2_Init+0x94>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <MX_TIM2_Init+0x94>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066cc:	4813      	ldr	r0, [pc, #76]	; (800671c <MX_TIM2_Init+0x94>)
 80066ce:	f002 ffd9 	bl	8009684 <HAL_TIM_Base_Init>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80066d8:	f7fc fc36 	bl	8002f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80066e2:	f107 0308 	add.w	r3, r7, #8
 80066e6:	4619      	mov	r1, r3
 80066e8:	480c      	ldr	r0, [pc, #48]	; (800671c <MX_TIM2_Init+0x94>)
 80066ea:	f003 faaf 	bl	8009c4c <HAL_TIM_ConfigClockSource>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80066f4:	f7fc fc28 	bl	8002f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066f8:	2300      	movs	r3, #0
 80066fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006700:	463b      	mov	r3, r7
 8006702:	4619      	mov	r1, r3
 8006704:	4805      	ldr	r0, [pc, #20]	; (800671c <MX_TIM2_Init+0x94>)
 8006706:	f003 fe7b 	bl	800a400 <HAL_TIMEx_MasterConfigSynchronization>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006710:	f7fc fc1a 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006714:	bf00      	nop
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20002a80 	.word	0x20002a80

08006720 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	60da      	str	r2, [r3, #12]
 8006732:	611a      	str	r2, [r3, #16]
 8006734:	615a      	str	r2, [r3, #20]
 8006736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006738:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <MX_TIM13_Init+0x94>)
 800673a:	4a1f      	ldr	r2, [pc, #124]	; (80067b8 <MX_TIM13_Init+0x98>)
 800673c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <MX_TIM13_Init+0x94>)
 8006740:	f240 3247 	movw	r2, #839	; 0x347
 8006744:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006746:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <MX_TIM13_Init+0x94>)
 8006748:	2200      	movs	r2, #0
 800674a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800674c:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <MX_TIM13_Init+0x94>)
 800674e:	2263      	movs	r2, #99	; 0x63
 8006750:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <MX_TIM13_Init+0x94>)
 8006754:	2200      	movs	r2, #0
 8006756:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006758:	4b16      	ldr	r3, [pc, #88]	; (80067b4 <MX_TIM13_Init+0x94>)
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800675e:	4815      	ldr	r0, [pc, #84]	; (80067b4 <MX_TIM13_Init+0x94>)
 8006760:	f002 ff90 	bl	8009684 <HAL_TIM_Base_Init>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800676a:	f7fc fbed 	bl	8002f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800676e:	4811      	ldr	r0, [pc, #68]	; (80067b4 <MX_TIM13_Init+0x94>)
 8006770:	f003 f848 	bl	8009804 <HAL_TIM_PWM_Init>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800677a:	f7fc fbe5 	bl	8002f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800677e:	2360      	movs	r3, #96	; 0x60
 8006780:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800678e:	1d3b      	adds	r3, r7, #4
 8006790:	2200      	movs	r2, #0
 8006792:	4619      	mov	r1, r3
 8006794:	4807      	ldr	r0, [pc, #28]	; (80067b4 <MX_TIM13_Init+0x94>)
 8006796:	f003 f997 	bl	8009ac8 <HAL_TIM_PWM_ConfigChannel>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80067a0:	f7fc fbd2 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80067a4:	4803      	ldr	r0, [pc, #12]	; (80067b4 <MX_TIM13_Init+0x94>)
 80067a6:	f000 f845 	bl	8006834 <HAL_TIM_MspPostInit>

}
 80067aa:	bf00      	nop
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20002ac8 	.word	0x20002ac8
 80067b8:	40001c00 	.word	0x40001c00

080067bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d116      	bne.n	80067fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	4b16      	ldr	r3, [pc, #88]	; (800682c <HAL_TIM_Base_MspInit+0x70>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	4a15      	ldr	r2, [pc, #84]	; (800682c <HAL_TIM_Base_MspInit+0x70>)
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	6413      	str	r3, [r2, #64]	; 0x40
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <HAL_TIM_Base_MspInit+0x70>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80067ea:	2200      	movs	r2, #0
 80067ec:	2100      	movs	r1, #0
 80067ee:	201c      	movs	r0, #28
 80067f0:	f001 f9d1 	bl	8007b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80067f4:	201c      	movs	r0, #28
 80067f6:	f001 f9ea 	bl	8007bce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80067fa:	e012      	b.n	8006822 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0b      	ldr	r2, [pc, #44]	; (8006830 <HAL_TIM_Base_MspInit+0x74>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10d      	bne.n	8006822 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <HAL_TIM_Base_MspInit+0x70>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	4a07      	ldr	r2, [pc, #28]	; (800682c <HAL_TIM_Base_MspInit+0x70>)
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	6413      	str	r3, [r2, #64]	; 0x40
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <HAL_TIM_Base_MspInit+0x70>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	40001c00 	.word	0x40001c00

08006834 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	609a      	str	r2, [r3, #8]
 8006848:	60da      	str	r2, [r3, #12]
 800684a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a12      	ldr	r2, [pc, #72]	; (800689c <HAL_TIM_MspPostInit+0x68>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d11e      	bne.n	8006894 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_TIM_MspPostInit+0x6c>)
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <HAL_TIM_MspPostInit+0x6c>)
 8006860:	f043 0320 	orr.w	r3, r3, #32
 8006864:	6313      	str	r3, [r2, #48]	; 0x30
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <HAL_TIM_MspPostInit+0x6c>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	60bb      	str	r3, [r7, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006878:	2302      	movs	r3, #2
 800687a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006884:	2309      	movs	r3, #9
 8006886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	4619      	mov	r1, r3
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <HAL_TIM_MspPostInit+0x70>)
 8006890:	f001 fdba 	bl	8008408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8006894:	bf00      	nop
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40001c00 	.word	0x40001c00
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40021400 	.word	0x40021400

080068a8 <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b095      	sub	sp, #84	; 0x54
 80068ac:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7fb fc9e 	bl	80021f0 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80068b4:	4b6b      	ldr	r3, [pc, #428]	; (8006a64 <setupTiming+0x1bc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b298      	uxth	r0, r3
 80068ba:	4b6b      	ldr	r3, [pc, #428]	; (8006a68 <setupTiming+0x1c0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	b299      	uxth	r1, r3
 80068c0:	4b6a      	ldr	r3, [pc, #424]	; (8006a6c <setupTiming+0x1c4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	4b6a      	ldr	r3, [pc, #424]	; (8006a70 <setupTiming+0x1c8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4c69      	ldr	r4, [pc, #420]	; (8006a74 <setupTiming+0x1cc>)
 80068ce:	9400      	str	r4, [sp, #0]
 80068d0:	f7fb fe98 	bl	8002604 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80068d4:	2300      	movs	r3, #0
 80068d6:	9302      	str	r3, [sp, #8]
 80068d8:	2318      	movs	r3, #24
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	f248 4330 	movw	r3, #33840	; 0x8430
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068e6:	4a64      	ldr	r2, [pc, #400]	; (8006a78 <setupTiming+0x1d0>)
 80068e8:	2137      	movs	r1, #55	; 0x37
 80068ea:	203c      	movs	r0, #60	; 0x3c
 80068ec:	f7fc f864 	bl	80029b8 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80068f0:	4a62      	ldr	r2, [pc, #392]	; (8006a7c <setupTiming+0x1d4>)
 80068f2:	1d3b      	adds	r3, r7, #4
 80068f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068f8:	6018      	str	r0, [r3, #0]
 80068fa:	3304      	adds	r3, #4
 80068fc:	8019      	strh	r1, [r3, #0]
 80068fe:	f107 030a 	add.w	r3, r7, #10
 8006902:	222c      	movs	r2, #44	; 0x2c
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f004 ff84 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 800690c:	4b5c      	ldr	r3, [pc, #368]	; (8006a80 <setupTiming+0x1d8>)
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f7fc fb71 	bl	8002ff8 <convert2str>
 8006916:	4603      	mov	r3, r0
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 800691a:	1d3b      	adds	r3, r7, #4
 800691c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800691e:	4618      	mov	r0, r3
 8006920:	f005 f820 	bl	800b964 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8006924:	1d3a      	adds	r2, r7, #4
 8006926:	2300      	movs	r3, #0
 8006928:	9302      	str	r3, [sp, #8]
 800692a:	2318      	movs	r3, #24
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	f248 4330 	movw	r3, #33840	; 0x8430
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006938:	2164      	movs	r1, #100	; 0x64
 800693a:	2000      	movs	r0, #0
 800693c:	f7fc f8a0 	bl	8002a80 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8006940:	2300      	movs	r3, #0
 8006942:	9302      	str	r3, [sp, #8]
 8006944:	2318      	movs	r3, #24
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	f248 4330 	movw	r3, #33840	; 0x8430
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006952:	4a4c      	ldr	r2, [pc, #304]	; (8006a84 <setupTiming+0x1dc>)
 8006954:	2196      	movs	r1, #150	; 0x96
 8006956:	2000      	movs	r0, #0
 8006958:	f7fc f892 	bl	8002a80 <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 800695c:	2300      	movs	r3, #0
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	2318      	movs	r3, #24
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	f248 4330 	movw	r3, #33840	; 0x8430
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800696e:	4a46      	ldr	r2, [pc, #280]	; (8006a88 <setupTiming+0x1e0>)
 8006970:	21d2      	movs	r1, #210	; 0xd2
 8006972:	2014      	movs	r0, #20
 8006974:	f7fc f820 	bl	80029b8 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8006978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	23f0      	movs	r3, #240	; 0xf0
 8006980:	22c8      	movs	r2, #200	; 0xc8
 8006982:	21d2      	movs	r1, #210	; 0xd2
 8006984:	2096      	movs	r0, #150	; 0x96
 8006986:	f7fb fd36 	bl	80023f6 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 800698a:	4b40      	ldr	r3, [pc, #256]	; (8006a8c <setupTiming+0x1e4>)
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fc fb32 	bl	8002ff8 <convert2str>
 8006994:	4603      	mov	r3, r0
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8006998:	4b3c      	ldr	r3, [pc, #240]	; (8006a8c <setupTiming+0x1e4>)
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	2b77      	cmp	r3, #119	; 0x77
 800699e:	d80e      	bhi.n	80069be <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 80069a0:	2301      	movs	r3, #1
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	2318      	movs	r3, #24
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	f248 4330 	movw	r3, #33840	; 0x8430
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b4:	21d4      	movs	r1, #212	; 0xd4
 80069b6:	20a5      	movs	r0, #165	; 0xa5
 80069b8:	f7fb fffe 	bl	80029b8 <lcd_ShowStr>
 80069bc:	e00d      	b.n	80069da <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 80069be:	2301      	movs	r3, #1
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	2318      	movs	r3, #24
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	f248 4330 	movw	r3, #33840	; 0x8430
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d2:	21d4      	movs	r1, #212	; 0xd4
 80069d4:	209d      	movs	r0, #157	; 0x9d
 80069d6:	f7fb ffef 	bl	80029b8 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80069da:	4b2c      	ldr	r3, [pc, #176]	; (8006a8c <setupTiming+0x1e4>)
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	2b77      	cmp	r3, #119	; 0x77
 80069e0:	d81a      	bhi.n	8006a18 <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 80069e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	23c8      	movs	r3, #200	; 0xc8
 80069ea:	22b9      	movs	r2, #185	; 0xb9
 80069ec:	21c8      	movs	r1, #200	; 0xc8
 80069ee:	20a5      	movs	r0, #165	; 0xa5
 80069f0:	f7fb fc7d 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 80069f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	23c8      	movs	r3, #200	; 0xc8
 80069fc:	22a5      	movs	r2, #165	; 0xa5
 80069fe:	21b4      	movs	r1, #180	; 0xb4
 8006a00:	20af      	movs	r0, #175	; 0xaf
 8006a02:	f7fb fc74 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 8006a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	23b4      	movs	r3, #180	; 0xb4
 8006a0e:	22af      	movs	r2, #175	; 0xaf
 8006a10:	21c8      	movs	r1, #200	; 0xc8
 8006a12:	20b9      	movs	r0, #185	; 0xb9
 8006a14:	f7fb fc6b 	bl	80022ee <lcd_DrawLine>
	}
	if(TIMING > 30)
 8006a18:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <setupTiming+0x1e4>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b1e      	cmp	r3, #30
 8006a1e:	d91c      	bls.n	8006a5a <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 8006a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	23fa      	movs	r3, #250	; 0xfa
 8006a28:	22b9      	movs	r2, #185	; 0xb9
 8006a2a:	21fa      	movs	r1, #250	; 0xfa
 8006a2c:	20a5      	movs	r0, #165	; 0xa5
 8006a2e:	f7fb fc5e 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 8006a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006a3c:	22af      	movs	r2, #175	; 0xaf
 8006a3e:	21fa      	movs	r1, #250	; 0xfa
 8006a40:	20a5      	movs	r0, #165	; 0xa5
 8006a42:	f7fb fc54 	bl	80022ee <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 8006a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006a50:	22af      	movs	r2, #175	; 0xaf
 8006a52:	21fa      	movs	r1, #250	; 0xfa
 8006a54:	20b9      	movs	r0, #185	; 0xb9
 8006a56:	f7fb fc4a 	bl	80022ee <lcd_DrawLine>
	}
}
 8006a5a:	bf00      	nop
 8006a5c:	3744      	adds	r7, #68	; 0x44
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd90      	pop	{r4, r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000074 	.word	0x20000074
 8006a68:	20000078 	.word	0x20000078
 8006a6c:	2000007c 	.word	0x2000007c
 8006a70:	20000080 	.word	0x20000080
 8006a74:	08015adc 	.word	0x08015adc
 8006a78:	0800d0bc 	.word	0x0800d0bc
 8006a7c:	0800d0e4 	.word	0x0800d0e4
 8006a80:	20000254 	.word	0x20000254
 8006a84:	0800d0cc 	.word	0x0800d0cc
 8006a88:	0800d0dc 	.word	0x0800d0dc
 8006a8c:	20000000 	.word	0x20000000

08006a90 <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7fc f8b6 	bl	8002c14 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2101      	movs	r1, #1
 8006aac:	68b8      	ldr	r0, [r7, #8]
 8006aae:	f7fc f8b1 	bl	8002c14 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fc f8ac 	bl	8002c14 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 8006abc:	2200      	movs	r2, #0
 8006abe:	2103      	movs	r1, #3
 8006ac0:	6838      	ldr	r0, [r7, #0]
 8006ac2:	f7fc f8a7 	bl	8002c14 <led7_SetDigit>
	led7_SetColon(1);
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f7fc f8c8 	bl	8002c5c <led7_SetColon>
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <showTiming>:

void showTiming()
{
 8006ad4:	b5b0      	push	{r4, r5, r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 8006ad8:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <showTiming+0x6c>)
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <showTiming+0x70>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	099b      	lsrs	r3, r3, #6
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <showTiming+0x6c>)
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <showTiming+0x74>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	461c      	mov	r4, r3
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <showTiming+0x6c>)
 8006afa:	881a      	ldrh	r2, [r3, #0]
 8006afc:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <showTiming+0x74>)
 8006afe:	fba3 1302 	umull	r1, r3, r3, r2
 8006b02:	0959      	lsrs	r1, r3, #5
 8006b04:	460b      	mov	r3, r1
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	1a5b      	subs	r3, r3, r1
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	4a0e      	ldr	r2, [pc, #56]	; (8006b4c <showTiming+0x78>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461d      	mov	r5, r3
 8006b1c:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <showTiming+0x6c>)
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <showTiming+0x78>)
 8006b22:	fba3 1302 	umull	r1, r3, r3, r2
 8006b26:	08d9      	lsrs	r1, r3, #3
 8006b28:	460b      	mov	r3, r1
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	462a      	mov	r2, r5
 8006b36:	4621      	mov	r1, r4
 8006b38:	f7ff ffaa 	bl	8006a90 <show7seg>
}
 8006b3c:	bf00      	nop
 8006b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b40:	20000000 	.word	0x20000000
 8006b44:	1b4e81b5 	.word	0x1b4e81b5
 8006b48:	88888889 	.word	0x88888889
 8006b4c:	cccccccd 	.word	0xcccccccd

08006b50 <initTimingMode>:

void initTimingMode()
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8006b54:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <initTimingMode+0x54>)
 8006b56:	88db      	ldrh	r3, [r3, #6]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10e      	bne.n	8006b7a <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8006b5c:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <initTimingMode+0x58>)
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	331e      	adds	r3, #30
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <initTimingMode+0x58>)
 8006b66:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8006b68:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <initTimingMode+0x58>)
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	2b78      	cmp	r3, #120	; 0x78
 8006b6e:	d902      	bls.n	8006b76 <initTimingMode+0x26>
		{
			TIMING = 120;
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <initTimingMode+0x58>)
 8006b72:	2278      	movs	r2, #120	; 0x78
 8006b74:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8006b76:	f7ff fe97 	bl	80068a8 <setupTiming>
	}
	if(button_count[7] == 1)
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <initTimingMode+0x54>)
 8006b7c:	89db      	ldrh	r3, [r3, #14]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10e      	bne.n	8006ba0 <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <initTimingMode+0x58>)
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	3b1e      	subs	r3, #30
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <initTimingMode+0x58>)
 8006b8c:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8006b8e:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <initTimingMode+0x58>)
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d802      	bhi.n	8006b9c <initTimingMode+0x4c>
		{
			TIMING = 30;
 8006b96:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <initTimingMode+0x58>)
 8006b98:	221e      	movs	r2, #30
 8006b9a:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8006b9c:	f7ff fe84 	bl	80068a8 <setupTiming>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200001d4 	.word	0x200001d4
 8006ba8:	20000000 	.word	0x20000000

08006bac <uart_init_esp>:
//    uart_Rs232SendString(".");
//    sprintf((void*)msg,"%ld",num%100);
//    uart_Rs232SendString(msg);
//}

void uart_init_esp(){
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	4906      	ldr	r1, [pc, #24]	; (8006bcc <uart_init_esp+0x20>)
 8006bb4:	4806      	ldr	r0, [pc, #24]	; (8006bd0 <uart_init_esp+0x24>)
 8006bb6:	f003 fd92 	bl	800a6de <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bc0:	4804      	ldr	r0, [pc, #16]	; (8006bd4 <uart_init_esp+0x28>)
 8006bc2:	f001 fdd5 	bl	8008770 <HAL_GPIO_WritePin>
}
 8006bc6:	bf00      	nop
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20002b10 	.word	0x20002b10
 8006bd0:	20002b14 	.word	0x20002b14
 8006bd4:	40021400 	.word	0x40021400

08006bd8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8006be4:	887a      	ldrh	r2, [r7, #2]
 8006be6:	230a      	movs	r3, #10
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4803      	ldr	r0, [pc, #12]	; (8006bf8 <uart_EspSendBytes+0x20>)
 8006bec:	f003 fce5 	bl	800a5ba <HAL_UART_Transmit>
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20002b14 	.word	0x20002b14

08006bfc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <HAL_UART_RxCpltCallback+0x54>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d11b      	bne.n	8006c46 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8006c0e:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_UART_RxCpltCallback+0x58>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b4f      	cmp	r3, #79	; 0x4f
 8006c14:	d103      	bne.n	8006c1e <HAL_UART_RxCpltCallback+0x22>
 8006c16:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <HAL_UART_RxCpltCallback+0x5c>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e00e      	b.n	8006c3c <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'a') light_status = 0;
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_UART_RxCpltCallback+0x58>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b61      	cmp	r3, #97	; 0x61
 8006c24:	d103      	bne.n	8006c2e <HAL_UART_RxCpltCallback+0x32>
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <HAL_UART_RxCpltCallback+0x60>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e006      	b.n	8006c3c <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'A') light_status = 1;
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <HAL_UART_RxCpltCallback+0x58>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b41      	cmp	r3, #65	; 0x41
 8006c34:	d102      	bne.n	8006c3c <HAL_UART_RxCpltCallback+0x40>
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <HAL_UART_RxCpltCallback+0x60>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	4905      	ldr	r1, [pc, #20]	; (8006c54 <HAL_UART_RxCpltCallback+0x58>)
 8006c40:	4807      	ldr	r0, [pc, #28]	; (8006c60 <HAL_UART_RxCpltCallback+0x64>)
 8006c42:	f003 fd4c 	bl	800a6de <HAL_UART_Receive_IT>
	}
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40004400 	.word	0x40004400
 8006c54:	20002b10 	.word	0x20002b10
 8006c58:	20002b11 	.word	0x20002b11
 8006c5c:	20000298 	.word	0x20000298
 8006c60:	20002b14 	.word	0x20002b14

08006c64 <uartSendContinuePlay>:
	strcat(str1, "#");
	uart_EspSendBytes(str1, strlen(str1));
}

void uartSendContinuePlay()
{
 8006c64:	b5b0      	push	{r4, r5, r7, lr}
 8006c66:	b0c0      	sub	sp, #256	; 0x100
 8006c68:	af00      	add	r7, sp, #0
	char str1[70] = "GAME_PLAY#";
 8006c6a:	4a59      	ldr	r2, [pc, #356]	; (8006dd0 <uartSendContinuePlay+0x16c>)
 8006c6c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c72:	c303      	stmia	r3!, {r0, r1}
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	3302      	adds	r3, #2
 8006c78:	0c12      	lsrs	r2, r2, #16
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	f107 03b3 	add.w	r3, r7, #179	; 0xb3
 8006c80:	223b      	movs	r2, #59	; 0x3b
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f004 fdc5 	bl	800b814 <memset>
	char *str2 = convert2str(ID);
 8006c8a:	4b52      	ldr	r3, [pc, #328]	; (8006dd4 <uartSendContinuePlay+0x170>)
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fc f9b2 	bl	8002ff8 <convert2str>
 8006c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	strcat(str1, str2);
 8006c98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006c9c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f004 fe5f 	bl	800b964 <strcat>

	char str3[60] = "is continue playing game, time: ";
 8006ca6:	4b4c      	ldr	r3, [pc, #304]	; (8006dd8 <uartSendContinuePlay+0x174>)
 8006ca8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8006cac:	461d      	mov	r5, r3
 8006cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	7023      	strb	r3, [r4, #0]
 8006cba:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	60da      	str	r2, [r3, #12]
 8006cc8:	611a      	str	r2, [r3, #16]
 8006cca:	615a      	str	r2, [r3, #20]
 8006ccc:	f8c3 2017 	str.w	r2, [r3, #23]
	char *str4 = convert2str(TOTALTIME);
 8006cd0:	4b42      	ldr	r3, [pc, #264]	; (8006ddc <uartSendContinuePlay+0x178>)
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fc f98f 	bl	8002ff8 <convert2str>
 8006cda:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	strcat(str3, str4);
 8006cde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ce2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f004 fe3c 	bl	800b964 <strcat>

	char str5[50] = ", score: ";
 8006cec:	4a3c      	ldr	r2, [pc, #240]	; (8006de0 <uartSendContinuePlay+0x17c>)
 8006cee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cf4:	c303      	stmia	r3!, {r0, r1}
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8006cfc:	2228      	movs	r2, #40	; 0x28
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f004 fd87 	bl	800b814 <memset>
	char *str6 = convert2str(SCORE);
 8006d06:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <uartSendContinuePlay+0x180>)
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc f974 	bl	8002ff8 <convert2str>
 8006d10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	strcat(str5, str6);
 8006d14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d18:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f004 fe21 	bl	800b964 <strcat>

	char str7[50] = ", performance: ";
 8006d22:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <uartSendContinuePlay+0x184>)
 8006d24:	1d3c      	adds	r4, r7, #4
 8006d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	2222      	movs	r2, #34	; 0x22
 8006d32:	2100      	movs	r1, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f004 fd6d 	bl	800b814 <memset>
	char *str8 = convert2str(SCORE/TOTALTIME);
 8006d3a:	4b2a      	ldr	r3, [pc, #168]	; (8006de4 <uartSendContinuePlay+0x180>)
 8006d3c:	881a      	ldrh	r2, [r3, #0]
 8006d3e:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <uartSendContinuePlay+0x178>)
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fc f955 	bl	8002ff8 <convert2str>
 8006d4e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	strcat(str7, str8);
 8006d52:	1d3b      	adds	r3, r7, #4
 8006d54:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f004 fe03 	bl	800b964 <strcat>

	strcat(str1, str3);
 8006d5e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006d62:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f004 fdfb 	bl	800b964 <strcat>
	strcat(str1, str5);
 8006d6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f004 fdf3 	bl	800b964 <strcat>
	strcat(str1, str7);
 8006d7e:	1d3a      	adds	r2, r7, #4
 8006d80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d84:	4611      	mov	r1, r2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f004 fdec 	bl	800b964 <strcat>
	strcat(str1, "#");
 8006d8c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7f9 fa1d 	bl	80001d0 <strlen>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d9e:	4413      	add	r3, r2
 8006da0:	4912      	ldr	r1, [pc, #72]	; (8006dec <uartSendContinuePlay+0x188>)
 8006da2:	461a      	mov	r2, r3
 8006da4:	460b      	mov	r3, r1
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8006daa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7f9 fa0e 	bl	80001d0 <strlen>
 8006db4:	4603      	mov	r3, r0
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff ff0a 	bl	8006bd8 <uart_EspSendBytes>
}
 8006dc4:	bf00      	nop
 8006dc6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	0800d11c 	.word	0x0800d11c
 8006dd4:	20000254 	.word	0x20000254
 8006dd8:	0800d1c0 	.word	0x0800d1c0
 8006ddc:	20000280 	.word	0x20000280
 8006de0:	0800d1fc 	.word	0x0800d1fc
 8006de4:	20000256 	.word	0x20000256
 8006de8:	0800d230 	.word	0x0800d230
 8006dec:	0800d118 	.word	0x0800d118

08006df0 <uartSendSensor>:

void uartSendSensor()
{
 8006df0:	b5b0      	push	{r4, r5, r7, lr}
 8006df2:	b0ba      	sub	sp, #232	; 0xe8
 8006df4:	af00      	add	r7, sp, #0
	char str1[50] = "SENSOR_INFO#";
 8006df6:	4b4f      	ldr	r3, [pc, #316]	; (8006f34 <uartSendSensor+0x144>)
 8006df8:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8006dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dfe:	c407      	stmia	r4!, {r0, r1, r2}
 8006e00:	7023      	strb	r3, [r4, #0]
 8006e02:	f107 03b5 	add.w	r3, r7, #181	; 0xb5
 8006e06:	2225      	movs	r2, #37	; 0x25
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f004 fd02 	bl	800b814 <memset>
	char str3[60] = "Temperature: ";
 8006e10:	4b49      	ldr	r3, [pc, #292]	; (8006f38 <uartSendSensor+0x148>)
 8006e12:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8006e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e18:	c407      	stmia	r4!, {r0, r1, r2}
 8006e1a:	8023      	strh	r3, [r4, #0]
 8006e1c:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8006e20:	222e      	movs	r2, #46	; 0x2e
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f004 fcf5 	bl	800b814 <memset>
	char *str4 = convert2str((uint16_t)sensor_GetTemperature());
 8006e2a:	f7fc f8c7 	bl	8002fbc <sensor_GetTemperature>
 8006e2e:	eef0 7a40 	vmov.f32	s15, s0
 8006e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e36:	ee17 3a90 	vmov	r3, s15
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fc f8db 	bl	8002ff8 <convert2str>
 8006e42:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	strcat(str3, str4);
 8006e46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e4a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f004 fd88 	bl	800b964 <strcat>

	char str5[50] = ", light: ";
 8006e54:	4a39      	ldr	r2, [pc, #228]	; (8006f3c <uartSendSensor+0x14c>)
 8006e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006e5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e5c:	c303      	stmia	r3!, {r0, r1}
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8006e64:	2228      	movs	r2, #40	; 0x28
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f004 fcd3 	bl	800b814 <memset>
	char *str6 = convert2str(sensor_GetLight());
 8006e6e:	f7fc f88d 	bl	8002f8c <sensor_GetLight>
 8006e72:	4603      	mov	r3, r0
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fc f8bf 	bl	8002ff8 <convert2str>
 8006e7a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	strcat(str5, str6);
 8006e7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006e82:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f004 fd6c 	bl	800b964 <strcat>

	char str7[50] = ", potentiometer: ";
 8006e8c:	4b2c      	ldr	r3, [pc, #176]	; (8006f40 <uartSendSensor+0x150>)
 8006e8e:	1d3c      	adds	r4, r7, #4
 8006e90:	461d      	mov	r5, r3
 8006e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	8023      	strh	r3, [r4, #0]
 8006e9a:	f107 0316 	add.w	r3, r7, #22
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f004 fcb6 	bl	800b814 <memset>
	char *str8 = convert2str(sensor_GetPotentiometer());
 8006ea8:	f7fc f87c 	bl	8002fa4 <sensor_GetPotentiometer>
 8006eac:	4603      	mov	r3, r0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fc f8a2 	bl	8002ff8 <convert2str>
 8006eb4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	strcat(str7, str8);
 8006eb8:	1d3b      	adds	r3, r7, #4
 8006eba:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f004 fd50 	bl	800b964 <strcat>

	strcat(str1, str3);
 8006ec4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006ec8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f004 fd48 	bl	800b964 <strcat>
	strcat(str1, str5);
 8006ed4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006ed8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f004 fd40 	bl	800b964 <strcat>
	strcat(str1, str7);
 8006ee4:	1d3a      	adds	r2, r7, #4
 8006ee6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f004 fd39 	bl	800b964 <strcat>
	strcat(str1, "#");
 8006ef2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 f96a 	bl	80001d0 <strlen>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006f04:	4413      	add	r3, r2
 8006f06:	490f      	ldr	r1, [pc, #60]	; (8006f44 <uartSendSensor+0x154>)
 8006f08:	461a      	mov	r2, r3
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8006f10:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7f9 f95b 	bl	80001d0 <strlen>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fe57 	bl	8006bd8 <uart_EspSendBytes>
}
 8006f2a:	bf00      	nop
 8006f2c:	37e8      	adds	r7, #232	; 0xe8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bdb0      	pop	{r4, r5, r7, pc}
 8006f32:	bf00      	nop
 8006f34:	0800d264 	.word	0x0800d264
 8006f38:	0800d298 	.word	0x0800d298
 8006f3c:	0800d2d4 	.word	0x0800d2d4
 8006f40:	0800d308 	.word	0x0800d308
 8006f44:	0800d118 	.word	0x0800d118

08006f48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f4e:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <MX_USART2_UART_Init+0x50>)
 8006f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f6e:	220c      	movs	r2, #12
 8006f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006f7e:	4805      	ldr	r0, [pc, #20]	; (8006f94 <MX_USART2_UART_Init+0x4c>)
 8006f80:	f003 face 	bl	800a520 <HAL_UART_Init>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006f8a:	f7fb ffdd 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20002b14 	.word	0x20002b14
 8006f98:	40004400 	.word	0x40004400

08006f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa4:	f107 0314 	add.w	r3, r7, #20
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_UART_MspInit+0x94>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d133      	bne.n	8007026 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	4b1c      	ldr	r3, [pc, #112]	; (8007034 <HAL_UART_MspInit+0x98>)
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	4a1b      	ldr	r2, [pc, #108]	; (8007034 <HAL_UART_MspInit+0x98>)
 8006fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fce:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_UART_MspInit+0x98>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <HAL_UART_MspInit+0x98>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	4a14      	ldr	r2, [pc, #80]	; (8007034 <HAL_UART_MspInit+0x98>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <HAL_UART_MspInit+0x98>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007002:	2303      	movs	r3, #3
 8007004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007006:	2307      	movs	r3, #7
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800700a:	f107 0314 	add.w	r3, r7, #20
 800700e:	4619      	mov	r1, r3
 8007010:	4809      	ldr	r0, [pc, #36]	; (8007038 <HAL_UART_MspInit+0x9c>)
 8007012:	f001 f9f9 	bl	8008408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007016:	2200      	movs	r2, #0
 8007018:	2100      	movs	r1, #0
 800701a:	2026      	movs	r0, #38	; 0x26
 800701c:	f000 fdbb 	bl	8007b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007020:	2026      	movs	r0, #38	; 0x26
 8007022:	f000 fdd4 	bl	8007bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007026:	bf00      	nop
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40004400 	.word	0x40004400
 8007034:	40023800 	.word	0x40023800
 8007038:	40020000 	.word	0x40020000

0800703c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800703c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007074 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007040:	480d      	ldr	r0, [pc, #52]	; (8007078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007042:	490e      	ldr	r1, [pc, #56]	; (800707c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007044:	4a0e      	ldr	r2, [pc, #56]	; (8007080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007048:	e002      	b.n	8007050 <LoopCopyDataInit>

0800704a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800704a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800704c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800704e:	3304      	adds	r3, #4

08007050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007054:	d3f9      	bcc.n	800704a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007056:	4a0b      	ldr	r2, [pc, #44]	; (8007084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007058:	4c0b      	ldr	r4, [pc, #44]	; (8007088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800705a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800705c:	e001      	b.n	8007062 <LoopFillZerobss>

0800705e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800705e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007060:	3204      	adds	r2, #4

08007062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007064:	d3fb      	bcc.n	800705e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007066:	f7ff fafd 	bl	8006664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800706a:	f004 fbaf 	bl	800b7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800706e:	f7fb fe15 	bl	8002c9c <main>
  bx  lr    
 8007072:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800707c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8007080:	08016884 	.word	0x08016884
  ldr r2, =_sbss
 8007084:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8007088:	20002b6c 	.word	0x20002b6c

0800708c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800708c:	e7fe      	b.n	800708c <ADC_IRQHandler>
	...

08007090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_Init+0x40>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <HAL_Init+0x40>)
 800709a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800709e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80070a0:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <HAL_Init+0x40>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <HAL_Init+0x40>)
 80070a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070ac:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <HAL_Init+0x40>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a07      	ldr	r2, [pc, #28]	; (80070d0 <HAL_Init+0x40>)
 80070b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070b8:	2003      	movs	r0, #3
 80070ba:	f000 fd61 	bl	8007b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070be:	200f      	movs	r0, #15
 80070c0:	f000 f808 	bl	80070d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070c4:	f7fe ff6e 	bl	8005fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40023c00 	.word	0x40023c00

080070d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070dc:	4b12      	ldr	r3, [pc, #72]	; (8007128 <HAL_InitTick+0x54>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <HAL_InitTick+0x58>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fd79 	bl	8007bea <HAL_SYSTICK_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e00e      	b.n	8007120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b0f      	cmp	r3, #15
 8007106:	d80a      	bhi.n	800711e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007108:	2200      	movs	r2, #0
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	f000 fd41 	bl	8007b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007114:	4a06      	ldr	r2, [pc, #24]	; (8007130 <HAL_InitTick+0x5c>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	e000      	b.n	8007120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200000a0 	.word	0x200000a0
 800712c:	200000a8 	.word	0x200000a8
 8007130:	200000a4 	.word	0x200000a4

08007134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <HAL_IncTick+0x20>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	4b06      	ldr	r3, [pc, #24]	; (8007158 <HAL_IncTick+0x24>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4413      	add	r3, r2
 8007144:	4a04      	ldr	r2, [pc, #16]	; (8007158 <HAL_IncTick+0x24>)
 8007146:	6013      	str	r3, [r2, #0]
}
 8007148:	bf00      	nop
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	200000a8 	.word	0x200000a8
 8007158:	20002b58 	.word	0x20002b58

0800715c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return uwTick;
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <HAL_GetTick+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20002b58 	.word	0x20002b58

08007174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800717c:	f7ff ffee 	bl	800715c <HAL_GetTick>
 8007180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d005      	beq.n	800719a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <HAL_Delay+0x44>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800719a:	bf00      	nop
 800719c:	f7ff ffde 	bl	800715c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d8f7      	bhi.n	800719c <HAL_Delay+0x28>
  {
  }
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200000a8 	.word	0x200000a8

080071bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e033      	b.n	800723a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7f9 fa5c 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 0310 	and.w	r3, r3, #16
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d118      	bne.n	800722c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007202:	f023 0302 	bic.w	r3, r3, #2
 8007206:	f043 0202 	orr.w	r2, r3, #2
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa68 	bl	80076e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	f043 0201 	orr.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	641a      	str	r2, [r3, #64]	; 0x40
 800722a:	e001      	b.n	8007230 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_ADC_Start_DMA+0x1e>
 800725e:	2302      	movs	r3, #2
 8007260:	e0e9      	b.n	8007436 <HAL_ADC_Start_DMA+0x1f2>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d018      	beq.n	80072aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0201 	orr.w	r2, r2, #1
 8007286:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007288:	4b6d      	ldr	r3, [pc, #436]	; (8007440 <HAL_ADC_Start_DMA+0x1fc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a6d      	ldr	r2, [pc, #436]	; (8007444 <HAL_ADC_Start_DMA+0x200>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	0c9a      	lsrs	r2, r3, #18
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800729c:	e002      	b.n	80072a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f9      	bne.n	800729e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d107      	bne.n	80072ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	f040 80a1 	bne.w	800741c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007304:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007318:	d106      	bne.n	8007328 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	f023 0206 	bic.w	r2, r3, #6
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	645a      	str	r2, [r3, #68]	; 0x44
 8007326:	e002      	b.n	800732e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007336:	4b44      	ldr	r3, [pc, #272]	; (8007448 <HAL_ADC_Start_DMA+0x204>)
 8007338:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	4a43      	ldr	r2, [pc, #268]	; (800744c <HAL_ADC_Start_DMA+0x208>)
 8007340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	4a42      	ldr	r2, [pc, #264]	; (8007450 <HAL_ADC_Start_DMA+0x20c>)
 8007348:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	4a41      	ldr	r2, [pc, #260]	; (8007454 <HAL_ADC_Start_DMA+0x210>)
 8007350:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800735a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800736a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800737a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	334c      	adds	r3, #76	; 0x4c
 8007386:	4619      	mov	r1, r3
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f000 fce8 	bl	8007d60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2b00      	cmp	r3, #0
 800739a:	d12a      	bne.n	80073f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2d      	ldr	r2, [pc, #180]	; (8007458 <HAL_ADC_Start_DMA+0x214>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d015      	beq.n	80073d2 <HAL_ADC_Start_DMA+0x18e>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2c      	ldr	r2, [pc, #176]	; (800745c <HAL_ADC_Start_DMA+0x218>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d105      	bne.n	80073bc <HAL_ADC_Start_DMA+0x178>
 80073b0:	4b25      	ldr	r3, [pc, #148]	; (8007448 <HAL_ADC_Start_DMA+0x204>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a27      	ldr	r2, [pc, #156]	; (8007460 <HAL_ADC_Start_DMA+0x21c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d136      	bne.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
 80073c6:	4b20      	ldr	r3, [pc, #128]	; (8007448 <HAL_ADC_Start_DMA+0x204>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d130      	bne.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d129      	bne.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073ee:	609a      	str	r2, [r3, #8]
 80073f0:	e020      	b.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a18      	ldr	r2, [pc, #96]	; (8007458 <HAL_ADC_Start_DMA+0x214>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d11b      	bne.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d114      	bne.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007418:	609a      	str	r2, [r3, #8]
 800741a:	e00b      	b.n	8007434 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	f043 0210 	orr.w	r2, r3, #16
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742c:	f043 0201 	orr.w	r2, r3, #1
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	200000a0 	.word	0x200000a0
 8007444:	431bde83 	.word	0x431bde83
 8007448:	40012300 	.word	0x40012300
 800744c:	080078dd 	.word	0x080078dd
 8007450:	08007997 	.word	0x08007997
 8007454:	080079b3 	.word	0x080079b3
 8007458:	40012000 	.word	0x40012000
 800745c:	40012100 	.word	0x40012100
 8007460:	40012200 	.word	0x40012200

08007464 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x1c>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e105      	b.n	80076c8 <HAL_ADC_ConfigChannel+0x228>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b09      	cmp	r3, #9
 80074ca:	d925      	bls.n	8007518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68d9      	ldr	r1, [r3, #12]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	4613      	mov	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4413      	add	r3, r2
 80074e0:	3b1e      	subs	r3, #30
 80074e2:	2207      	movs	r2, #7
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43da      	mvns	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	400a      	ands	r2, r1
 80074f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68d9      	ldr	r1, [r3, #12]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	4618      	mov	r0, r3
 8007504:	4603      	mov	r3, r0
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4403      	add	r3, r0
 800750a:	3b1e      	subs	r3, #30
 800750c:	409a      	lsls	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	e022      	b.n	800755e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6919      	ldr	r1, [r3, #16]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	4613      	mov	r3, r2
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	4413      	add	r3, r2
 800752c:	2207      	movs	r2, #7
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43da      	mvns	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	400a      	ands	r2, r1
 800753a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6919      	ldr	r1, [r3, #16]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	4618      	mov	r0, r3
 800754e:	4603      	mov	r3, r0
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4403      	add	r3, r0
 8007554:	409a      	lsls	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b06      	cmp	r3, #6
 8007564:	d824      	bhi.n	80075b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	3b05      	subs	r3, #5
 8007578:	221f      	movs	r2, #31
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43da      	mvns	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	400a      	ands	r2, r1
 8007586:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	4618      	mov	r0, r3
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	3b05      	subs	r3, #5
 80075a2:	fa00 f203 	lsl.w	r2, r0, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	635a      	str	r2, [r3, #52]	; 0x34
 80075ae:	e04c      	b.n	800764a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	d824      	bhi.n	8007602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	3b23      	subs	r3, #35	; 0x23
 80075ca:	221f      	movs	r2, #31
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	43da      	mvns	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	400a      	ands	r2, r1
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4618      	mov	r0, r3
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	3b23      	subs	r3, #35	; 0x23
 80075f4:	fa00 f203 	lsl.w	r2, r0, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007600:	e023      	b.n	800764a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	3b41      	subs	r3, #65	; 0x41
 8007614:	221f      	movs	r2, #31
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	43da      	mvns	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	400a      	ands	r2, r1
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	4618      	mov	r0, r3
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	3b41      	subs	r3, #65	; 0x41
 800763e:	fa00 f203 	lsl.w	r2, r0, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800764a:	4b22      	ldr	r3, [pc, #136]	; (80076d4 <HAL_ADC_ConfigChannel+0x234>)
 800764c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a21      	ldr	r2, [pc, #132]	; (80076d8 <HAL_ADC_ConfigChannel+0x238>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d109      	bne.n	800766c <HAL_ADC_ConfigChannel+0x1cc>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b12      	cmp	r3, #18
 800765e:	d105      	bne.n	800766c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <HAL_ADC_ConfigChannel+0x238>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d123      	bne.n	80076be <HAL_ADC_ConfigChannel+0x21e>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b10      	cmp	r3, #16
 800767c:	d003      	beq.n	8007686 <HAL_ADC_ConfigChannel+0x1e6>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b11      	cmp	r3, #17
 8007684:	d11b      	bne.n	80076be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b10      	cmp	r3, #16
 8007698:	d111      	bne.n	80076be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800769a:	4b10      	ldr	r3, [pc, #64]	; (80076dc <HAL_ADC_ConfigChannel+0x23c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a10      	ldr	r2, [pc, #64]	; (80076e0 <HAL_ADC_ConfigChannel+0x240>)
 80076a0:	fba2 2303 	umull	r2, r3, r2, r3
 80076a4:	0c9a      	lsrs	r2, r3, #18
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80076b0:	e002      	b.n	80076b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f9      	bne.n	80076b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40012300 	.word	0x40012300
 80076d8:	40012000 	.word	0x40012000
 80076dc:	200000a0 	.word	0x200000a0
 80076e0:	431bde83 	.word	0x431bde83

080076e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076ec:	4b79      	ldr	r3, [pc, #484]	; (80078d4 <ADC_Init+0x1f0>)
 80076ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	431a      	orrs	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6859      	ldr	r1, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	021a      	lsls	r2, r3, #8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800773c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6859      	ldr	r1, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800775e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6899      	ldr	r1, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	4a58      	ldr	r2, [pc, #352]	; (80078d8 <ADC_Init+0x1f4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d022      	beq.n	80077c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800778a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6899      	ldr	r1, [r3, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6899      	ldr	r1, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	609a      	str	r2, [r3, #8]
 80077c0:	e00f      	b.n	80077e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0202 	bic.w	r2, r2, #2
 80077f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6899      	ldr	r1, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	7e1b      	ldrb	r3, [r3, #24]
 80077fc:	005a      	lsls	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800781e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800782e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6859      	ldr	r1, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	3b01      	subs	r3, #1
 800783c:	035a      	lsls	r2, r3, #13
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	e007      	b.n	8007858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007856:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	3b01      	subs	r3, #1
 8007874:	051a      	lsls	r2, r3, #20
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800788c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6899      	ldr	r1, [r3, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800789a:	025a      	lsls	r2, r3, #9
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6899      	ldr	r1, [r3, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	029a      	lsls	r2, r3, #10
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	609a      	str	r2, [r3, #8]
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40012300 	.word	0x40012300
 80078d8:	0f000001 	.word	0x0f000001

080078dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d13c      	bne.n	8007970 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d12b      	bne.n	8007968 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007914:	2b00      	cmp	r3, #0
 8007916:	d127      	bne.n	8007968 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007922:	2b00      	cmp	r3, #0
 8007924:	d006      	beq.n	8007934 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007930:	2b00      	cmp	r3, #0
 8007932:	d119      	bne.n	8007968 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0220 	bic.w	r2, r2, #32
 8007942:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	f043 0201 	orr.w	r2, r3, #1
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fd7b 	bl	8007464 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800796e:	e00e      	b.n	800798e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fd85 	bl	800748c <HAL_ADC_ErrorCallback>
}
 8007982:	e004      	b.n	800798e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff fd67 	bl	8007478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2240      	movs	r2, #64	; 0x40
 80079c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ca:	f043 0204 	orr.w	r2, r3, #4
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff fd5a 	bl	800748c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079f0:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <__NVIC_SetPriorityGrouping+0x44>)
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079fc:	4013      	ands	r3, r2
 80079fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a12:	4a04      	ldr	r2, [pc, #16]	; (8007a24 <__NVIC_SetPriorityGrouping+0x44>)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	60d3      	str	r3, [r2, #12]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	e000ed00 	.word	0xe000ed00

08007a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <__NVIC_GetPriorityGrouping+0x18>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	f003 0307 	and.w	r3, r3, #7
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	e000ed00 	.word	0xe000ed00

08007a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db0b      	blt.n	8007a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	f003 021f 	and.w	r2, r3, #31
 8007a5c:	4907      	ldr	r1, [pc, #28]	; (8007a7c <__NVIC_EnableIRQ+0x38>)
 8007a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	2001      	movs	r0, #1
 8007a66:	fa00 f202 	lsl.w	r2, r0, r2
 8007a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	e000e100 	.word	0xe000e100

08007a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db0a      	blt.n	8007aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	490c      	ldr	r1, [pc, #48]	; (8007acc <__NVIC_SetPriority+0x4c>)
 8007a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9e:	0112      	lsls	r2, r2, #4
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007aa8:	e00a      	b.n	8007ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	4908      	ldr	r1, [pc, #32]	; (8007ad0 <__NVIC_SetPriority+0x50>)
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	3b04      	subs	r3, #4
 8007ab8:	0112      	lsls	r2, r2, #4
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	440b      	add	r3, r1
 8007abe:	761a      	strb	r2, [r3, #24]
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	e000e100 	.word	0xe000e100
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b089      	sub	sp, #36	; 0x24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f1c3 0307 	rsb	r3, r3, #7
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	bf28      	it	cs
 8007af2:	2304      	movcs	r3, #4
 8007af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2b06      	cmp	r3, #6
 8007afc:	d902      	bls.n	8007b04 <NVIC_EncodePriority+0x30>
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3b03      	subs	r3, #3
 8007b02:	e000      	b.n	8007b06 <NVIC_EncodePriority+0x32>
 8007b04:	2300      	movs	r3, #0
 8007b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43da      	mvns	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	401a      	ands	r2, r3
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	fa01 f303 	lsl.w	r3, r1, r3
 8007b26:	43d9      	mvns	r1, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b2c:	4313      	orrs	r3, r2
         );
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3724      	adds	r7, #36	; 0x24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b4c:	d301      	bcc.n	8007b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e00f      	b.n	8007b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b52:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <SysTick_Config+0x40>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b5a:	210f      	movs	r1, #15
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	f7ff ff8e 	bl	8007a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <SysTick_Config+0x40>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b6a:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <SysTick_Config+0x40>)
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	e000e010 	.word	0xe000e010

08007b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff ff29 	bl	80079e0 <__NVIC_SetPriorityGrouping>
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ba8:	f7ff ff3e 	bl	8007a28 <__NVIC_GetPriorityGrouping>
 8007bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	6978      	ldr	r0, [r7, #20]
 8007bb4:	f7ff ff8e 	bl	8007ad4 <NVIC_EncodePriority>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff ff5d 	bl	8007a80 <__NVIC_SetPriority>
}
 8007bc6:	bf00      	nop
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff ff31 	bl	8007a44 <__NVIC_EnableIRQ>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff ffa2 	bl	8007b3c <SysTick_Config>
 8007bf8:	4603      	mov	r3, r0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007c10:	f7ff faa4 	bl	800715c <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e099      	b.n	8007d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0201 	bic.w	r2, r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c40:	e00f      	b.n	8007c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c42:	f7ff fa8b 	bl	800715c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d908      	bls.n	8007c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2203      	movs	r2, #3
 8007c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e078      	b.n	8007d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e8      	bne.n	8007c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4b38      	ldr	r3, [pc, #224]	; (8007d5c <HAL_DMA_Init+0x158>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d107      	bne.n	8007ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d117      	bne.n	8007d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fb01 	bl	8008310 <DMA_CheckFifoParam>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2240      	movs	r2, #64	; 0x40
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007d22:	2301      	movs	r3, #1
 8007d24:	e016      	b.n	8007d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fab8 	bl	80082a4 <DMA_CalcBaseAndBitshift>
 8007d34:	4603      	mov	r3, r0
 8007d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3c:	223f      	movs	r2, #63	; 0x3f
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	f010803f 	.word	0xf010803f

08007d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_DMA_Start_IT+0x26>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e040      	b.n	8007e08 <HAL_DMA_Start_IT+0xa8>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d12f      	bne.n	8007dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fa4a 	bl	8008248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db8:	223f      	movs	r2, #63	; 0x3f
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0216 	orr.w	r2, r2, #22
 8007dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d007      	beq.n	8007de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0208 	orr.w	r2, r2, #8
 8007de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0201 	orr.w	r2, r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e005      	b.n	8007e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
 8007e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e1e:	f7ff f99d 	bl	800715c <HAL_GetTick>
 8007e22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d008      	beq.n	8007e42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2280      	movs	r2, #128	; 0x80
 8007e34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e052      	b.n	8007ee8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0216 	bic.w	r2, r2, #22
 8007e50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695a      	ldr	r2, [r3, #20]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <HAL_DMA_Abort+0x62>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0208 	bic.w	r2, r2, #8
 8007e80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0201 	bic.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e92:	e013      	b.n	8007ebc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e94:	f7ff f962 	bl	800715c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d90c      	bls.n	8007ebc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e015      	b.n	8007ee8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e4      	bne.n	8007e94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	223f      	movs	r2, #63	; 0x3f
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d004      	beq.n	8007f0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2280      	movs	r2, #128	; 0x80
 8007f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e00c      	b.n	8007f28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2205      	movs	r2, #5
 8007f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f40:	4b8e      	ldr	r3, [pc, #568]	; (800817c <HAL_DMA_IRQHandler+0x248>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a8e      	ldr	r2, [pc, #568]	; (8008180 <HAL_DMA_IRQHandler+0x24c>)
 8007f46:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4a:	0a9b      	lsrs	r3, r3, #10
 8007f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5e:	2208      	movs	r2, #8
 8007f60:	409a      	lsls	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4013      	ands	r3, r2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d01a      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d013      	beq.n	8007fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0204 	bic.w	r2, r2, #4
 8007f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	409a      	lsls	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f98:	f043 0201 	orr.w	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	409a      	lsls	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d012      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	409a      	lsls	r2, r3
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fce:	f043 0202 	orr.w	r2, r3, #2
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	2204      	movs	r2, #4
 8007fdc:	409a      	lsls	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d012      	beq.n	800800c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	f043 0204 	orr.w	r2, r3, #4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008010:	2210      	movs	r2, #16
 8008012:	409a      	lsls	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4013      	ands	r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d043      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d03c      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802e:	2210      	movs	r2, #16
 8008030:	409a      	lsls	r2, r3
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d018      	beq.n	8008076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d108      	bne.n	8008064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d024      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
 8008062:	e01f      	b.n	80080a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01b      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
 8008074:	e016      	b.n	80080a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	2b00      	cmp	r3, #0
 8008082:	d107      	bne.n	8008094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0208 	bic.w	r2, r2, #8
 8008092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a8:	2220      	movs	r2, #32
 80080aa:	409a      	lsls	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 808f 	beq.w	80081d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8087 	beq.w	80081d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ca:	2220      	movs	r2, #32
 80080cc:	409a      	lsls	r2, r3
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d136      	bne.n	800814c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0216 	bic.w	r2, r2, #22
 80080ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <HAL_DMA_IRQHandler+0x1da>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0208 	bic.w	r2, r2, #8
 800811c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008122:	223f      	movs	r2, #63	; 0x3f
 8008124:	409a      	lsls	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813e:	2b00      	cmp	r3, #0
 8008140:	d07e      	beq.n	8008240 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
        }
        return;
 800814a:	e079      	b.n	8008240 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01d      	beq.n	8008196 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10d      	bne.n	8008184 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816c:	2b00      	cmp	r3, #0
 800816e:	d031      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
 8008178:	e02c      	b.n	80081d4 <HAL_DMA_IRQHandler+0x2a0>
 800817a:	bf00      	nop
 800817c:	200000a0 	.word	0x200000a0
 8008180:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d023      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
 8008194:	e01e      	b.n	80081d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10f      	bne.n	80081c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0210 	bic.w	r2, r2, #16
 80081b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d032      	beq.n	8008242 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d022      	beq.n	800822e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2205      	movs	r2, #5
 80081ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3301      	adds	r3, #1
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	429a      	cmp	r2, r3
 800820a:	d307      	bcc.n	800821c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f2      	bne.n	8008200 <HAL_DMA_IRQHandler+0x2cc>
 800821a:	e000      	b.n	800821e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800821c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
 800823e:	e000      	b.n	8008242 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008240:	bf00      	nop
    }
  }
}
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b40      	cmp	r3, #64	; 0x40
 8008274:	d108      	bne.n	8008288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008286:	e007      	b.n	8008298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	60da      	str	r2, [r3, #12]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	3b10      	subs	r3, #16
 80082b4:	4a14      	ldr	r2, [pc, #80]	; (8008308 <DMA_CalcBaseAndBitshift+0x64>)
 80082b6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ba:	091b      	lsrs	r3, r3, #4
 80082bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80082be:	4a13      	ldr	r2, [pc, #76]	; (800830c <DMA_CalcBaseAndBitshift+0x68>)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d909      	bls.n	80082e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082da:	f023 0303 	bic.w	r3, r3, #3
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	659a      	str	r2, [r3, #88]	; 0x58
 80082e4:	e007      	b.n	80082f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	aaaaaaab 	.word	0xaaaaaaab
 800830c:	08016724 	.word	0x08016724

08008310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d11f      	bne.n	800836a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d856      	bhi.n	80083de <DMA_CheckFifoParam+0xce>
 8008330:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <DMA_CheckFifoParam+0x28>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	08008349 	.word	0x08008349
 800833c:	0800835b 	.word	0x0800835b
 8008340:	08008349 	.word	0x08008349
 8008344:	080083df 	.word	0x080083df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d046      	beq.n	80083e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008358:	e043      	b.n	80083e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008362:	d140      	bne.n	80083e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008368:	e03d      	b.n	80083e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008372:	d121      	bne.n	80083b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b03      	cmp	r3, #3
 8008378:	d837      	bhi.n	80083ea <DMA_CheckFifoParam+0xda>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <DMA_CheckFifoParam+0x70>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	08008391 	.word	0x08008391
 8008384:	08008397 	.word	0x08008397
 8008388:	08008391 	.word	0x08008391
 800838c:	080083a9 	.word	0x080083a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	73fb      	strb	r3, [r7, #15]
      break;
 8008394:	e030      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d025      	beq.n	80083ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083a6:	e022      	b.n	80083ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083b0:	d11f      	bne.n	80083f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80083b6:	e01c      	b.n	80083f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d903      	bls.n	80083c6 <DMA_CheckFifoParam+0xb6>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d003      	beq.n	80083cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80083c4:	e018      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	e015      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00e      	beq.n	80083f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
      break;
 80083dc:	e00b      	b.n	80083f6 <DMA_CheckFifoParam+0xe6>
      break;
 80083de:	bf00      	nop
 80083e0:	e00a      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      break;
 80083e2:	bf00      	nop
 80083e4:	e008      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      break;
 80083e6:	bf00      	nop
 80083e8:	e006      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      break;
 80083ea:	bf00      	nop
 80083ec:	e004      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      break;
 80083ee:	bf00      	nop
 80083f0:	e002      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
      break;
 80083f6:	bf00      	nop
    }
  } 
  
  return status; 
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop

08008408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008408:	b480      	push	{r7}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008416:	2300      	movs	r3, #0
 8008418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800841a:	2300      	movs	r3, #0
 800841c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800841e:	2300      	movs	r3, #0
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	e16b      	b.n	80086fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008424:	2201      	movs	r2, #1
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4013      	ands	r3, r2
 8008436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	f040 815a 	bne.w	80086f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b01      	cmp	r3, #1
 800844c:	d005      	beq.n	800845a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008456:	2b02      	cmp	r3, #2
 8008458:	d130      	bne.n	80084bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	2203      	movs	r2, #3
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	43db      	mvns	r3, r3
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4013      	ands	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	4313      	orrs	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008490:	2201      	movs	r2, #1
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	fa02 f303 	lsl.w	r3, r2, r3
 8008498:	43db      	mvns	r3, r3
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	4013      	ands	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	f003 0201 	and.w	r2, r3, #1
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d017      	beq.n	80084f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	2203      	movs	r2, #3
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	43db      	mvns	r3, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d123      	bne.n	800854c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	08da      	lsrs	r2, r3, #3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3208      	adds	r2, #8
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	220f      	movs	r2, #15
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	43db      	mvns	r3, r3
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	4013      	ands	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	4313      	orrs	r3, r2
 800853c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	08da      	lsrs	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3208      	adds	r2, #8
 8008546:	69b9      	ldr	r1, [r7, #24]
 8008548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	2203      	movs	r2, #3
 8008558:	fa02 f303 	lsl.w	r3, r2, r3
 800855c:	43db      	mvns	r3, r3
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4013      	ands	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f003 0203 	and.w	r2, r3, #3
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	4313      	orrs	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80b4 	beq.w	80086f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	4b60      	ldr	r3, [pc, #384]	; (8008714 <HAL_GPIO_Init+0x30c>)
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	4a5f      	ldr	r2, [pc, #380]	; (8008714 <HAL_GPIO_Init+0x30c>)
 8008598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800859c:	6453      	str	r3, [r2, #68]	; 0x44
 800859e:	4b5d      	ldr	r3, [pc, #372]	; (8008714 <HAL_GPIO_Init+0x30c>)
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085aa:	4a5b      	ldr	r2, [pc, #364]	; (8008718 <HAL_GPIO_Init+0x310>)
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	089b      	lsrs	r3, r3, #2
 80085b0:	3302      	adds	r3, #2
 80085b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	220f      	movs	r2, #15
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	43db      	mvns	r3, r3
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	4013      	ands	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a52      	ldr	r2, [pc, #328]	; (800871c <HAL_GPIO_Init+0x314>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d02b      	beq.n	800862e <HAL_GPIO_Init+0x226>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a51      	ldr	r2, [pc, #324]	; (8008720 <HAL_GPIO_Init+0x318>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d025      	beq.n	800862a <HAL_GPIO_Init+0x222>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a50      	ldr	r2, [pc, #320]	; (8008724 <HAL_GPIO_Init+0x31c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01f      	beq.n	8008626 <HAL_GPIO_Init+0x21e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a4f      	ldr	r2, [pc, #316]	; (8008728 <HAL_GPIO_Init+0x320>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d019      	beq.n	8008622 <HAL_GPIO_Init+0x21a>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a4e      	ldr	r2, [pc, #312]	; (800872c <HAL_GPIO_Init+0x324>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d013      	beq.n	800861e <HAL_GPIO_Init+0x216>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a4d      	ldr	r2, [pc, #308]	; (8008730 <HAL_GPIO_Init+0x328>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00d      	beq.n	800861a <HAL_GPIO_Init+0x212>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a4c      	ldr	r2, [pc, #304]	; (8008734 <HAL_GPIO_Init+0x32c>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d007      	beq.n	8008616 <HAL_GPIO_Init+0x20e>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a4b      	ldr	r2, [pc, #300]	; (8008738 <HAL_GPIO_Init+0x330>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d101      	bne.n	8008612 <HAL_GPIO_Init+0x20a>
 800860e:	2307      	movs	r3, #7
 8008610:	e00e      	b.n	8008630 <HAL_GPIO_Init+0x228>
 8008612:	2308      	movs	r3, #8
 8008614:	e00c      	b.n	8008630 <HAL_GPIO_Init+0x228>
 8008616:	2306      	movs	r3, #6
 8008618:	e00a      	b.n	8008630 <HAL_GPIO_Init+0x228>
 800861a:	2305      	movs	r3, #5
 800861c:	e008      	b.n	8008630 <HAL_GPIO_Init+0x228>
 800861e:	2304      	movs	r3, #4
 8008620:	e006      	b.n	8008630 <HAL_GPIO_Init+0x228>
 8008622:	2303      	movs	r3, #3
 8008624:	e004      	b.n	8008630 <HAL_GPIO_Init+0x228>
 8008626:	2302      	movs	r3, #2
 8008628:	e002      	b.n	8008630 <HAL_GPIO_Init+0x228>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <HAL_GPIO_Init+0x228>
 800862e:	2300      	movs	r3, #0
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	f002 0203 	and.w	r2, r2, #3
 8008636:	0092      	lsls	r2, r2, #2
 8008638:	4093      	lsls	r3, r2
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	4313      	orrs	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008640:	4935      	ldr	r1, [pc, #212]	; (8008718 <HAL_GPIO_Init+0x310>)
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	089b      	lsrs	r3, r3, #2
 8008646:	3302      	adds	r3, #2
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800864e:	4b3b      	ldr	r3, [pc, #236]	; (800873c <HAL_GPIO_Init+0x334>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	43db      	mvns	r3, r3
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	4013      	ands	r3, r2
 800865c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008672:	4a32      	ldr	r2, [pc, #200]	; (800873c <HAL_GPIO_Init+0x334>)
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008678:	4b30      	ldr	r3, [pc, #192]	; (800873c <HAL_GPIO_Init+0x334>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	43db      	mvns	r3, r3
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	4013      	ands	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800869c:	4a27      	ldr	r2, [pc, #156]	; (800873c <HAL_GPIO_Init+0x334>)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80086a2:	4b26      	ldr	r3, [pc, #152]	; (800873c <HAL_GPIO_Init+0x334>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	43db      	mvns	r3, r3
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	4013      	ands	r3, r2
 80086b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <HAL_GPIO_Init+0x334>)
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086cc:	4b1b      	ldr	r3, [pc, #108]	; (800873c <HAL_GPIO_Init+0x334>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	43db      	mvns	r3, r3
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	4013      	ands	r3, r2
 80086da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086f0:	4a12      	ldr	r2, [pc, #72]	; (800873c <HAL_GPIO_Init+0x334>)
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	3301      	adds	r3, #1
 80086fa:	61fb      	str	r3, [r7, #28]
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	2b0f      	cmp	r3, #15
 8008700:	f67f ae90 	bls.w	8008424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	3724      	adds	r7, #36	; 0x24
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800
 8008718:	40013800 	.word	0x40013800
 800871c:	40020000 	.word	0x40020000
 8008720:	40020400 	.word	0x40020400
 8008724:	40020800 	.word	0x40020800
 8008728:	40020c00 	.word	0x40020c00
 800872c:	40021000 	.word	0x40021000
 8008730:	40021400 	.word	0x40021400
 8008734:	40021800 	.word	0x40021800
 8008738:	40021c00 	.word	0x40021c00
 800873c:	40013c00 	.word	0x40013c00

08008740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	887b      	ldrh	r3, [r7, #2]
 8008752:	4013      	ands	r3, r2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	e001      	b.n	8008762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	807b      	strh	r3, [r7, #2]
 800877c:	4613      	mov	r3, r2
 800877e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008780:	787b      	ldrb	r3, [r7, #1]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008786:	887a      	ldrh	r2, [r7, #2]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800878c:	e003      	b.n	8008796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800878e:	887b      	ldrh	r3, [r7, #2]
 8008790:	041a      	lsls	r2, r3, #16
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	619a      	str	r2, [r3, #24]
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
	...

080087a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e267      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d075      	beq.n	80088ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087c2:	4b88      	ldr	r3, [pc, #544]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f003 030c 	and.w	r3, r3, #12
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	d00c      	beq.n	80087e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ce:	4b85      	ldr	r3, [pc, #532]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d112      	bne.n	8008800 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087da:	4b82      	ldr	r3, [pc, #520]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087e6:	d10b      	bne.n	8008800 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e8:	4b7e      	ldr	r3, [pc, #504]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d05b      	beq.n	80088ac <HAL_RCC_OscConfig+0x108>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d157      	bne.n	80088ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e242      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008808:	d106      	bne.n	8008818 <HAL_RCC_OscConfig+0x74>
 800880a:	4b76      	ldr	r3, [pc, #472]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a75      	ldr	r2, [pc, #468]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	e01d      	b.n	8008854 <HAL_RCC_OscConfig+0xb0>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008820:	d10c      	bne.n	800883c <HAL_RCC_OscConfig+0x98>
 8008822:	4b70      	ldr	r3, [pc, #448]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a6f      	ldr	r2, [pc, #444]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	4b6d      	ldr	r3, [pc, #436]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a6c      	ldr	r2, [pc, #432]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e00b      	b.n	8008854 <HAL_RCC_OscConfig+0xb0>
 800883c:	4b69      	ldr	r3, [pc, #420]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a68      	ldr	r2, [pc, #416]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	4b66      	ldr	r3, [pc, #408]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a65      	ldr	r2, [pc, #404]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 800884e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d013      	beq.n	8008884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800885c:	f7fe fc7e 	bl	800715c <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008864:	f7fe fc7a 	bl	800715c <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b64      	cmp	r3, #100	; 0x64
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e207      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008876:	4b5b      	ldr	r3, [pc, #364]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f0      	beq.n	8008864 <HAL_RCC_OscConfig+0xc0>
 8008882:	e014      	b.n	80088ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008884:	f7fe fc6a 	bl	800715c <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800888c:	f7fe fc66 	bl	800715c <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b64      	cmp	r3, #100	; 0x64
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e1f3      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800889e:	4b51      	ldr	r3, [pc, #324]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1f0      	bne.n	800888c <HAL_RCC_OscConfig+0xe8>
 80088aa:	e000      	b.n	80088ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d063      	beq.n	8008982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088ba:	4b4a      	ldr	r3, [pc, #296]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 030c 	and.w	r3, r3, #12
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00b      	beq.n	80088de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088c6:	4b47      	ldr	r3, [pc, #284]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d11c      	bne.n	800890c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088d2:	4b44      	ldr	r3, [pc, #272]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d116      	bne.n	800890c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088de:	4b41      	ldr	r3, [pc, #260]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_RCC_OscConfig+0x152>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d001      	beq.n	80088f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e1c7      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f6:	4b3b      	ldr	r3, [pc, #236]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4937      	ldr	r1, [pc, #220]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008906:	4313      	orrs	r3, r2
 8008908:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800890a:	e03a      	b.n	8008982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d020      	beq.n	8008956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008914:	4b34      	ldr	r3, [pc, #208]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008916:	2201      	movs	r2, #1
 8008918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891a:	f7fe fc1f 	bl	800715c <HAL_GetTick>
 800891e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008920:	e008      	b.n	8008934 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008922:	f7fe fc1b 	bl	800715c <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e1a8      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008934:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f0      	beq.n	8008922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008940:	4b28      	ldr	r3, [pc, #160]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4925      	ldr	r1, [pc, #148]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008950:	4313      	orrs	r3, r2
 8008952:	600b      	str	r3, [r1, #0]
 8008954:	e015      	b.n	8008982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008956:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7fe fbfe 	bl	800715c <HAL_GetTick>
 8008960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008964:	f7fe fbfa 	bl	800715c <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e187      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008976:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f0      	bne.n	8008964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d036      	beq.n	80089fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d016      	beq.n	80089c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <HAL_RCC_OscConfig+0x248>)
 8008998:	2201      	movs	r2, #1
 800899a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899c:	f7fe fbde 	bl	800715c <HAL_GetTick>
 80089a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089a4:	f7fe fbda 	bl	800715c <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e167      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <HAL_RCC_OscConfig+0x240>)
 80089b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f0      	beq.n	80089a4 <HAL_RCC_OscConfig+0x200>
 80089c2:	e01b      	b.n	80089fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089c4:	4b09      	ldr	r3, [pc, #36]	; (80089ec <HAL_RCC_OscConfig+0x248>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089ca:	f7fe fbc7 	bl	800715c <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089d0:	e00e      	b.n	80089f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089d2:	f7fe fbc3 	bl	800715c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d907      	bls.n	80089f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e150      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
 80089e4:	40023800 	.word	0x40023800
 80089e8:	42470000 	.word	0x42470000
 80089ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f0:	4b88      	ldr	r3, [pc, #544]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 80089f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ea      	bne.n	80089d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8097 	beq.w	8008b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a0e:	4b81      	ldr	r3, [pc, #516]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10f      	bne.n	8008a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]
 8008a1e:	4b7d      	ldr	r3, [pc, #500]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	4a7c      	ldr	r2, [pc, #496]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a28:	6413      	str	r3, [r2, #64]	; 0x40
 8008a2a:	4b7a      	ldr	r3, [pc, #488]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a36:	2301      	movs	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a3a:	4b77      	ldr	r3, [pc, #476]	; (8008c18 <HAL_RCC_OscConfig+0x474>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d118      	bne.n	8008a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a46:	4b74      	ldr	r3, [pc, #464]	; (8008c18 <HAL_RCC_OscConfig+0x474>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a73      	ldr	r2, [pc, #460]	; (8008c18 <HAL_RCC_OscConfig+0x474>)
 8008a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a52:	f7fe fb83 	bl	800715c <HAL_GetTick>
 8008a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a5a:	f7fe fb7f 	bl	800715c <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e10c      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a6c:	4b6a      	ldr	r3, [pc, #424]	; (8008c18 <HAL_RCC_OscConfig+0x474>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d106      	bne.n	8008a8e <HAL_RCC_OscConfig+0x2ea>
 8008a80:	4b64      	ldr	r3, [pc, #400]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a84:	4a63      	ldr	r2, [pc, #396]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a8c:	e01c      	b.n	8008ac8 <HAL_RCC_OscConfig+0x324>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d10c      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x30c>
 8008a96:	4b5f      	ldr	r3, [pc, #380]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	4a5e      	ldr	r2, [pc, #376]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008a9c:	f043 0304 	orr.w	r3, r3, #4
 8008aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa2:	4b5c      	ldr	r3, [pc, #368]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	4a5b      	ldr	r2, [pc, #364]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008aa8:	f043 0301 	orr.w	r3, r3, #1
 8008aac:	6713      	str	r3, [r2, #112]	; 0x70
 8008aae:	e00b      	b.n	8008ac8 <HAL_RCC_OscConfig+0x324>
 8008ab0:	4b58      	ldr	r3, [pc, #352]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab4:	4a57      	ldr	r2, [pc, #348]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	6713      	str	r3, [r2, #112]	; 0x70
 8008abc:	4b55      	ldr	r3, [pc, #340]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac0:	4a54      	ldr	r2, [pc, #336]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008ac2:	f023 0304 	bic.w	r3, r3, #4
 8008ac6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d015      	beq.n	8008afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad0:	f7fe fb44 	bl	800715c <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ad6:	e00a      	b.n	8008aee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ad8:	f7fe fb40 	bl	800715c <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e0cb      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aee:	4b49      	ldr	r3, [pc, #292]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0ee      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x334>
 8008afa:	e014      	b.n	8008b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008afc:	f7fe fb2e 	bl	800715c <HAL_GetTick>
 8008b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b02:	e00a      	b.n	8008b1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b04:	f7fe fb2a 	bl	800715c <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e0b5      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b1a:	4b3e      	ldr	r3, [pc, #248]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1ee      	bne.n	8008b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d105      	bne.n	8008b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2c:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b30:	4a38      	ldr	r2, [pc, #224]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80a1 	beq.w	8008c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b42:	4b34      	ldr	r3, [pc, #208]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 030c 	and.w	r3, r3, #12
 8008b4a:	2b08      	cmp	r3, #8
 8008b4c:	d05c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d141      	bne.n	8008bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b56:	4b31      	ldr	r3, [pc, #196]	; (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b5c:	f7fe fafe 	bl	800715c <HAL_GetTick>
 8008b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b64:	f7fe fafa 	bl	800715c <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e087      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b76:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f0      	bne.n	8008b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69da      	ldr	r2, [r3, #28]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	019b      	lsls	r3, r3, #6
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	085b      	lsrs	r3, r3, #1
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	041b      	lsls	r3, r3, #16
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	061b      	lsls	r3, r3, #24
 8008ba6:	491b      	ldr	r1, [pc, #108]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb2:	f7fe fad3 	bl	800715c <HAL_GetTick>
 8008bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb8:	e008      	b.n	8008bcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bba:	f7fe facf 	bl	800715c <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e05c      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bcc:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0f0      	beq.n	8008bba <HAL_RCC_OscConfig+0x416>
 8008bd8:	e054      	b.n	8008c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bda:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <HAL_RCC_OscConfig+0x478>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be0:	f7fe fabc 	bl	800715c <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be8:	f7fe fab8 	bl	800715c <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e045      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_RCC_OscConfig+0x470>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f0      	bne.n	8008be8 <HAL_RCC_OscConfig+0x444>
 8008c06:	e03d      	b.n	8008c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d107      	bne.n	8008c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e038      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
 8008c14:	40023800 	.word	0x40023800
 8008c18:	40007000 	.word	0x40007000
 8008c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c20:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <HAL_RCC_OscConfig+0x4ec>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d028      	beq.n	8008c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d121      	bne.n	8008c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d11a      	bne.n	8008c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c50:	4013      	ands	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d111      	bne.n	8008c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d107      	bne.n	8008c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d001      	beq.n	8008c84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40023800 	.word	0x40023800

08008c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0cc      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca8:	4b68      	ldr	r3, [pc, #416]	; (8008e4c <HAL_RCC_ClockConfig+0x1b8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d90c      	bls.n	8008cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb6:	4b65      	ldr	r3, [pc, #404]	; (8008e4c <HAL_RCC_ClockConfig+0x1b8>)
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbe:	4b63      	ldr	r3, [pc, #396]	; (8008e4c <HAL_RCC_ClockConfig+0x1b8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e0b8      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d020      	beq.n	8008d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ce8:	4b59      	ldr	r3, [pc, #356]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	4a58      	ldr	r2, [pc, #352]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d00:	4b53      	ldr	r3, [pc, #332]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	4a52      	ldr	r2, [pc, #328]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d0c:	4b50      	ldr	r3, [pc, #320]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	494d      	ldr	r1, [pc, #308]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d044      	beq.n	8008db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d107      	bne.n	8008d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d32:	4b47      	ldr	r3, [pc, #284]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d119      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e07f      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d003      	beq.n	8008d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d107      	bne.n	8008d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d52:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e06f      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d62:	4b3b      	ldr	r3, [pc, #236]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e067      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d72:	4b37      	ldr	r3, [pc, #220]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 0203 	bic.w	r2, r3, #3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	4934      	ldr	r1, [pc, #208]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d84:	f7fe f9ea 	bl	800715c <HAL_GetTick>
 8008d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d8a:	e00a      	b.n	8008da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d8c:	f7fe f9e6 	bl	800715c <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e04f      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da2:	4b2b      	ldr	r3, [pc, #172]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 020c 	and.w	r2, r3, #12
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d1eb      	bne.n	8008d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008db4:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <HAL_RCC_ClockConfig+0x1b8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d20c      	bcs.n	8008ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dc2:	4b22      	ldr	r3, [pc, #136]	; (8008e4c <HAL_RCC_ClockConfig+0x1b8>)
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	b2d2      	uxtb	r2, r2
 8008dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dca:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <HAL_RCC_ClockConfig+0x1b8>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d001      	beq.n	8008ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e032      	b.n	8008e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d008      	beq.n	8008dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008de8:	4b19      	ldr	r3, [pc, #100]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4916      	ldr	r1, [pc, #88]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	490e      	ldr	r1, [pc, #56]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e1a:	f000 f821 	bl	8008e60 <HAL_RCC_GetSysClockFreq>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <HAL_RCC_ClockConfig+0x1bc>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	091b      	lsrs	r3, r3, #4
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	490a      	ldr	r1, [pc, #40]	; (8008e54 <HAL_RCC_ClockConfig+0x1c0>)
 8008e2c:	5ccb      	ldrb	r3, [r1, r3]
 8008e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e32:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <HAL_RCC_ClockConfig+0x1c4>)
 8008e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <HAL_RCC_ClockConfig+0x1c8>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe f94a 	bl	80070d4 <HAL_InitTick>

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	40023c00 	.word	0x40023c00
 8008e50:	40023800 	.word	0x40023800
 8008e54:	0801670c 	.word	0x0801670c
 8008e58:	200000a0 	.word	0x200000a0
 8008e5c:	200000a4 	.word	0x200000a4

08008e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e64:	b094      	sub	sp, #80	; 0x50
 8008e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e70:	2300      	movs	r3, #0
 8008e72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e78:	4b79      	ldr	r3, [pc, #484]	; (8009060 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 030c 	and.w	r3, r3, #12
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d00d      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	f200 80e1 	bhi.w	800904c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <HAL_RCC_GetSysClockFreq+0x34>
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d003      	beq.n	8008e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8008e92:	e0db      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e94:	4b73      	ldr	r3, [pc, #460]	; (8009064 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008e98:	e0db      	b.n	8009052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e9a:	4b73      	ldr	r3, [pc, #460]	; (8009068 <HAL_RCC_GetSysClockFreq+0x208>)
 8008e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e9e:	e0d8      	b.n	8009052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ea0:	4b6f      	ldr	r3, [pc, #444]	; (8009060 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008eaa:	4b6d      	ldr	r3, [pc, #436]	; (8009060 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d063      	beq.n	8008f7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eb6:	4b6a      	ldr	r3, [pc, #424]	; (8009060 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	099b      	lsrs	r3, r3, #6
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eca:	2300      	movs	r3, #0
 8008ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	f04f 0000 	mov.w	r0, #0
 8008eda:	f04f 0100 	mov.w	r1, #0
 8008ede:	0159      	lsls	r1, r3, #5
 8008ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ee4:	0150      	lsls	r0, r2, #5
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4621      	mov	r1, r4
 8008eec:	1a51      	subs	r1, r2, r1
 8008eee:	6139      	str	r1, [r7, #16]
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	f04f 0300 	mov.w	r3, #0
 8008f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f04:	4659      	mov	r1, fp
 8008f06:	018b      	lsls	r3, r1, #6
 8008f08:	4651      	mov	r1, sl
 8008f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f0e:	4651      	mov	r1, sl
 8008f10:	018a      	lsls	r2, r1, #6
 8008f12:	4651      	mov	r1, sl
 8008f14:	ebb2 0801 	subs.w	r8, r2, r1
 8008f18:	4659      	mov	r1, fp
 8008f1a:	eb63 0901 	sbc.w	r9, r3, r1
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f32:	4690      	mov	r8, r2
 8008f34:	4699      	mov	r9, r3
 8008f36:	4623      	mov	r3, r4
 8008f38:	eb18 0303 	adds.w	r3, r8, r3
 8008f3c:	60bb      	str	r3, [r7, #8]
 8008f3e:	462b      	mov	r3, r5
 8008f40:	eb49 0303 	adc.w	r3, r9, r3
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008f52:	4629      	mov	r1, r5
 8008f54:	024b      	lsls	r3, r1, #9
 8008f56:	4621      	mov	r1, r4
 8008f58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	024a      	lsls	r2, r1, #9
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f66:	2200      	movs	r2, #0
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f70:	f7f7 f986 	bl	8000280 <__aeabi_uldivmod>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4613      	mov	r3, r2
 8008f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f7c:	e058      	b.n	8009030 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f7e:	4b38      	ldr	r3, [pc, #224]	; (8009060 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	099b      	lsrs	r3, r3, #6
 8008f84:	2200      	movs	r2, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	4611      	mov	r1, r2
 8008f8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f8e:	623b      	str	r3, [r7, #32]
 8008f90:	2300      	movs	r3, #0
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
 8008f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	f04f 0000 	mov.w	r0, #0
 8008fa0:	f04f 0100 	mov.w	r1, #0
 8008fa4:	0159      	lsls	r1, r3, #5
 8008fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008faa:	0150      	lsls	r0, r2, #5
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8008fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8008fd8:	f04f 0200 	mov.w	r2, #0
 8008fdc:	f04f 0300 	mov.w	r3, #0
 8008fe0:	00eb      	lsls	r3, r5, #3
 8008fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fe6:	00e2      	lsls	r2, r4, #3
 8008fe8:	4614      	mov	r4, r2
 8008fea:	461d      	mov	r5, r3
 8008fec:	4643      	mov	r3, r8
 8008fee:	18e3      	adds	r3, r4, r3
 8008ff0:	603b      	str	r3, [r7, #0]
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	eb45 0303 	adc.w	r3, r5, r3
 8008ff8:	607b      	str	r3, [r7, #4]
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009006:	4629      	mov	r1, r5
 8009008:	028b      	lsls	r3, r1, #10
 800900a:	4621      	mov	r1, r4
 800900c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009010:	4621      	mov	r1, r4
 8009012:	028a      	lsls	r2, r1, #10
 8009014:	4610      	mov	r0, r2
 8009016:	4619      	mov	r1, r3
 8009018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800901a:	2200      	movs	r2, #0
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	61fa      	str	r2, [r7, #28]
 8009020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009024:	f7f7 f92c 	bl	8000280 <__aeabi_uldivmod>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4613      	mov	r3, r2
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <HAL_RCC_GetSysClockFreq+0x200>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	3301      	adds	r3, #1
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009044:	fbb2 f3f3 	udiv	r3, r2, r3
 8009048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800904a:	e002      	b.n	8009052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <HAL_RCC_GetSysClockFreq+0x204>)
 800904e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009054:	4618      	mov	r0, r3
 8009056:	3750      	adds	r7, #80	; 0x50
 8009058:	46bd      	mov	sp, r7
 800905a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800905e:	bf00      	nop
 8009060:	40023800 	.word	0x40023800
 8009064:	00f42400 	.word	0x00f42400
 8009068:	007a1200 	.word	0x007a1200

0800906c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009070:	4b03      	ldr	r3, [pc, #12]	; (8009080 <HAL_RCC_GetHCLKFreq+0x14>)
 8009072:	681b      	ldr	r3, [r3, #0]
}
 8009074:	4618      	mov	r0, r3
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	200000a0 	.word	0x200000a0

08009084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009088:	f7ff fff0 	bl	800906c <HAL_RCC_GetHCLKFreq>
 800908c:	4602      	mov	r2, r0
 800908e:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	0a9b      	lsrs	r3, r3, #10
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	4903      	ldr	r1, [pc, #12]	; (80090a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800909a:	5ccb      	ldrb	r3, [r1, r3]
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40023800 	.word	0x40023800
 80090a8:	0801671c 	.word	0x0801671c

080090ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090b0:	f7ff ffdc 	bl	800906c <HAL_RCC_GetHCLKFreq>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	0b5b      	lsrs	r3, r3, #13
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	4903      	ldr	r1, [pc, #12]	; (80090d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090c2:	5ccb      	ldrb	r3, [r1, r3]
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40023800 	.word	0x40023800
 80090d0:	0801671c 	.word	0x0801671c

080090d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e07b      	b.n	80091de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d108      	bne.n	8009100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090f6:	d009      	beq.n	800910c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	61da      	str	r2, [r3, #28]
 80090fe:	e005      	b.n	800910c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fc f840 	bl	80051ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917c:	431a      	orrs	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009190:	ea42 0103 	orr.w	r1, r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	0c1b      	lsrs	r3, r3, #16
 80091aa:	f003 0104 	and.w	r1, r3, #4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	f003 0210 	and.w	r2, r3, #16
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b088      	sub	sp, #32
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_SPI_Transmit+0x22>
 8009204:	2302      	movs	r3, #2
 8009206:	e126      	b.n	8009456 <HAL_SPI_Transmit+0x270>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009210:	f7fd ffa4 	bl	800715c <HAL_GetTick>
 8009214:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009216:	88fb      	ldrh	r3, [r7, #6]
 8009218:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b01      	cmp	r3, #1
 8009224:	d002      	beq.n	800922c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009226:	2302      	movs	r3, #2
 8009228:	77fb      	strb	r3, [r7, #31]
    goto error;
 800922a:	e10b      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <HAL_SPI_Transmit+0x52>
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800923c:	e102      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2203      	movs	r2, #3
 8009242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	88fa      	ldrh	r2, [r7, #6]
 8009256:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	88fa      	ldrh	r2, [r7, #6]
 800925c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009284:	d10f      	bne.n	80092a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b40      	cmp	r3, #64	; 0x40
 80092b2:	d007      	beq.n	80092c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092cc:	d14b      	bne.n	8009366 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <HAL_SPI_Transmit+0xf6>
 80092d6:	8afb      	ldrh	r3, [r7, #22]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d13e      	bne.n	800935a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	1c9a      	adds	r2, r3, #2
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009300:	e02b      	b.n	800935a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b02      	cmp	r3, #2
 800930e:	d112      	bne.n	8009336 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	881a      	ldrh	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	1c9a      	adds	r2, r3, #2
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	86da      	strh	r2, [r3, #54]	; 0x36
 8009334:	e011      	b.n	800935a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009336:	f7fd ff11 	bl	800715c <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d803      	bhi.n	800934e <HAL_SPI_Transmit+0x168>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d102      	bne.n	8009354 <HAL_SPI_Transmit+0x16e>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009358:	e074      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1ce      	bne.n	8009302 <HAL_SPI_Transmit+0x11c>
 8009364:	e04c      	b.n	8009400 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_SPI_Transmit+0x18e>
 800936e:	8afb      	ldrh	r3, [r7, #22]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d140      	bne.n	80093f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800939a:	e02c      	b.n	80093f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d113      	bne.n	80093d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	330c      	adds	r3, #12
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80093d0:	e011      	b.n	80093f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093d2:	f7fd fec3 	bl	800715c <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d803      	bhi.n	80093ea <HAL_SPI_Transmit+0x204>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d102      	bne.n	80093f0 <HAL_SPI_Transmit+0x20a>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093f4:	e026      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1cd      	bne.n	800939c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f8b3 	bl	8009570 <SPI_EndRxTxTransaction>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2220      	movs	r2, #32
 8009414:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	77fb      	strb	r3, [r7, #31]
 8009440:	e000      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009454:	7ffb      	ldrb	r3, [r7, #31]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	4613      	mov	r3, r2
 800946e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009470:	f7fd fe74 	bl	800715c <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	1a9b      	subs	r3, r3, r2
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4413      	add	r3, r2
 800947e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009480:	f7fd fe6c 	bl	800715c <HAL_GetTick>
 8009484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009486:	4b39      	ldr	r3, [pc, #228]	; (800956c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	015b      	lsls	r3, r3, #5
 800948c:	0d1b      	lsrs	r3, r3, #20
 800948e:	69fa      	ldr	r2, [r7, #28]
 8009490:	fb02 f303 	mul.w	r3, r2, r3
 8009494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009496:	e054      	b.n	8009542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d050      	beq.n	8009542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094a0:	f7fd fe5c 	bl	800715c <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d902      	bls.n	80094b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d13d      	bne.n	8009532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094ce:	d111      	bne.n	80094f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d8:	d004      	beq.n	80094e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e2:	d107      	bne.n	80094f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094fc:	d10f      	bne.n	800951e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800951c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e017      	b.n	8009562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	3b01      	subs	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4013      	ands	r3, r2
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	429a      	cmp	r2, r3
 8009550:	bf0c      	ite	eq
 8009552:	2301      	moveq	r3, #1
 8009554:	2300      	movne	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	429a      	cmp	r2, r3
 800955e:	d19b      	bne.n	8009498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	200000a0 	.word	0x200000a0

08009570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af02      	add	r7, sp, #8
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <SPI_EndRxTxTransaction+0x7c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a1b      	ldr	r2, [pc, #108]	; (80095f0 <SPI_EndRxTxTransaction+0x80>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	0d5b      	lsrs	r3, r3, #21
 8009588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800958c:	fb02 f303 	mul.w	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800959a:	d112      	bne.n	80095c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	2180      	movs	r1, #128	; 0x80
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff ff5a 	bl	8009460 <SPI_WaitFlagStateUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d016      	beq.n	80095e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b6:	f043 0220 	orr.w	r2, r3, #32
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e00f      	b.n	80095e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00a      	beq.n	80095de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d8:	2b80      	cmp	r3, #128	; 0x80
 80095da:	d0f2      	beq.n	80095c2 <SPI_EndRxTxTransaction+0x52>
 80095dc:	e000      	b.n	80095e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80095de:	bf00      	nop
  }

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	200000a0 	.word	0x200000a0
 80095f0:	165e9f81 	.word	0x165e9f81

080095f4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e038      	b.n	800967c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7f7 ff8e 	bl	8001540 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3308      	adds	r3, #8
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f001 ffee 	bl	800b610 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	461a      	mov	r2, r3
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	f002 f850 	bl	800b6e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6858      	ldr	r0, [r3, #4]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	f002 f87d 	bl	800b750 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	6892      	ldr	r2, [r2, #8]
 800965e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	6892      	ldr	r2, [r2, #8]
 800966a:	f041 0101 	orr.w	r1, r1, #1
 800966e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e041      	b.n	800971a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fd f886 	bl	80067bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f000 fbb2 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d001      	beq.n	800973c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e04e      	b.n	80097da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0201 	orr.w	r2, r2, #1
 8009752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a23      	ldr	r2, [pc, #140]	; (80097e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d022      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009766:	d01d      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a1f      	ldr	r2, [pc, #124]	; (80097ec <HAL_TIM_Base_Start_IT+0xc8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d018      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a1c      	ldr	r2, [pc, #112]	; (80097f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00e      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a1b      	ldr	r2, [pc, #108]	; (80097f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d009      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a19      	ldr	r2, [pc, #100]	; (80097fc <HAL_TIM_Base_Start_IT+0xd8>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x80>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a18      	ldr	r2, [pc, #96]	; (8009800 <HAL_TIM_Base_Start_IT+0xdc>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d111      	bne.n	80097c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d010      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f042 0201 	orr.w	r2, r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c6:	e007      	b.n	80097d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0201 	orr.w	r2, r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	40010000 	.word	0x40010000
 80097ec:	40000400 	.word	0x40000400
 80097f0:	40000800 	.word	0x40000800
 80097f4:	40000c00 	.word	0x40000c00
 80097f8:	40010400 	.word	0x40010400
 80097fc:	40014000 	.word	0x40014000
 8009800:	40001800 	.word	0x40001800

08009804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e041      	b.n	800989a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f839 	bl	80098a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3304      	adds	r3, #4
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f000 faf2 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d122      	bne.n	8009912 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d11b      	bne.n	8009912 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f06f 0202 	mvn.w	r2, #2
 80098e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fa78 	bl	8009dee <HAL_TIM_IC_CaptureCallback>
 80098fe:	e005      	b.n	800990c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fa6a 	bl	8009dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa7b 	bl	8009e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b04      	cmp	r3, #4
 800991e:	d122      	bne.n	8009966 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b04      	cmp	r3, #4
 800992c:	d11b      	bne.n	8009966 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f06f 0204 	mvn.w	r2, #4
 8009936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa4e 	bl	8009dee <HAL_TIM_IC_CaptureCallback>
 8009952:	e005      	b.n	8009960 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fa40 	bl	8009dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa51 	bl	8009e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f003 0308 	and.w	r3, r3, #8
 8009970:	2b08      	cmp	r3, #8
 8009972:	d122      	bne.n	80099ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b08      	cmp	r3, #8
 8009980:	d11b      	bne.n	80099ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f06f 0208 	mvn.w	r2, #8
 800998a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2204      	movs	r2, #4
 8009990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa24 	bl	8009dee <HAL_TIM_IC_CaptureCallback>
 80099a6:	e005      	b.n	80099b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fa16 	bl	8009dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa27 	bl	8009e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f003 0310 	and.w	r3, r3, #16
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d122      	bne.n	8009a0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f003 0310 	and.w	r3, r3, #16
 80099d2:	2b10      	cmp	r3, #16
 80099d4:	d11b      	bne.n	8009a0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f06f 0210 	mvn.w	r2, #16
 80099de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2208      	movs	r2, #8
 80099e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9fa 	bl	8009dee <HAL_TIM_IC_CaptureCallback>
 80099fa:	e005      	b.n	8009a08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f9ec 	bl	8009dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f9fd 	bl	8009e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10e      	bne.n	8009a3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d107      	bne.n	8009a3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f06f 0201 	mvn.w	r2, #1
 8009a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7fb fac3 	bl	8004fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a44:	2b80      	cmp	r3, #128	; 0x80
 8009a46:	d10e      	bne.n	8009a66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d107      	bne.n	8009a66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fd53 	bl	800a50c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d10e      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d107      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f9c2 	bl	8009e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d10e      	bne.n	8009abe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d107      	bne.n	8009abe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f06f 0220 	mvn.w	r2, #32
 8009ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fd1d 	bl	800a4f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e0ae      	b.n	8009c44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b0c      	cmp	r3, #12
 8009af2:	f200 809f 	bhi.w	8009c34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b31 	.word	0x08009b31
 8009b00:	08009c35 	.word	0x08009c35
 8009b04:	08009c35 	.word	0x08009c35
 8009b08:	08009c35 	.word	0x08009c35
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009c35 	.word	0x08009c35
 8009b14:	08009c35 	.word	0x08009c35
 8009b18:	08009c35 	.word	0x08009c35
 8009b1c:	08009bb3 	.word	0x08009bb3
 8009b20:	08009c35 	.word	0x08009c35
 8009b24:	08009c35 	.word	0x08009c35
 8009b28:	08009c35 	.word	0x08009c35
 8009b2c:	08009bf3 	.word	0x08009bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fa18 	bl	8009f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0208 	orr.w	r2, r2, #8
 8009b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 0204 	bic.w	r2, r2, #4
 8009b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6999      	ldr	r1, [r3, #24]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	619a      	str	r2, [r3, #24]
      break;
 8009b6e:	e064      	b.n	8009c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68b9      	ldr	r1, [r7, #8]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fa68 	bl	800a04c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6999      	ldr	r1, [r3, #24]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	021a      	lsls	r2, r3, #8
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	619a      	str	r2, [r3, #24]
      break;
 8009bb0:	e043      	b.n	8009c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fabd 	bl	800a138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0208 	orr.w	r2, r2, #8
 8009bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0204 	bic.w	r2, r2, #4
 8009bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69d9      	ldr	r1, [r3, #28]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	691a      	ldr	r2, [r3, #16]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	61da      	str	r2, [r3, #28]
      break;
 8009bf0:	e023      	b.n	8009c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68b9      	ldr	r1, [r7, #8]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fb11 	bl	800a220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69d9      	ldr	r1, [r3, #28]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	021a      	lsls	r2, r3, #8
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	61da      	str	r2, [r3, #28]
      break;
 8009c32:	e002      	b.n	8009c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	75fb      	strb	r3, [r7, #23]
      break;
 8009c38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_TIM_ConfigClockSource+0x1c>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e0b4      	b.n	8009dd2 <HAL_TIM_ConfigClockSource+0x186>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2202      	movs	r2, #2
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca0:	d03e      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0xd4>
 8009ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca6:	f200 8087 	bhi.w	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cae:	f000 8086 	beq.w	8009dbe <HAL_TIM_ConfigClockSource+0x172>
 8009cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb6:	d87f      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cb8:	2b70      	cmp	r3, #112	; 0x70
 8009cba:	d01a      	beq.n	8009cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8009cbc:	2b70      	cmp	r3, #112	; 0x70
 8009cbe:	d87b      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc0:	2b60      	cmp	r3, #96	; 0x60
 8009cc2:	d050      	beq.n	8009d66 <HAL_TIM_ConfigClockSource+0x11a>
 8009cc4:	2b60      	cmp	r3, #96	; 0x60
 8009cc6:	d877      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc8:	2b50      	cmp	r3, #80	; 0x50
 8009cca:	d03c      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0xfa>
 8009ccc:	2b50      	cmp	r3, #80	; 0x50
 8009cce:	d873      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d058      	beq.n	8009d86 <HAL_TIM_ConfigClockSource+0x13a>
 8009cd4:	2b40      	cmp	r3, #64	; 0x40
 8009cd6:	d86f      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd8:	2b30      	cmp	r3, #48	; 0x30
 8009cda:	d064      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x15a>
 8009cdc:	2b30      	cmp	r3, #48	; 0x30
 8009cde:	d86b      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d060      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	d867      	bhi.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d05c      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x15a>
 8009cec:	2b10      	cmp	r3, #16
 8009cee:	d05a      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0x15a>
 8009cf0:	e062      	b.n	8009db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	6899      	ldr	r1, [r3, #8]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f000 fb5d 	bl	800a3c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	609a      	str	r2, [r3, #8]
      break;
 8009d1e:	e04f      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	6899      	ldr	r1, [r3, #8]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f000 fb46 	bl	800a3c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d42:	609a      	str	r2, [r3, #8]
      break;
 8009d44:	e03c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6859      	ldr	r1, [r3, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f000 faba 	bl	800a2cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2150      	movs	r1, #80	; 0x50
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fb13 	bl	800a38a <TIM_ITRx_SetConfig>
      break;
 8009d64:	e02c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	6859      	ldr	r1, [r3, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f000 fad9 	bl	800a32a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2160      	movs	r1, #96	; 0x60
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fb03 	bl	800a38a <TIM_ITRx_SetConfig>
      break;
 8009d84:	e01c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6859      	ldr	r1, [r3, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	461a      	mov	r2, r3
 8009d94:	f000 fa9a 	bl	800a2cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2140      	movs	r1, #64	; 0x40
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 faf3 	bl	800a38a <TIM_ITRx_SetConfig>
      break;
 8009da4:	e00c      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4619      	mov	r1, r3
 8009db0:	4610      	mov	r0, r2
 8009db2:	f000 faea 	bl	800a38a <TIM_ITRx_SetConfig>
      break;
 8009db6:	e003      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
      break;
 8009dbc:	e000      	b.n	8009dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a40      	ldr	r2, [pc, #256]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d013      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e4a:	d00f      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a3d      	ldr	r2, [pc, #244]	; (8009f44 <TIM_Base_SetConfig+0x118>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00b      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a3c      	ldr	r2, [pc, #240]	; (8009f48 <TIM_Base_SetConfig+0x11c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d007      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a3b      	ldr	r2, [pc, #236]	; (8009f4c <TIM_Base_SetConfig+0x120>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a3a      	ldr	r2, [pc, #232]	; (8009f50 <TIM_Base_SetConfig+0x124>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d108      	bne.n	8009e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a2f      	ldr	r2, [pc, #188]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d02b      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8c:	d027      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a2c      	ldr	r2, [pc, #176]	; (8009f44 <TIM_Base_SetConfig+0x118>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d023      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a2b      	ldr	r2, [pc, #172]	; (8009f48 <TIM_Base_SetConfig+0x11c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d01f      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <TIM_Base_SetConfig+0x120>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d01b      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a29      	ldr	r2, [pc, #164]	; (8009f50 <TIM_Base_SetConfig+0x124>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d017      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a28      	ldr	r2, [pc, #160]	; (8009f54 <TIM_Base_SetConfig+0x128>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d013      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a27      	ldr	r2, [pc, #156]	; (8009f58 <TIM_Base_SetConfig+0x12c>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00f      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a26      	ldr	r2, [pc, #152]	; (8009f5c <TIM_Base_SetConfig+0x130>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d00b      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a25      	ldr	r2, [pc, #148]	; (8009f60 <TIM_Base_SetConfig+0x134>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d007      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a24      	ldr	r2, [pc, #144]	; (8009f64 <TIM_Base_SetConfig+0x138>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d003      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a23      	ldr	r2, [pc, #140]	; (8009f68 <TIM_Base_SetConfig+0x13c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d108      	bne.n	8009ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_Base_SetConfig+0xf8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <TIM_Base_SetConfig+0x124>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d103      	bne.n	8009f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	691a      	ldr	r2, [r3, #16]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	615a      	str	r2, [r3, #20]
}
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40000400 	.word	0x40000400
 8009f48:	40000800 	.word	0x40000800
 8009f4c:	40000c00 	.word	0x40000c00
 8009f50:	40010400 	.word	0x40010400
 8009f54:	40014000 	.word	0x40014000
 8009f58:	40014400 	.word	0x40014400
 8009f5c:	40014800 	.word	0x40014800
 8009f60:	40001800 	.word	0x40001800
 8009f64:	40001c00 	.word	0x40001c00
 8009f68:	40002000 	.word	0x40002000

08009f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f023 0201 	bic.w	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f023 0302 	bic.w	r3, r3, #2
 8009fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a20      	ldr	r2, [pc, #128]	; (800a044 <TIM_OC1_SetConfig+0xd8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d003      	beq.n	8009fd0 <TIM_OC1_SetConfig+0x64>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <TIM_OC1_SetConfig+0xdc>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10c      	bne.n	8009fea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f023 0308 	bic.w	r3, r3, #8
 8009fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f023 0304 	bic.w	r3, r3, #4
 8009fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a15      	ldr	r2, [pc, #84]	; (800a044 <TIM_OC1_SetConfig+0xd8>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC1_SetConfig+0x8e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a14      	ldr	r2, [pc, #80]	; (800a048 <TIM_OC1_SetConfig+0xdc>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d111      	bne.n	800a01e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	621a      	str	r2, [r3, #32]
}
 800a038:	bf00      	nop
 800a03a:	371c      	adds	r7, #28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	40010000 	.word	0x40010000
 800a048:	40010400 	.word	0x40010400

0800a04c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	f023 0210 	bic.w	r2, r3, #16
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f023 0320 	bic.w	r3, r3, #32
 800a096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a22      	ldr	r2, [pc, #136]	; (800a130 <TIM_OC2_SetConfig+0xe4>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d003      	beq.n	800a0b4 <TIM_OC2_SetConfig+0x68>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a21      	ldr	r2, [pc, #132]	; (800a134 <TIM_OC2_SetConfig+0xe8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d10d      	bne.n	800a0d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	011b      	lsls	r3, r3, #4
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a17      	ldr	r2, [pc, #92]	; (800a130 <TIM_OC2_SetConfig+0xe4>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d003      	beq.n	800a0e0 <TIM_OC2_SetConfig+0x94>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a16      	ldr	r2, [pc, #88]	; (800a134 <TIM_OC2_SetConfig+0xe8>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d113      	bne.n	800a108 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	4313      	orrs	r3, r2
 800a106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	621a      	str	r2, [r3, #32]
}
 800a122:	bf00      	nop
 800a124:	371c      	adds	r7, #28
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	40010000 	.word	0x40010000
 800a134:	40010400 	.word	0x40010400

0800a138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0303 	bic.w	r3, r3, #3
 800a16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	021b      	lsls	r3, r3, #8
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a21      	ldr	r2, [pc, #132]	; (800a218 <TIM_OC3_SetConfig+0xe0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d003      	beq.n	800a19e <TIM_OC3_SetConfig+0x66>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a20      	ldr	r2, [pc, #128]	; (800a21c <TIM_OC3_SetConfig+0xe4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d10d      	bne.n	800a1ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a16      	ldr	r2, [pc, #88]	; (800a218 <TIM_OC3_SetConfig+0xe0>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d003      	beq.n	800a1ca <TIM_OC3_SetConfig+0x92>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a15      	ldr	r2, [pc, #84]	; (800a21c <TIM_OC3_SetConfig+0xe4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d113      	bne.n	800a1f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	621a      	str	r2, [r3, #32]
}
 800a20c:	bf00      	nop
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40010000 	.word	0x40010000
 800a21c:	40010400 	.word	0x40010400

0800a220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a26a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	031b      	lsls	r3, r3, #12
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	4313      	orrs	r3, r2
 800a276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a12      	ldr	r2, [pc, #72]	; (800a2c4 <TIM_OC4_SetConfig+0xa4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_OC4_SetConfig+0x68>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a11      	ldr	r2, [pc, #68]	; (800a2c8 <TIM_OC4_SetConfig+0xa8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d109      	bne.n	800a29c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a28e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	019b      	lsls	r3, r3, #6
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	621a      	str	r2, [r3, #32]
}
 800a2b6:	bf00      	nop
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40010400 	.word	0x40010400

0800a2cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	f023 0201 	bic.w	r2, r3, #1
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f023 030a 	bic.w	r3, r3, #10
 800a308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4313      	orrs	r3, r2
 800a310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b087      	sub	sp, #28
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	f023 0210 	bic.w	r2, r3, #16
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	031b      	lsls	r3, r3, #12
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	621a      	str	r2, [r3, #32]
}
 800a37e:	bf00      	nop
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b085      	sub	sp, #20
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	f043 0307 	orr.w	r3, r3, #7
 800a3ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	609a      	str	r2, [r3, #8]
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	021a      	lsls	r2, r3, #8
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	609a      	str	r2, [r3, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	371c      	adds	r7, #28
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a410:	2b01      	cmp	r3, #1
 800a412:	d101      	bne.n	800a418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a414:	2302      	movs	r3, #2
 800a416:	e05a      	b.n	800a4ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a21      	ldr	r2, [pc, #132]	; (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d022      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a464:	d01d      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1d      	ldr	r2, [pc, #116]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d018      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a1b      	ldr	r2, [pc, #108]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d013      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a1a      	ldr	r2, [pc, #104]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d00e      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a18      	ldr	r2, [pc, #96]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d009      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a17      	ldr	r2, [pc, #92]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d004      	beq.n	800a4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a15      	ldr	r2, [pc, #84]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d10c      	bne.n	800a4bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40001800 	.word	0x40001800

0800a4f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e03f      	b.n	800a5b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7fc fd28 	bl	8006f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2224      	movs	r2, #36	; 0x24
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fddf 	bl	800b128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	695a      	ldr	r2, [r3, #20]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b08a      	sub	sp, #40	; 0x28
 800a5be:	af02      	add	r7, sp, #8
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	603b      	str	r3, [r7, #0]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	d17c      	bne.n	800a6d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <HAL_UART_Transmit+0x2c>
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e075      	b.n	800a6d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_UART_Transmit+0x3e>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e06e      	b.n	800a6d6 <HAL_UART_Transmit+0x11c>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2221      	movs	r2, #33	; 0x21
 800a60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a60e:	f7fc fda5 	bl	800715c <HAL_GetTick>
 800a612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	88fa      	ldrh	r2, [r7, #6]
 800a618:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a628:	d108      	bne.n	800a63c <HAL_UART_Transmit+0x82>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d104      	bne.n	800a63c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	e003      	b.n	800a644 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a640:	2300      	movs	r3, #0
 800a642:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a64c:	e02a      	b.n	800a6a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2200      	movs	r2, #0
 800a656:	2180      	movs	r1, #128	; 0x80
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fb1f 	bl	800ac9c <UART_WaitOnFlagUntilTimeout>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e036      	b.n	800a6d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a67c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	3302      	adds	r3, #2
 800a682:	61bb      	str	r3, [r7, #24]
 800a684:	e007      	b.n	800a696 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	3301      	adds	r3, #1
 800a694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1cf      	bne.n	800a64e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2140      	movs	r1, #64	; 0x40
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 faef 	bl	800ac9c <UART_WaitOnFlagUntilTimeout>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e006      	b.n	800a6d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e000      	b.n	800a6d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a6d4:	2302      	movs	r3, #2
  }
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b20      	cmp	r3, #32
 800a6f6:	d11d      	bne.n	800a734 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <HAL_UART_Receive_IT+0x26>
 800a6fe:	88fb      	ldrh	r3, [r7, #6]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e016      	b.n	800a736 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d101      	bne.n	800a716 <HAL_UART_Receive_IT+0x38>
 800a712:	2302      	movs	r3, #2
 800a714:	e00f      	b.n	800a736 <HAL_UART_Receive_IT+0x58>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a724:	88fb      	ldrh	r3, [r7, #6]
 800a726:	461a      	mov	r2, r3
 800a728:	68b9      	ldr	r1, [r7, #8]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fb24 	bl	800ad78 <UART_Start_Receive_IT>
 800a730:	4603      	mov	r3, r0
 800a732:	e000      	b.n	800a736 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
	...

0800a740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b0ba      	sub	sp, #232	; 0xe8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a766:	2300      	movs	r3, #0
 800a768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a77e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10f      	bne.n	800a7a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d009      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x66>
 800a792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fc07 	bl	800afb2 <UART_Receive_IT>
      return;
 800a7a4:	e256      	b.n	800ac54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 80de 	beq.w	800a96c <HAL_UART_IRQHandler+0x22c>
 800a7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 80d1 	beq.w	800a96c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00b      	beq.n	800a7ee <HAL_UART_IRQHandler+0xae>
 800a7d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d005      	beq.n	800a7ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	f043 0201 	orr.w	r2, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f2:	f003 0304 	and.w	r3, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00b      	beq.n	800a812 <HAL_UART_IRQHandler+0xd2>
 800a7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	f043 0202 	orr.w	r2, r3, #2
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <HAL_UART_IRQHandler+0xf6>
 800a81e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	f043 0204 	orr.w	r2, r3, #4
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a83a:	f003 0308 	and.w	r3, r3, #8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d011      	beq.n	800a866 <HAL_UART_IRQHandler+0x126>
 800a842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d105      	bne.n	800a85a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a84e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	f043 0208 	orr.w	r2, r3, #8
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 81ed 	beq.w	800ac4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a874:	f003 0320 	and.w	r3, r3, #32
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d008      	beq.n	800a88e <HAL_UART_IRQHandler+0x14e>
 800a87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fb92 	bl	800afb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a898:	2b40      	cmp	r3, #64	; 0x40
 800a89a:	bf0c      	ite	eq
 800a89c:	2301      	moveq	r3, #1
 800a89e:	2300      	movne	r3, #0
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	f003 0308 	and.w	r3, r3, #8
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d103      	bne.n	800a8ba <HAL_UART_IRQHandler+0x17a>
 800a8b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d04f      	beq.n	800a95a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa9a 	bl	800adf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ca:	2b40      	cmp	r3, #64	; 0x40
 800a8cc:	d141      	bne.n	800a952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3314      	adds	r3, #20
 800a8d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3314      	adds	r3, #20
 800a8f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a8fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1d9      	bne.n	800a8ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d013      	beq.n	800a94a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	4a7d      	ldr	r2, [pc, #500]	; (800ab1c <HAL_UART_IRQHandler+0x3dc>)
 800a928:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fd fade 	bl	8007ef0 <HAL_DMA_Abort_IT>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d016      	beq.n	800a968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a944:	4610      	mov	r0, r2
 800a946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a948:	e00e      	b.n	800a968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f990 	bl	800ac70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a950:	e00a      	b.n	800a968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f98c 	bl	800ac70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a958:	e006      	b.n	800a968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f988 	bl	800ac70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a966:	e170      	b.n	800ac4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a968:	bf00      	nop
    return;
 800a96a:	e16e      	b.n	800ac4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a970:	2b01      	cmp	r3, #1
 800a972:	f040 814a 	bne.w	800ac0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a97a:	f003 0310 	and.w	r3, r3, #16
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 8143 	beq.w	800ac0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a988:	f003 0310 	and.w	r3, r3, #16
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 813c 	beq.w	800ac0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a992:	2300      	movs	r3, #0
 800a994:	60bb      	str	r3, [r7, #8]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	60bb      	str	r3, [r7, #8]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	60bb      	str	r3, [r7, #8]
 800a9a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b2:	2b40      	cmp	r3, #64	; 0x40
 800a9b4:	f040 80b4 	bne.w	800ab20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 8140 	beq.w	800ac4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	f080 8139 	bcs.w	800ac4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ee:	f000 8088 	beq.w	800ab02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	330c      	adds	r3, #12
 800a9f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa00:	e853 3f00 	ldrex	r3, [r3]
 800aa04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	330c      	adds	r3, #12
 800aa1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1d9      	bne.n	800a9f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3314      	adds	r3, #20
 800aa44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa50:	f023 0301 	bic.w	r3, r3, #1
 800aa54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3314      	adds	r3, #20
 800aa5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e1      	bne.n	800aa3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3314      	adds	r3, #20
 800aa80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3314      	adds	r3, #20
 800aa9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aaa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aaac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e3      	bne.n	800aa7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2220      	movs	r2, #32
 800aab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad2:	f023 0310 	bic.w	r3, r3, #16
 800aad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	330c      	adds	r3, #12
 800aae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aae4:	65ba      	str	r2, [r7, #88]	; 0x58
 800aae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e3      	bne.n	800aac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fd f987 	bl	8007e10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f8b6 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab18:	e099      	b.n	800ac4e <HAL_UART_IRQHandler+0x50e>
 800ab1a:	bf00      	nop
 800ab1c:	0800aebb 	.word	0x0800aebb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 808b 	beq.w	800ac52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ab3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 8086 	beq.w	800ac52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	330c      	adds	r3, #12
 800ab66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab6a:	647a      	str	r2, [r7, #68]	; 0x44
 800ab6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e3      	bne.n	800ab46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3314      	adds	r3, #20
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3314      	adds	r3, #20
 800ab9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aba2:	633a      	str	r2, [r7, #48]	; 0x30
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e3      	bne.n	800ab7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2220      	movs	r2, #32
 800abba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	330c      	adds	r3, #12
 800abca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 0310 	bic.w	r3, r3, #16
 800abda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	330c      	adds	r3, #12
 800abe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800abe8:	61fa      	str	r2, [r7, #28]
 800abea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	69b9      	ldr	r1, [r7, #24]
 800abee:	69fa      	ldr	r2, [r7, #28]
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	617b      	str	r3, [r7, #20]
   return(result);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e3      	bne.n	800abc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f83e 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac08:	e023      	b.n	800ac52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d009      	beq.n	800ac2a <HAL_UART_IRQHandler+0x4ea>
 800ac16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f95d 	bl	800aee2 <UART_Transmit_IT>
    return;
 800ac28:	e014      	b.n	800ac54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00e      	beq.n	800ac54 <HAL_UART_IRQHandler+0x514>
 800ac36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f99d 	bl	800af82 <UART_EndTransmit_IT>
    return;
 800ac48:	e004      	b.n	800ac54 <HAL_UART_IRQHandler+0x514>
    return;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <HAL_UART_IRQHandler+0x514>
      return;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <HAL_UART_IRQHandler+0x514>
      return;
 800ac52:	bf00      	nop
  }
}
 800ac54:	37e8      	adds	r7, #232	; 0xe8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop

0800ac5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b090      	sub	sp, #64	; 0x40
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	4613      	mov	r3, r2
 800acaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acac:	e050      	b.n	800ad50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb4:	d04c      	beq.n	800ad50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800acb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <UART_WaitOnFlagUntilTimeout+0x30>
 800acbc:	f7fc fa4e 	bl	800715c <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acc8:	429a      	cmp	r2, r3
 800acca:	d241      	bcs.n	800ad50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	330c      	adds	r3, #12
 800acd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	330c      	adds	r3, #12
 800acea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acec:	637a      	str	r2, [r7, #52]	; 0x34
 800acee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e5      	bne.n	800accc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3314      	adds	r3, #20
 800ad06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f023 0301 	bic.w	r3, r3, #1
 800ad16:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3314      	adds	r3, #20
 800ad1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad20:	623a      	str	r2, [r7, #32]
 800ad22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	69f9      	ldr	r1, [r7, #28]
 800ad26:	6a3a      	ldr	r2, [r7, #32]
 800ad28:	e841 2300 	strex	r3, r2, [r1]
 800ad2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e5      	bne.n	800ad00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2220      	movs	r2, #32
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e00f      	b.n	800ad70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	4013      	ands	r3, r2
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	bf0c      	ite	eq
 800ad60:	2301      	moveq	r3, #1
 800ad62:	2300      	movne	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	461a      	mov	r2, r3
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d09f      	beq.n	800acae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3740      	adds	r7, #64	; 0x40
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	4613      	mov	r3, r2
 800ad84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	88fa      	ldrh	r2, [r7, #6]
 800ad90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2222      	movs	r2, #34	; 0x22
 800ada2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d007      	beq.n	800adc6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68da      	ldr	r2, [r3, #12]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	695a      	ldr	r2, [r3, #20]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f042 0201 	orr.w	r2, r2, #1
 800add4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f042 0220 	orr.w	r2, r2, #32
 800ade4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b095      	sub	sp, #84	; 0x54
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	330c      	adds	r3, #12
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	e853 3f00 	ldrex	r3, [r3]
 800ae0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	330c      	adds	r3, #12
 800ae1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae1c:	643a      	str	r2, [r7, #64]	; 0x40
 800ae1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e5      	bne.n	800adfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3314      	adds	r3, #20
 800ae36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	f023 0301 	bic.w	r3, r3, #1
 800ae46:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3314      	adds	r3, #20
 800ae4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e5      	bne.n	800ae30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d119      	bne.n	800aea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	330c      	adds	r3, #12
 800ae72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	e853 3f00 	ldrex	r3, [r3]
 800ae7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	f023 0310 	bic.w	r3, r3, #16
 800ae82:	647b      	str	r3, [r7, #68]	; 0x44
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	330c      	adds	r3, #12
 800ae8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae8c:	61ba      	str	r2, [r7, #24]
 800ae8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae90:	6979      	ldr	r1, [r7, #20]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	e841 2300 	strex	r3, r2, [r1]
 800ae98:	613b      	str	r3, [r7, #16]
   return(result);
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1e5      	bne.n	800ae6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aeae:	bf00      	nop
 800aeb0:	3754      	adds	r7, #84	; 0x54
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b084      	sub	sp, #16
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff fecb 	bl	800ac70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b085      	sub	sp, #20
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b21      	cmp	r3, #33	; 0x21
 800aef4:	d13e      	bne.n	800af74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aefe:	d114      	bne.n	800af2a <UART_Transmit_IT+0x48>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d110      	bne.n	800af2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	1c9a      	adds	r2, r3, #2
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	621a      	str	r2, [r3, #32]
 800af28:	e008      	b.n	800af3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	1c59      	adds	r1, r3, #1
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	6211      	str	r1, [r2, #32]
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af40:	b29b      	uxth	r3, r3
 800af42:	3b01      	subs	r3, #1
 800af44:	b29b      	uxth	r3, r3
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	4619      	mov	r1, r3
 800af4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10f      	bne.n	800af70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	e000      	b.n	800af76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af74:	2302      	movs	r3, #2
  }
}
 800af76:	4618      	mov	r0, r3
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2220      	movs	r2, #32
 800af9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff fe5a 	bl	800ac5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b08c      	sub	sp, #48	; 0x30
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b22      	cmp	r3, #34	; 0x22
 800afc4:	f040 80ab 	bne.w	800b11e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd0:	d117      	bne.n	800b002 <UART_Receive_IT+0x50>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d113      	bne.n	800b002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	b29b      	uxth	r3, r3
 800afec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affa:	1c9a      	adds	r2, r3, #2
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	629a      	str	r2, [r3, #40]	; 0x28
 800b000:	e026      	b.n	800b050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b006:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b014:	d007      	beq.n	800b026 <UART_Receive_IT+0x74>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10a      	bne.n	800b034 <UART_Receive_IT+0x82>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d106      	bne.n	800b034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	e008      	b.n	800b046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b040:	b2da      	uxtb	r2, r3
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b054:	b29b      	uxth	r3, r3
 800b056:	3b01      	subs	r3, #1
 800b058:	b29b      	uxth	r3, r3
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	4619      	mov	r1, r3
 800b05e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b060:	2b00      	cmp	r3, #0
 800b062:	d15a      	bne.n	800b11a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f022 0220 	bic.w	r2, r2, #32
 800b072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	695a      	ldr	r2, [r3, #20]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 0201 	bic.w	r2, r2, #1
 800b092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2220      	movs	r2, #32
 800b098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d135      	bne.n	800b110 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	330c      	adds	r3, #12
 800b0b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f023 0310 	bic.w	r3, r3, #16
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	330c      	adds	r3, #12
 800b0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ca:	623a      	str	r2, [r7, #32]
 800b0cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	69f9      	ldr	r1, [r7, #28]
 800b0d0:	6a3a      	ldr	r2, [r7, #32]
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e5      	bne.n	800b0aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	2b10      	cmp	r3, #16
 800b0ea:	d10a      	bne.n	800b102 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff fdbb 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
 800b10e:	e002      	b.n	800b116 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7fb fd73 	bl	8006bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	e002      	b.n	800b120 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	e000      	b.n	800b120 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b11e:	2302      	movs	r3, #2
  }
}
 800b120:	4618      	mov	r0, r3
 800b122:	3730      	adds	r7, #48	; 0x30
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b12c:	b0c0      	sub	sp, #256	; 0x100
 800b12e:	af00      	add	r7, sp, #0
 800b130:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b144:	68d9      	ldr	r1, [r3, #12]
 800b146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	ea40 0301 	orr.w	r3, r0, r1
 800b150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b156:	689a      	ldr	r2, [r3, #8]
 800b158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	431a      	orrs	r2, r3
 800b160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	431a      	orrs	r2, r3
 800b168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	4313      	orrs	r3, r2
 800b170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b180:	f021 010c 	bic.w	r1, r1, #12
 800b184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b18e:	430b      	orrs	r3, r1
 800b190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a2:	6999      	ldr	r1, [r3, #24]
 800b1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	ea40 0301 	orr.w	r3, r0, r1
 800b1ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	4b8f      	ldr	r3, [pc, #572]	; (800b3f4 <UART_SetConfig+0x2cc>)
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d005      	beq.n	800b1c8 <UART_SetConfig+0xa0>
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	4b8d      	ldr	r3, [pc, #564]	; (800b3f8 <UART_SetConfig+0x2d0>)
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d104      	bne.n	800b1d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1c8:	f7fd ff70 	bl	80090ac <HAL_RCC_GetPCLK2Freq>
 800b1cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b1d0:	e003      	b.n	800b1da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1d2:	f7fd ff57 	bl	8009084 <HAL_RCC_GetPCLK1Freq>
 800b1d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1e4:	f040 810c 	bne.w	800b400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b1f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	1891      	adds	r1, r2, r2
 800b200:	65b9      	str	r1, [r7, #88]	; 0x58
 800b202:	415b      	adcs	r3, r3
 800b204:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b20a:	4621      	mov	r1, r4
 800b20c:	eb12 0801 	adds.w	r8, r2, r1
 800b210:	4629      	mov	r1, r5
 800b212:	eb43 0901 	adc.w	r9, r3, r1
 800b216:	f04f 0200 	mov.w	r2, #0
 800b21a:	f04f 0300 	mov.w	r3, #0
 800b21e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b22a:	4690      	mov	r8, r2
 800b22c:	4699      	mov	r9, r3
 800b22e:	4623      	mov	r3, r4
 800b230:	eb18 0303 	adds.w	r3, r8, r3
 800b234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b238:	462b      	mov	r3, r5
 800b23a:	eb49 0303 	adc.w	r3, r9, r3
 800b23e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b24e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b256:	460b      	mov	r3, r1
 800b258:	18db      	adds	r3, r3, r3
 800b25a:	653b      	str	r3, [r7, #80]	; 0x50
 800b25c:	4613      	mov	r3, r2
 800b25e:	eb42 0303 	adc.w	r3, r2, r3
 800b262:	657b      	str	r3, [r7, #84]	; 0x54
 800b264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b26c:	f7f5 f808 	bl	8000280 <__aeabi_uldivmod>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4b61      	ldr	r3, [pc, #388]	; (800b3fc <UART_SetConfig+0x2d4>)
 800b276:	fba3 2302 	umull	r2, r3, r3, r2
 800b27a:	095b      	lsrs	r3, r3, #5
 800b27c:	011c      	lsls	r4, r3, #4
 800b27e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b282:	2200      	movs	r2, #0
 800b284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b288:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b28c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b290:	4642      	mov	r2, r8
 800b292:	464b      	mov	r3, r9
 800b294:	1891      	adds	r1, r2, r2
 800b296:	64b9      	str	r1, [r7, #72]	; 0x48
 800b298:	415b      	adcs	r3, r3
 800b29a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b29c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	eb12 0a01 	adds.w	sl, r2, r1
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	eb43 0b01 	adc.w	fp, r3, r1
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	f04f 0300 	mov.w	r3, #0
 800b2b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2c0:	4692      	mov	sl, r2
 800b2c2:	469b      	mov	fp, r3
 800b2c4:	4643      	mov	r3, r8
 800b2c6:	eb1a 0303 	adds.w	r3, sl, r3
 800b2ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2ce:	464b      	mov	r3, r9
 800b2d0:	eb4b 0303 	adc.w	r3, fp, r3
 800b2d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b2e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	18db      	adds	r3, r3, r3
 800b2f0:	643b      	str	r3, [r7, #64]	; 0x40
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	eb42 0303 	adc.w	r3, r2, r3
 800b2f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b2fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b2fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b302:	f7f4 ffbd 	bl	8000280 <__aeabi_uldivmod>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	4611      	mov	r1, r2
 800b30c:	4b3b      	ldr	r3, [pc, #236]	; (800b3fc <UART_SetConfig+0x2d4>)
 800b30e:	fba3 2301 	umull	r2, r3, r3, r1
 800b312:	095b      	lsrs	r3, r3, #5
 800b314:	2264      	movs	r2, #100	; 0x64
 800b316:	fb02 f303 	mul.w	r3, r2, r3
 800b31a:	1acb      	subs	r3, r1, r3
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b322:	4b36      	ldr	r3, [pc, #216]	; (800b3fc <UART_SetConfig+0x2d4>)
 800b324:	fba3 2302 	umull	r2, r3, r3, r2
 800b328:	095b      	lsrs	r3, r3, #5
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b330:	441c      	add	r4, r3
 800b332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b336:	2200      	movs	r2, #0
 800b338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b33c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b344:	4642      	mov	r2, r8
 800b346:	464b      	mov	r3, r9
 800b348:	1891      	adds	r1, r2, r2
 800b34a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b34c:	415b      	adcs	r3, r3
 800b34e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b354:	4641      	mov	r1, r8
 800b356:	1851      	adds	r1, r2, r1
 800b358:	6339      	str	r1, [r7, #48]	; 0x30
 800b35a:	4649      	mov	r1, r9
 800b35c:	414b      	adcs	r3, r1
 800b35e:	637b      	str	r3, [r7, #52]	; 0x34
 800b360:	f04f 0200 	mov.w	r2, #0
 800b364:	f04f 0300 	mov.w	r3, #0
 800b368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b36c:	4659      	mov	r1, fp
 800b36e:	00cb      	lsls	r3, r1, #3
 800b370:	4651      	mov	r1, sl
 800b372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b376:	4651      	mov	r1, sl
 800b378:	00ca      	lsls	r2, r1, #3
 800b37a:	4610      	mov	r0, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	4603      	mov	r3, r0
 800b380:	4642      	mov	r2, r8
 800b382:	189b      	adds	r3, r3, r2
 800b384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b388:	464b      	mov	r3, r9
 800b38a:	460a      	mov	r2, r1
 800b38c:	eb42 0303 	adc.w	r3, r2, r3
 800b390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b3a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	18db      	adds	r3, r3, r3
 800b3ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	eb42 0303 	adc.w	r3, r2, r3
 800b3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b3be:	f7f4 ff5f 	bl	8000280 <__aeabi_uldivmod>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4b0d      	ldr	r3, [pc, #52]	; (800b3fc <UART_SetConfig+0x2d4>)
 800b3c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b3cc:	095b      	lsrs	r3, r3, #5
 800b3ce:	2164      	movs	r1, #100	; 0x64
 800b3d0:	fb01 f303 	mul.w	r3, r1, r3
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	3332      	adds	r3, #50	; 0x32
 800b3da:	4a08      	ldr	r2, [pc, #32]	; (800b3fc <UART_SetConfig+0x2d4>)
 800b3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e0:	095b      	lsrs	r3, r3, #5
 800b3e2:	f003 0207 	and.w	r2, r3, #7
 800b3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4422      	add	r2, r4
 800b3ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3f0:	e105      	b.n	800b5fe <UART_SetConfig+0x4d6>
 800b3f2:	bf00      	nop
 800b3f4:	40011000 	.word	0x40011000
 800b3f8:	40011400 	.word	0x40011400
 800b3fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b404:	2200      	movs	r2, #0
 800b406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b40a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b40e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b412:	4642      	mov	r2, r8
 800b414:	464b      	mov	r3, r9
 800b416:	1891      	adds	r1, r2, r2
 800b418:	6239      	str	r1, [r7, #32]
 800b41a:	415b      	adcs	r3, r3
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
 800b41e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b422:	4641      	mov	r1, r8
 800b424:	1854      	adds	r4, r2, r1
 800b426:	4649      	mov	r1, r9
 800b428:	eb43 0501 	adc.w	r5, r3, r1
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	f04f 0300 	mov.w	r3, #0
 800b434:	00eb      	lsls	r3, r5, #3
 800b436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b43a:	00e2      	lsls	r2, r4, #3
 800b43c:	4614      	mov	r4, r2
 800b43e:	461d      	mov	r5, r3
 800b440:	4643      	mov	r3, r8
 800b442:	18e3      	adds	r3, r4, r3
 800b444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b448:	464b      	mov	r3, r9
 800b44a:	eb45 0303 	adc.w	r3, r5, r3
 800b44e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b45e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b462:	f04f 0200 	mov.w	r2, #0
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b46e:	4629      	mov	r1, r5
 800b470:	008b      	lsls	r3, r1, #2
 800b472:	4621      	mov	r1, r4
 800b474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b478:	4621      	mov	r1, r4
 800b47a:	008a      	lsls	r2, r1, #2
 800b47c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b480:	f7f4 fefe 	bl	8000280 <__aeabi_uldivmod>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4b60      	ldr	r3, [pc, #384]	; (800b60c <UART_SetConfig+0x4e4>)
 800b48a:	fba3 2302 	umull	r2, r3, r3, r2
 800b48e:	095b      	lsrs	r3, r3, #5
 800b490:	011c      	lsls	r4, r3, #4
 800b492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b496:	2200      	movs	r2, #0
 800b498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b49c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b4a4:	4642      	mov	r2, r8
 800b4a6:	464b      	mov	r3, r9
 800b4a8:	1891      	adds	r1, r2, r2
 800b4aa:	61b9      	str	r1, [r7, #24]
 800b4ac:	415b      	adcs	r3, r3
 800b4ae:	61fb      	str	r3, [r7, #28]
 800b4b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	1851      	adds	r1, r2, r1
 800b4b8:	6139      	str	r1, [r7, #16]
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	414b      	adcs	r3, r1
 800b4be:	617b      	str	r3, [r7, #20]
 800b4c0:	f04f 0200 	mov.w	r2, #0
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	00cb      	lsls	r3, r1, #3
 800b4d0:	4651      	mov	r1, sl
 800b4d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4d6:	4651      	mov	r1, sl
 800b4d8:	00ca      	lsls	r2, r1, #3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	189b      	adds	r3, r3, r2
 800b4e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4e8:	464b      	mov	r3, r9
 800b4ea:	460a      	mov	r2, r1
 800b4ec:	eb42 0303 	adc.w	r3, r2, r3
 800b4f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	f04f 0300 	mov.w	r3, #0
 800b508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b50c:	4649      	mov	r1, r9
 800b50e:	008b      	lsls	r3, r1, #2
 800b510:	4641      	mov	r1, r8
 800b512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b516:	4641      	mov	r1, r8
 800b518:	008a      	lsls	r2, r1, #2
 800b51a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b51e:	f7f4 feaf 	bl	8000280 <__aeabi_uldivmod>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4b39      	ldr	r3, [pc, #228]	; (800b60c <UART_SetConfig+0x4e4>)
 800b528:	fba3 1302 	umull	r1, r3, r3, r2
 800b52c:	095b      	lsrs	r3, r3, #5
 800b52e:	2164      	movs	r1, #100	; 0x64
 800b530:	fb01 f303 	mul.w	r3, r1, r3
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	3332      	adds	r3, #50	; 0x32
 800b53a:	4a34      	ldr	r2, [pc, #208]	; (800b60c <UART_SetConfig+0x4e4>)
 800b53c:	fba2 2303 	umull	r2, r3, r2, r3
 800b540:	095b      	lsrs	r3, r3, #5
 800b542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b546:	441c      	add	r4, r3
 800b548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b54c:	2200      	movs	r2, #0
 800b54e:	673b      	str	r3, [r7, #112]	; 0x70
 800b550:	677a      	str	r2, [r7, #116]	; 0x74
 800b552:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b556:	4642      	mov	r2, r8
 800b558:	464b      	mov	r3, r9
 800b55a:	1891      	adds	r1, r2, r2
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	415b      	adcs	r3, r3
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b566:	4641      	mov	r1, r8
 800b568:	1851      	adds	r1, r2, r1
 800b56a:	6039      	str	r1, [r7, #0]
 800b56c:	4649      	mov	r1, r9
 800b56e:	414b      	adcs	r3, r1
 800b570:	607b      	str	r3, [r7, #4]
 800b572:	f04f 0200 	mov.w	r2, #0
 800b576:	f04f 0300 	mov.w	r3, #0
 800b57a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b57e:	4659      	mov	r1, fp
 800b580:	00cb      	lsls	r3, r1, #3
 800b582:	4651      	mov	r1, sl
 800b584:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b588:	4651      	mov	r1, sl
 800b58a:	00ca      	lsls	r2, r1, #3
 800b58c:	4610      	mov	r0, r2
 800b58e:	4619      	mov	r1, r3
 800b590:	4603      	mov	r3, r0
 800b592:	4642      	mov	r2, r8
 800b594:	189b      	adds	r3, r3, r2
 800b596:	66bb      	str	r3, [r7, #104]	; 0x68
 800b598:	464b      	mov	r3, r9
 800b59a:	460a      	mov	r2, r1
 800b59c:	eb42 0303 	adc.w	r3, r2, r3
 800b5a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	663b      	str	r3, [r7, #96]	; 0x60
 800b5ac:	667a      	str	r2, [r7, #100]	; 0x64
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	f04f 0300 	mov.w	r3, #0
 800b5b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	008b      	lsls	r3, r1, #2
 800b5be:	4641      	mov	r1, r8
 800b5c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5c4:	4641      	mov	r1, r8
 800b5c6:	008a      	lsls	r2, r1, #2
 800b5c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b5cc:	f7f4 fe58 	bl	8000280 <__aeabi_uldivmod>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <UART_SetConfig+0x4e4>)
 800b5d6:	fba3 1302 	umull	r1, r3, r3, r2
 800b5da:	095b      	lsrs	r3, r3, #5
 800b5dc:	2164      	movs	r1, #100	; 0x64
 800b5de:	fb01 f303 	mul.w	r3, r1, r3
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	011b      	lsls	r3, r3, #4
 800b5e6:	3332      	adds	r3, #50	; 0x32
 800b5e8:	4a08      	ldr	r2, [pc, #32]	; (800b60c <UART_SetConfig+0x4e4>)
 800b5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ee:	095b      	lsrs	r3, r3, #5
 800b5f0:	f003 020f 	and.w	r2, r3, #15
 800b5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4422      	add	r2, r4
 800b5fc:	609a      	str	r2, [r3, #8]
}
 800b5fe:	bf00      	nop
 800b600:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b604:	46bd      	mov	sp, r7
 800b606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b60a:	bf00      	nop
 800b60c:	51eb851f 	.word	0x51eb851f

0800b610 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	f023 0101 	bic.w	r1, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	2b08      	cmp	r3, #8
 800b638:	d102      	bne.n	800b640 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b63a:	2340      	movs	r3, #64	; 0x40
 800b63c:	617b      	str	r3, [r7, #20]
 800b63e:	e001      	b.n	800b644 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b640:	2300      	movs	r3, #0
 800b642:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b650:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b656:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b65c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b662:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800b668:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800b66e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800b674:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800b67a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800b680:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800b686:	4313      	orrs	r3, r2
 800b688:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	4313      	orrs	r3, r2
 800b692:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800b69e:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <FSMC_NORSRAM_Init+0xd0>)
 800b6a0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6a8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b6b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	43db      	mvns	r3, r3
 800b6c0:	ea02 0103 	and.w	r1, r2, r3
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	4319      	orrs	r1, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	371c      	adds	r7, #28
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	0008fb7f 	.word	0x0008fb7f

0800b6e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	431a      	orrs	r2, r3
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	021b      	lsls	r3, r3, #8
 800b710:	431a      	orrs	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	041b      	lsls	r3, r3, #16
 800b718:	431a      	orrs	r2, r3
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	3b01      	subs	r3, #1
 800b720:	051b      	lsls	r3, r3, #20
 800b722:	431a      	orrs	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	3b02      	subs	r3, #2
 800b72a:	061b      	lsls	r3, r3, #24
 800b72c:	431a      	orrs	r2, r3
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	4313      	orrs	r3, r2
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	3201      	adds	r2, #1
 800b738:	4319      	orrs	r1, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3714      	adds	r7, #20
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
	...

0800b750 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b764:	d11d      	bne.n	800b7a2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b770:	4013      	ands	r3, r2
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	6811      	ldr	r1, [r2, #0]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	6852      	ldr	r2, [r2, #4]
 800b77a:	0112      	lsls	r2, r2, #4
 800b77c:	4311      	orrs	r1, r2
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	6892      	ldr	r2, [r2, #8]
 800b782:	0212      	lsls	r2, r2, #8
 800b784:	4311      	orrs	r1, r2
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	6992      	ldr	r2, [r2, #24]
 800b78a:	4311      	orrs	r1, r2
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	68d2      	ldr	r2, [r2, #12]
 800b790:	0412      	lsls	r2, r2, #16
 800b792:	430a      	orrs	r2, r1
 800b794:	ea43 0102 	orr.w	r1, r3, r2
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b7a0:	e005      	b.n	800b7ae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b7aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	cff00000 	.word	0xcff00000

0800b7c0 <__errno>:
 800b7c0:	4b01      	ldr	r3, [pc, #4]	; (800b7c8 <__errno+0x8>)
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	200000ac 	.word	0x200000ac

0800b7cc <__libc_init_array>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	4d0d      	ldr	r5, [pc, #52]	; (800b804 <__libc_init_array+0x38>)
 800b7d0:	4c0d      	ldr	r4, [pc, #52]	; (800b808 <__libc_init_array+0x3c>)
 800b7d2:	1b64      	subs	r4, r4, r5
 800b7d4:	10a4      	asrs	r4, r4, #2
 800b7d6:	2600      	movs	r6, #0
 800b7d8:	42a6      	cmp	r6, r4
 800b7da:	d109      	bne.n	800b7f0 <__libc_init_array+0x24>
 800b7dc:	4d0b      	ldr	r5, [pc, #44]	; (800b80c <__libc_init_array+0x40>)
 800b7de:	4c0c      	ldr	r4, [pc, #48]	; (800b810 <__libc_init_array+0x44>)
 800b7e0:	f001 faa4 	bl	800cd2c <_init>
 800b7e4:	1b64      	subs	r4, r4, r5
 800b7e6:	10a4      	asrs	r4, r4, #2
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	42a6      	cmp	r6, r4
 800b7ec:	d105      	bne.n	800b7fa <__libc_init_array+0x2e>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f4:	4798      	blx	r3
 800b7f6:	3601      	adds	r6, #1
 800b7f8:	e7ee      	b.n	800b7d8 <__libc_init_array+0xc>
 800b7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7fe:	4798      	blx	r3
 800b800:	3601      	adds	r6, #1
 800b802:	e7f2      	b.n	800b7ea <__libc_init_array+0x1e>
 800b804:	0801687c 	.word	0x0801687c
 800b808:	0801687c 	.word	0x0801687c
 800b80c:	0801687c 	.word	0x0801687c
 800b810:	08016880 	.word	0x08016880

0800b814 <memset>:
 800b814:	4402      	add	r2, r0
 800b816:	4603      	mov	r3, r0
 800b818:	4293      	cmp	r3, r2
 800b81a:	d100      	bne.n	800b81e <memset+0xa>
 800b81c:	4770      	bx	lr
 800b81e:	f803 1b01 	strb.w	r1, [r3], #1
 800b822:	e7f9      	b.n	800b818 <memset+0x4>

0800b824 <srand>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4b10      	ldr	r3, [pc, #64]	; (800b868 <srand+0x44>)
 800b828:	681d      	ldr	r5, [r3, #0]
 800b82a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b82c:	4604      	mov	r4, r0
 800b82e:	b9b3      	cbnz	r3, 800b85e <srand+0x3a>
 800b830:	2018      	movs	r0, #24
 800b832:	f000 f8f5 	bl	800ba20 <malloc>
 800b836:	4602      	mov	r2, r0
 800b838:	63a8      	str	r0, [r5, #56]	; 0x38
 800b83a:	b920      	cbnz	r0, 800b846 <srand+0x22>
 800b83c:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <srand+0x48>)
 800b83e:	480c      	ldr	r0, [pc, #48]	; (800b870 <srand+0x4c>)
 800b840:	2142      	movs	r1, #66	; 0x42
 800b842:	f000 f8bd 	bl	800b9c0 <__assert_func>
 800b846:	490b      	ldr	r1, [pc, #44]	; (800b874 <srand+0x50>)
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <srand+0x54>)
 800b84a:	e9c0 1300 	strd	r1, r3, [r0]
 800b84e:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <srand+0x58>)
 800b850:	6083      	str	r3, [r0, #8]
 800b852:	230b      	movs	r3, #11
 800b854:	8183      	strh	r3, [r0, #12]
 800b856:	2100      	movs	r1, #0
 800b858:	2001      	movs	r0, #1
 800b85a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b85e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b860:	2200      	movs	r2, #0
 800b862:	611c      	str	r4, [r3, #16]
 800b864:	615a      	str	r2, [r3, #20]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	200000ac 	.word	0x200000ac
 800b86c:	08016730 	.word	0x08016730
 800b870:	08016747 	.word	0x08016747
 800b874:	abcd330e 	.word	0xabcd330e
 800b878:	e66d1234 	.word	0xe66d1234
 800b87c:	0005deec 	.word	0x0005deec

0800b880 <rand>:
 800b880:	4b16      	ldr	r3, [pc, #88]	; (800b8dc <rand+0x5c>)
 800b882:	b510      	push	{r4, lr}
 800b884:	681c      	ldr	r4, [r3, #0]
 800b886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b888:	b9b3      	cbnz	r3, 800b8b8 <rand+0x38>
 800b88a:	2018      	movs	r0, #24
 800b88c:	f000 f8c8 	bl	800ba20 <malloc>
 800b890:	63a0      	str	r0, [r4, #56]	; 0x38
 800b892:	b928      	cbnz	r0, 800b8a0 <rand+0x20>
 800b894:	4602      	mov	r2, r0
 800b896:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <rand+0x60>)
 800b898:	4812      	ldr	r0, [pc, #72]	; (800b8e4 <rand+0x64>)
 800b89a:	214e      	movs	r1, #78	; 0x4e
 800b89c:	f000 f890 	bl	800b9c0 <__assert_func>
 800b8a0:	4a11      	ldr	r2, [pc, #68]	; (800b8e8 <rand+0x68>)
 800b8a2:	4b12      	ldr	r3, [pc, #72]	; (800b8ec <rand+0x6c>)
 800b8a4:	e9c0 2300 	strd	r2, r3, [r0]
 800b8a8:	4b11      	ldr	r3, [pc, #68]	; (800b8f0 <rand+0x70>)
 800b8aa:	6083      	str	r3, [r0, #8]
 800b8ac:	230b      	movs	r3, #11
 800b8ae:	8183      	strh	r3, [r0, #12]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b8b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b8ba:	4a0e      	ldr	r2, [pc, #56]	; (800b8f4 <rand+0x74>)
 800b8bc:	6920      	ldr	r0, [r4, #16]
 800b8be:	6963      	ldr	r3, [r4, #20]
 800b8c0:	490d      	ldr	r1, [pc, #52]	; (800b8f8 <rand+0x78>)
 800b8c2:	4342      	muls	r2, r0
 800b8c4:	fb01 2203 	mla	r2, r1, r3, r2
 800b8c8:	fba0 0101 	umull	r0, r1, r0, r1
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	eb42 0001 	adc.w	r0, r2, r1
 800b8d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b8d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b8da:	bd10      	pop	{r4, pc}
 800b8dc:	200000ac 	.word	0x200000ac
 800b8e0:	08016730 	.word	0x08016730
 800b8e4:	08016747 	.word	0x08016747
 800b8e8:	abcd330e 	.word	0xabcd330e
 800b8ec:	e66d1234 	.word	0xe66d1234
 800b8f0:	0005deec 	.word	0x0005deec
 800b8f4:	5851f42d 	.word	0x5851f42d
 800b8f8:	4c957f2d 	.word	0x4c957f2d

0800b8fc <sniprintf>:
 800b8fc:	b40c      	push	{r2, r3}
 800b8fe:	b530      	push	{r4, r5, lr}
 800b900:	4b17      	ldr	r3, [pc, #92]	; (800b960 <sniprintf+0x64>)
 800b902:	1e0c      	subs	r4, r1, #0
 800b904:	681d      	ldr	r5, [r3, #0]
 800b906:	b09d      	sub	sp, #116	; 0x74
 800b908:	da08      	bge.n	800b91c <sniprintf+0x20>
 800b90a:	238b      	movs	r3, #139	; 0x8b
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	f04f 30ff 	mov.w	r0, #4294967295
 800b912:	b01d      	add	sp, #116	; 0x74
 800b914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b918:	b002      	add	sp, #8
 800b91a:	4770      	bx	lr
 800b91c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b920:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b924:	bf14      	ite	ne
 800b926:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b92a:	4623      	moveq	r3, r4
 800b92c:	9304      	str	r3, [sp, #16]
 800b92e:	9307      	str	r3, [sp, #28]
 800b930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	9006      	str	r0, [sp, #24]
 800b938:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b93e:	ab21      	add	r3, sp, #132	; 0x84
 800b940:	a902      	add	r1, sp, #8
 800b942:	4628      	mov	r0, r5
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	f000 f9bd 	bl	800bcc4 <_svfiprintf_r>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	bfbc      	itt	lt
 800b94e:	238b      	movlt	r3, #139	; 0x8b
 800b950:	602b      	strlt	r3, [r5, #0]
 800b952:	2c00      	cmp	r4, #0
 800b954:	d0dd      	beq.n	800b912 <sniprintf+0x16>
 800b956:	9b02      	ldr	r3, [sp, #8]
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
 800b95c:	e7d9      	b.n	800b912 <sniprintf+0x16>
 800b95e:	bf00      	nop
 800b960:	200000ac 	.word	0x200000ac

0800b964 <strcat>:
 800b964:	b510      	push	{r4, lr}
 800b966:	4602      	mov	r2, r0
 800b968:	7814      	ldrb	r4, [r2, #0]
 800b96a:	4613      	mov	r3, r2
 800b96c:	3201      	adds	r2, #1
 800b96e:	2c00      	cmp	r4, #0
 800b970:	d1fa      	bne.n	800b968 <strcat+0x4>
 800b972:	3b01      	subs	r3, #1
 800b974:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b978:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b97c:	2a00      	cmp	r2, #0
 800b97e:	d1f9      	bne.n	800b974 <strcat+0x10>
 800b980:	bd10      	pop	{r4, pc}
	...

0800b984 <strdup>:
 800b984:	4b02      	ldr	r3, [pc, #8]	; (800b990 <strdup+0xc>)
 800b986:	4601      	mov	r1, r0
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	f000 b803 	b.w	800b994 <_strdup_r>
 800b98e:	bf00      	nop
 800b990:	200000ac 	.word	0x200000ac

0800b994 <_strdup_r>:
 800b994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	460d      	mov	r5, r1
 800b99c:	f7f4 fc18 	bl	80001d0 <strlen>
 800b9a0:	1c42      	adds	r2, r0, #1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	9201      	str	r2, [sp, #4]
 800b9a8:	f000 f8bc 	bl	800bb24 <_malloc_r>
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	b118      	cbz	r0, 800b9b8 <_strdup_r+0x24>
 800b9b0:	9a01      	ldr	r2, [sp, #4]
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f000 f83c 	bl	800ba30 <memcpy>
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	b003      	add	sp, #12
 800b9bc:	bd30      	pop	{r4, r5, pc}
	...

0800b9c0 <__assert_func>:
 800b9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9c2:	4614      	mov	r4, r2
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <__assert_func+0x2c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	68d8      	ldr	r0, [r3, #12]
 800b9ce:	b14c      	cbz	r4, 800b9e4 <__assert_func+0x24>
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <__assert_func+0x30>)
 800b9d2:	9100      	str	r1, [sp, #0]
 800b9d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9d8:	4906      	ldr	r1, [pc, #24]	; (800b9f4 <__assert_func+0x34>)
 800b9da:	462b      	mov	r3, r5
 800b9dc:	f000 f80e 	bl	800b9fc <fiprintf>
 800b9e0:	f000 fe2e 	bl	800c640 <abort>
 800b9e4:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <__assert_func+0x38>)
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	e7f3      	b.n	800b9d2 <__assert_func+0x12>
 800b9ea:	bf00      	nop
 800b9ec:	200000ac 	.word	0x200000ac
 800b9f0:	080167a2 	.word	0x080167a2
 800b9f4:	080167af 	.word	0x080167af
 800b9f8:	080167dd 	.word	0x080167dd

0800b9fc <fiprintf>:
 800b9fc:	b40e      	push	{r1, r2, r3}
 800b9fe:	b503      	push	{r0, r1, lr}
 800ba00:	4601      	mov	r1, r0
 800ba02:	ab03      	add	r3, sp, #12
 800ba04:	4805      	ldr	r0, [pc, #20]	; (800ba1c <fiprintf+0x20>)
 800ba06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	f000 fa83 	bl	800bf18 <_vfiprintf_r>
 800ba12:	b002      	add	sp, #8
 800ba14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba18:	b003      	add	sp, #12
 800ba1a:	4770      	bx	lr
 800ba1c:	200000ac 	.word	0x200000ac

0800ba20 <malloc>:
 800ba20:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <malloc+0xc>)
 800ba22:	4601      	mov	r1, r0
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f000 b87d 	b.w	800bb24 <_malloc_r>
 800ba2a:	bf00      	nop
 800ba2c:	200000ac 	.word	0x200000ac

0800ba30 <memcpy>:
 800ba30:	440a      	add	r2, r1
 800ba32:	4291      	cmp	r1, r2
 800ba34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba38:	d100      	bne.n	800ba3c <memcpy+0xc>
 800ba3a:	4770      	bx	lr
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba46:	4291      	cmp	r1, r2
 800ba48:	d1f9      	bne.n	800ba3e <memcpy+0xe>
 800ba4a:	bd10      	pop	{r4, pc}

0800ba4c <_free_r>:
 800ba4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba4e:	2900      	cmp	r1, #0
 800ba50:	d044      	beq.n	800badc <_free_r+0x90>
 800ba52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba56:	9001      	str	r0, [sp, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba5e:	bfb8      	it	lt
 800ba60:	18e4      	addlt	r4, r4, r3
 800ba62:	f001 f82f 	bl	800cac4 <__malloc_lock>
 800ba66:	4a1e      	ldr	r2, [pc, #120]	; (800bae0 <_free_r+0x94>)
 800ba68:	9801      	ldr	r0, [sp, #4]
 800ba6a:	6813      	ldr	r3, [r2, #0]
 800ba6c:	b933      	cbnz	r3, 800ba7c <_free_r+0x30>
 800ba6e:	6063      	str	r3, [r4, #4]
 800ba70:	6014      	str	r4, [r2, #0]
 800ba72:	b003      	add	sp, #12
 800ba74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba78:	f001 b82a 	b.w	800cad0 <__malloc_unlock>
 800ba7c:	42a3      	cmp	r3, r4
 800ba7e:	d908      	bls.n	800ba92 <_free_r+0x46>
 800ba80:	6825      	ldr	r5, [r4, #0]
 800ba82:	1961      	adds	r1, r4, r5
 800ba84:	428b      	cmp	r3, r1
 800ba86:	bf01      	itttt	eq
 800ba88:	6819      	ldreq	r1, [r3, #0]
 800ba8a:	685b      	ldreq	r3, [r3, #4]
 800ba8c:	1949      	addeq	r1, r1, r5
 800ba8e:	6021      	streq	r1, [r4, #0]
 800ba90:	e7ed      	b.n	800ba6e <_free_r+0x22>
 800ba92:	461a      	mov	r2, r3
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	b10b      	cbz	r3, 800ba9c <_free_r+0x50>
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	d9fa      	bls.n	800ba92 <_free_r+0x46>
 800ba9c:	6811      	ldr	r1, [r2, #0]
 800ba9e:	1855      	adds	r5, r2, r1
 800baa0:	42a5      	cmp	r5, r4
 800baa2:	d10b      	bne.n	800babc <_free_r+0x70>
 800baa4:	6824      	ldr	r4, [r4, #0]
 800baa6:	4421      	add	r1, r4
 800baa8:	1854      	adds	r4, r2, r1
 800baaa:	42a3      	cmp	r3, r4
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	d1e0      	bne.n	800ba72 <_free_r+0x26>
 800bab0:	681c      	ldr	r4, [r3, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	6053      	str	r3, [r2, #4]
 800bab6:	4421      	add	r1, r4
 800bab8:	6011      	str	r1, [r2, #0]
 800baba:	e7da      	b.n	800ba72 <_free_r+0x26>
 800babc:	d902      	bls.n	800bac4 <_free_r+0x78>
 800babe:	230c      	movs	r3, #12
 800bac0:	6003      	str	r3, [r0, #0]
 800bac2:	e7d6      	b.n	800ba72 <_free_r+0x26>
 800bac4:	6825      	ldr	r5, [r4, #0]
 800bac6:	1961      	adds	r1, r4, r5
 800bac8:	428b      	cmp	r3, r1
 800baca:	bf04      	itt	eq
 800bacc:	6819      	ldreq	r1, [r3, #0]
 800bace:	685b      	ldreq	r3, [r3, #4]
 800bad0:	6063      	str	r3, [r4, #4]
 800bad2:	bf04      	itt	eq
 800bad4:	1949      	addeq	r1, r1, r5
 800bad6:	6021      	streq	r1, [r4, #0]
 800bad8:	6054      	str	r4, [r2, #4]
 800bada:	e7ca      	b.n	800ba72 <_free_r+0x26>
 800badc:	b003      	add	sp, #12
 800bade:	bd30      	pop	{r4, r5, pc}
 800bae0:	20002b5c 	.word	0x20002b5c

0800bae4 <sbrk_aligned>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4e0e      	ldr	r6, [pc, #56]	; (800bb20 <sbrk_aligned+0x3c>)
 800bae8:	460c      	mov	r4, r1
 800baea:	6831      	ldr	r1, [r6, #0]
 800baec:	4605      	mov	r5, r0
 800baee:	b911      	cbnz	r1, 800baf6 <sbrk_aligned+0x12>
 800baf0:	f000 fcd6 	bl	800c4a0 <_sbrk_r>
 800baf4:	6030      	str	r0, [r6, #0]
 800baf6:	4621      	mov	r1, r4
 800baf8:	4628      	mov	r0, r5
 800bafa:	f000 fcd1 	bl	800c4a0 <_sbrk_r>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d00a      	beq.n	800bb18 <sbrk_aligned+0x34>
 800bb02:	1cc4      	adds	r4, r0, #3
 800bb04:	f024 0403 	bic.w	r4, r4, #3
 800bb08:	42a0      	cmp	r0, r4
 800bb0a:	d007      	beq.n	800bb1c <sbrk_aligned+0x38>
 800bb0c:	1a21      	subs	r1, r4, r0
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 fcc6 	bl	800c4a0 <_sbrk_r>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d101      	bne.n	800bb1c <sbrk_aligned+0x38>
 800bb18:	f04f 34ff 	mov.w	r4, #4294967295
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	20002b60 	.word	0x20002b60

0800bb24 <_malloc_r>:
 800bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb28:	1ccd      	adds	r5, r1, #3
 800bb2a:	f025 0503 	bic.w	r5, r5, #3
 800bb2e:	3508      	adds	r5, #8
 800bb30:	2d0c      	cmp	r5, #12
 800bb32:	bf38      	it	cc
 800bb34:	250c      	movcc	r5, #12
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	4607      	mov	r7, r0
 800bb3a:	db01      	blt.n	800bb40 <_malloc_r+0x1c>
 800bb3c:	42a9      	cmp	r1, r5
 800bb3e:	d905      	bls.n	800bb4c <_malloc_r+0x28>
 800bb40:	230c      	movs	r3, #12
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	2600      	movs	r6, #0
 800bb46:	4630      	mov	r0, r6
 800bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb4c:	4e2e      	ldr	r6, [pc, #184]	; (800bc08 <_malloc_r+0xe4>)
 800bb4e:	f000 ffb9 	bl	800cac4 <__malloc_lock>
 800bb52:	6833      	ldr	r3, [r6, #0]
 800bb54:	461c      	mov	r4, r3
 800bb56:	bb34      	cbnz	r4, 800bba6 <_malloc_r+0x82>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	f7ff ffc2 	bl	800bae4 <sbrk_aligned>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	4604      	mov	r4, r0
 800bb64:	d14d      	bne.n	800bc02 <_malloc_r+0xde>
 800bb66:	6834      	ldr	r4, [r6, #0]
 800bb68:	4626      	mov	r6, r4
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	d140      	bne.n	800bbf0 <_malloc_r+0xcc>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	4631      	mov	r1, r6
 800bb72:	4638      	mov	r0, r7
 800bb74:	eb04 0803 	add.w	r8, r4, r3
 800bb78:	f000 fc92 	bl	800c4a0 <_sbrk_r>
 800bb7c:	4580      	cmp	r8, r0
 800bb7e:	d13a      	bne.n	800bbf6 <_malloc_r+0xd2>
 800bb80:	6821      	ldr	r1, [r4, #0]
 800bb82:	3503      	adds	r5, #3
 800bb84:	1a6d      	subs	r5, r5, r1
 800bb86:	f025 0503 	bic.w	r5, r5, #3
 800bb8a:	3508      	adds	r5, #8
 800bb8c:	2d0c      	cmp	r5, #12
 800bb8e:	bf38      	it	cc
 800bb90:	250c      	movcc	r5, #12
 800bb92:	4629      	mov	r1, r5
 800bb94:	4638      	mov	r0, r7
 800bb96:	f7ff ffa5 	bl	800bae4 <sbrk_aligned>
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	d02b      	beq.n	800bbf6 <_malloc_r+0xd2>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	442b      	add	r3, r5
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	e00e      	b.n	800bbc4 <_malloc_r+0xa0>
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	1b52      	subs	r2, r2, r5
 800bbaa:	d41e      	bmi.n	800bbea <_malloc_r+0xc6>
 800bbac:	2a0b      	cmp	r2, #11
 800bbae:	d916      	bls.n	800bbde <_malloc_r+0xba>
 800bbb0:	1961      	adds	r1, r4, r5
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	6025      	str	r5, [r4, #0]
 800bbb6:	bf18      	it	ne
 800bbb8:	6059      	strne	r1, [r3, #4]
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	bf08      	it	eq
 800bbbe:	6031      	streq	r1, [r6, #0]
 800bbc0:	5162      	str	r2, [r4, r5]
 800bbc2:	604b      	str	r3, [r1, #4]
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f104 060b 	add.w	r6, r4, #11
 800bbca:	f000 ff81 	bl	800cad0 <__malloc_unlock>
 800bbce:	f026 0607 	bic.w	r6, r6, #7
 800bbd2:	1d23      	adds	r3, r4, #4
 800bbd4:	1af2      	subs	r2, r6, r3
 800bbd6:	d0b6      	beq.n	800bb46 <_malloc_r+0x22>
 800bbd8:	1b9b      	subs	r3, r3, r6
 800bbda:	50a3      	str	r3, [r4, r2]
 800bbdc:	e7b3      	b.n	800bb46 <_malloc_r+0x22>
 800bbde:	6862      	ldr	r2, [r4, #4]
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	bf0c      	ite	eq
 800bbe4:	6032      	streq	r2, [r6, #0]
 800bbe6:	605a      	strne	r2, [r3, #4]
 800bbe8:	e7ec      	b.n	800bbc4 <_malloc_r+0xa0>
 800bbea:	4623      	mov	r3, r4
 800bbec:	6864      	ldr	r4, [r4, #4]
 800bbee:	e7b2      	b.n	800bb56 <_malloc_r+0x32>
 800bbf0:	4634      	mov	r4, r6
 800bbf2:	6876      	ldr	r6, [r6, #4]
 800bbf4:	e7b9      	b.n	800bb6a <_malloc_r+0x46>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	603b      	str	r3, [r7, #0]
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	f000 ff68 	bl	800cad0 <__malloc_unlock>
 800bc00:	e7a1      	b.n	800bb46 <_malloc_r+0x22>
 800bc02:	6025      	str	r5, [r4, #0]
 800bc04:	e7de      	b.n	800bbc4 <_malloc_r+0xa0>
 800bc06:	bf00      	nop
 800bc08:	20002b5c 	.word	0x20002b5c

0800bc0c <__ssputs_r>:
 800bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc10:	688e      	ldr	r6, [r1, #8]
 800bc12:	429e      	cmp	r6, r3
 800bc14:	4682      	mov	sl, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	4690      	mov	r8, r2
 800bc1a:	461f      	mov	r7, r3
 800bc1c:	d838      	bhi.n	800bc90 <__ssputs_r+0x84>
 800bc1e:	898a      	ldrh	r2, [r1, #12]
 800bc20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc24:	d032      	beq.n	800bc8c <__ssputs_r+0x80>
 800bc26:	6825      	ldr	r5, [r4, #0]
 800bc28:	6909      	ldr	r1, [r1, #16]
 800bc2a:	eba5 0901 	sub.w	r9, r5, r1
 800bc2e:	6965      	ldr	r5, [r4, #20]
 800bc30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc38:	3301      	adds	r3, #1
 800bc3a:	444b      	add	r3, r9
 800bc3c:	106d      	asrs	r5, r5, #1
 800bc3e:	429d      	cmp	r5, r3
 800bc40:	bf38      	it	cc
 800bc42:	461d      	movcc	r5, r3
 800bc44:	0553      	lsls	r3, r2, #21
 800bc46:	d531      	bpl.n	800bcac <__ssputs_r+0xa0>
 800bc48:	4629      	mov	r1, r5
 800bc4a:	f7ff ff6b 	bl	800bb24 <_malloc_r>
 800bc4e:	4606      	mov	r6, r0
 800bc50:	b950      	cbnz	r0, 800bc68 <__ssputs_r+0x5c>
 800bc52:	230c      	movs	r3, #12
 800bc54:	f8ca 3000 	str.w	r3, [sl]
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295
 800bc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc68:	6921      	ldr	r1, [r4, #16]
 800bc6a:	464a      	mov	r2, r9
 800bc6c:	f7ff fee0 	bl	800ba30 <memcpy>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc7a:	81a3      	strh	r3, [r4, #12]
 800bc7c:	6126      	str	r6, [r4, #16]
 800bc7e:	6165      	str	r5, [r4, #20]
 800bc80:	444e      	add	r6, r9
 800bc82:	eba5 0509 	sub.w	r5, r5, r9
 800bc86:	6026      	str	r6, [r4, #0]
 800bc88:	60a5      	str	r5, [r4, #8]
 800bc8a:	463e      	mov	r6, r7
 800bc8c:	42be      	cmp	r6, r7
 800bc8e:	d900      	bls.n	800bc92 <__ssputs_r+0x86>
 800bc90:	463e      	mov	r6, r7
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	4632      	mov	r2, r6
 800bc96:	4641      	mov	r1, r8
 800bc98:	f000 fefa 	bl	800ca90 <memmove>
 800bc9c:	68a3      	ldr	r3, [r4, #8]
 800bc9e:	1b9b      	subs	r3, r3, r6
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	4433      	add	r3, r6
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7db      	b.n	800bc64 <__ssputs_r+0x58>
 800bcac:	462a      	mov	r2, r5
 800bcae:	f000 ff15 	bl	800cadc <_realloc_r>
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d1e1      	bne.n	800bc7c <__ssputs_r+0x70>
 800bcb8:	6921      	ldr	r1, [r4, #16]
 800bcba:	4650      	mov	r0, sl
 800bcbc:	f7ff fec6 	bl	800ba4c <_free_r>
 800bcc0:	e7c7      	b.n	800bc52 <__ssputs_r+0x46>
	...

0800bcc4 <_svfiprintf_r>:
 800bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	4698      	mov	r8, r3
 800bcca:	898b      	ldrh	r3, [r1, #12]
 800bccc:	061b      	lsls	r3, r3, #24
 800bcce:	b09d      	sub	sp, #116	; 0x74
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	4614      	mov	r4, r2
 800bcd6:	d50e      	bpl.n	800bcf6 <_svfiprintf_r+0x32>
 800bcd8:	690b      	ldr	r3, [r1, #16]
 800bcda:	b963      	cbnz	r3, 800bcf6 <_svfiprintf_r+0x32>
 800bcdc:	2140      	movs	r1, #64	; 0x40
 800bcde:	f7ff ff21 	bl	800bb24 <_malloc_r>
 800bce2:	6028      	str	r0, [r5, #0]
 800bce4:	6128      	str	r0, [r5, #16]
 800bce6:	b920      	cbnz	r0, 800bcf2 <_svfiprintf_r+0x2e>
 800bce8:	230c      	movs	r3, #12
 800bcea:	603b      	str	r3, [r7, #0]
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	e0d1      	b.n	800be96 <_svfiprintf_r+0x1d2>
 800bcf2:	2340      	movs	r3, #64	; 0x40
 800bcf4:	616b      	str	r3, [r5, #20]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfa:	2320      	movs	r3, #32
 800bcfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd00:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd04:	2330      	movs	r3, #48	; 0x30
 800bd06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800beb0 <_svfiprintf_r+0x1ec>
 800bd0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd0e:	f04f 0901 	mov.w	r9, #1
 800bd12:	4623      	mov	r3, r4
 800bd14:	469a      	mov	sl, r3
 800bd16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd1a:	b10a      	cbz	r2, 800bd20 <_svfiprintf_r+0x5c>
 800bd1c:	2a25      	cmp	r2, #37	; 0x25
 800bd1e:	d1f9      	bne.n	800bd14 <_svfiprintf_r+0x50>
 800bd20:	ebba 0b04 	subs.w	fp, sl, r4
 800bd24:	d00b      	beq.n	800bd3e <_svfiprintf_r+0x7a>
 800bd26:	465b      	mov	r3, fp
 800bd28:	4622      	mov	r2, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f7ff ff6d 	bl	800bc0c <__ssputs_r>
 800bd32:	3001      	adds	r0, #1
 800bd34:	f000 80aa 	beq.w	800be8c <_svfiprintf_r+0x1c8>
 800bd38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd3a:	445a      	add	r2, fp
 800bd3c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd3e:	f89a 3000 	ldrb.w	r3, [sl]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 80a2 	beq.w	800be8c <_svfiprintf_r+0x1c8>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd52:	f10a 0a01 	add.w	sl, sl, #1
 800bd56:	9304      	str	r3, [sp, #16]
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd5e:	931a      	str	r3, [sp, #104]	; 0x68
 800bd60:	4654      	mov	r4, sl
 800bd62:	2205      	movs	r2, #5
 800bd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd68:	4851      	ldr	r0, [pc, #324]	; (800beb0 <_svfiprintf_r+0x1ec>)
 800bd6a:	f7f4 fa39 	bl	80001e0 <memchr>
 800bd6e:	9a04      	ldr	r2, [sp, #16]
 800bd70:	b9d8      	cbnz	r0, 800bdaa <_svfiprintf_r+0xe6>
 800bd72:	06d0      	lsls	r0, r2, #27
 800bd74:	bf44      	itt	mi
 800bd76:	2320      	movmi	r3, #32
 800bd78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd7c:	0711      	lsls	r1, r2, #28
 800bd7e:	bf44      	itt	mi
 800bd80:	232b      	movmi	r3, #43	; 0x2b
 800bd82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd86:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8c:	d015      	beq.n	800bdba <_svfiprintf_r+0xf6>
 800bd8e:	9a07      	ldr	r2, [sp, #28]
 800bd90:	4654      	mov	r4, sl
 800bd92:	2000      	movs	r0, #0
 800bd94:	f04f 0c0a 	mov.w	ip, #10
 800bd98:	4621      	mov	r1, r4
 800bd9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9e:	3b30      	subs	r3, #48	; 0x30
 800bda0:	2b09      	cmp	r3, #9
 800bda2:	d94e      	bls.n	800be42 <_svfiprintf_r+0x17e>
 800bda4:	b1b0      	cbz	r0, 800bdd4 <_svfiprintf_r+0x110>
 800bda6:	9207      	str	r2, [sp, #28]
 800bda8:	e014      	b.n	800bdd4 <_svfiprintf_r+0x110>
 800bdaa:	eba0 0308 	sub.w	r3, r0, r8
 800bdae:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	9304      	str	r3, [sp, #16]
 800bdb6:	46a2      	mov	sl, r4
 800bdb8:	e7d2      	b.n	800bd60 <_svfiprintf_r+0x9c>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	1d19      	adds	r1, r3, #4
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	9103      	str	r1, [sp, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bfbb      	ittet	lt
 800bdc6:	425b      	neglt	r3, r3
 800bdc8:	f042 0202 	orrlt.w	r2, r2, #2
 800bdcc:	9307      	strge	r3, [sp, #28]
 800bdce:	9307      	strlt	r3, [sp, #28]
 800bdd0:	bfb8      	it	lt
 800bdd2:	9204      	strlt	r2, [sp, #16]
 800bdd4:	7823      	ldrb	r3, [r4, #0]
 800bdd6:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd8:	d10c      	bne.n	800bdf4 <_svfiprintf_r+0x130>
 800bdda:	7863      	ldrb	r3, [r4, #1]
 800bddc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdde:	d135      	bne.n	800be4c <_svfiprintf_r+0x188>
 800bde0:	9b03      	ldr	r3, [sp, #12]
 800bde2:	1d1a      	adds	r2, r3, #4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	9203      	str	r2, [sp, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfb8      	it	lt
 800bdec:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdf0:	3402      	adds	r4, #2
 800bdf2:	9305      	str	r3, [sp, #20]
 800bdf4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bec0 <_svfiprintf_r+0x1fc>
 800bdf8:	7821      	ldrb	r1, [r4, #0]
 800bdfa:	2203      	movs	r2, #3
 800bdfc:	4650      	mov	r0, sl
 800bdfe:	f7f4 f9ef 	bl	80001e0 <memchr>
 800be02:	b140      	cbz	r0, 800be16 <_svfiprintf_r+0x152>
 800be04:	2340      	movs	r3, #64	; 0x40
 800be06:	eba0 000a 	sub.w	r0, r0, sl
 800be0a:	fa03 f000 	lsl.w	r0, r3, r0
 800be0e:	9b04      	ldr	r3, [sp, #16]
 800be10:	4303      	orrs	r3, r0
 800be12:	3401      	adds	r4, #1
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1a:	4826      	ldr	r0, [pc, #152]	; (800beb4 <_svfiprintf_r+0x1f0>)
 800be1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be20:	2206      	movs	r2, #6
 800be22:	f7f4 f9dd 	bl	80001e0 <memchr>
 800be26:	2800      	cmp	r0, #0
 800be28:	d038      	beq.n	800be9c <_svfiprintf_r+0x1d8>
 800be2a:	4b23      	ldr	r3, [pc, #140]	; (800beb8 <_svfiprintf_r+0x1f4>)
 800be2c:	bb1b      	cbnz	r3, 800be76 <_svfiprintf_r+0x1b2>
 800be2e:	9b03      	ldr	r3, [sp, #12]
 800be30:	3307      	adds	r3, #7
 800be32:	f023 0307 	bic.w	r3, r3, #7
 800be36:	3308      	adds	r3, #8
 800be38:	9303      	str	r3, [sp, #12]
 800be3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3c:	4433      	add	r3, r6
 800be3e:	9309      	str	r3, [sp, #36]	; 0x24
 800be40:	e767      	b.n	800bd12 <_svfiprintf_r+0x4e>
 800be42:	fb0c 3202 	mla	r2, ip, r2, r3
 800be46:	460c      	mov	r4, r1
 800be48:	2001      	movs	r0, #1
 800be4a:	e7a5      	b.n	800bd98 <_svfiprintf_r+0xd4>
 800be4c:	2300      	movs	r3, #0
 800be4e:	3401      	adds	r4, #1
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	4619      	mov	r1, r3
 800be54:	f04f 0c0a 	mov.w	ip, #10
 800be58:	4620      	mov	r0, r4
 800be5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be5e:	3a30      	subs	r2, #48	; 0x30
 800be60:	2a09      	cmp	r2, #9
 800be62:	d903      	bls.n	800be6c <_svfiprintf_r+0x1a8>
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0c5      	beq.n	800bdf4 <_svfiprintf_r+0x130>
 800be68:	9105      	str	r1, [sp, #20]
 800be6a:	e7c3      	b.n	800bdf4 <_svfiprintf_r+0x130>
 800be6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be70:	4604      	mov	r4, r0
 800be72:	2301      	movs	r3, #1
 800be74:	e7f0      	b.n	800be58 <_svfiprintf_r+0x194>
 800be76:	ab03      	add	r3, sp, #12
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	462a      	mov	r2, r5
 800be7c:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <_svfiprintf_r+0x1f8>)
 800be7e:	a904      	add	r1, sp, #16
 800be80:	4638      	mov	r0, r7
 800be82:	f3af 8000 	nop.w
 800be86:	1c42      	adds	r2, r0, #1
 800be88:	4606      	mov	r6, r0
 800be8a:	d1d6      	bne.n	800be3a <_svfiprintf_r+0x176>
 800be8c:	89ab      	ldrh	r3, [r5, #12]
 800be8e:	065b      	lsls	r3, r3, #25
 800be90:	f53f af2c 	bmi.w	800bcec <_svfiprintf_r+0x28>
 800be94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be96:	b01d      	add	sp, #116	; 0x74
 800be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	ab03      	add	r3, sp, #12
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	462a      	mov	r2, r5
 800bea2:	4b06      	ldr	r3, [pc, #24]	; (800bebc <_svfiprintf_r+0x1f8>)
 800bea4:	a904      	add	r1, sp, #16
 800bea6:	4638      	mov	r0, r7
 800bea8:	f000 f9d4 	bl	800c254 <_printf_i>
 800beac:	e7eb      	b.n	800be86 <_svfiprintf_r+0x1c2>
 800beae:	bf00      	nop
 800beb0:	080167de 	.word	0x080167de
 800beb4:	080167e8 	.word	0x080167e8
 800beb8:	00000000 	.word	0x00000000
 800bebc:	0800bc0d 	.word	0x0800bc0d
 800bec0:	080167e4 	.word	0x080167e4

0800bec4 <__sfputc_r>:
 800bec4:	6893      	ldr	r3, [r2, #8]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	b410      	push	{r4}
 800becc:	6093      	str	r3, [r2, #8]
 800bece:	da08      	bge.n	800bee2 <__sfputc_r+0x1e>
 800bed0:	6994      	ldr	r4, [r2, #24]
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	db01      	blt.n	800beda <__sfputc_r+0x16>
 800bed6:	290a      	cmp	r1, #10
 800bed8:	d103      	bne.n	800bee2 <__sfputc_r+0x1e>
 800beda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bede:	f000 baef 	b.w	800c4c0 <__swbuf_r>
 800bee2:	6813      	ldr	r3, [r2, #0]
 800bee4:	1c58      	adds	r0, r3, #1
 800bee6:	6010      	str	r0, [r2, #0]
 800bee8:	7019      	strb	r1, [r3, #0]
 800beea:	4608      	mov	r0, r1
 800beec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <__sfputs_r>:
 800bef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef4:	4606      	mov	r6, r0
 800bef6:	460f      	mov	r7, r1
 800bef8:	4614      	mov	r4, r2
 800befa:	18d5      	adds	r5, r2, r3
 800befc:	42ac      	cmp	r4, r5
 800befe:	d101      	bne.n	800bf04 <__sfputs_r+0x12>
 800bf00:	2000      	movs	r0, #0
 800bf02:	e007      	b.n	800bf14 <__sfputs_r+0x22>
 800bf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf08:	463a      	mov	r2, r7
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7ff ffda 	bl	800bec4 <__sfputc_r>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d1f3      	bne.n	800befc <__sfputs_r+0xa>
 800bf14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf18 <_vfiprintf_r>:
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	b09d      	sub	sp, #116	; 0x74
 800bf20:	4614      	mov	r4, r2
 800bf22:	4698      	mov	r8, r3
 800bf24:	4606      	mov	r6, r0
 800bf26:	b118      	cbz	r0, 800bf30 <_vfiprintf_r+0x18>
 800bf28:	6983      	ldr	r3, [r0, #24]
 800bf2a:	b90b      	cbnz	r3, 800bf30 <_vfiprintf_r+0x18>
 800bf2c:	f000 fcaa 	bl	800c884 <__sinit>
 800bf30:	4b89      	ldr	r3, [pc, #548]	; (800c158 <_vfiprintf_r+0x240>)
 800bf32:	429d      	cmp	r5, r3
 800bf34:	d11b      	bne.n	800bf6e <_vfiprintf_r+0x56>
 800bf36:	6875      	ldr	r5, [r6, #4]
 800bf38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf3a:	07d9      	lsls	r1, r3, #31
 800bf3c:	d405      	bmi.n	800bf4a <_vfiprintf_r+0x32>
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	059a      	lsls	r2, r3, #22
 800bf42:	d402      	bmi.n	800bf4a <_vfiprintf_r+0x32>
 800bf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf46:	f000 fd3b 	bl	800c9c0 <__retarget_lock_acquire_recursive>
 800bf4a:	89ab      	ldrh	r3, [r5, #12]
 800bf4c:	071b      	lsls	r3, r3, #28
 800bf4e:	d501      	bpl.n	800bf54 <_vfiprintf_r+0x3c>
 800bf50:	692b      	ldr	r3, [r5, #16]
 800bf52:	b9eb      	cbnz	r3, 800bf90 <_vfiprintf_r+0x78>
 800bf54:	4629      	mov	r1, r5
 800bf56:	4630      	mov	r0, r6
 800bf58:	f000 fb04 	bl	800c564 <__swsetup_r>
 800bf5c:	b1c0      	cbz	r0, 800bf90 <_vfiprintf_r+0x78>
 800bf5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf60:	07dc      	lsls	r4, r3, #31
 800bf62:	d50e      	bpl.n	800bf82 <_vfiprintf_r+0x6a>
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295
 800bf68:	b01d      	add	sp, #116	; 0x74
 800bf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6e:	4b7b      	ldr	r3, [pc, #492]	; (800c15c <_vfiprintf_r+0x244>)
 800bf70:	429d      	cmp	r5, r3
 800bf72:	d101      	bne.n	800bf78 <_vfiprintf_r+0x60>
 800bf74:	68b5      	ldr	r5, [r6, #8]
 800bf76:	e7df      	b.n	800bf38 <_vfiprintf_r+0x20>
 800bf78:	4b79      	ldr	r3, [pc, #484]	; (800c160 <_vfiprintf_r+0x248>)
 800bf7a:	429d      	cmp	r5, r3
 800bf7c:	bf08      	it	eq
 800bf7e:	68f5      	ldreq	r5, [r6, #12]
 800bf80:	e7da      	b.n	800bf38 <_vfiprintf_r+0x20>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	0598      	lsls	r0, r3, #22
 800bf86:	d4ed      	bmi.n	800bf64 <_vfiprintf_r+0x4c>
 800bf88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf8a:	f000 fd1a 	bl	800c9c2 <__retarget_lock_release_recursive>
 800bf8e:	e7e9      	b.n	800bf64 <_vfiprintf_r+0x4c>
 800bf90:	2300      	movs	r3, #0
 800bf92:	9309      	str	r3, [sp, #36]	; 0x24
 800bf94:	2320      	movs	r3, #32
 800bf96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf9e:	2330      	movs	r3, #48	; 0x30
 800bfa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c164 <_vfiprintf_r+0x24c>
 800bfa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfa8:	f04f 0901 	mov.w	r9, #1
 800bfac:	4623      	mov	r3, r4
 800bfae:	469a      	mov	sl, r3
 800bfb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb4:	b10a      	cbz	r2, 800bfba <_vfiprintf_r+0xa2>
 800bfb6:	2a25      	cmp	r2, #37	; 0x25
 800bfb8:	d1f9      	bne.n	800bfae <_vfiprintf_r+0x96>
 800bfba:	ebba 0b04 	subs.w	fp, sl, r4
 800bfbe:	d00b      	beq.n	800bfd8 <_vfiprintf_r+0xc0>
 800bfc0:	465b      	mov	r3, fp
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff ff93 	bl	800bef2 <__sfputs_r>
 800bfcc:	3001      	adds	r0, #1
 800bfce:	f000 80aa 	beq.w	800c126 <_vfiprintf_r+0x20e>
 800bfd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfd4:	445a      	add	r2, fp
 800bfd6:	9209      	str	r2, [sp, #36]	; 0x24
 800bfd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80a2 	beq.w	800c126 <_vfiprintf_r+0x20e>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfec:	f10a 0a01 	add.w	sl, sl, #1
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	9307      	str	r3, [sp, #28]
 800bff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bff8:	931a      	str	r3, [sp, #104]	; 0x68
 800bffa:	4654      	mov	r4, sl
 800bffc:	2205      	movs	r2, #5
 800bffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c002:	4858      	ldr	r0, [pc, #352]	; (800c164 <_vfiprintf_r+0x24c>)
 800c004:	f7f4 f8ec 	bl	80001e0 <memchr>
 800c008:	9a04      	ldr	r2, [sp, #16]
 800c00a:	b9d8      	cbnz	r0, 800c044 <_vfiprintf_r+0x12c>
 800c00c:	06d1      	lsls	r1, r2, #27
 800c00e:	bf44      	itt	mi
 800c010:	2320      	movmi	r3, #32
 800c012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c016:	0713      	lsls	r3, r2, #28
 800c018:	bf44      	itt	mi
 800c01a:	232b      	movmi	r3, #43	; 0x2b
 800c01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c020:	f89a 3000 	ldrb.w	r3, [sl]
 800c024:	2b2a      	cmp	r3, #42	; 0x2a
 800c026:	d015      	beq.n	800c054 <_vfiprintf_r+0x13c>
 800c028:	9a07      	ldr	r2, [sp, #28]
 800c02a:	4654      	mov	r4, sl
 800c02c:	2000      	movs	r0, #0
 800c02e:	f04f 0c0a 	mov.w	ip, #10
 800c032:	4621      	mov	r1, r4
 800c034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c038:	3b30      	subs	r3, #48	; 0x30
 800c03a:	2b09      	cmp	r3, #9
 800c03c:	d94e      	bls.n	800c0dc <_vfiprintf_r+0x1c4>
 800c03e:	b1b0      	cbz	r0, 800c06e <_vfiprintf_r+0x156>
 800c040:	9207      	str	r2, [sp, #28]
 800c042:	e014      	b.n	800c06e <_vfiprintf_r+0x156>
 800c044:	eba0 0308 	sub.w	r3, r0, r8
 800c048:	fa09 f303 	lsl.w	r3, r9, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	9304      	str	r3, [sp, #16]
 800c050:	46a2      	mov	sl, r4
 800c052:	e7d2      	b.n	800bffa <_vfiprintf_r+0xe2>
 800c054:	9b03      	ldr	r3, [sp, #12]
 800c056:	1d19      	adds	r1, r3, #4
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	9103      	str	r1, [sp, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bfbb      	ittet	lt
 800c060:	425b      	neglt	r3, r3
 800c062:	f042 0202 	orrlt.w	r2, r2, #2
 800c066:	9307      	strge	r3, [sp, #28]
 800c068:	9307      	strlt	r3, [sp, #28]
 800c06a:	bfb8      	it	lt
 800c06c:	9204      	strlt	r2, [sp, #16]
 800c06e:	7823      	ldrb	r3, [r4, #0]
 800c070:	2b2e      	cmp	r3, #46	; 0x2e
 800c072:	d10c      	bne.n	800c08e <_vfiprintf_r+0x176>
 800c074:	7863      	ldrb	r3, [r4, #1]
 800c076:	2b2a      	cmp	r3, #42	; 0x2a
 800c078:	d135      	bne.n	800c0e6 <_vfiprintf_r+0x1ce>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	1d1a      	adds	r2, r3, #4
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	9203      	str	r2, [sp, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	bfb8      	it	lt
 800c086:	f04f 33ff 	movlt.w	r3, #4294967295
 800c08a:	3402      	adds	r4, #2
 800c08c:	9305      	str	r3, [sp, #20]
 800c08e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c174 <_vfiprintf_r+0x25c>
 800c092:	7821      	ldrb	r1, [r4, #0]
 800c094:	2203      	movs	r2, #3
 800c096:	4650      	mov	r0, sl
 800c098:	f7f4 f8a2 	bl	80001e0 <memchr>
 800c09c:	b140      	cbz	r0, 800c0b0 <_vfiprintf_r+0x198>
 800c09e:	2340      	movs	r3, #64	; 0x40
 800c0a0:	eba0 000a 	sub.w	r0, r0, sl
 800c0a4:	fa03 f000 	lsl.w	r0, r3, r0
 800c0a8:	9b04      	ldr	r3, [sp, #16]
 800c0aa:	4303      	orrs	r3, r0
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	482c      	ldr	r0, [pc, #176]	; (800c168 <_vfiprintf_r+0x250>)
 800c0b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ba:	2206      	movs	r2, #6
 800c0bc:	f7f4 f890 	bl	80001e0 <memchr>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d03f      	beq.n	800c144 <_vfiprintf_r+0x22c>
 800c0c4:	4b29      	ldr	r3, [pc, #164]	; (800c16c <_vfiprintf_r+0x254>)
 800c0c6:	bb1b      	cbnz	r3, 800c110 <_vfiprintf_r+0x1f8>
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	3307      	adds	r3, #7
 800c0cc:	f023 0307 	bic.w	r3, r3, #7
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d6:	443b      	add	r3, r7
 800c0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0da:	e767      	b.n	800bfac <_vfiprintf_r+0x94>
 800c0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7a5      	b.n	800c032 <_vfiprintf_r+0x11a>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f04f 0c0a 	mov.w	ip, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f8:	3a30      	subs	r2, #48	; 0x30
 800c0fa:	2a09      	cmp	r2, #9
 800c0fc:	d903      	bls.n	800c106 <_vfiprintf_r+0x1ee>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0c5      	beq.n	800c08e <_vfiprintf_r+0x176>
 800c102:	9105      	str	r1, [sp, #20]
 800c104:	e7c3      	b.n	800c08e <_vfiprintf_r+0x176>
 800c106:	fb0c 2101 	mla	r1, ip, r1, r2
 800c10a:	4604      	mov	r4, r0
 800c10c:	2301      	movs	r3, #1
 800c10e:	e7f0      	b.n	800c0f2 <_vfiprintf_r+0x1da>
 800c110:	ab03      	add	r3, sp, #12
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	462a      	mov	r2, r5
 800c116:	4b16      	ldr	r3, [pc, #88]	; (800c170 <_vfiprintf_r+0x258>)
 800c118:	a904      	add	r1, sp, #16
 800c11a:	4630      	mov	r0, r6
 800c11c:	f3af 8000 	nop.w
 800c120:	4607      	mov	r7, r0
 800c122:	1c78      	adds	r0, r7, #1
 800c124:	d1d6      	bne.n	800c0d4 <_vfiprintf_r+0x1bc>
 800c126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c128:	07d9      	lsls	r1, r3, #31
 800c12a:	d405      	bmi.n	800c138 <_vfiprintf_r+0x220>
 800c12c:	89ab      	ldrh	r3, [r5, #12]
 800c12e:	059a      	lsls	r2, r3, #22
 800c130:	d402      	bmi.n	800c138 <_vfiprintf_r+0x220>
 800c132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c134:	f000 fc45 	bl	800c9c2 <__retarget_lock_release_recursive>
 800c138:	89ab      	ldrh	r3, [r5, #12]
 800c13a:	065b      	lsls	r3, r3, #25
 800c13c:	f53f af12 	bmi.w	800bf64 <_vfiprintf_r+0x4c>
 800c140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c142:	e711      	b.n	800bf68 <_vfiprintf_r+0x50>
 800c144:	ab03      	add	r3, sp, #12
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	462a      	mov	r2, r5
 800c14a:	4b09      	ldr	r3, [pc, #36]	; (800c170 <_vfiprintf_r+0x258>)
 800c14c:	a904      	add	r1, sp, #16
 800c14e:	4630      	mov	r0, r6
 800c150:	f000 f880 	bl	800c254 <_printf_i>
 800c154:	e7e4      	b.n	800c120 <_vfiprintf_r+0x208>
 800c156:	bf00      	nop
 800c158:	08016834 	.word	0x08016834
 800c15c:	08016854 	.word	0x08016854
 800c160:	08016814 	.word	0x08016814
 800c164:	080167de 	.word	0x080167de
 800c168:	080167e8 	.word	0x080167e8
 800c16c:	00000000 	.word	0x00000000
 800c170:	0800bef3 	.word	0x0800bef3
 800c174:	080167e4 	.word	0x080167e4

0800c178 <_printf_common>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	4616      	mov	r6, r2
 800c17e:	4699      	mov	r9, r3
 800c180:	688a      	ldr	r2, [r1, #8]
 800c182:	690b      	ldr	r3, [r1, #16]
 800c184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c188:	4293      	cmp	r3, r2
 800c18a:	bfb8      	it	lt
 800c18c:	4613      	movlt	r3, r2
 800c18e:	6033      	str	r3, [r6, #0]
 800c190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c194:	4607      	mov	r7, r0
 800c196:	460c      	mov	r4, r1
 800c198:	b10a      	cbz	r2, 800c19e <_printf_common+0x26>
 800c19a:	3301      	adds	r3, #1
 800c19c:	6033      	str	r3, [r6, #0]
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	0699      	lsls	r1, r3, #26
 800c1a2:	bf42      	ittt	mi
 800c1a4:	6833      	ldrmi	r3, [r6, #0]
 800c1a6:	3302      	addmi	r3, #2
 800c1a8:	6033      	strmi	r3, [r6, #0]
 800c1aa:	6825      	ldr	r5, [r4, #0]
 800c1ac:	f015 0506 	ands.w	r5, r5, #6
 800c1b0:	d106      	bne.n	800c1c0 <_printf_common+0x48>
 800c1b2:	f104 0a19 	add.w	sl, r4, #25
 800c1b6:	68e3      	ldr	r3, [r4, #12]
 800c1b8:	6832      	ldr	r2, [r6, #0]
 800c1ba:	1a9b      	subs	r3, r3, r2
 800c1bc:	42ab      	cmp	r3, r5
 800c1be:	dc26      	bgt.n	800c20e <_printf_common+0x96>
 800c1c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1c4:	1e13      	subs	r3, r2, #0
 800c1c6:	6822      	ldr	r2, [r4, #0]
 800c1c8:	bf18      	it	ne
 800c1ca:	2301      	movne	r3, #1
 800c1cc:	0692      	lsls	r2, r2, #26
 800c1ce:	d42b      	bmi.n	800c228 <_printf_common+0xb0>
 800c1d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	47c0      	blx	r8
 800c1da:	3001      	adds	r0, #1
 800c1dc:	d01e      	beq.n	800c21c <_printf_common+0xa4>
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	68e5      	ldr	r5, [r4, #12]
 800c1e2:	6832      	ldr	r2, [r6, #0]
 800c1e4:	f003 0306 	and.w	r3, r3, #6
 800c1e8:	2b04      	cmp	r3, #4
 800c1ea:	bf08      	it	eq
 800c1ec:	1aad      	subeq	r5, r5, r2
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	6922      	ldr	r2, [r4, #16]
 800c1f2:	bf0c      	ite	eq
 800c1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1f8:	2500      	movne	r5, #0
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	bfc4      	itt	gt
 800c1fe:	1a9b      	subgt	r3, r3, r2
 800c200:	18ed      	addgt	r5, r5, r3
 800c202:	2600      	movs	r6, #0
 800c204:	341a      	adds	r4, #26
 800c206:	42b5      	cmp	r5, r6
 800c208:	d11a      	bne.n	800c240 <_printf_common+0xc8>
 800c20a:	2000      	movs	r0, #0
 800c20c:	e008      	b.n	800c220 <_printf_common+0xa8>
 800c20e:	2301      	movs	r3, #1
 800c210:	4652      	mov	r2, sl
 800c212:	4649      	mov	r1, r9
 800c214:	4638      	mov	r0, r7
 800c216:	47c0      	blx	r8
 800c218:	3001      	adds	r0, #1
 800c21a:	d103      	bne.n	800c224 <_printf_common+0xac>
 800c21c:	f04f 30ff 	mov.w	r0, #4294967295
 800c220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c224:	3501      	adds	r5, #1
 800c226:	e7c6      	b.n	800c1b6 <_printf_common+0x3e>
 800c228:	18e1      	adds	r1, r4, r3
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	2030      	movs	r0, #48	; 0x30
 800c22e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c232:	4422      	add	r2, r4
 800c234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c23c:	3302      	adds	r3, #2
 800c23e:	e7c7      	b.n	800c1d0 <_printf_common+0x58>
 800c240:	2301      	movs	r3, #1
 800c242:	4622      	mov	r2, r4
 800c244:	4649      	mov	r1, r9
 800c246:	4638      	mov	r0, r7
 800c248:	47c0      	blx	r8
 800c24a:	3001      	adds	r0, #1
 800c24c:	d0e6      	beq.n	800c21c <_printf_common+0xa4>
 800c24e:	3601      	adds	r6, #1
 800c250:	e7d9      	b.n	800c206 <_printf_common+0x8e>
	...

0800c254 <_printf_i>:
 800c254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c258:	7e0f      	ldrb	r7, [r1, #24]
 800c25a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c25c:	2f78      	cmp	r7, #120	; 0x78
 800c25e:	4691      	mov	r9, r2
 800c260:	4680      	mov	r8, r0
 800c262:	460c      	mov	r4, r1
 800c264:	469a      	mov	sl, r3
 800c266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c26a:	d807      	bhi.n	800c27c <_printf_i+0x28>
 800c26c:	2f62      	cmp	r7, #98	; 0x62
 800c26e:	d80a      	bhi.n	800c286 <_printf_i+0x32>
 800c270:	2f00      	cmp	r7, #0
 800c272:	f000 80d8 	beq.w	800c426 <_printf_i+0x1d2>
 800c276:	2f58      	cmp	r7, #88	; 0x58
 800c278:	f000 80a3 	beq.w	800c3c2 <_printf_i+0x16e>
 800c27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c284:	e03a      	b.n	800c2fc <_printf_i+0xa8>
 800c286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c28a:	2b15      	cmp	r3, #21
 800c28c:	d8f6      	bhi.n	800c27c <_printf_i+0x28>
 800c28e:	a101      	add	r1, pc, #4	; (adr r1, 800c294 <_printf_i+0x40>)
 800c290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c294:	0800c2ed 	.word	0x0800c2ed
 800c298:	0800c301 	.word	0x0800c301
 800c29c:	0800c27d 	.word	0x0800c27d
 800c2a0:	0800c27d 	.word	0x0800c27d
 800c2a4:	0800c27d 	.word	0x0800c27d
 800c2a8:	0800c27d 	.word	0x0800c27d
 800c2ac:	0800c301 	.word	0x0800c301
 800c2b0:	0800c27d 	.word	0x0800c27d
 800c2b4:	0800c27d 	.word	0x0800c27d
 800c2b8:	0800c27d 	.word	0x0800c27d
 800c2bc:	0800c27d 	.word	0x0800c27d
 800c2c0:	0800c40d 	.word	0x0800c40d
 800c2c4:	0800c331 	.word	0x0800c331
 800c2c8:	0800c3ef 	.word	0x0800c3ef
 800c2cc:	0800c27d 	.word	0x0800c27d
 800c2d0:	0800c27d 	.word	0x0800c27d
 800c2d4:	0800c42f 	.word	0x0800c42f
 800c2d8:	0800c27d 	.word	0x0800c27d
 800c2dc:	0800c331 	.word	0x0800c331
 800c2e0:	0800c27d 	.word	0x0800c27d
 800c2e4:	0800c27d 	.word	0x0800c27d
 800c2e8:	0800c3f7 	.word	0x0800c3f7
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	602a      	str	r2, [r5, #0]
 800c2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e0a3      	b.n	800c448 <_printf_i+0x1f4>
 800c300:	6820      	ldr	r0, [r4, #0]
 800c302:	6829      	ldr	r1, [r5, #0]
 800c304:	0606      	lsls	r6, r0, #24
 800c306:	f101 0304 	add.w	r3, r1, #4
 800c30a:	d50a      	bpl.n	800c322 <_printf_i+0xce>
 800c30c:	680e      	ldr	r6, [r1, #0]
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	2e00      	cmp	r6, #0
 800c312:	da03      	bge.n	800c31c <_printf_i+0xc8>
 800c314:	232d      	movs	r3, #45	; 0x2d
 800c316:	4276      	negs	r6, r6
 800c318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c31c:	485e      	ldr	r0, [pc, #376]	; (800c498 <_printf_i+0x244>)
 800c31e:	230a      	movs	r3, #10
 800c320:	e019      	b.n	800c356 <_printf_i+0x102>
 800c322:	680e      	ldr	r6, [r1, #0]
 800c324:	602b      	str	r3, [r5, #0]
 800c326:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c32a:	bf18      	it	ne
 800c32c:	b236      	sxthne	r6, r6
 800c32e:	e7ef      	b.n	800c310 <_printf_i+0xbc>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	1d19      	adds	r1, r3, #4
 800c336:	6029      	str	r1, [r5, #0]
 800c338:	0601      	lsls	r1, r0, #24
 800c33a:	d501      	bpl.n	800c340 <_printf_i+0xec>
 800c33c:	681e      	ldr	r6, [r3, #0]
 800c33e:	e002      	b.n	800c346 <_printf_i+0xf2>
 800c340:	0646      	lsls	r6, r0, #25
 800c342:	d5fb      	bpl.n	800c33c <_printf_i+0xe8>
 800c344:	881e      	ldrh	r6, [r3, #0]
 800c346:	4854      	ldr	r0, [pc, #336]	; (800c498 <_printf_i+0x244>)
 800c348:	2f6f      	cmp	r7, #111	; 0x6f
 800c34a:	bf0c      	ite	eq
 800c34c:	2308      	moveq	r3, #8
 800c34e:	230a      	movne	r3, #10
 800c350:	2100      	movs	r1, #0
 800c352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c356:	6865      	ldr	r5, [r4, #4]
 800c358:	60a5      	str	r5, [r4, #8]
 800c35a:	2d00      	cmp	r5, #0
 800c35c:	bfa2      	ittt	ge
 800c35e:	6821      	ldrge	r1, [r4, #0]
 800c360:	f021 0104 	bicge.w	r1, r1, #4
 800c364:	6021      	strge	r1, [r4, #0]
 800c366:	b90e      	cbnz	r6, 800c36c <_printf_i+0x118>
 800c368:	2d00      	cmp	r5, #0
 800c36a:	d04d      	beq.n	800c408 <_printf_i+0x1b4>
 800c36c:	4615      	mov	r5, r2
 800c36e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c372:	fb03 6711 	mls	r7, r3, r1, r6
 800c376:	5dc7      	ldrb	r7, [r0, r7]
 800c378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c37c:	4637      	mov	r7, r6
 800c37e:	42bb      	cmp	r3, r7
 800c380:	460e      	mov	r6, r1
 800c382:	d9f4      	bls.n	800c36e <_printf_i+0x11a>
 800c384:	2b08      	cmp	r3, #8
 800c386:	d10b      	bne.n	800c3a0 <_printf_i+0x14c>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	07de      	lsls	r6, r3, #31
 800c38c:	d508      	bpl.n	800c3a0 <_printf_i+0x14c>
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	6861      	ldr	r1, [r4, #4]
 800c392:	4299      	cmp	r1, r3
 800c394:	bfde      	ittt	le
 800c396:	2330      	movle	r3, #48	; 0x30
 800c398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c39c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3a0:	1b52      	subs	r2, r2, r5
 800c3a2:	6122      	str	r2, [r4, #16]
 800c3a4:	f8cd a000 	str.w	sl, [sp]
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	aa03      	add	r2, sp, #12
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	f7ff fee2 	bl	800c178 <_printf_common>
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d14c      	bne.n	800c452 <_printf_i+0x1fe>
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	b004      	add	sp, #16
 800c3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c2:	4835      	ldr	r0, [pc, #212]	; (800c498 <_printf_i+0x244>)
 800c3c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3c8:	6829      	ldr	r1, [r5, #0]
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3d0:	6029      	str	r1, [r5, #0]
 800c3d2:	061d      	lsls	r5, r3, #24
 800c3d4:	d514      	bpl.n	800c400 <_printf_i+0x1ac>
 800c3d6:	07df      	lsls	r7, r3, #31
 800c3d8:	bf44      	itt	mi
 800c3da:	f043 0320 	orrmi.w	r3, r3, #32
 800c3de:	6023      	strmi	r3, [r4, #0]
 800c3e0:	b91e      	cbnz	r6, 800c3ea <_printf_i+0x196>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	f023 0320 	bic.w	r3, r3, #32
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	2310      	movs	r3, #16
 800c3ec:	e7b0      	b.n	800c350 <_printf_i+0xfc>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	f043 0320 	orr.w	r3, r3, #32
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	2378      	movs	r3, #120	; 0x78
 800c3f8:	4828      	ldr	r0, [pc, #160]	; (800c49c <_printf_i+0x248>)
 800c3fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c3fe:	e7e3      	b.n	800c3c8 <_printf_i+0x174>
 800c400:	0659      	lsls	r1, r3, #25
 800c402:	bf48      	it	mi
 800c404:	b2b6      	uxthmi	r6, r6
 800c406:	e7e6      	b.n	800c3d6 <_printf_i+0x182>
 800c408:	4615      	mov	r5, r2
 800c40a:	e7bb      	b.n	800c384 <_printf_i+0x130>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	6826      	ldr	r6, [r4, #0]
 800c410:	6961      	ldr	r1, [r4, #20]
 800c412:	1d18      	adds	r0, r3, #4
 800c414:	6028      	str	r0, [r5, #0]
 800c416:	0635      	lsls	r5, r6, #24
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	d501      	bpl.n	800c420 <_printf_i+0x1cc>
 800c41c:	6019      	str	r1, [r3, #0]
 800c41e:	e002      	b.n	800c426 <_printf_i+0x1d2>
 800c420:	0670      	lsls	r0, r6, #25
 800c422:	d5fb      	bpl.n	800c41c <_printf_i+0x1c8>
 800c424:	8019      	strh	r1, [r3, #0]
 800c426:	2300      	movs	r3, #0
 800c428:	6123      	str	r3, [r4, #16]
 800c42a:	4615      	mov	r5, r2
 800c42c:	e7ba      	b.n	800c3a4 <_printf_i+0x150>
 800c42e:	682b      	ldr	r3, [r5, #0]
 800c430:	1d1a      	adds	r2, r3, #4
 800c432:	602a      	str	r2, [r5, #0]
 800c434:	681d      	ldr	r5, [r3, #0]
 800c436:	6862      	ldr	r2, [r4, #4]
 800c438:	2100      	movs	r1, #0
 800c43a:	4628      	mov	r0, r5
 800c43c:	f7f3 fed0 	bl	80001e0 <memchr>
 800c440:	b108      	cbz	r0, 800c446 <_printf_i+0x1f2>
 800c442:	1b40      	subs	r0, r0, r5
 800c444:	6060      	str	r0, [r4, #4]
 800c446:	6863      	ldr	r3, [r4, #4]
 800c448:	6123      	str	r3, [r4, #16]
 800c44a:	2300      	movs	r3, #0
 800c44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c450:	e7a8      	b.n	800c3a4 <_printf_i+0x150>
 800c452:	6923      	ldr	r3, [r4, #16]
 800c454:	462a      	mov	r2, r5
 800c456:	4649      	mov	r1, r9
 800c458:	4640      	mov	r0, r8
 800c45a:	47d0      	blx	sl
 800c45c:	3001      	adds	r0, #1
 800c45e:	d0ab      	beq.n	800c3b8 <_printf_i+0x164>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	079b      	lsls	r3, r3, #30
 800c464:	d413      	bmi.n	800c48e <_printf_i+0x23a>
 800c466:	68e0      	ldr	r0, [r4, #12]
 800c468:	9b03      	ldr	r3, [sp, #12]
 800c46a:	4298      	cmp	r0, r3
 800c46c:	bfb8      	it	lt
 800c46e:	4618      	movlt	r0, r3
 800c470:	e7a4      	b.n	800c3bc <_printf_i+0x168>
 800c472:	2301      	movs	r3, #1
 800c474:	4632      	mov	r2, r6
 800c476:	4649      	mov	r1, r9
 800c478:	4640      	mov	r0, r8
 800c47a:	47d0      	blx	sl
 800c47c:	3001      	adds	r0, #1
 800c47e:	d09b      	beq.n	800c3b8 <_printf_i+0x164>
 800c480:	3501      	adds	r5, #1
 800c482:	68e3      	ldr	r3, [r4, #12]
 800c484:	9903      	ldr	r1, [sp, #12]
 800c486:	1a5b      	subs	r3, r3, r1
 800c488:	42ab      	cmp	r3, r5
 800c48a:	dcf2      	bgt.n	800c472 <_printf_i+0x21e>
 800c48c:	e7eb      	b.n	800c466 <_printf_i+0x212>
 800c48e:	2500      	movs	r5, #0
 800c490:	f104 0619 	add.w	r6, r4, #25
 800c494:	e7f5      	b.n	800c482 <_printf_i+0x22e>
 800c496:	bf00      	nop
 800c498:	080167ef 	.word	0x080167ef
 800c49c:	08016800 	.word	0x08016800

0800c4a0 <_sbrk_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4d06      	ldr	r5, [pc, #24]	; (800c4bc <_sbrk_r+0x1c>)
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	602b      	str	r3, [r5, #0]
 800c4ac:	f7fa f8a4 	bl	80065f8 <_sbrk>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	d102      	bne.n	800c4ba <_sbrk_r+0x1a>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	b103      	cbz	r3, 800c4ba <_sbrk_r+0x1a>
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	20002b68 	.word	0x20002b68

0800c4c0 <__swbuf_r>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	460e      	mov	r6, r1
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b118      	cbz	r0, 800c4d2 <__swbuf_r+0x12>
 800c4ca:	6983      	ldr	r3, [r0, #24]
 800c4cc:	b90b      	cbnz	r3, 800c4d2 <__swbuf_r+0x12>
 800c4ce:	f000 f9d9 	bl	800c884 <__sinit>
 800c4d2:	4b21      	ldr	r3, [pc, #132]	; (800c558 <__swbuf_r+0x98>)
 800c4d4:	429c      	cmp	r4, r3
 800c4d6:	d12b      	bne.n	800c530 <__swbuf_r+0x70>
 800c4d8:	686c      	ldr	r4, [r5, #4]
 800c4da:	69a3      	ldr	r3, [r4, #24]
 800c4dc:	60a3      	str	r3, [r4, #8]
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	071a      	lsls	r2, r3, #28
 800c4e2:	d52f      	bpl.n	800c544 <__swbuf_r+0x84>
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	b36b      	cbz	r3, 800c544 <__swbuf_r+0x84>
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	6820      	ldr	r0, [r4, #0]
 800c4ec:	1ac0      	subs	r0, r0, r3
 800c4ee:	6963      	ldr	r3, [r4, #20]
 800c4f0:	b2f6      	uxtb	r6, r6
 800c4f2:	4283      	cmp	r3, r0
 800c4f4:	4637      	mov	r7, r6
 800c4f6:	dc04      	bgt.n	800c502 <__swbuf_r+0x42>
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f000 f92e 	bl	800c75c <_fflush_r>
 800c500:	bb30      	cbnz	r0, 800c550 <__swbuf_r+0x90>
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	3b01      	subs	r3, #1
 800c506:	60a3      	str	r3, [r4, #8]
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	701e      	strb	r6, [r3, #0]
 800c510:	6963      	ldr	r3, [r4, #20]
 800c512:	3001      	adds	r0, #1
 800c514:	4283      	cmp	r3, r0
 800c516:	d004      	beq.n	800c522 <__swbuf_r+0x62>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	07db      	lsls	r3, r3, #31
 800c51c:	d506      	bpl.n	800c52c <__swbuf_r+0x6c>
 800c51e:	2e0a      	cmp	r6, #10
 800c520:	d104      	bne.n	800c52c <__swbuf_r+0x6c>
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f000 f919 	bl	800c75c <_fflush_r>
 800c52a:	b988      	cbnz	r0, 800c550 <__swbuf_r+0x90>
 800c52c:	4638      	mov	r0, r7
 800c52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c530:	4b0a      	ldr	r3, [pc, #40]	; (800c55c <__swbuf_r+0x9c>)
 800c532:	429c      	cmp	r4, r3
 800c534:	d101      	bne.n	800c53a <__swbuf_r+0x7a>
 800c536:	68ac      	ldr	r4, [r5, #8]
 800c538:	e7cf      	b.n	800c4da <__swbuf_r+0x1a>
 800c53a:	4b09      	ldr	r3, [pc, #36]	; (800c560 <__swbuf_r+0xa0>)
 800c53c:	429c      	cmp	r4, r3
 800c53e:	bf08      	it	eq
 800c540:	68ec      	ldreq	r4, [r5, #12]
 800c542:	e7ca      	b.n	800c4da <__swbuf_r+0x1a>
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 f80c 	bl	800c564 <__swsetup_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d0cb      	beq.n	800c4e8 <__swbuf_r+0x28>
 800c550:	f04f 37ff 	mov.w	r7, #4294967295
 800c554:	e7ea      	b.n	800c52c <__swbuf_r+0x6c>
 800c556:	bf00      	nop
 800c558:	08016834 	.word	0x08016834
 800c55c:	08016854 	.word	0x08016854
 800c560:	08016814 	.word	0x08016814

0800c564 <__swsetup_r>:
 800c564:	4b32      	ldr	r3, [pc, #200]	; (800c630 <__swsetup_r+0xcc>)
 800c566:	b570      	push	{r4, r5, r6, lr}
 800c568:	681d      	ldr	r5, [r3, #0]
 800c56a:	4606      	mov	r6, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	b125      	cbz	r5, 800c57a <__swsetup_r+0x16>
 800c570:	69ab      	ldr	r3, [r5, #24]
 800c572:	b913      	cbnz	r3, 800c57a <__swsetup_r+0x16>
 800c574:	4628      	mov	r0, r5
 800c576:	f000 f985 	bl	800c884 <__sinit>
 800c57a:	4b2e      	ldr	r3, [pc, #184]	; (800c634 <__swsetup_r+0xd0>)
 800c57c:	429c      	cmp	r4, r3
 800c57e:	d10f      	bne.n	800c5a0 <__swsetup_r+0x3c>
 800c580:	686c      	ldr	r4, [r5, #4]
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c588:	0719      	lsls	r1, r3, #28
 800c58a:	d42c      	bmi.n	800c5e6 <__swsetup_r+0x82>
 800c58c:	06dd      	lsls	r5, r3, #27
 800c58e:	d411      	bmi.n	800c5b4 <__swsetup_r+0x50>
 800c590:	2309      	movs	r3, #9
 800c592:	6033      	str	r3, [r6, #0]
 800c594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	f04f 30ff 	mov.w	r0, #4294967295
 800c59e:	e03e      	b.n	800c61e <__swsetup_r+0xba>
 800c5a0:	4b25      	ldr	r3, [pc, #148]	; (800c638 <__swsetup_r+0xd4>)
 800c5a2:	429c      	cmp	r4, r3
 800c5a4:	d101      	bne.n	800c5aa <__swsetup_r+0x46>
 800c5a6:	68ac      	ldr	r4, [r5, #8]
 800c5a8:	e7eb      	b.n	800c582 <__swsetup_r+0x1e>
 800c5aa:	4b24      	ldr	r3, [pc, #144]	; (800c63c <__swsetup_r+0xd8>)
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	bf08      	it	eq
 800c5b0:	68ec      	ldreq	r4, [r5, #12]
 800c5b2:	e7e6      	b.n	800c582 <__swsetup_r+0x1e>
 800c5b4:	0758      	lsls	r0, r3, #29
 800c5b6:	d512      	bpl.n	800c5de <__swsetup_r+0x7a>
 800c5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ba:	b141      	cbz	r1, 800c5ce <__swsetup_r+0x6a>
 800c5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5c0:	4299      	cmp	r1, r3
 800c5c2:	d002      	beq.n	800c5ca <__swsetup_r+0x66>
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff fa41 	bl	800ba4c <_free_r>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	6063      	str	r3, [r4, #4]
 800c5da:	6923      	ldr	r3, [r4, #16]
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	f043 0308 	orr.w	r3, r3, #8
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	b94b      	cbnz	r3, 800c5fe <__swsetup_r+0x9a>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5f4:	d003      	beq.n	800c5fe <__swsetup_r+0x9a>
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f000 fa09 	bl	800ca10 <__smakebuf_r>
 800c5fe:	89a0      	ldrh	r0, [r4, #12]
 800c600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c604:	f010 0301 	ands.w	r3, r0, #1
 800c608:	d00a      	beq.n	800c620 <__swsetup_r+0xbc>
 800c60a:	2300      	movs	r3, #0
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	6963      	ldr	r3, [r4, #20]
 800c610:	425b      	negs	r3, r3
 800c612:	61a3      	str	r3, [r4, #24]
 800c614:	6923      	ldr	r3, [r4, #16]
 800c616:	b943      	cbnz	r3, 800c62a <__swsetup_r+0xc6>
 800c618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c61c:	d1ba      	bne.n	800c594 <__swsetup_r+0x30>
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	0781      	lsls	r1, r0, #30
 800c622:	bf58      	it	pl
 800c624:	6963      	ldrpl	r3, [r4, #20]
 800c626:	60a3      	str	r3, [r4, #8]
 800c628:	e7f4      	b.n	800c614 <__swsetup_r+0xb0>
 800c62a:	2000      	movs	r0, #0
 800c62c:	e7f7      	b.n	800c61e <__swsetup_r+0xba>
 800c62e:	bf00      	nop
 800c630:	200000ac 	.word	0x200000ac
 800c634:	08016834 	.word	0x08016834
 800c638:	08016854 	.word	0x08016854
 800c63c:	08016814 	.word	0x08016814

0800c640 <abort>:
 800c640:	b508      	push	{r3, lr}
 800c642:	2006      	movs	r0, #6
 800c644:	f000 faa2 	bl	800cb8c <raise>
 800c648:	2001      	movs	r0, #1
 800c64a:	f7f9 ff5d 	bl	8006508 <_exit>
	...

0800c650 <__sflush_r>:
 800c650:	898a      	ldrh	r2, [r1, #12]
 800c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c656:	4605      	mov	r5, r0
 800c658:	0710      	lsls	r0, r2, #28
 800c65a:	460c      	mov	r4, r1
 800c65c:	d458      	bmi.n	800c710 <__sflush_r+0xc0>
 800c65e:	684b      	ldr	r3, [r1, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	dc05      	bgt.n	800c670 <__sflush_r+0x20>
 800c664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c666:	2b00      	cmp	r3, #0
 800c668:	dc02      	bgt.n	800c670 <__sflush_r+0x20>
 800c66a:	2000      	movs	r0, #0
 800c66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c672:	2e00      	cmp	r6, #0
 800c674:	d0f9      	beq.n	800c66a <__sflush_r+0x1a>
 800c676:	2300      	movs	r3, #0
 800c678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c67c:	682f      	ldr	r7, [r5, #0]
 800c67e:	602b      	str	r3, [r5, #0]
 800c680:	d032      	beq.n	800c6e8 <__sflush_r+0x98>
 800c682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	075a      	lsls	r2, r3, #29
 800c688:	d505      	bpl.n	800c696 <__sflush_r+0x46>
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	1ac0      	subs	r0, r0, r3
 800c68e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c690:	b10b      	cbz	r3, 800c696 <__sflush_r+0x46>
 800c692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c694:	1ac0      	subs	r0, r0, r3
 800c696:	2300      	movs	r3, #0
 800c698:	4602      	mov	r2, r0
 800c69a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c69c:	6a21      	ldr	r1, [r4, #32]
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b0      	blx	r6
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	d106      	bne.n	800c6b6 <__sflush_r+0x66>
 800c6a8:	6829      	ldr	r1, [r5, #0]
 800c6aa:	291d      	cmp	r1, #29
 800c6ac:	d82c      	bhi.n	800c708 <__sflush_r+0xb8>
 800c6ae:	4a2a      	ldr	r2, [pc, #168]	; (800c758 <__sflush_r+0x108>)
 800c6b0:	40ca      	lsrs	r2, r1
 800c6b2:	07d6      	lsls	r6, r2, #31
 800c6b4:	d528      	bpl.n	800c708 <__sflush_r+0xb8>
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	6062      	str	r2, [r4, #4]
 800c6ba:	04d9      	lsls	r1, r3, #19
 800c6bc:	6922      	ldr	r2, [r4, #16]
 800c6be:	6022      	str	r2, [r4, #0]
 800c6c0:	d504      	bpl.n	800c6cc <__sflush_r+0x7c>
 800c6c2:	1c42      	adds	r2, r0, #1
 800c6c4:	d101      	bne.n	800c6ca <__sflush_r+0x7a>
 800c6c6:	682b      	ldr	r3, [r5, #0]
 800c6c8:	b903      	cbnz	r3, 800c6cc <__sflush_r+0x7c>
 800c6ca:	6560      	str	r0, [r4, #84]	; 0x54
 800c6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ce:	602f      	str	r7, [r5, #0]
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	d0ca      	beq.n	800c66a <__sflush_r+0x1a>
 800c6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6d8:	4299      	cmp	r1, r3
 800c6da:	d002      	beq.n	800c6e2 <__sflush_r+0x92>
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f7ff f9b5 	bl	800ba4c <_free_r>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	6360      	str	r0, [r4, #52]	; 0x34
 800c6e6:	e7c1      	b.n	800c66c <__sflush_r+0x1c>
 800c6e8:	6a21      	ldr	r1, [r4, #32]
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b0      	blx	r6
 800c6f0:	1c41      	adds	r1, r0, #1
 800c6f2:	d1c7      	bne.n	800c684 <__sflush_r+0x34>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0c4      	beq.n	800c684 <__sflush_r+0x34>
 800c6fa:	2b1d      	cmp	r3, #29
 800c6fc:	d001      	beq.n	800c702 <__sflush_r+0xb2>
 800c6fe:	2b16      	cmp	r3, #22
 800c700:	d101      	bne.n	800c706 <__sflush_r+0xb6>
 800c702:	602f      	str	r7, [r5, #0]
 800c704:	e7b1      	b.n	800c66a <__sflush_r+0x1a>
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70c:	81a3      	strh	r3, [r4, #12]
 800c70e:	e7ad      	b.n	800c66c <__sflush_r+0x1c>
 800c710:	690f      	ldr	r7, [r1, #16]
 800c712:	2f00      	cmp	r7, #0
 800c714:	d0a9      	beq.n	800c66a <__sflush_r+0x1a>
 800c716:	0793      	lsls	r3, r2, #30
 800c718:	680e      	ldr	r6, [r1, #0]
 800c71a:	bf08      	it	eq
 800c71c:	694b      	ldreq	r3, [r1, #20]
 800c71e:	600f      	str	r7, [r1, #0]
 800c720:	bf18      	it	ne
 800c722:	2300      	movne	r3, #0
 800c724:	eba6 0807 	sub.w	r8, r6, r7
 800c728:	608b      	str	r3, [r1, #8]
 800c72a:	f1b8 0f00 	cmp.w	r8, #0
 800c72e:	dd9c      	ble.n	800c66a <__sflush_r+0x1a>
 800c730:	6a21      	ldr	r1, [r4, #32]
 800c732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c734:	4643      	mov	r3, r8
 800c736:	463a      	mov	r2, r7
 800c738:	4628      	mov	r0, r5
 800c73a:	47b0      	blx	r6
 800c73c:	2800      	cmp	r0, #0
 800c73e:	dc06      	bgt.n	800c74e <__sflush_r+0xfe>
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	e78e      	b.n	800c66c <__sflush_r+0x1c>
 800c74e:	4407      	add	r7, r0
 800c750:	eba8 0800 	sub.w	r8, r8, r0
 800c754:	e7e9      	b.n	800c72a <__sflush_r+0xda>
 800c756:	bf00      	nop
 800c758:	20400001 	.word	0x20400001

0800c75c <_fflush_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	690b      	ldr	r3, [r1, #16]
 800c760:	4605      	mov	r5, r0
 800c762:	460c      	mov	r4, r1
 800c764:	b913      	cbnz	r3, 800c76c <_fflush_r+0x10>
 800c766:	2500      	movs	r5, #0
 800c768:	4628      	mov	r0, r5
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	b118      	cbz	r0, 800c776 <_fflush_r+0x1a>
 800c76e:	6983      	ldr	r3, [r0, #24]
 800c770:	b90b      	cbnz	r3, 800c776 <_fflush_r+0x1a>
 800c772:	f000 f887 	bl	800c884 <__sinit>
 800c776:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <_fflush_r+0x6c>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	d11b      	bne.n	800c7b4 <_fflush_r+0x58>
 800c77c:	686c      	ldr	r4, [r5, #4]
 800c77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d0ef      	beq.n	800c766 <_fflush_r+0xa>
 800c786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c788:	07d0      	lsls	r0, r2, #31
 800c78a:	d404      	bmi.n	800c796 <_fflush_r+0x3a>
 800c78c:	0599      	lsls	r1, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_fflush_r+0x3a>
 800c790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c792:	f000 f915 	bl	800c9c0 <__retarget_lock_acquire_recursive>
 800c796:	4628      	mov	r0, r5
 800c798:	4621      	mov	r1, r4
 800c79a:	f7ff ff59 	bl	800c650 <__sflush_r>
 800c79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7a0:	07da      	lsls	r2, r3, #31
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	d4e0      	bmi.n	800c768 <_fflush_r+0xc>
 800c7a6:	89a3      	ldrh	r3, [r4, #12]
 800c7a8:	059b      	lsls	r3, r3, #22
 800c7aa:	d4dd      	bmi.n	800c768 <_fflush_r+0xc>
 800c7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ae:	f000 f908 	bl	800c9c2 <__retarget_lock_release_recursive>
 800c7b2:	e7d9      	b.n	800c768 <_fflush_r+0xc>
 800c7b4:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <_fflush_r+0x70>)
 800c7b6:	429c      	cmp	r4, r3
 800c7b8:	d101      	bne.n	800c7be <_fflush_r+0x62>
 800c7ba:	68ac      	ldr	r4, [r5, #8]
 800c7bc:	e7df      	b.n	800c77e <_fflush_r+0x22>
 800c7be:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <_fflush_r+0x74>)
 800c7c0:	429c      	cmp	r4, r3
 800c7c2:	bf08      	it	eq
 800c7c4:	68ec      	ldreq	r4, [r5, #12]
 800c7c6:	e7da      	b.n	800c77e <_fflush_r+0x22>
 800c7c8:	08016834 	.word	0x08016834
 800c7cc:	08016854 	.word	0x08016854
 800c7d0:	08016814 	.word	0x08016814

0800c7d4 <std>:
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	b510      	push	{r4, lr}
 800c7d8:	4604      	mov	r4, r0
 800c7da:	e9c0 3300 	strd	r3, r3, [r0]
 800c7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7e2:	6083      	str	r3, [r0, #8]
 800c7e4:	8181      	strh	r1, [r0, #12]
 800c7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7e8:	81c2      	strh	r2, [r0, #14]
 800c7ea:	6183      	str	r3, [r0, #24]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	2208      	movs	r2, #8
 800c7f0:	305c      	adds	r0, #92	; 0x5c
 800c7f2:	f7ff f80f 	bl	800b814 <memset>
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <std+0x38>)
 800c7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800c7fa:	4b05      	ldr	r3, [pc, #20]	; (800c810 <std+0x3c>)
 800c7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <std+0x40>)
 800c800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c802:	4b05      	ldr	r3, [pc, #20]	; (800c818 <std+0x44>)
 800c804:	6224      	str	r4, [r4, #32]
 800c806:	6323      	str	r3, [r4, #48]	; 0x30
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	bf00      	nop
 800c80c:	0800cbc5 	.word	0x0800cbc5
 800c810:	0800cbe7 	.word	0x0800cbe7
 800c814:	0800cc1f 	.word	0x0800cc1f
 800c818:	0800cc43 	.word	0x0800cc43

0800c81c <_cleanup_r>:
 800c81c:	4901      	ldr	r1, [pc, #4]	; (800c824 <_cleanup_r+0x8>)
 800c81e:	f000 b8af 	b.w	800c980 <_fwalk_reent>
 800c822:	bf00      	nop
 800c824:	0800c75d 	.word	0x0800c75d

0800c828 <__sfmoreglue>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	2268      	movs	r2, #104	; 0x68
 800c82c:	1e4d      	subs	r5, r1, #1
 800c82e:	4355      	muls	r5, r2
 800c830:	460e      	mov	r6, r1
 800c832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c836:	f7ff f975 	bl	800bb24 <_malloc_r>
 800c83a:	4604      	mov	r4, r0
 800c83c:	b140      	cbz	r0, 800c850 <__sfmoreglue+0x28>
 800c83e:	2100      	movs	r1, #0
 800c840:	e9c0 1600 	strd	r1, r6, [r0]
 800c844:	300c      	adds	r0, #12
 800c846:	60a0      	str	r0, [r4, #8]
 800c848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c84c:	f7fe ffe2 	bl	800b814 <memset>
 800c850:	4620      	mov	r0, r4
 800c852:	bd70      	pop	{r4, r5, r6, pc}

0800c854 <__sfp_lock_acquire>:
 800c854:	4801      	ldr	r0, [pc, #4]	; (800c85c <__sfp_lock_acquire+0x8>)
 800c856:	f000 b8b3 	b.w	800c9c0 <__retarget_lock_acquire_recursive>
 800c85a:	bf00      	nop
 800c85c:	20002b65 	.word	0x20002b65

0800c860 <__sfp_lock_release>:
 800c860:	4801      	ldr	r0, [pc, #4]	; (800c868 <__sfp_lock_release+0x8>)
 800c862:	f000 b8ae 	b.w	800c9c2 <__retarget_lock_release_recursive>
 800c866:	bf00      	nop
 800c868:	20002b65 	.word	0x20002b65

0800c86c <__sinit_lock_acquire>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__sinit_lock_acquire+0x8>)
 800c86e:	f000 b8a7 	b.w	800c9c0 <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	20002b66 	.word	0x20002b66

0800c878 <__sinit_lock_release>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__sinit_lock_release+0x8>)
 800c87a:	f000 b8a2 	b.w	800c9c2 <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	20002b66 	.word	0x20002b66

0800c884 <__sinit>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	f7ff fff0 	bl	800c86c <__sinit_lock_acquire>
 800c88c:	69a3      	ldr	r3, [r4, #24]
 800c88e:	b11b      	cbz	r3, 800c898 <__sinit+0x14>
 800c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c894:	f7ff bff0 	b.w	800c878 <__sinit_lock_release>
 800c898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c89c:	6523      	str	r3, [r4, #80]	; 0x50
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <__sinit+0x68>)
 800c8a0:	4a13      	ldr	r2, [pc, #76]	; (800c8f0 <__sinit+0x6c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	bf04      	itt	eq
 800c8aa:	2301      	moveq	r3, #1
 800c8ac:	61a3      	streq	r3, [r4, #24]
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 f820 	bl	800c8f4 <__sfp>
 800c8b4:	6060      	str	r0, [r4, #4]
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 f81c 	bl	800c8f4 <__sfp>
 800c8bc:	60a0      	str	r0, [r4, #8]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f818 	bl	800c8f4 <__sfp>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	60e0      	str	r0, [r4, #12]
 800c8c8:	2104      	movs	r1, #4
 800c8ca:	6860      	ldr	r0, [r4, #4]
 800c8cc:	f7ff ff82 	bl	800c7d4 <std>
 800c8d0:	68a0      	ldr	r0, [r4, #8]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	2109      	movs	r1, #9
 800c8d6:	f7ff ff7d 	bl	800c7d4 <std>
 800c8da:	68e0      	ldr	r0, [r4, #12]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	2112      	movs	r1, #18
 800c8e0:	f7ff ff78 	bl	800c7d4 <std>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	61a3      	str	r3, [r4, #24]
 800c8e8:	e7d2      	b.n	800c890 <__sinit+0xc>
 800c8ea:	bf00      	nop
 800c8ec:	0801672c 	.word	0x0801672c
 800c8f0:	0800c81d 	.word	0x0800c81d

0800c8f4 <__sfp>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	f7ff ffac 	bl	800c854 <__sfp_lock_acquire>
 800c8fc:	4b1e      	ldr	r3, [pc, #120]	; (800c978 <__sfp+0x84>)
 800c8fe:	681e      	ldr	r6, [r3, #0]
 800c900:	69b3      	ldr	r3, [r6, #24]
 800c902:	b913      	cbnz	r3, 800c90a <__sfp+0x16>
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff ffbd 	bl	800c884 <__sinit>
 800c90a:	3648      	adds	r6, #72	; 0x48
 800c90c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c910:	3b01      	subs	r3, #1
 800c912:	d503      	bpl.n	800c91c <__sfp+0x28>
 800c914:	6833      	ldr	r3, [r6, #0]
 800c916:	b30b      	cbz	r3, 800c95c <__sfp+0x68>
 800c918:	6836      	ldr	r6, [r6, #0]
 800c91a:	e7f7      	b.n	800c90c <__sfp+0x18>
 800c91c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c920:	b9d5      	cbnz	r5, 800c958 <__sfp+0x64>
 800c922:	4b16      	ldr	r3, [pc, #88]	; (800c97c <__sfp+0x88>)
 800c924:	60e3      	str	r3, [r4, #12]
 800c926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c92a:	6665      	str	r5, [r4, #100]	; 0x64
 800c92c:	f000 f847 	bl	800c9be <__retarget_lock_init_recursive>
 800c930:	f7ff ff96 	bl	800c860 <__sfp_lock_release>
 800c934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c93c:	6025      	str	r5, [r4, #0]
 800c93e:	61a5      	str	r5, [r4, #24]
 800c940:	2208      	movs	r2, #8
 800c942:	4629      	mov	r1, r5
 800c944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c948:	f7fe ff64 	bl	800b814 <memset>
 800c94c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c954:	4620      	mov	r0, r4
 800c956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c958:	3468      	adds	r4, #104	; 0x68
 800c95a:	e7d9      	b.n	800c910 <__sfp+0x1c>
 800c95c:	2104      	movs	r1, #4
 800c95e:	4638      	mov	r0, r7
 800c960:	f7ff ff62 	bl	800c828 <__sfmoreglue>
 800c964:	4604      	mov	r4, r0
 800c966:	6030      	str	r0, [r6, #0]
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1d5      	bne.n	800c918 <__sfp+0x24>
 800c96c:	f7ff ff78 	bl	800c860 <__sfp_lock_release>
 800c970:	230c      	movs	r3, #12
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	e7ee      	b.n	800c954 <__sfp+0x60>
 800c976:	bf00      	nop
 800c978:	0801672c 	.word	0x0801672c
 800c97c:	ffff0001 	.word	0xffff0001

0800c980 <_fwalk_reent>:
 800c980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c984:	4606      	mov	r6, r0
 800c986:	4688      	mov	r8, r1
 800c988:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c98c:	2700      	movs	r7, #0
 800c98e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c992:	f1b9 0901 	subs.w	r9, r9, #1
 800c996:	d505      	bpl.n	800c9a4 <_fwalk_reent+0x24>
 800c998:	6824      	ldr	r4, [r4, #0]
 800c99a:	2c00      	cmp	r4, #0
 800c99c:	d1f7      	bne.n	800c98e <_fwalk_reent+0xe>
 800c99e:	4638      	mov	r0, r7
 800c9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a4:	89ab      	ldrh	r3, [r5, #12]
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d907      	bls.n	800c9ba <_fwalk_reent+0x3a>
 800c9aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	d003      	beq.n	800c9ba <_fwalk_reent+0x3a>
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	47c0      	blx	r8
 800c9b8:	4307      	orrs	r7, r0
 800c9ba:	3568      	adds	r5, #104	; 0x68
 800c9bc:	e7e9      	b.n	800c992 <_fwalk_reent+0x12>

0800c9be <__retarget_lock_init_recursive>:
 800c9be:	4770      	bx	lr

0800c9c0 <__retarget_lock_acquire_recursive>:
 800c9c0:	4770      	bx	lr

0800c9c2 <__retarget_lock_release_recursive>:
 800c9c2:	4770      	bx	lr

0800c9c4 <__swhatbuf_r>:
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	460e      	mov	r6, r1
 800c9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9cc:	2900      	cmp	r1, #0
 800c9ce:	b096      	sub	sp, #88	; 0x58
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	461d      	mov	r5, r3
 800c9d4:	da08      	bge.n	800c9e8 <__swhatbuf_r+0x24>
 800c9d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	602a      	str	r2, [r5, #0]
 800c9de:	061a      	lsls	r2, r3, #24
 800c9e0:	d410      	bmi.n	800ca04 <__swhatbuf_r+0x40>
 800c9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e6:	e00e      	b.n	800ca06 <__swhatbuf_r+0x42>
 800c9e8:	466a      	mov	r2, sp
 800c9ea:	f000 f951 	bl	800cc90 <_fstat_r>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	dbf1      	blt.n	800c9d6 <__swhatbuf_r+0x12>
 800c9f2:	9a01      	ldr	r2, [sp, #4]
 800c9f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c9f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9fc:	425a      	negs	r2, r3
 800c9fe:	415a      	adcs	r2, r3
 800ca00:	602a      	str	r2, [r5, #0]
 800ca02:	e7ee      	b.n	800c9e2 <__swhatbuf_r+0x1e>
 800ca04:	2340      	movs	r3, #64	; 0x40
 800ca06:	2000      	movs	r0, #0
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	b016      	add	sp, #88	; 0x58
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca10 <__smakebuf_r>:
 800ca10:	898b      	ldrh	r3, [r1, #12]
 800ca12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca14:	079d      	lsls	r5, r3, #30
 800ca16:	4606      	mov	r6, r0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	d507      	bpl.n	800ca2c <__smakebuf_r+0x1c>
 800ca1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	6123      	str	r3, [r4, #16]
 800ca24:	2301      	movs	r3, #1
 800ca26:	6163      	str	r3, [r4, #20]
 800ca28:	b002      	add	sp, #8
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	ab01      	add	r3, sp, #4
 800ca2e:	466a      	mov	r2, sp
 800ca30:	f7ff ffc8 	bl	800c9c4 <__swhatbuf_r>
 800ca34:	9900      	ldr	r1, [sp, #0]
 800ca36:	4605      	mov	r5, r0
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f7ff f873 	bl	800bb24 <_malloc_r>
 800ca3e:	b948      	cbnz	r0, 800ca54 <__smakebuf_r+0x44>
 800ca40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca44:	059a      	lsls	r2, r3, #22
 800ca46:	d4ef      	bmi.n	800ca28 <__smakebuf_r+0x18>
 800ca48:	f023 0303 	bic.w	r3, r3, #3
 800ca4c:	f043 0302 	orr.w	r3, r3, #2
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	e7e3      	b.n	800ca1c <__smakebuf_r+0xc>
 800ca54:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <__smakebuf_r+0x7c>)
 800ca56:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	6020      	str	r0, [r4, #0]
 800ca5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca60:	81a3      	strh	r3, [r4, #12]
 800ca62:	9b00      	ldr	r3, [sp, #0]
 800ca64:	6163      	str	r3, [r4, #20]
 800ca66:	9b01      	ldr	r3, [sp, #4]
 800ca68:	6120      	str	r0, [r4, #16]
 800ca6a:	b15b      	cbz	r3, 800ca84 <__smakebuf_r+0x74>
 800ca6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca70:	4630      	mov	r0, r6
 800ca72:	f000 f91f 	bl	800ccb4 <_isatty_r>
 800ca76:	b128      	cbz	r0, 800ca84 <__smakebuf_r+0x74>
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	f023 0303 	bic.w	r3, r3, #3
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	89a0      	ldrh	r0, [r4, #12]
 800ca86:	4305      	orrs	r5, r0
 800ca88:	81a5      	strh	r5, [r4, #12]
 800ca8a:	e7cd      	b.n	800ca28 <__smakebuf_r+0x18>
 800ca8c:	0800c81d 	.word	0x0800c81d

0800ca90 <memmove>:
 800ca90:	4288      	cmp	r0, r1
 800ca92:	b510      	push	{r4, lr}
 800ca94:	eb01 0402 	add.w	r4, r1, r2
 800ca98:	d902      	bls.n	800caa0 <memmove+0x10>
 800ca9a:	4284      	cmp	r4, r0
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	d807      	bhi.n	800cab0 <memmove+0x20>
 800caa0:	1e43      	subs	r3, r0, #1
 800caa2:	42a1      	cmp	r1, r4
 800caa4:	d008      	beq.n	800cab8 <memmove+0x28>
 800caa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caae:	e7f8      	b.n	800caa2 <memmove+0x12>
 800cab0:	4402      	add	r2, r0
 800cab2:	4601      	mov	r1, r0
 800cab4:	428a      	cmp	r2, r1
 800cab6:	d100      	bne.n	800caba <memmove+0x2a>
 800cab8:	bd10      	pop	{r4, pc}
 800caba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cabe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cac2:	e7f7      	b.n	800cab4 <memmove+0x24>

0800cac4 <__malloc_lock>:
 800cac4:	4801      	ldr	r0, [pc, #4]	; (800cacc <__malloc_lock+0x8>)
 800cac6:	f7ff bf7b 	b.w	800c9c0 <__retarget_lock_acquire_recursive>
 800caca:	bf00      	nop
 800cacc:	20002b64 	.word	0x20002b64

0800cad0 <__malloc_unlock>:
 800cad0:	4801      	ldr	r0, [pc, #4]	; (800cad8 <__malloc_unlock+0x8>)
 800cad2:	f7ff bf76 	b.w	800c9c2 <__retarget_lock_release_recursive>
 800cad6:	bf00      	nop
 800cad8:	20002b64 	.word	0x20002b64

0800cadc <_realloc_r>:
 800cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae0:	4680      	mov	r8, r0
 800cae2:	4614      	mov	r4, r2
 800cae4:	460e      	mov	r6, r1
 800cae6:	b921      	cbnz	r1, 800caf2 <_realloc_r+0x16>
 800cae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caec:	4611      	mov	r1, r2
 800caee:	f7ff b819 	b.w	800bb24 <_malloc_r>
 800caf2:	b92a      	cbnz	r2, 800cb00 <_realloc_r+0x24>
 800caf4:	f7fe ffaa 	bl	800ba4c <_free_r>
 800caf8:	4625      	mov	r5, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	f000 f8fa 	bl	800ccf8 <_malloc_usable_size_r>
 800cb04:	4284      	cmp	r4, r0
 800cb06:	4607      	mov	r7, r0
 800cb08:	d802      	bhi.n	800cb10 <_realloc_r+0x34>
 800cb0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb0e:	d812      	bhi.n	800cb36 <_realloc_r+0x5a>
 800cb10:	4621      	mov	r1, r4
 800cb12:	4640      	mov	r0, r8
 800cb14:	f7ff f806 	bl	800bb24 <_malloc_r>
 800cb18:	4605      	mov	r5, r0
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d0ed      	beq.n	800cafa <_realloc_r+0x1e>
 800cb1e:	42bc      	cmp	r4, r7
 800cb20:	4622      	mov	r2, r4
 800cb22:	4631      	mov	r1, r6
 800cb24:	bf28      	it	cs
 800cb26:	463a      	movcs	r2, r7
 800cb28:	f7fe ff82 	bl	800ba30 <memcpy>
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	4640      	mov	r0, r8
 800cb30:	f7fe ff8c 	bl	800ba4c <_free_r>
 800cb34:	e7e1      	b.n	800cafa <_realloc_r+0x1e>
 800cb36:	4635      	mov	r5, r6
 800cb38:	e7df      	b.n	800cafa <_realloc_r+0x1e>

0800cb3a <_raise_r>:
 800cb3a:	291f      	cmp	r1, #31
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	d904      	bls.n	800cb4e <_raise_r+0x14>
 800cb44:	2316      	movs	r3, #22
 800cb46:	6003      	str	r3, [r0, #0]
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb50:	b112      	cbz	r2, 800cb58 <_raise_r+0x1e>
 800cb52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb56:	b94b      	cbnz	r3, 800cb6c <_raise_r+0x32>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 f831 	bl	800cbc0 <_getpid_r>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4601      	mov	r1, r0
 800cb62:	4620      	mov	r0, r4
 800cb64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb68:	f000 b818 	b.w	800cb9c <_kill_r>
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d00a      	beq.n	800cb86 <_raise_r+0x4c>
 800cb70:	1c59      	adds	r1, r3, #1
 800cb72:	d103      	bne.n	800cb7c <_raise_r+0x42>
 800cb74:	2316      	movs	r3, #22
 800cb76:	6003      	str	r3, [r0, #0]
 800cb78:	2001      	movs	r0, #1
 800cb7a:	e7e7      	b.n	800cb4c <_raise_r+0x12>
 800cb7c:	2400      	movs	r4, #0
 800cb7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb82:	4628      	mov	r0, r5
 800cb84:	4798      	blx	r3
 800cb86:	2000      	movs	r0, #0
 800cb88:	e7e0      	b.n	800cb4c <_raise_r+0x12>
	...

0800cb8c <raise>:
 800cb8c:	4b02      	ldr	r3, [pc, #8]	; (800cb98 <raise+0xc>)
 800cb8e:	4601      	mov	r1, r0
 800cb90:	6818      	ldr	r0, [r3, #0]
 800cb92:	f7ff bfd2 	b.w	800cb3a <_raise_r>
 800cb96:	bf00      	nop
 800cb98:	200000ac 	.word	0x200000ac

0800cb9c <_kill_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	4d07      	ldr	r5, [pc, #28]	; (800cbbc <_kill_r+0x20>)
 800cba0:	2300      	movs	r3, #0
 800cba2:	4604      	mov	r4, r0
 800cba4:	4608      	mov	r0, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	602b      	str	r3, [r5, #0]
 800cbaa:	f7f9 fc9d 	bl	80064e8 <_kill>
 800cbae:	1c43      	adds	r3, r0, #1
 800cbb0:	d102      	bne.n	800cbb8 <_kill_r+0x1c>
 800cbb2:	682b      	ldr	r3, [r5, #0]
 800cbb4:	b103      	cbz	r3, 800cbb8 <_kill_r+0x1c>
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	bd38      	pop	{r3, r4, r5, pc}
 800cbba:	bf00      	nop
 800cbbc:	20002b68 	.word	0x20002b68

0800cbc0 <_getpid_r>:
 800cbc0:	f7f9 bc8a 	b.w	80064d8 <_getpid>

0800cbc4 <__sread>:
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbcc:	f000 f89c 	bl	800cd08 <_read_r>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	bfab      	itete	ge
 800cbd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbd6:	89a3      	ldrhlt	r3, [r4, #12]
 800cbd8:	181b      	addge	r3, r3, r0
 800cbda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbde:	bfac      	ite	ge
 800cbe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbe2:	81a3      	strhlt	r3, [r4, #12]
 800cbe4:	bd10      	pop	{r4, pc}

0800cbe6 <__swrite>:
 800cbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbea:	461f      	mov	r7, r3
 800cbec:	898b      	ldrh	r3, [r1, #12]
 800cbee:	05db      	lsls	r3, r3, #23
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	4616      	mov	r6, r2
 800cbf6:	d505      	bpl.n	800cc04 <__swrite+0x1e>
 800cbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f000 f868 	bl	800ccd4 <_lseek_r>
 800cc04:	89a3      	ldrh	r3, [r4, #12]
 800cc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	4632      	mov	r2, r6
 800cc12:	463b      	mov	r3, r7
 800cc14:	4628      	mov	r0, r5
 800cc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc1a:	f000 b817 	b.w	800cc4c <_write_r>

0800cc1e <__sseek>:
 800cc1e:	b510      	push	{r4, lr}
 800cc20:	460c      	mov	r4, r1
 800cc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc26:	f000 f855 	bl	800ccd4 <_lseek_r>
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	bf15      	itete	ne
 800cc30:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc3a:	81a3      	strheq	r3, [r4, #12]
 800cc3c:	bf18      	it	ne
 800cc3e:	81a3      	strhne	r3, [r4, #12]
 800cc40:	bd10      	pop	{r4, pc}

0800cc42 <__sclose>:
 800cc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc46:	f000 b813 	b.w	800cc70 <_close_r>
	...

0800cc4c <_write_r>:
 800cc4c:	b538      	push	{r3, r4, r5, lr}
 800cc4e:	4d07      	ldr	r5, [pc, #28]	; (800cc6c <_write_r+0x20>)
 800cc50:	4604      	mov	r4, r0
 800cc52:	4608      	mov	r0, r1
 800cc54:	4611      	mov	r1, r2
 800cc56:	2200      	movs	r2, #0
 800cc58:	602a      	str	r2, [r5, #0]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	f7f9 fc7b 	bl	8006556 <_write>
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	d102      	bne.n	800cc6a <_write_r+0x1e>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	b103      	cbz	r3, 800cc6a <_write_r+0x1e>
 800cc68:	6023      	str	r3, [r4, #0]
 800cc6a:	bd38      	pop	{r3, r4, r5, pc}
 800cc6c:	20002b68 	.word	0x20002b68

0800cc70 <_close_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4d06      	ldr	r5, [pc, #24]	; (800cc8c <_close_r+0x1c>)
 800cc74:	2300      	movs	r3, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	4608      	mov	r0, r1
 800cc7a:	602b      	str	r3, [r5, #0]
 800cc7c:	f7f9 fc87 	bl	800658e <_close>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_close_r+0x1a>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_close_r+0x1a>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	20002b68 	.word	0x20002b68

0800cc90 <_fstat_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d07      	ldr	r5, [pc, #28]	; (800ccb0 <_fstat_r+0x20>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	f7f9 fc82 	bl	80065a6 <_fstat>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d102      	bne.n	800ccac <_fstat_r+0x1c>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	b103      	cbz	r3, 800ccac <_fstat_r+0x1c>
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop
 800ccb0:	20002b68 	.word	0x20002b68

0800ccb4 <_isatty_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	; (800ccd0 <_isatty_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f9 fc81 	bl	80065c6 <_isatty>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_isatty_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_isatty_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	20002b68 	.word	0x20002b68

0800ccd4 <_lseek_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d07      	ldr	r5, [pc, #28]	; (800ccf4 <_lseek_r+0x20>)
 800ccd8:	4604      	mov	r4, r0
 800ccda:	4608      	mov	r0, r1
 800ccdc:	4611      	mov	r1, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	602a      	str	r2, [r5, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	f7f9 fc7a 	bl	80065dc <_lseek>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d102      	bne.n	800ccf2 <_lseek_r+0x1e>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	b103      	cbz	r3, 800ccf2 <_lseek_r+0x1e>
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}
 800ccf4:	20002b68 	.word	0x20002b68

0800ccf8 <_malloc_usable_size_r>:
 800ccf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccfc:	1f18      	subs	r0, r3, #4
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bfbc      	itt	lt
 800cd02:	580b      	ldrlt	r3, [r1, r0]
 800cd04:	18c0      	addlt	r0, r0, r3
 800cd06:	4770      	bx	lr

0800cd08 <_read_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	; (800cd28 <_read_r+0x20>)
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	4608      	mov	r0, r1
 800cd10:	4611      	mov	r1, r2
 800cd12:	2200      	movs	r2, #0
 800cd14:	602a      	str	r2, [r5, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	f7f9 fc00 	bl	800651c <_read>
 800cd1c:	1c43      	adds	r3, r0, #1
 800cd1e:	d102      	bne.n	800cd26 <_read_r+0x1e>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	b103      	cbz	r3, 800cd26 <_read_r+0x1e>
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	20002b68 	.word	0x20002b68

0800cd2c <_init>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	bf00      	nop
 800cd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd32:	bc08      	pop	{r3}
 800cd34:	469e      	mov	lr, r3
 800cd36:	4770      	bx	lr

0800cd38 <_fini>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	bf00      	nop
 800cd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd3e:	bc08      	pop	{r3}
 800cd40:	469e      	mov	lr, r3
 800cd42:	4770      	bx	lr
