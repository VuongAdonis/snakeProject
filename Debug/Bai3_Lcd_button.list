
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fac  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed8c  0800ed8c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed94  0800ed94  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed94  0800ed94  0001ed94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed98  0800ed98  0001ed98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800ed9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00002984  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a94  20002a94  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d89  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f9f  00000000  00000000  00045ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0004ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001370  00000000  00000000  0004c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d2d  00000000  00000000  0004d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f325  00000000  00000000  000744a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36e6  00000000  00000000  000937ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00166eb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000613c  00000000  00000000  00166f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adc8 	.word	0x0800adc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800adc8 	.word	0x0800adc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b095      	sub	sp, #84	; 0x54
 800057c:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 800057e:	2000      	movs	r0, #0
 8000580:	f001 f9f0 	bl	8001964 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8000584:	4bb0      	ldr	r3, [pc, #704]	; (8000848 <setupAdvance+0x2d0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	b298      	uxth	r0, r3
 800058a:	4bb0      	ldr	r3, [pc, #704]	; (800084c <setupAdvance+0x2d4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	b299      	uxth	r1, r3
 8000590:	4baf      	ldr	r3, [pc, #700]	; (8000850 <setupAdvance+0x2d8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b29a      	uxth	r2, r3
 8000596:	4baf      	ldr	r3, [pc, #700]	; (8000854 <setupAdvance+0x2dc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b29b      	uxth	r3, r3
 800059c:	4cae      	ldr	r4, [pc, #696]	; (8000858 <setupAdvance+0x2e0>)
 800059e:	9400      	str	r4, [sp, #0]
 80005a0:	f001 fbea 	bl	8001d78 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80005a4:	2300      	movs	r3, #0
 80005a6:	9302      	str	r3, [sp, #8]
 80005a8:	2318      	movs	r3, #24
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	f248 4330 	movw	r3, #33840	; 0x8430
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	4aa9      	ldr	r2, [pc, #676]	; (800085c <setupAdvance+0x2e4>)
 80005b8:	2137      	movs	r1, #55	; 0x37
 80005ba:	203c      	movs	r0, #60	; 0x3c
 80005bc:	f001 fdb6 	bl	800212c <lcd_ShowStr>

	char str1[50] = " ID: ";
 80005c0:	4aa7      	ldr	r2, [pc, #668]	; (8000860 <setupAdvance+0x2e8>)
 80005c2:	463b      	mov	r3, r7
 80005c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c8:	6018      	str	r0, [r3, #0]
 80005ca:	3304      	adds	r3, #4
 80005cc:	8019      	strh	r1, [r3, #0]
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	222c      	movs	r2, #44	; 0x2c
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f009 f9ab 	bl	8009930 <memset>
	char *str2 = convert2str(ID);
 80005da:	4ba2      	ldr	r3, [pc, #648]	; (8000864 <setupAdvance+0x2ec>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 f8ac 	bl	800273c <convert2str>
 80005e4:	4603      	mov	r3, r0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80005e8:	463b      	mov	r3, r7
 80005ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005ec:	4618      	mov	r0, r3
 80005ee:	f009 fa49 	bl	8009a84 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80005f2:	463a      	mov	r2, r7
 80005f4:	2300      	movs	r3, #0
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2318      	movs	r3, #24
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	f248 4330 	movw	r3, #33840	; 0x8430
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000606:	2164      	movs	r1, #100	; 0x64
 8000608:	2000      	movs	r0, #0
 800060a:	f001 fdf3 	bl	80021f4 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800060e:	2300      	movs	r3, #0
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2318      	movs	r3, #24
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	f248 4330 	movw	r3, #33840	; 0x8430
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	4a91      	ldr	r2, [pc, #580]	; (8000868 <setupAdvance+0x2f0>)
 8000622:	2196      	movs	r1, #150	; 0x96
 8000624:	2000      	movs	r0, #0
 8000626:	f001 fde5 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 800062a:	2300      	movs	r3, #0
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	2318      	movs	r3, #24
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	f248 4330 	movw	r3, #33840	; 0x8430
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063c:	4a8b      	ldr	r2, [pc, #556]	; (800086c <setupAdvance+0x2f4>)
 800063e:	21d7      	movs	r1, #215	; 0xd7
 8000640:	2014      	movs	r0, #20
 8000642:	f001 fd73 	bl	800212c <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8000646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	23f0      	movs	r3, #240	; 0xf0
 800064e:	22c8      	movs	r2, #200	; 0xc8
 8000650:	21d2      	movs	r1, #210	; 0xd2
 8000652:	2096      	movs	r0, #150	; 0x96
 8000654:	f001 fa89 	bl	8001b6a <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8000658:	4b85      	ldr	r3, [pc, #532]	; (8000870 <setupAdvance+0x2f8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f002 f86d 	bl	800273c <convert2str>
 8000662:	4603      	mov	r3, r0
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8000666:	4b82      	ldr	r3, [pc, #520]	; (8000870 <setupAdvance+0x2f8>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2b77      	cmp	r3, #119	; 0x77
 800066c:	d80e      	bhi.n	800068c <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 800066e:	2301      	movs	r3, #1
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2318      	movs	r3, #24
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f248 4330 	movw	r3, #33840	; 0x8430
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000682:	21d4      	movs	r1, #212	; 0xd4
 8000684:	20a5      	movs	r0, #165	; 0xa5
 8000686:	f001 fd51 	bl	800212c <lcd_ShowStr>
 800068a:	e00d      	b.n	80006a8 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 800068c:	2301      	movs	r3, #1
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	2318      	movs	r3, #24
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	f248 4330 	movw	r3, #33840	; 0x8430
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006a0:	21d4      	movs	r1, #212	; 0xd4
 80006a2:	209d      	movs	r0, #157	; 0x9d
 80006a4:	f001 fd42 	bl	800212c <lcd_ShowStr>
	}

	if(TIMING < 120)
 80006a8:	4b71      	ldr	r3, [pc, #452]	; (8000870 <setupAdvance+0x2f8>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b77      	cmp	r3, #119	; 0x77
 80006ae:	d81a      	bhi.n	80006e6 <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80006b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	23dc      	movs	r3, #220	; 0xdc
 80006b8:	22e1      	movs	r2, #225	; 0xe1
 80006ba:	21dc      	movs	r1, #220	; 0xdc
 80006bc:	20cd      	movs	r0, #205	; 0xcd
 80006be:	f001 f9d0 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 80006c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	23d2      	movs	r3, #210	; 0xd2
 80006ca:	22d7      	movs	r2, #215	; 0xd7
 80006cc:	21dc      	movs	r1, #220	; 0xdc
 80006ce:	20cd      	movs	r0, #205	; 0xcd
 80006d0:	f001 f9c7 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 80006d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	23d2      	movs	r3, #210	; 0xd2
 80006dc:	22d7      	movs	r2, #215	; 0xd7
 80006de:	21dc      	movs	r1, #220	; 0xdc
 80006e0:	20e1      	movs	r0, #225	; 0xe1
 80006e2:	f001 f9be 	bl	8001a62 <lcd_DrawLine>
	}
	if(TIMING > 30)
 80006e6:	4b62      	ldr	r3, [pc, #392]	; (8000870 <setupAdvance+0x2f8>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	2b1e      	cmp	r3, #30
 80006ec:	d91a      	bls.n	8000724 <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	23e6      	movs	r3, #230	; 0xe6
 80006f6:	22e1      	movs	r2, #225	; 0xe1
 80006f8:	21e6      	movs	r1, #230	; 0xe6
 80006fa:	20cd      	movs	r0, #205	; 0xcd
 80006fc:	f001 f9b1 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 8000700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	23f0      	movs	r3, #240	; 0xf0
 8000708:	22d7      	movs	r2, #215	; 0xd7
 800070a:	21e6      	movs	r1, #230	; 0xe6
 800070c:	20cd      	movs	r0, #205	; 0xcd
 800070e:	f001 f9a8 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	23f0      	movs	r3, #240	; 0xf0
 800071a:	22d7      	movs	r2, #215	; 0xd7
 800071c:	21e6      	movs	r1, #230	; 0xe6
 800071e:	20e1      	movs	r0, #225	; 0xe1
 8000720:	f001 f99f 	bl	8001a62 <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 8000724:	2300      	movs	r3, #0
 8000726:	9302      	str	r3, [sp, #8]
 8000728:	2318      	movs	r3, #24
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	f248 4330 	movw	r3, #33840	; 0x8430
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	4a4f      	ldr	r2, [pc, #316]	; (8000874 <setupAdvance+0x2fc>)
 8000738:	f240 1109 	movw	r1, #265	; 0x109
 800073c:	2014      	movs	r0, #20
 800073e:	f001 fcf5 	bl	800212c <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 8000742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	f44f 7391 	mov.w	r3, #290	; 0x122
 800074c:	22c8      	movs	r2, #200	; 0xc8
 800074e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000752:	2096      	movs	r0, #150	; 0x96
 8000754:	f001 fa09 	bl	8001b6a <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 8000758:	4b47      	ldr	r3, [pc, #284]	; (8000878 <setupAdvance+0x300>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f001 ffed 	bl	800273c <convert2str>
 8000762:	4603      	mov	r3, r0
 8000764:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 8000766:	4b44      	ldr	r3, [pc, #272]	; (8000878 <setupAdvance+0x300>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2b09      	cmp	r3, #9
 800076c:	d80f      	bhi.n	800078e <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 800076e:	2301      	movs	r3, #1
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	2318      	movs	r3, #24
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	f248 4330 	movw	r3, #33840	; 0x8430
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000782:	f240 1109 	movw	r1, #265	; 0x109
 8000786:	20aa      	movs	r0, #170	; 0xaa
 8000788:	f001 fcd0 	bl	800212c <lcd_ShowStr>
 800078c:	e00e      	b.n	80007ac <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 800078e:	2301      	movs	r3, #1
 8000790:	9302      	str	r3, [sp, #8]
 8000792:	2318      	movs	r3, #24
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	f248 4330 	movw	r3, #33840	; 0x8430
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007a2:	f240 1109 	movw	r1, #265	; 0x109
 80007a6:	20a5      	movs	r0, #165	; 0xa5
 80007a8:	f001 fcc0 	bl	800212c <lcd_ShowStr>
	}

	if(WALL < 30)
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <setupAdvance+0x300>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	2b1d      	cmp	r3, #29
 80007b2:	d820      	bhi.n	80007f6 <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80007b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007be:	22e1      	movs	r2, #225	; 0xe1
 80007c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007c4:	20cd      	movs	r0, #205	; 0xcd
 80007c6:	f001 f94c 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 80007ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007d4:	22d7      	movs	r2, #215	; 0xd7
 80007d6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007da:	20cd      	movs	r0, #205	; 0xcd
 80007dc:	f001 f941 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 80007e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007ea:	22d7      	movs	r2, #215	; 0xd7
 80007ec:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007f0:	20e1      	movs	r0, #225	; 0xe1
 80007f2:	f001 f936 	bl	8001a62 <lcd_DrawLine>
	}
	if(WALL > 0)
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <setupAdvance+0x300>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d020      	beq.n	8000840 <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 80007fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000808:	22e1      	movs	r2, #225	; 0xe1
 800080a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800080e:	20cd      	movs	r0, #205	; 0xcd
 8000810:	f001 f927 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	f44f 7391 	mov.w	r3, #290	; 0x122
 800081e:	22d7      	movs	r2, #215	; 0xd7
 8000820:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000824:	20cd      	movs	r0, #205	; 0xcd
 8000826:	f001 f91c 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 800082a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000834:	22d7      	movs	r2, #215	; 0xd7
 8000836:	f44f 718c 	mov.w	r1, #280	; 0x118
 800083a:	20e1      	movs	r0, #225	; 0xe1
 800083c:	f001 f911 	bl	8001a62 <lcd_DrawLine>
	}
}
 8000840:	bf00      	nop
 8000842:	3744      	adds	r7, #68	; 0x44
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	20000074 	.word	0x20000074
 800084c:	20000078 	.word	0x20000078
 8000850:	2000007c 	.word	0x2000007c
 8000854:	20000080 	.word	0x20000080
 8000858:	0800dff8 	.word	0x0800dff8
 800085c:	0800ade0 	.word	0x0800ade0
 8000860:	0800ae10 	.word	0x0800ae10
 8000864:	20000134 	.word	0x20000134
 8000868:	0800adf0 	.word	0x0800adf0
 800086c:	0800ae00 	.word	0x0800ae00
 8000870:	20000000 	.word	0x20000000
 8000874:	0800ae08 	.word	0x0800ae08
 8000878:	20000138 	.word	0x20000138

0800087c <initAdvanceMode>:

void initAdvanceMode()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <initAdvanceMode+0x94>)
 8000882:	88db      	ldrh	r3, [r3, #6]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d10e      	bne.n	80008a6 <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <initAdvanceMode+0x98>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	331e      	adds	r3, #30
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <initAdvanceMode+0x98>)
 8000892:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <initAdvanceMode+0x98>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	2b78      	cmp	r3, #120	; 0x78
 800089a:	d902      	bls.n	80008a2 <initAdvanceMode+0x26>
		{
			TIMING = 120;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <initAdvanceMode+0x98>)
 800089e:	2278      	movs	r2, #120	; 0x78
 80008a0:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008a2:	f7ff fe69 	bl	8000578 <setupAdvance>
	}
	if(button_count[7] == 1)
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <initAdvanceMode+0x94>)
 80008a8:	89db      	ldrh	r3, [r3, #14]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d10e      	bne.n	80008cc <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <initAdvanceMode+0x98>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	3b1e      	subs	r3, #30
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <initAdvanceMode+0x98>)
 80008b8:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <initAdvanceMode+0x98>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	2b1d      	cmp	r3, #29
 80008c0:	d802      	bhi.n	80008c8 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <initAdvanceMode+0x98>)
 80008c4:	221e      	movs	r2, #30
 80008c6:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008c8:	f7ff fe56 	bl	8000578 <setupAdvance>
	}
	if(button_count[11] == 1)
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <initAdvanceMode+0x94>)
 80008ce:	8adb      	ldrh	r3, [r3, #22]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10e      	bne.n	80008f2 <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <initAdvanceMode+0x9c>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	3305      	adds	r3, #5
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <initAdvanceMode+0x9c>)
 80008de:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <initAdvanceMode+0x9c>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2b1e      	cmp	r3, #30
 80008e6:	d902      	bls.n	80008ee <initAdvanceMode+0x72>
		{
			WALL = 30;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <initAdvanceMode+0x9c>)
 80008ea:	221e      	movs	r2, #30
 80008ec:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008ee:	f7ff fe43 	bl	8000578 <setupAdvance>
	}
	if(button_count[15] == 1)
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <initAdvanceMode+0x94>)
 80008f4:	8bdb      	ldrh	r3, [r3, #30]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d107      	bne.n	800090a <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <initAdvanceMode+0x9c>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	3b05      	subs	r3, #5
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <initAdvanceMode+0x9c>)
 8000904:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000906:	f7ff fe37 	bl	8000578 <setupAdvance>
	}
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001a8 	.word	0x200001a8
 8000914:	20000000 	.word	0x20000000
 8000918:	20000138 	.word	0x20000138

0800091c <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	2108      	movs	r1, #8
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <button_init+0x38>)
 8000928:	f006 f834 	bl	8006994 <HAL_GPIO_WritePin>
	for (int i= 0; i < 6; i++)
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	e007      	b.n	8000942 <button_init+0x26>
	{
		buttonForSnake[i]= 0;
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <button_init+0x3c>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2100      	movs	r1, #0
 8000938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i= 0; i < 6; i++)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b05      	cmp	r3, #5
 8000946:	ddf4      	ble.n	8000932 <button_init+0x16>
	}
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020c00 	.word	0x40020c00
 8000958:	2000019c 	.word	0x2000019c

0800095c <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	4851      	ldr	r0, [pc, #324]	; (8000aac <button_Scan+0x150>)
 8000968:	f006 f814 	bl	8006994 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	2108      	movs	r1, #8
 8000970:	484e      	ldr	r0, [pc, #312]	; (8000aac <button_Scan+0x150>)
 8000972:	f006 f80f 	bl	8006994 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000976:	230a      	movs	r3, #10
 8000978:	2202      	movs	r2, #2
 800097a:	494d      	ldr	r1, [pc, #308]	; (8000ab0 <button_Scan+0x154>)
 800097c:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <button_Scan+0x158>)
 800097e:	f006 fe5c 	bl	800763a <HAL_SPI_Receive>
	  int button_index = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	e083      	b.n	8000a9a <button_Scan+0x13e>
		  if(i >= 0 && i <= 3){   /// 4 --> 7
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db06      	blt.n	80009a6 <button_Scan+0x4a>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	dc03      	bgt.n	80009a6 <button_Scan+0x4a>
			  button_index = i + 4;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3304      	adds	r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e018      	b.n	80009d8 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	dd07      	ble.n	80009bc <button_Scan+0x60>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	dc04      	bgt.n	80009bc <button_Scan+0x60>
			  button_index = 7 - i;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f1c3 0307 	rsb	r3, r3, #7
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e00d      	b.n	80009d8 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	dd06      	ble.n	80009d0 <button_Scan+0x74>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0b      	cmp	r3, #11
 80009c6:	dc03      	bgt.n	80009d0 <button_Scan+0x74>
			  button_index = i + 4;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3304      	adds	r3, #4
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e003      	b.n	80009d8 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f1c3 0317 	rsb	r3, r3, #23
 80009d6:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80009d8:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <button_Scan+0x154>)
 80009da:	881a      	ldrh	r2, [r3, #0]
 80009dc:	897b      	ldrh	r3, [r7, #10]
 80009de:	4013      	ands	r3, r2
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <button_Scan+0x96>
 80009e6:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <button_Scan+0x15c>)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2100      	movs	r1, #0
 80009ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009f0:	e04d      	b.n	8000a8e <button_Scan+0x132>
		  else 
	  	  {
				button_count[button_index]++;
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <button_Scan+0x15c>)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b299      	uxth	r1, r3
 80009fe:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <button_Scan+0x15c>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3b05      	subs	r3, #5
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	d83e      	bhi.n	8000a8c <button_Scan+0x130>
 8000a0e:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <button_Scan+0xb8>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000a39 	.word	0x08000a39
 8000a18:	08000a8d 	.word	0x08000a8d
 8000a1c:	08000a8d 	.word	0x08000a8d
 8000a20:	08000a47 	.word	0x08000a47
 8000a24:	08000a55 	.word	0x08000a55
 8000a28:	08000a63 	.word	0x08000a63
 8000a2c:	08000a8d 	.word	0x08000a8d
 8000a30:	08000a71 	.word	0x08000a71
 8000a34:	08000a7f 	.word	0x08000a7f
				switch (button_index)
				{
				case 5:
					buttonForSnake[0]++;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <button_Scan+0x160>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <button_Scan+0x160>)
 8000a42:	801a      	strh	r2, [r3, #0]
					break;
 8000a44:	e023      	b.n	8000a8e <button_Scan+0x132>
				case 8:
					buttonForSnake[1]++;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <button_Scan+0x160>)
 8000a48:	885b      	ldrh	r3, [r3, #2]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <button_Scan+0x160>)
 8000a50:	805a      	strh	r2, [r3, #2]
					break;
 8000a52:	e01c      	b.n	8000a8e <button_Scan+0x132>
				case 9:
					buttonForSnake[2]++;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <button_Scan+0x160>)
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <button_Scan+0x160>)
 8000a5e:	809a      	strh	r2, [r3, #4]
					break;
 8000a60:	e015      	b.n	8000a8e <button_Scan+0x132>
				case 10:
					buttonForSnake[3]++;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <button_Scan+0x160>)
 8000a64:	88db      	ldrh	r3, [r3, #6]
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <button_Scan+0x160>)
 8000a6c:	80da      	strh	r2, [r3, #6]
					break;
 8000a6e:	e00e      	b.n	8000a8e <button_Scan+0x132>
				case 12:
					buttonForSnake[4]++;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <button_Scan+0x160>)
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <button_Scan+0x160>)
 8000a7a:	811a      	strh	r2, [r3, #8]
					break;
 8000a7c:	e007      	b.n	8000a8e <button_Scan+0x132>
				case 13:
					buttonForSnake[5]++;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <button_Scan+0x160>)
 8000a80:	895b      	ldrh	r3, [r3, #10]
 8000a82:	3301      	adds	r3, #1
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <button_Scan+0x160>)
 8000a88:	815a      	strh	r2, [r3, #10]
					break;
 8000a8a:	e000      	b.n	8000a8e <button_Scan+0x132>
				default:
					break;
 8000a8c:	bf00      	nop
				}
		  }
		  mask = mask >> 1;
 8000a8e:	897b      	ldrh	r3, [r7, #10]
 8000a90:	085b      	lsrs	r3, r3, #1
 8000a92:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	f77f af78 	ble.w	8000992 <button_Scan+0x36>
	  }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	2000012c 	.word	0x2000012c
 8000ab4:	2000299c 	.word	0x2000299c
 8000ab8:	200001a8 	.word	0x200001a8
 8000abc:	2000019c 	.word	0x2000019c

08000ac0 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <showNotifyExit+0xbc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	3305      	adds	r3, #5
 8000ace:	b299      	uxth	r1, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9302      	str	r3, [sp, #8]
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <showNotifyExit+0xc0>)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f001 fb86 	bl	80021f4 <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <showNotifyExit+0xbc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3314      	adds	r3, #20
 8000af0:	b299      	uxth	r1, r3
 8000af2:	2300      	movs	r3, #0
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	2310      	movs	r3, #16
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	2300      	movs	r3, #0
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b02:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <showNotifyExit+0xc4>)
 8000b04:	2000      	movs	r0, #0
 8000b06:	f001 fb75 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <showNotifyExit+0xc8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3308      	adds	r3, #8
 8000b12:	b298      	uxth	r0, r3
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <showNotifyExit+0xbc>)
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <showNotifyExit+0xbc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	0fda      	lsrs	r2, r3, #31
 8000b20:	4413      	add	r3, r2
 8000b22:	105b      	asrs	r3, r3, #1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b14      	subs	r3, #20
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2310      	movs	r3, #16
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	f248 4330 	movw	r3, #33840	; 0x8430
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <showNotifyExit+0xcc>)
 8000b3c:	f001 faf6 	bl	800212c <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <showNotifyExit+0xc8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	3308      	adds	r3, #8
 8000b48:	b298      	uxth	r0, r3
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <showNotifyExit+0xbc>)
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <showNotifyExit+0xbc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	0fda      	lsrs	r2, r3, #31
 8000b56:	4413      	add	r3, r2
 8000b58:	105b      	asrs	r3, r3, #1
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	3319      	adds	r3, #25
 8000b5e:	b299      	uxth	r1, r3
 8000b60:	2301      	movs	r3, #1
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	2310      	movs	r3, #16
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	f248 4330 	movw	r3, #33840	; 0x8430
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <showNotifyExit+0xd0>)
 8000b72:	f001 fadb 	bl	800212c <lcd_ShowStr>
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000004c 	.word	0x2000004c
 8000b80:	0800ae44 	.word	0x0800ae44
 8000b84:	0800ae50 	.word	0x0800ae50
 8000b88:	2000003c 	.word	0x2000003c
 8000b8c:	0800ae5c 	.word	0x0800ae5c
 8000b90:	0800ae60 	.word	0x0800ae60

08000b94 <drawArrowExit>:

void drawArrowExit()
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <drawArrowExit+0x168>)
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <drawArrowExit+0x168>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	0fda      	lsrs	r2, r3, #31
 8000ba6:	4413      	add	r3, r2
 8000ba8:	105b      	asrs	r3, r3, #1
 8000baa:	3b08      	subs	r3, #8
 8000bac:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8000bae:	4b53      	ldr	r3, [pc, #332]	; (8000cfc <drawArrowExit+0x168>)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <drawArrowExit+0x168>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	0fda      	lsrs	r2, r3, #31
 8000bba:	4413      	add	r3, r2
 8000bbc:	105b      	asrs	r3, r3, #1
 8000bbe:	331c      	adds	r3, #28
 8000bc0:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 8000bc2:	4b4f      	ldr	r3, [pc, #316]	; (8000d00 <drawArrowExit+0x16c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d003      	beq.n	8000bd2 <drawArrowExit+0x3e>
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	f000 80a2 	beq.w	8000d14 <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8000bd0:	e135      	b.n	8000e3e <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000bd2:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <drawArrowExit+0x170>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <drawArrowExit+0x174>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b298      	uxth	r0, r3
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <drawArrowExit+0x168>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	3323      	adds	r3, #35	; 0x23
 8000bea:	b299      	uxth	r1, r3
 8000bec:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <drawArrowExit+0x170>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b45      	ldr	r3, [pc, #276]	; (8000d08 <drawArrowExit+0x174>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <drawArrowExit+0x168>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3b05      	subs	r3, #5
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	f248 4430 	movw	r4, #33840	; 0x8430
 8000c0a:	9400      	str	r4, [sp, #0]
 8000c0c:	f000 fedc 	bl	80019c8 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <drawArrowExit+0x170>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3308      	adds	r3, #8
 8000c18:	b298      	uxth	r0, r3
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <drawArrowExit+0x168>)
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <drawArrowExit+0x168>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	0fda      	lsrs	r2, r3, #31
 8000c26:	4413      	add	r3, r2
 8000c28:	105b      	asrs	r3, r3, #1
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b0f      	subs	r3, #15
 8000c2e:	b299      	uxth	r1, r3
 8000c30:	2301      	movs	r3, #1
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2310      	movs	r3, #16
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f248 4330 	movw	r3, #33840	; 0x8430
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c42:	4a32      	ldr	r2, [pc, #200]	; (8000d0c <drawArrowExit+0x178>)
 8000c44:	f001 fa72 	bl	800212c <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <drawArrowExit+0x170>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	3308      	adds	r3, #8
 8000c50:	b298      	uxth	r0, r3
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <drawArrowExit+0x168>)
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <drawArrowExit+0x168>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	0fda      	lsrs	r2, r3, #31
 8000c5e:	4413      	add	r3, r2
 8000c60:	105b      	asrs	r3, r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	3314      	adds	r3, #20
 8000c66:	b299      	uxth	r1, r3
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f248 4330 	movw	r3, #33840	; 0x8430
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <drawArrowExit+0x17c>)
 8000c7a:	f001 fa57 	bl	800212c <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <drawArrowExit+0x170>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3b0f      	subs	r3, #15
 8000c86:	b298      	uxth	r0, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <drawArrowExit+0x170>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3b0a      	subs	r3, #10
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	3b05      	subs	r3, #5
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	9400      	str	r4, [sp, #0]
 8000ca2:	f000 fede 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <drawArrowExit+0x170>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3b0f      	subs	r3, #15
 8000cae:	b298      	uxth	r0, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <drawArrowExit+0x170>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3b0a      	subs	r3, #10
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3305      	adds	r3, #5
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	9400      	str	r4, [sp, #0]
 8000cca:	f000 feca 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <drawArrowExit+0x170>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	3b0a      	subs	r3, #10
 8000cd6:	b298      	uxth	r0, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3b05      	subs	r3, #5
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <drawArrowExit+0x170>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3b0a      	subs	r3, #10
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3305      	adds	r3, #5
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2400      	movs	r4, #0
 8000cf4:	9400      	str	r4, [sp, #0]
 8000cf6:	f000 feb4 	bl	8001a62 <lcd_DrawLine>
		break;
 8000cfa:	e0a0      	b.n	8000e3e <drawArrowExit+0x2aa>
 8000cfc:	2000004c 	.word	0x2000004c
 8000d00:	20000060 	.word	0x20000060
 8000d04:	2000003c 	.word	0x2000003c
 8000d08:	20000038 	.word	0x20000038
 8000d0c:	0800ae5c 	.word	0x0800ae5c
 8000d10:	0800ae60 	.word	0x0800ae60
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000d14:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <drawArrowExit+0x2b4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	; (8000e4c <drawArrowExit+0x2b8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	b298      	uxth	r0, r3
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <drawArrowExit+0x2bc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3323      	adds	r3, #35	; 0x23
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <drawArrowExit+0x2b4>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b45      	ldr	r3, [pc, #276]	; (8000e4c <drawArrowExit+0x2b8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <drawArrowExit+0x2bc>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3b05      	subs	r3, #5
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	f248 4430 	movw	r4, #33840	; 0x8430
 8000d4c:	9400      	str	r4, [sp, #0]
 8000d4e:	f000 fe3b 	bl	80019c8 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <drawArrowExit+0x2b4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	3308      	adds	r3, #8
 8000d5a:	b298      	uxth	r0, r3
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <drawArrowExit+0x2bc>)
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <drawArrowExit+0x2bc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	0fda      	lsrs	r2, r3, #31
 8000d68:	4413      	add	r3, r2
 8000d6a:	105b      	asrs	r3, r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3b0f      	subs	r3, #15
 8000d70:	b299      	uxth	r1, r3
 8000d72:	2301      	movs	r3, #1
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2310      	movs	r3, #16
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f248 4330 	movw	r3, #33840	; 0x8430
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <drawArrowExit+0x2c0>)
 8000d84:	f001 f9d2 	bl	800212c <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <drawArrowExit+0x2b4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	3308      	adds	r3, #8
 8000d90:	b298      	uxth	r0, r3
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <drawArrowExit+0x2bc>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <drawArrowExit+0x2bc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	0fda      	lsrs	r2, r3, #31
 8000d9e:	4413      	add	r3, r2
 8000da0:	105b      	asrs	r3, r3, #1
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3314      	adds	r3, #20
 8000da6:	b299      	uxth	r1, r3
 8000da8:	2301      	movs	r3, #1
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2310      	movs	r3, #16
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	f248 4330 	movw	r3, #33840	; 0x8430
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <drawArrowExit+0x2c4>)
 8000dbc:	f001 f9b6 	bl	800212c <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <drawArrowExit+0x2b4>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	3b0f      	subs	r3, #15
 8000dc8:	b298      	uxth	r0, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <drawArrowExit+0x2b4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3b0a      	subs	r3, #10
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3b05      	subs	r3, #5
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2400      	movs	r4, #0
 8000de2:	9400      	str	r4, [sp, #0]
 8000de4:	f000 fe3d 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <drawArrowExit+0x2b4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3b0f      	subs	r3, #15
 8000df0:	b298      	uxth	r0, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b299      	uxth	r1, r3
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <drawArrowExit+0x2b4>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	3b0a      	subs	r3, #10
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3305      	adds	r3, #5
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	2400      	movs	r4, #0
 8000e0a:	9400      	str	r4, [sp, #0]
 8000e0c:	f000 fe29 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <drawArrowExit+0x2b4>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	3b0a      	subs	r3, #10
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	3b05      	subs	r3, #5
 8000e20:	b299      	uxth	r1, r3
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <drawArrowExit+0x2b4>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3b0a      	subs	r3, #10
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3305      	adds	r3, #5
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	2400      	movs	r4, #0
 8000e36:	9400      	str	r4, [sp, #0]
 8000e38:	f000 fe13 	bl	8001a62 <lcd_DrawLine>
		break;
 8000e3c:	bf00      	nop
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	20000038 	.word	0x20000038
 8000e50:	2000004c 	.word	0x2000004c
 8000e54:	0800ae5c 	.word	0x0800ae5c
 8000e58:	0800ae60 	.word	0x0800ae60

08000e5c <gameExitUI>:

void gameExitUI()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	showWallnotify();
 8000e60:	f000 f91e 	bl	80010a0 <showWallnotify>
	showNotifyExit();
 8000e64:	f7ff fe2c 	bl	8000ac0 <showNotifyExit>
	drawArrowExit();
 8000e68:	f7ff fe94 	bl	8000b94 <drawArrowExit>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <askToExit>:

void askToExit()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <askToExit+0x74>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b0a      	cmp	r3, #10
 8000e7a:	d131      	bne.n	8000ee0 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <askToExit+0x78>)
 8000e7e:	88db      	ldrh	r3, [r3, #6]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10c      	bne.n	8000e9e <askToExit+0x2e>
		{
			flagExit = 1;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <askToExit+0x7c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <askToExit+0x80>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d023      	beq.n	8000eda <askToExit+0x6a>
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d104      	bne.n	8000ea0 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <askToExit+0x80>)
 8000e98:	2203      	movs	r2, #3
 8000e9a:	601a      	str	r2, [r3, #0]
				break;
 8000e9c:	e000      	b.n	8000ea0 <askToExit+0x30>
			}
		}
 8000e9e:	bf00      	nop
		if(button_count[7] == 1)
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <askToExit+0x78>)
 8000ea2:	89db      	ldrh	r3, [r3, #14]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10d      	bne.n	8000ec4 <askToExit+0x54>
		{
			flagExit = 1;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <askToExit+0x7c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <askToExit+0x80>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d002      	beq.n	8000ebc <askToExit+0x4c>
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d011      	beq.n	8000ede <askToExit+0x6e>
 8000eba:	e004      	b.n	8000ec6 <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <askToExit+0x80>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	601a      	str	r2, [r3, #0]
				break;
 8000ec2:	e000      	b.n	8000ec6 <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 8000ec4:	bf00      	nop
		if(flagExit == 1)
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <askToExit+0x7c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d108      	bne.n	8000ee0 <askToExit+0x70>
		{
			gameExitUI();
 8000ece:	f7ff ffc5 	bl	8000e5c <gameExitUI>
			flagExit = 0;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <askToExit+0x7c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <askToExit+0x70>
				return;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <askToExit+0x70>
				return;
 8000ede:	bf00      	nop
		}
	}
}
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000148 	.word	0x20000148
 8000ee8:	200001a8 	.word	0x200001a8
 8000eec:	20000158 	.word	0x20000158
 8000ef0:	20000060 	.word	0x20000060

08000ef4 <initExit>:

void initExit()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	gameExitUI();
 8000ef8:	f7ff ffb0 	bl	8000e5c <gameExitUI>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f2c:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f2e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f32:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <MX_FSMC_Init+0xf0>)
 8000f38:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f4e:	2210      	movs	r2, #16
 8000f50:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_FSMC_Init+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000f92:	230f      	movs	r3, #15
 8000f94:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000f96:	230f      	movs	r3, #15
 8000f98:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000f9a:	233c      	movs	r3, #60	; 0x3c
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000fa6:	2311      	movs	r3, #17
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000fb6:	2309      	movs	r3, #9
 8000fb8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000fc2:	2311      	movs	r3, #17
 8000fc4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000fca:	463a      	mov	r2, r7
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_FSMC_Init+0xec>)
 8000fd4:	f006 ff14 	bl	8007e00 <HAL_SRAM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000fde:	f001 fba7 	bl	8002730 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	; 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001c8 	.word	0x200001c8
 8000ff0:	a0000104 	.word	0xa0000104

08000ff4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_FSMC_MspInit+0x88>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d131      	bne.n	8001074 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_FSMC_MspInit+0x88>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_FSMC_MspInit+0x8c>)
 800101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_FSMC_MspInit+0x8c>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6393      	str	r3, [r2, #56]	; 0x38
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_FSMC_MspInit+0x8c>)
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001032:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001036:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001044:	230c      	movs	r3, #12
 8001046:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <HAL_FSMC_MspInit+0x90>)
 800104e:	f005 fb05 	bl	800665c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001052:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001056:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <HAL_FSMC_MspInit+0x94>)
 800106e:	f005 faf5 	bl	800665c <HAL_GPIO_Init>
 8001072:	e000      	b.n	8001076 <HAL_FSMC_MspInit+0x82>
    return;
 8001074:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000130 	.word	0x20000130
 8001080:	40023800 	.word	0x40023800
 8001084:	40021000 	.word	0x40021000
 8001088:	40020c00 	.word	0x40020c00

0800108c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001094:	f7ff ffae 	bl	8000ff4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <showWallnotify>:
#include "main.h"
#include "button.h"
#include "picture.h"

void showWallnotify()
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <showWallnotify+0xe8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b298      	uxth	r0, r3
 80010ac:	4b37      	ldr	r3, [pc, #220]	; (800118c <showWallnotify+0xec>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	b299      	uxth	r1, r3
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <showWallnotify+0xe8>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	b29c      	uxth	r4, r3
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <showWallnotify+0xec>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <showWallnotify+0xf0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f248 4230 	movw	r2, #33840	; 0x8430
 80010cc:	9200      	str	r2, [sp, #0]
 80010ce:	4622      	mov	r2, r4
 80010d0:	f000 fc7a 	bl	80019c8 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <showWallnotify+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b298      	uxth	r0, r3
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <showWallnotify+0xec>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b299      	uxth	r1, r3
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <showWallnotify+0xe8>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b29c      	uxth	r4, r3
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <showWallnotify+0xec>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <showWallnotify+0xf0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9200      	str	r2, [sp, #0]
 80010fa:	4622      	mov	r2, r4
 80010fc:	f000 fc64 	bl	80019c8 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <showWallnotify+0xe8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b298      	uxth	r0, r3
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <showWallnotify+0xec>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b299      	uxth	r1, r3
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <showWallnotify+0xe8>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <showWallnotify+0xf0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4413      	add	r3, r2
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <showWallnotify+0xec>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	b29b      	uxth	r3, r3
 8001122:	2400      	movs	r4, #0
 8001124:	9400      	str	r4, [sp, #0]
 8001126:	f000 fc4f 	bl	80019c8 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <showWallnotify+0xe8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <showWallnotify+0xf0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	b298      	uxth	r0, r3
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <showWallnotify+0xec>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	b299      	uxth	r1, r3
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <showWallnotify+0xe8>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <showWallnotify+0xec>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	b29b      	uxth	r3, r3
 800114c:	2400      	movs	r4, #0
 800114e:	9400      	str	r4, [sp, #0]
 8001150:	f000 fc3a 	bl	80019c8 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <showWallnotify+0xe8>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	b298      	uxth	r0, r3
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <showWallnotify+0xec>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <showWallnotify+0xf0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b299      	uxth	r1, r3
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <showWallnotify+0xe8>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <showWallnotify+0xec>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	b29b      	uxth	r3, r3
 8001176:	2400      	movs	r4, #0
 8001178:	9400      	str	r4, [sp, #0]
 800117a:	f000 fc25 	bl	80019c8 <lcd_Fill>

}
 800117e:	bf00      	nop
 8001180:	3704      	adds	r7, #4
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	2000003c 	.word	0x2000003c
 800118c:	2000004c 	.word	0x2000004c
 8001190:	20000038 	.word	0x20000038

08001194 <showNotifyOver>:

void showNotifyOver(uint16_t overVal)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af04      	add	r7, sp, #16
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
	char str1[50] = "";
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	222e      	movs	r2, #46	; 0x2e
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fbc0 	bl	8009930 <memset>
	char* str2;
	switch(overVal)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d816      	bhi.n	80011e4 <showNotifyOver+0x50>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <showNotifyOver+0x28>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011d3 	.word	0x080011d3
 80011c4:	080011d9 	.word	0x080011d9
 80011c8:	080011df 	.word	0x080011df
	{
	case 0:
		str2 = " HIT WALL ";
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <showNotifyOver+0xf4>)
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 80011d0:	e008      	b.n	80011e4 <showNotifyOver+0x50>
	case 1:
		str2 = " TIME OUT ";
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <showNotifyOver+0xf8>)
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 80011d6:	e005      	b.n	80011e4 <showNotifyOver+0x50>
	case 2:
		str2 = " EAT BODY ";
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <showNotifyOver+0xfc>)
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 80011dc:	e002      	b.n	80011e4 <showNotifyOver+0x50>
	case 3:
		str2 = " OUT OF RANGE ";
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <showNotifyOver+0x100>)
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 80011e2:	bf00      	nop
	}
	strcat(str1, str2);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 fc4a 	bl	8009a84 <strcat>
	lcd_StrCenter(0, overWallY[0] + 10, str1, WHITE, BLACK, 16, 0);
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <showNotifyOver+0x104>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	330a      	adds	r3, #10
 80011f8:	b299      	uxth	r1, r3
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	2300      	movs	r3, #0
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2310      	movs	r3, #16
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	2000      	movs	r0, #0
 8001210:	f000 fff0 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <showNotifyOver+0x108>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	3308      	adds	r3, #8
 800121c:	b298      	uxth	r0, r3
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <showNotifyOver+0x104>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <showNotifyOver+0x104>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	0fda      	lsrs	r2, r3, #31
 800122a:	4413      	add	r3, r2
 800122c:	105b      	asrs	r3, r3, #1
 800122e:	b29b      	uxth	r3, r3
 8001230:	3b0f      	subs	r3, #15
 8001232:	b299      	uxth	r1, r3
 8001234:	2301      	movs	r3, #1
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2310      	movs	r3, #16
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <showNotifyOver+0x10c>)
 8001246:	f000 ff71 	bl	800212c <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <showNotifyOver+0x108>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3308      	adds	r3, #8
 8001252:	b298      	uxth	r0, r3
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <showNotifyOver+0x104>)
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <showNotifyOver+0x104>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	0fda      	lsrs	r2, r3, #31
 8001260:	4413      	add	r3, r2
 8001262:	105b      	asrs	r3, r3, #1
 8001264:	b29b      	uxth	r3, r3
 8001266:	3314      	adds	r3, #20
 8001268:	b299      	uxth	r1, r3
 800126a:	2301      	movs	r3, #1
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2310      	movs	r3, #16
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f248 4330 	movw	r3, #33840	; 0x8430
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <showNotifyOver+0x110>)
 800127c:	f000 ff56 	bl	800212c <lcd_ShowStr>
}
 8001280:	bf00      	nop
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800ae64 	.word	0x0800ae64
 800128c:	0800ae70 	.word	0x0800ae70
 8001290:	0800ae7c 	.word	0x0800ae7c
 8001294:	0800ae88 	.word	0x0800ae88
 8001298:	2000004c 	.word	0x2000004c
 800129c:	2000003c 	.word	0x2000003c
 80012a0:	0800ae98 	.word	0x0800ae98
 80012a4:	0800aea4 	.word	0x0800aea4

080012a8 <eraseFull>:

void eraseFull()
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <eraseFull+0x4c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <eraseFull+0x50>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b298      	uxth	r0, r3
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <eraseFull+0x54>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3319      	adds	r3, #25
 80012c6:	b299      	uxth	r1, r3
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <eraseFull+0x4c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <eraseFull+0x50>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <eraseFull+0x54>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3b05      	subs	r3, #5
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f248 4430 	movw	r4, #33840	; 0x8430
 80012e6:	9400      	str	r4, [sp, #0]
 80012e8:	f000 fb6e 	bl	80019c8 <lcd_Fill>

}
 80012ec:	bf00      	nop
 80012ee:	3704      	adds	r7, #4
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	2000003c 	.word	0x2000003c
 80012f8:	20000038 	.word	0x20000038
 80012fc:	2000004c 	.word	0x2000004c

08001300 <drawArrowOver>:

void drawArrowOver()
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8001306:	4b87      	ldr	r3, [pc, #540]	; (8001524 <drawArrowOver+0x224>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	4b86      	ldr	r3, [pc, #536]	; (8001524 <drawArrowOver+0x224>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	0fda      	lsrs	r2, r3, #31
 8001312:	4413      	add	r3, r2
 8001314:	105b      	asrs	r3, r3, #1
 8001316:	3b08      	subs	r3, #8
 8001318:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 800131a:	4b82      	ldr	r3, [pc, #520]	; (8001524 <drawArrowOver+0x224>)
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <drawArrowOver+0x224>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	0fda      	lsrs	r2, r3, #31
 8001326:	4413      	add	r3, r2
 8001328:	105b      	asrs	r3, r3, #1
 800132a:	331c      	adds	r3, #28
 800132c:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 800132e:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <drawArrowOver+0x228>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <drawArrowOver+0x3c>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d078      	beq.n	800142c <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 800133a:	e0ef      	b.n	800151c <drawArrowOver+0x21c>
		eraseFull();
 800133c:	f7ff ffb4 	bl	80012a8 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 8001340:	4b7a      	ldr	r3, [pc, #488]	; (800152c <drawArrowOver+0x22c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	3308      	adds	r3, #8
 8001348:	b298      	uxth	r0, r3
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <drawArrowOver+0x224>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b75      	ldr	r3, [pc, #468]	; (8001524 <drawArrowOver+0x224>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	0fda      	lsrs	r2, r3, #31
 8001356:	4413      	add	r3, r2
 8001358:	105b      	asrs	r3, r3, #1
 800135a:	b29b      	uxth	r3, r3
 800135c:	3b0f      	subs	r3, #15
 800135e:	b299      	uxth	r1, r3
 8001360:	2301      	movs	r3, #1
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2310      	movs	r3, #16
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	f248 4330 	movw	r3, #33840	; 0x8430
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001372:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <drawArrowOver+0x230>)
 8001374:	f000 feda 	bl	800212c <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 8001378:	4b6c      	ldr	r3, [pc, #432]	; (800152c <drawArrowOver+0x22c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	3308      	adds	r3, #8
 8001380:	b298      	uxth	r0, r3
 8001382:	4b68      	ldr	r3, [pc, #416]	; (8001524 <drawArrowOver+0x224>)
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	4b67      	ldr	r3, [pc, #412]	; (8001524 <drawArrowOver+0x224>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	0fda      	lsrs	r2, r3, #31
 800138e:	4413      	add	r3, r2
 8001390:	105b      	asrs	r3, r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	3314      	adds	r3, #20
 8001396:	b299      	uxth	r1, r3
 8001398:	2301      	movs	r3, #1
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2310      	movs	r3, #16
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	4a62      	ldr	r2, [pc, #392]	; (8001534 <drawArrowOver+0x234>)
 80013aa:	f000 febf 	bl	800212c <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <drawArrowOver+0x22c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b0f      	subs	r3, #15
 80013b6:	b298      	uxth	r0, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	b299      	uxth	r1, r3
 80013bc:	4b5b      	ldr	r3, [pc, #364]	; (800152c <drawArrowOver+0x22c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3b0a      	subs	r3, #10
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	3b05      	subs	r3, #5
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2400      	movs	r4, #0
 80013d0:	9400      	str	r4, [sp, #0]
 80013d2:	f000 fb46 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80013d6:	4b55      	ldr	r3, [pc, #340]	; (800152c <drawArrowOver+0x22c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b0f      	subs	r3, #15
 80013de:	b298      	uxth	r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	b299      	uxth	r1, r3
 80013e4:	4b51      	ldr	r3, [pc, #324]	; (800152c <drawArrowOver+0x22c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3b0a      	subs	r3, #10
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3305      	adds	r3, #5
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2400      	movs	r4, #0
 80013f8:	9400      	str	r4, [sp, #0]
 80013fa:	f000 fb32 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80013fe:	4b4b      	ldr	r3, [pc, #300]	; (800152c <drawArrowOver+0x22c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b0a      	subs	r3, #10
 8001406:	b298      	uxth	r0, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b05      	subs	r3, #5
 800140e:	b299      	uxth	r1, r3
 8001410:	4b46      	ldr	r3, [pc, #280]	; (800152c <drawArrowOver+0x22c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3b0a      	subs	r3, #10
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b29b      	uxth	r3, r3
 800141e:	3305      	adds	r3, #5
 8001420:	b29b      	uxth	r3, r3
 8001422:	2400      	movs	r4, #0
 8001424:	9400      	str	r4, [sp, #0]
 8001426:	f000 fb1c 	bl	8001a62 <lcd_DrawLine>
		break;
 800142a:	e077      	b.n	800151c <drawArrowOver+0x21c>
		eraseFull();
 800142c:	f7ff ff3c 	bl	80012a8 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8001430:	4b3e      	ldr	r3, [pc, #248]	; (800152c <drawArrowOver+0x22c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	3308      	adds	r3, #8
 8001438:	b298      	uxth	r0, r3
 800143a:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <drawArrowOver+0x224>)
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <drawArrowOver+0x224>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	0fda      	lsrs	r2, r3, #31
 8001446:	4413      	add	r3, r2
 8001448:	105b      	asrs	r3, r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b0f      	subs	r3, #15
 800144e:	b299      	uxth	r1, r3
 8001450:	2301      	movs	r3, #1
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2310      	movs	r3, #16
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f248 4330 	movw	r3, #33840	; 0x8430
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	4a33      	ldr	r2, [pc, #204]	; (8001530 <drawArrowOver+0x230>)
 8001462:	f000 fe63 	bl	800212c <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <drawArrowOver+0x22c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	3308      	adds	r3, #8
 800146e:	b298      	uxth	r0, r3
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <drawArrowOver+0x224>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <drawArrowOver+0x224>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	0fda      	lsrs	r2, r3, #31
 800147c:	4413      	add	r3, r2
 800147e:	105b      	asrs	r3, r3, #1
 8001480:	b29b      	uxth	r3, r3
 8001482:	3314      	adds	r3, #20
 8001484:	b299      	uxth	r1, r3
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2310      	movs	r3, #16
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	f248 4330 	movw	r3, #33840	; 0x8430
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <drawArrowOver+0x234>)
 800149a:	f000 fe47 	bl	800212c <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <drawArrowOver+0x22c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3b0f      	subs	r3, #15
 80014a6:	b298      	uxth	r0, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b299      	uxth	r1, r3
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <drawArrowOver+0x22c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b0a      	subs	r3, #10
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b05      	subs	r3, #5
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2400      	movs	r4, #0
 80014c0:	9400      	str	r4, [sp, #0]
 80014c2:	f000 face 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <drawArrowOver+0x22c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3b0f      	subs	r3, #15
 80014ce:	b298      	uxth	r0, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b299      	uxth	r1, r3
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <drawArrowOver+0x22c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3b0a      	subs	r3, #10
 80014dc:	b29a      	uxth	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3305      	adds	r3, #5
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2400      	movs	r4, #0
 80014e8:	9400      	str	r4, [sp, #0]
 80014ea:	f000 faba 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <drawArrowOver+0x22c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	3b0a      	subs	r3, #10
 80014f6:	b298      	uxth	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b05      	subs	r3, #5
 80014fe:	b299      	uxth	r1, r3
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <drawArrowOver+0x22c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b0a      	subs	r3, #10
 8001508:	b29a      	uxth	r2, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3305      	adds	r3, #5
 8001510:	b29b      	uxth	r3, r3
 8001512:	2400      	movs	r4, #0
 8001514:	9400      	str	r4, [sp, #0]
 8001516:	f000 faa4 	bl	8001a62 <lcd_DrawLine>
		break;
 800151a:	bf00      	nop
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	2000004c 	.word	0x2000004c
 8001528:	2000013c 	.word	0x2000013c
 800152c:	2000003c 	.word	0x2000003c
 8001530:	0800ae98 	.word	0x0800ae98
 8001534:	0800aea4 	.word	0x0800aea4

08001538 <gameOverUI>:

void gameOverUI(uint16_t overVal)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	showWallnotify();
 8001542:	f7ff fdad 	bl	80010a0 <showWallnotify>
	showNotifyOver(overVal);
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe23 	bl	8001194 <showNotifyOver>
	drawArrowOver();
 800154e:	f7ff fed7 	bl	8001300 <drawArrowOver>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <pickOver>:

void pickOver(uint16_t overVal)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	if(button_count[3] == 1)
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <pickOver+0x78>)
 8001568:	88db      	ldrh	r3, [r3, #6]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10c      	bne.n	8001588 <pickOver+0x2c>
	{
		flagOver = 1;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <pickOver+0x7c>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <pickOver+0x80>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d025      	beq.n	80015c8 <pickOver+0x6c>
 800157c:	2b01      	cmp	r3, #1
 800157e:	d104      	bne.n	800158a <pickOver+0x2e>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <pickOver+0x80>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
			break;
 8001586:	e000      	b.n	800158a <pickOver+0x2e>
		}
	}
 8001588:	bf00      	nop
	if(button_count[7] == 1)
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <pickOver+0x78>)
 800158c:	89db      	ldrh	r3, [r3, #14]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10d      	bne.n	80015ae <pickOver+0x52>
	{
		flagOver = 1;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <pickOver+0x7c>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <pickOver+0x80>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <pickOver+0x4a>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d013      	beq.n	80015cc <pickOver+0x70>
 80015a4:	e004      	b.n	80015b0 <pickOver+0x54>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <pickOver+0x80>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
			break;
 80015ac:	e000      	b.n	80015b0 <pickOver+0x54>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 80015ae:	bf00      	nop
	if(flagOver == 1)
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <pickOver+0x7c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10a      	bne.n	80015ce <pickOver+0x72>
	{
		gameOverUI(overVal);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffbc 	bl	8001538 <gameOverUI>
		flagOver = 0;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <pickOver+0x7c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e002      	b.n	80015ce <pickOver+0x72>
			return;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <pickOver+0x72>
			return;
 80015cc:	bf00      	nop
	}
}
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200001a8 	.word	0x200001a8
 80015d8:	20000150 	.word	0x20000150
 80015dc:	2000013c 	.word	0x2000013c

080015e0 <initOverMode>:

void initOverMode(uint16_t overVal)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	statusGame = OVERMODE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <initOverMode+0x38>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <initOverMode+0x3c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <initOverMode+0x40>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <initOverMode+0x44>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
	pickOver(overVal);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ffa9 	bl	800155c <pickOver>
	OVERMESSAGE = overVal;
 800160a:	4a07      	ldr	r2, [pc, #28]	; (8001628 <initOverMode+0x48>)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	8013      	strh	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000148 	.word	0x20000148
 800161c:	20000136 	.word	0x20000136
 8001620:	2000013c 	.word	0x2000013c
 8001624:	20000150 	.word	0x20000150
 8001628:	2000015e 	.word	0x2000015e

0800162c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	4b81      	ldr	r3, [pc, #516]	; (800184c <MX_GPIO_Init+0x220>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a80      	ldr	r2, [pc, #512]	; (800184c <MX_GPIO_Init+0x220>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b7e      	ldr	r3, [pc, #504]	; (800184c <MX_GPIO_Init+0x220>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <MX_GPIO_Init+0x220>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a79      	ldr	r2, [pc, #484]	; (800184c <MX_GPIO_Init+0x220>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b77      	ldr	r3, [pc, #476]	; (800184c <MX_GPIO_Init+0x220>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <MX_GPIO_Init+0x220>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a72      	ldr	r2, [pc, #456]	; (800184c <MX_GPIO_Init+0x220>)
 8001684:	f043 0320 	orr.w	r3, r3, #32
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b70      	ldr	r3, [pc, #448]	; (800184c <MX_GPIO_Init+0x220>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	4b6c      	ldr	r3, [pc, #432]	; (800184c <MX_GPIO_Init+0x220>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a6b      	ldr	r2, [pc, #428]	; (800184c <MX_GPIO_Init+0x220>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b69      	ldr	r3, [pc, #420]	; (800184c <MX_GPIO_Init+0x220>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b65      	ldr	r3, [pc, #404]	; (800184c <MX_GPIO_Init+0x220>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a64      	ldr	r2, [pc, #400]	; (800184c <MX_GPIO_Init+0x220>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b62      	ldr	r3, [pc, #392]	; (800184c <MX_GPIO_Init+0x220>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b5e      	ldr	r3, [pc, #376]	; (800184c <MX_GPIO_Init+0x220>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a5d      	ldr	r2, [pc, #372]	; (800184c <MX_GPIO_Init+0x220>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <MX_GPIO_Init+0x220>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b57      	ldr	r3, [pc, #348]	; (800184c <MX_GPIO_Init+0x220>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a56      	ldr	r2, [pc, #344]	; (800184c <MX_GPIO_Init+0x220>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <MX_GPIO_Init+0x220>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <MX_GPIO_Init+0x220>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a4f      	ldr	r2, [pc, #316]	; (800184c <MX_GPIO_Init+0x220>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b4d      	ldr	r3, [pc, #308]	; (800184c <MX_GPIO_Init+0x220>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2170      	movs	r1, #112	; 0x70
 8001726:	484a      	ldr	r0, [pc, #296]	; (8001850 <MX_GPIO_Init+0x224>)
 8001728:	f005 f934 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001732:	4848      	ldr	r0, [pc, #288]	; (8001854 <MX_GPIO_Init+0x228>)
 8001734:	f005 f92e 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ESP12_BUSY_Pin|ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800173e:	4846      	ldr	r0, [pc, #280]	; (8001858 <MX_GPIO_Init+0x22c>)
 8001740:	f005 f928 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	4844      	ldr	r0, [pc, #272]	; (800185c <MX_GPIO_Init+0x230>)
 800174a:	f005 f923 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	4842      	ldr	r0, [pc, #264]	; (8001860 <MX_GPIO_Init+0x234>)
 8001756:	f005 f91d 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2108      	movs	r1, #8
 800175e:	4841      	ldr	r0, [pc, #260]	; (8001864 <MX_GPIO_Init+0x238>)
 8001760:	f005 f918 	bl	8006994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001764:	2370      	movs	r3, #112	; 0x70
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4835      	ldr	r0, [pc, #212]	; (8001850 <MX_GPIO_Init+0x224>)
 800177c:	f004 ff6e 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	482e      	ldr	r0, [pc, #184]	; (8001854 <MX_GPIO_Init+0x228>)
 800179a:	f004 ff5f 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin|ESP12_PWR_Pin;
 800179e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4828      	ldr	r0, [pc, #160]	; (8001858 <MX_GPIO_Init+0x22c>)
 80017b8:	f004 ff50 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4824      	ldr	r0, [pc, #144]	; (8001860 <MX_GPIO_Init+0x234>)
 80017d0:	f004 ff44 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80017d4:	2330      	movs	r3, #48	; 0x30
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	481b      	ldr	r0, [pc, #108]	; (8001854 <MX_GPIO_Init+0x228>)
 80017e8:	f004 ff38 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	4816      	ldr	r0, [pc, #88]	; (800185c <MX_GPIO_Init+0x230>)
 8001804:	f004 ff2a 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	480f      	ldr	r0, [pc, #60]	; (8001860 <MX_GPIO_Init+0x234>)
 8001822:	f004 ff1b 	bl	800665c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001826:	2308      	movs	r3, #8
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <MX_GPIO_Init+0x238>)
 800183e:	f004 ff0d 	bl	800665c <HAL_GPIO_Init>

}
 8001842:	bf00      	nop
 8001844:	3738      	adds	r7, #56	; 0x38
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40021000 	.word	0x40021000
 8001854:	40020800 	.word	0x40020800
 8001858:	40021400 	.word	0x40021400
 800185c:	40021800 	.word	0x40021800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020c00 	.word	0x40020c00

08001868 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <LCD_WR_REG+0x1c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	8013      	strh	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	600ffffe 	.word	0x600ffffe

08001888 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <LCD_WR_DATA+0x1c>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	8053      	strh	r3, [r2, #2]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	600ffffe 	.word	0x600ffffe

080018a8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <LCD_RD_DATA+0x20>)
 80018b0:	885b      	ldrh	r3, [r3, #2]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	b29b      	uxth	r3, r3
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	600ffffe 	.word	0x600ffffe

080018cc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80018ea:	202a      	movs	r0, #42	; 0x2a
 80018ec:	f7ff ffbc 	bl	8001868 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffc6 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ffc0 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ffba 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ffb4 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001920:	202b      	movs	r0, #43	; 0x2b
 8001922:	f7ff ffa1 	bl	8001868 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ffab 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ffa5 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff9f 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800194a:	883b      	ldrh	r3, [r7, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff99 	bl	8001888 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001956:	202c      	movs	r0, #44	; 0x2c
 8001958:	f7ff ff86 	bl	8001868 <LCD_WR_REG>
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}

08001964 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <lcd_Clear+0x60>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <lcd_Clear+0x60>)
 8001978:	885b      	ldrh	r3, [r3, #2]
 800197a:	3b01      	subs	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	2100      	movs	r1, #0
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ffa3 	bl	80018cc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001986:	2300      	movs	r3, #0
 8001988:	81fb      	strh	r3, [r7, #14]
 800198a:	e011      	b.n	80019b0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800198c:	2300      	movs	r3, #0
 800198e:	81bb      	strh	r3, [r7, #12]
 8001990:	e006      	b.n	80019a0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff77 	bl	8001888 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800199a:	89bb      	ldrh	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	81bb      	strh	r3, [r7, #12]
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <lcd_Clear+0x60>)
 80019a2:	885b      	ldrh	r3, [r3, #2]
 80019a4:	89ba      	ldrh	r2, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3f3      	bcc.n	8001992 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80019aa:	89fb      	ldrh	r3, [r7, #14]
 80019ac:	3301      	adds	r3, #1
 80019ae:	81fb      	strh	r3, [r7, #14]
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <lcd_Clear+0x60>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	89fa      	ldrh	r2, [r7, #14]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3e8      	bcc.n	800198c <lcd_Clear+0x28>
		}
	}
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000218 	.word	0x20000218

080019c8 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	4603      	mov	r3, r0
 80019dc:	80bb      	strh	r3, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]
 80019e2:	4613      	mov	r3, r2
 80019e4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	88b9      	ldrh	r1, [r7, #4]
 80019f4:	88f8      	ldrh	r0, [r7, #6]
 80019f6:	f7ff ff69 	bl	80018cc <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	81fb      	strh	r3, [r7, #14]
 80019fe:	e010      	b.n	8001a22 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	81bb      	strh	r3, [r7, #12]
 8001a04:	e006      	b.n	8001a14 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001a06:	8c3b      	ldrh	r3, [r7, #32]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff3d 	bl	8001888 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001a0e:	89bb      	ldrh	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	81bb      	strh	r3, [r7, #12]
 8001a14:	89ba      	ldrh	r2, [r7, #12]
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3f4      	bcc.n	8001a06 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	81fb      	strh	r3, [r7, #14]
 8001a22:	89fa      	ldrh	r2, [r7, #14]
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3ea      	bcc.n	8001a00 <lcd_Fill+0x38>
		}
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	88b9      	ldrh	r1, [r7, #4]
 8001a4c:	88f8      	ldrh	r0, [r7, #6]
 8001a4e:	f7ff ff3d 	bl	80018cc <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff17 	bl	8001888 <LCD_WR_DATA>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b08d      	sub	sp, #52	; 0x34
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4604      	mov	r4, r0
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4623      	mov	r3, r4
 8001a72:	80fb      	strh	r3, [r7, #6]
 8001a74:	4603      	mov	r3, r0
 8001a76:	80bb      	strh	r3, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001a90:	883a      	ldrh	r2, [r7, #0]
 8001a92:	88bb      	ldrh	r3, [r7, #4]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd02      	ble.n	8001aac <lcd_DrawLine+0x4a>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00b      	b.n	8001ac4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <lcd_DrawLine+0x56>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e005      	b.n	8001ac4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	dd02      	ble.n	8001ad0 <lcd_DrawLine+0x6e>
 8001aca:	2301      	movs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	e00b      	b.n	8001ae8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <lcd_DrawLine+0x7a>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e005      	b.n	8001ae8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dd02      	ble.n	8001af6 <lcd_DrawLine+0x94>
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	e001      	b.n	8001afa <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001afe:	e02b      	b.n	8001b58 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	b291      	uxth	r1, r2
 8001b08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff91 	bl	8001a34 <lcd_DrawPoint>
		xerr+=delta_x;
 8001b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	4413      	add	r3, r2
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dd07      	ble.n	8001b3a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dd07      	ble.n	8001b52 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b54:	3301      	adds	r3, #1
 8001b56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dacf      	bge.n	8001b00 <lcd_DrawLine+0x9e>
		}
	}
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3734      	adds	r7, #52	; 0x34
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}

08001b6a <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001b6a:	b590      	push	{r4, r7, lr}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af02      	add	r7, sp, #8
 8001b70:	4604      	mov	r4, r0
 8001b72:	4608      	mov	r0, r1
 8001b74:	4611      	mov	r1, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	4623      	mov	r3, r4
 8001b7a:	80fb      	strh	r3, [r7, #6]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	80bb      	strh	r3, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001b88:	88bc      	ldrh	r4, [r7, #4]
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	88b9      	ldrh	r1, [r7, #4]
 8001b8e:	88f8      	ldrh	r0, [r7, #6]
 8001b90:	8b3b      	ldrh	r3, [r7, #24]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	f7ff ff64 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001b9a:	883c      	ldrh	r4, [r7, #0]
 8001b9c:	88fa      	ldrh	r2, [r7, #6]
 8001b9e:	88b9      	ldrh	r1, [r7, #4]
 8001ba0:	88f8      	ldrh	r0, [r7, #6]
 8001ba2:	8b3b      	ldrh	r3, [r7, #24]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	f7ff ff5b 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001bac:	883c      	ldrh	r4, [r7, #0]
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	8839      	ldrh	r1, [r7, #0]
 8001bb2:	88f8      	ldrh	r0, [r7, #6]
 8001bb4:	8b3b      	ldrh	r3, [r7, #24]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4623      	mov	r3, r4
 8001bba:	f7ff ff52 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001bbe:	883c      	ldrh	r4, [r7, #0]
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	88b9      	ldrh	r1, [r7, #4]
 8001bc4:	8878      	ldrh	r0, [r7, #2]
 8001bc6:	8b3b      	ldrh	r3, [r7, #24]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4623      	mov	r3, r4
 8001bcc:	f7ff ff49 	bl	8001a62 <lcd_DrawLine>
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}

08001bd8 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	80fb      	strh	r3, [r7, #6]
 8001bea:	4603      	mov	r3, r0
 8001bec:	80bb      	strh	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	fb12 f303 	smulbb	r3, r2, r3
 8001c2e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	3b20      	subs	r3, #32
 8001c34:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29c      	uxth	r4, r3
 8001c44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	88b9      	ldrh	r1, [r7, #4]
 8001c56:	88f8      	ldrh	r0, [r7, #6]
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fe37 	bl	80018cc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	827b      	strh	r3, [r7, #18]
 8001c62:	e07a      	b.n	8001d5a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001c64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d028      	beq.n	8001cbe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d108      	bne.n	8001c86 <lcd_ShowChar+0xae>
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	8a7b      	ldrh	r3, [r7, #18]
 8001c78:	493c      	ldr	r1, [pc, #240]	; (8001d6c <lcd_ShowChar+0x194>)
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	440a      	add	r2, r1
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	75fb      	strb	r3, [r7, #23]
 8001c84:	e01b      	b.n	8001cbe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001c86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	d10b      	bne.n	8001ca6 <lcd_ShowChar+0xce>
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	8a79      	ldrh	r1, [r7, #18]
 8001c92:	4837      	ldr	r0, [pc, #220]	; (8001d70 <lcd_ShowChar+0x198>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4403      	add	r3, r0
 8001c9e:	440b      	add	r3, r1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	75fb      	strb	r3, [r7, #23]
 8001ca4:	e00b      	b.n	8001cbe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001ca6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d15a      	bne.n	8001d64 <lcd_ShowChar+0x18c>
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	8a7b      	ldrh	r3, [r7, #18]
 8001cb2:	4930      	ldr	r1, [pc, #192]	; (8001d74 <lcd_ShowChar+0x19c>)
 8001cb4:	0192      	lsls	r2, r2, #6
 8001cb6:	440a      	add	r2, r1
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75bb      	strb	r3, [r7, #22]
 8001cc2:	e044      	b.n	8001d4e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001cc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d120      	bne.n	8001d0e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001ccc:	7dfa      	ldrb	r2, [r7, #23]
 8001cce:	7dbb      	ldrb	r3, [r7, #22]
 8001cd0:	fa42 f303 	asr.w	r3, r2, r3
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <lcd_ShowChar+0x10e>
 8001cdc:	883b      	ldrh	r3, [r7, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdd2 	bl	8001888 <LCD_WR_DATA>
 8001ce4:	e003      	b.n	8001cee <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001ce6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fdcd 	bl	8001888 <LCD_WR_DATA>
				m++;
 8001cee:	7d7b      	ldrb	r3, [r7, #21]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001cf4:	7d7b      	ldrb	r3, [r7, #21]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cfc:	fb02 f201 	mul.w	r2, r2, r1
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d11f      	bne.n	8001d48 <lcd_ShowChar+0x170>
				{
					m=0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	757b      	strb	r3, [r7, #21]
					break;
 8001d0c:	e022      	b.n	8001d54 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001d0e:	7dfa      	ldrb	r2, [r7, #23]
 8001d10:	7dbb      	ldrb	r3, [r7, #22]
 8001d12:	fa42 f303 	asr.w	r3, r2, r3
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <lcd_ShowChar+0x152>
 8001d1e:	883a      	ldrh	r2, [r7, #0]
 8001d20:	88b9      	ldrh	r1, [r7, #4]
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fe85 	bl	8001a34 <lcd_DrawPoint>
				x++;
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001d30:	88fa      	ldrh	r2, [r7, #6]
 8001d32:	8a3b      	ldrh	r3, [r7, #16]
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d105      	bne.n	8001d48 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001d3c:	8a3b      	ldrh	r3, [r7, #16]
 8001d3e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001d40:	88bb      	ldrh	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	80bb      	strh	r3, [r7, #4]
					break;
 8001d46:	e005      	b.n	8001d54 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001d48:	7dbb      	ldrb	r3, [r7, #22]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	75bb      	strb	r3, [r7, #22]
 8001d4e:	7dbb      	ldrb	r3, [r7, #22]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	d9b7      	bls.n	8001cc4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001d54:	8a7b      	ldrh	r3, [r7, #18]
 8001d56:	3301      	adds	r3, #1
 8001d58:	827b      	strh	r3, [r7, #18]
 8001d5a:	8a7a      	ldrh	r2, [r7, #18]
 8001d5c:	89bb      	ldrh	r3, [r7, #12]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d380      	bcc.n	8001c64 <lcd_ShowChar+0x8c>
 8001d62:	e000      	b.n	8001d66 <lcd_ShowChar+0x18e>
		else return;
 8001d64:	bf00      	nop
				}
			}
		}
	}
}
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	0800b078 	.word	0x0800b078
 8001d70:	0800b668 	.word	0x0800b668
 8001d74:	0800c838 	.word	0x0800c838

08001d78 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4604      	mov	r4, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	80fb      	strh	r3, [r7, #6]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80bb      	strh	r3, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]
 8001d92:	4613      	mov	r3, r2
 8001d94:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29c      	uxth	r4, r3
 8001da6:	88ba      	ldrh	r2, [r7, #4]
 8001da8:	883b      	ldrh	r3, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	88b9      	ldrh	r1, [r7, #4]
 8001db4:	88f8      	ldrh	r0, [r7, #6]
 8001db6:	4622      	mov	r2, r4
 8001db8:	f7ff fd88 	bl	80018cc <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	82fb      	strh	r3, [r7, #22]
 8001dc0:	e027      	b.n	8001e12 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	82bb      	strh	r3, [r7, #20]
 8001dc6:	e01d      	b.n	8001e04 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	3301      	adds	r3, #1
 8001dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fd48 	bl	8001888 <LCD_WR_DATA>
			k++;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001dfe:	8abb      	ldrh	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	82bb      	strh	r3, [r7, #20]
 8001e04:	8aba      	ldrh	r2, [r7, #20]
 8001e06:	883b      	ldrh	r3, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d3dd      	bcc.n	8001dc8 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001e0c:	8afb      	ldrh	r3, [r7, #22]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	82fb      	strh	r3, [r7, #22]
 8001e12:	8afa      	ldrh	r2, [r7, #22]
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3d3      	bcc.n	8001dc2 <lcd_ShowPicture+0x4a>
		}
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}

08001e24 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <lcd_SetDir+0x44>)
 8001e40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e44:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <lcd_SetDir+0x44>)
 8001e48:	22f0      	movs	r2, #240	; 0xf0
 8001e4a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001e4c:	e006      	b.n	8001e5c <lcd_SetDir+0x38>
		lcddev.width=240;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <lcd_SetDir+0x44>)
 8001e50:	22f0      	movs	r2, #240	; 0xf0
 8001e52:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <lcd_SetDir+0x44>)
 8001e56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e5a:	805a      	strh	r2, [r3, #2]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	20000218 	.word	0x20000218

08001e6c <lcd_init>:


void lcd_init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e76:	48aa      	ldr	r0, [pc, #680]	; (8002120 <lcd_init+0x2b4>)
 8001e78:	f004 fd8c 	bl	8006994 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e80:	f004 fa24 	bl	80062cc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8a:	48a5      	ldr	r0, [pc, #660]	; (8002120 <lcd_init+0x2b4>)
 8001e8c:	f004 fd82 	bl	8006994 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e94:	f004 fa1a 	bl	80062cc <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff ffc3 	bl	8001e24 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001e9e:	20d3      	movs	r0, #211	; 0xd3
 8001ea0:	f7ff fce2 	bl	8001868 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001ea4:	f7ff fd00 	bl	80018a8 <LCD_RD_DATA>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <lcd_init+0x2b8>)
 8001eae:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001eb0:	f7ff fcfa 	bl	80018a8 <LCD_RD_DATA>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b9a      	ldr	r3, [pc, #616]	; (8002124 <lcd_init+0x2b8>)
 8001eba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ebc:	f7ff fcf4 	bl	80018a8 <LCD_RD_DATA>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b97      	ldr	r3, [pc, #604]	; (8002124 <lcd_init+0x2b8>)
 8001ec6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001ec8:	4b96      	ldr	r3, [pc, #600]	; (8002124 <lcd_init+0x2b8>)
 8001eca:	889b      	ldrh	r3, [r3, #4]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b94      	ldr	r3, [pc, #592]	; (8002124 <lcd_init+0x2b8>)
 8001ed2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001ed4:	f7ff fce8 	bl	80018a8 <LCD_RD_DATA>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b91      	ldr	r3, [pc, #580]	; (8002124 <lcd_init+0x2b8>)
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	; (8002124 <lcd_init+0x2b8>)
 8001ee6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ee8:	20cf      	movs	r0, #207	; 0xcf
 8001eea:	f7ff fcbd 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fcca 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001ef4:	20c1      	movs	r0, #193	; 0xc1
 8001ef6:	f7ff fcc7 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001efa:	2030      	movs	r0, #48	; 0x30
 8001efc:	f7ff fcc4 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f00:	20ed      	movs	r0, #237	; 0xed
 8001f02:	f7ff fcb1 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f7ff fcbe 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f7ff fcbb 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f12:	2012      	movs	r0, #18
 8001f14:	f7ff fcb8 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f18:	2081      	movs	r0, #129	; 0x81
 8001f1a:	f7ff fcb5 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f1e:	20e8      	movs	r0, #232	; 0xe8
 8001f20:	f7ff fca2 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f24:	2085      	movs	r0, #133	; 0x85
 8001f26:	f7ff fcaf 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f2a:	2010      	movs	r0, #16
 8001f2c:	f7ff fcac 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f30:	207a      	movs	r0, #122	; 0x7a
 8001f32:	f7ff fca9 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f36:	20cb      	movs	r0, #203	; 0xcb
 8001f38:	f7ff fc96 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f3c:	2039      	movs	r0, #57	; 0x39
 8001f3e:	f7ff fca3 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f42:	202c      	movs	r0, #44	; 0x2c
 8001f44:	f7ff fca0 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fc9d 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f4e:	2034      	movs	r0, #52	; 0x34
 8001f50:	f7ff fc9a 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f54:	2002      	movs	r0, #2
 8001f56:	f7ff fc97 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f5a:	20f7      	movs	r0, #247	; 0xf7
 8001f5c:	f7ff fc84 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f60:	2020      	movs	r0, #32
 8001f62:	f7ff fc91 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f66:	20ea      	movs	r0, #234	; 0xea
 8001f68:	f7ff fc7e 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff fc8b 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff fc88 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f78:	20c0      	movs	r0, #192	; 0xc0
 8001f7a:	f7ff fc75 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f7e:	201b      	movs	r0, #27
 8001f80:	f7ff fc82 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f84:	20c1      	movs	r0, #193	; 0xc1
 8001f86:	f7ff fc6f 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fc7c 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f90:	20c5      	movs	r0, #197	; 0xc5
 8001f92:	f7ff fc69 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f96:	2030      	movs	r0, #48	; 0x30
 8001f98:	f7ff fc76 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f9c:	2030      	movs	r0, #48	; 0x30
 8001f9e:	f7ff fc73 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001fa2:	20c7      	movs	r0, #199	; 0xc7
 8001fa4:	f7ff fc60 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001fa8:	20b7      	movs	r0, #183	; 0xb7
 8001faa:	f7ff fc6d 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001fae:	2036      	movs	r0, #54	; 0x36
 8001fb0:	f7ff fc5a 	bl	8001868 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001fb4:	2008      	movs	r0, #8
 8001fb6:	f7ff fc67 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001fba:	203a      	movs	r0, #58	; 0x3a
 8001fbc:	f7ff fc54 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fc0:	2055      	movs	r0, #85	; 0x55
 8001fc2:	f7ff fc61 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001fc6:	20b1      	movs	r0, #177	; 0xb1
 8001fc8:	f7ff fc4e 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fc5b 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001fd2:	201a      	movs	r0, #26
 8001fd4:	f7ff fc58 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001fd8:	20b6      	movs	r0, #182	; 0xb6
 8001fda:	f7ff fc45 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001fde:	200a      	movs	r0, #10
 8001fe0:	f7ff fc52 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001fe4:	20a2      	movs	r0, #162	; 0xa2
 8001fe6:	f7ff fc4f 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001fea:	20f2      	movs	r0, #242	; 0xf2
 8001fec:	f7ff fc3c 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fc49 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001ff6:	2026      	movs	r0, #38	; 0x26
 8001ff8:	f7ff fc36 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff fc43 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002002:	20e0      	movs	r0, #224	; 0xe0
 8002004:	f7ff fc30 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002008:	200f      	movs	r0, #15
 800200a:	f7ff fc3d 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800200e:	202a      	movs	r0, #42	; 0x2a
 8002010:	f7ff fc3a 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002014:	2028      	movs	r0, #40	; 0x28
 8002016:	f7ff fc37 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800201a:	2008      	movs	r0, #8
 800201c:	f7ff fc34 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002020:	200e      	movs	r0, #14
 8002022:	f7ff fc31 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002026:	2008      	movs	r0, #8
 8002028:	f7ff fc2e 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800202c:	2054      	movs	r0, #84	; 0x54
 800202e:	f7ff fc2b 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002032:	20a9      	movs	r0, #169	; 0xa9
 8002034:	f7ff fc28 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002038:	2043      	movs	r0, #67	; 0x43
 800203a:	f7ff fc25 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800203e:	200a      	movs	r0, #10
 8002040:	f7ff fc22 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002044:	200f      	movs	r0, #15
 8002046:	f7ff fc1f 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff fc1c 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fc19 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fc16 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fc13 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002062:	20e1      	movs	r0, #225	; 0xe1
 8002064:	f7ff fc00 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff fc0d 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800206e:	2015      	movs	r0, #21
 8002070:	f7ff fc0a 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002074:	2017      	movs	r0, #23
 8002076:	f7ff fc07 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800207a:	2007      	movs	r0, #7
 800207c:	f7ff fc04 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002080:	2011      	movs	r0, #17
 8002082:	f7ff fc01 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002086:	2006      	movs	r0, #6
 8002088:	f7ff fbfe 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800208c:	202b      	movs	r0, #43	; 0x2b
 800208e:	f7ff fbfb 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002092:	2056      	movs	r0, #86	; 0x56
 8002094:	f7ff fbf8 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002098:	203c      	movs	r0, #60	; 0x3c
 800209a:	f7ff fbf5 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800209e:	2005      	movs	r0, #5
 80020a0:	f7ff fbf2 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020a4:	2010      	movs	r0, #16
 80020a6:	f7ff fbef 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f7ff fbec 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020b0:	203f      	movs	r0, #63	; 0x3f
 80020b2:	f7ff fbe9 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020b6:	203f      	movs	r0, #63	; 0x3f
 80020b8:	f7ff fbe6 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020bc:	200f      	movs	r0, #15
 80020be:	f7ff fbe3 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020c2:	202b      	movs	r0, #43	; 0x2b
 80020c4:	f7ff fbd0 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fbdd 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff fbda 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff fbd7 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020da:	203f      	movs	r0, #63	; 0x3f
 80020dc:	f7ff fbd4 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020e0:	202a      	movs	r0, #42	; 0x2a
 80020e2:	f7ff fbc1 	bl	8001868 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff fbce 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff fbcb 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff fbc8 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80020f8:	20ef      	movs	r0, #239	; 0xef
 80020fa:	f7ff fbc5 	bl	8001888 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80020fe:	2011      	movs	r0, #17
 8002100:	f7ff fbb2 	bl	8001868 <LCD_WR_REG>
	HAL_Delay(120);
 8002104:	2078      	movs	r0, #120	; 0x78
 8002106:	f004 f8e1 	bl	80062cc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800210a:	2029      	movs	r0, #41	; 0x29
 800210c:	f7ff fbac 	bl	8001868 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002116:	4804      	ldr	r0, [pc, #16]	; (8002128 <lcd_init+0x2bc>)
 8002118:	f004 fc3c 	bl	8006994 <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40020800 	.word	0x40020800
 8002124:	20000218 	.word	0x20000218
 8002128:	40020000 	.word	0x40020000

0800212c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b08b      	sub	sp, #44	; 0x2c
 8002130:	af04      	add	r7, sp, #16
 8002132:	60ba      	str	r2, [r7, #8]
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	81fb      	strh	r3, [r7, #14]
 800213a:	460b      	mov	r3, r1
 800213c:	81bb      	strh	r3, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002142:	89fb      	ldrh	r3, [r7, #14]
 8002144:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002146:	2300      	movs	r3, #0
 8002148:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800214a:	e048      	b.n	80021de <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d145      	bne.n	80021de <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002152:	89fa      	ldrh	r2, [r7, #14]
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <lcd_ShowStr+0xc4>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	429a      	cmp	r2, r3
 8002166:	dc3f      	bgt.n	80021e8 <lcd_ShowStr+0xbc>
 8002168:	89ba      	ldrh	r2, [r7, #12]
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <lcd_ShowStr+0xc4>)
 800216c:	885b      	ldrh	r3, [r3, #2]
 800216e:	4619      	mov	r1, r3
 8002170:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002174:	1acb      	subs	r3, r1, r3
 8002176:	429a      	cmp	r2, r3
 8002178:	dc36      	bgt.n	80021e8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b80      	cmp	r3, #128	; 0x80
 8002180:	d902      	bls.n	8002188 <lcd_ShowStr+0x5c>
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
 8002186:	e02a      	b.n	80021de <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b0d      	cmp	r3, #13
 800218e:	d10b      	bne.n	80021a8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002190:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002194:	b29a      	uxth	r2, r3
 8002196:	89bb      	ldrh	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800219c:	8abb      	ldrh	r3, [r7, #20]
 800219e:	81fb      	strh	r3, [r7, #14]
					str++;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	e017      	b.n	80021d8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	88fc      	ldrh	r4, [r7, #6]
 80021ae:	89b9      	ldrh	r1, [r7, #12]
 80021b0:	89f8      	ldrh	r0, [r7, #14]
 80021b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4623      	mov	r3, r4
 80021c4:	f7ff fd08 	bl	8001bd8 <lcd_ShowChar>
					x+=sizey/2;
 80021c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	4413      	add	r3, r2
 80021d6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3301      	adds	r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1b2      	bne.n	800214c <lcd_ShowStr+0x20>
 80021e6:	e000      	b.n	80021ea <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80021e8:	bf00      	nop
			}
		}
	}
}
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	20000218 	.word	0x20000218

080021f4 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af04      	add	r7, sp, #16
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	81fb      	strh	r3, [r7, #14]
 8002202:	460b      	mov	r3, r1
 8002204:	81bb      	strh	r3, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800220a:	68b8      	ldr	r0, [r7, #8]
 800220c:	f7fd ffe0 	bl	80001d0 <strlen>
 8002210:	4603      	mov	r3, r0
 8002212:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <lcd_StrCenter+0x60>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	0fda      	lsrs	r2, r3, #31
 8002222:	4413      	add	r3, r2
 8002224:	105b      	asrs	r3, r3, #1
 8002226:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002228:	89fa      	ldrh	r2, [r7, #14]
 800222a:	8abb      	ldrh	r3, [r7, #20]
 800222c:	4413      	add	r3, r2
 800222e:	b298      	uxth	r0, r3
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	89b9      	ldrh	r1, [r7, #12]
 8002234:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	8c3b      	ldrh	r3, [r7, #32]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f7ff ff70 	bl	800212c <lcd_ShowStr>
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000218 	.word	0x20000218

08002258 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800225c:	2201      	movs	r2, #1
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <led7_init+0x14>)
 8002262:	f004 fb97 	bl	8006994 <HAL_GPIO_WritePin>
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40021800 	.word	0x40021800

08002270 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002274:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <led7_Scan+0x104>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	b29a      	uxth	r2, r3
 800227c:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <led7_Scan+0x104>)
 800227e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002280:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <led7_Scan+0x108>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <led7_Scan+0x10c>)
 8002288:	5c9b      	ldrb	r3, [r3, r2]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <led7_Scan+0x104>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21b      	sxth	r3, r3
 8002298:	b29a      	uxth	r2, r3
 800229a:	4b36      	ldr	r3, [pc, #216]	; (8002374 <led7_Scan+0x104>)
 800229c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <led7_Scan+0x108>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d846      	bhi.n	8002334 <led7_Scan+0xc4>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <led7_Scan+0x3c>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022db 	.word	0x080022db
 80022b4:	080022f9 	.word	0x080022f9
 80022b8:	08002317 	.word	0x08002317
	case 0:
		spi_buffer |= 0x00b0;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <led7_Scan+0x104>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <led7_Scan+0x104>)
 80022c8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <led7_Scan+0x104>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <led7_Scan+0x104>)
 80022d6:	801a      	strh	r2, [r3, #0]
		break;
 80022d8:	e02d      	b.n	8002336 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <led7_Scan+0x104>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <led7_Scan+0x104>)
 80022e6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <led7_Scan+0x104>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	f023 0320 	bic.w	r3, r3, #32
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <led7_Scan+0x104>)
 80022f4:	801a      	strh	r2, [r3, #0]
		break;
 80022f6:	e01e      	b.n	8002336 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <led7_Scan+0x104>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <led7_Scan+0x104>)
 8002304:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <led7_Scan+0x104>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	f023 0310 	bic.w	r3, r3, #16
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <led7_Scan+0x104>)
 8002312:	801a      	strh	r2, [r3, #0]
		break;
 8002314:	e00f      	b.n	8002336 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <led7_Scan+0x104>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <led7_Scan+0x104>)
 8002322:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <led7_Scan+0x104>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <led7_Scan+0x104>)
 8002330:	801a      	strh	r2, [r3, #0]
		break;
 8002332:	e000      	b.n	8002336 <led7_Scan+0xc6>
	default:
		break;
 8002334:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <led7_Scan+0x108>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	425a      	negs	r2, r3
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	bf58      	it	pl
 8002348:	4253      	negpl	r3, r2
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <led7_Scan+0x108>)
 800234e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <led7_Scan+0x110>)
 8002356:	f004 fb1d 	bl	8006994 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800235a:	2301      	movs	r3, #1
 800235c:	2202      	movs	r2, #2
 800235e:	4905      	ldr	r1, [pc, #20]	; (8002374 <led7_Scan+0x104>)
 8002360:	4808      	ldr	r0, [pc, #32]	; (8002384 <led7_Scan+0x114>)
 8002362:	f005 f82e 	bl	80073c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002366:	2201      	movs	r2, #1
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <led7_Scan+0x110>)
 800236c:	f004 fb12 	bl	8006994 <HAL_GPIO_WritePin>
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000092 	.word	0x20000092
 8002378:	20000160 	.word	0x20000160
 800237c:	20000084 	.word	0x20000084
 8002380:	40021800 	.word	0x40021800
 8002384:	2000299c 	.word	0x2000299c

08002388 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0e      	blt.n	80023ba <led7_SetDigit+0x32>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	dc0b      	bgt.n	80023ba <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <led7_SetDigit+0x40>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	b2d9      	uxtb	r1, r3
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <led7_SetDigit+0x44>)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4413      	add	r3, r2
 80023b6:	460a      	mov	r2, r1
 80023b8:	701a      	strb	r2, [r3, #0]
	}
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000088 	.word	0x20000088
 80023cc:	20000084 	.word	0x20000084

080023d0 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <led7_SetColon+0x20>
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <led7_SetColon+0x3c>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f023 0308 	bic.w	r3, r3, #8
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <led7_SetColon+0x3c>)
 80023ec:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80023ee:	e006      	b.n	80023fe <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <led7_SetColon+0x3c>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <led7_SetColon+0x3c>)
 80023fc:	801a      	strh	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000092 	.word	0x20000092

08002410 <lightProcess>:
#include "light_control.h"
#include "uart.h"

uint8_t light_status = 0;

void lightProcess(){
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <lightProcess+0x58>)
 8002416:	8b5b      	ldrh	r3, [r3, #26]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d113      	bne.n	8002444 <lightProcess+0x34>
		light_status = 1 - light_status;
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <lightProcess+0x5c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f1c3 0301 	rsb	r3, r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <lightProcess+0x5c>)
 8002428:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <lightProcess+0x5c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d104      	bne.n	800243c <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8002432:	2101      	movs	r1, #1
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <lightProcess+0x60>)
 8002436:	f003 fddd 	bl	8005ff4 <uart_EspSendBytes>
 800243a:	e003      	b.n	8002444 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 800243c:	2101      	movs	r1, #1
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <lightProcess+0x64>)
 8002440:	f003 fdd8 	bl	8005ff4 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <lightProcess+0x5c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 800244c:	2201      	movs	r2, #1
 800244e:	2120      	movs	r1, #32
 8002450:	4809      	ldr	r0, [pc, #36]	; (8002478 <lightProcess+0x68>)
 8002452:	f004 fa9f 	bl	8006994 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8002456:	e004      	b.n	8002462 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2120      	movs	r1, #32
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <lightProcess+0x68>)
 800245e:	f004 fa99 	bl	8006994 <HAL_GPIO_WritePin>
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200001a8 	.word	0x200001a8
 800246c:	20000162 	.word	0x20000162
 8002470:	0800aeac 	.word	0x0800aeac
 8002474:	0800aeb0 	.word	0x0800aeb0
 8002478:	40021000 	.word	0x40021000

0800247c <test_Esp>:

void test_Esp(){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	if(uart_EspCheck() == 0)
 8002480:	f003 fdfe 	bl	8006080 <uart_EspCheck>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <test_Esp+0x16>
	{
		uart_EspSendBytes("o", 1);
 800248a:	2101      	movs	r1, #1
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <test_Esp+0x1c>)
 800248e:	f003 fdb1 	bl	8005ff4 <uart_EspSendBytes>
	}
//	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	0800aeb4 	.word	0x0800aeb4

0800249c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a0:	f003 fea2 	bl	80061e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a4:	f000 f892 	bl	80025cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a8:	f7ff f8c0 	bl	800162c <MX_GPIO_Init>
  MX_TIM2_Init();
 80024ac:	f003 fb98 	bl	8005be0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80024b0:	f002 f960 	bl	8004774 <MX_SPI1_Init>
  MX_FSMC_Init();
 80024b4:	f7fe fd24 	bl	8000f00 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 80024b8:	f003 fdf2 	bl	80060a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80024bc:	f000 f8f0 	bl	80026a0 <system_init>
  lcd_Clear(WHITE);
 80024c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024c4:	f7ff fa4e 	bl	8001964 <lcd_Clear>
  test_lcd();
 80024c8:	f000 f914 	bl	80026f4 <test_lcd>
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {

    // lcd_Clear(WHITE);
	   if (flagForButton)
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <main+0x10c>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <main+0x4e>
	   {
		   flagForButton= 0;
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <main+0x10c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 80024da:	f7fe fa3f 	bl	800095c <button_Scan>
		   test_Esp();
 80024de:	f7ff ffcd 	bl	800247c <test_Esp>
		  lightProcess();
 80024e2:	f7ff ff95 	bl	8002410 <lightProcess>
		   beginStartGame();
 80024e6:	f002 fd01 	bl	8004eec <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <main+0x110>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d007      	beq.n	8002502 <main+0x66>
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <main+0x110>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <main+0x66>
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <main+0x110>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d118      	bne.n	8002534 <main+0x98>
	   {
		   generateFruit();
 8002502:	f001 fbff 	bl	8003d04 <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <main+0x110>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d108      	bne.n	8002520 <main+0x84>
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <main+0x114>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <main+0x84>
		   {
			   generateWall();
 8002516:	f001 fd19 	bl	8003f4c <generateWall>
			   flagForGenerateWall = 0;
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <main+0x114>)
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <main+0x118>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <main+0x9e>
		   {
			   flagForSnakeRun= 0;
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <main+0x118>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 800252e:	f001 fab3 	bl	8003a98 <snakeRun>
		   if (flagForSnakeRun)
 8002532:	e002      	b.n	800253a <main+0x9e>
		   }
	  }else{
		  flagForSnakeRun = 0;
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <main+0x118>)
 8002536:	2200      	movs	r2, #0
 8002538:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <main+0x110>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b07      	cmp	r3, #7
 8002540:	d104      	bne.n	800254c <main+0xb0>
	  {
		  pickOver(OVERMESSAGE);
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <main+0x11c>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f808 	bl	800155c <pickOver>
	  }
	  if(statusGame == STOPMODE)
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <main+0x110>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d101      	bne.n	8002558 <main+0xbc>
	  {
		  pickStop();
 8002554:	f003 fa04 	bl	8005960 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <main+0x110>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b0a      	cmp	r3, #10
 800255e:	d101      	bne.n	8002564 <main+0xc8>
	  {
		  askToExit();
 8002560:	f7fe fc86 	bl	8000e70 <askToExit>
	  }
	  if(flagForTiming == 1)
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <main+0x120>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10b      	bne.n	8002584 <main+0xe8>
	  {
		  flagForTiming = 0;
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <main+0x120>)
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <main+0x110>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
		  initOverMode(1);
 8002578:	2001      	movs	r0, #1
 800257a:	f7ff f831 	bl	80015e0 <initOverMode>
		  arrowMode = NORMALMODE;
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <main+0x124>)
 8002580:	2203      	movs	r2, #3
 8002582:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <main+0x128>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d19f      	bne.n	80024cc <main+0x30>
	  {
		  TIMING--;
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <main+0x12c>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <main+0x12c>)
 8002596:	801a      	strh	r2, [r3, #0]
		  showTiming();
 8002598:	f003 fcaa 	bl	8005ef0 <showTiming>
		  setTimerDeTime(1000);
 800259c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a0:	f002 f80a 	bl	80045b8 <setTimerDeTime>
	   if (flagForButton)
 80025a4:	e792      	b.n	80024cc <main+0x30>
 80025a6:	bf00      	nop
 80025a8:	20000168 	.word	0x20000168
 80025ac:	20000148 	.word	0x20000148
 80025b0:	20000186 	.word	0x20000186
 80025b4:	2000016e 	.word	0x2000016e
 80025b8:	2000015e 	.word	0x2000015e
 80025bc:	20000174 	.word	0x20000174
 80025c0:	20000014 	.word	0x20000014
 80025c4:	20000180 	.word	0x20000180
 80025c8:	20000000 	.word	0x20000000

080025cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b094      	sub	sp, #80	; 0x50
 80025d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	f107 0320 	add.w	r3, r7, #32
 80025d6:	2230      	movs	r2, #48	; 0x30
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f007 f9a8 	bl	8009930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <SystemClock_Config+0xcc>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <SystemClock_Config+0xcc>)
 80025fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <SystemClock_Config+0xcc>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <SystemClock_Config+0xd0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a21      	ldr	r2, [pc, #132]	; (800269c <SystemClock_Config+0xd0>)
 8002616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <SystemClock_Config+0xd0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002628:	2302      	movs	r3, #2
 800262a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800262c:	2301      	movs	r3, #1
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002630:	2310      	movs	r3, #16
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002634:	2302      	movs	r3, #2
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002638:	2300      	movs	r3, #0
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800263c:	2308      	movs	r3, #8
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002640:	23a8      	movs	r3, #168	; 0xa8
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002644:	2302      	movs	r3, #2
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002648:	2304      	movs	r3, #4
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	4618      	mov	r0, r3
 8002652:	f004 f9b9 	bl	80069c8 <HAL_RCC_OscConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800265c:	f000 f868 	bl	8002730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002660:	230f      	movs	r3, #15
 8002662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800266c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	2105      	movs	r1, #5
 800267e:	4618      	mov	r0, r3
 8002680:	f004 fc1a 	bl	8006eb8 <HAL_RCC_ClockConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800268a:	f000 f851 	bl	8002730 <Error_Handler>
  }
}
 800268e:	bf00      	nop
 8002690:	3750      	adds	r7, #80	; 0x50
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40007000 	.word	0x40007000

080026a0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2120      	movs	r1, #32
 80026a8:	4811      	ldr	r0, [pc, #68]	; (80026f0 <system_init+0x50>)
 80026aa:	f004 f973 	bl	8006994 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2140      	movs	r1, #64	; 0x40
 80026b2:	480f      	ldr	r0, [pc, #60]	; (80026f0 <system_init+0x50>)
 80026b4:	f004 f96e 	bl	8006994 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2110      	movs	r1, #16
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <system_init+0x50>)
 80026be:	f004 f969 	bl	8006994 <HAL_GPIO_WritePin>
	  timer_init();
 80026c2:	f001 ff33 	bl	800452c <timer_init>
	  led7_init();
 80026c6:	f7ff fdc7 	bl	8002258 <led7_init>
	  button_init();
 80026ca:	f7fe f927 	bl	800091c <button_init>
	  lcd_init();
 80026ce:	f7ff fbcd 	bl	8001e6c <lcd_init>
	  uart_init_esp();
 80026d2:	f003 fc79 	bl	8005fc8 <uart_init_esp>
	  setTimerButton(50);
 80026d6:	2032      	movs	r0, #50	; 0x32
 80026d8:	f001 ffa6 	bl	8004628 <setTimerButton>
	  setTimerSnakeRun(300);
 80026dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026e0:	f001 ff2e 	bl	8004540 <setTimerSnakeRun>
	  setTimerGenerateWall(2000);
 80026e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026e8:	f001 ff82 	bl	80045f0 <setTimerGenerateWall>
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 80026fa:	231f      	movs	r3, #31
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	231d      	movs	r3, #29
 8002700:	221d      	movs	r2, #29
 8002702:	2113      	movs	r1, #19
 8002704:	2013      	movs	r0, #19
 8002706:	f7ff f95f 	bl	80019c8 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 800270a:	2301      	movs	r3, #1
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	2310      	movs	r3, #16
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	231f      	movs	r3, #31
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <test_lcd+0x38>)
 800271c:	2164      	movs	r1, #100	; 0x64
 800271e:	2000      	movs	r0, #0
 8002720:	f7ff fd68 	bl	80021f4 <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	0800aeb8 	.word	0x0800aeb8

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002738:	e7fe      	b.n	8002738 <Error_Handler+0x8>
	...

0800273c <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b090      	sub	sp, #64	; 0x40
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	f107 000c 	add.w	r0, r7, #12
 800274c:	4a06      	ldr	r2, [pc, #24]	; (8002768 <convert2str+0x2c>)
 800274e:	2132      	movs	r1, #50	; 0x32
 8002750:	f007 f964 	bl	8009a1c <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	4618      	mov	r0, r3
 800275a:	f007 f9a3 	bl	8009aa4 <strdup>
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3740      	adds	r7, #64	; 0x40
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	0800aec8 	.word	0x0800aec8

0800276c <lcdDrawWall>:

void lcdDrawWall()
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b083      	sub	sp, #12
 8002770:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <lcdDrawWall+0x3c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b298      	uxth	r0, r3
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <lcdDrawWall+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b299      	uxth	r1, r3
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <lcdDrawWall+0x3c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	b29c      	uxth	r4, r3
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <lcdDrawWall+0x40>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <lcdDrawWall+0x44>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4413      	add	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2200      	movs	r2, #0
 8002796:	9200      	str	r2, [sp, #0]
 8002798:	4622      	mov	r2, r4
 800279a:	f7ff f915 	bl	80019c8 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 800279e:	bf00      	nop
 80027a0:	3704      	adds	r7, #4
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000018 	.word	0x20000018
 80027ac:	20000028 	.word	0x20000028
 80027b0:	20000038 	.word	0x20000038

080027b4 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b0a3      	sub	sp, #140	; 0x8c
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	4603      	mov	r3, r0
 80027bc:	460a      	mov	r2, r1
 80027be:	80fb      	strh	r3, [r7, #6]
 80027c0:	4613      	mov	r3, r2
 80027c2:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80027c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027c8:	f7ff f8cc 	bl	8001964 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80027cc:	4b45      	ldr	r3, [pc, #276]	; (80028e4 <setUpLcdNormalPlay+0x130>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <setUpLcdNormalPlay+0x134>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	211f      	movs	r1, #31
 80027da:	9100      	str	r1, [sp, #0]
 80027dc:	2100      	movs	r1, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	f7ff f8f2 	bl	80019c8 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 80027e4:	2301      	movs	r3, #1
 80027e6:	9302      	str	r3, [sp, #8]
 80027e8:	2310      	movs	r3, #16
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	231f      	movs	r3, #31
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027f4:	4a3d      	ldr	r2, [pc, #244]	; (80028ec <setUpLcdNormalPlay+0x138>)
 80027f6:	2105      	movs	r1, #5
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fc97 	bl	800212c <lcd_ShowStr>

	char str1[50] = "ID: ";
 80027fe:	4a3c      	ldr	r2, [pc, #240]	; (80028f0 <setUpLcdNormalPlay+0x13c>)
 8002800:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002808:	6018      	str	r0, [r3, #0]
 800280a:	3304      	adds	r3, #4
 800280c:	7019      	strb	r1, [r3, #0]
 800280e:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002812:	222d      	movs	r2, #45	; 0x2d
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f007 f88a 	bl	8009930 <memset>
	char *str2 = convert2str(ID);
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <setUpLcdNormalPlay+0x140>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff8b 	bl	800273c <convert2str>
 8002826:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 8002828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800282c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800282e:	4618      	mov	r0, r3
 8002830:	f007 f928 	bl	8009a84 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <setUpLcdNormalPlay+0x144>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b298      	uxth	r0, r3
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <setUpLcdNormalPlay+0x148>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b299      	uxth	r1, r3
 8002840:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002844:	2301      	movs	r3, #1
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	2310      	movs	r3, #16
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002856:	f7ff fc69 	bl	800212c <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <setUpLcdNormalPlay+0x14c>)
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002864:	e883 0003 	stmia.w	r3, {r0, r1}
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	222a      	movs	r2, #42	; 0x2a
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f007 f85d 	bl	8009930 <memset>
	char *str4 = convert2str(SCORE);
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <setUpLcdNormalPlay+0x150>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff5e 	bl	800273c <convert2str>
 8002880:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002888:	4618      	mov	r0, r3
 800288a:	f007 f8fb 	bl	8009a84 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <setUpLcdNormalPlay+0x154>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b298      	uxth	r0, r3
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <setUpLcdNormalPlay+0x158>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	3305      	adds	r3, #5
 800289c:	b299      	uxth	r1, r3
 800289e:	f107 0208 	add.w	r2, r7, #8
 80028a2:	2300      	movs	r3, #0
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2310      	movs	r3, #16
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	231f      	movs	r3, #31
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028b2:	f7ff fc3b 	bl	800212c <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <setUpLcdNormalPlay+0x15c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b298      	uxth	r0, r3
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <setUpLcdNormalPlay+0x160>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b299      	uxth	r1, r3
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <setUpLcdNormalPlay+0x164>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <setUpLcdNormalPlay+0x168>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4c14      	ldr	r4, [pc, #80]	; (8002920 <setUpLcdNormalPlay+0x16c>)
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	f7ff fa51 	bl	8001d78 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 80028d6:	f7ff ff49 	bl	800276c <lcdDrawWall>
}
 80028da:	bf00      	nop
 80028dc:	377c      	adds	r7, #124	; 0x7c
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000018 	.word	0x20000018
 80028e8:	20000028 	.word	0x20000028
 80028ec:	0800aecc 	.word	0x0800aecc
 80028f0:	0800aedc 	.word	0x0800aedc
 80028f4:	20000134 	.word	0x20000134
 80028f8:	20000064 	.word	0x20000064
 80028fc:	20000068 	.word	0x20000068
 8002900:	0800af10 	.word	0x0800af10
 8002904:	20000136 	.word	0x20000136
 8002908:	2000006c 	.word	0x2000006c
 800290c:	20000070 	.word	0x20000070
 8002910:	20000074 	.word	0x20000074
 8002914:	20000078 	.word	0x20000078
 8002918:	2000007c 	.word	0x2000007c
 800291c:	20000080 	.word	0x20000080
 8002920:	0800dff8 	.word	0x0800dff8

08002924 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b0a3      	sub	sp, #140	; 0x8c
 8002928:	af04      	add	r7, sp, #16
 800292a:	4603      	mov	r3, r0
 800292c:	460a      	mov	r2, r1
 800292e:	80fb      	strh	r3, [r7, #6]
 8002930:	4613      	mov	r3, r2
 8002932:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002934:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002938:	f7ff f814 	bl	8001964 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <setUpLcdTimingPlay+0x12c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	b29a      	uxth	r2, r3
 8002942:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <setUpLcdTimingPlay+0x130>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	211f      	movs	r1, #31
 800294a:	9100      	str	r1, [sp, #0]
 800294c:	2100      	movs	r1, #0
 800294e:	2000      	movs	r0, #0
 8002950:	f7ff f83a 	bl	80019c8 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 8002954:	2301      	movs	r3, #1
 8002956:	9302      	str	r3, [sp, #8]
 8002958:	2310      	movs	r3, #16
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	231f      	movs	r3, #31
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002964:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <setUpLcdTimingPlay+0x134>)
 8002966:	2105      	movs	r1, #5
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff fbdf 	bl	800212c <lcd_ShowStr>

	char str1[50] = "ID: ";
 800296e:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <setUpLcdTimingPlay+0x138>)
 8002970:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002978:	6018      	str	r0, [r3, #0]
 800297a:	3304      	adds	r3, #4
 800297c:	7019      	strb	r1, [r3, #0]
 800297e:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002982:	222d      	movs	r2, #45	; 0x2d
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f006 ffd2 	bl	8009930 <memset>
	char *str2 = convert2str(ID);
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <setUpLcdTimingPlay+0x13c>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fed3 	bl	800273c <convert2str>
 8002996:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002998:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800299c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800299e:	4618      	mov	r0, r3
 80029a0:	f007 f870 	bl	8009a84 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <setUpLcdTimingPlay+0x140>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b298      	uxth	r0, r3
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <setUpLcdTimingPlay+0x144>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	b299      	uxth	r1, r3
 80029b0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029b4:	2301      	movs	r3, #1
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	2310      	movs	r3, #16
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029c6:	f7ff fbb1 	bl	800212c <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <setUpLcdTimingPlay+0x148>)
 80029cc:	f107 0308 	add.w	r3, r7, #8
 80029d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	222a      	movs	r2, #42	; 0x2a
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f006 ffa5 	bl	8009930 <memset>
	char *str4 = convert2str(0);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fea8 	bl	800273c <convert2str>
 80029ec:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80029f4:	4618      	mov	r0, r3
 80029f6:	f007 f845 	bl	8009a84 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <setUpLcdTimingPlay+0x14c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b298      	uxth	r0, r3
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <setUpLcdTimingPlay+0x150>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	b299      	uxth	r1, r3
 8002a06:	f107 0208 	add.w	r2, r7, #8
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	2310      	movs	r3, #16
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a1c:	f7ff fb86 	bl	800212c <lcd_ShowStr>

	showTiming();
 8002a20:	f003 fa66 	bl	8005ef0 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <setUpLcdTimingPlay+0x154>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b298      	uxth	r0, r3
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <setUpLcdTimingPlay+0x158>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b299      	uxth	r1, r3
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <setUpLcdTimingPlay+0x15c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <setUpLcdTimingPlay+0x160>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4c12      	ldr	r4, [pc, #72]	; (8002a88 <setUpLcdTimingPlay+0x164>)
 8002a3e:	9400      	str	r4, [sp, #0]
 8002a40:	f7ff f99a 	bl	8001d78 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002a44:	f7ff fe92 	bl	800276c <lcdDrawWall>
}
 8002a48:	bf00      	nop
 8002a4a:	377c      	adds	r7, #124	; 0x7c
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	20000018 	.word	0x20000018
 8002a54:	20000028 	.word	0x20000028
 8002a58:	0800af44 	.word	0x0800af44
 8002a5c:	0800aedc 	.word	0x0800aedc
 8002a60:	20000134 	.word	0x20000134
 8002a64:	20000064 	.word	0x20000064
 8002a68:	20000068 	.word	0x20000068
 8002a6c:	0800af10 	.word	0x0800af10
 8002a70:	2000006c 	.word	0x2000006c
 8002a74:	20000070 	.word	0x20000070
 8002a78:	20000074 	.word	0x20000074
 8002a7c:	20000078 	.word	0x20000078
 8002a80:	2000007c 	.word	0x2000007c
 8002a84:	20000080 	.word	0x20000080
 8002a88:	0800dff8 	.word	0x0800dff8

08002a8c <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b0a3      	sub	sp, #140	; 0x8c
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	4603      	mov	r3, r0
 8002a94:	460a      	mov	r2, r1
 8002a96:	80fb      	strh	r3, [r7, #6]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002a9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002aa0:	f7fe ff60 	bl	8001964 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002aa4:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <setUpLcdAdvancePlay+0x12c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <setUpLcdAdvancePlay+0x130>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	211f      	movs	r1, #31
 8002ab2:	9100      	str	r1, [sp, #0]
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe ff86 	bl	80019c8 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 8002abc:	2301      	movs	r3, #1
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	231f      	movs	r3, #31
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002acc:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <setUpLcdAdvancePlay+0x134>)
 8002ace:	2105      	movs	r1, #5
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7ff fb2b 	bl	800212c <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002ad6:	4a3b      	ldr	r2, [pc, #236]	; (8002bc4 <setUpLcdAdvancePlay+0x138>)
 8002ad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae0:	6018      	str	r0, [r3, #0]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	7019      	strb	r1, [r3, #0]
 8002ae6:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002aea:	222d      	movs	r2, #45	; 0x2d
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f006 ff1e 	bl	8009930 <memset>
	char *str2 = convert2str(ID);
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <setUpLcdAdvancePlay+0x13c>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fe1f 	bl	800273c <convert2str>
 8002afe:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002b00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b04:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002b06:	4618      	mov	r0, r3
 8002b08:	f006 ffbc 	bl	8009a84 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <setUpLcdAdvancePlay+0x140>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	b298      	uxth	r0, r3
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <setUpLcdAdvancePlay+0x144>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b299      	uxth	r1, r3
 8002b18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	2310      	movs	r3, #16
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b2e:	f7ff fafd 	bl	800212c <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <setUpLcdAdvancePlay+0x148>)
 8002b34:	f107 0308 	add.w	r3, r7, #8
 8002b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	222a      	movs	r2, #42	; 0x2a
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f006 fef1 	bl	8009930 <memset>
	char *str4 = convert2str(0);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7ff fdf4 	bl	800273c <convert2str>
 8002b54:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f006 ff91 	bl	8009a84 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <setUpLcdAdvancePlay+0x14c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b298      	uxth	r0, r3
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <setUpLcdAdvancePlay+0x150>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	f107 0208 	add.w	r2, r7, #8
 8002b72:	2301      	movs	r3, #1
 8002b74:	9302      	str	r3, [sp, #8]
 8002b76:	2310      	movs	r3, #16
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b84:	f7ff fad2 	bl	800212c <lcd_ShowStr>

	showTiming();
 8002b88:	f003 f9b2 	bl	8005ef0 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <setUpLcdAdvancePlay+0x154>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b298      	uxth	r0, r3
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <setUpLcdAdvancePlay+0x158>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b299      	uxth	r1, r3
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <setUpLcdAdvancePlay+0x15c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <setUpLcdAdvancePlay+0x160>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4c12      	ldr	r4, [pc, #72]	; (8002bf0 <setUpLcdAdvancePlay+0x164>)
 8002ba6:	9400      	str	r4, [sp, #0]
 8002ba8:	f7ff f8e6 	bl	8001d78 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002bac:	f7ff fdde 	bl	800276c <lcdDrawWall>
}
 8002bb0:	bf00      	nop
 8002bb2:	377c      	adds	r7, #124	; 0x7c
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd90      	pop	{r4, r7, pc}
 8002bb8:	20000018 	.word	0x20000018
 8002bbc:	20000028 	.word	0x20000028
 8002bc0:	0800af54 	.word	0x0800af54
 8002bc4:	0800aedc 	.word	0x0800aedc
 8002bc8:	20000134 	.word	0x20000134
 8002bcc:	20000064 	.word	0x20000064
 8002bd0:	20000068 	.word	0x20000068
 8002bd4:	0800af10 	.word	0x0800af10
 8002bd8:	2000006c 	.word	0x2000006c
 8002bdc:	20000070 	.word	0x20000070
 8002be0:	20000074 	.word	0x20000074
 8002be4:	20000078 	.word	0x20000078
 8002be8:	2000007c 	.word	0x2000007c
 8002bec:	20000080 	.word	0x20000080
 8002bf0:	0800dff8 	.word	0x0800dff8

08002bf4 <printScore>:

void printScore()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b094      	sub	sp, #80	; 0x50
 8002bf8:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <printScore+0xd4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d12a      	bne.n	8002c58 <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 8002c02:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <printScore+0xd8>)
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	222a      	movs	r2, #42	; 0x2a
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f006 fe8a 	bl	8009930 <memset>
		char *str4 = convert2str(SCORE);
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <printScore+0xdc>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd8b 	bl	800273c <convert2str>
 8002c26:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f006 ff29 	bl	8009a84 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 24, 0);
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <printScore+0xe0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b298      	uxth	r0, r3
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <printScore+0xe4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3305      	adds	r3, #5
 8002c40:	b299      	uxth	r1, r3
 8002c42:	1d3a      	adds	r2, r7, #4
 8002c44:	2300      	movs	r3, #0
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	2318      	movs	r3, #24
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	231f      	movs	r3, #31
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c54:	f7ff fa6a 	bl	800212c <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <printScore+0xd4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d003      	beq.n	8002c68 <printScore+0x74>
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <printScore+0xd4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d12a      	bne.n	8002cbe <printScore+0xca>
	{
		char str3[50] = "SCORE: ";
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <printScore+0xd8>)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c70:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	222a      	movs	r2, #42	; 0x2a
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 fe57 	bl	8009930 <memset>
		char *str4 = convert2str(SCORE);
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <printScore+0xdc>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fd58 	bl	800273c <convert2str>
 8002c8c:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c92:	4618      	mov	r0, r3
 8002c94:	f006 fef6 	bl	8009a84 <strcat>
		lcd_ShowStr(scoreX, scoreY, str3, RED, BLUE, 16, 0);
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <printScore+0xe0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b298      	uxth	r0, r3
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <printScore+0xe4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	1d3a      	adds	r2, r7, #4
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	2310      	movs	r3, #16
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	231f      	movs	r3, #31
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cb6:	f7ff fa39 	bl	800212c <lcd_ShowStr>

		showTiming();
 8002cba:	f003 f919 	bl	8005ef0 <showTiming>
	}
}
 8002cbe:	bf00      	nop
 8002cc0:	3740      	adds	r7, #64	; 0x40
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000148 	.word	0x20000148
 8002ccc:	0800af10 	.word	0x0800af10
 8002cd0:	20000136 	.word	0x20000136
 8002cd4:	2000006c 	.word	0x2000006c
 8002cd8:	20000070 	.word	0x20000070

08002cdc <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 8002ce2:	4b8f      	ldr	r3, [pc, #572]	; (8002f20 <drawHeadSnake+0x244>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	f200 8114 	bhi.w	8002f14 <drawHeadSnake+0x238>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <drawHeadSnake+0x18>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002e8d 	.word	0x08002e8d
 8002cf8:	08002e0d 	.word	0x08002e0d
 8002cfc:	08002d85 	.word	0x08002d85
 8002d00:	08002d05 	.word	0x08002d05
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d04:	4b86      	ldr	r3, [pc, #536]	; (8002f20 <drawHeadSnake+0x244>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	b298      	uxth	r0, r3
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <drawHeadSnake+0x244>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002d10:	4b83      	ldr	r3, [pc, #524]	; (8002f20 <drawHeadSnake+0x244>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3309      	adds	r3, #9
 8002d18:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <drawHeadSnake+0x244>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3309      	adds	r3, #9
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	f7fe fe4d 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <drawHeadSnake+0x244>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	b298      	uxth	r0, r3
 8002d34:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <drawHeadSnake+0x244>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002d3a:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <drawHeadSnake+0x244>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3304      	adds	r3, #4
 8002d42:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002d44:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <drawHeadSnake+0x244>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2400      	movs	r4, #0
 8002d50:	9400      	str	r4, [sp, #0]
 8002d52:	f7fe fe39 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <drawHeadSnake+0x244>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3305      	adds	r3, #5
 8002d5e:	b298      	uxth	r0, r3
 8002d60:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <drawHeadSnake+0x244>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002d66:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <drawHeadSnake+0x244>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3309      	adds	r3, #9
 8002d6e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002d70:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <drawHeadSnake+0x244>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3304      	adds	r3, #4
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2400      	movs	r4, #0
 8002d7c:	9400      	str	r4, [sp, #0]
 8002d7e:	f7fe fe23 	bl	80019c8 <lcd_Fill>
		break;
 8002d82:	e0c8      	b.n	8002f16 <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <drawHeadSnake+0x244>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	b298      	uxth	r0, r3
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <drawHeadSnake+0x244>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002d90:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <drawHeadSnake+0x244>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3309      	adds	r3, #9
 8002d98:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002d9a:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <drawHeadSnake+0x244>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3309      	adds	r3, #9
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002da8:	9400      	str	r4, [sp, #0]
 8002daa:	f7fe fe0d 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002dae:	4b5c      	ldr	r3, [pc, #368]	; (8002f20 <drawHeadSnake+0x244>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	b298      	uxth	r0, r3
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <drawHeadSnake+0x244>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3305      	adds	r3, #5
 8002dbc:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002dbe:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <drawHeadSnake+0x244>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <drawHeadSnake+0x244>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3309      	adds	r3, #9
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2400      	movs	r4, #0
 8002dd4:	9400      	str	r4, [sp, #0]
 8002dd6:	f7fe fdf7 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <drawHeadSnake+0x244>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3305      	adds	r3, #5
 8002de2:	b298      	uxth	r0, r3
 8002de4:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <drawHeadSnake+0x244>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3305      	adds	r3, #5
 8002dec:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002dee:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <drawHeadSnake+0x244>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3309      	adds	r3, #9
 8002df6:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <drawHeadSnake+0x244>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3309      	adds	r3, #9
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2400      	movs	r4, #0
 8002e04:	9400      	str	r4, [sp, #0]
 8002e06:	f7fe fddf 	bl	80019c8 <lcd_Fill>
		break;
 8002e0a:	e084      	b.n	8002f16 <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <drawHeadSnake+0x244>)
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	b298      	uxth	r0, r3
 8002e12:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <drawHeadSnake+0x244>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002e18:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <drawHeadSnake+0x244>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3309      	adds	r3, #9
 8002e20:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <drawHeadSnake+0x244>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3309      	adds	r3, #9
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002e30:	9400      	str	r4, [sp, #0]
 8002e32:	f7fe fdc9 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <drawHeadSnake+0x244>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	b298      	uxth	r0, r3
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <drawHeadSnake+0x244>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <drawHeadSnake+0x244>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3304      	adds	r3, #4
 8002e4a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <drawHeadSnake+0x244>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3304      	adds	r3, #4
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2400      	movs	r4, #0
 8002e58:	9400      	str	r4, [sp, #0]
 8002e5a:	f7fe fdb5 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <drawHeadSnake+0x244>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	b298      	uxth	r0, r3
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <drawHeadSnake+0x244>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3305      	adds	r3, #5
 8002e6c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <drawHeadSnake+0x244>)
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3304      	adds	r3, #4
 8002e76:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <drawHeadSnake+0x244>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3309      	adds	r3, #9
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2400      	movs	r4, #0
 8002e84:	9400      	str	r4, [sp, #0]
 8002e86:	f7fe fd9f 	bl	80019c8 <lcd_Fill>
		break;
 8002e8a:	e044      	b.n	8002f16 <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <drawHeadSnake+0x244>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	b298      	uxth	r0, r3
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <drawHeadSnake+0x244>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <drawHeadSnake+0x244>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3309      	adds	r3, #9
 8002ea0:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <drawHeadSnake+0x244>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3309      	adds	r3, #9
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002eb0:	9400      	str	r4, [sp, #0]
 8002eb2:	f7fe fd89 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <drawHeadSnake+0x244>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3305      	adds	r3, #5
 8002ebe:	b298      	uxth	r0, r3
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <drawHeadSnake+0x244>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <drawHeadSnake+0x244>)
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3309      	adds	r3, #9
 8002ece:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <drawHeadSnake+0x244>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2400      	movs	r4, #0
 8002edc:	9400      	str	r4, [sp, #0]
 8002ede:	f7fe fd73 	bl	80019c8 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <drawHeadSnake+0x244>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3305      	adds	r3, #5
 8002eea:	b298      	uxth	r0, r3
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <drawHeadSnake+0x244>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3305      	adds	r3, #5
 8002ef4:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <drawHeadSnake+0x244>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3309      	adds	r3, #9
 8002efe:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <drawHeadSnake+0x244>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3309      	adds	r3, #9
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2400      	movs	r4, #0
 8002f0c:	9400      	str	r4, [sp, #0]
 8002f0e:	f7fe fd5b 	bl	80019c8 <lcd_Fill>
		break;
 8002f12:	e000      	b.n	8002f16 <drawHeadSnake+0x23a>
	default:
		break;
 8002f14:	bf00      	nop
	}
}
 8002f16:	bf00      	nop
 8002f18:	3704      	adds	r7, #4
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200019d0 	.word	0x200019d0

08002f24 <goLeft>:

void goLeft()
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002f2a:	4b58      	ldr	r3, [pc, #352]	; (800308c <goLeft+0x168>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 80a7 	bne.w	8003082 <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002f34:	4b55      	ldr	r3, [pc, #340]	; (800308c <goLeft+0x168>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <goLeft+0x168>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4798      	blx	r3
			break;
 8002f42:	e09f      	b.n	8003084 <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 8002f44:	4b51      	ldr	r3, [pc, #324]	; (800308c <goLeft+0x168>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e091      	b.n	8003074 <goLeft+0x150>
			{
				if (i == 0)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d128      	bne.n	8002fa8 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002f56:	4a4d      	ldr	r2, [pc, #308]	; (800308c <goLeft+0x168>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3305      	adds	r3, #5
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	f107 020c 	add.w	r2, r7, #12
 8002f64:	3304      	adds	r3, #4
 8002f66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f6a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 8002f6e:	4a47      	ldr	r2, [pc, #284]	; (800308c <goLeft+0x168>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3305      	adds	r3, #5
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f1a3 020a 	sub.w	r2, r3, #10
 8002f7e:	4943      	ldr	r1, [pc, #268]	; (800308c <goLeft+0x168>)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3305      	adds	r3, #5
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8002f8a:	4a40      	ldr	r2, [pc, #256]	; (800308c <goLeft+0x168>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3305      	adds	r3, #5
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	493d      	ldr	r1, [pc, #244]	; (800308c <goLeft+0x168>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002fa2:	f7ff fe9b 	bl	8002cdc <drawHeadSnake>
 8002fa6:	e062      	b.n	800306e <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002fa8:	4a38      	ldr	r2, [pc, #224]	; (800308c <goLeft+0x168>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3305      	adds	r3, #5
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	1d3a      	adds	r2, r7, #4
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fba:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002fbe:	4a33      	ldr	r2, [pc, #204]	; (800308c <goLeft+0x168>)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	f107 020c 	add.w	r2, r7, #12
 8002fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fd2:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002fd6:	f107 030c 	add.w	r3, r7, #12
 8002fda:	1d3a      	adds	r2, r7, #4
 8002fdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fe0:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d123      	bne.n	8003032 <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <goLeft+0x168>)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3305      	adds	r3, #5
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b298      	uxth	r0, r3
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <goLeft+0x168>)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3305      	adds	r3, #5
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <goLeft+0x168>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3305      	adds	r3, #5
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003012:	b29b      	uxth	r3, r3
 8003014:	3309      	adds	r3, #9
 8003016:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003018:	4c1c      	ldr	r4, [pc, #112]	; (800308c <goLeft+0x168>)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3305      	adds	r3, #5
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4423      	add	r3, r4
 8003022:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003024:	b29b      	uxth	r3, r3
 8003026:	3309      	adds	r3, #9
 8003028:	b29b      	uxth	r3, r3
 800302a:	2400      	movs	r4, #0
 800302c:	9400      	str	r4, [sp, #0]
 800302e:	f7fe fccb 	bl	80019c8 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <goLeft+0x168>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	3b01      	subs	r3, #1
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d117      	bne.n	800306e <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <goLeft+0x168>)
 8003040:	331c      	adds	r3, #28
 8003042:	1d3a      	adds	r2, r7, #4
 8003044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003048:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	b298      	uxth	r0, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	b299      	uxth	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	b29b      	uxth	r3, r3
 8003058:	3309      	adds	r3, #9
 800305a:	b29a      	uxth	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	b29b      	uxth	r3, r3
 8003060:	3309      	adds	r3, #9
 8003062:	b29b      	uxth	r3, r3
 8003064:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003068:	9400      	str	r4, [sp, #0]
 800306a:	f7fe fcad 	bl	80019c8 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3301      	adds	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <goLeft+0x168>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	429a      	cmp	r2, r3
 800307c:	f6ff af68 	blt.w	8002f50 <goLeft+0x2c>
					}
				}
			}
			break;
 8003080:	e000      	b.n	8003084 <goLeft+0x160>
		}
	}
 8003082:	bf00      	nop
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}
 800308c:	200019d0 	.word	0x200019d0

08003090 <goRight>:

void goRight()
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <goRight+0x168>)
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 80a7 	bne.w	80031ee <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <goRight+0x168>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d103      	bne.n	80030b0 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <goRight+0x168>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4798      	blx	r3
			break;
 80030ae:	e09f      	b.n	80031f0 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 80030b0:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <goRight+0x168>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e091      	b.n	80031e0 <goRight+0x150>
			{
				if (i == 0)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d128      	bne.n	8003114 <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 80030c2:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <goRight+0x168>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3305      	adds	r3, #5
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	f107 020c 	add.w	r2, r7, #12
 80030d0:	3304      	adds	r3, #4
 80030d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030d6:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 80030da:	4a47      	ldr	r2, [pc, #284]	; (80031f8 <goRight+0x168>)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3305      	adds	r3, #5
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f103 020a 	add.w	r2, r3, #10
 80030ea:	4943      	ldr	r1, [pc, #268]	; (80031f8 <goRight+0x168>)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3305      	adds	r3, #5
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <goRight+0x168>)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3305      	adds	r3, #5
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	493d      	ldr	r1, [pc, #244]	; (80031f8 <goRight+0x168>)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3305      	adds	r3, #5
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800310e:	f7ff fde5 	bl	8002cdc <drawHeadSnake>
 8003112:	e062      	b.n	80031da <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003114:	4a38      	ldr	r2, [pc, #224]	; (80031f8 <goRight+0x168>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	3305      	adds	r3, #5
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	1d3a      	adds	r2, r7, #4
 8003120:	3304      	adds	r3, #4
 8003122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003126:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800312a:	4a33      	ldr	r2, [pc, #204]	; (80031f8 <goRight+0x168>)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3305      	adds	r3, #5
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	f107 020c 	add.w	r2, r7, #12
 800313a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800313e:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	1d3a      	adds	r2, r7, #4
 8003148:	e892 0003 	ldmia.w	r2, {r0, r1}
 800314c:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d123      	bne.n	800319e <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003156:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <goRight+0x168>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3305      	adds	r3, #5
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	b298      	uxth	r0, r3
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <goRight+0x168>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3305      	adds	r3, #5
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003172:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <goRight+0x168>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3305      	adds	r3, #5
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800317e:	b29b      	uxth	r3, r3
 8003180:	3309      	adds	r3, #9
 8003182:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003184:	4c1c      	ldr	r4, [pc, #112]	; (80031f8 <goRight+0x168>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3305      	adds	r3, #5
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4423      	add	r3, r4
 800318e:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003190:	b29b      	uxth	r3, r3
 8003192:	3309      	adds	r3, #9
 8003194:	b29b      	uxth	r3, r3
 8003196:	2400      	movs	r4, #0
 8003198:	9400      	str	r4, [sp, #0]
 800319a:	f7fe fc15 	bl	80019c8 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <goRight+0x168>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d117      	bne.n	80031da <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <goRight+0x168>)
 80031ac:	331c      	adds	r3, #28
 80031ae:	1d3a      	adds	r2, r7, #4
 80031b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031b4:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	b298      	uxth	r0, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	b299      	uxth	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3309      	adds	r3, #9
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3309      	adds	r3, #9
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80031d4:	9400      	str	r4, [sp, #0]
 80031d6:	f7fe fbf7 	bl	80019c8 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <goRight+0x168>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f6ff af68 	blt.w	80030bc <goRight+0x2c>
					}
				}
			}
			break;
 80031ec:	e000      	b.n	80031f0 <goRight+0x160>
		}
	}
 80031ee:	bf00      	nop
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	200019d0 	.word	0x200019d0

080031fc <goUp>:

void goUp()
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003202:	4b58      	ldr	r3, [pc, #352]	; (8003364 <goUp+0x168>)
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 80a7 	bne.w	800335a <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 800320c:	4b55      	ldr	r3, [pc, #340]	; (8003364 <goUp+0x168>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d103      	bne.n	800321c <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 8003214:	4b53      	ldr	r3, [pc, #332]	; (8003364 <goUp+0x168>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4798      	blx	r3
			break;
 800321a:	e09f      	b.n	800335c <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 800321c:	4b51      	ldr	r3, [pc, #324]	; (8003364 <goUp+0x168>)
 800321e:	2203      	movs	r2, #3
 8003220:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e091      	b.n	800334c <goUp+0x150>
			{
				if (i == 0)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d128      	bne.n	8003280 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800322e:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <goUp+0x168>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	3305      	adds	r3, #5
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	f107 020c 	add.w	r2, r7, #12
 800323c:	3304      	adds	r3, #4
 800323e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003242:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8003246:	4a47      	ldr	r2, [pc, #284]	; (8003364 <goUp+0x168>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3305      	adds	r3, #5
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4944      	ldr	r1, [pc, #272]	; (8003364 <goUp+0x168>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3305      	adds	r3, #5
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 800325e:	4a41      	ldr	r2, [pc, #260]	; (8003364 <goUp+0x168>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3305      	adds	r3, #5
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f1a3 020a 	sub.w	r2, r3, #10
 800326e:	493d      	ldr	r1, [pc, #244]	; (8003364 <goUp+0x168>)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3305      	adds	r3, #5
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800327a:	f7ff fd2f 	bl	8002cdc <drawHeadSnake>
 800327e:	e062      	b.n	8003346 <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003280:	4a38      	ldr	r2, [pc, #224]	; (8003364 <goUp+0x168>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3305      	adds	r3, #5
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	1d3a      	adds	r2, r7, #4
 800328c:	3304      	adds	r3, #4
 800328e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003292:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003296:	4a33      	ldr	r2, [pc, #204]	; (8003364 <goUp+0x168>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3305      	adds	r3, #5
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	f107 020c 	add.w	r2, r7, #12
 80032a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032aa:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	1d3a      	adds	r2, r7, #4
 80032b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b8:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d123      	bne.n	800330a <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80032c2:	4a28      	ldr	r2, [pc, #160]	; (8003364 <goUp+0x168>)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3305      	adds	r3, #5
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	b298      	uxth	r0, r3
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <goUp+0x168>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3305      	adds	r3, #5
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <goUp+0x168>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3305      	adds	r3, #5
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3309      	adds	r3, #9
 80032ee:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80032f0:	4c1c      	ldr	r4, [pc, #112]	; (8003364 <goUp+0x168>)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3305      	adds	r3, #5
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4423      	add	r3, r4
 80032fa:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3309      	adds	r3, #9
 8003300:	b29b      	uxth	r3, r3
 8003302:	2400      	movs	r4, #0
 8003304:	9400      	str	r4, [sp, #0]
 8003306:	f7fe fb5f 	bl	80019c8 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <goUp+0x168>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	3b01      	subs	r3, #1
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	429a      	cmp	r2, r3
 8003314:	d117      	bne.n	8003346 <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <goUp+0x168>)
 8003318:	331c      	adds	r3, #28
 800331a:	1d3a      	adds	r2, r7, #4
 800331c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003320:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	b298      	uxth	r0, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	b299      	uxth	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	b29b      	uxth	r3, r3
 8003330:	3309      	adds	r3, #9
 8003332:	b29a      	uxth	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	b29b      	uxth	r3, r3
 8003338:	3309      	adds	r3, #9
 800333a:	b29b      	uxth	r3, r3
 800333c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003340:	9400      	str	r4, [sp, #0]
 8003342:	f7fe fb41 	bl	80019c8 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3301      	adds	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <goUp+0x168>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	429a      	cmp	r2, r3
 8003354:	f6ff af68 	blt.w	8003228 <goUp+0x2c>
					}
				}
			}
			break;
 8003358:	e000      	b.n	800335c <goUp+0x160>
		}
	}
 800335a:	bf00      	nop
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}
 8003364:	200019d0 	.word	0x200019d0

08003368 <goDown>:

void goDown()
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800336e:	4b58      	ldr	r3, [pc, #352]	; (80034d0 <goDown+0x168>)
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 80a7 	bne.w	80034c6 <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003378:	4b55      	ldr	r3, [pc, #340]	; (80034d0 <goDown+0x168>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d103      	bne.n	8003388 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <goDown+0x168>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4798      	blx	r3
			break;
 8003386:	e09f      	b.n	80034c8 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <goDown+0x168>)
 800338a:	2202      	movs	r2, #2
 800338c:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e091      	b.n	80034b8 <goDown+0x150>
			{
				if (i == 0)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d128      	bne.n	80033ec <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800339a:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <goDown+0x168>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	3305      	adds	r3, #5
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	f107 020c 	add.w	r2, r7, #12
 80033a8:	3304      	adds	r3, #4
 80033aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033ae:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 80033b2:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <goDown+0x168>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3305      	adds	r3, #5
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4944      	ldr	r1, [pc, #272]	; (80034d0 <goDown+0x168>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3305      	adds	r3, #5
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 80033ca:	4a41      	ldr	r2, [pc, #260]	; (80034d0 <goDown+0x168>)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3305      	adds	r3, #5
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f103 020a 	add.w	r2, r3, #10
 80033da:	493d      	ldr	r1, [pc, #244]	; (80034d0 <goDown+0x168>)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3305      	adds	r3, #5
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80033e6:	f7ff fc79 	bl	8002cdc <drawHeadSnake>
 80033ea:	e062      	b.n	80034b2 <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80033ec:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <goDown+0x168>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3305      	adds	r3, #5
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	1d3a      	adds	r2, r7, #4
 80033f8:	3304      	adds	r3, #4
 80033fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033fe:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003402:	4a33      	ldr	r2, [pc, #204]	; (80034d0 <goDown+0x168>)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3305      	adds	r3, #5
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	3304      	adds	r3, #4
 800340e:	f107 020c 	add.w	r2, r7, #12
 8003412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003416:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	1d3a      	adds	r2, r7, #4
 8003420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003424:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d123      	bne.n	8003476 <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <goDown+0x168>)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3305      	adds	r3, #5
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b298      	uxth	r0, r3
 800343c:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <goDown+0x168>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3305      	adds	r3, #5
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800344a:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <goDown+0x168>)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3305      	adds	r3, #5
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003456:	b29b      	uxth	r3, r3
 8003458:	3309      	adds	r3, #9
 800345a:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800345c:	4c1c      	ldr	r4, [pc, #112]	; (80034d0 <goDown+0x168>)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3305      	adds	r3, #5
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4423      	add	r3, r4
 8003466:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003468:	b29b      	uxth	r3, r3
 800346a:	3309      	adds	r3, #9
 800346c:	b29b      	uxth	r3, r3
 800346e:	2400      	movs	r4, #0
 8003470:	9400      	str	r4, [sp, #0]
 8003472:	f7fe faa9 	bl	80019c8 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <goDown+0x168>)
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	3b01      	subs	r3, #1
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	429a      	cmp	r2, r3
 8003480:	d117      	bne.n	80034b2 <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <goDown+0x168>)
 8003484:	331c      	adds	r3, #28
 8003486:	1d3a      	adds	r2, r7, #4
 8003488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800348c:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	b298      	uxth	r0, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	b299      	uxth	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	b29b      	uxth	r3, r3
 800349c:	3309      	adds	r3, #9
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3309      	adds	r3, #9
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80034ac:	9400      	str	r4, [sp, #0]
 80034ae:	f7fe fa8b 	bl	80019c8 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <goDown+0x168>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	f6ff af68 	blt.w	8003394 <goDown+0x2c>
					}
				}
			}
			break;
 80034c4:	e000      	b.n	80034c8 <goDown+0x160>
		}
	}
 80034c6:	bf00      	nop
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	200019d0 	.word	0x200019d0

080034d4 <resumeGame>:

void resumeGame()
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af02      	add	r7, sp, #8
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 80034da:	4b75      	ldr	r3, [pc, #468]	; (80036b0 <resumeGame+0x1dc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	4b74      	ldr	r3, [pc, #464]	; (80036b4 <resumeGame+0x1e0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	b299      	uxth	r1, r3
 80034ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80034f4:	22f0      	movs	r2, #240	; 0xf0
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fe fa66 	bl	80019c8 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e02c      	b.n	800355c <resumeGame+0x88>
	{
		if (i == 0)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <resumeGame+0x3a>
			drawHeadSnake();
 8003508:	f7ff fbe8 	bl	8002cdc <drawHeadSnake>
 800350c:	e023      	b.n	8003556 <resumeGame+0x82>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800350e:	4a6a      	ldr	r2, [pc, #424]	; (80036b8 <resumeGame+0x1e4>)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3305      	adds	r3, #5
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b298      	uxth	r0, r3
 800351c:	4a66      	ldr	r2, [pc, #408]	; (80036b8 <resumeGame+0x1e4>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3305      	adds	r3, #5
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800352a:	4a63      	ldr	r2, [pc, #396]	; (80036b8 <resumeGame+0x1e4>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3305      	adds	r3, #5
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003536:	b29b      	uxth	r3, r3
 8003538:	3309      	adds	r3, #9
 800353a:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800353c:	4c5e      	ldr	r4, [pc, #376]	; (80036b8 <resumeGame+0x1e4>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3305      	adds	r3, #5
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4423      	add	r3, r4
 8003546:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003548:	b29b      	uxth	r3, r3
 800354a:	3309      	adds	r3, #9
 800354c:	b29b      	uxth	r3, r3
 800354e:	2400      	movs	r4, #0
 8003550:	9400      	str	r4, [sp, #0]
 8003552:	f7fe fa39 	bl	80019c8 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3301      	adds	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <resumeGame+0x1e4>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	429a      	cmp	r2, r3
 8003564:	dbcd      	blt.n	8003502 <resumeGame+0x2e>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	e07e      	b.n	800366a <resumeGame+0x196>
	{
		int X = wallObject.infoWall[i].x;
 800356c:	4953      	ldr	r1, [pc, #332]	; (80036bc <resumeGame+0x1e8>)
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 800357e:	494f      	ldr	r1, [pc, #316]	; (80036bc <resumeGame+0x1e8>)
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3304      	adds	r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	b298      	uxth	r0, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b299      	uxth	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	b29b      	uxth	r3, r3
 800359e:	3309      	adds	r3, #9
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3309      	adds	r3, #9
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80035ae:	9400      	str	r4, [sp, #0]
 80035b0:	f7fe fa0a 	bl	80019c8 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 80035b4:	4941      	ldr	r1, [pc, #260]	; (80036bc <resumeGame+0x1e8>)
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3308      	adds	r3, #8
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d126      	bne.n	8003618 <resumeGame+0x144>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	b298      	uxth	r0, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	330a      	adds	r3, #10
 80035d4:	b299      	uxth	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3309      	adds	r3, #9
 80035dc:	b29a      	uxth	r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3313      	adds	r3, #19
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80035ea:	9400      	str	r4, [sp, #0]
 80035ec:	f7fe f9ec 	bl	80019c8 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	b298      	uxth	r0, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b0a      	subs	r3, #10
 80035fa:	b299      	uxth	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3309      	adds	r3, #9
 8003602:	b29a      	uxth	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003610:	9400      	str	r4, [sp, #0]
 8003612:	f7fe f9d9 	bl	80019c8 <lcd_Fill>
 8003616:	e025      	b.n	8003664 <resumeGame+0x190>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	b29b      	uxth	r3, r3
 800361c:	330a      	adds	r3, #10
 800361e:	b298      	uxth	r0, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b299      	uxth	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	b29b      	uxth	r3, r3
 8003628:	3313      	adds	r3, #19
 800362a:	b29a      	uxth	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	3309      	adds	r3, #9
 8003632:	b29b      	uxth	r3, r3
 8003634:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003638:	9400      	str	r4, [sp, #0]
 800363a:	f7fe f9c5 	bl	80019c8 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b0a      	subs	r3, #10
 8003644:	b298      	uxth	r0, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b299      	uxth	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	3309      	adds	r3, #9
 8003658:	b29b      	uxth	r3, r3
 800365a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800365e:	9400      	str	r4, [sp, #0]
 8003660:	f7fe f9b2 	bl	80019c8 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3301      	adds	r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <resumeGame+0x1e8>)
 800366c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003670:	3310      	adds	r3, #16
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	f6ff af78 	blt.w	800356c <resumeGame+0x98>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 800367c:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <resumeGame+0x1ec>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b298      	uxth	r0, r3
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <resumeGame+0x1f0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	b299      	uxth	r1, r3
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <resumeGame+0x1ec>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	3309      	adds	r3, #9
 8003690:	b29a      	uxth	r2, r3
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <resumeGame+0x1f0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	3309      	adds	r3, #9
 800369a:	b29b      	uxth	r3, r3
 800369c:	f240 14cf 	movw	r4, #463	; 0x1cf
 80036a0:	9400      	str	r4, [sp, #0]
 80036a2:	f7fe f991 	bl	80019c8 <lcd_Fill>
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000028 	.word	0x20000028
 80036b4:	20000038 	.word	0x20000038
 80036b8:	200019d0 	.word	0x200019d0
 80036bc:	20000254 	.word	0x20000254
 80036c0:	20000094 	.word	0x20000094
 80036c4:	20000098 	.word	0x20000098

080036c8 <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <checkOutOfValidRange+0x38>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0c      	blt.n	80036ee <checkOutOfValidRange+0x26>
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <checkOutOfValidRange+0x38>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	2be6      	cmp	r3, #230	; 0xe6
 80036da:	dc08      	bgt.n	80036ee <checkOutOfValidRange+0x26>
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <checkOutOfValidRange+0x38>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b45      	cmp	r3, #69	; 0x45
 80036e2:	dd04      	ble.n	80036ee <checkOutOfValidRange+0x26>
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <checkOutOfValidRange+0x38>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80036ec:	dd01      	ble.n	80036f2 <checkOutOfValidRange+0x2a>
		return 1;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <checkOutOfValidRange+0x2c>
	return 0;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	200019d0 	.word	0x200019d0

08003704 <checkEatBody>:

int checkEatBody()
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 800370a:	2301      	movs	r3, #1
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	e018      	b.n	8003742 <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <checkEatBody+0x58>)
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4911      	ldr	r1, [pc, #68]	; (800375c <checkEatBody+0x58>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3305      	adds	r3, #5
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	440b      	add	r3, r1
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d10b      	bne.n	800373c <checkEatBody+0x38>
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <checkEatBody+0x58>)
 8003726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003728:	490c      	ldr	r1, [pc, #48]	; (800375c <checkEatBody+0x58>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3305      	adds	r3, #5
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d101      	bne.n	800373c <checkEatBody+0x38>
			return 1;
 8003738:	2301      	movs	r3, #1
 800373a:	e008      	b.n	800374e <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3301      	adds	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <checkEatBody+0x58>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	dbe1      	blt.n	8003710 <checkEatBody+0xc>
	return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200019d0 	.word	0x200019d0

08003760 <checkEatFruit>:

int checkEatFruit()
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <checkEatFruit+0x2c>)
 8003766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <checkEatFruit+0x30>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <checkEatFruit+0x20>
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <checkEatFruit+0x2c>)
 8003772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <checkEatFruit+0x34>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d101      	bne.n	8003780 <checkEatFruit+0x20>
		return 1;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <checkEatFruit+0x22>
	return 0;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	200019d0 	.word	0x200019d0
 8003790:	20000094 	.word	0x20000094
 8003794:	20000098 	.word	0x20000098

08003798 <checkHitWall>:

int checkHitWall()
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	e079      	b.n	8003898 <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 80037a4:	4944      	ldr	r1, [pc, #272]	; (80038b8 <checkHitWall+0x120>)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3308      	adds	r3, #8
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d136      	bne.n	8003828 <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <checkHitWall+0x124>)
 80037bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037be:	483e      	ldr	r0, [pc, #248]	; (80038b8 <checkHitWall+0x120>)
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4403      	add	r3, r0
 80037cc:	3304      	adds	r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3b0a      	subs	r3, #10
 80037d2:	4299      	cmp	r1, r3
 80037d4:	d01a      	beq.n	800380c <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <checkHitWall+0x124>)
 80037d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037da:	4837      	ldr	r0, [pc, #220]	; (80038b8 <checkHitWall+0x120>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4403      	add	r3, r0
 80037e8:	3304      	adds	r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 80037ee:	4299      	cmp	r1, r3
 80037f0:	d00c      	beq.n	800380c <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 80037f2:	4b32      	ldr	r3, [pc, #200]	; (80038bc <checkHitWall+0x124>)
 80037f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037f6:	4830      	ldr	r0, [pc, #192]	; (80038b8 <checkHitWall+0x120>)
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4403      	add	r3, r0
 8003804:	3304      	adds	r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003808:	4299      	cmp	r1, r3
 800380a:	d142      	bne.n	8003892 <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <checkHitWall+0x124>)
 800380e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003810:	4829      	ldr	r0, [pc, #164]	; (80038b8 <checkHitWall+0x120>)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4403      	add	r3, r0
 800381e:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003820:	4299      	cmp	r1, r3
 8003822:	d136      	bne.n	8003892 <checkHitWall+0xfa>
			{
				return 1;
 8003824:	2301      	movs	r3, #1
 8003826:	e041      	b.n	80038ac <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003828:	4b24      	ldr	r3, [pc, #144]	; (80038bc <checkHitWall+0x124>)
 800382a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800382c:	4822      	ldr	r0, [pc, #136]	; (80038b8 <checkHitWall+0x120>)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4403      	add	r3, r0
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330a      	adds	r3, #10
 800383e:	4299      	cmp	r1, r3
 8003840:	d018      	beq.n	8003874 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <checkHitWall+0x124>)
 8003844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003846:	481c      	ldr	r0, [pc, #112]	; (80038b8 <checkHitWall+0x120>)
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4403      	add	r3, r0
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003858:	4299      	cmp	r1, r3
 800385a:	d00b      	beq.n	8003874 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <checkHitWall+0x124>)
 800385e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003860:	4815      	ldr	r0, [pc, #84]	; (80038b8 <checkHitWall+0x120>)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4403      	add	r3, r0
 800386e:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003870:	4299      	cmp	r1, r3
 8003872:	d10e      	bne.n	8003892 <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <checkHitWall+0x124>)
 8003876:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003878:	480f      	ldr	r0, [pc, #60]	; (80038b8 <checkHitWall+0x120>)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4403      	add	r3, r0
 8003886:	3304      	adds	r3, #4
 8003888:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 800388a:	4299      	cmp	r1, r3
 800388c:	d101      	bne.n	8003892 <checkHitWall+0xfa>
			{
				return 1;
 800388e:	2301      	movs	r3, #1
 8003890:	e00c      	b.n	80038ac <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3301      	adds	r3, #1
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <checkHitWall+0x120>)
 800389a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800389e:	3310      	adds	r3, #16
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f6ff af7d 	blt.w	80037a4 <checkHitWall+0xc>
			}
		}
	}
	return 0;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000254 	.word	0x20000254
 80038bc:	200019d0 	.word	0x200019d0

080038c0 <checkHead>:

void checkHead()
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 80038c6:	f7ff feff 	bl	80036c8 <checkOutOfValidRange>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(3);
 80038d0:	2003      	movs	r0, #3
 80038d2:	f7fd fe85 	bl	80015e0 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80038d6:	e065      	b.n	80039a4 <checkHead+0xe4>
	}
	if (checkEatBody())
 80038d8:	f7ff ff14 	bl	8003704 <checkEatBody>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(2);
 80038e2:	2002      	movs	r0, #2
 80038e4:	f7fd fe7c 	bl	80015e0 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80038e8:	e05c      	b.n	80039a4 <checkHead+0xe4>
	}
	if (checkHitWall())
 80038ea:	f7ff ff55 	bl	8003798 <checkHitWall>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <checkHead+0x3c>
	{
		// showGameover
		initOverMode(0);
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7fd fe73 	bl	80015e0 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 80038fa:	e053      	b.n	80039a4 <checkHead+0xe4>
	}
	if (checkEatFruit())
 80038fc:	f7ff ff30 	bl	8003760 <checkEatFruit>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d04e      	beq.n	80039a4 <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <checkHead+0xec>)
 8003908:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800390c:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 800390e:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <checkHead+0xf0>)
 8003910:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003914:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <checkHead+0xf4>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	3301      	adds	r3, #1
 800391c:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <checkHead+0xf4>)
 800391e:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 8003920:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <checkHead+0xf4>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	3b01      	subs	r3, #1
 8003926:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <checkHead+0xf4>)
 8003928:	69d2      	ldr	r2, [r2, #28]
 800392a:	4922      	ldr	r1, [pc, #136]	; (80039b4 <checkHead+0xf4>)
 800392c:	3305      	adds	r3, #5
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <checkHead+0xf4>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	3b01      	subs	r3, #1
 800393a:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <checkHead+0xf4>)
 800393c:	6a12      	ldr	r2, [r2, #32]
 800393e:	491d      	ldr	r1, [pc, #116]	; (80039b4 <checkHead+0xf4>)
 8003940:	3305      	adds	r3, #5
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 8003948:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <checkHead+0xf4>)
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	3b01      	subs	r3, #1
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <checkHead+0xf4>)
 8003950:	3305      	adds	r3, #5
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <checkHead+0xf4>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	3b01      	subs	r3, #1
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <checkHead+0xf4>)
 8003962:	3305      	adds	r3, #5
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	b298      	uxth	r0, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b299      	uxth	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	b29b      	uxth	r3, r3
 8003978:	3309      	adds	r3, #9
 800397a:	b29a      	uxth	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	3309      	adds	r3, #9
 8003982:	b29b      	uxth	r3, r3
 8003984:	2400      	movs	r4, #0
 8003986:	9400      	str	r4, [sp, #0]
 8003988:	f7fe f81e 	bl	80019c8 <lcd_Fill>
		flagEat = 1;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <checkHead+0xf8>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

		SCORE++;
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <checkHead+0xfc>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <checkHead+0xfc>)
 800399c:	801a      	strh	r2, [r3, #0]
		printScore();
 800399e:	f7ff f929 	bl	8002bf4 <printScore>
		return;
 80039a2:	bf00      	nop
	}
}
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000094 	.word	0x20000094
 80039b0:	20000098 	.word	0x20000098
 80039b4:	200019d0 	.word	0x200019d0
 80039b8:	2000009c 	.word	0x2000009c
 80039bc:	20000136 	.word	0x20000136

080039c0 <move>:

void move()
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <move+0x4c>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d81b      	bhi.n	8003a04 <move+0x44>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <move+0x14>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f5 	.word	0x080039f5
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	080039e5 	.word	0x080039e5
 80039e0:	080039ed 	.word	0x080039ed
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <move+0x4c>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4798      	blx	r3
		break;
 80039ea:	e00c      	b.n	8003a06 <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <move+0x4c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4798      	blx	r3
		break;
 80039f2:	e008      	b.n	8003a06 <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <move+0x4c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4798      	blx	r3
		break;
 80039fa:	e004      	b.n	8003a06 <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <move+0x4c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4798      	blx	r3
		break;
 8003a02:	e000      	b.n	8003a06 <move+0x46>
	default:
		break;
 8003a04:	bf00      	nop
	}
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200019d0 	.word	0x200019d0

08003a10 <wallInit>:

void wallInit()
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	e01f      	b.n	8003a5c <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 8003a1c:	491d      	ldr	r1, [pc, #116]	; (8003a94 <wallInit+0x84>)
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 8003a2e:	4919      	ldr	r1, [pc, #100]	; (8003a94 <wallInit+0x84>)
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 8003a42:	4914      	ldr	r1, [pc, #80]	; (8003a94 <wallInit+0x84>)
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3308      	adds	r3, #8
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a62:	dbdb      	blt.n	8003a1c <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <wallInit+0x84>)
 8003a66:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
	wallObject.vertical = 1;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <wallInit+0x84>)
 8003a72:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003a76:	3314      	adds	r3, #20
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
	wallObject.stopGenerateWallFlag = 0;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <wallInit+0x84>)
 8003a7e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003a82:	3318      	adds	r3, #24
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000254 	.word	0x20000254

08003a98 <snakeRun>:

void snakeRun()
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af02      	add	r7, sp, #8
	if (buttonForSnake[0])
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <snakeRun+0x114>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <snakeRun+0x22>
	{
		buttonForSnake[0]= 0;
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <snakeRun+0x114>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
		(*snakeObject.GOUP)();
 8003aac:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <snakeRun+0x118>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <snakeRun+0x118>)
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4798      	blx	r3
	// 				}
	// 			}
	// 		}
	// 	}
	// }
}
 8003ab8:	e074      	b.n	8003ba4 <snakeRun+0x10c>
		if (buttonForSnake[1])
 8003aba:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <snakeRun+0x114>)
 8003abc:	885b      	ldrh	r3, [r3, #2]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <snakeRun+0x3e>
			buttonForSnake[1]= 0;
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <snakeRun+0x114>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	805a      	strh	r2, [r3, #2]
			(*snakeObject.GOLEFT)();
 8003ac8:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <snakeRun+0x118>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <snakeRun+0x118>)
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	4798      	blx	r3
}
 8003ad4:	e066      	b.n	8003ba4 <snakeRun+0x10c>
			if (buttonForSnake[2])
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <snakeRun+0x114>)
 8003ad8:	889b      	ldrh	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d025      	beq.n	8003b2a <snakeRun+0x92>
				buttonForSnake[2]= 0;
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <snakeRun+0x114>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	809a      	strh	r2, [r3, #4]
				snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <snakeRun+0x118>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <snakeRun+0x118>)
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
				wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 8003af8:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <snakeRun+0x11c>)
 8003afa:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003afe:	3318      	adds	r3, #24
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf0c      	ite	eq
 8003b06:	2301      	moveq	r3, #1
 8003b08:	2300      	movne	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <snakeRun+0x11c>)
 8003b10:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003b14:	3318      	adds	r3, #24
 8003b16:	601a      	str	r2, [r3, #0]
				snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <snakeRun+0x118>)
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 ff63 	bl	80059e8 <initStopGame>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <snakeRun+0x118>)
 8003b26:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003b28:	e03c      	b.n	8003ba4 <snakeRun+0x10c>
				if (buttonForSnake[3])
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <snakeRun+0x114>)
 8003b2c:	88db      	ldrh	r3, [r3, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <snakeRun+0xa8>
					(*snakeObject.GORIGHT)();
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <snakeRun+0x118>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <snakeRun+0x118>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4798      	blx	r3
}
 8003b3e:	e031      	b.n	8003ba4 <snakeRun+0x10c>
					if (buttonForSnake[4])
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <snakeRun+0x114>)
 8003b42:	891b      	ldrh	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01c      	beq.n	8003b82 <snakeRun+0xea>
						lcd_Clear(WHITE);
 8003b48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b4c:	f7fd ff0a 	bl	8001964 <lcd_Clear>
						xFruit = INT_MIN;
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <snakeRun+0x120>)
 8003b52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b56:	601a      	str	r2, [r3, #0]
						yFruit = INT_MIN;
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <snakeRun+0x124>)
 8003b5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b5e:	601a      	str	r2, [r3, #0]
						snakeInit();
 8003b60:	f000 f830 	bl	8003bc4 <snakeInit>
						wallInit();
 8003b64:	f7ff ff54 	bl	8003a10 <wallInit>
						lcd_Fill(0, 0, 240, 70, RED);
 8003b68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2346      	movs	r3, #70	; 0x46
 8003b70:	22f0      	movs	r2, #240	; 0xf0
 8003b72:	2100      	movs	r1, #0
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fd ff27 	bl	80019c8 <lcd_Fill>
						flagEat = 1;
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <snakeRun+0x128>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
}
 8003b80:	e010      	b.n	8003ba4 <snakeRun+0x10c>
						if (buttonForSnake[5])
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <snakeRun+0x114>)
 8003b84:	895b      	ldrh	r3, [r3, #10]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <snakeRun+0x100>
							(*snakeObject.GODOWN)();
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <snakeRun+0x118>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <snakeRun+0x118>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	4798      	blx	r3
}
 8003b96:	e005      	b.n	8003ba4 <snakeRun+0x10c>
							(*snakeObject.MOVE)();
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <snakeRun+0x118>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <snakeRun+0x118>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4798      	blx	r3
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000019c 	.word	0x2000019c
 8003bb0:	200019d0 	.word	0x200019d0
 8003bb4:	20000254 	.word	0x20000254
 8003bb8:	20000094 	.word	0x20000094
 8003bbc:	20000098 	.word	0x20000098
 8003bc0:	2000009c 	.word	0x2000009c

08003bc4 <snakeInit>:

void snakeInit()
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af02      	add	r7, sp, #8
	srand(rst);
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <snakeInit+0x11c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f005 feb6 	bl	8009940 <srand>
	rst++;
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <snakeInit+0x11c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <snakeInit+0x11c>)
 8003bdc:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <snakeInit+0x120>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <snakeInit+0x124>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <snakeInit+0x124>)
 8003bec:	2214      	movs	r2, #20
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <snakeInit+0x124>)
 8003bf2:	2246      	movs	r2, #70	; 0x46
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 8003bf6:	4b3c      	ldr	r3, [pc, #240]	; (8003ce8 <snakeInit+0x124>)
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8003bfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <snakeInit+0x124>)
 8003bfe:	2246      	movs	r2, #70	; 0x46
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <snakeInit+0x124>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 8003c08:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <snakeInit+0x124>)
 8003c0a:	2246      	movs	r2, #70	; 0x46
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 8003c0e:	2303      	movs	r3, #3
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	e010      	b.n	8003c36 <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 8003c14:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <snakeInit+0x124>)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3305      	adds	r3, #5
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 8003c22:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <snakeInit+0x124>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3305      	adds	r3, #5
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3301      	adds	r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c3c:	dbea      	blt.n	8003c14 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <snakeInit+0x124>)
 8003c40:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <snakeInit+0x128>)
 8003c42:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <snakeInit+0x124>)
 8003c46:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <snakeInit+0x12c>)
 8003c48:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <snakeInit+0x124>)
 8003c4c:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <snakeInit+0x130>)
 8003c4e:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <snakeInit+0x124>)
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <snakeInit+0x134>)
 8003c54:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <snakeInit+0x124>)
 8003c58:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <snakeInit+0x138>)
 8003c5a:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 8003c5c:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <snakeInit+0x124>)
 8003c5e:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <snakeInit+0x13c>)
 8003c60:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 8003c62:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <snakeInit+0x124>)
 8003c64:	2203      	movs	r2, #3
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 8003c68:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <snakeInit+0x124>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	e02c      	b.n	8003cce <snakeInit+0x10a>
	{
		if (i == 0)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <snakeInit+0xbc>
			drawHeadSnake();
 8003c7a:	f7ff f82f 	bl	8002cdc <drawHeadSnake>
 8003c7e:	e023      	b.n	8003cc8 <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <snakeInit+0x124>)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3305      	adds	r3, #5
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	b298      	uxth	r0, r3
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <snakeInit+0x124>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	3305      	adds	r3, #5
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003c9c:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <snakeInit+0x124>)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3305      	adds	r3, #5
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3309      	adds	r3, #9
 8003cac:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003cae:	4c0e      	ldr	r4, [pc, #56]	; (8003ce8 <snakeInit+0x124>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	3305      	adds	r3, #5
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4423      	add	r3, r4
 8003cb8:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3309      	adds	r3, #9
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2400      	movs	r4, #0
 8003cc2:	9400      	str	r4, [sp, #0]
 8003cc4:	f7fd fe80 	bl	80019c8 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	ddcf      	ble.n	8003c74 <snakeInit+0xb0>
	}
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000164 	.word	0x20000164
 8003ce4:	2000009c 	.word	0x2000009c
 8003ce8:	200019d0 	.word	0x200019d0
 8003cec:	08003369 	.word	0x08003369
 8003cf0:	08002f25 	.word	0x08002f25
 8003cf4:	080031fd 	.word	0x080031fd
 8003cf8:	08003091 	.word	0x08003091
 8003cfc:	080039c1 	.word	0x080039c1
 8003d00:	080038c1 	.word	0x080038c1

08003d04 <generateFruit>:

void generateFruit()
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 8003d0a:	4b89      	ldr	r3, [pc, #548]	; (8003f30 <generateFruit+0x22c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	f040 8109 	bne.w	8003f26 <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 8003d18:	f005 fe40 	bl	800999c <rand>
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	4b85      	ldr	r3, [pc, #532]	; (8003f34 <generateFruit+0x230>)
 8003d20:	fb83 2301 	smull	r2, r3, r3, r1
 8003d24:	109a      	asrs	r2, r3, #2
 8003d26:	17cb      	asrs	r3, r1, #31
 8003d28:	1ad2      	subs	r2, r2, r3
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	1aca      	subs	r2, r1, r3
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <generateFruit+0x234>)
 8003d40:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 8003d42:	f005 fe2b 	bl	800999c <rand>
 8003d46:	4601      	mov	r1, r0
 8003d48:	4b7c      	ldr	r3, [pc, #496]	; (8003f3c <generateFruit+0x238>)
 8003d4a:	fb83 2301 	smull	r2, r3, r3, r1
 8003d4e:	10da      	asrs	r2, r3, #3
 8003d50:	17cb      	asrs	r3, r1, #31
 8003d52:	1ad2      	subs	r2, r2, r3
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009a      	lsls	r2, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	1aca      	subs	r2, r1, r3
 8003d60:	3207      	adds	r2, #7
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b74      	ldr	r3, [pc, #464]	; (8003f40 <generateFruit+0x23c>)
 8003d6e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	e021      	b.n	8003dba <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 8003d76:	4a73      	ldr	r2, [pc, #460]	; (8003f44 <generateFruit+0x240>)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3305      	adds	r3, #5
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <generateFruit+0x234>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d114      	bne.n	8003db4 <generateFruit+0xb0>
 8003d8a:	4a6e      	ldr	r2, [pc, #440]	; (8003f44 <generateFruit+0x240>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3305      	adds	r3, #5
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <generateFruit+0x23c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d10a      	bne.n	8003db4 <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 8003d9e:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <generateFruit+0x234>)
 8003da0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003da4:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 8003da6:	4b66      	ldr	r3, [pc, #408]	; (8003f40 <generateFruit+0x23c>)
 8003da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dac:	601a      	str	r2, [r3, #0]
					remind = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
					break;
 8003db2:	e007      	b.n	8003dc4 <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	3301      	adds	r3, #1
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <generateFruit+0x240>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dbd8      	blt.n	8003d76 <generateFruit+0x72>
				}
			}
			if (remind)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 80a9 	bne.w	8003f1e <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	e07f      	b.n	8003ed2 <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 8003dd2:	495d      	ldr	r1, [pc, #372]	; (8003f48 <generateFruit+0x244>)
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3308      	adds	r3, #8
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d139      	bne.n	8003e5c <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 8003de8:	4957      	ldr	r1, [pc, #348]	; (8003f48 <generateFruit+0x244>)
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3304      	adds	r3, #4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <generateFruit+0x23c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d01d      	beq.n	8003e3e <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003e02:	4951      	ldr	r1, [pc, #324]	; (8003f48 <generateFruit+0x244>)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3304      	adds	r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f103 020a 	add.w	r2, r3, #10
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <generateFruit+0x23c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d00e      	beq.n	8003e3e <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003e20:	4949      	ldr	r1, [pc, #292]	; (8003f48 <generateFruit+0x244>)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3304      	adds	r3, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1a3 020a 	sub.w	r2, r3, #10
 8003e36:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <generateFruit+0x23c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d146      	bne.n	8003ecc <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 8003e3e:	4942      	ldr	r1, [pc, #264]	; (8003f48 <generateFruit+0x244>)
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <generateFruit+0x234>)
 8003e50:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d13a      	bne.n	8003ecc <generateFruit+0x1c8>
					{
						remind = 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
						break;
 8003e5a:	e043      	b.n	8003ee4 <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 8003e5c:	493a      	ldr	r1, [pc, #232]	; (8003f48 <generateFruit+0x244>)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <generateFruit+0x234>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d01b      	beq.n	8003eac <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003e74:	4934      	ldr	r1, [pc, #208]	; (8003f48 <generateFruit+0x244>)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f103 020a 	add.w	r2, r3, #10
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <generateFruit+0x234>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d00d      	beq.n	8003eac <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003e90:	492d      	ldr	r1, [pc, #180]	; (8003f48 <generateFruit+0x244>)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1a3 020a 	sub.w	r2, r3, #10
 8003ea4:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <generateFruit+0x234>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10f      	bne.n	8003ecc <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8003eac:	4926      	ldr	r1, [pc, #152]	; (8003f48 <generateFruit+0x244>)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <generateFruit+0x23c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d102      	bne.n	8003ecc <generateFruit+0x1c8>
					{
						remind = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
						break;
 8003eca:	e00b      	b.n	8003ee4 <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <generateFruit+0x244>)
 8003ed4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003ed8:	3310      	adds	r3, #16
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f6ff af77 	blt.w	8003dd2 <generateFruit+0xce>
					}
				}
			}
			if (remind)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11b      	bne.n	8003f22 <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <generateFruit+0x234>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	b298      	uxth	r0, r3
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <generateFruit+0x23c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	b299      	uxth	r1, r3
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <generateFruit+0x234>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3309      	adds	r3, #9
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <generateFruit+0x23c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3309      	adds	r3, #9
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003f0e:	9400      	str	r4, [sp, #0]
 8003f10:	f7fd fd5a 	bl	80019c8 <lcd_Fill>
			flagEat = 0;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <generateFruit+0x22c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
			break;
 8003f1a:	bf00      	nop
		}
	}
}
 8003f1c:	e003      	b.n	8003f26 <generateFruit+0x222>
				continue;
 8003f1e:	bf00      	nop
 8003f20:	e6f8      	b.n	8003d14 <generateFruit+0x10>
				continue;
 8003f22:	bf00      	nop
		{
 8003f24:	e6f6      	b.n	8003d14 <generateFruit+0x10>
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000009c 	.word	0x2000009c
 8003f34:	2aaaaaab 	.word	0x2aaaaaab
 8003f38:	20000094 	.word	0x20000094
 8003f3c:	51eb851f 	.word	0x51eb851f
 8003f40:	20000098 	.word	0x20000098
 8003f44:	200019d0 	.word	0x200019d0
 8003f48:	20000254 	.word	0x20000254

08003f4c <generateWall>:

void generateWall()
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b08d      	sub	sp, #52	; 0x34
 8003f50:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 8003f52:	4b9c      	ldr	r3, [pc, #624]	; (80041c4 <generateWall+0x278>)
 8003f54:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003f58:	3310      	adds	r3, #16
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a9a      	ldr	r2, [pc, #616]	; (80041c8 <generateWall+0x27c>)
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	4293      	cmp	r3, r2
 8003f62:	f280 82dd 	bge.w	8004520 <generateWall+0x5d4>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 8003f66:	4b97      	ldr	r3, [pc, #604]	; (80041c4 <generateWall+0x278>)
 8003f68:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f040 82d6 	bne.w	8004522 <generateWall+0x5d6>
	{
		while (1)
		{
			int remind = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 8003f7a:	f005 fd0f 	bl	800999c <rand>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b92      	ldr	r3, [pc, #584]	; (80041cc <generateWall+0x280>)
 8003f82:	fb83 1302 	smull	r1, r3, r3, r2
 8003f86:	1099      	asrs	r1, r3, #2
 8003f88:	17d3      	asrs	r3, r2, #31
 8003f8a:	1acb      	subs	r3, r1, r3
 8003f8c:	2116      	movs	r1, #22
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 8003fa0:	f005 fcfc 	bl	800999c <rand>
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <generateWall+0x284>)
 8003fa8:	fb83 2301 	smull	r2, r3, r3, r1
 8003fac:	440b      	add	r3, r1
 8003fae:	111a      	asrs	r2, r3, #4
 8003fb0:	17cb      	asrs	r3, r1, #31
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	1aca      	subs	r2, r1, r3
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	e0e8      	b.n	80041a4 <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 8003fd2:	497c      	ldr	r1, [pc, #496]	; (80041c4 <generateWall+0x278>)
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 8003fe4:	4977      	ldr	r1, [pc, #476]	; (80041c4 <generateWall+0x278>)
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 8003ff8:	4b72      	ldr	r3, [pc, #456]	; (80041c4 <generateWall+0x278>)
 8003ffa:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003ffe:	3314      	adds	r3, #20
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d166      	bne.n	80040d4 <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 8004006:	496f      	ldr	r1, [pc, #444]	; (80041c4 <generateWall+0x278>)
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3308      	adds	r3, #8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d120      	bne.n	800405e <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b14      	subs	r3, #20
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	429a      	cmp	r2, r3
 8004024:	d013      	beq.n	800404e <generateWall+0x102>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3314      	adds	r3, #20
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d00e      	beq.n	800404e <generateWall+0x102>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b0a      	subs	r3, #10
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	429a      	cmp	r2, r3
 8004038:	d009      	beq.n	800404e <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	d004      	beq.n	800404e <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	f040 80a8 	bne.w	800419e <generateWall+0x252>
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	429a      	cmp	r2, r3
 8004054:	f040 80a3 	bne.w	800419e <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 8004058:	2301      	movs	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 800405c:	e0ab      	b.n	80041b6 <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b0a      	subs	r3, #10
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	d008      	beq.n	800407a <generateWall+0x12e>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	330a      	adds	r3, #10
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	429a      	cmp	r2, r3
 8004070:	d003      	beq.n	800407a <generateWall+0x12e>
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	429a      	cmp	r2, r3
 8004078:	d103      	bne.n	8004082 <generateWall+0x136>
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	429a      	cmp	r2, r3
 8004080:	d025      	beq.n	80040ce <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	429a      	cmp	r2, r3
 800408a:	d008      	beq.n	800409e <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	330a      	adds	r3, #10
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	429a      	cmp	r2, r3
 8004094:	d003      	beq.n	800409e <generateWall+0x152>
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d104      	bne.n	80040a8 <generateWall+0x15c>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	3b0a      	subs	r3, #10
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d012      	beq.n	80040ce <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d008      	beq.n	80040c4 <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	330a      	adds	r3, #10
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d003      	beq.n	80040c4 <generateWall+0x178>
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d16c      	bne.n	800419e <generateWall+0x252>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	330a      	adds	r3, #10
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d167      	bne.n	800419e <generateWall+0x252>
						{
							remind = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	e064      	b.n	800419e <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 80040d4:	493b      	ldr	r1, [pc, #236]	; (80041c4 <generateWall+0x278>)
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	3308      	adds	r3, #8
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d13a      	bne.n	8004160 <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3b0a      	subs	r3, #10
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d008      	beq.n	8004106 <generateWall+0x1ba>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	330a      	adds	r3, #10
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d003      	beq.n	8004106 <generateWall+0x1ba>
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	429a      	cmp	r2, r3
 8004104:	d103      	bne.n	800410e <generateWall+0x1c2>
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	429a      	cmp	r2, r3
 800410c:	d025      	beq.n	800415a <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	429a      	cmp	r2, r3
 8004116:	d008      	beq.n	800412a <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	330a      	adds	r3, #10
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	429a      	cmp	r2, r3
 8004120:	d003      	beq.n	800412a <generateWall+0x1de>
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d104      	bne.n	8004134 <generateWall+0x1e8>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b0a      	subs	r3, #10
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	429a      	cmp	r2, r3
 8004132:	d012      	beq.n	800415a <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	429a      	cmp	r2, r3
 800413c:	d008      	beq.n	8004150 <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	330a      	adds	r3, #10
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d003      	beq.n	8004150 <generateWall+0x204>
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d126      	bne.n	800419e <generateWall+0x252>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	330a      	adds	r3, #10
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d121      	bne.n	800419e <generateWall+0x252>
						{
							remind = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 800415e:	e02a      	b.n	80041b6 <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3b14      	subs	r3, #20
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	429a      	cmp	r2, r3
 8004168:	d012      	beq.n	8004190 <generateWall+0x244>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3314      	adds	r3, #20
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d00d      	beq.n	8004190 <generateWall+0x244>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	330a      	adds	r3, #10
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	429a      	cmp	r2, r3
 800417c:	d008      	beq.n	8004190 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	429a      	cmp	r2, r3
 8004186:	d003      	beq.n	8004190 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	429a      	cmp	r2, r3
 800418e:	d106      	bne.n	800419e <generateWall+0x252>
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	429a      	cmp	r2, r3
 8004196:	d102      	bne.n	800419e <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 800419c:	e00b      	b.n	80041b6 <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	3301      	adds	r3, #1
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <generateWall+0x278>)
 80041a6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80041aa:	3310      	adds	r3, #16
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	f6ff af0e 	blt.w	8003fd2 <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 81a7 	bne.w	800450c <generateWall+0x5c0>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e049      	b.n	8004258 <generateWall+0x30c>
 80041c4:	20000254 	.word	0x20000254
 80041c8:	20000138 	.word	0x20000138
 80041cc:	2e8ba2e9 	.word	0x2e8ba2e9
 80041d0:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 80041d4:	4aa1      	ldr	r2, [pc, #644]	; (800445c <generateWall+0x510>)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3305      	adds	r3, #5
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 80041e2:	4a9e      	ldr	r2, [pc, #632]	; (800445c <generateWall+0x510>)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3305      	adds	r3, #5
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 80041f0:	4b9b      	ldr	r3, [pc, #620]	; (8004460 <generateWall+0x514>)
 80041f2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80041f6:	3314      	adds	r3, #20
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d114      	bne.n	8004228 <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d125      	bne.n	8004252 <generateWall+0x306>
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d009      	beq.n	8004222 <generateWall+0x2d6>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3b0a      	subs	r3, #10
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d004      	beq.n	8004222 <generateWall+0x2d6>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	330a      	adds	r3, #10
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d117      	bne.n	8004252 <generateWall+0x306>
					{
						remind = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004226:	e01c      	b.n	8004262 <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d110      	bne.n	8004252 <generateWall+0x306>
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d009      	beq.n	800424c <generateWall+0x300>
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	3b0a      	subs	r3, #10
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d004      	beq.n	800424c <generateWall+0x300>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	330a      	adds	r3, #10
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d102      	bne.n	8004252 <generateWall+0x306>
					{
						remind = 1;
 800424c:	2301      	movs	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004250:	e007      	b.n	8004262 <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	4b80      	ldr	r3, [pc, #512]	; (800445c <generateWall+0x510>)
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	429a      	cmp	r2, r3
 8004260:	dbb8      	blt.n	80041d4 <generateWall+0x288>
					}
				}
			}
			if (remind)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8153 	bne.w	8004510 <generateWall+0x5c4>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 800426a:	4b7c      	ldr	r3, [pc, #496]	; (800445c <generateWall+0x510>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d842      	bhi.n	80042f8 <generateWall+0x3ac>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <generateWall+0x32c>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042dd 	.word	0x080042dd
 800427c:	080042c1 	.word	0x080042c1
 8004280:	080042a5 	.word	0x080042a5
 8004284:	08004289 	.word	0x08004289
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 8004288:	4b74      	ldr	r3, [pc, #464]	; (800445c <generateWall+0x510>)
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	429a      	cmp	r2, r3
 8004290:	d134      	bne.n	80042fc <generateWall+0x3b0>
 8004292:	4b72      	ldr	r3, [pc, #456]	; (800445c <generateWall+0x510>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	3b0a      	subs	r3, #10
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	429a      	cmp	r2, r3
 800429c:	d12e      	bne.n	80042fc <generateWall+0x3b0>
					remind = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80042a2:	e02b      	b.n	80042fc <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 80042a4:	4b6d      	ldr	r3, [pc, #436]	; (800445c <generateWall+0x510>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d128      	bne.n	8004300 <generateWall+0x3b4>
 80042ae:	4b6b      	ldr	r3, [pc, #428]	; (800445c <generateWall+0x510>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	330a      	adds	r3, #10
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d122      	bne.n	8004300 <generateWall+0x3b4>
					remind = 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80042be:	e01f      	b.n	8004300 <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 80042c0:	4b66      	ldr	r3, [pc, #408]	; (800445c <generateWall+0x510>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	3b0a      	subs	r3, #10
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d11b      	bne.n	8004304 <generateWall+0x3b8>
 80042cc:	4b63      	ldr	r3, [pc, #396]	; (800445c <generateWall+0x510>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d116      	bne.n	8004304 <generateWall+0x3b8>
					remind = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80042da:	e013      	b.n	8004304 <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 80042dc:	4b5f      	ldr	r3, [pc, #380]	; (800445c <generateWall+0x510>)
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	330a      	adds	r3, #10
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d10f      	bne.n	8004308 <generateWall+0x3bc>
 80042e8:	4b5c      	ldr	r3, [pc, #368]	; (800445c <generateWall+0x510>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10a      	bne.n	8004308 <generateWall+0x3bc>
					remind= 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80042f6:	e007      	b.n	8004308 <generateWall+0x3bc>
				default:
					break;
 80042f8:	bf00      	nop
 80042fa:	e006      	b.n	800430a <generateWall+0x3be>
				break;
 80042fc:	bf00      	nop
 80042fe:	e004      	b.n	800430a <generateWall+0x3be>
				break;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <generateWall+0x3be>
				break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <generateWall+0x3be>
				break;
 8004308:	bf00      	nop
			}
			if (remind)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 8101 	bne.w	8004514 <generateWall+0x5c8>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 8004312:	4b53      	ldr	r3, [pc, #332]	; (8004460 <generateWall+0x514>)
 8004314:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004318:	3314      	adds	r3, #20
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d11a      	bne.n	8004356 <generateWall+0x40a>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 8004320:	4b50      	ldr	r3, [pc, #320]	; (8004464 <generateWall+0x518>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	429a      	cmp	r2, r3
 8004328:	d130      	bne.n	800438c <generateWall+0x440>
 800432a:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <generateWall+0x51c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	f000 80f1 	beq.w	8004518 <generateWall+0x5cc>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f1a3 020a 	sub.w	r2, r3, #10
 800433c:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <generateWall+0x51c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	f000 80e9 	beq.w	8004518 <generateWall+0x5cc>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f103 020a 	add.w	r2, r3, #10
 800434c:	4b46      	ldr	r3, [pc, #280]	; (8004468 <generateWall+0x51c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d11b      	bne.n	800438c <generateWall+0x440>
					continue;
 8004354:	e0e0      	b.n	8004518 <generateWall+0x5cc>
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 8004356:	4b44      	ldr	r3, [pc, #272]	; (8004468 <generateWall+0x51c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d115      	bne.n	800438c <generateWall+0x440>
 8004360:	4b40      	ldr	r3, [pc, #256]	; (8004464 <generateWall+0x518>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	429a      	cmp	r2, r3
 8004368:	f000 80d8 	beq.w	800451c <generateWall+0x5d0>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f1a3 020a 	sub.w	r2, r3, #10
 8004372:	4b3c      	ldr	r3, [pc, #240]	; (8004464 <generateWall+0x518>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	f000 80d0 	beq.w	800451c <generateWall+0x5d0>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f103 020a 	add.w	r2, r3, #10
 8004382:	4b38      	ldr	r3, [pc, #224]	; (8004464 <generateWall+0x518>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	f000 80c8 	beq.w	800451c <generateWall+0x5d0>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <generateWall+0x514>)
 800438e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004392:	3310      	adds	r3, #16
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4932      	ldr	r1, [pc, #200]	; (8004460 <generateWall+0x514>)
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <generateWall+0x514>)
 80043a8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80043ac:	3310      	adds	r3, #16
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	492b      	ldr	r1, [pc, #172]	; (8004460 <generateWall+0x514>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3304      	adds	r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	b298      	uxth	r0, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	b299      	uxth	r1, r3
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3309      	adds	r3, #9
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3309      	adds	r3, #9
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80043de:	9400      	str	r4, [sp, #0]
 80043e0:	f7fd faf2 	bl	80019c8 <lcd_Fill>
			if (wallObject.vertical == 1)
 80043e4:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <generateWall+0x514>)
 80043e6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80043ea:	3314      	adds	r3, #20
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d13c      	bne.n	800446c <generateWall+0x520>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	b298      	uxth	r0, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	330a      	adds	r3, #10
 80043fc:	b299      	uxth	r1, r3
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	b29b      	uxth	r3, r3
 8004402:	3309      	adds	r3, #9
 8004404:	b29a      	uxth	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	b29b      	uxth	r3, r3
 800440a:	3313      	adds	r3, #19
 800440c:	b29b      	uxth	r3, r3
 800440e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004412:	9400      	str	r4, [sp, #0]
 8004414:	f7fd fad8 	bl	80019c8 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	b298      	uxth	r0, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b0a      	subs	r3, #10
 8004422:	b299      	uxth	r1, r3
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	b29b      	uxth	r3, r3
 8004428:	3309      	adds	r3, #9
 800442a:	b29a      	uxth	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004438:	9400      	str	r4, [sp, #0]
 800443a:	f7fd fac5 	bl	80019c8 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <generateWall+0x514>)
 8004440:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004444:	3310      	adds	r3, #16
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4905      	ldr	r1, [pc, #20]	; (8004460 <generateWall+0x514>)
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3308      	adds	r3, #8
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e03b      	b.n	80044d4 <generateWall+0x588>
 800445c:	200019d0 	.word	0x200019d0
 8004460:	20000254 	.word	0x20000254
 8004464:	20000094 	.word	0x20000094
 8004468:	20000098 	.word	0x20000098
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	b29b      	uxth	r3, r3
 8004470:	330a      	adds	r3, #10
 8004472:	b298      	uxth	r0, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b299      	uxth	r1, r3
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	b29b      	uxth	r3, r3
 800447c:	3313      	adds	r3, #19
 800447e:	b29a      	uxth	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	b29b      	uxth	r3, r3
 8004484:	3309      	adds	r3, #9
 8004486:	b29b      	uxth	r3, r3
 8004488:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800448c:	9400      	str	r4, [sp, #0]
 800448e:	f7fd fa9b 	bl	80019c8 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b0a      	subs	r3, #10
 8004498:	b298      	uxth	r0, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	b299      	uxth	r1, r3
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3309      	adds	r3, #9
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80044b2:	9400      	str	r4, [sp, #0]
 80044b4:	f7fd fa88 	bl	80019c8 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <generateWall+0x5dc>)
 80044ba:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80044be:	3310      	adds	r3, #16
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4919      	ldr	r1, [pc, #100]	; (8004528 <generateWall+0x5dc>)
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	3308      	adds	r3, #8
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <generateWall+0x5dc>)
 80044d6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80044da:	3310      	adds	r3, #16
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <generateWall+0x5dc>)
 80044e2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80044e6:	3310      	adds	r3, #16
 80044e8:	601a      	str	r2, [r3, #0]
			wallObject.vertical = !wallObject.vertical;
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <generateWall+0x5dc>)
 80044ec:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80044f0:	3314      	adds	r3, #20
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <generateWall+0x5dc>)
 8004502:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004506:	3314      	adds	r3, #20
 8004508:	601a      	str	r2, [r3, #0]
			break;
 800450a:	e00a      	b.n	8004522 <generateWall+0x5d6>
				continue;
 800450c:	bf00      	nop
 800450e:	e532      	b.n	8003f76 <generateWall+0x2a>
				continue;
 8004510:	bf00      	nop
 8004512:	e530      	b.n	8003f76 <generateWall+0x2a>
				continue;
 8004514:	bf00      	nop
 8004516:	e52e      	b.n	8003f76 <generateWall+0x2a>
					continue;
 8004518:	bf00      	nop
 800451a:	e52c      	b.n	8003f76 <generateWall+0x2a>
					continue;
 800451c:	bf00      	nop
		{
 800451e:	e52a      	b.n	8003f76 <generateWall+0x2a>
		return;
 8004520:	bf00      	nop
		}
	}
}
 8004522:	372c      	adds	r7, #44	; 0x2c
 8004524:	46bd      	mov	sp, r7
 8004526:	bd90      	pop	{r4, r7, pc}
 8004528:	20000254 	.word	0x20000254

0800452c <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <timer_init+0x10>)
 8004532:	f003 fcfd 	bl	8007f30 <HAL_TIM_Base_Start_IT>
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200029f4 	.word	0x200029f4

08004540 <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <setTimerSnakeRun+0x2c>)
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <setTimerSnakeRun+0x2c>)
 8004552:	881a      	ldrh	r2, [r3, #0]
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <setTimerSnakeRun+0x30>)
 8004556:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <setTimerSnakeRun+0x34>)
 800455a:	2200      	movs	r2, #0
 800455c:	801a      	strh	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000172 	.word	0x20000172
 8004570:	20000170 	.word	0x20000170
 8004574:	2000016e 	.word	0x2000016e

08004578 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	4a07      	ldr	r2, [pc, #28]	; (80045ac <setTimerTiming+0x34>)
 800458e:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <setTimerTiming+0x34>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <setTimerTiming+0x38>)
 8004596:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <setTimerTiming+0x3c>)
 800459a:	2200      	movs	r2, #0
 800459c:	801a      	strh	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	2000017c 	.word	0x2000017c
 80045b0:	20000178 	.word	0x20000178
 80045b4:	20000174 	.word	0x20000174

080045b8 <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <setTimerDeTime+0x2c>)
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <setTimerDeTime+0x2c>)
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <setTimerDeTime+0x30>)
 80045ce:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <setTimerDeTime+0x34>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	801a      	strh	r2, [r3, #0]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000184 	.word	0x20000184
 80045e8:	20000182 	.word	0x20000182
 80045ec:	20000180 	.word	0x20000180

080045f0 <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <setTimerGenerateWall+0x2c>)
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <setTimerGenerateWall+0x2c>)
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <setTimerGenerateWall+0x30>)
 8004606:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <setTimerGenerateWall+0x34>)
 800460a:	2200      	movs	r2, #0
 800460c:	801a      	strh	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	2000018a 	.word	0x2000018a
 8004620:	20000188 	.word	0x20000188
 8004624:	20000186 	.word	0x20000186

08004628 <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <setTimerButton+0x2c>)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <setTimerButton+0x2c>)
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <setTimerButton+0x30>)
 800463e:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <setTimerButton+0x34>)
 8004642:	2200      	movs	r2, #0
 8004644:	801a      	strh	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	2000016c 	.word	0x2000016c
 8004658:	2000016a 	.word	0x2000016a
 800465c:	20000168 	.word	0x20000168

08004660 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d161      	bne.n	8004736 <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(timerForSnakeRun > 0)
 8004672:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timerForSnakeRun--;
 800467a:	4b31      	ldr	r3, [pc, #196]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004684:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 8004686:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flagForSnakeRun = 1;
 800468e:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004690:	2201      	movs	r2, #1
 8004692:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 8004694:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004696:	881a      	ldrh	r2, [r3, #0]
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800469a:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 800469c:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timerForButton--;
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80046ae:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flagForButton= 1;
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 80046be:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80046c4:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			timerForTiming--;
 80046ce:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80046d6:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 80046d8:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				flagForTiming = 1;
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_PeriodElapsedCallback+0xa8>
		{
			timerForDeTime--;
 80046ee:	4b1c      	ldr	r3, [pc, #112]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80046f8:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 80046fa:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				flagForDeTime = 1;
 8004702:	4b18      	ldr	r3, [pc, #96]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004704:	2201      	movs	r2, #1
 8004706:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			timerForGenerateWall--;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800471a:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_TIM_PeriodElapsedCallback+0xd2>
			{
				flagForGenerateWall= 1;
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004726:	2201      	movs	r2, #1
 8004728:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004730:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8004732:	f7fd fd9d 	bl	8002270 <led7_Scan>
	}
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000170 	.word	0x20000170
 8004744:	2000016e 	.word	0x2000016e
 8004748:	20000172 	.word	0x20000172
 800474c:	2000016a 	.word	0x2000016a
 8004750:	20000168 	.word	0x20000168
 8004754:	2000016c 	.word	0x2000016c
 8004758:	20000178 	.word	0x20000178
 800475c:	20000174 	.word	0x20000174
 8004760:	20000182 	.word	0x20000182
 8004764:	20000180 	.word	0x20000180
 8004768:	20000188 	.word	0x20000188
 800476c:	20000186 	.word	0x20000186
 8004770:	2000018a 	.word	0x2000018a

08004774 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <MX_SPI1_Init+0x64>)
 800477a:	4a18      	ldr	r2, [pc, #96]	; (80047dc <MX_SPI1_Init+0x68>)
 800477c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800477e:	4b16      	ldr	r3, [pc, #88]	; (80047d8 <MX_SPI1_Init+0x64>)
 8004780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <MX_SPI1_Init+0x64>)
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <MX_SPI1_Init+0x64>)
 800478e:	2200      	movs	r2, #0
 8004790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <MX_SPI1_Init+0x64>)
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <MX_SPI1_Init+0x64>)
 800479a:	2200      	movs	r2, #0
 800479c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047c0:	220a      	movs	r2, #10
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047c4:	4804      	ldr	r0, [pc, #16]	; (80047d8 <MX_SPI1_Init+0x64>)
 80047c6:	f002 fd73 	bl	80072b0 <HAL_SPI_Init>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80047d0:	f7fd ffae 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	2000299c 	.word	0x2000299c
 80047dc:	40013000 	.word	0x40013000

080047e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <HAL_SPI_MspInit+0x84>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d12b      	bne.n	800485a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_SPI_MspInit+0x88>)
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <HAL_SPI_MspInit+0x88>)
 800480c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004810:	6453      	str	r3, [r2, #68]	; 0x44
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <HAL_SPI_MspInit+0x88>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_SPI_MspInit+0x88>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_SPI_MspInit+0x88>)
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	6313      	str	r3, [r2, #48]	; 0x30
 800482e:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_SPI_MspInit+0x88>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800483a:	2338      	movs	r3, #56	; 0x38
 800483c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483e:	2302      	movs	r3, #2
 8004840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004846:	2303      	movs	r3, #3
 8004848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800484a:	2305      	movs	r3, #5
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484e:	f107 0314 	add.w	r3, r7, #20
 8004852:	4619      	mov	r1, r3
 8004854:	4805      	ldr	r0, [pc, #20]	; (800486c <HAL_SPI_MspInit+0x8c>)
 8004856:	f001 ff01 	bl	800665c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800485a:	bf00      	nop
 800485c:	3728      	adds	r7, #40	; 0x28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40013000 	.word	0x40013000
 8004868:	40023800 	.word	0x40023800
 800486c:	40020400 	.word	0x40020400

08004870 <startUI>:
#include "software_timer.h"
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"

void startUI(){
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b093      	sub	sp, #76	; 0x4c
 8004874:	af04      	add	r7, sp, #16
	char str1[50] = "";
 8004876:	2300      	movs	r3, #0
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	222e      	movs	r2, #46	; 0x2e
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f005 f855 	bl	8009930 <memset>

	lcd_Clear(BLACK);
 8004886:	2000      	movs	r0, #0
 8004888:	f7fd f86c 	bl	8001964 <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <startUI+0xe8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	b298      	uxth	r0, r3
 8004892:	4b32      	ldr	r3, [pc, #200]	; (800495c <startUI+0xec>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b299      	uxth	r1, r3
 8004898:	4b31      	ldr	r3, [pc, #196]	; (8004960 <startUI+0xf0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b29a      	uxth	r2, r3
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <startUI+0xf4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4c30      	ldr	r4, [pc, #192]	; (8004968 <startUI+0xf8>)
 80048a6:	9400      	str	r4, [sp, #0]
 80048a8:	f7fd fa66 	bl	8001d78 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80048ac:	2300      	movs	r3, #0
 80048ae:	9302      	str	r3, [sp, #8]
 80048b0:	2318      	movs	r3, #24
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f248 4330 	movw	r3, #33840	; 0x8430
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048be:	4a2b      	ldr	r2, [pc, #172]	; (800496c <startUI+0xfc>)
 80048c0:	2137      	movs	r1, #55	; 0x37
 80048c2:	203c      	movs	r0, #60	; 0x3c
 80048c4:	f7fd fc32 	bl	800212c <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 80048c8:	2300      	movs	r3, #0
 80048ca:	9302      	str	r3, [sp, #8]
 80048cc:	2318      	movs	r3, #24
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	f248 4330 	movw	r3, #33840	; 0x8430
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048da:	4a25      	ldr	r2, [pc, #148]	; (8004970 <startUI+0x100>)
 80048dc:	2164      	movs	r1, #100	; 0x64
 80048de:	2028      	movs	r0, #40	; 0x28
 80048e0:	f7fd fc24 	bl	800212c <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80048e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	23b4      	movs	r3, #180	; 0xb4
 80048ec:	22b4      	movs	r2, #180	; 0xb4
 80048ee:	2196      	movs	r1, #150	; 0x96
 80048f0:	203c      	movs	r0, #60	; 0x3c
 80048f2:	f7fd f93a 	bl	8001b6a <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <startUI+0x104>)
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fd ff1e 	bl	800273c <convert2str>
 8004900:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 8004902:	463b      	mov	r3, r7
 8004904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004906:	4618      	mov	r0, r3
 8004908:	f005 f8bc 	bl	8009a84 <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 800490c:	463a      	mov	r2, r7
 800490e:	2301      	movs	r3, #1
 8004910:	9302      	str	r3, [sp, #8]
 8004912:	2318      	movs	r3, #24
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004920:	2198      	movs	r1, #152	; 0x98
 8004922:	2000      	movs	r0, #0
 8004924:	f7fd fc66 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8004928:	2300      	movs	r3, #0
 800492a:	9302      	str	r3, [sp, #8]
 800492c:	2318      	movs	r3, #24
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	f248 4330 	movw	r3, #33840	; 0x8430
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800493a:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <startUI+0x108>)
 800493c:	21e6      	movs	r1, #230	; 0xe6
 800493e:	2050      	movs	r0, #80	; 0x50
 8004940:	f7fd fbf4 	bl	800212c <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 8004944:	2300      	movs	r3, #0
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	2000      	movs	r0, #0
 800494c:	f001 faae 	bl	8005eac <show7seg>
}
 8004950:	bf00      	nop
 8004952:	373c      	adds	r7, #60	; 0x3c
 8004954:	46bd      	mov	sp, r7
 8004956:	bd90      	pop	{r4, r7, pc}
 8004958:	20000074 	.word	0x20000074
 800495c:	20000078 	.word	0x20000078
 8004960:	2000007c 	.word	0x2000007c
 8004964:	20000080 	.word	0x20000080
 8004968:	0800dff8 	.word	0x0800dff8
 800496c:	0800af64 	.word	0x0800af64
 8004970:	0800af74 	.word	0x0800af74
 8004974:	20000134 	.word	0x20000134
 8004978:	0800af84 	.word	0x0800af84

0800497c <eraseArrow>:

void eraseArrow()
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 8004982:	2300      	movs	r3, #0
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	f240 134b 	movw	r3, #331	; 0x14b
 800498a:	22dd      	movs	r2, #221	; 0xdd
 800498c:	21be      	movs	r1, #190	; 0xbe
 800498e:	20b4      	movs	r0, #180	; 0xb4
 8004990:	f7fd f81a 	bl	80019c8 <lcd_Fill>
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <drawArrow>:

void drawArrow()
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b083      	sub	sp, #12
 80049a0:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 80049a2:	f7ff ffeb 	bl	800497c <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <drawArrow+0x98>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	b298      	uxth	r0, r3
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <drawArrow+0x9c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b299      	uxth	r1, r3
 80049b2:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <drawArrow+0xa0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <drawArrow+0xa4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80049c2:	9400      	str	r4, [sp, #0]
 80049c4:	f7fd f84d 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80049c8:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <drawArrow+0xa0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b298      	uxth	r0, r3
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <drawArrow+0xa4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b299      	uxth	r1, r3
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <drawArrow+0x98>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	b29c      	uxth	r4, r3
 80049da:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <drawArrow+0xa4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <drawArrow+0x9c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f2:	9200      	str	r2, [sp, #0]
 80049f4:	4622      	mov	r2, r4
 80049f6:	f7fd f834 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <drawArrow+0x98>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b298      	uxth	r0, r3
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <drawArrow+0x9c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b299      	uxth	r1, r3
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <drawArrow+0x98>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b29c      	uxth	r4, r3
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <drawArrow+0xa4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <drawArrow+0x9c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a24:	9200      	str	r2, [sp, #0]
 8004a26:	4622      	mov	r2, r4
 8004a28:	f7fd f81b 	bl	8001a62 <lcd_DrawLine>
}
 8004a2c:	bf00      	nop
 8004a2e:	3704      	adds	r7, #4
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}
 8004a34:	20000008 	.word	0x20000008
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	20000004 	.word	0x20000004
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <arrowInPickMode>:

void arrowInPickMode()
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8004a4a:	4bc0      	ldr	r3, [pc, #768]	; (8004d4c <arrowInPickMode+0x308>)
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d117      	bne.n	8004a82 <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 8004a52:	4bbf      	ldr	r3, [pc, #764]	; (8004d50 <arrowInPickMode+0x30c>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8004a58:	4bbe      	ldr	r3, [pc, #760]	; (8004d54 <arrowInPickMode+0x310>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d009      	beq.n	8004a74 <arrowInPickMode+0x30>
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	dc11      	bgt.n	8004a88 <arrowInPickMode+0x44>
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d00e      	beq.n	8004a86 <arrowInPickMode+0x42>
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d10d      	bne.n	8004a88 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 8004a6c:	4bb9      	ldr	r3, [pc, #740]	; (8004d54 <arrowInPickMode+0x310>)
 8004a6e:	2203      	movs	r2, #3
 8004a70:	601a      	str	r2, [r3, #0]
			break;
 8004a72:	e009      	b.n	8004a88 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8004a74:	4bb7      	ldr	r3, [pc, #732]	; (8004d54 <arrowInPickMode+0x310>)
 8004a76:	2204      	movs	r2, #4
 8004a78:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 8004a7a:	4bb7      	ldr	r3, [pc, #732]	; (8004d58 <arrowInPickMode+0x314>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
			break;
 8004a80:	e002      	b.n	8004a88 <arrowInPickMode+0x44>
		}

	}
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <arrowInPickMode+0x44>
			break;
 8004a86:	bf00      	nop
	if(button_count[7] == 1)
 8004a88:	4bb0      	ldr	r3, [pc, #704]	; (8004d4c <arrowInPickMode+0x308>)
 8004a8a:	89db      	ldrh	r3, [r3, #14]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d118      	bne.n	8004ac2 <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 8004a90:	4baf      	ldr	r3, [pc, #700]	; (8004d50 <arrowInPickMode+0x30c>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 8004a96:	4baf      	ldr	r3, [pc, #700]	; (8004d54 <arrowInPickMode+0x310>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b05      	cmp	r3, #5
 8004a9c:	d013      	beq.n	8004ac6 <arrowInPickMode+0x82>
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	dc12      	bgt.n	8004ac8 <arrowInPickMode+0x84>
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d002      	beq.n	8004aac <arrowInPickMode+0x68>
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d007      	beq.n	8004aba <arrowInPickMode+0x76>
 8004aaa:	e00d      	b.n	8004ac8 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 8004aac:	4ba9      	ldr	r3, [pc, #676]	; (8004d54 <arrowInPickMode+0x310>)
 8004aae:	2204      	movs	r2, #4
 8004ab0:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 8004ab2:	4ba9      	ldr	r3, [pc, #676]	; (8004d58 <arrowInPickMode+0x314>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
			break;
 8004ab8:	e006      	b.n	8004ac8 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 8004aba:	4ba6      	ldr	r3, [pc, #664]	; (8004d54 <arrowInPickMode+0x310>)
 8004abc:	2205      	movs	r2, #5
 8004abe:	601a      	str	r2, [r3, #0]
			break;
 8004ac0:	e002      	b.n	8004ac8 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <arrowInPickMode+0x84>
			break;
 8004ac6:	bf00      	nop
	if(flagChange == 1)
 8004ac8:	4ba1      	ldr	r3, [pc, #644]	; (8004d50 <arrowInPickMode+0x30c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f040 813a 	bne.w	8004d46 <arrowInPickMode+0x302>
	{
		switch (arrowMode)
 8004ad2:	4ba0      	ldr	r3, [pc, #640]	; (8004d54 <arrowInPickMode+0x310>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	f000 80e9 	beq.w	8004cae <arrowInPickMode+0x26a>
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	f300 812f 	bgt.w	8004d40 <arrowInPickMode+0x2fc>
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d002      	beq.n	8004aec <arrowInPickMode+0xa8>
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d04f      	beq.n	8004b8a <arrowInPickMode+0x146>
 8004aea:	e129      	b.n	8004d40 <arrowInPickMode+0x2fc>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 8004aec:	4b9b      	ldr	r3, [pc, #620]	; (8004d5c <arrowInPickMode+0x318>)
 8004aee:	22d2      	movs	r2, #210	; 0xd2
 8004af0:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 8004af2:	4b9b      	ldr	r3, [pc, #620]	; (8004d60 <arrowInPickMode+0x31c>)
 8004af4:	22be      	movs	r2, #190	; 0xbe
 8004af6:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004af8:	2300      	movs	r3, #0
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b00:	22f0      	movs	r2, #240	; 0xf0
 8004b02:	21b4      	movs	r1, #180	; 0xb4
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7fc ff5f 	bl	80019c8 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	2318      	movs	r3, #24
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b1c:	4a91      	ldr	r2, [pc, #580]	; (8004d64 <arrowInPickMode+0x320>)
 8004b1e:	21c8      	movs	r1, #200	; 0xc8
 8004b20:	200a      	movs	r0, #10
 8004b22:	f7fd fb03 	bl	800212c <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004b26:	2300      	movs	r3, #0
 8004b28:	9302      	str	r3, [sp, #8]
 8004b2a:	2318      	movs	r3, #24
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b38:	4a8b      	ldr	r2, [pc, #556]	; (8004d68 <arrowInPickMode+0x324>)
 8004b3a:	21fa      	movs	r1, #250	; 0xfa
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f7fd faf5 	bl	800212c <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004b4c:	2282      	movs	r2, #130	; 0x82
 8004b4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004b52:	206e      	movs	r0, #110	; 0x6e
 8004b54:	f7fc ff85 	bl	8001a62 <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004b62:	2278      	movs	r2, #120	; 0x78
 8004b64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004b68:	206e      	movs	r0, #110	; 0x6e
 8004b6a:	f7fc ff7a 	bl	8001a62 <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004b78:	2282      	movs	r2, #130	; 0x82
 8004b7a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004b7e:	2078      	movs	r0, #120	; 0x78
 8004b80:	f7fc ff6f 	bl	8001a62 <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8004b84:	f7ff ff0a 	bl	800499c <drawArrow>
			break;
 8004b88:	e0da      	b.n	8004d40 <arrowInPickMode+0x2fc>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b92:	22f0      	movs	r2, #240	; 0xf0
 8004b94:	21b4      	movs	r1, #180	; 0xb4
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7fc ff16 	bl	80019c8 <lcd_Fill>
			if(flagUpDOwn == 0)
 8004b9c:	4b6e      	ldr	r3, [pc, #440]	; (8004d58 <arrowInPickMode+0x314>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d13d      	bne.n	8004c20 <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 8004ba4:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <arrowInPickMode+0x318>)
 8004ba6:	22d2      	movs	r2, #210	; 0xd2
 8004ba8:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 8004baa:	4b6d      	ldr	r3, [pc, #436]	; (8004d60 <arrowInPickMode+0x31c>)
 8004bac:	22be      	movs	r2, #190	; 0xbe
 8004bae:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	2318      	movs	r3, #24
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	f248 4330 	movw	r3, #33840	; 0x8430
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bc2:	4a69      	ldr	r2, [pc, #420]	; (8004d68 <arrowInPickMode+0x324>)
 8004bc4:	21c8      	movs	r1, #200	; 0xc8
 8004bc6:	200a      	movs	r0, #10
 8004bc8:	f7fd fab0 	bl	800212c <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	2318      	movs	r3, #24
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	f248 4330 	movw	r3, #33840	; 0x8430
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bde:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <arrowInPickMode+0x328>)
 8004be0:	21fa      	movs	r1, #250	; 0xfa
 8004be2:	200a      	movs	r0, #10
 8004be4:	f7fd faa2 	bl	800212c <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	23be      	movs	r3, #190	; 0xbe
 8004bf0:	2282      	movs	r2, #130	; 0x82
 8004bf2:	21be      	movs	r1, #190	; 0xbe
 8004bf4:	206e      	movs	r0, #110	; 0x6e
 8004bf6:	f7fc ff34 	bl	8001a62 <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	23b4      	movs	r3, #180	; 0xb4
 8004c02:	2278      	movs	r2, #120	; 0x78
 8004c04:	21be      	movs	r1, #190	; 0xbe
 8004c06:	206e      	movs	r0, #110	; 0x6e
 8004c08:	f7fc ff2b 	bl	8001a62 <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	23be      	movs	r3, #190	; 0xbe
 8004c14:	2282      	movs	r2, #130	; 0x82
 8004c16:	21b4      	movs	r1, #180	; 0xb4
 8004c18:	2078      	movs	r0, #120	; 0x78
 8004c1a:	f7fc ff22 	bl	8001a62 <lcd_DrawLine>
 8004c1e:	e043      	b.n	8004ca8 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 8004c20:	4b4e      	ldr	r3, [pc, #312]	; (8004d5c <arrowInPickMode+0x318>)
 8004c22:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c26:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8004c28:	4b4d      	ldr	r3, [pc, #308]	; (8004d60 <arrowInPickMode+0x31c>)
 8004c2a:	22f0      	movs	r2, #240	; 0xf0
 8004c2c:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	2318      	movs	r3, #24
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c40:	4a48      	ldr	r2, [pc, #288]	; (8004d64 <arrowInPickMode+0x320>)
 8004c42:	21c8      	movs	r1, #200	; 0xc8
 8004c44:	200a      	movs	r0, #10
 8004c46:	f7fd fa71 	bl	800212c <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9302      	str	r3, [sp, #8]
 8004c4e:	2318      	movs	r3, #24
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c5c:	4a42      	ldr	r2, [pc, #264]	; (8004d68 <arrowInPickMode+0x324>)
 8004c5e:	21fa      	movs	r1, #250	; 0xfa
 8004c60:	200a      	movs	r0, #10
 8004c62:	f7fd fa63 	bl	800212c <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004c70:	2282      	movs	r2, #130	; 0x82
 8004c72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004c76:	206e      	movs	r0, #110	; 0x6e
 8004c78:	f7fc fef3 	bl	8001a62 <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004c86:	2278      	movs	r2, #120	; 0x78
 8004c88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004c8c:	206e      	movs	r0, #110	; 0x6e
 8004c8e:	f7fc fee8 	bl	8001a62 <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004c9c:	2282      	movs	r2, #130	; 0x82
 8004c9e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004ca2:	2078      	movs	r0, #120	; 0x78
 8004ca4:	f7fc fedd 	bl	8001a62 <lcd_DrawLine>
			}

			drawArrow();
 8004ca8:	f7ff fe78 	bl	800499c <drawArrow>
			break;
 8004cac:	e048      	b.n	8004d40 <arrowInPickMode+0x2fc>
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <arrowInPickMode+0x318>)
 8004cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cb4:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 8004cb6:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <arrowInPickMode+0x31c>)
 8004cb8:	22f0      	movs	r2, #240	; 0xf0
 8004cba:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004cc4:	22f0      	movs	r2, #240	; 0xf0
 8004cc6:	21b4      	movs	r1, #180	; 0xb4
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f7fc fe7d 	bl	80019c8 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	2318      	movs	r3, #24
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f248 4330 	movw	r3, #33840	; 0x8430
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ce0:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <arrowInPickMode+0x324>)
 8004ce2:	21c8      	movs	r1, #200	; 0xc8
 8004ce4:	200a      	movs	r0, #10
 8004ce6:	f7fd fa21 	bl	800212c <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 8004cea:	2300      	movs	r3, #0
 8004cec:	9302      	str	r3, [sp, #8]
 8004cee:	2318      	movs	r3, #24
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	f248 4330 	movw	r3, #33840	; 0x8430
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <arrowInPickMode+0x328>)
 8004cfe:	21fa      	movs	r1, #250	; 0xfa
 8004d00:	200a      	movs	r0, #10
 8004d02:	f7fd fa13 	bl	800212c <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	23be      	movs	r3, #190	; 0xbe
 8004d0e:	2282      	movs	r2, #130	; 0x82
 8004d10:	21be      	movs	r1, #190	; 0xbe
 8004d12:	206e      	movs	r0, #110	; 0x6e
 8004d14:	f7fc fea5 	bl	8001a62 <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	23b4      	movs	r3, #180	; 0xb4
 8004d20:	2278      	movs	r2, #120	; 0x78
 8004d22:	21be      	movs	r1, #190	; 0xbe
 8004d24:	206e      	movs	r0, #110	; 0x6e
 8004d26:	f7fc fe9c 	bl	8001a62 <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	23be      	movs	r3, #190	; 0xbe
 8004d32:	2282      	movs	r2, #130	; 0x82
 8004d34:	21b4      	movs	r1, #180	; 0xb4
 8004d36:	2078      	movs	r0, #120	; 0x78
 8004d38:	f7fc fe93 	bl	8001a62 <lcd_DrawLine>

			// draw arrow
			drawArrow();
 8004d3c:	f7ff fe2e 	bl	800499c <drawArrow>
		}
		flagChange = 0;
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <arrowInPickMode+0x30c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
	}
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	200001a8 	.word	0x200001a8
 8004d50:	20000144 	.word	0x20000144
 8004d54:	20000014 	.word	0x20000014
 8004d58:	20000140 	.word	0x20000140
 8004d5c:	2000000c 	.word	0x2000000c
 8004d60:	20000010 	.word	0x20000010
 8004d64:	0800af8c 	.word	0x0800af8c
 8004d68:	0800af9c 	.word	0x0800af9c
 8004d6c:	0800afac 	.word	0x0800afac

08004d70 <pickMode>:

void pickMode(uint16_t id){
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b095      	sub	sp, #84	; 0x54
 8004d74:	af04      	add	r7, sp, #16
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f7fc fdf2 	bl	8001964 <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8004d80:	4b4e      	ldr	r3, [pc, #312]	; (8004ebc <pickMode+0x14c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b298      	uxth	r0, r3
 8004d86:	4b4e      	ldr	r3, [pc, #312]	; (8004ec0 <pickMode+0x150>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b299      	uxth	r1, r3
 8004d8c:	4b4d      	ldr	r3, [pc, #308]	; (8004ec4 <pickMode+0x154>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b4d      	ldr	r3, [pc, #308]	; (8004ec8 <pickMode+0x158>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4c4c      	ldr	r4, [pc, #304]	; (8004ecc <pickMode+0x15c>)
 8004d9a:	9400      	str	r4, [sp, #0]
 8004d9c:	f7fc ffec 	bl	8001d78 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8004da0:	2300      	movs	r3, #0
 8004da2:	9302      	str	r3, [sp, #8]
 8004da4:	2318      	movs	r3, #24
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f248 4330 	movw	r3, #33840	; 0x8430
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004db2:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <pickMode+0x160>)
 8004db4:	2137      	movs	r1, #55	; 0x37
 8004db6:	203c      	movs	r0, #60	; 0x3c
 8004db8:	f7fd f9b8 	bl	800212c <lcd_ShowStr>

	char str1[50] = " ID: ";
 8004dbc:	4a45      	ldr	r2, [pc, #276]	; (8004ed4 <pickMode+0x164>)
 8004dbe:	f107 0308 	add.w	r3, r7, #8
 8004dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dc6:	6018      	str	r0, [r3, #0]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	8019      	strh	r1, [r3, #0]
 8004dcc:	f107 030e 	add.w	r3, r7, #14
 8004dd0:	222c      	movs	r2, #44	; 0x2c
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 fdab 	bl	8009930 <memset>
	char *str2 = convert2str(id);
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd fcad 	bl	800273c <convert2str>
 8004de2:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8004de4:	f107 0308 	add.w	r3, r7, #8
 8004de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dea:	4618      	mov	r0, r3
 8004dec:	f004 fe4a 	bl	8009a84 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	2300      	movs	r3, #0
 8004df6:	9302      	str	r3, [sp, #8]
 8004df8:	2318      	movs	r3, #24
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e06:	2164      	movs	r1, #100	; 0x64
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7fd f9f3 	bl	80021f4 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9302      	str	r3, [sp, #8]
 8004e12:	2318      	movs	r3, #24
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e20:	4a2d      	ldr	r2, [pc, #180]	; (8004ed8 <pickMode+0x168>)
 8004e22:	2196      	movs	r1, #150	; 0x96
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fd f9e5 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9302      	str	r3, [sp, #8]
 8004e2e:	2318      	movs	r3, #24
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e3c:	4a27      	ldr	r2, [pc, #156]	; (8004edc <pickMode+0x16c>)
 8004e3e:	21c8      	movs	r1, #200	; 0xc8
 8004e40:	200a      	movs	r0, #10
 8004e42:	f7fd f973 	bl	800212c <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004e46:	2300      	movs	r3, #0
 8004e48:	9302      	str	r3, [sp, #8]
 8004e4a:	2318      	movs	r3, #24
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e58:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <pickMode+0x170>)
 8004e5a:	21fa      	movs	r1, #250	; 0xfa
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f7fd f965 	bl	800212c <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <pickMode+0x174>)
 8004e64:	22d2      	movs	r2, #210	; 0xd2
 8004e66:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 8004e68:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <pickMode+0x178>)
 8004e6a:	22be      	movs	r2, #190	; 0xbe
 8004e6c:	601a      	str	r2, [r3, #0]
	drawArrow();
 8004e6e:	f7ff fd95 	bl	800499c <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e7c:	2282      	movs	r2, #130	; 0x82
 8004e7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004e82:	206e      	movs	r0, #110	; 0x6e
 8004e84:	f7fc fded 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004e92:	2278      	movs	r2, #120	; 0x78
 8004e94:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004e98:	206e      	movs	r0, #110	; 0x6e
 8004e9a:	f7fc fde2 	bl	8001a62 <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ea8:	2282      	movs	r2, #130	; 0x82
 8004eaa:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004eae:	2078      	movs	r0, #120	; 0x78
 8004eb0:	f7fc fdd7 	bl	8001a62 <lcd_DrawLine>

}
 8004eb4:	bf00      	nop
 8004eb6:	3744      	adds	r7, #68	; 0x44
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	20000074 	.word	0x20000074
 8004ec0:	20000078 	.word	0x20000078
 8004ec4:	2000007c 	.word	0x2000007c
 8004ec8:	20000080 	.word	0x20000080
 8004ecc:	0800dff8 	.word	0x0800dff8
 8004ed0:	0800af64 	.word	0x0800af64
 8004ed4:	0800afc4 	.word	0x0800afc4
 8004ed8:	0800afbc 	.word	0x0800afbc
 8004edc:	0800af8c 	.word	0x0800af8c
 8004ee0:	0800af9c 	.word	0x0800af9c
 8004ee4:	2000000c 	.word	0x2000000c
 8004ee8:	20000010 	.word	0x20000010

08004eec <beginStartGame>:

void beginStartGame()
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b094      	sub	sp, #80	; 0x50
 8004ef0:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8004ef2:	4ba7      	ldr	r3, [pc, #668]	; (8005190 <beginStartGame+0x2a4>)
 8004ef4:	8b9b      	ldrh	r3, [r3, #28]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	f040 81a9 	bne.w	800524e <beginStartGame+0x362>
	{
		switch (statusGame) {
 8004efc:	4ba5      	ldr	r3, [pc, #660]	; (8005194 <beginStartGame+0x2a8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b0a      	cmp	r3, #10
 8004f02:	f200 81a6 	bhi.w	8005252 <beginStartGame+0x366>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <beginStartGame+0x20>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	08004f5f 	.word	0x08004f5f
 8004f14:	08004f71 	.word	0x08004f71
 8004f18:	08005253 	.word	0x08005253
 8004f1c:	08005253 	.word	0x08005253
 8004f20:	08005253 	.word	0x08005253
 8004f24:	0800514b 	.word	0x0800514b
 8004f28:	0800505b 	.word	0x0800505b
 8004f2c:	08004fdd 	.word	0x08004fdd
 8004f30:	08005013 	.word	0x08005013
 8004f34:	080051e3 	.word	0x080051e3
			case INIT:
				statusGame = STARTMODE;
 8004f38:	4b96      	ldr	r3, [pc, #600]	; (8005194 <beginStartGame+0x2a8>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
				ID = 0;
 8004f3e:	4b96      	ldr	r3, [pc, #600]	; (8005198 <beginStartGame+0x2ac>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8004f44:	4b95      	ldr	r3, [pc, #596]	; (800519c <beginStartGame+0x2b0>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8004f4a:	4b95      	ldr	r3, [pc, #596]	; (80051a0 <beginStartGame+0x2b4>)
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8004f50:	4b94      	ldr	r3, [pc, #592]	; (80051a4 <beginStartGame+0x2b8>)
 8004f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f56:	801a      	strh	r2, [r3, #0]
				startUI();
 8004f58:	f7ff fc8a 	bl	8004870 <startUI>
				break;
 8004f5c:	e17e      	b.n	800525c <beginStartGame+0x370>
			case STARTMODE:
				statusGame = PICKMODE;
 8004f5e:	4b8d      	ldr	r3, [pc, #564]	; (8005194 <beginStartGame+0x2a8>)
 8004f60:	2202      	movs	r2, #2
 8004f62:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8004f64:	4b8c      	ldr	r3, [pc, #560]	; (8005198 <beginStartGame+0x2ac>)
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff01 	bl	8004d70 <pickMode>
				break;
 8004f6e:	e175      	b.n	800525c <beginStartGame+0x370>
			case PICKMODE:
				switch (arrowMode)
 8004f70:	4b8b      	ldr	r3, [pc, #556]	; (80051a0 <beginStartGame+0x2b4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d024      	beq.n	8004fc2 <beginStartGame+0xd6>
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	f300 816c 	bgt.w	8005256 <beginStartGame+0x36a>
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d002      	beq.n	8004f88 <beginStartGame+0x9c>
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d011      	beq.n	8004faa <beginStartGame+0xbe>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 8004f86:	e166      	b.n	8005256 <beginStartGame+0x36a>
					oldStatusGame = NORMALMODE;
 8004f88:	4b87      	ldr	r3, [pc, #540]	; (80051a8 <beginStartGame+0x2bc>)
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 8004f8e:	4b81      	ldr	r3, [pc, #516]	; (8005194 <beginStartGame+0x2a8>)
 8004f90:	2203      	movs	r2, #3
 8004f92:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 8004f94:	4b80      	ldr	r3, [pc, #512]	; (8005198 <beginStartGame+0x2ac>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	4a80      	ldr	r2, [pc, #512]	; (800519c <beginStartGame+0x2b0>)
 8004f9a:	8812      	ldrh	r2, [r2, #0]
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd fc08 	bl	80027b4 <setUpLcdNormalPlay>
					snakeInit();
 8004fa4:	f7fe fe0e 	bl	8003bc4 <snakeInit>
					break;
 8004fa8:	e017      	b.n	8004fda <beginStartGame+0xee>
					oldStatusGame = TIMINGMODE;
 8004faa:	4b7f      	ldr	r3, [pc, #508]	; (80051a8 <beginStartGame+0x2bc>)
 8004fac:	2204      	movs	r2, #4
 8004fae:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8004fb0:	4b7c      	ldr	r3, [pc, #496]	; (80051a4 <beginStartGame+0x2b8>)
 8004fb2:	221e      	movs	r2, #30
 8004fb4:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 8004fb6:	4b77      	ldr	r3, [pc, #476]	; (8005194 <beginStartGame+0x2a8>)
 8004fb8:	2208      	movs	r2, #8
 8004fba:	601a      	str	r2, [r3, #0]
					setupTiming();
 8004fbc:	f000 fe82 	bl	8005cc4 <setupTiming>
					break;
 8004fc0:	e00b      	b.n	8004fda <beginStartGame+0xee>
					oldStatusGame = ADVANCEMODE;
 8004fc2:	4b79      	ldr	r3, [pc, #484]	; (80051a8 <beginStartGame+0x2bc>)
 8004fc4:	2205      	movs	r2, #5
 8004fc6:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8004fc8:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <beginStartGame+0x2b8>)
 8004fca:	221e      	movs	r2, #30
 8004fcc:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 8004fce:	4b71      	ldr	r3, [pc, #452]	; (8005194 <beginStartGame+0x2a8>)
 8004fd0:	2209      	movs	r2, #9
 8004fd2:	601a      	str	r2, [r3, #0]
					setupAdvance();
 8004fd4:	f7fb fad0 	bl	8000578 <setupAdvance>
					break;
 8004fd8:	bf00      	nop
				break;
 8004fda:	e13c      	b.n	8005256 <beginStartGame+0x36a>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 8004fdc:	4b71      	ldr	r3, [pc, #452]	; (80051a4 <beginStartGame+0x2b8>)
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fac9 	bl	8004578 <setTimerTiming>
				setTimerDeTime(1000);
 8004fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fea:	f7ff fae5 	bl	80045b8 <setTimerDeTime>
				oldTiming = TIMING;
 8004fee:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <beginStartGame+0x2b8>)
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	4b6e      	ldr	r3, [pc, #440]	; (80051ac <beginStartGame+0x2c0>)
 8004ff4:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 8004ff6:	4b67      	ldr	r3, [pc, #412]	; (8005194 <beginStartGame+0x2a8>)
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 8004ffc:	4b66      	ldr	r3, [pc, #408]	; (8005198 <beginStartGame+0x2ac>)
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	4a68      	ldr	r2, [pc, #416]	; (80051a4 <beginStartGame+0x2b8>)
 8005002:	8812      	ldrh	r2, [r2, #0]
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd fc8c 	bl	8002924 <setUpLcdTimingPlay>
				snakeInit();
 800500c:	f7fe fdda 	bl	8003bc4 <snakeInit>
				break;
 8005010:	e124      	b.n	800525c <beginStartGame+0x370>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 8005012:	4b64      	ldr	r3, [pc, #400]	; (80051a4 <beginStartGame+0x2b8>)
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff faae 	bl	8004578 <setTimerTiming>
				setTimerDeTime(1000);
 800501c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005020:	f7ff faca 	bl	80045b8 <setTimerDeTime>
				setTimerGenerateWall(2000);
 8005024:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005028:	f7ff fae2 	bl	80045f0 <setTimerGenerateWall>
				flagForGenerateWall = 0;
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <beginStartGame+0x2c4>)
 800502e:	2200      	movs	r2, #0
 8005030:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 8005032:	4b5c      	ldr	r3, [pc, #368]	; (80051a4 <beginStartGame+0x2b8>)
 8005034:	881a      	ldrh	r2, [r3, #0]
 8005036:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <beginStartGame+0x2c0>)
 8005038:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 800503a:	4b56      	ldr	r3, [pc, #344]	; (8005194 <beginStartGame+0x2a8>)
 800503c:	2205      	movs	r2, #5
 800503e:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 8005040:	4b55      	ldr	r3, [pc, #340]	; (8005198 <beginStartGame+0x2ac>)
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	4a57      	ldr	r2, [pc, #348]	; (80051a4 <beginStartGame+0x2b8>)
 8005046:	8812      	ldrh	r2, [r2, #0]
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd fd1e 	bl	8002a8c <setUpLcdAdvancePlay>
				wallInit();
 8005050:	f7fe fcde 	bl	8003a10 <wallInit>
				snakeInit();
 8005054:	f7fe fdb6 	bl	8003bc4 <snakeInit>
				break;
 8005058:	e100      	b.n	800525c <beginStartGame+0x370>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 800505a:	4b56      	ldr	r3, [pc, #344]	; (80051b4 <beginStartGame+0x2c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d15f      	bne.n	8005122 <beginStartGame+0x236>
				{
					statusGame = oldStatusGame;
 8005062:	4b51      	ldr	r3, [pc, #324]	; (80051a8 <beginStartGame+0x2bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a4b      	ldr	r2, [pc, #300]	; (8005194 <beginStartGame+0x2a8>)
 8005068:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 800506a:	4b4c      	ldr	r3, [pc, #304]	; (800519c <beginStartGame+0x2b0>)
 800506c:	2200      	movs	r2, #0
 800506e:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <beginStartGame+0x2a8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b05      	cmp	r3, #5
 8005076:	d030      	beq.n	80050da <beginStartGame+0x1ee>
 8005078:	2b05      	cmp	r3, #5
 800507a:	f300 80ee 	bgt.w	800525a <beginStartGame+0x36e>
 800507e:	2b03      	cmp	r3, #3
 8005080:	d002      	beq.n	8005088 <beginStartGame+0x19c>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d00e      	beq.n	80050a4 <beginStartGame+0x1b8>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8005086:	e0e8      	b.n	800525a <beginStartGame+0x36e>
						oldStatusGame = NORMALMODE;
 8005088:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <beginStartGame+0x2bc>)
 800508a:	2203      	movs	r2, #3
 800508c:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 800508e:	4b42      	ldr	r3, [pc, #264]	; (8005198 <beginStartGame+0x2ac>)
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	4a42      	ldr	r2, [pc, #264]	; (800519c <beginStartGame+0x2b0>)
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f7fd fb8b 	bl	80027b4 <setUpLcdNormalPlay>
						snakeInit();
 800509e:	f7fe fd91 	bl	8003bc4 <snakeInit>
						break;
 80050a2:	e051      	b.n	8005148 <beginStartGame+0x25c>
						oldStatusGame = TIMINGMODE;
 80050a4:	4b40      	ldr	r3, [pc, #256]	; (80051a8 <beginStartGame+0x2bc>)
 80050a6:	2204      	movs	r2, #4
 80050a8:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 80050aa:	4b40      	ldr	r3, [pc, #256]	; (80051ac <beginStartGame+0x2c0>)
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <beginStartGame+0x2b8>)
 80050b0:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 80050b2:	4b3c      	ldr	r3, [pc, #240]	; (80051a4 <beginStartGame+0x2b8>)
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fa5e 	bl	8004578 <setTimerTiming>
						setTimerDeTime(1000);
 80050bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050c0:	f7ff fa7a 	bl	80045b8 <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 80050c4:	4b34      	ldr	r3, [pc, #208]	; (8005198 <beginStartGame+0x2ac>)
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	4a36      	ldr	r2, [pc, #216]	; (80051a4 <beginStartGame+0x2b8>)
 80050ca:	8812      	ldrh	r2, [r2, #0]
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd fc28 	bl	8002924 <setUpLcdTimingPlay>
						snakeInit();
 80050d4:	f7fe fd76 	bl	8003bc4 <snakeInit>
						break;
 80050d8:	e036      	b.n	8005148 <beginStartGame+0x25c>
						oldStatusGame = ADVANCEMODE;
 80050da:	4b33      	ldr	r3, [pc, #204]	; (80051a8 <beginStartGame+0x2bc>)
 80050dc:	2205      	movs	r2, #5
 80050de:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 80050e0:	4b32      	ldr	r3, [pc, #200]	; (80051ac <beginStartGame+0x2c0>)
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <beginStartGame+0x2b8>)
 80050e6:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 80050e8:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <beginStartGame+0x2b8>)
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fa43 	bl	8004578 <setTimerTiming>
						setTimerDeTime(1000);
 80050f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050f6:	f7ff fa5f 	bl	80045b8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 80050fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80050fe:	f7ff fa77 	bl	80045f0 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <beginStartGame+0x2c4>)
 8005104:	2200      	movs	r2, #0
 8005106:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 8005108:	4b23      	ldr	r3, [pc, #140]	; (8005198 <beginStartGame+0x2ac>)
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <beginStartGame+0x2b8>)
 800510e:	8812      	ldrh	r2, [r2, #0]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd fcba 	bl	8002a8c <setUpLcdAdvancePlay>
						snakeInit();
 8005118:	f7fe fd54 	bl	8003bc4 <snakeInit>
						wallInit();
 800511c:	f7fe fc78 	bl	8003a10 <wallInit>
						break;
 8005120:	e012      	b.n	8005148 <beginStartGame+0x25c>
					statusGame = STARTMODE;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <beginStartGame+0x2a8>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <beginStartGame+0x2ac>)
 800512a:	2200      	movs	r2, #0
 800512c:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <beginStartGame+0x2b0>)
 8005130:	2200      	movs	r2, #0
 8005132:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <beginStartGame+0x2b4>)
 8005136:	2203      	movs	r2, #3
 8005138:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <beginStartGame+0x2b8>)
 800513c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005140:	801a      	strh	r2, [r3, #0]
					startUI();
 8005142:	f7ff fb95 	bl	8004870 <startUI>
				break;
 8005146:	e088      	b.n	800525a <beginStartGame+0x36e>
 8005148:	e087      	b.n	800525a <beginStartGame+0x36e>
			case STOPMODE:
				if(arrowStopMode == RESUME)
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <beginStartGame+0x2cc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d134      	bne.n	80051bc <beginStartGame+0x2d0>
				{
					statusGame = oldStatusGame;
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <beginStartGame+0x2bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0f      	ldr	r2, [pc, #60]	; (8005194 <beginStartGame+0x2a8>)
 8005158:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <beginStartGame+0x2a8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <beginStartGame+0x27e>
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <beginStartGame+0x2a8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b05      	cmp	r3, #5
 8005168:	d10f      	bne.n	800518a <beginStartGame+0x29e>
					{
						setTimerTiming(TIMING);
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <beginStartGame+0x2b8>)
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fa02 	bl	8004578 <setTimerTiming>
						setTimerDeTime(1000);
 8005174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005178:	f7ff fa1e 	bl	80045b8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 800517c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005180:	f7ff fa36 	bl	80045f0 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <beginStartGame+0x2c4>)
 8005186:	2200      	movs	r2, #0
 8005188:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 800518a:	f7fe f9a3 	bl	80034d4 <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 800518e:	e065      	b.n	800525c <beginStartGame+0x370>
 8005190:	200001a8 	.word	0x200001a8
 8005194:	20000148 	.word	0x20000148
 8005198:	20000134 	.word	0x20000134
 800519c:	20000136 	.word	0x20000136
 80051a0:	20000014 	.word	0x20000014
 80051a4:	20000000 	.word	0x20000000
 80051a8:	2000014c 	.word	0x2000014c
 80051ac:	2000015c 	.word	0x2000015c
 80051b0:	20000186 	.word	0x20000186
 80051b4:	2000013c 	.word	0x2000013c
 80051b8:	2000005c 	.word	0x2000005c
					statusGame = STARTMODE;
 80051bc:	4bb1      	ldr	r3, [pc, #708]	; (8005484 <beginStartGame+0x598>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
					ID = 0;
 80051c2:	4bb1      	ldr	r3, [pc, #708]	; (8005488 <beginStartGame+0x59c>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 80051c8:	4bb0      	ldr	r3, [pc, #704]	; (800548c <beginStartGame+0x5a0>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 80051ce:	4bb0      	ldr	r3, [pc, #704]	; (8005490 <beginStartGame+0x5a4>)
 80051d0:	2203      	movs	r2, #3
 80051d2:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 80051d4:	4baf      	ldr	r3, [pc, #700]	; (8005494 <beginStartGame+0x5a8>)
 80051d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051da:	801a      	strh	r2, [r3, #0]
					startUI();
 80051dc:	f7ff fb48 	bl	8004870 <startUI>
				break;
 80051e0:	e03c      	b.n	800525c <beginStartGame+0x370>
			case EXITMODE:
				if(arrowExitMode == YES)
 80051e2:	4bad      	ldr	r3, [pc, #692]	; (8005498 <beginStartGame+0x5ac>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d112      	bne.n	8005210 <beginStartGame+0x324>
				{
					statusGame = STARTMODE;
 80051ea:	4ba6      	ldr	r3, [pc, #664]	; (8005484 <beginStartGame+0x598>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
					ID = 0;
 80051f0:	4ba5      	ldr	r3, [pc, #660]	; (8005488 <beginStartGame+0x59c>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 80051f6:	4ba5      	ldr	r3, [pc, #660]	; (800548c <beginStartGame+0x5a0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 80051fc:	4ba4      	ldr	r3, [pc, #656]	; (8005490 <beginStartGame+0x5a4>)
 80051fe:	2203      	movs	r2, #3
 8005200:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005202:	4ba4      	ldr	r3, [pc, #656]	; (8005494 <beginStartGame+0x5a8>)
 8005204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005208:	801a      	strh	r2, [r3, #0]
					startUI();
 800520a:	f7ff fb31 	bl	8004870 <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 800520e:	e020      	b.n	8005252 <beginStartGame+0x366>
					statusGame = oldStatusGame;
 8005210:	4ba2      	ldr	r3, [pc, #648]	; (800549c <beginStartGame+0x5b0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a9b      	ldr	r2, [pc, #620]	; (8005484 <beginStartGame+0x598>)
 8005216:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005218:	4b9a      	ldr	r3, [pc, #616]	; (8005484 <beginStartGame+0x598>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d003      	beq.n	8005228 <beginStartGame+0x33c>
 8005220:	4b98      	ldr	r3, [pc, #608]	; (8005484 <beginStartGame+0x598>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b05      	cmp	r3, #5
 8005226:	d10f      	bne.n	8005248 <beginStartGame+0x35c>
						setTimerTiming(TIMING);
 8005228:	4b9a      	ldr	r3, [pc, #616]	; (8005494 <beginStartGame+0x5a8>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff f9a3 	bl	8004578 <setTimerTiming>
						setTimerDeTime(1000);
 8005232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005236:	f7ff f9bf 	bl	80045b8 <setTimerDeTime>
						setTimerGenerateWall(2000);
 800523a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800523e:	f7ff f9d7 	bl	80045f0 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005242:	4b97      	ldr	r3, [pc, #604]	; (80054a0 <beginStartGame+0x5b4>)
 8005244:	2200      	movs	r2, #0
 8005246:	801a      	strh	r2, [r3, #0]
					resumeGame();
 8005248:	f7fe f944 	bl	80034d4 <resumeGame>
				break;
 800524c:	e001      	b.n	8005252 <beginStartGame+0x366>
		}
	}
 800524e:	bf00      	nop
 8005250:	e004      	b.n	800525c <beginStartGame+0x370>
				break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <beginStartGame+0x370>
				break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <beginStartGame+0x370>
				break;
 800525a:	bf00      	nop
	if(statusGame == STARTMODE){
 800525c:	4b89      	ldr	r3, [pc, #548]	; (8005484 <beginStartGame+0x598>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 8161 	bne.w	8005528 <beginStartGame+0x63c>
		char str1[50] = "";
 8005266:	2300      	movs	r3, #0
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	222e      	movs	r2, #46	; 0x2e
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f004 fb5c 	bl	8009930 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 8005278:	4b83      	ldr	r3, [pc, #524]	; (8005488 <beginStartGame+0x59c>)
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005282:	e14d      	b.n	8005520 <beginStartGame+0x634>
		{
			if(button_count[i] == 1)
 8005284:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005286:	4a87      	ldr	r2, [pc, #540]	; (80054a4 <beginStartGame+0x5b8>)
 8005288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 8144 	bne.w	800551a <beginStartGame+0x62e>
			{
				button_count[i] == 0;
				switch (i)
 8005292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005294:	2b0d      	cmp	r3, #13
 8005296:	f200 811c 	bhi.w	80054d2 <beginStartGame+0x5e6>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <beginStartGame+0x3b4>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	08005305 	.word	0x08005305
 80052a8:	08005331 	.word	0x08005331
 80052ac:	08005519 	.word	0x08005519
 80052b0:	0800535d 	.word	0x0800535d
 80052b4:	08005385 	.word	0x08005385
 80052b8:	080053ad 	.word	0x080053ad
 80052bc:	08005519 	.word	0x08005519
 80052c0:	080053d5 	.word	0x080053d5
 80052c4:	08005401 	.word	0x08005401
 80052c8:	0800542d 	.word	0x0800542d
 80052cc:	08005519 	.word	0x08005519
 80052d0:	08005459 	.word	0x08005459
 80052d4:	080054b1 	.word	0x080054b1
				{
					case 0:
						val = val*10 + i+1;
 80052d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052da:	461a      	mov	r2, r3
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	4413      	add	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052e6:	4413      	add	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80052ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fd fa23 	bl	800273c <convert2str>
 80052f6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052fc:	4618      	mov	r0, r3
 80052fe:	f004 fbc1 	bl	8009a84 <strcat>
						break;
 8005302:	e0e6      	b.n	80054d2 <beginStartGame+0x5e6>
					case 1:
						val = val*10 + i+1;
 8005304:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005306:	461a      	mov	r2, r3
 8005308:	0092      	lsls	r2, r2, #2
 800530a:	4413      	add	r3, r2
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005312:	4413      	add	r3, r2
 8005314:	b29b      	uxth	r3, r3
 8005316:	3301      	adds	r3, #1
 8005318:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800531a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800531c:	4618      	mov	r0, r3
 800531e:	f7fd fa0d 	bl	800273c <convert2str>
 8005322:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fbab 	bl	8009a84 <strcat>
						break;
 800532e:	e0d0      	b.n	80054d2 <beginStartGame+0x5e6>
					case 2:
						val = val*10 + i+1;
 8005330:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005332:	461a      	mov	r2, r3
 8005334:	0092      	lsls	r2, r2, #2
 8005336:	4413      	add	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800533e:	4413      	add	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	3301      	adds	r3, #1
 8005344:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005346:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005348:	4618      	mov	r0, r3
 800534a:	f7fd f9f7 	bl	800273c <convert2str>
 800534e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005354:	4618      	mov	r0, r3
 8005356:	f004 fb95 	bl	8009a84 <strcat>
						break;
 800535a:	e0ba      	b.n	80054d2 <beginStartGame+0x5e6>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 800535c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800535e:	461a      	mov	r2, r3
 8005360:	0092      	lsls	r2, r2, #2
 8005362:	4413      	add	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800536a:	4413      	add	r3, r2
 800536c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800536e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd f9e3 	bl	800273c <convert2str>
 8005376:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800537c:	4618      	mov	r0, r3
 800537e:	f004 fb81 	bl	8009a84 <strcat>
						break;
 8005382:	e0a6      	b.n	80054d2 <beginStartGame+0x5e6>
					case 5:
						val = val*10 + i;
 8005384:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005386:	461a      	mov	r2, r3
 8005388:	0092      	lsls	r2, r2, #2
 800538a:	4413      	add	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005392:	4413      	add	r3, r2
 8005394:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005398:	4618      	mov	r0, r3
 800539a:	f7fd f9cf 	bl	800273c <convert2str>
 800539e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a4:	4618      	mov	r0, r3
 80053a6:	f004 fb6d 	bl	8009a84 <strcat>
						break;
 80053aa:	e092      	b.n	80054d2 <beginStartGame+0x5e6>
					case 6:
						val = val*10 + i;
 80053ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053ae:	461a      	mov	r2, r3
 80053b0:	0092      	lsls	r2, r2, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053ba:	4413      	add	r3, r2
 80053bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80053be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fd f9bb 	bl	800273c <convert2str>
 80053c6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053cc:	4618      	mov	r0, r3
 80053ce:	f004 fb59 	bl	8009a84 <strcat>
						break;
 80053d2:	e07e      	b.n	80054d2 <beginStartGame+0x5e6>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 80053d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053d6:	461a      	mov	r2, r3
 80053d8:	0092      	lsls	r2, r2, #2
 80053da:	4413      	add	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053e2:	4413      	add	r3, r2
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80053ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fd f9a5 	bl	800273c <convert2str>
 80053f2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053f8:	4618      	mov	r0, r3
 80053fa:	f004 fb43 	bl	8009a84 <strcat>
						break;
 80053fe:	e068      	b.n	80054d2 <beginStartGame+0x5e6>
					case 9:
						val = val*10 + i-1;
 8005400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005402:	461a      	mov	r2, r3
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	4413      	add	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800540e:	4413      	add	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005416:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005418:	4618      	mov	r0, r3
 800541a:	f7fd f98f 	bl	800273c <convert2str>
 800541e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005424:	4618      	mov	r0, r3
 8005426:	f004 fb2d 	bl	8009a84 <strcat>
						break;
 800542a:	e052      	b.n	80054d2 <beginStartGame+0x5e6>
					case 10:
						val = val*10 + i-1;
 800542c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800542e:	461a      	mov	r2, r3
 8005430:	0092      	lsls	r2, r2, #2
 8005432:	4413      	add	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800543a:	4413      	add	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005442:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005444:	4618      	mov	r0, r3
 8005446:	f7fd f979 	bl	800273c <convert2str>
 800544a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005450:	4618      	mov	r0, r3
 8005452:	f004 fb17 	bl	8009a84 <strcat>
						break;
 8005456:	e03c      	b.n	80054d2 <beginStartGame+0x5e6>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8005458:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <beginStartGame+0x5bc>)
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 8005460:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005462:	4a12      	ldr	r2, [pc, #72]	; (80054ac <beginStartGame+0x5c0>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	08db      	lsrs	r3, r3, #3
 800546a:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800546c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd f964 	bl	800273c <convert2str>
 8005474:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800547a:	4618      	mov	r0, r3
 800547c:	f004 fb02 	bl	8009a84 <strcat>
						break;
 8005480:	e027      	b.n	80054d2 <beginStartGame+0x5e6>
 8005482:	bf00      	nop
 8005484:	20000148 	.word	0x20000148
 8005488:	20000134 	.word	0x20000134
 800548c:	20000136 	.word	0x20000136
 8005490:	20000014 	.word	0x20000014
 8005494:	20000000 	.word	0x20000000
 8005498:	20000060 	.word	0x20000060
 800549c:	2000014c 	.word	0x2000014c
 80054a0:	20000186 	.word	0x20000186
 80054a4:	200001a8 	.word	0x200001a8
 80054a8:	0800aff8 	.word	0x0800aff8
 80054ac:	cccccccd 	.word	0xcccccccd
					case 13:
						val = val*10;
 80054b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054b2:	461a      	mov	r2, r3
 80054b4:	0092      	lsls	r2, r2, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80054bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fd f93c 	bl	800273c <convert2str>
 80054c4:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80054c6:	1d3b      	adds	r3, r7, #4
 80054c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 fada 	bl	8009a84 <strcat>
						break;
 80054d0:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 80054d2:	2300      	movs	r3, #0
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	23b4      	movs	r3, #180	; 0xb4
 80054d8:	22b4      	movs	r2, #180	; 0xb4
 80054da:	2196      	movs	r1, #150	; 0x96
 80054dc:	203c      	movs	r0, #60	; 0x3c
 80054de:	f7fc fa73 	bl	80019c8 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80054e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	23b4      	movs	r3, #180	; 0xb4
 80054ea:	22b4      	movs	r2, #180	; 0xb4
 80054ec:	2196      	movs	r1, #150	; 0x96
 80054ee:	203c      	movs	r0, #60	; 0x3c
 80054f0:	f7fc fb3b 	bl	8001b6a <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 80054f4:	1d3a      	adds	r2, r7, #4
 80054f6:	2301      	movs	r3, #1
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	2318      	movs	r3, #24
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005508:	2198      	movs	r1, #152	; 0x98
 800550a:	2000      	movs	r0, #0
 800550c:	f7fc fe72 	bl	80021f4 <lcd_StrCenter>

				ID = val;
 8005510:	4a1e      	ldr	r2, [pc, #120]	; (800558c <beginStartGame+0x6a0>)
 8005512:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005514:	8013      	strh	r3, [r2, #0]
 8005516:	e000      	b.n	800551a <beginStartGame+0x62e>
						continue;
 8005518:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 800551a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800551c:	3301      	adds	r3, #1
 800551e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005520:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005522:	2b0d      	cmp	r3, #13
 8005524:	f67f aeae 	bls.w	8005284 <beginStartGame+0x398>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <beginStartGame+0x6a4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d101      	bne.n	8005534 <beginStartGame+0x648>
	{
		initTimingMode();
 8005530:	f000 fd1c 	bl	8005f6c <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <beginStartGame+0x6a4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b09      	cmp	r3, #9
 800553a:	d101      	bne.n	8005540 <beginStartGame+0x654>
	{
		initAdvanceMode();
 800553c:	f7fb f99e 	bl	800087c <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <beginStartGame+0x6a4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d00e      	beq.n	8005566 <beginStartGame+0x67a>
	{
		if(statusGame == PICKMODE)
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <beginStartGame+0x6a4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d101      	bne.n	8005554 <beginStartGame+0x668>
		{
			arrowInPickMode();
 8005550:	f7ff fa78 	bl	8004a44 <arrowInPickMode>
		}
		if(button_count[12] == 1)
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <beginStartGame+0x6a8>)
 8005556:	8b1b      	ldrh	r3, [r3, #24]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d104      	bne.n	8005566 <beginStartGame+0x67a>
		{
			statusGame = EXITMODE;
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <beginStartGame+0x6a4>)
 800555e:	220a      	movs	r2, #10
 8005560:	601a      	str	r2, [r3, #0]
			initExit();
 8005562:	f7fb fcc7 	bl	8000ef4 <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <beginStartGame+0x6a4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d009      	beq.n	8005582 <beginStartGame+0x696>
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <beginStartGame+0x6a4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b05      	cmp	r3, #5
 8005574:	d005      	beq.n	8005582 <beginStartGame+0x696>
	{
		setTimerDeTime(0);
 8005576:	2000      	movs	r0, #0
 8005578:	f7ff f81e 	bl	80045b8 <setTimerDeTime>
		setTimerGenerateWall(0);
 800557c:	2000      	movs	r0, #0
 800557e:	f7ff f837 	bl	80045f0 <setTimerGenerateWall>
	}
}
 8005582:	bf00      	nop
 8005584:	3740      	adds	r7, #64	; 0x40
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000134 	.word	0x20000134
 8005590:	20000148 	.word	0x20000148
 8005594:	200001a8 	.word	0x200001a8

08005598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <HAL_MspInit+0x4c>)
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	4a0f      	ldr	r2, [pc, #60]	; (80055e4 <HAL_MspInit+0x4c>)
 80055a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ac:	6453      	str	r3, [r2, #68]	; 0x44
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <HAL_MspInit+0x4c>)
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b6:	607b      	str	r3, [r7, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_MspInit+0x4c>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <HAL_MspInit+0x4c>)
 80055c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_MspInit+0x4c>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800

080055e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055ec:	e7fe      	b.n	80055ec <NMI_Handler+0x4>

080055ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055f2:	e7fe      	b.n	80055f2 <HardFault_Handler+0x4>

080055f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055f8:	e7fe      	b.n	80055f8 <MemManage_Handler+0x4>

080055fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055fa:	b480      	push	{r7}
 80055fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055fe:	e7fe      	b.n	80055fe <BusFault_Handler+0x4>

08005600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005604:	e7fe      	b.n	8005604 <UsageFault_Handler+0x4>

08005606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005634:	f000 fe2a 	bl	800628c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}

0800563c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <TIM2_IRQHandler+0x10>)
 8005642:	f002 fce5 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200029f4 	.word	0x200029f4

08005650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <USART2_IRQHandler+0x10>)
 8005656:	f003 f9ad 	bl	80089b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20002a3c 	.word	0x20002a3c

08005664 <showNotifyStop>:
#include "stop_game.h"
#include "snake.h"
#include "software_timer.h"

void showNotifyStop()
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 800566a:	4b25      	ldr	r3, [pc, #148]	; (8005700 <showNotifyStop+0x9c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	330a      	adds	r3, #10
 8005672:	b299      	uxth	r1, r3
 8005674:	2300      	movs	r3, #0
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	2310      	movs	r3, #16
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	2300      	movs	r3, #0
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005684:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <showNotifyStop+0xa0>)
 8005686:	2000      	movs	r0, #0
 8005688:	f7fc fdb4 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <showNotifyStop+0xa4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	3308      	adds	r3, #8
 8005694:	b298      	uxth	r0, r3
 8005696:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <showNotifyStop+0x9c>)
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	4b19      	ldr	r3, [pc, #100]	; (8005700 <showNotifyStop+0x9c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4413      	add	r3, r2
 80056a0:	0fda      	lsrs	r2, r3, #31
 80056a2:	4413      	add	r3, r2
 80056a4:	105b      	asrs	r3, r3, #1
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b14      	subs	r3, #20
 80056aa:	b299      	uxth	r1, r3
 80056ac:	2301      	movs	r3, #1
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	2310      	movs	r3, #16
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f248 4330 	movw	r3, #33840	; 0x8430
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <showNotifyStop+0xa8>)
 80056be:	f7fc fd35 	bl	800212c <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <showNotifyStop+0xa4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3308      	adds	r3, #8
 80056ca:	b298      	uxth	r0, r3
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <showNotifyStop+0x9c>)
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <showNotifyStop+0x9c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	0fda      	lsrs	r2, r3, #31
 80056d8:	4413      	add	r3, r2
 80056da:	105b      	asrs	r3, r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	330f      	adds	r3, #15
 80056e0:	b299      	uxth	r1, r3
 80056e2:	2301      	movs	r3, #1
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	2310      	movs	r3, #16
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	f248 4330 	movw	r3, #33840	; 0x8430
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2300      	movs	r3, #0
 80056f2:	4a07      	ldr	r2, [pc, #28]	; (8005710 <showNotifyStop+0xac>)
 80056f4:	f7fc fd1a 	bl	800212c <lcd_ShowStr>
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	2000004c 	.word	0x2000004c
 8005704:	0800affc 	.word	0x0800affc
 8005708:	2000003c 	.word	0x2000003c
 800570c:	0800b00c 	.word	0x0800b00c
 8005710:	0800b014 	.word	0x0800b014

08005714 <drawArrowStop>:


void drawArrowStop()
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b087      	sub	sp, #28
 8005718:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800571a:	4b87      	ldr	r3, [pc, #540]	; (8005938 <drawArrowStop+0x224>)
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	4b86      	ldr	r3, [pc, #536]	; (8005938 <drawArrowStop+0x224>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4413      	add	r3, r2
 8005724:	0fda      	lsrs	r2, r3, #31
 8005726:	4413      	add	r3, r2
 8005728:	105b      	asrs	r3, r3, #1
 800572a:	3b08      	subs	r3, #8
 800572c:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 800572e:	4b82      	ldr	r3, [pc, #520]	; (8005938 <drawArrowStop+0x224>)
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	4b81      	ldr	r3, [pc, #516]	; (8005938 <drawArrowStop+0x224>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4413      	add	r3, r2
 8005738:	0fda      	lsrs	r2, r3, #31
 800573a:	4413      	add	r3, r2
 800573c:	105b      	asrs	r3, r3, #1
 800573e:	331c      	adds	r3, #28
 8005740:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 8005742:	4b7e      	ldr	r3, [pc, #504]	; (800593c <drawArrowStop+0x228>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d07a      	beq.n	8005840 <drawArrowStop+0x12c>
 800574a:	2b02      	cmp	r3, #2
 800574c:	f040 80f0 	bne.w	8005930 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8005750:	f7fb fdaa 	bl	80012a8 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 8005754:	4b7a      	ldr	r3, [pc, #488]	; (8005940 <drawArrowStop+0x22c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	3308      	adds	r3, #8
 800575c:	b298      	uxth	r0, r3
 800575e:	4b76      	ldr	r3, [pc, #472]	; (8005938 <drawArrowStop+0x224>)
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	4b75      	ldr	r3, [pc, #468]	; (8005938 <drawArrowStop+0x224>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4413      	add	r3, r2
 8005768:	0fda      	lsrs	r2, r3, #31
 800576a:	4413      	add	r3, r2
 800576c:	105b      	asrs	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b14      	subs	r3, #20
 8005772:	b299      	uxth	r1, r3
 8005774:	2301      	movs	r3, #1
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	2310      	movs	r3, #16
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	f248 4330 	movw	r3, #33840	; 0x8430
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005786:	4a6f      	ldr	r2, [pc, #444]	; (8005944 <drawArrowStop+0x230>)
 8005788:	f7fc fcd0 	bl	800212c <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <drawArrowStop+0x22c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	3308      	adds	r3, #8
 8005794:	b298      	uxth	r0, r3
 8005796:	4b68      	ldr	r3, [pc, #416]	; (8005938 <drawArrowStop+0x224>)
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	4b67      	ldr	r3, [pc, #412]	; (8005938 <drawArrowStop+0x224>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	0fda      	lsrs	r2, r3, #31
 80057a2:	4413      	add	r3, r2
 80057a4:	105b      	asrs	r3, r3, #1
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	330f      	adds	r3, #15
 80057aa:	b299      	uxth	r1, r3
 80057ac:	2301      	movs	r3, #1
 80057ae:	9302      	str	r3, [sp, #8]
 80057b0:	2310      	movs	r3, #16
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	f248 4330 	movw	r3, #33840	; 0x8430
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	4a62      	ldr	r2, [pc, #392]	; (8005948 <drawArrowStop+0x234>)
 80057be:	f7fc fcb5 	bl	800212c <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <drawArrowStop+0x22c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b0f      	subs	r3, #15
 80057ca:	b298      	uxth	r0, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	b299      	uxth	r1, r3
 80057d0:	4b5b      	ldr	r3, [pc, #364]	; (8005940 <drawArrowStop+0x22c>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b0a      	subs	r3, #10
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b05      	subs	r3, #5
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2400      	movs	r4, #0
 80057e4:	9400      	str	r4, [sp, #0]
 80057e6:	f7fc f93c 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80057ea:	4b55      	ldr	r3, [pc, #340]	; (8005940 <drawArrowStop+0x22c>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b0f      	subs	r3, #15
 80057f2:	b298      	uxth	r0, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	b299      	uxth	r1, r3
 80057f8:	4b51      	ldr	r3, [pc, #324]	; (8005940 <drawArrowStop+0x22c>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b0a      	subs	r3, #10
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	b29b      	uxth	r3, r3
 8005806:	3305      	adds	r3, #5
 8005808:	b29b      	uxth	r3, r3
 800580a:	2400      	movs	r4, #0
 800580c:	9400      	str	r4, [sp, #0]
 800580e:	f7fc f928 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8005812:	4b4b      	ldr	r3, [pc, #300]	; (8005940 <drawArrowStop+0x22c>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b0a      	subs	r3, #10
 800581a:	b298      	uxth	r0, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b05      	subs	r3, #5
 8005822:	b299      	uxth	r1, r3
 8005824:	4b46      	ldr	r3, [pc, #280]	; (8005940 <drawArrowStop+0x22c>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b0a      	subs	r3, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	b29b      	uxth	r3, r3
 8005832:	3305      	adds	r3, #5
 8005834:	b29b      	uxth	r3, r3
 8005836:	2400      	movs	r4, #0
 8005838:	9400      	str	r4, [sp, #0]
 800583a:	f7fc f912 	bl	8001a62 <lcd_DrawLine>
		break;
 800583e:	e077      	b.n	8005930 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 8005840:	f7fb fd32 	bl	80012a8 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8005844:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <drawArrowStop+0x22c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	3308      	adds	r3, #8
 800584c:	b298      	uxth	r0, r3
 800584e:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <drawArrowStop+0x224>)
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	4b39      	ldr	r3, [pc, #228]	; (8005938 <drawArrowStop+0x224>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4413      	add	r3, r2
 8005858:	0fda      	lsrs	r2, r3, #31
 800585a:	4413      	add	r3, r2
 800585c:	105b      	asrs	r3, r3, #1
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b14      	subs	r3, #20
 8005862:	b299      	uxth	r1, r3
 8005864:	2301      	movs	r3, #1
 8005866:	9302      	str	r3, [sp, #8]
 8005868:	2310      	movs	r3, #16
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	f248 4330 	movw	r3, #33840	; 0x8430
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	4a33      	ldr	r2, [pc, #204]	; (8005944 <drawArrowStop+0x230>)
 8005876:	f7fc fc59 	bl	800212c <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <drawArrowStop+0x22c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	3308      	adds	r3, #8
 8005882:	b298      	uxth	r0, r3
 8005884:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <drawArrowStop+0x224>)
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <drawArrowStop+0x224>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4413      	add	r3, r2
 800588e:	0fda      	lsrs	r2, r3, #31
 8005890:	4413      	add	r3, r2
 8005892:	105b      	asrs	r3, r3, #1
 8005894:	b29b      	uxth	r3, r3
 8005896:	330f      	adds	r3, #15
 8005898:	b299      	uxth	r1, r3
 800589a:	2301      	movs	r3, #1
 800589c:	9302      	str	r3, [sp, #8]
 800589e:	2310      	movs	r3, #16
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80058ac:	4a26      	ldr	r2, [pc, #152]	; (8005948 <drawArrowStop+0x234>)
 80058ae:	f7fc fc3d 	bl	800212c <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <drawArrowStop+0x22c>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b0f      	subs	r3, #15
 80058ba:	b298      	uxth	r0, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	b299      	uxth	r1, r3
 80058c0:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <drawArrowStop+0x22c>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b0a      	subs	r3, #10
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b05      	subs	r3, #5
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2400      	movs	r4, #0
 80058d4:	9400      	str	r4, [sp, #0]
 80058d6:	f7fc f8c4 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 80058da:	4b19      	ldr	r3, [pc, #100]	; (8005940 <drawArrowStop+0x22c>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b0f      	subs	r3, #15
 80058e2:	b298      	uxth	r0, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b299      	uxth	r1, r3
 80058e8:	4b15      	ldr	r3, [pc, #84]	; (8005940 <drawArrowStop+0x22c>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b0a      	subs	r3, #10
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3305      	adds	r3, #5
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2400      	movs	r4, #0
 80058fc:	9400      	str	r4, [sp, #0]
 80058fe:	f7fc f8b0 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <drawArrowStop+0x22c>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b0a      	subs	r3, #10
 800590a:	b298      	uxth	r0, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b05      	subs	r3, #5
 8005912:	b299      	uxth	r1, r3
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <drawArrowStop+0x22c>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b0a      	subs	r3, #10
 800591c:	b29a      	uxth	r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	3305      	adds	r3, #5
 8005924:	b29b      	uxth	r3, r3
 8005926:	2400      	movs	r4, #0
 8005928:	9400      	str	r4, [sp, #0]
 800592a:	f7fc f89a 	bl	8001a62 <lcd_DrawLine>
		break;
 800592e:	bf00      	nop
	}
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	bd90      	pop	{r4, r7, pc}
 8005938:	2000004c 	.word	0x2000004c
 800593c:	2000005c 	.word	0x2000005c
 8005940:	2000003c 	.word	0x2000003c
 8005944:	0800b00c 	.word	0x0800b00c
 8005948:	0800b014 	.word	0x0800b014

0800594c <gameStopUI>:

void gameStopUI()
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
	showWallnotify();
 8005950:	f7fb fba6 	bl	80010a0 <showWallnotify>
	showNotifyStop();
 8005954:	f7ff fe86 	bl	8005664 <showNotifyStop>
	drawArrowStop();
 8005958:	f7ff fedc 	bl	8005714 <drawArrowStop>
}
 800595c:	bf00      	nop
 800595e:	bd80      	pop	{r7, pc}

08005960 <pickStop>:

void pickStop()
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 8005964:	4b1c      	ldr	r3, [pc, #112]	; (80059d8 <pickStop+0x78>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b06      	cmp	r3, #6
 800596a:	d133      	bne.n	80059d4 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <pickStop+0x7c>)
 800596e:	88db      	ldrh	r3, [r3, #6]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10f      	bne.n	8005994 <pickStop+0x34>
		{
			flagStop = 1;
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <pickStop+0x80>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 800597a:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <pickStop+0x84>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d002      	beq.n	8005988 <pickStop+0x28>
 8005982:	2b02      	cmp	r3, #2
 8005984:	d107      	bne.n	8005996 <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 8005986:	e025      	b.n	80059d4 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <pickStop+0x84>)
 800598a:	2202      	movs	r2, #2
 800598c:	601a      	str	r2, [r3, #0]
				gameStopUI();
 800598e:	f7ff ffdd 	bl	800594c <gameStopUI>
				break;
 8005992:	e000      	b.n	8005996 <pickStop+0x36>
			}
		}
 8005994:	bf00      	nop
		if(button_count[7] == 1)
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <pickStop+0x7c>)
 8005998:	89db      	ldrh	r3, [r3, #14]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10e      	bne.n	80059bc <pickStop+0x5c>
		{
			flagStop = 1;
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <pickStop+0x80>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <pickStop+0x84>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d012      	beq.n	80059d2 <pickStop+0x72>
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d106      	bne.n	80059be <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <pickStop+0x84>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
				gameStopUI();
 80059b6:	f7ff ffc9 	bl	800594c <gameStopUI>
				break;
 80059ba:	e000      	b.n	80059be <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 80059bc:	bf00      	nop
		if(flagStop == 1)
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <pickStop+0x80>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d106      	bne.n	80059d4 <pickStop+0x74>
		{
			gameStopUI();
 80059c6:	f7ff ffc1 	bl	800594c <gameStopUI>
			flagStop = 0;
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <pickStop+0x80>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e000      	b.n	80059d4 <pickStop+0x74>
				return;
 80059d2:	bf00      	nop
		}
	}
}
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000148 	.word	0x20000148
 80059dc:	200001a8 	.word	0x200001a8
 80059e0:	20000154 	.word	0x20000154
 80059e4:	2000005c 	.word	0x2000005c

080059e8 <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d110      	bne.n	8005a1a <initStopGame+0x32>
	{
		statusGame = STOPMODE;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <initStopGame+0x3c>)
 80059fa:	2206      	movs	r2, #6
 80059fc:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <initStopGame+0x40>)
 8005a00:	2202      	movs	r2, #2
 8005a02:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7fe fdb7 	bl	8004578 <setTimerTiming>
		setTimerGenerateWall(0);
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fe fdf0 	bl	80045f0 <setTimerGenerateWall>
		flagStop = 1;
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <initStopGame+0x44>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
		pickStop();
 8005a16:	f7ff ffa3 	bl	8005960 <pickStop>
	}
	return 0;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000148 	.word	0x20000148
 8005a28:	2000005c 	.word	0x2000005c
 8005a2c:	20000154 	.word	0x20000154

08005a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
	return 1;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_kill>:

int _kill(int pid, int sig)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a4a:	f003 ff47 	bl	80098dc <__errno>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2216      	movs	r2, #22
 8005a52:	601a      	str	r2, [r3, #0]
	return -1;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_exit>:

void _exit (int status)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a68:	f04f 31ff 	mov.w	r1, #4294967295
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffe7 	bl	8005a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a72:	e7fe      	b.n	8005a72 <_exit+0x12>

08005a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e00a      	b.n	8005a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a86:	f3af 8000 	nop.w
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	60ba      	str	r2, [r7, #8]
 8005a92:	b2ca      	uxtb	r2, r1
 8005a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	dbf0      	blt.n	8005a86 <_read+0x12>
	}

return len;
 8005aa4:	687b      	ldr	r3, [r7, #4]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e009      	b.n	8005ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	60ba      	str	r2, [r7, #8]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	dbf1      	blt.n	8005ac0 <_write+0x12>
	}
	return len;
 8005adc:	687b      	ldr	r3, [r7, #4]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_close>:

int _close(int file)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
	return -1;
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <_isatty>:

int _isatty(int file)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
	return 1;
 8005b26:	2301      	movs	r3, #1
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b58:	4a14      	ldr	r2, [pc, #80]	; (8005bac <_sbrk+0x5c>)
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <_sbrk+0x60>)
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b64:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <_sbrk+0x64>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b6c:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <_sbrk+0x64>)
 8005b6e:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <_sbrk+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <_sbrk+0x64>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4413      	add	r3, r2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d207      	bcs.n	8005b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b80:	f003 feac 	bl	80098dc <__errno>
 8005b84:	4603      	mov	r3, r0
 8005b86:	220c      	movs	r2, #12
 8005b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e009      	b.n	8005ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b90:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <_sbrk+0x64>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b96:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <_sbrk+0x64>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <_sbrk+0x64>)
 8005ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20020000 	.word	0x20020000
 8005bb0:	00000400 	.word	0x00000400
 8005bb4:	2000018c 	.word	0x2000018c
 8005bb8:	20002a98 	.word	0x20002a98

08005bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <SystemInit+0x20>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc6:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <SystemInit+0x20>)
 8005bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c06:	f240 3247 	movw	r2, #839	; 0x347
 8005c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005c12:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c14:	2263      	movs	r2, #99	; 0x63
 8005c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c24:	4813      	ldr	r0, [pc, #76]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c26:	f002 f933 	bl	8007e90 <HAL_TIM_Base_Init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005c30:	f7fc fd7e 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4619      	mov	r1, r3
 8005c40:	480c      	ldr	r0, [pc, #48]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c42:	f002 faed 	bl	8008220 <HAL_TIM_ConfigClockSource>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005c4c:	f7fc fd70 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c50:	2300      	movs	r3, #0
 8005c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c58:	463b      	mov	r3, r7
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4805      	ldr	r0, [pc, #20]	; (8005c74 <MX_TIM2_Init+0x94>)
 8005c5e:	f002 fd09 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005c68:	f7fc fd62 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200029f4 	.word	0x200029f4

08005c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d115      	bne.n	8005cb6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_TIM_Base_MspInit+0x48>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <HAL_TIM_Base_MspInit+0x48>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_TIM_Base_MspInit+0x48>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	201c      	movs	r0, #28
 8005cac:	f000 fc0d 	bl	80064ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005cb0:	201c      	movs	r0, #28
 8005cb2:	f000 fc26 	bl	8006502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800

08005cc4 <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b095      	sub	sp, #84	; 0x54
 8005cc8:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fb fe4a 	bl	8001964 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005cd0:	4b6b      	ldr	r3, [pc, #428]	; (8005e80 <setupTiming+0x1bc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	b298      	uxth	r0, r3
 8005cd6:	4b6b      	ldr	r3, [pc, #428]	; (8005e84 <setupTiming+0x1c0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	b299      	uxth	r1, r3
 8005cdc:	4b6a      	ldr	r3, [pc, #424]	; (8005e88 <setupTiming+0x1c4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	4b6a      	ldr	r3, [pc, #424]	; (8005e8c <setupTiming+0x1c8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	4c69      	ldr	r4, [pc, #420]	; (8005e90 <setupTiming+0x1cc>)
 8005cea:	9400      	str	r4, [sp, #0]
 8005cec:	f7fc f844 	bl	8001d78 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9302      	str	r3, [sp, #8]
 8005cf4:	2318      	movs	r3, #24
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f248 4330 	movw	r3, #33840	; 0x8430
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d02:	4a64      	ldr	r2, [pc, #400]	; (8005e94 <setupTiming+0x1d0>)
 8005d04:	2137      	movs	r1, #55	; 0x37
 8005d06:	203c      	movs	r0, #60	; 0x3c
 8005d08:	f7fc fa10 	bl	800212c <lcd_ShowStr>

	char str1[50] = " ID: ";
 8005d0c:	4a62      	ldr	r2, [pc, #392]	; (8005e98 <setupTiming+0x1d4>)
 8005d0e:	1d3b      	adds	r3, r7, #4
 8005d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d14:	6018      	str	r0, [r3, #0]
 8005d16:	3304      	adds	r3, #4
 8005d18:	8019      	strh	r1, [r3, #0]
 8005d1a:	f107 030a 	add.w	r3, r7, #10
 8005d1e:	222c      	movs	r2, #44	; 0x2c
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f003 fe04 	bl	8009930 <memset>
	char *str2 = convert2str(ID);
 8005d28:	4b5c      	ldr	r3, [pc, #368]	; (8005e9c <setupTiming+0x1d8>)
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fc fd05 	bl	800273c <convert2str>
 8005d32:	4603      	mov	r3, r0
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f003 fea2 	bl	8009a84 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8005d40:	1d3a      	adds	r2, r7, #4
 8005d42:	2300      	movs	r3, #0
 8005d44:	9302      	str	r3, [sp, #8]
 8005d46:	2318      	movs	r3, #24
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d54:	2164      	movs	r1, #100	; 0x64
 8005d56:	2000      	movs	r0, #0
 8005d58:	f7fc fa4c 	bl	80021f4 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	2318      	movs	r3, #24
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d6e:	4a4c      	ldr	r2, [pc, #304]	; (8005ea0 <setupTiming+0x1dc>)
 8005d70:	2196      	movs	r1, #150	; 0x96
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7fc fa3e 	bl	80021f4 <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	2318      	movs	r3, #24
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d8a:	4a46      	ldr	r2, [pc, #280]	; (8005ea4 <setupTiming+0x1e0>)
 8005d8c:	21d2      	movs	r1, #210	; 0xd2
 8005d8e:	2014      	movs	r0, #20
 8005d90:	f7fc f9cc 	bl	800212c <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8005d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	23f0      	movs	r3, #240	; 0xf0
 8005d9c:	22c8      	movs	r2, #200	; 0xc8
 8005d9e:	21d2      	movs	r1, #210	; 0xd2
 8005da0:	2096      	movs	r0, #150	; 0x96
 8005da2:	f7fb fee2 	bl	8001b6a <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8005da6:	4b40      	ldr	r3, [pc, #256]	; (8005ea8 <setupTiming+0x1e4>)
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc fcc6 	bl	800273c <convert2str>
 8005db0:	4603      	mov	r3, r0
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8005db4:	4b3c      	ldr	r3, [pc, #240]	; (8005ea8 <setupTiming+0x1e4>)
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	2b77      	cmp	r3, #119	; 0x77
 8005dba:	d80e      	bhi.n	8005dda <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	2318      	movs	r3, #24
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	f248 4330 	movw	r3, #33840	; 0x8430
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd0:	21d4      	movs	r1, #212	; 0xd4
 8005dd2:	20a5      	movs	r0, #165	; 0xa5
 8005dd4:	f7fc f9aa 	bl	800212c <lcd_ShowStr>
 8005dd8:	e00d      	b.n	8005df6 <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8005dda:	2301      	movs	r3, #1
 8005ddc:	9302      	str	r3, [sp, #8]
 8005dde:	2318      	movs	r3, #24
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	f248 4330 	movw	r3, #33840	; 0x8430
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dee:	21d4      	movs	r1, #212	; 0xd4
 8005df0:	209d      	movs	r0, #157	; 0x9d
 8005df2:	f7fc f99b 	bl	800212c <lcd_ShowStr>
	}

	if(TIMING < 120)
 8005df6:	4b2c      	ldr	r3, [pc, #176]	; (8005ea8 <setupTiming+0x1e4>)
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	2b77      	cmp	r3, #119	; 0x77
 8005dfc:	d81a      	bhi.n	8005e34 <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 8005dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	23c8      	movs	r3, #200	; 0xc8
 8005e06:	22b9      	movs	r2, #185	; 0xb9
 8005e08:	21c8      	movs	r1, #200	; 0xc8
 8005e0a:	20a5      	movs	r0, #165	; 0xa5
 8005e0c:	f7fb fe29 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 8005e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	23c8      	movs	r3, #200	; 0xc8
 8005e18:	22a5      	movs	r2, #165	; 0xa5
 8005e1a:	21b4      	movs	r1, #180	; 0xb4
 8005e1c:	20af      	movs	r0, #175	; 0xaf
 8005e1e:	f7fb fe20 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 8005e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	23b4      	movs	r3, #180	; 0xb4
 8005e2a:	22af      	movs	r2, #175	; 0xaf
 8005e2c:	21c8      	movs	r1, #200	; 0xc8
 8005e2e:	20b9      	movs	r0, #185	; 0xb9
 8005e30:	f7fb fe17 	bl	8001a62 <lcd_DrawLine>
	}
	if(TIMING > 30)
 8005e34:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <setupTiming+0x1e4>)
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	2b1e      	cmp	r3, #30
 8005e3a:	d91c      	bls.n	8005e76 <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 8005e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	23fa      	movs	r3, #250	; 0xfa
 8005e44:	22b9      	movs	r2, #185	; 0xb9
 8005e46:	21fa      	movs	r1, #250	; 0xfa
 8005e48:	20a5      	movs	r0, #165	; 0xa5
 8005e4a:	f7fb fe0a 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 8005e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005e58:	22af      	movs	r2, #175	; 0xaf
 8005e5a:	21fa      	movs	r1, #250	; 0xfa
 8005e5c:	20a5      	movs	r0, #165	; 0xa5
 8005e5e:	f7fb fe00 	bl	8001a62 <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 8005e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005e6c:	22af      	movs	r2, #175	; 0xaf
 8005e6e:	21fa      	movs	r1, #250	; 0xfa
 8005e70:	20b9      	movs	r0, #185	; 0xb9
 8005e72:	f7fb fdf6 	bl	8001a62 <lcd_DrawLine>
	}
}
 8005e76:	bf00      	nop
 8005e78:	3744      	adds	r7, #68	; 0x44
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000074 	.word	0x20000074
 8005e84:	20000078 	.word	0x20000078
 8005e88:	2000007c 	.word	0x2000007c
 8005e8c:	20000080 	.word	0x20000080
 8005e90:	0800dff8 	.word	0x0800dff8
 8005e94:	0800b01c 	.word	0x0800b01c
 8005e98:	0800b044 	.word	0x0800b044
 8005e9c:	20000134 	.word	0x20000134
 8005ea0:	0800b02c 	.word	0x0800b02c
 8005ea4:	0800b03c 	.word	0x0800b03c
 8005ea8:	20000000 	.word	0x20000000

08005eac <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7fc fa62 	bl	8002388 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	68b8      	ldr	r0, [r7, #8]
 8005eca:	f7fc fa5d 	bl	8002388 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2102      	movs	r1, #2
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fc fa58 	bl	8002388 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2103      	movs	r1, #3
 8005edc:	6838      	ldr	r0, [r7, #0]
 8005ede:	f7fc fa53 	bl	8002388 <led7_SetDigit>
	led7_SetColon(1);
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	f7fc fa74 	bl	80023d0 <led7_SetColon>
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <showTiming>:

void showTiming()
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <showTiming+0x6c>)
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	4a19      	ldr	r2, [pc, #100]	; (8005f60 <showTiming+0x70>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	099b      	lsrs	r3, r3, #6
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4618      	mov	r0, r3
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <showTiming+0x6c>)
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <showTiming+0x74>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	461c      	mov	r4, r3
 8005f14:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <showTiming+0x6c>)
 8005f16:	881a      	ldrh	r2, [r3, #0]
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <showTiming+0x74>)
 8005f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1e:	0959      	lsrs	r1, r3, #5
 8005f20:	460b      	mov	r3, r1
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a5b      	subs	r3, r3, r1
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <showTiming+0x78>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	08db      	lsrs	r3, r3, #3
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461d      	mov	r5, r3
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <showTiming+0x6c>)
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <showTiming+0x78>)
 8005f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f42:	08d9      	lsrs	r1, r3, #3
 8005f44:	460b      	mov	r3, r1
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	462a      	mov	r2, r5
 8005f52:	4621      	mov	r1, r4
 8005f54:	f7ff ffaa 	bl	8005eac <show7seg>
}
 8005f58:	bf00      	nop
 8005f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f5c:	20000000 	.word	0x20000000
 8005f60:	1b4e81b5 	.word	0x1b4e81b5
 8005f64:	88888889 	.word	0x88888889
 8005f68:	cccccccd 	.word	0xcccccccd

08005f6c <initTimingMode>:

void initTimingMode()
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8005f70:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <initTimingMode+0x54>)
 8005f72:	88db      	ldrh	r3, [r3, #6]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d10e      	bne.n	8005f96 <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <initTimingMode+0x58>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	331e      	adds	r3, #30
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <initTimingMode+0x58>)
 8005f82:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <initTimingMode+0x58>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	2b78      	cmp	r3, #120	; 0x78
 8005f8a:	d902      	bls.n	8005f92 <initTimingMode+0x26>
		{
			TIMING = 120;
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <initTimingMode+0x58>)
 8005f8e:	2278      	movs	r2, #120	; 0x78
 8005f90:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8005f92:	f7ff fe97 	bl	8005cc4 <setupTiming>
	}
	if(button_count[7] == 1)
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <initTimingMode+0x54>)
 8005f98:	89db      	ldrh	r3, [r3, #14]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d10e      	bne.n	8005fbc <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <initTimingMode+0x58>)
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	3b1e      	subs	r3, #30
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <initTimingMode+0x58>)
 8005fa8:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <initTimingMode+0x58>)
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	2b1d      	cmp	r3, #29
 8005fb0:	d802      	bhi.n	8005fb8 <initTimingMode+0x4c>
		{
			TIMING = 30;
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <initTimingMode+0x58>)
 8005fb4:	221e      	movs	r2, #30
 8005fb6:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8005fb8:	f7ff fe84 	bl	8005cc4 <setupTiming>
	}
}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200001a8 	.word	0x200001a8
 8005fc4:	20000000 	.word	0x20000000

08005fc8 <uart_init_esp>:
//    uart_Rs232SendString(".");
//    sprintf((void*)msg,"%ld",num%100);
//    uart_Rs232SendString(msg);
//}

void uart_init_esp(){
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4906      	ldr	r1, [pc, #24]	; (8005fe8 <uart_init_esp+0x20>)
 8005fd0:	4806      	ldr	r0, [pc, #24]	; (8005fec <uart_init_esp+0x24>)
 8005fd2:	f002 fcbe 	bl	8008952 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fdc:	4804      	ldr	r0, [pc, #16]	; (8005ff0 <uart_init_esp+0x28>)
 8005fde:	f000 fcd9 	bl	8006994 <HAL_GPIO_WritePin>
}
 8005fe2:	bf00      	nop
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000190 	.word	0x20000190
 8005fec:	20002a3c 	.word	0x20002a3c
 8005ff0:	40021400 	.word	0x40021400

08005ff4 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8006000:	887a      	ldrh	r2, [r7, #2]
 8006002:	230a      	movs	r3, #10
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4803      	ldr	r0, [pc, #12]	; (8006014 <uart_EspSendBytes+0x20>)
 8006008:	f002 fc11 	bl	800882e <HAL_UART_Transmit>
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20002a3c 	.word	0x20002a3c

08006018 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a11      	ldr	r2, [pc, #68]	; (800606c <HAL_UART_RxCpltCallback+0x54>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d11b      	bne.n	8006062 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_UART_RxCpltCallback+0x58>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b4f      	cmp	r3, #79	; 0x4f
 8006030:	d103      	bne.n	800603a <HAL_UART_RxCpltCallback+0x22>
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_UART_RxCpltCallback+0x5c>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	e00e      	b.n	8006058 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'a') light_status = 0;
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_UART_RxCpltCallback+0x58>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b61      	cmp	r3, #97	; 0x61
 8006040:	d103      	bne.n	800604a <HAL_UART_RxCpltCallback+0x32>
 8006042:	4b0d      	ldr	r3, [pc, #52]	; (8006078 <HAL_UART_RxCpltCallback+0x60>)
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e006      	b.n	8006058 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'A') light_status = 1;
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <HAL_UART_RxCpltCallback+0x58>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b41      	cmp	r3, #65	; 0x41
 8006050:	d102      	bne.n	8006058 <HAL_UART_RxCpltCallback+0x40>
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <HAL_UART_RxCpltCallback+0x60>)
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006058:	2201      	movs	r2, #1
 800605a:	4905      	ldr	r1, [pc, #20]	; (8006070 <HAL_UART_RxCpltCallback+0x58>)
 800605c:	4807      	ldr	r0, [pc, #28]	; (800607c <HAL_UART_RxCpltCallback+0x64>)
 800605e:	f002 fc78 	bl	8008952 <HAL_UART_Receive_IT>
	}
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40004400 	.word	0x40004400
 8006070:	20000190 	.word	0x20000190
 8006074:	20000191 	.word	0x20000191
 8006078:	20000162 	.word	0x20000162
 800607c:	20002a3c 	.word	0x20002a3c

08006080 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <uart_EspCheck+0x1c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <uart_EspCheck+0x10>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <uart_EspCheck+0x12>
	return 0;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000191 	.word	0x20000191

080060a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <MX_USART2_UART_Init+0x50>)
 80060a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060b8:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060be:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060c6:	220c      	movs	r2, #12
 80060c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060d6:	4805      	ldr	r0, [pc, #20]	; (80060ec <MX_USART2_UART_Init+0x4c>)
 80060d8:	f002 fb5c 	bl	8008794 <HAL_UART_Init>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060e2:	f7fc fb25 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20002a3c 	.word	0x20002a3c
 80060f0:	40004400 	.word	0x40004400

080060f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_UART_MspInit+0x94>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d133      	bne.n	800617e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	4b1c      	ldr	r3, [pc, #112]	; (800618c <HAL_UART_MspInit+0x98>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_UART_MspInit+0x98>)
 8006120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006124:	6413      	str	r3, [r2, #64]	; 0x40
 8006126:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_UART_MspInit+0x98>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <HAL_UART_MspInit+0x98>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	4a14      	ldr	r2, [pc, #80]	; (800618c <HAL_UART_MspInit+0x98>)
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	6313      	str	r3, [r2, #48]	; 0x30
 8006142:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_UART_MspInit+0x98>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800614e:	230c      	movs	r3, #12
 8006150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006152:	2302      	movs	r3, #2
 8006154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615a:	2303      	movs	r3, #3
 800615c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800615e:	2307      	movs	r3, #7
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	4619      	mov	r1, r3
 8006168:	4809      	ldr	r0, [pc, #36]	; (8006190 <HAL_UART_MspInit+0x9c>)
 800616a:	f000 fa77 	bl	800665c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	2026      	movs	r0, #38	; 0x26
 8006174:	f000 f9a9 	bl	80064ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006178:	2026      	movs	r0, #38	; 0x26
 800617a:	f000 f9c2 	bl	8006502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800617e:	bf00      	nop
 8006180:	3728      	adds	r7, #40	; 0x28
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40004400 	.word	0x40004400
 800618c:	40023800 	.word	0x40023800
 8006190:	40020000 	.word	0x40020000

08006194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006198:	480d      	ldr	r0, [pc, #52]	; (80061d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800619a:	490e      	ldr	r1, [pc, #56]	; (80061d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800619c:	4a0e      	ldr	r2, [pc, #56]	; (80061d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800619e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061a0:	e002      	b.n	80061a8 <LoopCopyDataInit>

080061a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061a6:	3304      	adds	r3, #4

080061a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061ac:	d3f9      	bcc.n	80061a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061ae:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80061b0:	4c0b      	ldr	r4, [pc, #44]	; (80061e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80061b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061b4:	e001      	b.n	80061ba <LoopFillZerobss>

080061b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061b8:	3204      	adds	r2, #4

080061ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061bc:	d3fb      	bcc.n	80061b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061be:	f7ff fcfd 	bl	8005bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061c2:	f003 fb91 	bl	80098e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061c6:	f7fc f969 	bl	800249c <main>
  bx  lr    
 80061ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80061cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80061d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061d4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80061d8:	0800ed9c 	.word	0x0800ed9c
  ldr r2, =_sbss
 80061dc:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80061e0:	20002a94 	.word	0x20002a94

080061e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061e4:	e7fe      	b.n	80061e4 <ADC_IRQHandler>
	...

080061e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061ec:	4b0e      	ldr	r3, [pc, #56]	; (8006228 <HAL_Init+0x40>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a0d      	ldr	r2, [pc, #52]	; (8006228 <HAL_Init+0x40>)
 80061f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_Init+0x40>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <HAL_Init+0x40>)
 80061fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006204:	4b08      	ldr	r3, [pc, #32]	; (8006228 <HAL_Init+0x40>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a07      	ldr	r2, [pc, #28]	; (8006228 <HAL_Init+0x40>)
 800620a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006210:	2003      	movs	r0, #3
 8006212:	f000 f94f 	bl	80064b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006216:	200f      	movs	r0, #15
 8006218:	f000 f808 	bl	800622c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800621c:	f7ff f9bc 	bl	8005598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40023c00 	.word	0x40023c00

0800622c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <HAL_InitTick+0x54>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <HAL_InitTick+0x58>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006242:	fbb3 f3f1 	udiv	r3, r3, r1
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f967 	bl	800651e <HAL_SYSTICK_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e00e      	b.n	8006278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b0f      	cmp	r3, #15
 800625e:	d80a      	bhi.n	8006276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006260:	2200      	movs	r2, #0
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	f000 f92f 	bl	80064ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800626c:	4a06      	ldr	r2, [pc, #24]	; (8006288 <HAL_InitTick+0x5c>)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e000      	b.n	8006278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	200000a0 	.word	0x200000a0
 8006284:	200000a8 	.word	0x200000a8
 8006288:	200000a4 	.word	0x200000a4

0800628c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006290:	4b06      	ldr	r3, [pc, #24]	; (80062ac <HAL_IncTick+0x20>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <HAL_IncTick+0x24>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4413      	add	r3, r2
 800629c:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <HAL_IncTick+0x24>)
 800629e:	6013      	str	r3, [r2, #0]
}
 80062a0:	bf00      	nop
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	200000a8 	.word	0x200000a8
 80062b0:	20002a80 	.word	0x20002a80

080062b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return uwTick;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_GetTick+0x14>)
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20002a80 	.word	0x20002a80

080062cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062d4:	f7ff ffee 	bl	80062b4 <HAL_GetTick>
 80062d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d005      	beq.n	80062f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <HAL_Delay+0x44>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062f2:	bf00      	nop
 80062f4:	f7ff ffde 	bl	80062b4 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	429a      	cmp	r2, r3
 8006302:	d8f7      	bhi.n	80062f4 <HAL_Delay+0x28>
  {
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200000a8 	.word	0x200000a8

08006314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006324:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <__NVIC_SetPriorityGrouping+0x44>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006330:	4013      	ands	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800633c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006346:	4a04      	ldr	r2, [pc, #16]	; (8006358 <__NVIC_SetPriorityGrouping+0x44>)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	60d3      	str	r3, [r2, #12]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	e000ed00 	.word	0xe000ed00

0800635c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <__NVIC_GetPriorityGrouping+0x18>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	f003 0307 	and.w	r3, r3, #7
}
 800636a:	4618      	mov	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006386:	2b00      	cmp	r3, #0
 8006388:	db0b      	blt.n	80063a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	f003 021f 	and.w	r2, r3, #31
 8006390:	4907      	ldr	r1, [pc, #28]	; (80063b0 <__NVIC_EnableIRQ+0x38>)
 8006392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	2001      	movs	r0, #1
 800639a:	fa00 f202 	lsl.w	r2, r0, r2
 800639e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e100 	.word	0xe000e100

080063b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	db0a      	blt.n	80063de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	490c      	ldr	r1, [pc, #48]	; (8006400 <__NVIC_SetPriority+0x4c>)
 80063ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d2:	0112      	lsls	r2, r2, #4
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	440b      	add	r3, r1
 80063d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063dc:	e00a      	b.n	80063f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	4908      	ldr	r1, [pc, #32]	; (8006404 <__NVIC_SetPriority+0x50>)
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	3b04      	subs	r3, #4
 80063ec:	0112      	lsls	r2, r2, #4
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	440b      	add	r3, r1
 80063f2:	761a      	strb	r2, [r3, #24]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	e000e100 	.word	0xe000e100
 8006404:	e000ed00 	.word	0xe000ed00

08006408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006408:	b480      	push	{r7}
 800640a:	b089      	sub	sp, #36	; 0x24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f1c3 0307 	rsb	r3, r3, #7
 8006422:	2b04      	cmp	r3, #4
 8006424:	bf28      	it	cs
 8006426:	2304      	movcs	r3, #4
 8006428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3304      	adds	r3, #4
 800642e:	2b06      	cmp	r3, #6
 8006430:	d902      	bls.n	8006438 <NVIC_EncodePriority+0x30>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3b03      	subs	r3, #3
 8006436:	e000      	b.n	800643a <NVIC_EncodePriority+0x32>
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	43da      	mvns	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	401a      	ands	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006450:	f04f 31ff 	mov.w	r1, #4294967295
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	fa01 f303 	lsl.w	r3, r1, r3
 800645a:	43d9      	mvns	r1, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006460:	4313      	orrs	r3, r2
         );
}
 8006462:	4618      	mov	r0, r3
 8006464:	3724      	adds	r7, #36	; 0x24
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3b01      	subs	r3, #1
 800647c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006480:	d301      	bcc.n	8006486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006482:	2301      	movs	r3, #1
 8006484:	e00f      	b.n	80064a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006486:	4a0a      	ldr	r2, [pc, #40]	; (80064b0 <SysTick_Config+0x40>)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3b01      	subs	r3, #1
 800648c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800648e:	210f      	movs	r1, #15
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	f7ff ff8e 	bl	80063b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <SysTick_Config+0x40>)
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <SysTick_Config+0x40>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	e000e010 	.word	0xe000e010

080064b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ff29 	bl	8006314 <__NVIC_SetPriorityGrouping>
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b086      	sub	sp, #24
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	4603      	mov	r3, r0
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064dc:	f7ff ff3e 	bl	800635c <__NVIC_GetPriorityGrouping>
 80064e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	f7ff ff8e 	bl	8006408 <NVIC_EncodePriority>
 80064ec:	4602      	mov	r2, r0
 80064ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff ff5d 	bl	80063b4 <__NVIC_SetPriority>
}
 80064fa:	bf00      	nop
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	4603      	mov	r3, r0
 800650a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800650c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff31 	bl	8006378 <__NVIC_EnableIRQ>
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ffa2 	bl	8006470 <SysTick_Config>
 800652c:	4603      	mov	r3, r0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006542:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006544:	f7ff feb6 	bl	80062b4 <HAL_GetTick>
 8006548:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d008      	beq.n	8006568 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2280      	movs	r2, #128	; 0x80
 800655a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e052      	b.n	800660e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0216 	bic.w	r2, r2, #22
 8006576:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006586:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <HAL_DMA_Abort+0x62>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0208 	bic.w	r2, r2, #8
 80065a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065b8:	e013      	b.n	80065e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065ba:	f7ff fe7b 	bl	80062b4 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b05      	cmp	r3, #5
 80065c6:	d90c      	bls.n	80065e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2203      	movs	r2, #3
 80065d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e015      	b.n	800660e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e4      	bne.n	80065ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	223f      	movs	r2, #63	; 0x3f
 80065f6:	409a      	lsls	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d004      	beq.n	8006634 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2280      	movs	r2, #128	; 0x80
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e00c      	b.n	800664e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2205      	movs	r2, #5
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800665c:	b480      	push	{r7}
 800665e:	b089      	sub	sp, #36	; 0x24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	e16b      	b.n	8006950 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006678:	2201      	movs	r2, #1
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4013      	ands	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	f040 815a 	bne.w	800694a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d005      	beq.n	80066ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d130      	bne.n	8006710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2203      	movs	r2, #3
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066e4:	2201      	movs	r2, #1
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 0201 	and.w	r2, r3, #1
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	4313      	orrs	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	2b03      	cmp	r3, #3
 800671a:	d017      	beq.n	800674c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	2203      	movs	r2, #3
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	43db      	mvns	r3, r3
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	4013      	ands	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4313      	orrs	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d123      	bne.n	80067a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	08da      	lsrs	r2, r3, #3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3208      	adds	r2, #8
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	220f      	movs	r2, #15
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	08da      	lsrs	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3208      	adds	r2, #8
 800679a:	69b9      	ldr	r1, [r7, #24]
 800679c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	2203      	movs	r2, #3
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4013      	ands	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f003 0203 	and.w	r2, r3, #3
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80b4 	beq.w	800694a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	4b60      	ldr	r3, [pc, #384]	; (8006968 <HAL_GPIO_Init+0x30c>)
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	4a5f      	ldr	r2, [pc, #380]	; (8006968 <HAL_GPIO_Init+0x30c>)
 80067ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067f0:	6453      	str	r3, [r2, #68]	; 0x44
 80067f2:	4b5d      	ldr	r3, [pc, #372]	; (8006968 <HAL_GPIO_Init+0x30c>)
 80067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067fe:	4a5b      	ldr	r2, [pc, #364]	; (800696c <HAL_GPIO_Init+0x310>)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	089b      	lsrs	r3, r3, #2
 8006804:	3302      	adds	r3, #2
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	220f      	movs	r2, #15
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a52      	ldr	r2, [pc, #328]	; (8006970 <HAL_GPIO_Init+0x314>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d02b      	beq.n	8006882 <HAL_GPIO_Init+0x226>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a51      	ldr	r2, [pc, #324]	; (8006974 <HAL_GPIO_Init+0x318>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d025      	beq.n	800687e <HAL_GPIO_Init+0x222>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a50      	ldr	r2, [pc, #320]	; (8006978 <HAL_GPIO_Init+0x31c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01f      	beq.n	800687a <HAL_GPIO_Init+0x21e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a4f      	ldr	r2, [pc, #316]	; (800697c <HAL_GPIO_Init+0x320>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d019      	beq.n	8006876 <HAL_GPIO_Init+0x21a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a4e      	ldr	r2, [pc, #312]	; (8006980 <HAL_GPIO_Init+0x324>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <HAL_GPIO_Init+0x216>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a4d      	ldr	r2, [pc, #308]	; (8006984 <HAL_GPIO_Init+0x328>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00d      	beq.n	800686e <HAL_GPIO_Init+0x212>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a4c      	ldr	r2, [pc, #304]	; (8006988 <HAL_GPIO_Init+0x32c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <HAL_GPIO_Init+0x20e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a4b      	ldr	r2, [pc, #300]	; (800698c <HAL_GPIO_Init+0x330>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d101      	bne.n	8006866 <HAL_GPIO_Init+0x20a>
 8006862:	2307      	movs	r3, #7
 8006864:	e00e      	b.n	8006884 <HAL_GPIO_Init+0x228>
 8006866:	2308      	movs	r3, #8
 8006868:	e00c      	b.n	8006884 <HAL_GPIO_Init+0x228>
 800686a:	2306      	movs	r3, #6
 800686c:	e00a      	b.n	8006884 <HAL_GPIO_Init+0x228>
 800686e:	2305      	movs	r3, #5
 8006870:	e008      	b.n	8006884 <HAL_GPIO_Init+0x228>
 8006872:	2304      	movs	r3, #4
 8006874:	e006      	b.n	8006884 <HAL_GPIO_Init+0x228>
 8006876:	2303      	movs	r3, #3
 8006878:	e004      	b.n	8006884 <HAL_GPIO_Init+0x228>
 800687a:	2302      	movs	r3, #2
 800687c:	e002      	b.n	8006884 <HAL_GPIO_Init+0x228>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <HAL_GPIO_Init+0x228>
 8006882:	2300      	movs	r3, #0
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	f002 0203 	and.w	r2, r2, #3
 800688a:	0092      	lsls	r2, r2, #2
 800688c:	4093      	lsls	r3, r2
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006894:	4935      	ldr	r1, [pc, #212]	; (800696c <HAL_GPIO_Init+0x310>)
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	3302      	adds	r3, #2
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068a2:	4b3b      	ldr	r3, [pc, #236]	; (8006990 <HAL_GPIO_Init+0x334>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	43db      	mvns	r3, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	4013      	ands	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068c6:	4a32      	ldr	r2, [pc, #200]	; (8006990 <HAL_GPIO_Init+0x334>)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068cc:	4b30      	ldr	r3, [pc, #192]	; (8006990 <HAL_GPIO_Init+0x334>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	43db      	mvns	r3, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4013      	ands	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068f0:	4a27      	ldr	r2, [pc, #156]	; (8006990 <HAL_GPIO_Init+0x334>)
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068f6:	4b26      	ldr	r3, [pc, #152]	; (8006990 <HAL_GPIO_Init+0x334>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	43db      	mvns	r3, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800691a:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <HAL_GPIO_Init+0x334>)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <HAL_GPIO_Init+0x334>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	43db      	mvns	r3, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4013      	ands	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006944:	4a12      	ldr	r2, [pc, #72]	; (8006990 <HAL_GPIO_Init+0x334>)
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	f67f ae90 	bls.w	8006678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	3724      	adds	r7, #36	; 0x24
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	40013800 	.word	0x40013800
 8006970:	40020000 	.word	0x40020000
 8006974:	40020400 	.word	0x40020400
 8006978:	40020800 	.word	0x40020800
 800697c:	40020c00 	.word	0x40020c00
 8006980:	40021000 	.word	0x40021000
 8006984:	40021400 	.word	0x40021400
 8006988:	40021800 	.word	0x40021800
 800698c:	40021c00 	.word	0x40021c00
 8006990:	40013c00 	.word	0x40013c00

08006994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	807b      	strh	r3, [r7, #2]
 80069a0:	4613      	mov	r3, r2
 80069a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069a4:	787b      	ldrb	r3, [r7, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069aa:	887a      	ldrh	r2, [r7, #2]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069b0:	e003      	b.n	80069ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	041a      	lsls	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	619a      	str	r2, [r3, #24]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e264      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d075      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069e6:	4ba3      	ldr	r3, [pc, #652]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d00c      	beq.n	8006a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069f2:	4ba0      	ldr	r3, [pc, #640]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d112      	bne.n	8006a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069fe:	4b9d      	ldr	r3, [pc, #628]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0a:	d10b      	bne.n	8006a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0c:	4b99      	ldr	r3, [pc, #612]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d05b      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x108>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d157      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e23f      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2c:	d106      	bne.n	8006a3c <HAL_RCC_OscConfig+0x74>
 8006a2e:	4b91      	ldr	r3, [pc, #580]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a90      	ldr	r2, [pc, #576]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e01d      	b.n	8006a78 <HAL_RCC_OscConfig+0xb0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a44:	d10c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x98>
 8006a46:	4b8b      	ldr	r3, [pc, #556]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a8a      	ldr	r2, [pc, #552]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a87      	ldr	r2, [pc, #540]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e00b      	b.n	8006a78 <HAL_RCC_OscConfig+0xb0>
 8006a60:	4b84      	ldr	r3, [pc, #528]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a83      	ldr	r2, [pc, #524]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a80      	ldr	r2, [pc, #512]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7ff fc18 	bl	80062b4 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a88:	f7ff fc14 	bl	80062b4 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b64      	cmp	r3, #100	; 0x64
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e204      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9a:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0xc0>
 8006aa6:	e014      	b.n	8006ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7ff fc04 	bl	80062b4 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ab0:	f7ff fc00 	bl	80062b4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b64      	cmp	r3, #100	; 0x64
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e1f0      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ac2:	4b6c      	ldr	r3, [pc, #432]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0xe8>
 8006ace:	e000      	b.n	8006ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d063      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ade:	4b65      	ldr	r3, [pc, #404]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aea:	4b62      	ldr	r3, [pc, #392]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d11c      	bne.n	8006b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006af6:	4b5f      	ldr	r3, [pc, #380]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d116      	bne.n	8006b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b02:	4b5c      	ldr	r3, [pc, #368]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <HAL_RCC_OscConfig+0x152>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d001      	beq.n	8006b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e1c4      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1a:	4b56      	ldr	r3, [pc, #344]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4952      	ldr	r1, [pc, #328]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b2e:	e03a      	b.n	8006ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d020      	beq.n	8006b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b38:	4b4f      	ldr	r3, [pc, #316]	; (8006c78 <HAL_RCC_OscConfig+0x2b0>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3e:	f7ff fbb9 	bl	80062b4 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b44:	e008      	b.n	8006b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b46:	f7ff fbb5 	bl	80062b4 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e1a5      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b58:	4b46      	ldr	r3, [pc, #280]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b64:	4b43      	ldr	r3, [pc, #268]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	4940      	ldr	r1, [pc, #256]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]
 8006b78:	e015      	b.n	8006ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7a:	4b3f      	ldr	r3, [pc, #252]	; (8006c78 <HAL_RCC_OscConfig+0x2b0>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b80:	f7ff fb98 	bl	80062b4 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b88:	f7ff fb94 	bl	80062b4 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e184      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b9a:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f0      	bne.n	8006b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d030      	beq.n	8006c14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d016      	beq.n	8006be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bba:	4b30      	ldr	r3, [pc, #192]	; (8006c7c <HAL_RCC_OscConfig+0x2b4>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc0:	f7ff fb78 	bl	80062b4 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bc8:	f7ff fb74 	bl	80062b4 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e164      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bda:	4b26      	ldr	r3, [pc, #152]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x200>
 8006be6:	e015      	b.n	8006c14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006be8:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <HAL_RCC_OscConfig+0x2b4>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bee:	f7ff fb61 	bl	80062b4 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bf6:	f7ff fb5d 	bl	80062b4 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e14d      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f0      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a0 	beq.w	8006d62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10f      	bne.n	8006c52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	4a0e      	ldr	r2, [pc, #56]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c40:	6413      	str	r3, [r2, #64]	; 0x40
 8006c42:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <HAL_RCC_OscConfig+0x2b8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d121      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c5e:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <HAL_RCC_OscConfig+0x2b8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <HAL_RCC_OscConfig+0x2b8>)
 8006c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c6a:	f7ff fb23 	bl	80062b4 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c70:	e011      	b.n	8006c96 <HAL_RCC_OscConfig+0x2ce>
 8006c72:	bf00      	nop
 8006c74:	40023800 	.word	0x40023800
 8006c78:	42470000 	.word	0x42470000
 8006c7c:	42470e80 	.word	0x42470e80
 8006c80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c84:	f7ff fb16 	bl	80062b4 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e106      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c96:	4b85      	ldr	r3, [pc, #532]	; (8006eac <HAL_RCC_OscConfig+0x4e4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x2f0>
 8006caa:	4b81      	ldr	r3, [pc, #516]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	4a80      	ldr	r2, [pc, #512]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb6:	e01c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x32a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d10c      	bne.n	8006cda <HAL_RCC_OscConfig+0x312>
 8006cc0:	4b7b      	ldr	r3, [pc, #492]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	4a7a      	ldr	r2, [pc, #488]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cc6:	f043 0304 	orr.w	r3, r3, #4
 8006cca:	6713      	str	r3, [r2, #112]	; 0x70
 8006ccc:	4b78      	ldr	r3, [pc, #480]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	4a77      	ldr	r2, [pc, #476]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd8:	e00b      	b.n	8006cf2 <HAL_RCC_OscConfig+0x32a>
 8006cda:	4b75      	ldr	r3, [pc, #468]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	4a74      	ldr	r2, [pc, #464]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce6:	4b72      	ldr	r3, [pc, #456]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	4a71      	ldr	r2, [pc, #452]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006cec:	f023 0304 	bic.w	r3, r3, #4
 8006cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d015      	beq.n	8006d26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7ff fadb 	bl	80062b4 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7ff fad7 	bl	80062b4 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e0c5      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d18:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0ee      	beq.n	8006d02 <HAL_RCC_OscConfig+0x33a>
 8006d24:	e014      	b.n	8006d50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d26:	f7ff fac5 	bl	80062b4 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d2c:	e00a      	b.n	8006d44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2e:	f7ff fac1 	bl	80062b4 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e0af      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d44:	4b5a      	ldr	r3, [pc, #360]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ee      	bne.n	8006d2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d105      	bne.n	8006d62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d56:	4b56      	ldr	r3, [pc, #344]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	4a55      	ldr	r2, [pc, #340]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 809b 	beq.w	8006ea2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d6c:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 030c 	and.w	r3, r3, #12
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d05c      	beq.n	8006e32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d141      	bne.n	8006e04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d80:	4b4c      	ldr	r3, [pc, #304]	; (8006eb4 <HAL_RCC_OscConfig+0x4ec>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d86:	f7ff fa95 	bl	80062b4 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d8e:	f7ff fa91 	bl	80062b4 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e081      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da0:	4b43      	ldr	r3, [pc, #268]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f0      	bne.n	8006d8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	019b      	lsls	r3, r3, #6
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	041b      	lsls	r3, r3, #16
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	061b      	lsls	r3, r3, #24
 8006dd0:	4937      	ldr	r1, [pc, #220]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dd6:	4b37      	ldr	r3, [pc, #220]	; (8006eb4 <HAL_RCC_OscConfig+0x4ec>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ddc:	f7ff fa6a 	bl	80062b4 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de4:	f7ff fa66 	bl	80062b4 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e056      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f0      	beq.n	8006de4 <HAL_RCC_OscConfig+0x41c>
 8006e02:	e04e      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e04:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <HAL_RCC_OscConfig+0x4ec>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0a:	f7ff fa53 	bl	80062b4 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e12:	f7ff fa4f 	bl	80062b4 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e03f      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e24:	4b22      	ldr	r3, [pc, #136]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f0      	bne.n	8006e12 <HAL_RCC_OscConfig+0x44a>
 8006e30:	e037      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e032      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <HAL_RCC_OscConfig+0x4e8>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d028      	beq.n	8006e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d121      	bne.n	8006e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d11a      	bne.n	8006e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e6e:	4013      	ands	r3, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d111      	bne.n	8006e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	3b01      	subs	r3, #1
 8006e88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d001      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40007000 	.word	0x40007000
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	42470060 	.word	0x42470060

08006eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0cc      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ecc:	4b68      	ldr	r3, [pc, #416]	; (8007070 <HAL_RCC_ClockConfig+0x1b8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d90c      	bls.n	8006ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eda:	4b65      	ldr	r3, [pc, #404]	; (8007070 <HAL_RCC_ClockConfig+0x1b8>)
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee2:	4b63      	ldr	r3, [pc, #396]	; (8007070 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0b8      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d020      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f0c:	4b59      	ldr	r3, [pc, #356]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4a58      	ldr	r2, [pc, #352]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f24:	4b53      	ldr	r3, [pc, #332]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4a52      	ldr	r2, [pc, #328]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f30:	4b50      	ldr	r3, [pc, #320]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	494d      	ldr	r1, [pc, #308]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d044      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d107      	bne.n	8006f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f56:	4b47      	ldr	r3, [pc, #284]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d119      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e07f      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d107      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f76:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e06f      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f86:	4b3b      	ldr	r3, [pc, #236]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e067      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f96:	4b37      	ldr	r3, [pc, #220]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f023 0203 	bic.w	r2, r3, #3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	4934      	ldr	r1, [pc, #208]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fa8:	f7ff f984 	bl	80062b4 <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fae:	e00a      	b.n	8006fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fb0:	f7ff f980 	bl	80062b4 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e04f      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc6:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 020c 	and.w	r2, r3, #12
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d1eb      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <HAL_RCC_ClockConfig+0x1b8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d20c      	bcs.n	8007000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe6:	4b22      	ldr	r3, [pc, #136]	; (8007070 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e032      	b.n	8007066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800700c:	4b19      	ldr	r3, [pc, #100]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4916      	ldr	r1, [pc, #88]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	490e      	ldr	r1, [pc, #56]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	4313      	orrs	r3, r2
 800703c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800703e:	f000 f821 	bl	8007084 <HAL_RCC_GetSysClockFreq>
 8007042:	4602      	mov	r2, r0
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	490a      	ldr	r1, [pc, #40]	; (8007078 <HAL_RCC_ClockConfig+0x1c0>)
 8007050:	5ccb      	ldrb	r3, [r1, r3]
 8007052:	fa22 f303 	lsr.w	r3, r2, r3
 8007056:	4a09      	ldr	r2, [pc, #36]	; (800707c <HAL_RCC_ClockConfig+0x1c4>)
 8007058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <HAL_RCC_ClockConfig+0x1c8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff f8e4 	bl	800622c <HAL_InitTick>

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40023c00 	.word	0x40023c00
 8007074:	40023800 	.word	0x40023800
 8007078:	0800ec28 	.word	0x0800ec28
 800707c:	200000a0 	.word	0x200000a0
 8007080:	200000a4 	.word	0x200000a4

08007084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007084:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	607b      	str	r3, [r7, #4]
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	2300      	movs	r3, #0
 8007096:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800709c:	4b67      	ldr	r3, [pc, #412]	; (800723c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 030c 	and.w	r3, r3, #12
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d00d      	beq.n	80070c4 <HAL_RCC_GetSysClockFreq+0x40>
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	f200 80bd 	bhi.w	8007228 <HAL_RCC_GetSysClockFreq+0x1a4>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_RCC_GetSysClockFreq+0x34>
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d003      	beq.n	80070be <HAL_RCC_GetSysClockFreq+0x3a>
 80070b6:	e0b7      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070b8:	4b61      	ldr	r3, [pc, #388]	; (8007240 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070ba:	60bb      	str	r3, [r7, #8]
       break;
 80070bc:	e0b7      	b.n	800722e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070be:	4b61      	ldr	r3, [pc, #388]	; (8007244 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070c0:	60bb      	str	r3, [r7, #8]
      break;
 80070c2:	e0b4      	b.n	800722e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070c4:	4b5d      	ldr	r3, [pc, #372]	; (800723c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070ce:	4b5b      	ldr	r3, [pc, #364]	; (800723c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04d      	beq.n	8007176 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070da:	4b58      	ldr	r3, [pc, #352]	; (800723c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	099b      	lsrs	r3, r3, #6
 80070e0:	461a      	mov	r2, r3
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070ea:	f04f 0100 	mov.w	r1, #0
 80070ee:	ea02 0800 	and.w	r8, r2, r0
 80070f2:	ea03 0901 	and.w	r9, r3, r1
 80070f6:	4640      	mov	r0, r8
 80070f8:	4649      	mov	r1, r9
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	014b      	lsls	r3, r1, #5
 8007104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007108:	0142      	lsls	r2, r0, #5
 800710a:	4610      	mov	r0, r2
 800710c:	4619      	mov	r1, r3
 800710e:	ebb0 0008 	subs.w	r0, r0, r8
 8007112:	eb61 0109 	sbc.w	r1, r1, r9
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	018b      	lsls	r3, r1, #6
 8007120:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007124:	0182      	lsls	r2, r0, #6
 8007126:	1a12      	subs	r2, r2, r0
 8007128:	eb63 0301 	sbc.w	r3, r3, r1
 800712c:	f04f 0000 	mov.w	r0, #0
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	00d9      	lsls	r1, r3, #3
 8007136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800713a:	00d0      	lsls	r0, r2, #3
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	eb12 0208 	adds.w	r2, r2, r8
 8007144:	eb43 0309 	adc.w	r3, r3, r9
 8007148:	f04f 0000 	mov.w	r0, #0
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	0259      	lsls	r1, r3, #9
 8007152:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007156:	0250      	lsls	r0, r2, #9
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4610      	mov	r0, r2
 800715e:	4619      	mov	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	461a      	mov	r2, r3
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	f7f9 f88a 	bl	8000280 <__aeabi_uldivmod>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4613      	mov	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e04a      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007176:	4b31      	ldr	r3, [pc, #196]	; (800723c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	099b      	lsrs	r3, r3, #6
 800717c:	461a      	mov	r2, r3
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007186:	f04f 0100 	mov.w	r1, #0
 800718a:	ea02 0400 	and.w	r4, r2, r0
 800718e:	ea03 0501 	and.w	r5, r3, r1
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	014b      	lsls	r3, r1, #5
 80071a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071a4:	0142      	lsls	r2, r0, #5
 80071a6:	4610      	mov	r0, r2
 80071a8:	4619      	mov	r1, r3
 80071aa:	1b00      	subs	r0, r0, r4
 80071ac:	eb61 0105 	sbc.w	r1, r1, r5
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	018b      	lsls	r3, r1, #6
 80071ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071be:	0182      	lsls	r2, r0, #6
 80071c0:	1a12      	subs	r2, r2, r0
 80071c2:	eb63 0301 	sbc.w	r3, r3, r1
 80071c6:	f04f 0000 	mov.w	r0, #0
 80071ca:	f04f 0100 	mov.w	r1, #0
 80071ce:	00d9      	lsls	r1, r3, #3
 80071d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071d4:	00d0      	lsls	r0, r2, #3
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	1912      	adds	r2, r2, r4
 80071dc:	eb45 0303 	adc.w	r3, r5, r3
 80071e0:	f04f 0000 	mov.w	r0, #0
 80071e4:	f04f 0100 	mov.w	r1, #0
 80071e8:	0299      	lsls	r1, r3, #10
 80071ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071ee:	0290      	lsls	r0, r2, #10
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4610      	mov	r0, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	f7f9 f83e 	bl	8000280 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4613      	mov	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800720c:	4b0b      	ldr	r3, [pc, #44]	; (800723c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	3301      	adds	r3, #1
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	60bb      	str	r3, [r7, #8]
      break;
 8007226:	e002      	b.n	800722e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800722a:	60bb      	str	r3, [r7, #8]
      break;
 800722c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800722e:	68bb      	ldr	r3, [r7, #8]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800723a:	bf00      	nop
 800723c:	40023800 	.word	0x40023800
 8007240:	00f42400 	.word	0x00f42400
 8007244:	007a1200 	.word	0x007a1200

08007248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800724c:	4b03      	ldr	r3, [pc, #12]	; (800725c <HAL_RCC_GetHCLKFreq+0x14>)
 800724e:	681b      	ldr	r3, [r3, #0]
}
 8007250:	4618      	mov	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	200000a0 	.word	0x200000a0

08007260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007264:	f7ff fff0 	bl	8007248 <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	0a9b      	lsrs	r3, r3, #10
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4903      	ldr	r1, [pc, #12]	; (8007284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40023800 	.word	0x40023800
 8007284:	0800ec38 	.word	0x0800ec38

08007288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800728c:	f7ff ffdc 	bl	8007248 <HAL_RCC_GetHCLKFreq>
 8007290:	4602      	mov	r2, r0
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	0b5b      	lsrs	r3, r3, #13
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	4903      	ldr	r1, [pc, #12]	; (80072ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800729e:	5ccb      	ldrb	r3, [r1, r3]
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40023800 	.word	0x40023800
 80072ac:	0800ec38 	.word	0x0800ec38

080072b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e07b      	b.n	80073ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d108      	bne.n	80072dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072d2:	d009      	beq.n	80072e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	61da      	str	r2, [r3, #28]
 80072da:	e005      	b.n	80072e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fd fa6c 	bl	80047e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	ea42 0103 	orr.w	r1, r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	f003 0104 	and.w	r1, r3, #4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	f003 0210 	and.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_SPI_Transmit+0x22>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e126      	b.n	8007632 <HAL_SPI_Transmit+0x270>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ec:	f7fe ff62 	bl	80062b4 <HAL_GetTick>
 80073f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d002      	beq.n	8007408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007402:	2302      	movs	r3, #2
 8007404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007406:	e10b      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_SPI_Transmit+0x52>
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007418:	e102      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2203      	movs	r2, #3
 800741e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	88fa      	ldrh	r2, [r7, #6]
 8007432:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007460:	d10f      	bne.n	8007482 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d007      	beq.n	80074a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d14b      	bne.n	8007542 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_SPI_Transmit+0xf6>
 80074b2:	8afb      	ldrh	r3, [r7, #22]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d13e      	bne.n	8007536 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	881a      	ldrh	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	1c9a      	adds	r2, r3, #2
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074dc:	e02b      	b.n	8007536 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d112      	bne.n	8007512 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007510:	e011      	b.n	8007536 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007512:	f7fe fecf 	bl	80062b4 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d803      	bhi.n	800752a <HAL_SPI_Transmit+0x168>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d102      	bne.n	8007530 <HAL_SPI_Transmit+0x16e>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007534:	e074      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1ce      	bne.n	80074de <HAL_SPI_Transmit+0x11c>
 8007540:	e04c      	b.n	80075dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_SPI_Transmit+0x18e>
 800754a:	8afb      	ldrh	r3, [r7, #22]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d140      	bne.n	80075d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007576:	e02c      	b.n	80075d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d113      	bne.n	80075ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ac:	e011      	b.n	80075d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ae:	f7fe fe81 	bl	80062b4 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d803      	bhi.n	80075c6 <HAL_SPI_Transmit+0x204>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d102      	bne.n	80075cc <HAL_SPI_Transmit+0x20a>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075d0:	e026      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1cd      	bne.n	8007578 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fbcb 	bl	8007d7c <SPI_EndRxTxTransaction>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e000      	b.n	8007620 <HAL_SPI_Transmit+0x25e>
  }

error:
 800761e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007630:	7ffb      	ldrb	r3, [r7, #31]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b088      	sub	sp, #32
 800763e:	af02      	add	r7, sp, #8
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	603b      	str	r3, [r7, #0]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007656:	d112      	bne.n	800767e <HAL_SPI_Receive+0x44>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10e      	bne.n	800767e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2204      	movs	r2, #4
 8007664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007668:	88fa      	ldrh	r2, [r7, #6]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f8f1 	bl	800785c <HAL_SPI_TransmitReceive>
 800767a:	4603      	mov	r3, r0
 800767c:	e0ea      	b.n	8007854 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_SPI_Receive+0x52>
 8007688:	2302      	movs	r3, #2
 800768a:	e0e3      	b.n	8007854 <HAL_SPI_Receive+0x21a>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007694:	f7fe fe0e 	bl	80062b4 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d002      	beq.n	80076ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80076a6:	2302      	movs	r3, #2
 80076a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076aa:	e0ca      	b.n	8007842 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_SPI_Receive+0x7e>
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076bc:	e0c1      	b.n	8007842 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2204      	movs	r2, #4
 80076c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007704:	d10f      	bne.n	8007726 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007724:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d007      	beq.n	8007744 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007742:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d162      	bne.n	8007812 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800774c:	e02e      	b.n	80077ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	d115      	bne.n	8007788 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f103 020c 	add.w	r2, r3, #12
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007786:	e011      	b.n	80077ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007788:	f7fe fd94 	bl	80062b4 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d803      	bhi.n	80077a0 <HAL_SPI_Receive+0x166>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d102      	bne.n	80077a6 <HAL_SPI_Receive+0x16c>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077aa:	e04a      	b.n	8007842 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1cb      	bne.n	800774e <HAL_SPI_Receive+0x114>
 80077b6:	e031      	b.n	800781c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d113      	bne.n	80077ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	b292      	uxth	r2, r2
 80077d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	1c9a      	adds	r2, r3, #2
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077ec:	e011      	b.n	8007812 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ee:	f7fe fd61 	bl	80062b4 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d803      	bhi.n	8007806 <HAL_SPI_Receive+0x1cc>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d102      	bne.n	800780c <HAL_SPI_Receive+0x1d2>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007810:	e017      	b.n	8007842 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1cd      	bne.n	80077b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fa45 	bl	8007cb0 <SPI_EndRxTransaction>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]
 800783e:	e000      	b.n	8007842 <HAL_SPI_Receive+0x208>
  }

error :
 8007840:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08c      	sub	sp, #48	; 0x30
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800786a:	2301      	movs	r3, #1
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x26>
 800787e:	2302      	movs	r3, #2
 8007880:	e18a      	b.n	8007b98 <HAL_SPI_TransmitReceive+0x33c>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788a:	f7fe fd13 	bl	80062b4 <HAL_GetTick>
 800788e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078a0:	887b      	ldrh	r3, [r7, #2]
 80078a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d00f      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x70>
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b2:	d107      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x68>
 80078bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d003      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078c4:	2302      	movs	r3, #2
 80078c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078ca:	e15b      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <HAL_SPI_TransmitReceive+0x82>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_SPI_TransmitReceive+0x82>
 80078d8:	887b      	ldrh	r3, [r7, #2]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d103      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078e4:	e14e      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d003      	beq.n	80078fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2205      	movs	r2, #5
 80078f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	887a      	ldrh	r2, [r7, #2]
 800790a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	887a      	ldrh	r2, [r7, #2]
 8007910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	887a      	ldrh	r2, [r7, #2]
 800791c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	887a      	ldrh	r2, [r7, #2]
 8007922:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d007      	beq.n	800794e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800794c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007956:	d178      	bne.n	8007a4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x10a>
 8007960:	8b7b      	ldrh	r3, [r7, #26]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d166      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	881a      	ldrh	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800798a:	e053      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b02      	cmp	r3, #2
 8007998:	d11b      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x176>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d016      	beq.n	80079d2 <HAL_SPI_TransmitReceive+0x176>
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d113      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ae:	881a      	ldrh	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d119      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x1b8>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d014      	beq.n	8007a14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	b292      	uxth	r2, r2
 80079f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a10:	2301      	movs	r3, #1
 8007a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a14:	f7fe fc4e 	bl	80062b4 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d807      	bhi.n	8007a34 <HAL_SPI_TransmitReceive+0x1d8>
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d003      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a32:	e0a7      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1a6      	bne.n	800798c <HAL_SPI_TransmitReceive+0x130>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1a1      	bne.n	800798c <HAL_SPI_TransmitReceive+0x130>
 8007a48:	e07c      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x1fc>
 8007a52:	8b7b      	ldrh	r3, [r7, #26]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d16b      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	7812      	ldrb	r2, [r2, #0]
 8007a64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a7e:	e057      	b.n	8007b30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d11c      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x26c>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d017      	beq.n	8007ac8 <HAL_SPI_TransmitReceive+0x26c>
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d114      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	7812      	ldrb	r2, [r2, #0]
 8007aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d119      	bne.n	8007b0a <HAL_SPI_TransmitReceive+0x2ae>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d014      	beq.n	8007b0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b06:	2301      	movs	r3, #1
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b0a:	f7fe fbd3 	bl	80062b4 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d803      	bhi.n	8007b22 <HAL_SPI_TransmitReceive+0x2c6>
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d102      	bne.n	8007b28 <HAL_SPI_TransmitReceive+0x2cc>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b2e:	e029      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1a2      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x224>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d19d      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f917 	bl	8007d7c <SPI_EndRxTxTransaction>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b60:	e010      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10b      	bne.n	8007b82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	e000      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3730      	adds	r7, #48	; 0x30
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bb0:	f7fe fb80 	bl	80062b4 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bc0:	f7fe fb78 	bl	80062b4 <HAL_GetTick>
 8007bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bc6:	4b39      	ldr	r3, [pc, #228]	; (8007cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	015b      	lsls	r3, r3, #5
 8007bcc:	0d1b      	lsrs	r3, r3, #20
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bd6:	e054      	b.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d050      	beq.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007be0:	f7fe fb68 	bl	80062b4 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d902      	bls.n	8007bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d13d      	bne.n	8007c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c0e:	d111      	bne.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c18:	d004      	beq.n	8007c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c22:	d107      	bne.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3c:	d10f      	bne.n	8007c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e017      	b.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d19b      	bne.n	8007bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200000a0 	.word	0x200000a0

08007cb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cc4:	d111      	bne.n	8007cea <SPI_EndRxTransaction+0x3a>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cce:	d004      	beq.n	8007cda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd8:	d107      	bne.n	8007cea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ce8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf2:	d12a      	bne.n	8007d4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfc:	d012      	beq.n	8007d24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff ff49 	bl	8007ba0 <SPI_WaitFlagStateUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02d      	beq.n	8007d70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d18:	f043 0220 	orr.w	r2, r3, #32
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e026      	b.n	8007d72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7ff ff36 	bl	8007ba0 <SPI_WaitFlagStateUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01a      	beq.n	8007d70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3e:	f043 0220 	orr.w	r2, r3, #32
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e013      	b.n	8007d72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2200      	movs	r2, #0
 8007d52:	2101      	movs	r1, #1
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ff23 	bl	8007ba0 <SPI_WaitFlagStateUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d64:	f043 0220 	orr.w	r2, r3, #32
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e000      	b.n	8007d72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d88:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <SPI_EndRxTxTransaction+0x7c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <SPI_EndRxTxTransaction+0x80>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	0d5b      	lsrs	r3, r3, #21
 8007d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da6:	d112      	bne.n	8007dce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	2180      	movs	r1, #128	; 0x80
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fef4 	bl	8007ba0 <SPI_WaitFlagStateUntilTimeout>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d016      	beq.n	8007dec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	f043 0220 	orr.w	r2, r3, #32
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e00f      	b.n	8007dee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de4:	2b80      	cmp	r3, #128	; 0x80
 8007de6:	d0f2      	beq.n	8007dce <SPI_EndRxTxTransaction+0x52>
 8007de8:	e000      	b.n	8007dec <SPI_EndRxTxTransaction+0x70>
        break;
 8007dea:	bf00      	nop
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	200000a0 	.word	0x200000a0
 8007dfc:	165e9f81 	.word	0x165e9f81

08007e00 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e038      	b.n	8007e88 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7f9 f92e 	bl	800108c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3308      	adds	r3, #8
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f001 fc76 	bl	800972c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	f001 fcd8 	bl	8009800 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6858      	ldr	r0, [r3, #4]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	f001 fd05 	bl	800986c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	6892      	ldr	r2, [r2, #8]
 8007e6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	6892      	ldr	r2, [r2, #8]
 8007e76:	f041 0101 	orr.w	r1, r1, #1
 8007e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e041      	b.n	8007f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fd fede 	bl	8005c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f000 fa96 	bl	8008400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d001      	beq.n	8007f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e04e      	b.n	8007fe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a23      	ldr	r2, [pc, #140]	; (8007ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d022      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f72:	d01d      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1f      	ldr	r2, [pc, #124]	; (8007ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d018      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1e      	ldr	r2, [pc, #120]	; (8007ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1c      	ldr	r2, [pc, #112]	; (8008000 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a1b      	ldr	r2, [pc, #108]	; (8008004 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a19      	ldr	r2, [pc, #100]	; (8008008 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_TIM_Base_Start_IT+0x80>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a18      	ldr	r2, [pc, #96]	; (800800c <HAL_TIM_Base_Start_IT+0xdc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d111      	bne.n	8007fd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b06      	cmp	r3, #6
 8007fc0:	d010      	beq.n	8007fe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0201 	orr.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd2:	e007      	b.n	8007fe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0201 	orr.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	40000c00 	.word	0x40000c00
 8008004:	40010400 	.word	0x40010400
 8008008:	40014000 	.word	0x40014000
 800800c:	40001800 	.word	0x40001800

08008010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b02      	cmp	r3, #2
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0202 	mvn.w	r2, #2
 800803c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f9b5 	bl	80083c2 <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9a7 	bl	80083ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f9b8 	bl	80083d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b04      	cmp	r3, #4
 8008078:	d122      	bne.n	80080c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d11b      	bne.n	80080c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0204 	mvn.w	r2, #4
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f98b 	bl	80083c2 <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f97d 	bl	80083ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f98e 	bl	80083d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d122      	bne.n	8008114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d11b      	bne.n	8008114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0208 	mvn.w	r2, #8
 80080e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2204      	movs	r2, #4
 80080ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f961 	bl	80083c2 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f953 	bl	80083ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f964 	bl	80083d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b10      	cmp	r3, #16
 8008120:	d122      	bne.n	8008168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b10      	cmp	r3, #16
 800812e:	d11b      	bne.n	8008168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0210 	mvn.w	r2, #16
 8008138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2208      	movs	r2, #8
 800813e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f937 	bl	80083c2 <HAL_TIM_IC_CaptureCallback>
 8008154:	e005      	b.n	8008162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f929 	bl	80083ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f93a 	bl	80083d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	d10e      	bne.n	8008194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b01      	cmp	r3, #1
 8008182:	d107      	bne.n	8008194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0201 	mvn.w	r2, #1
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fc fa66 	bl	8004660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b80      	cmp	r3, #128	; 0x80
 80081a0:	d10e      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	d107      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fae0 	bl	8008780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8ff 	bl	80083ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b20      	cmp	r3, #32
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0220 	mvn.w	r2, #32
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 faaa 	bl	800876c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_TIM_ConfigClockSource+0x1c>
 8008238:	2302      	movs	r3, #2
 800823a:	e0b4      	b.n	80083a6 <HAL_TIM_ConfigClockSource+0x186>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800825a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008274:	d03e      	beq.n	80082f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800827a:	f200 8087 	bhi.w	800838c <HAL_TIM_ConfigClockSource+0x16c>
 800827e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008282:	f000 8086 	beq.w	8008392 <HAL_TIM_ConfigClockSource+0x172>
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828a:	d87f      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 800828c:	2b70      	cmp	r3, #112	; 0x70
 800828e:	d01a      	beq.n	80082c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008290:	2b70      	cmp	r3, #112	; 0x70
 8008292:	d87b      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 8008294:	2b60      	cmp	r3, #96	; 0x60
 8008296:	d050      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x11a>
 8008298:	2b60      	cmp	r3, #96	; 0x60
 800829a:	d877      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 800829c:	2b50      	cmp	r3, #80	; 0x50
 800829e:	d03c      	beq.n	800831a <HAL_TIM_ConfigClockSource+0xfa>
 80082a0:	2b50      	cmp	r3, #80	; 0x50
 80082a2:	d873      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d058      	beq.n	800835a <HAL_TIM_ConfigClockSource+0x13a>
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d86f      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d064      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x15a>
 80082b0:	2b30      	cmp	r3, #48	; 0x30
 80082b2:	d86b      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d060      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x15a>
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d867      	bhi.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05c      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x15a>
 80082c0:	2b10      	cmp	r3, #16
 80082c2:	d05a      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x15a>
 80082c4:	e062      	b.n	800838c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6899      	ldr	r1, [r3, #8]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f000 f9ad 	bl	8008634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	609a      	str	r2, [r3, #8]
      break;
 80082f2:	e04f      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	6899      	ldr	r1, [r3, #8]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f000 f996 	bl	8008634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008316:	609a      	str	r2, [r3, #8]
      break;
 8008318:	e03c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	f000 f90a 	bl	8008540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2150      	movs	r1, #80	; 0x50
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f963 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 8008338:	e02c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6859      	ldr	r1, [r3, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	461a      	mov	r2, r3
 8008348:	f000 f929 	bl	800859e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2160      	movs	r1, #96	; 0x60
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f953 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 8008358:	e01c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	6859      	ldr	r1, [r3, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	461a      	mov	r2, r3
 8008368:	f000 f8ea 	bl	8008540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2140      	movs	r1, #64	; 0x40
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f943 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 8008378:	e00c      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f000 f93a 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 800838a:	e003      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
      break;
 8008390:	e000      	b.n	8008394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a40      	ldr	r2, [pc, #256]	; (8008514 <TIM_Base_SetConfig+0x114>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841e:	d00f      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a3d      	ldr	r2, [pc, #244]	; (8008518 <TIM_Base_SetConfig+0x118>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00b      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a3c      	ldr	r2, [pc, #240]	; (800851c <TIM_Base_SetConfig+0x11c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a3b      	ldr	r2, [pc, #236]	; (8008520 <TIM_Base_SetConfig+0x120>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0x40>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a3a      	ldr	r2, [pc, #232]	; (8008524 <TIM_Base_SetConfig+0x124>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d108      	bne.n	8008452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2f      	ldr	r2, [pc, #188]	; (8008514 <TIM_Base_SetConfig+0x114>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d02b      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008460:	d027      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a2c      	ldr	r2, [pc, #176]	; (8008518 <TIM_Base_SetConfig+0x118>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d023      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2b      	ldr	r2, [pc, #172]	; (800851c <TIM_Base_SetConfig+0x11c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01f      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a2a      	ldr	r2, [pc, #168]	; (8008520 <TIM_Base_SetConfig+0x120>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d01b      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a29      	ldr	r2, [pc, #164]	; (8008524 <TIM_Base_SetConfig+0x124>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d017      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a28      	ldr	r2, [pc, #160]	; (8008528 <TIM_Base_SetConfig+0x128>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a27      	ldr	r2, [pc, #156]	; (800852c <TIM_Base_SetConfig+0x12c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00f      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a26      	ldr	r2, [pc, #152]	; (8008530 <TIM_Base_SetConfig+0x130>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00b      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a25      	ldr	r2, [pc, #148]	; (8008534 <TIM_Base_SetConfig+0x134>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d007      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a24      	ldr	r2, [pc, #144]	; (8008538 <TIM_Base_SetConfig+0x138>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d003      	beq.n	80084b2 <TIM_Base_SetConfig+0xb2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a23      	ldr	r2, [pc, #140]	; (800853c <TIM_Base_SetConfig+0x13c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d108      	bne.n	80084c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a0a      	ldr	r2, [pc, #40]	; (8008514 <TIM_Base_SetConfig+0x114>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d003      	beq.n	80084f8 <TIM_Base_SetConfig+0xf8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <TIM_Base_SetConfig+0x124>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d103      	bne.n	8008500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	615a      	str	r2, [r3, #20]
}
 8008506:	bf00      	nop
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000
 8008518:	40000400 	.word	0x40000400
 800851c:	40000800 	.word	0x40000800
 8008520:	40000c00 	.word	0x40000c00
 8008524:	40010400 	.word	0x40010400
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400
 8008530:	40014800 	.word	0x40014800
 8008534:	40001800 	.word	0x40001800
 8008538:	40001c00 	.word	0x40001c00
 800853c:	40002000 	.word	0x40002000

08008540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f023 0201 	bic.w	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800856a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	011b      	lsls	r3, r3, #4
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f023 030a 	bic.w	r3, r3, #10
 800857c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800859e:	b480      	push	{r7}
 80085a0:	b087      	sub	sp, #28
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0210 	bic.w	r2, r3, #16
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	031b      	lsls	r3, r3, #12
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	f043 0307 	orr.w	r3, r3, #7
 8008620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	609a      	str	r2, [r3, #8]
}
 8008628:	bf00      	nop
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800864e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	021a      	lsls	r2, r3, #8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	431a      	orrs	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	4313      	orrs	r3, r2
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	609a      	str	r2, [r3, #8]
}
 8008668:	bf00      	nop
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008688:	2302      	movs	r3, #2
 800868a:	e05a      	b.n	8008742 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a21      	ldr	r2, [pc, #132]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d022      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d8:	d01d      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d018      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1a      	ldr	r2, [pc, #104]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a18      	ldr	r2, [pc, #96]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a17      	ldr	r2, [pc, #92]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a15      	ldr	r2, [pc, #84]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10c      	bne.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800871c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	4313      	orrs	r3, r2
 8008726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40010000 	.word	0x40010000
 8008754:	40000400 	.word	0x40000400
 8008758:	40000800 	.word	0x40000800
 800875c:	40000c00 	.word	0x40000c00
 8008760:	40010400 	.word	0x40010400
 8008764:	40014000 	.word	0x40014000
 8008768:	40001800 	.word	0x40001800

0800876c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e03f      	b.n	8008826 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fd fc9a 	bl	80060f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2224      	movs	r2, #36	; 0x24
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fddf 	bl	800939c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695a      	ldr	r2, [r3, #20]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800880c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2220      	movs	r2, #32
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b08a      	sub	sp, #40	; 0x28
 8008832:	af02      	add	r7, sp, #8
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	603b      	str	r3, [r7, #0]
 800883a:	4613      	mov	r3, r2
 800883c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b20      	cmp	r3, #32
 800884c:	d17c      	bne.n	8008948 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <HAL_UART_Transmit+0x2c>
 8008854:	88fb      	ldrh	r3, [r7, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e075      	b.n	800894a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_UART_Transmit+0x3e>
 8008868:	2302      	movs	r3, #2
 800886a:	e06e      	b.n	800894a <HAL_UART_Transmit+0x11c>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2221      	movs	r2, #33	; 0x21
 800887e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008882:	f7fd fd17 	bl	80062b4 <HAL_GetTick>
 8008886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800889c:	d108      	bne.n	80088b0 <HAL_UART_Transmit+0x82>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d104      	bne.n	80088b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e003      	b.n	80088b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80088c0:	e02a      	b.n	8008918 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fb1f 	bl	8008f10 <UART_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e036      	b.n	800894a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10b      	bne.n	80088fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	3302      	adds	r3, #2
 80088f6:	61bb      	str	r3, [r7, #24]
 80088f8:	e007      	b.n	800890a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3301      	adds	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1cf      	bne.n	80088c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2200      	movs	r2, #0
 800892a:	2140      	movs	r1, #64	; 0x40
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 faef 	bl	8008f10 <UART_WaitOnFlagUntilTimeout>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e006      	b.n	800894a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	e000      	b.n	800894a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008948:	2302      	movs	r3, #2
  }
}
 800894a:	4618      	mov	r0, r3
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	4613      	mov	r3, r2
 800895e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b20      	cmp	r3, #32
 800896a:	d11d      	bne.n	80089a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_UART_Receive_IT+0x26>
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e016      	b.n	80089aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_UART_Receive_IT+0x38>
 8008986:	2302      	movs	r3, #2
 8008988:	e00f      	b.n	80089aa <HAL_UART_Receive_IT+0x58>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	461a      	mov	r2, r3
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fb24 	bl	8008fec <UART_Start_Receive_IT>
 80089a4:	4603      	mov	r3, r0
 80089a6:	e000      	b.n	80089aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80089a8:	2302      	movs	r3, #2
  }
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b0ba      	sub	sp, #232	; 0xe8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80089f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10f      	bne.n	8008a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <HAL_UART_IRQHandler+0x66>
 8008a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fc07 	bl	8009226 <UART_Receive_IT>
      return;
 8008a18:	e256      	b.n	8008ec8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 80de 	beq.w	8008be0 <HAL_UART_IRQHandler+0x22c>
 8008a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d106      	bne.n	8008a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80d1 	beq.w	8008be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <HAL_UART_IRQHandler+0xae>
 8008a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f043 0201 	orr.w	r2, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <HAL_UART_IRQHandler+0xd2>
 8008a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	f043 0202 	orr.w	r2, r3, #2
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00b      	beq.n	8008aaa <HAL_UART_IRQHandler+0xf6>
 8008a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d005      	beq.n	8008aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f043 0204 	orr.w	r2, r3, #4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d011      	beq.n	8008ada <HAL_UART_IRQHandler+0x126>
 8008ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aba:	f003 0320 	and.w	r3, r3, #32
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f043 0208 	orr.w	r2, r3, #8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 81ed 	beq.w	8008ebe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d008      	beq.n	8008b02 <HAL_UART_IRQHandler+0x14e>
 8008af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb92 	bl	8009226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b40      	cmp	r3, #64	; 0x40
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <HAL_UART_IRQHandler+0x17a>
 8008b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d04f      	beq.n	8008bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa9a 	bl	8009068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3e:	2b40      	cmp	r3, #64	; 0x40
 8008b40:	d141      	bne.n	8008bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3314      	adds	r3, #20
 8008b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3314      	adds	r3, #20
 8008b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1d9      	bne.n	8008b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d013      	beq.n	8008bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	4a7d      	ldr	r2, [pc, #500]	; (8008d90 <HAL_UART_IRQHandler+0x3dc>)
 8008b9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fd fd37 	bl	8006616 <HAL_DMA_Abort_IT>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d016      	beq.n	8008bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbc:	e00e      	b.n	8008bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f990 	bl	8008ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc4:	e00a      	b.n	8008bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f98c 	bl	8008ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bcc:	e006      	b.n	8008bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f988 	bl	8008ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bda:	e170      	b.n	8008ebe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bdc:	bf00      	nop
    return;
 8008bde:	e16e      	b.n	8008ebe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	f040 814a 	bne.w	8008e7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 8143 	beq.w	8008e7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 813c 	beq.w	8008e7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c06:	2300      	movs	r3, #0
 8008c08:	60bb      	str	r3, [r7, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	60bb      	str	r3, [r7, #8]
 8008c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b40      	cmp	r3, #64	; 0x40
 8008c28:	f040 80b4 	bne.w	8008d94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8140 	beq.w	8008ec2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	f080 8139 	bcs.w	8008ec2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c62:	f000 8088 	beq.w	8008d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	330c      	adds	r3, #12
 8008c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1d9      	bne.n	8008c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3314      	adds	r3, #20
 8008cb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cc4:	f023 0301 	bic.w	r3, r3, #1
 8008cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e1      	bne.n	8008cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3314      	adds	r3, #20
 8008d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e3      	bne.n	8008cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3e:	e853 3f00 	ldrex	r3, [r3]
 8008d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d46:	f023 0310 	bic.w	r3, r3, #16
 8008d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	330c      	adds	r3, #12
 8008d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e3      	bne.n	8008d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fd fbe0 	bl	8006536 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f8b6 	bl	8008ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d8c:	e099      	b.n	8008ec2 <HAL_UART_IRQHandler+0x50e>
 8008d8e:	bf00      	nop
 8008d90:	0800912f 	.word	0x0800912f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 808b 	beq.w	8008ec6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8086 	beq.w	8008ec6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008dde:	647a      	str	r2, [r7, #68]	; 0x44
 8008de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e3      	bne.n	8008dba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3314      	adds	r3, #20
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	623b      	str	r3, [r7, #32]
   return(result);
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3314      	adds	r3, #20
 8008e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e16:	633a      	str	r2, [r7, #48]	; 0x30
 8008e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e3      	bne.n	8008df2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	330c      	adds	r3, #12
 8008e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e5c:	61fa      	str	r2, [r7, #28]
 8008e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	69b9      	ldr	r1, [r7, #24]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	617b      	str	r3, [r7, #20]
   return(result);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e3      	bne.n	8008e38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f83e 	bl	8008ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e7c:	e023      	b.n	8008ec6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <HAL_UART_IRQHandler+0x4ea>
 8008e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f95d 	bl	8009156 <UART_Transmit_IT>
    return;
 8008e9c:	e014      	b.n	8008ec8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00e      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x514>
 8008eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d008      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f99d 	bl	80091f6 <UART_EndTransmit_IT>
    return;
 8008ebc:	e004      	b.n	8008ec8 <HAL_UART_IRQHandler+0x514>
    return;
 8008ebe:	bf00      	nop
 8008ec0:	e002      	b.n	8008ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ec2:	bf00      	nop
 8008ec4:	e000      	b.n	8008ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ec6:	bf00      	nop
  }
}
 8008ec8:	37e8      	adds	r7, #232	; 0xe8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop

08008ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b090      	sub	sp, #64	; 0x40
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f20:	e050      	b.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d04c      	beq.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f30:	f7fd f9c0 	bl	80062b4 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d241      	bcs.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f60:	637a      	str	r2, [r7, #52]	; 0x34
 8008f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e5      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3314      	adds	r3, #20
 8008f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	613b      	str	r3, [r7, #16]
   return(result);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f023 0301 	bic.w	r3, r3, #1
 8008f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f94:	623a      	str	r2, [r7, #32]
 8008f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e5      	bne.n	8008f74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e00f      	b.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2301      	moveq	r3, #1
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d09f      	beq.n	8008f22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3740      	adds	r7, #64	; 0x40
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2222      	movs	r2, #34	; 0x22
 8009016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009038:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	695a      	ldr	r2, [r3, #20]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0201 	orr.w	r2, r2, #1
 8009048:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0220 	orr.w	r2, r2, #32
 8009058:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b095      	sub	sp, #84	; 0x54
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	330c      	adds	r3, #12
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	330c      	adds	r3, #12
 800908e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009090:	643a      	str	r2, [r7, #64]	; 0x40
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e5      	bne.n	8009070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3314      	adds	r3, #20
 80090aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3314      	adds	r3, #20
 80090c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e5      	bne.n	80090a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d119      	bne.n	8009114 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f023 0310 	bic.w	r3, r3, #16
 80090f6:	647b      	str	r3, [r7, #68]	; 0x44
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009100:	61ba      	str	r2, [r7, #24]
 8009102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6979      	ldr	r1, [r7, #20]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	613b      	str	r3, [r7, #16]
   return(result);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009122:	bf00      	nop
 8009124:	3754      	adds	r7, #84	; 0x54
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff fecb 	bl	8008ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b21      	cmp	r3, #33	; 0x21
 8009168:	d13e      	bne.n	80091e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009172:	d114      	bne.n	800919e <UART_Transmit_IT+0x48>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d110      	bne.n	800919e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009190:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	1c9a      	adds	r2, r3, #2
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	621a      	str	r2, [r3, #32]
 800919c:	e008      	b.n	80091b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	1c59      	adds	r1, r3, #1
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6211      	str	r1, [r2, #32]
 80091a8:	781a      	ldrb	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4619      	mov	r1, r3
 80091be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10f      	bne.n	80091e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	e000      	b.n	80091ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091e8:	2302      	movs	r3, #2
  }
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2220      	movs	r2, #32
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff fe5a 	bl	8008ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b08c      	sub	sp, #48	; 0x30
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b22      	cmp	r3, #34	; 0x22
 8009238:	f040 80ab 	bne.w	8009392 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009244:	d117      	bne.n	8009276 <UART_Receive_IT+0x50>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d113      	bne.n	8009276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009264:	b29a      	uxth	r2, r3
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	1c9a      	adds	r2, r3, #2
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	629a      	str	r2, [r3, #40]	; 0x28
 8009274:	e026      	b.n	80092c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009288:	d007      	beq.n	800929a <UART_Receive_IT+0x74>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <UART_Receive_IT+0x82>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e008      	b.n	80092ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4619      	mov	r1, r3
 80092d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d15a      	bne.n	800938e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0220 	bic.w	r2, r2, #32
 80092e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	2b01      	cmp	r3, #1
 8009316:	d135      	bne.n	8009384 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933e:	623a      	str	r2, [r7, #32]
 8009340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	69f9      	ldr	r1, [r7, #28]
 8009344:	6a3a      	ldr	r2, [r7, #32]
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	61bb      	str	r3, [r7, #24]
   return(result);
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e5      	bne.n	800931e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0310 	and.w	r3, r3, #16
 800935c:	2b10      	cmp	r3, #16
 800935e:	d10a      	bne.n	8009376 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff fdbb 	bl	8008ef8 <HAL_UARTEx_RxEventCallback>
 8009382:	e002      	b.n	800938a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7fc fe47 	bl	8006018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	e002      	b.n	8009394 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	e000      	b.n	8009394 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009392:	2302      	movs	r3, #2
  }
}
 8009394:	4618      	mov	r0, r3
 8009396:	3730      	adds	r7, #48	; 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	b09f      	sub	sp, #124	; 0x7c
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b2:	68d9      	ldr	r1, [r3, #12]
 80093b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	ea40 0301 	orr.w	r3, r0, r1
 80093bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	431a      	orrs	r2, r3
 80093ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80093d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093e0:	f021 010c 	bic.w	r1, r1, #12
 80093e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093ea:	430b      	orrs	r3, r1
 80093ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fa:	6999      	ldr	r1, [r3, #24]
 80093fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	ea40 0301 	orr.w	r3, r0, r1
 8009404:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4bc5      	ldr	r3, [pc, #788]	; (8009720 <UART_SetConfig+0x384>)
 800940c:	429a      	cmp	r2, r3
 800940e:	d004      	beq.n	800941a <UART_SetConfig+0x7e>
 8009410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	4bc3      	ldr	r3, [pc, #780]	; (8009724 <UART_SetConfig+0x388>)
 8009416:	429a      	cmp	r2, r3
 8009418:	d103      	bne.n	8009422 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800941a:	f7fd ff35 	bl	8007288 <HAL_RCC_GetPCLK2Freq>
 800941e:	6778      	str	r0, [r7, #116]	; 0x74
 8009420:	e002      	b.n	8009428 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009422:	f7fd ff1d 	bl	8007260 <HAL_RCC_GetPCLK1Freq>
 8009426:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009430:	f040 80b6 	bne.w	80095a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009436:	461c      	mov	r4, r3
 8009438:	f04f 0500 	mov.w	r5, #0
 800943c:	4622      	mov	r2, r4
 800943e:	462b      	mov	r3, r5
 8009440:	1891      	adds	r1, r2, r2
 8009442:	6439      	str	r1, [r7, #64]	; 0x40
 8009444:	415b      	adcs	r3, r3
 8009446:	647b      	str	r3, [r7, #68]	; 0x44
 8009448:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800944c:	1912      	adds	r2, r2, r4
 800944e:	eb45 0303 	adc.w	r3, r5, r3
 8009452:	f04f 0000 	mov.w	r0, #0
 8009456:	f04f 0100 	mov.w	r1, #0
 800945a:	00d9      	lsls	r1, r3, #3
 800945c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009460:	00d0      	lsls	r0, r2, #3
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	1911      	adds	r1, r2, r4
 8009468:	6639      	str	r1, [r7, #96]	; 0x60
 800946a:	416b      	adcs	r3, r5
 800946c:	667b      	str	r3, [r7, #100]	; 0x64
 800946e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	461a      	mov	r2, r3
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	1891      	adds	r1, r2, r2
 800947a:	63b9      	str	r1, [r7, #56]	; 0x38
 800947c:	415b      	adcs	r3, r3
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009484:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009488:	f7f6 fefa 	bl	8000280 <__aeabi_uldivmod>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4ba5      	ldr	r3, [pc, #660]	; (8009728 <UART_SetConfig+0x38c>)
 8009492:	fba3 2302 	umull	r2, r3, r3, r2
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	011e      	lsls	r6, r3, #4
 800949a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800949c:	461c      	mov	r4, r3
 800949e:	f04f 0500 	mov.w	r5, #0
 80094a2:	4622      	mov	r2, r4
 80094a4:	462b      	mov	r3, r5
 80094a6:	1891      	adds	r1, r2, r2
 80094a8:	6339      	str	r1, [r7, #48]	; 0x30
 80094aa:	415b      	adcs	r3, r3
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
 80094ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80094b2:	1912      	adds	r2, r2, r4
 80094b4:	eb45 0303 	adc.w	r3, r5, r3
 80094b8:	f04f 0000 	mov.w	r0, #0
 80094bc:	f04f 0100 	mov.w	r1, #0
 80094c0:	00d9      	lsls	r1, r3, #3
 80094c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094c6:	00d0      	lsls	r0, r2, #3
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	1911      	adds	r1, r2, r4
 80094ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80094d0:	416b      	adcs	r3, r5
 80094d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	461a      	mov	r2, r3
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	1891      	adds	r1, r2, r2
 80094e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80094e2:	415b      	adcs	r3, r3
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80094ee:	f7f6 fec7 	bl	8000280 <__aeabi_uldivmod>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4b8c      	ldr	r3, [pc, #560]	; (8009728 <UART_SetConfig+0x38c>)
 80094f8:	fba3 1302 	umull	r1, r3, r3, r2
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	2164      	movs	r1, #100	; 0x64
 8009500:	fb01 f303 	mul.w	r3, r1, r3
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	3332      	adds	r3, #50	; 0x32
 800950a:	4a87      	ldr	r2, [pc, #540]	; (8009728 <UART_SetConfig+0x38c>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009518:	441e      	add	r6, r3
 800951a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800951c:	4618      	mov	r0, r3
 800951e:	f04f 0100 	mov.w	r1, #0
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	1894      	adds	r4, r2, r2
 8009528:	623c      	str	r4, [r7, #32]
 800952a:	415b      	adcs	r3, r3
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
 800952e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009532:	1812      	adds	r2, r2, r0
 8009534:	eb41 0303 	adc.w	r3, r1, r3
 8009538:	f04f 0400 	mov.w	r4, #0
 800953c:	f04f 0500 	mov.w	r5, #0
 8009540:	00dd      	lsls	r5, r3, #3
 8009542:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009546:	00d4      	lsls	r4, r2, #3
 8009548:	4622      	mov	r2, r4
 800954a:	462b      	mov	r3, r5
 800954c:	1814      	adds	r4, r2, r0
 800954e:	653c      	str	r4, [r7, #80]	; 0x50
 8009550:	414b      	adcs	r3, r1
 8009552:	657b      	str	r3, [r7, #84]	; 0x54
 8009554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	461a      	mov	r2, r3
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	1891      	adds	r1, r2, r2
 8009560:	61b9      	str	r1, [r7, #24]
 8009562:	415b      	adcs	r3, r3
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800956a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800956e:	f7f6 fe87 	bl	8000280 <__aeabi_uldivmod>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4b6c      	ldr	r3, [pc, #432]	; (8009728 <UART_SetConfig+0x38c>)
 8009578:	fba3 1302 	umull	r1, r3, r3, r2
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	2164      	movs	r1, #100	; 0x64
 8009580:	fb01 f303 	mul.w	r3, r1, r3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	3332      	adds	r3, #50	; 0x32
 800958a:	4a67      	ldr	r2, [pc, #412]	; (8009728 <UART_SetConfig+0x38c>)
 800958c:	fba2 2303 	umull	r2, r3, r2, r3
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	f003 0207 	and.w	r2, r3, #7
 8009596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4432      	add	r2, r6
 800959c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800959e:	e0b9      	b.n	8009714 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a2:	461c      	mov	r4, r3
 80095a4:	f04f 0500 	mov.w	r5, #0
 80095a8:	4622      	mov	r2, r4
 80095aa:	462b      	mov	r3, r5
 80095ac:	1891      	adds	r1, r2, r2
 80095ae:	6139      	str	r1, [r7, #16]
 80095b0:	415b      	adcs	r3, r3
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095b8:	1912      	adds	r2, r2, r4
 80095ba:	eb45 0303 	adc.w	r3, r5, r3
 80095be:	f04f 0000 	mov.w	r0, #0
 80095c2:	f04f 0100 	mov.w	r1, #0
 80095c6:	00d9      	lsls	r1, r3, #3
 80095c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095cc:	00d0      	lsls	r0, r2, #3
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	eb12 0804 	adds.w	r8, r2, r4
 80095d6:	eb43 0905 	adc.w	r9, r3, r5
 80095da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	4618      	mov	r0, r3
 80095e0:	f04f 0100 	mov.w	r1, #0
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	008b      	lsls	r3, r1, #2
 80095ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095f2:	0082      	lsls	r2, r0, #2
 80095f4:	4640      	mov	r0, r8
 80095f6:	4649      	mov	r1, r9
 80095f8:	f7f6 fe42 	bl	8000280 <__aeabi_uldivmod>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4b49      	ldr	r3, [pc, #292]	; (8009728 <UART_SetConfig+0x38c>)
 8009602:	fba3 2302 	umull	r2, r3, r3, r2
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	011e      	lsls	r6, r3, #4
 800960a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800960c:	4618      	mov	r0, r3
 800960e:	f04f 0100 	mov.w	r1, #0
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	1894      	adds	r4, r2, r2
 8009618:	60bc      	str	r4, [r7, #8]
 800961a:	415b      	adcs	r3, r3
 800961c:	60fb      	str	r3, [r7, #12]
 800961e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009622:	1812      	adds	r2, r2, r0
 8009624:	eb41 0303 	adc.w	r3, r1, r3
 8009628:	f04f 0400 	mov.w	r4, #0
 800962c:	f04f 0500 	mov.w	r5, #0
 8009630:	00dd      	lsls	r5, r3, #3
 8009632:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009636:	00d4      	lsls	r4, r2, #3
 8009638:	4622      	mov	r2, r4
 800963a:	462b      	mov	r3, r5
 800963c:	1814      	adds	r4, r2, r0
 800963e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009640:	414b      	adcs	r3, r1
 8009642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4618      	mov	r0, r3
 800964a:	f04f 0100 	mov.w	r1, #0
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	008b      	lsls	r3, r1, #2
 8009658:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800965c:	0082      	lsls	r2, r0, #2
 800965e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009662:	f7f6 fe0d 	bl	8000280 <__aeabi_uldivmod>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <UART_SetConfig+0x38c>)
 800966c:	fba3 1302 	umull	r1, r3, r3, r2
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	2164      	movs	r1, #100	; 0x64
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	3332      	adds	r3, #50	; 0x32
 800967e:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <UART_SetConfig+0x38c>)
 8009680:	fba2 2303 	umull	r2, r3, r2, r3
 8009684:	095b      	lsrs	r3, r3, #5
 8009686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800968a:	441e      	add	r6, r3
 800968c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800968e:	4618      	mov	r0, r3
 8009690:	f04f 0100 	mov.w	r1, #0
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	1894      	adds	r4, r2, r2
 800969a:	603c      	str	r4, [r7, #0]
 800969c:	415b      	adcs	r3, r3
 800969e:	607b      	str	r3, [r7, #4]
 80096a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a4:	1812      	adds	r2, r2, r0
 80096a6:	eb41 0303 	adc.w	r3, r1, r3
 80096aa:	f04f 0400 	mov.w	r4, #0
 80096ae:	f04f 0500 	mov.w	r5, #0
 80096b2:	00dd      	lsls	r5, r3, #3
 80096b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096b8:	00d4      	lsls	r4, r2, #3
 80096ba:	4622      	mov	r2, r4
 80096bc:	462b      	mov	r3, r5
 80096be:	eb12 0a00 	adds.w	sl, r2, r0
 80096c2:	eb43 0b01 	adc.w	fp, r3, r1
 80096c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f04f 0100 	mov.w	r1, #0
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	008b      	lsls	r3, r1, #2
 80096da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096de:	0082      	lsls	r2, r0, #2
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fdcc 	bl	8000280 <__aeabi_uldivmod>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <UART_SetConfig+0x38c>)
 80096ee:	fba3 1302 	umull	r1, r3, r3, r2
 80096f2:	095b      	lsrs	r3, r3, #5
 80096f4:	2164      	movs	r1, #100	; 0x64
 80096f6:	fb01 f303 	mul.w	r3, r1, r3
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	3332      	adds	r3, #50	; 0x32
 8009700:	4a09      	ldr	r2, [pc, #36]	; (8009728 <UART_SetConfig+0x38c>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	f003 020f 	and.w	r2, r3, #15
 800970c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4432      	add	r2, r6
 8009712:	609a      	str	r2, [r3, #8]
}
 8009714:	bf00      	nop
 8009716:	377c      	adds	r7, #124	; 0x7c
 8009718:	46bd      	mov	sp, r7
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	bf00      	nop
 8009720:	40011000 	.word	0x40011000
 8009724:	40011400 	.word	0x40011400
 8009728:	51eb851f 	.word	0x51eb851f

0800972c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	6812      	ldr	r2, [r2, #0]
 8009744:	f023 0101 	bic.w	r1, r3, #1
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	2b08      	cmp	r3, #8
 8009754:	d102      	bne.n	800975c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009756:	2340      	movs	r3, #64	; 0x40
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	e001      	b.n	8009760 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800976c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009772:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009778:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800977e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009784:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800978a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009790:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009796:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800979c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80097ba:	4b10      	ldr	r3, [pc, #64]	; (80097fc <FSMC_NORSRAM_Init+0xd0>)
 80097bc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097c4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80097cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	43db      	mvns	r3, r3
 80097dc:	ea02 0103 	and.w	r1, r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	4319      	orrs	r1, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	0008fb7f 	.word	0x0008fb7f

08009800 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	431a      	orrs	r2, r3
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	431a      	orrs	r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	041b      	lsls	r3, r3, #16
 8009834:	431a      	orrs	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	3b01      	subs	r3, #1
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	431a      	orrs	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	3b02      	subs	r3, #2
 8009846:	061b      	lsls	r3, r3, #24
 8009848:	431a      	orrs	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	4313      	orrs	r3, r2
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	3201      	adds	r2, #1
 8009854:	4319      	orrs	r1, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009880:	d11d      	bne.n	80098be <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800988a:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800988c:	4013      	ands	r3, r2
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	6811      	ldr	r1, [r2, #0]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	6852      	ldr	r2, [r2, #4]
 8009896:	0112      	lsls	r2, r2, #4
 8009898:	4311      	orrs	r1, r2
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	6892      	ldr	r2, [r2, #8]
 800989e:	0212      	lsls	r2, r2, #8
 80098a0:	4311      	orrs	r1, r2
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	6992      	ldr	r2, [r2, #24]
 80098a6:	4311      	orrs	r1, r2
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	68d2      	ldr	r2, [r2, #12]
 80098ac:	0412      	lsls	r2, r2, #16
 80098ae:	430a      	orrs	r2, r1
 80098b0:	ea43 0102 	orr.w	r1, r3, r2
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80098bc:	e005      	b.n	80098ca <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80098c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	cff00000 	.word	0xcff00000

080098dc <__errno>:
 80098dc:	4b01      	ldr	r3, [pc, #4]	; (80098e4 <__errno+0x8>)
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	200000ac 	.word	0x200000ac

080098e8 <__libc_init_array>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	4d0d      	ldr	r5, [pc, #52]	; (8009920 <__libc_init_array+0x38>)
 80098ec:	4c0d      	ldr	r4, [pc, #52]	; (8009924 <__libc_init_array+0x3c>)
 80098ee:	1b64      	subs	r4, r4, r5
 80098f0:	10a4      	asrs	r4, r4, #2
 80098f2:	2600      	movs	r6, #0
 80098f4:	42a6      	cmp	r6, r4
 80098f6:	d109      	bne.n	800990c <__libc_init_array+0x24>
 80098f8:	4d0b      	ldr	r5, [pc, #44]	; (8009928 <__libc_init_array+0x40>)
 80098fa:	4c0c      	ldr	r4, [pc, #48]	; (800992c <__libc_init_array+0x44>)
 80098fc:	f001 fa64 	bl	800adc8 <_init>
 8009900:	1b64      	subs	r4, r4, r5
 8009902:	10a4      	asrs	r4, r4, #2
 8009904:	2600      	movs	r6, #0
 8009906:	42a6      	cmp	r6, r4
 8009908:	d105      	bne.n	8009916 <__libc_init_array+0x2e>
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009910:	4798      	blx	r3
 8009912:	3601      	adds	r6, #1
 8009914:	e7ee      	b.n	80098f4 <__libc_init_array+0xc>
 8009916:	f855 3b04 	ldr.w	r3, [r5], #4
 800991a:	4798      	blx	r3
 800991c:	3601      	adds	r6, #1
 800991e:	e7f2      	b.n	8009906 <__libc_init_array+0x1e>
 8009920:	0800ed94 	.word	0x0800ed94
 8009924:	0800ed94 	.word	0x0800ed94
 8009928:	0800ed94 	.word	0x0800ed94
 800992c:	0800ed98 	.word	0x0800ed98

08009930 <memset>:
 8009930:	4402      	add	r2, r0
 8009932:	4603      	mov	r3, r0
 8009934:	4293      	cmp	r3, r2
 8009936:	d100      	bne.n	800993a <memset+0xa>
 8009938:	4770      	bx	lr
 800993a:	f803 1b01 	strb.w	r1, [r3], #1
 800993e:	e7f9      	b.n	8009934 <memset+0x4>

08009940 <srand>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4b10      	ldr	r3, [pc, #64]	; (8009984 <srand+0x44>)
 8009944:	681d      	ldr	r5, [r3, #0]
 8009946:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009948:	4604      	mov	r4, r0
 800994a:	b9b3      	cbnz	r3, 800997a <srand+0x3a>
 800994c:	2018      	movs	r0, #24
 800994e:	f000 f8f7 	bl	8009b40 <malloc>
 8009952:	4602      	mov	r2, r0
 8009954:	63a8      	str	r0, [r5, #56]	; 0x38
 8009956:	b920      	cbnz	r0, 8009962 <srand+0x22>
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <srand+0x48>)
 800995a:	480c      	ldr	r0, [pc, #48]	; (800998c <srand+0x4c>)
 800995c:	2142      	movs	r1, #66	; 0x42
 800995e:	f000 f8bf 	bl	8009ae0 <__assert_func>
 8009962:	490b      	ldr	r1, [pc, #44]	; (8009990 <srand+0x50>)
 8009964:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <srand+0x54>)
 8009966:	e9c0 1300 	strd	r1, r3, [r0]
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <srand+0x58>)
 800996c:	6083      	str	r3, [r0, #8]
 800996e:	230b      	movs	r3, #11
 8009970:	8183      	strh	r3, [r0, #12]
 8009972:	2100      	movs	r1, #0
 8009974:	2001      	movs	r0, #1
 8009976:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800997a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800997c:	2200      	movs	r2, #0
 800997e:	611c      	str	r4, [r3, #16]
 8009980:	615a      	str	r2, [r3, #20]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200000ac 	.word	0x200000ac
 8009988:	0800ec44 	.word	0x0800ec44
 800998c:	0800ec5b 	.word	0x0800ec5b
 8009990:	abcd330e 	.word	0xabcd330e
 8009994:	e66d1234 	.word	0xe66d1234
 8009998:	0005deec 	.word	0x0005deec

0800999c <rand>:
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <rand+0x60>)
 800999e:	b510      	push	{r4, lr}
 80099a0:	681c      	ldr	r4, [r3, #0]
 80099a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099a4:	b9b3      	cbnz	r3, 80099d4 <rand+0x38>
 80099a6:	2018      	movs	r0, #24
 80099a8:	f000 f8ca 	bl	8009b40 <malloc>
 80099ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80099ae:	b928      	cbnz	r0, 80099bc <rand+0x20>
 80099b0:	4602      	mov	r2, r0
 80099b2:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <rand+0x64>)
 80099b4:	4813      	ldr	r0, [pc, #76]	; (8009a04 <rand+0x68>)
 80099b6:	214e      	movs	r1, #78	; 0x4e
 80099b8:	f000 f892 	bl	8009ae0 <__assert_func>
 80099bc:	4a12      	ldr	r2, [pc, #72]	; (8009a08 <rand+0x6c>)
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <rand+0x70>)
 80099c0:	e9c0 2300 	strd	r2, r3, [r0]
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <rand+0x74>)
 80099c6:	6083      	str	r3, [r0, #8]
 80099c8:	230b      	movs	r3, #11
 80099ca:	8183      	strh	r3, [r0, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	2300      	movs	r3, #0
 80099d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80099d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80099d6:	480f      	ldr	r0, [pc, #60]	; (8009a14 <rand+0x78>)
 80099d8:	690a      	ldr	r2, [r1, #16]
 80099da:	694b      	ldr	r3, [r1, #20]
 80099dc:	4c0e      	ldr	r4, [pc, #56]	; (8009a18 <rand+0x7c>)
 80099de:	4350      	muls	r0, r2
 80099e0:	fb04 0003 	mla	r0, r4, r3, r0
 80099e4:	fba2 3404 	umull	r3, r4, r2, r4
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	4404      	add	r4, r0
 80099ec:	f144 0000 	adc.w	r0, r4, #0
 80099f0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80099f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	bf00      	nop
 80099fc:	200000ac 	.word	0x200000ac
 8009a00:	0800ec44 	.word	0x0800ec44
 8009a04:	0800ec5b 	.word	0x0800ec5b
 8009a08:	abcd330e 	.word	0xabcd330e
 8009a0c:	e66d1234 	.word	0xe66d1234
 8009a10:	0005deec 	.word	0x0005deec
 8009a14:	5851f42d 	.word	0x5851f42d
 8009a18:	4c957f2d 	.word	0x4c957f2d

08009a1c <sniprintf>:
 8009a1c:	b40c      	push	{r2, r3}
 8009a1e:	b530      	push	{r4, r5, lr}
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <sniprintf+0x64>)
 8009a22:	1e0c      	subs	r4, r1, #0
 8009a24:	681d      	ldr	r5, [r3, #0]
 8009a26:	b09d      	sub	sp, #116	; 0x74
 8009a28:	da08      	bge.n	8009a3c <sniprintf+0x20>
 8009a2a:	238b      	movs	r3, #139	; 0x8b
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a32:	b01d      	add	sp, #116	; 0x74
 8009a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a38:	b002      	add	sp, #8
 8009a3a:	4770      	bx	lr
 8009a3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009a40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009a44:	bf14      	ite	ne
 8009a46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a4a:	4623      	moveq	r3, r4
 8009a4c:	9304      	str	r3, [sp, #16]
 8009a4e:	9307      	str	r3, [sp, #28]
 8009a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a54:	9002      	str	r0, [sp, #8]
 8009a56:	9006      	str	r0, [sp, #24]
 8009a58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a5e:	ab21      	add	r3, sp, #132	; 0x84
 8009a60:	a902      	add	r1, sp, #8
 8009a62:	4628      	mov	r0, r5
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	f000 f987 	bl	8009d78 <_svfiprintf_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	bfbc      	itt	lt
 8009a6e:	238b      	movlt	r3, #139	; 0x8b
 8009a70:	602b      	strlt	r3, [r5, #0]
 8009a72:	2c00      	cmp	r4, #0
 8009a74:	d0dd      	beq.n	8009a32 <sniprintf+0x16>
 8009a76:	9b02      	ldr	r3, [sp, #8]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
 8009a7c:	e7d9      	b.n	8009a32 <sniprintf+0x16>
 8009a7e:	bf00      	nop
 8009a80:	200000ac 	.word	0x200000ac

08009a84 <strcat>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	4602      	mov	r2, r0
 8009a88:	7814      	ldrb	r4, [r2, #0]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	3201      	adds	r2, #1
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	d1fa      	bne.n	8009a88 <strcat+0x4>
 8009a92:	3b01      	subs	r3, #1
 8009a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a9c:	2a00      	cmp	r2, #0
 8009a9e:	d1f9      	bne.n	8009a94 <strcat+0x10>
 8009aa0:	bd10      	pop	{r4, pc}
	...

08009aa4 <strdup>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <strdup+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f000 b803 	b.w	8009ab4 <_strdup_r>
 8009aae:	bf00      	nop
 8009ab0:	200000ac 	.word	0x200000ac

08009ab4 <_strdup_r>:
 8009ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	460d      	mov	r5, r1
 8009abc:	f7f6 fb88 	bl	80001d0 <strlen>
 8009ac0:	1c42      	adds	r2, r0, #1
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	9201      	str	r2, [sp, #4]
 8009ac8:	f000 f8a0 	bl	8009c0c <_malloc_r>
 8009acc:	4604      	mov	r4, r0
 8009ace:	b118      	cbz	r0, 8009ad8 <_strdup_r+0x24>
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	f000 f83c 	bl	8009b50 <memcpy>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	b003      	add	sp, #12
 8009adc:	bd30      	pop	{r4, r5, pc}
	...

08009ae0 <__assert_func>:
 8009ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <__assert_func+0x2c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4605      	mov	r5, r0
 8009aec:	68d8      	ldr	r0, [r3, #12]
 8009aee:	b14c      	cbz	r4, 8009b04 <__assert_func+0x24>
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <__assert_func+0x30>)
 8009af2:	9100      	str	r1, [sp, #0]
 8009af4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009af8:	4906      	ldr	r1, [pc, #24]	; (8009b14 <__assert_func+0x34>)
 8009afa:	462b      	mov	r3, r5
 8009afc:	f000 f80e 	bl	8009b1c <fiprintf>
 8009b00:	f000 fdf8 	bl	800a6f4 <abort>
 8009b04:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <__assert_func+0x38>)
 8009b06:	461c      	mov	r4, r3
 8009b08:	e7f3      	b.n	8009af2 <__assert_func+0x12>
 8009b0a:	bf00      	nop
 8009b0c:	200000ac 	.word	0x200000ac
 8009b10:	0800ecba 	.word	0x0800ecba
 8009b14:	0800ecc7 	.word	0x0800ecc7
 8009b18:	0800ecf5 	.word	0x0800ecf5

08009b1c <fiprintf>:
 8009b1c:	b40e      	push	{r1, r2, r3}
 8009b1e:	b503      	push	{r0, r1, lr}
 8009b20:	4601      	mov	r1, r0
 8009b22:	ab03      	add	r3, sp, #12
 8009b24:	4805      	ldr	r0, [pc, #20]	; (8009b3c <fiprintf+0x20>)
 8009b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	f000 fa4d 	bl	8009fcc <_vfiprintf_r>
 8009b32:	b002      	add	sp, #8
 8009b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b38:	b003      	add	sp, #12
 8009b3a:	4770      	bx	lr
 8009b3c:	200000ac 	.word	0x200000ac

08009b40 <malloc>:
 8009b40:	4b02      	ldr	r3, [pc, #8]	; (8009b4c <malloc+0xc>)
 8009b42:	4601      	mov	r1, r0
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	f000 b861 	b.w	8009c0c <_malloc_r>
 8009b4a:	bf00      	nop
 8009b4c:	200000ac 	.word	0x200000ac

08009b50 <memcpy>:
 8009b50:	440a      	add	r2, r1
 8009b52:	4291      	cmp	r1, r2
 8009b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b58:	d100      	bne.n	8009b5c <memcpy+0xc>
 8009b5a:	4770      	bx	lr
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b66:	4291      	cmp	r1, r2
 8009b68:	d1f9      	bne.n	8009b5e <memcpy+0xe>
 8009b6a:	bd10      	pop	{r4, pc}

08009b6c <_free_r>:
 8009b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d048      	beq.n	8009c04 <_free_r+0x98>
 8009b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b76:	9001      	str	r0, [sp, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b7e:	bfb8      	it	lt
 8009b80:	18e4      	addlt	r4, r4, r3
 8009b82:	f000 fff7 	bl	800ab74 <__malloc_lock>
 8009b86:	4a20      	ldr	r2, [pc, #128]	; (8009c08 <_free_r+0x9c>)
 8009b88:	9801      	ldr	r0, [sp, #4]
 8009b8a:	6813      	ldr	r3, [r2, #0]
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	b933      	cbnz	r3, 8009b9e <_free_r+0x32>
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	6014      	str	r4, [r2, #0]
 8009b94:	b003      	add	sp, #12
 8009b96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b9a:	f000 bff1 	b.w	800ab80 <__malloc_unlock>
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	d90b      	bls.n	8009bba <_free_r+0x4e>
 8009ba2:	6821      	ldr	r1, [r4, #0]
 8009ba4:	1862      	adds	r2, r4, r1
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	bf04      	itt	eq
 8009baa:	681a      	ldreq	r2, [r3, #0]
 8009bac:	685b      	ldreq	r3, [r3, #4]
 8009bae:	6063      	str	r3, [r4, #4]
 8009bb0:	bf04      	itt	eq
 8009bb2:	1852      	addeq	r2, r2, r1
 8009bb4:	6022      	streq	r2, [r4, #0]
 8009bb6:	602c      	str	r4, [r5, #0]
 8009bb8:	e7ec      	b.n	8009b94 <_free_r+0x28>
 8009bba:	461a      	mov	r2, r3
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	b10b      	cbz	r3, 8009bc4 <_free_r+0x58>
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d9fa      	bls.n	8009bba <_free_r+0x4e>
 8009bc4:	6811      	ldr	r1, [r2, #0]
 8009bc6:	1855      	adds	r5, r2, r1
 8009bc8:	42a5      	cmp	r5, r4
 8009bca:	d10b      	bne.n	8009be4 <_free_r+0x78>
 8009bcc:	6824      	ldr	r4, [r4, #0]
 8009bce:	4421      	add	r1, r4
 8009bd0:	1854      	adds	r4, r2, r1
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	d1dd      	bne.n	8009b94 <_free_r+0x28>
 8009bd8:	681c      	ldr	r4, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	6053      	str	r3, [r2, #4]
 8009bde:	4421      	add	r1, r4
 8009be0:	6011      	str	r1, [r2, #0]
 8009be2:	e7d7      	b.n	8009b94 <_free_r+0x28>
 8009be4:	d902      	bls.n	8009bec <_free_r+0x80>
 8009be6:	230c      	movs	r3, #12
 8009be8:	6003      	str	r3, [r0, #0]
 8009bea:	e7d3      	b.n	8009b94 <_free_r+0x28>
 8009bec:	6825      	ldr	r5, [r4, #0]
 8009bee:	1961      	adds	r1, r4, r5
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	bf04      	itt	eq
 8009bf4:	6819      	ldreq	r1, [r3, #0]
 8009bf6:	685b      	ldreq	r3, [r3, #4]
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	bf04      	itt	eq
 8009bfc:	1949      	addeq	r1, r1, r5
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	6054      	str	r4, [r2, #4]
 8009c02:	e7c7      	b.n	8009b94 <_free_r+0x28>
 8009c04:	b003      	add	sp, #12
 8009c06:	bd30      	pop	{r4, r5, pc}
 8009c08:	20000194 	.word	0x20000194

08009c0c <_malloc_r>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	1ccd      	adds	r5, r1, #3
 8009c10:	f025 0503 	bic.w	r5, r5, #3
 8009c14:	3508      	adds	r5, #8
 8009c16:	2d0c      	cmp	r5, #12
 8009c18:	bf38      	it	cc
 8009c1a:	250c      	movcc	r5, #12
 8009c1c:	2d00      	cmp	r5, #0
 8009c1e:	4606      	mov	r6, r0
 8009c20:	db01      	blt.n	8009c26 <_malloc_r+0x1a>
 8009c22:	42a9      	cmp	r1, r5
 8009c24:	d903      	bls.n	8009c2e <_malloc_r+0x22>
 8009c26:	230c      	movs	r3, #12
 8009c28:	6033      	str	r3, [r6, #0]
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2e:	f000 ffa1 	bl	800ab74 <__malloc_lock>
 8009c32:	4921      	ldr	r1, [pc, #132]	; (8009cb8 <_malloc_r+0xac>)
 8009c34:	680a      	ldr	r2, [r1, #0]
 8009c36:	4614      	mov	r4, r2
 8009c38:	b99c      	cbnz	r4, 8009c62 <_malloc_r+0x56>
 8009c3a:	4f20      	ldr	r7, [pc, #128]	; (8009cbc <_malloc_r+0xb0>)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	b923      	cbnz	r3, 8009c4a <_malloc_r+0x3e>
 8009c40:	4621      	mov	r1, r4
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 fc86 	bl	800a554 <_sbrk_r>
 8009c48:	6038      	str	r0, [r7, #0]
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 fc81 	bl	800a554 <_sbrk_r>
 8009c52:	1c43      	adds	r3, r0, #1
 8009c54:	d123      	bne.n	8009c9e <_malloc_r+0x92>
 8009c56:	230c      	movs	r3, #12
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 ff90 	bl	800ab80 <__malloc_unlock>
 8009c60:	e7e3      	b.n	8009c2a <_malloc_r+0x1e>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	1b5b      	subs	r3, r3, r5
 8009c66:	d417      	bmi.n	8009c98 <_malloc_r+0x8c>
 8009c68:	2b0b      	cmp	r3, #11
 8009c6a:	d903      	bls.n	8009c74 <_malloc_r+0x68>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	441c      	add	r4, r3
 8009c70:	6025      	str	r5, [r4, #0]
 8009c72:	e004      	b.n	8009c7e <_malloc_r+0x72>
 8009c74:	6863      	ldr	r3, [r4, #4]
 8009c76:	42a2      	cmp	r2, r4
 8009c78:	bf0c      	ite	eq
 8009c7a:	600b      	streq	r3, [r1, #0]
 8009c7c:	6053      	strne	r3, [r2, #4]
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f000 ff7e 	bl	800ab80 <__malloc_unlock>
 8009c84:	f104 000b 	add.w	r0, r4, #11
 8009c88:	1d23      	adds	r3, r4, #4
 8009c8a:	f020 0007 	bic.w	r0, r0, #7
 8009c8e:	1ac2      	subs	r2, r0, r3
 8009c90:	d0cc      	beq.n	8009c2c <_malloc_r+0x20>
 8009c92:	1a1b      	subs	r3, r3, r0
 8009c94:	50a3      	str	r3, [r4, r2]
 8009c96:	e7c9      	b.n	8009c2c <_malloc_r+0x20>
 8009c98:	4622      	mov	r2, r4
 8009c9a:	6864      	ldr	r4, [r4, #4]
 8009c9c:	e7cc      	b.n	8009c38 <_malloc_r+0x2c>
 8009c9e:	1cc4      	adds	r4, r0, #3
 8009ca0:	f024 0403 	bic.w	r4, r4, #3
 8009ca4:	42a0      	cmp	r0, r4
 8009ca6:	d0e3      	beq.n	8009c70 <_malloc_r+0x64>
 8009ca8:	1a21      	subs	r1, r4, r0
 8009caa:	4630      	mov	r0, r6
 8009cac:	f000 fc52 	bl	800a554 <_sbrk_r>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d1dd      	bne.n	8009c70 <_malloc_r+0x64>
 8009cb4:	e7cf      	b.n	8009c56 <_malloc_r+0x4a>
 8009cb6:	bf00      	nop
 8009cb8:	20000194 	.word	0x20000194
 8009cbc:	20000198 	.word	0x20000198

08009cc0 <__ssputs_r>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	688e      	ldr	r6, [r1, #8]
 8009cc6:	429e      	cmp	r6, r3
 8009cc8:	4682      	mov	sl, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4690      	mov	r8, r2
 8009cce:	461f      	mov	r7, r3
 8009cd0:	d838      	bhi.n	8009d44 <__ssputs_r+0x84>
 8009cd2:	898a      	ldrh	r2, [r1, #12]
 8009cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cd8:	d032      	beq.n	8009d40 <__ssputs_r+0x80>
 8009cda:	6825      	ldr	r5, [r4, #0]
 8009cdc:	6909      	ldr	r1, [r1, #16]
 8009cde:	eba5 0901 	sub.w	r9, r5, r1
 8009ce2:	6965      	ldr	r5, [r4, #20]
 8009ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cec:	3301      	adds	r3, #1
 8009cee:	444b      	add	r3, r9
 8009cf0:	106d      	asrs	r5, r5, #1
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	bf38      	it	cc
 8009cf6:	461d      	movcc	r5, r3
 8009cf8:	0553      	lsls	r3, r2, #21
 8009cfa:	d531      	bpl.n	8009d60 <__ssputs_r+0xa0>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7ff ff85 	bl	8009c0c <_malloc_r>
 8009d02:	4606      	mov	r6, r0
 8009d04:	b950      	cbnz	r0, 8009d1c <__ssputs_r+0x5c>
 8009d06:	230c      	movs	r3, #12
 8009d08:	f8ca 3000 	str.w	r3, [sl]
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d12:	81a3      	strh	r3, [r4, #12]
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1c:	6921      	ldr	r1, [r4, #16]
 8009d1e:	464a      	mov	r2, r9
 8009d20:	f7ff ff16 	bl	8009b50 <memcpy>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	6126      	str	r6, [r4, #16]
 8009d32:	6165      	str	r5, [r4, #20]
 8009d34:	444e      	add	r6, r9
 8009d36:	eba5 0509 	sub.w	r5, r5, r9
 8009d3a:	6026      	str	r6, [r4, #0]
 8009d3c:	60a5      	str	r5, [r4, #8]
 8009d3e:	463e      	mov	r6, r7
 8009d40:	42be      	cmp	r6, r7
 8009d42:	d900      	bls.n	8009d46 <__ssputs_r+0x86>
 8009d44:	463e      	mov	r6, r7
 8009d46:	4632      	mov	r2, r6
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	f000 fef8 	bl	800ab40 <memmove>
 8009d50:	68a3      	ldr	r3, [r4, #8]
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	1b9b      	subs	r3, r3, r6
 8009d56:	4432      	add	r2, r6
 8009d58:	60a3      	str	r3, [r4, #8]
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e7db      	b.n	8009d18 <__ssputs_r+0x58>
 8009d60:	462a      	mov	r2, r5
 8009d62:	f000 ff13 	bl	800ab8c <_realloc_r>
 8009d66:	4606      	mov	r6, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d1e1      	bne.n	8009d30 <__ssputs_r+0x70>
 8009d6c:	6921      	ldr	r1, [r4, #16]
 8009d6e:	4650      	mov	r0, sl
 8009d70:	f7ff fefc 	bl	8009b6c <_free_r>
 8009d74:	e7c7      	b.n	8009d06 <__ssputs_r+0x46>
	...

08009d78 <_svfiprintf_r>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	4698      	mov	r8, r3
 8009d7e:	898b      	ldrh	r3, [r1, #12]
 8009d80:	061b      	lsls	r3, r3, #24
 8009d82:	b09d      	sub	sp, #116	; 0x74
 8009d84:	4607      	mov	r7, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	4614      	mov	r4, r2
 8009d8a:	d50e      	bpl.n	8009daa <_svfiprintf_r+0x32>
 8009d8c:	690b      	ldr	r3, [r1, #16]
 8009d8e:	b963      	cbnz	r3, 8009daa <_svfiprintf_r+0x32>
 8009d90:	2140      	movs	r1, #64	; 0x40
 8009d92:	f7ff ff3b 	bl	8009c0c <_malloc_r>
 8009d96:	6028      	str	r0, [r5, #0]
 8009d98:	6128      	str	r0, [r5, #16]
 8009d9a:	b920      	cbnz	r0, 8009da6 <_svfiprintf_r+0x2e>
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e0d1      	b.n	8009f4a <_svfiprintf_r+0x1d2>
 8009da6:	2340      	movs	r3, #64	; 0x40
 8009da8:	616b      	str	r3, [r5, #20]
 8009daa:	2300      	movs	r3, #0
 8009dac:	9309      	str	r3, [sp, #36]	; 0x24
 8009dae:	2320      	movs	r3, #32
 8009db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db8:	2330      	movs	r3, #48	; 0x30
 8009dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f64 <_svfiprintf_r+0x1ec>
 8009dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc2:	f04f 0901 	mov.w	r9, #1
 8009dc6:	4623      	mov	r3, r4
 8009dc8:	469a      	mov	sl, r3
 8009dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dce:	b10a      	cbz	r2, 8009dd4 <_svfiprintf_r+0x5c>
 8009dd0:	2a25      	cmp	r2, #37	; 0x25
 8009dd2:	d1f9      	bne.n	8009dc8 <_svfiprintf_r+0x50>
 8009dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd8:	d00b      	beq.n	8009df2 <_svfiprintf_r+0x7a>
 8009dda:	465b      	mov	r3, fp
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ff6d 	bl	8009cc0 <__ssputs_r>
 8009de6:	3001      	adds	r0, #1
 8009de8:	f000 80aa 	beq.w	8009f40 <_svfiprintf_r+0x1c8>
 8009dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dee:	445a      	add	r2, fp
 8009df0:	9209      	str	r2, [sp, #36]	; 0x24
 8009df2:	f89a 3000 	ldrb.w	r3, [sl]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80a2 	beq.w	8009f40 <_svfiprintf_r+0x1c8>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e06:	f10a 0a01 	add.w	sl, sl, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	9307      	str	r3, [sp, #28]
 8009e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e12:	931a      	str	r3, [sp, #104]	; 0x68
 8009e14:	4654      	mov	r4, sl
 8009e16:	2205      	movs	r2, #5
 8009e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1c:	4851      	ldr	r0, [pc, #324]	; (8009f64 <_svfiprintf_r+0x1ec>)
 8009e1e:	f7f6 f9df 	bl	80001e0 <memchr>
 8009e22:	9a04      	ldr	r2, [sp, #16]
 8009e24:	b9d8      	cbnz	r0, 8009e5e <_svfiprintf_r+0xe6>
 8009e26:	06d0      	lsls	r0, r2, #27
 8009e28:	bf44      	itt	mi
 8009e2a:	2320      	movmi	r3, #32
 8009e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e30:	0711      	lsls	r1, r2, #28
 8009e32:	bf44      	itt	mi
 8009e34:	232b      	movmi	r3, #43	; 0x2b
 8009e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e40:	d015      	beq.n	8009e6e <_svfiprintf_r+0xf6>
 8009e42:	9a07      	ldr	r2, [sp, #28]
 8009e44:	4654      	mov	r4, sl
 8009e46:	2000      	movs	r0, #0
 8009e48:	f04f 0c0a 	mov.w	ip, #10
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e52:	3b30      	subs	r3, #48	; 0x30
 8009e54:	2b09      	cmp	r3, #9
 8009e56:	d94e      	bls.n	8009ef6 <_svfiprintf_r+0x17e>
 8009e58:	b1b0      	cbz	r0, 8009e88 <_svfiprintf_r+0x110>
 8009e5a:	9207      	str	r2, [sp, #28]
 8009e5c:	e014      	b.n	8009e88 <_svfiprintf_r+0x110>
 8009e5e:	eba0 0308 	sub.w	r3, r0, r8
 8009e62:	fa09 f303 	lsl.w	r3, r9, r3
 8009e66:	4313      	orrs	r3, r2
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	46a2      	mov	sl, r4
 8009e6c:	e7d2      	b.n	8009e14 <_svfiprintf_r+0x9c>
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	1d19      	adds	r1, r3, #4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	9103      	str	r1, [sp, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfbb      	ittet	lt
 8009e7a:	425b      	neglt	r3, r3
 8009e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e80:	9307      	strge	r3, [sp, #28]
 8009e82:	9307      	strlt	r3, [sp, #28]
 8009e84:	bfb8      	it	lt
 8009e86:	9204      	strlt	r2, [sp, #16]
 8009e88:	7823      	ldrb	r3, [r4, #0]
 8009e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8c:	d10c      	bne.n	8009ea8 <_svfiprintf_r+0x130>
 8009e8e:	7863      	ldrb	r3, [r4, #1]
 8009e90:	2b2a      	cmp	r3, #42	; 0x2a
 8009e92:	d135      	bne.n	8009f00 <_svfiprintf_r+0x188>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	9203      	str	r2, [sp, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bfb8      	it	lt
 8009ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea4:	3402      	adds	r4, #2
 8009ea6:	9305      	str	r3, [sp, #20]
 8009ea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f74 <_svfiprintf_r+0x1fc>
 8009eac:	7821      	ldrb	r1, [r4, #0]
 8009eae:	2203      	movs	r2, #3
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	f7f6 f995 	bl	80001e0 <memchr>
 8009eb6:	b140      	cbz	r0, 8009eca <_svfiprintf_r+0x152>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	eba0 000a 	sub.w	r0, r0, sl
 8009ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec2:	9b04      	ldr	r3, [sp, #16]
 8009ec4:	4303      	orrs	r3, r0
 8009ec6:	3401      	adds	r4, #1
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ece:	4826      	ldr	r0, [pc, #152]	; (8009f68 <_svfiprintf_r+0x1f0>)
 8009ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed4:	2206      	movs	r2, #6
 8009ed6:	f7f6 f983 	bl	80001e0 <memchr>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d038      	beq.n	8009f50 <_svfiprintf_r+0x1d8>
 8009ede:	4b23      	ldr	r3, [pc, #140]	; (8009f6c <_svfiprintf_r+0x1f4>)
 8009ee0:	bb1b      	cbnz	r3, 8009f2a <_svfiprintf_r+0x1b2>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	3307      	adds	r3, #7
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	3308      	adds	r3, #8
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	4433      	add	r3, r6
 8009ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef4:	e767      	b.n	8009dc6 <_svfiprintf_r+0x4e>
 8009ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efa:	460c      	mov	r4, r1
 8009efc:	2001      	movs	r0, #1
 8009efe:	e7a5      	b.n	8009e4c <_svfiprintf_r+0xd4>
 8009f00:	2300      	movs	r3, #0
 8009f02:	3401      	adds	r4, #1
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	4619      	mov	r1, r3
 8009f08:	f04f 0c0a 	mov.w	ip, #10
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f12:	3a30      	subs	r2, #48	; 0x30
 8009f14:	2a09      	cmp	r2, #9
 8009f16:	d903      	bls.n	8009f20 <_svfiprintf_r+0x1a8>
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d0c5      	beq.n	8009ea8 <_svfiprintf_r+0x130>
 8009f1c:	9105      	str	r1, [sp, #20]
 8009f1e:	e7c3      	b.n	8009ea8 <_svfiprintf_r+0x130>
 8009f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f24:	4604      	mov	r4, r0
 8009f26:	2301      	movs	r3, #1
 8009f28:	e7f0      	b.n	8009f0c <_svfiprintf_r+0x194>
 8009f2a:	ab03      	add	r3, sp, #12
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4b0f      	ldr	r3, [pc, #60]	; (8009f70 <_svfiprintf_r+0x1f8>)
 8009f32:	a904      	add	r1, sp, #16
 8009f34:	4638      	mov	r0, r7
 8009f36:	f3af 8000 	nop.w
 8009f3a:	1c42      	adds	r2, r0, #1
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	d1d6      	bne.n	8009eee <_svfiprintf_r+0x176>
 8009f40:	89ab      	ldrh	r3, [r5, #12]
 8009f42:	065b      	lsls	r3, r3, #25
 8009f44:	f53f af2c 	bmi.w	8009da0 <_svfiprintf_r+0x28>
 8009f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4a:	b01d      	add	sp, #116	; 0x74
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	ab03      	add	r3, sp, #12
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	462a      	mov	r2, r5
 8009f56:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <_svfiprintf_r+0x1f8>)
 8009f58:	a904      	add	r1, sp, #16
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	f000 f9d4 	bl	800a308 <_printf_i>
 8009f60:	e7eb      	b.n	8009f3a <_svfiprintf_r+0x1c2>
 8009f62:	bf00      	nop
 8009f64:	0800ecf6 	.word	0x0800ecf6
 8009f68:	0800ed00 	.word	0x0800ed00
 8009f6c:	00000000 	.word	0x00000000
 8009f70:	08009cc1 	.word	0x08009cc1
 8009f74:	0800ecfc 	.word	0x0800ecfc

08009f78 <__sfputc_r>:
 8009f78:	6893      	ldr	r3, [r2, #8]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	b410      	push	{r4}
 8009f80:	6093      	str	r3, [r2, #8]
 8009f82:	da08      	bge.n	8009f96 <__sfputc_r+0x1e>
 8009f84:	6994      	ldr	r4, [r2, #24]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	db01      	blt.n	8009f8e <__sfputc_r+0x16>
 8009f8a:	290a      	cmp	r1, #10
 8009f8c:	d103      	bne.n	8009f96 <__sfputc_r+0x1e>
 8009f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f92:	f000 baef 	b.w	800a574 <__swbuf_r>
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	1c58      	adds	r0, r3, #1
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	7019      	strb	r1, [r3, #0]
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <__sfputs_r>:
 8009fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	18d5      	adds	r5, r2, r3
 8009fb0:	42ac      	cmp	r4, r5
 8009fb2:	d101      	bne.n	8009fb8 <__sfputs_r+0x12>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e007      	b.n	8009fc8 <__sfputs_r+0x22>
 8009fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffda 	bl	8009f78 <__sfputc_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d1f3      	bne.n	8009fb0 <__sfputs_r+0xa>
 8009fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fcc <_vfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	b09d      	sub	sp, #116	; 0x74
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	4606      	mov	r6, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_vfiprintf_r+0x18>
 8009fdc:	6983      	ldr	r3, [r0, #24]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_vfiprintf_r+0x18>
 8009fe0:	f000 fcaa 	bl	800a938 <__sinit>
 8009fe4:	4b89      	ldr	r3, [pc, #548]	; (800a20c <_vfiprintf_r+0x240>)
 8009fe6:	429d      	cmp	r5, r3
 8009fe8:	d11b      	bne.n	800a022 <_vfiprintf_r+0x56>
 8009fea:	6875      	ldr	r5, [r6, #4]
 8009fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fee:	07d9      	lsls	r1, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_vfiprintf_r+0x32>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_vfiprintf_r+0x32>
 8009ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffa:	f000 fd3b 	bl	800aa74 <__retarget_lock_acquire_recursive>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	071b      	lsls	r3, r3, #28
 800a002:	d501      	bpl.n	800a008 <_vfiprintf_r+0x3c>
 800a004:	692b      	ldr	r3, [r5, #16]
 800a006:	b9eb      	cbnz	r3, 800a044 <_vfiprintf_r+0x78>
 800a008:	4629      	mov	r1, r5
 800a00a:	4630      	mov	r0, r6
 800a00c:	f000 fb04 	bl	800a618 <__swsetup_r>
 800a010:	b1c0      	cbz	r0, 800a044 <_vfiprintf_r+0x78>
 800a012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a014:	07dc      	lsls	r4, r3, #31
 800a016:	d50e      	bpl.n	800a036 <_vfiprintf_r+0x6a>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b01d      	add	sp, #116	; 0x74
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	4b7b      	ldr	r3, [pc, #492]	; (800a210 <_vfiprintf_r+0x244>)
 800a024:	429d      	cmp	r5, r3
 800a026:	d101      	bne.n	800a02c <_vfiprintf_r+0x60>
 800a028:	68b5      	ldr	r5, [r6, #8]
 800a02a:	e7df      	b.n	8009fec <_vfiprintf_r+0x20>
 800a02c:	4b79      	ldr	r3, [pc, #484]	; (800a214 <_vfiprintf_r+0x248>)
 800a02e:	429d      	cmp	r5, r3
 800a030:	bf08      	it	eq
 800a032:	68f5      	ldreq	r5, [r6, #12]
 800a034:	e7da      	b.n	8009fec <_vfiprintf_r+0x20>
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	0598      	lsls	r0, r3, #22
 800a03a:	d4ed      	bmi.n	800a018 <_vfiprintf_r+0x4c>
 800a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03e:	f000 fd1a 	bl	800aa76 <__retarget_lock_release_recursive>
 800a042:	e7e9      	b.n	800a018 <_vfiprintf_r+0x4c>
 800a044:	2300      	movs	r3, #0
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	2320      	movs	r3, #32
 800a04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a052:	2330      	movs	r3, #48	; 0x30
 800a054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a218 <_vfiprintf_r+0x24c>
 800a058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05c:	f04f 0901 	mov.w	r9, #1
 800a060:	4623      	mov	r3, r4
 800a062:	469a      	mov	sl, r3
 800a064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a068:	b10a      	cbz	r2, 800a06e <_vfiprintf_r+0xa2>
 800a06a:	2a25      	cmp	r2, #37	; 0x25
 800a06c:	d1f9      	bne.n	800a062 <_vfiprintf_r+0x96>
 800a06e:	ebba 0b04 	subs.w	fp, sl, r4
 800a072:	d00b      	beq.n	800a08c <_vfiprintf_r+0xc0>
 800a074:	465b      	mov	r3, fp
 800a076:	4622      	mov	r2, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff93 	bl	8009fa6 <__sfputs_r>
 800a080:	3001      	adds	r0, #1
 800a082:	f000 80aa 	beq.w	800a1da <_vfiprintf_r+0x20e>
 800a086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a088:	445a      	add	r2, fp
 800a08a:	9209      	str	r2, [sp, #36]	; 0x24
 800a08c:	f89a 3000 	ldrb.w	r3, [sl]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 80a2 	beq.w	800a1da <_vfiprintf_r+0x20e>
 800a096:	2300      	movs	r3, #0
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a0:	f10a 0a01 	add.w	sl, sl, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2205      	movs	r2, #5
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4858      	ldr	r0, [pc, #352]	; (800a218 <_vfiprintf_r+0x24c>)
 800a0b8:	f7f6 f892 	bl	80001e0 <memchr>
 800a0bc:	9a04      	ldr	r2, [sp, #16]
 800a0be:	b9d8      	cbnz	r0, 800a0f8 <_vfiprintf_r+0x12c>
 800a0c0:	06d1      	lsls	r1, r2, #27
 800a0c2:	bf44      	itt	mi
 800a0c4:	2320      	movmi	r3, #32
 800a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ca:	0713      	lsls	r3, r2, #28
 800a0cc:	bf44      	itt	mi
 800a0ce:	232b      	movmi	r3, #43	; 0x2b
 800a0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0da:	d015      	beq.n	800a108 <_vfiprintf_r+0x13c>
 800a0dc:	9a07      	ldr	r2, [sp, #28]
 800a0de:	4654      	mov	r4, sl
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f04f 0c0a 	mov.w	ip, #10
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ec:	3b30      	subs	r3, #48	; 0x30
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d94e      	bls.n	800a190 <_vfiprintf_r+0x1c4>
 800a0f2:	b1b0      	cbz	r0, 800a122 <_vfiprintf_r+0x156>
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	e014      	b.n	800a122 <_vfiprintf_r+0x156>
 800a0f8:	eba0 0308 	sub.w	r3, r0, r8
 800a0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	46a2      	mov	sl, r4
 800a106:	e7d2      	b.n	800a0ae <_vfiprintf_r+0xe2>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d19      	adds	r1, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9103      	str	r1, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfbb      	ittet	lt
 800a114:	425b      	neglt	r3, r3
 800a116:	f042 0202 	orrlt.w	r2, r2, #2
 800a11a:	9307      	strge	r3, [sp, #28]
 800a11c:	9307      	strlt	r3, [sp, #28]
 800a11e:	bfb8      	it	lt
 800a120:	9204      	strlt	r2, [sp, #16]
 800a122:	7823      	ldrb	r3, [r4, #0]
 800a124:	2b2e      	cmp	r3, #46	; 0x2e
 800a126:	d10c      	bne.n	800a142 <_vfiprintf_r+0x176>
 800a128:	7863      	ldrb	r3, [r4, #1]
 800a12a:	2b2a      	cmp	r3, #42	; 0x2a
 800a12c:	d135      	bne.n	800a19a <_vfiprintf_r+0x1ce>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	9203      	str	r2, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfb8      	it	lt
 800a13a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a13e:	3402      	adds	r4, #2
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a228 <_vfiprintf_r+0x25c>
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	2203      	movs	r2, #3
 800a14a:	4650      	mov	r0, sl
 800a14c:	f7f6 f848 	bl	80001e0 <memchr>
 800a150:	b140      	cbz	r0, 800a164 <_vfiprintf_r+0x198>
 800a152:	2340      	movs	r3, #64	; 0x40
 800a154:	eba0 000a 	sub.w	r0, r0, sl
 800a158:	fa03 f000 	lsl.w	r0, r3, r0
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	4303      	orrs	r3, r0
 800a160:	3401      	adds	r4, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	482c      	ldr	r0, [pc, #176]	; (800a21c <_vfiprintf_r+0x250>)
 800a16a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16e:	2206      	movs	r2, #6
 800a170:	f7f6 f836 	bl	80001e0 <memchr>
 800a174:	2800      	cmp	r0, #0
 800a176:	d03f      	beq.n	800a1f8 <_vfiprintf_r+0x22c>
 800a178:	4b29      	ldr	r3, [pc, #164]	; (800a220 <_vfiprintf_r+0x254>)
 800a17a:	bb1b      	cbnz	r3, 800a1c4 <_vfiprintf_r+0x1f8>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	3307      	adds	r3, #7
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	9303      	str	r3, [sp, #12]
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	443b      	add	r3, r7
 800a18c:	9309      	str	r3, [sp, #36]	; 0x24
 800a18e:	e767      	b.n	800a060 <_vfiprintf_r+0x94>
 800a190:	fb0c 3202 	mla	r2, ip, r2, r3
 800a194:	460c      	mov	r4, r1
 800a196:	2001      	movs	r0, #1
 800a198:	e7a5      	b.n	800a0e6 <_vfiprintf_r+0x11a>
 800a19a:	2300      	movs	r3, #0
 800a19c:	3401      	adds	r4, #1
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f04f 0c0a 	mov.w	ip, #10
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ac:	3a30      	subs	r2, #48	; 0x30
 800a1ae:	2a09      	cmp	r2, #9
 800a1b0:	d903      	bls.n	800a1ba <_vfiprintf_r+0x1ee>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0c5      	beq.n	800a142 <_vfiprintf_r+0x176>
 800a1b6:	9105      	str	r1, [sp, #20]
 800a1b8:	e7c3      	b.n	800a142 <_vfiprintf_r+0x176>
 800a1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1be:	4604      	mov	r4, r0
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e7f0      	b.n	800a1a6 <_vfiprintf_r+0x1da>
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4b16      	ldr	r3, [pc, #88]	; (800a224 <_vfiprintf_r+0x258>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f3af 8000 	nop.w
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	1c78      	adds	r0, r7, #1
 800a1d8:	d1d6      	bne.n	800a188 <_vfiprintf_r+0x1bc>
 800a1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1dc:	07d9      	lsls	r1, r3, #31
 800a1de:	d405      	bmi.n	800a1ec <_vfiprintf_r+0x220>
 800a1e0:	89ab      	ldrh	r3, [r5, #12]
 800a1e2:	059a      	lsls	r2, r3, #22
 800a1e4:	d402      	bmi.n	800a1ec <_vfiprintf_r+0x220>
 800a1e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e8:	f000 fc45 	bl	800aa76 <__retarget_lock_release_recursive>
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	065b      	lsls	r3, r3, #25
 800a1f0:	f53f af12 	bmi.w	800a018 <_vfiprintf_r+0x4c>
 800a1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f6:	e711      	b.n	800a01c <_vfiprintf_r+0x50>
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b09      	ldr	r3, [pc, #36]	; (800a224 <_vfiprintf_r+0x258>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f880 	bl	800a308 <_printf_i>
 800a208:	e7e4      	b.n	800a1d4 <_vfiprintf_r+0x208>
 800a20a:	bf00      	nop
 800a20c:	0800ed4c 	.word	0x0800ed4c
 800a210:	0800ed6c 	.word	0x0800ed6c
 800a214:	0800ed2c 	.word	0x0800ed2c
 800a218:	0800ecf6 	.word	0x0800ecf6
 800a21c:	0800ed00 	.word	0x0800ed00
 800a220:	00000000 	.word	0x00000000
 800a224:	08009fa7 	.word	0x08009fa7
 800a228:	0800ecfc 	.word	0x0800ecfc

0800a22c <_printf_common>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	4616      	mov	r6, r2
 800a232:	4699      	mov	r9, r3
 800a234:	688a      	ldr	r2, [r1, #8]
 800a236:	690b      	ldr	r3, [r1, #16]
 800a238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a23c:	4293      	cmp	r3, r2
 800a23e:	bfb8      	it	lt
 800a240:	4613      	movlt	r3, r2
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a248:	4607      	mov	r7, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	b10a      	cbz	r2, 800a252 <_printf_common+0x26>
 800a24e:	3301      	adds	r3, #1
 800a250:	6033      	str	r3, [r6, #0]
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	0699      	lsls	r1, r3, #26
 800a256:	bf42      	ittt	mi
 800a258:	6833      	ldrmi	r3, [r6, #0]
 800a25a:	3302      	addmi	r3, #2
 800a25c:	6033      	strmi	r3, [r6, #0]
 800a25e:	6825      	ldr	r5, [r4, #0]
 800a260:	f015 0506 	ands.w	r5, r5, #6
 800a264:	d106      	bne.n	800a274 <_printf_common+0x48>
 800a266:	f104 0a19 	add.w	sl, r4, #25
 800a26a:	68e3      	ldr	r3, [r4, #12]
 800a26c:	6832      	ldr	r2, [r6, #0]
 800a26e:	1a9b      	subs	r3, r3, r2
 800a270:	42ab      	cmp	r3, r5
 800a272:	dc26      	bgt.n	800a2c2 <_printf_common+0x96>
 800a274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a278:	1e13      	subs	r3, r2, #0
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2301      	movne	r3, #1
 800a280:	0692      	lsls	r2, r2, #26
 800a282:	d42b      	bmi.n	800a2dc <_printf_common+0xb0>
 800a284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a288:	4649      	mov	r1, r9
 800a28a:	4638      	mov	r0, r7
 800a28c:	47c0      	blx	r8
 800a28e:	3001      	adds	r0, #1
 800a290:	d01e      	beq.n	800a2d0 <_printf_common+0xa4>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	68e5      	ldr	r5, [r4, #12]
 800a296:	6832      	ldr	r2, [r6, #0]
 800a298:	f003 0306 	and.w	r3, r3, #6
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	bf08      	it	eq
 800a2a0:	1aad      	subeq	r5, r5, r2
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	bf0c      	ite	eq
 800a2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2ac:	2500      	movne	r5, #0
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	bfc4      	itt	gt
 800a2b2:	1a9b      	subgt	r3, r3, r2
 800a2b4:	18ed      	addgt	r5, r5, r3
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	341a      	adds	r4, #26
 800a2ba:	42b5      	cmp	r5, r6
 800a2bc:	d11a      	bne.n	800a2f4 <_printf_common+0xc8>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e008      	b.n	800a2d4 <_printf_common+0xa8>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4652      	mov	r2, sl
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	47c0      	blx	r8
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d103      	bne.n	800a2d8 <_printf_common+0xac>
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d8:	3501      	adds	r5, #1
 800a2da:	e7c6      	b.n	800a26a <_printf_common+0x3e>
 800a2dc:	18e1      	adds	r1, r4, r3
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	2030      	movs	r0, #48	; 0x30
 800a2e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e6:	4422      	add	r2, r4
 800a2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	e7c7      	b.n	800a284 <_printf_common+0x58>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d0e6      	beq.n	800a2d0 <_printf_common+0xa4>
 800a302:	3601      	adds	r6, #1
 800a304:	e7d9      	b.n	800a2ba <_printf_common+0x8e>
	...

0800a308 <_printf_i>:
 800a308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	4691      	mov	r9, r2
 800a310:	7e27      	ldrb	r7, [r4, #24]
 800a312:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a314:	2f78      	cmp	r7, #120	; 0x78
 800a316:	4680      	mov	r8, r0
 800a318:	469a      	mov	sl, r3
 800a31a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a31e:	d807      	bhi.n	800a330 <_printf_i+0x28>
 800a320:	2f62      	cmp	r7, #98	; 0x62
 800a322:	d80a      	bhi.n	800a33a <_printf_i+0x32>
 800a324:	2f00      	cmp	r7, #0
 800a326:	f000 80d8 	beq.w	800a4da <_printf_i+0x1d2>
 800a32a:	2f58      	cmp	r7, #88	; 0x58
 800a32c:	f000 80a3 	beq.w	800a476 <_printf_i+0x16e>
 800a330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a338:	e03a      	b.n	800a3b0 <_printf_i+0xa8>
 800a33a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a33e:	2b15      	cmp	r3, #21
 800a340:	d8f6      	bhi.n	800a330 <_printf_i+0x28>
 800a342:	a001      	add	r0, pc, #4	; (adr r0, 800a348 <_printf_i+0x40>)
 800a344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a348:	0800a3a1 	.word	0x0800a3a1
 800a34c:	0800a3b5 	.word	0x0800a3b5
 800a350:	0800a331 	.word	0x0800a331
 800a354:	0800a331 	.word	0x0800a331
 800a358:	0800a331 	.word	0x0800a331
 800a35c:	0800a331 	.word	0x0800a331
 800a360:	0800a3b5 	.word	0x0800a3b5
 800a364:	0800a331 	.word	0x0800a331
 800a368:	0800a331 	.word	0x0800a331
 800a36c:	0800a331 	.word	0x0800a331
 800a370:	0800a331 	.word	0x0800a331
 800a374:	0800a4c1 	.word	0x0800a4c1
 800a378:	0800a3e5 	.word	0x0800a3e5
 800a37c:	0800a4a3 	.word	0x0800a4a3
 800a380:	0800a331 	.word	0x0800a331
 800a384:	0800a331 	.word	0x0800a331
 800a388:	0800a4e3 	.word	0x0800a4e3
 800a38c:	0800a331 	.word	0x0800a331
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a331 	.word	0x0800a331
 800a398:	0800a331 	.word	0x0800a331
 800a39c:	0800a4ab 	.word	0x0800a4ab
 800a3a0:	680b      	ldr	r3, [r1, #0]
 800a3a2:	1d1a      	adds	r2, r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	600a      	str	r2, [r1, #0]
 800a3a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e0a3      	b.n	800a4fc <_printf_i+0x1f4>
 800a3b4:	6825      	ldr	r5, [r4, #0]
 800a3b6:	6808      	ldr	r0, [r1, #0]
 800a3b8:	062e      	lsls	r6, r5, #24
 800a3ba:	f100 0304 	add.w	r3, r0, #4
 800a3be:	d50a      	bpl.n	800a3d6 <_printf_i+0xce>
 800a3c0:	6805      	ldr	r5, [r0, #0]
 800a3c2:	600b      	str	r3, [r1, #0]
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	da03      	bge.n	800a3d0 <_printf_i+0xc8>
 800a3c8:	232d      	movs	r3, #45	; 0x2d
 800a3ca:	426d      	negs	r5, r5
 800a3cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d0:	485e      	ldr	r0, [pc, #376]	; (800a54c <_printf_i+0x244>)
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	e019      	b.n	800a40a <_printf_i+0x102>
 800a3d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3da:	6805      	ldr	r5, [r0, #0]
 800a3dc:	600b      	str	r3, [r1, #0]
 800a3de:	bf18      	it	ne
 800a3e0:	b22d      	sxthne	r5, r5
 800a3e2:	e7ef      	b.n	800a3c4 <_printf_i+0xbc>
 800a3e4:	680b      	ldr	r3, [r1, #0]
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	1d18      	adds	r0, r3, #4
 800a3ea:	6008      	str	r0, [r1, #0]
 800a3ec:	0628      	lsls	r0, r5, #24
 800a3ee:	d501      	bpl.n	800a3f4 <_printf_i+0xec>
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <_printf_i+0xf2>
 800a3f4:	0669      	lsls	r1, r5, #25
 800a3f6:	d5fb      	bpl.n	800a3f0 <_printf_i+0xe8>
 800a3f8:	881d      	ldrh	r5, [r3, #0]
 800a3fa:	4854      	ldr	r0, [pc, #336]	; (800a54c <_printf_i+0x244>)
 800a3fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a3fe:	bf0c      	ite	eq
 800a400:	2308      	moveq	r3, #8
 800a402:	230a      	movne	r3, #10
 800a404:	2100      	movs	r1, #0
 800a406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a40a:	6866      	ldr	r6, [r4, #4]
 800a40c:	60a6      	str	r6, [r4, #8]
 800a40e:	2e00      	cmp	r6, #0
 800a410:	bfa2      	ittt	ge
 800a412:	6821      	ldrge	r1, [r4, #0]
 800a414:	f021 0104 	bicge.w	r1, r1, #4
 800a418:	6021      	strge	r1, [r4, #0]
 800a41a:	b90d      	cbnz	r5, 800a420 <_printf_i+0x118>
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	d04d      	beq.n	800a4bc <_printf_i+0x1b4>
 800a420:	4616      	mov	r6, r2
 800a422:	fbb5 f1f3 	udiv	r1, r5, r3
 800a426:	fb03 5711 	mls	r7, r3, r1, r5
 800a42a:	5dc7      	ldrb	r7, [r0, r7]
 800a42c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a430:	462f      	mov	r7, r5
 800a432:	42bb      	cmp	r3, r7
 800a434:	460d      	mov	r5, r1
 800a436:	d9f4      	bls.n	800a422 <_printf_i+0x11a>
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d10b      	bne.n	800a454 <_printf_i+0x14c>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	07df      	lsls	r7, r3, #31
 800a440:	d508      	bpl.n	800a454 <_printf_i+0x14c>
 800a442:	6923      	ldr	r3, [r4, #16]
 800a444:	6861      	ldr	r1, [r4, #4]
 800a446:	4299      	cmp	r1, r3
 800a448:	bfde      	ittt	le
 800a44a:	2330      	movle	r3, #48	; 0x30
 800a44c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a450:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a454:	1b92      	subs	r2, r2, r6
 800a456:	6122      	str	r2, [r4, #16]
 800a458:	f8cd a000 	str.w	sl, [sp]
 800a45c:	464b      	mov	r3, r9
 800a45e:	aa03      	add	r2, sp, #12
 800a460:	4621      	mov	r1, r4
 800a462:	4640      	mov	r0, r8
 800a464:	f7ff fee2 	bl	800a22c <_printf_common>
 800a468:	3001      	adds	r0, #1
 800a46a:	d14c      	bne.n	800a506 <_printf_i+0x1fe>
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	b004      	add	sp, #16
 800a472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a476:	4835      	ldr	r0, [pc, #212]	; (800a54c <_printf_i+0x244>)
 800a478:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	680e      	ldr	r6, [r1, #0]
 800a480:	061f      	lsls	r7, r3, #24
 800a482:	f856 5b04 	ldr.w	r5, [r6], #4
 800a486:	600e      	str	r6, [r1, #0]
 800a488:	d514      	bpl.n	800a4b4 <_printf_i+0x1ac>
 800a48a:	07d9      	lsls	r1, r3, #31
 800a48c:	bf44      	itt	mi
 800a48e:	f043 0320 	orrmi.w	r3, r3, #32
 800a492:	6023      	strmi	r3, [r4, #0]
 800a494:	b91d      	cbnz	r5, 800a49e <_printf_i+0x196>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	f023 0320 	bic.w	r3, r3, #32
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	2310      	movs	r3, #16
 800a4a0:	e7b0      	b.n	800a404 <_printf_i+0xfc>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	f043 0320 	orr.w	r3, r3, #32
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	2378      	movs	r3, #120	; 0x78
 800a4ac:	4828      	ldr	r0, [pc, #160]	; (800a550 <_printf_i+0x248>)
 800a4ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4b2:	e7e3      	b.n	800a47c <_printf_i+0x174>
 800a4b4:	065e      	lsls	r6, r3, #25
 800a4b6:	bf48      	it	mi
 800a4b8:	b2ad      	uxthmi	r5, r5
 800a4ba:	e7e6      	b.n	800a48a <_printf_i+0x182>
 800a4bc:	4616      	mov	r6, r2
 800a4be:	e7bb      	b.n	800a438 <_printf_i+0x130>
 800a4c0:	680b      	ldr	r3, [r1, #0]
 800a4c2:	6826      	ldr	r6, [r4, #0]
 800a4c4:	6960      	ldr	r0, [r4, #20]
 800a4c6:	1d1d      	adds	r5, r3, #4
 800a4c8:	600d      	str	r5, [r1, #0]
 800a4ca:	0635      	lsls	r5, r6, #24
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	d501      	bpl.n	800a4d4 <_printf_i+0x1cc>
 800a4d0:	6018      	str	r0, [r3, #0]
 800a4d2:	e002      	b.n	800a4da <_printf_i+0x1d2>
 800a4d4:	0671      	lsls	r1, r6, #25
 800a4d6:	d5fb      	bpl.n	800a4d0 <_printf_i+0x1c8>
 800a4d8:	8018      	strh	r0, [r3, #0]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	4616      	mov	r6, r2
 800a4e0:	e7ba      	b.n	800a458 <_printf_i+0x150>
 800a4e2:	680b      	ldr	r3, [r1, #0]
 800a4e4:	1d1a      	adds	r2, r3, #4
 800a4e6:	600a      	str	r2, [r1, #0]
 800a4e8:	681e      	ldr	r6, [r3, #0]
 800a4ea:	6862      	ldr	r2, [r4, #4]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f7f5 fe76 	bl	80001e0 <memchr>
 800a4f4:	b108      	cbz	r0, 800a4fa <_printf_i+0x1f2>
 800a4f6:	1b80      	subs	r0, r0, r6
 800a4f8:	6060      	str	r0, [r4, #4]
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	6123      	str	r3, [r4, #16]
 800a4fe:	2300      	movs	r3, #0
 800a500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a504:	e7a8      	b.n	800a458 <_printf_i+0x150>
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	4632      	mov	r2, r6
 800a50a:	4649      	mov	r1, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	47d0      	blx	sl
 800a510:	3001      	adds	r0, #1
 800a512:	d0ab      	beq.n	800a46c <_printf_i+0x164>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	079b      	lsls	r3, r3, #30
 800a518:	d413      	bmi.n	800a542 <_printf_i+0x23a>
 800a51a:	68e0      	ldr	r0, [r4, #12]
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	4298      	cmp	r0, r3
 800a520:	bfb8      	it	lt
 800a522:	4618      	movlt	r0, r3
 800a524:	e7a4      	b.n	800a470 <_printf_i+0x168>
 800a526:	2301      	movs	r3, #1
 800a528:	4632      	mov	r2, r6
 800a52a:	4649      	mov	r1, r9
 800a52c:	4640      	mov	r0, r8
 800a52e:	47d0      	blx	sl
 800a530:	3001      	adds	r0, #1
 800a532:	d09b      	beq.n	800a46c <_printf_i+0x164>
 800a534:	3501      	adds	r5, #1
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	9903      	ldr	r1, [sp, #12]
 800a53a:	1a5b      	subs	r3, r3, r1
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dcf2      	bgt.n	800a526 <_printf_i+0x21e>
 800a540:	e7eb      	b.n	800a51a <_printf_i+0x212>
 800a542:	2500      	movs	r5, #0
 800a544:	f104 0619 	add.w	r6, r4, #25
 800a548:	e7f5      	b.n	800a536 <_printf_i+0x22e>
 800a54a:	bf00      	nop
 800a54c:	0800ed07 	.word	0x0800ed07
 800a550:	0800ed18 	.word	0x0800ed18

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d06      	ldr	r5, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	f7fb faf6 	bl	8005b50 <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20002a90 	.word	0x20002a90

0800a574 <__swbuf_r>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	460e      	mov	r6, r1
 800a578:	4614      	mov	r4, r2
 800a57a:	4605      	mov	r5, r0
 800a57c:	b118      	cbz	r0, 800a586 <__swbuf_r+0x12>
 800a57e:	6983      	ldr	r3, [r0, #24]
 800a580:	b90b      	cbnz	r3, 800a586 <__swbuf_r+0x12>
 800a582:	f000 f9d9 	bl	800a938 <__sinit>
 800a586:	4b21      	ldr	r3, [pc, #132]	; (800a60c <__swbuf_r+0x98>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	d12b      	bne.n	800a5e4 <__swbuf_r+0x70>
 800a58c:	686c      	ldr	r4, [r5, #4]
 800a58e:	69a3      	ldr	r3, [r4, #24]
 800a590:	60a3      	str	r3, [r4, #8]
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	071a      	lsls	r2, r3, #28
 800a596:	d52f      	bpl.n	800a5f8 <__swbuf_r+0x84>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	b36b      	cbz	r3, 800a5f8 <__swbuf_r+0x84>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	6820      	ldr	r0, [r4, #0]
 800a5a0:	1ac0      	subs	r0, r0, r3
 800a5a2:	6963      	ldr	r3, [r4, #20]
 800a5a4:	b2f6      	uxtb	r6, r6
 800a5a6:	4283      	cmp	r3, r0
 800a5a8:	4637      	mov	r7, r6
 800a5aa:	dc04      	bgt.n	800a5b6 <__swbuf_r+0x42>
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 f92e 	bl	800a810 <_fflush_r>
 800a5b4:	bb30      	cbnz	r0, 800a604 <__swbuf_r+0x90>
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	60a3      	str	r3, [r4, #8]
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	6022      	str	r2, [r4, #0]
 800a5c2:	701e      	strb	r6, [r3, #0]
 800a5c4:	6963      	ldr	r3, [r4, #20]
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	d004      	beq.n	800a5d6 <__swbuf_r+0x62>
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	07db      	lsls	r3, r3, #31
 800a5d0:	d506      	bpl.n	800a5e0 <__swbuf_r+0x6c>
 800a5d2:	2e0a      	cmp	r6, #10
 800a5d4:	d104      	bne.n	800a5e0 <__swbuf_r+0x6c>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f000 f919 	bl	800a810 <_fflush_r>
 800a5de:	b988      	cbnz	r0, 800a604 <__swbuf_r+0x90>
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <__swbuf_r+0x9c>)
 800a5e6:	429c      	cmp	r4, r3
 800a5e8:	d101      	bne.n	800a5ee <__swbuf_r+0x7a>
 800a5ea:	68ac      	ldr	r4, [r5, #8]
 800a5ec:	e7cf      	b.n	800a58e <__swbuf_r+0x1a>
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <__swbuf_r+0xa0>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	bf08      	it	eq
 800a5f4:	68ec      	ldreq	r4, [r5, #12]
 800a5f6:	e7ca      	b.n	800a58e <__swbuf_r+0x1a>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f80c 	bl	800a618 <__swsetup_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	d0cb      	beq.n	800a59c <__swbuf_r+0x28>
 800a604:	f04f 37ff 	mov.w	r7, #4294967295
 800a608:	e7ea      	b.n	800a5e0 <__swbuf_r+0x6c>
 800a60a:	bf00      	nop
 800a60c:	0800ed4c 	.word	0x0800ed4c
 800a610:	0800ed6c 	.word	0x0800ed6c
 800a614:	0800ed2c 	.word	0x0800ed2c

0800a618 <__swsetup_r>:
 800a618:	4b32      	ldr	r3, [pc, #200]	; (800a6e4 <__swsetup_r+0xcc>)
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	681d      	ldr	r5, [r3, #0]
 800a61e:	4606      	mov	r6, r0
 800a620:	460c      	mov	r4, r1
 800a622:	b125      	cbz	r5, 800a62e <__swsetup_r+0x16>
 800a624:	69ab      	ldr	r3, [r5, #24]
 800a626:	b913      	cbnz	r3, 800a62e <__swsetup_r+0x16>
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 f985 	bl	800a938 <__sinit>
 800a62e:	4b2e      	ldr	r3, [pc, #184]	; (800a6e8 <__swsetup_r+0xd0>)
 800a630:	429c      	cmp	r4, r3
 800a632:	d10f      	bne.n	800a654 <__swsetup_r+0x3c>
 800a634:	686c      	ldr	r4, [r5, #4]
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63c:	0719      	lsls	r1, r3, #28
 800a63e:	d42c      	bmi.n	800a69a <__swsetup_r+0x82>
 800a640:	06dd      	lsls	r5, r3, #27
 800a642:	d411      	bmi.n	800a668 <__swsetup_r+0x50>
 800a644:	2309      	movs	r3, #9
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295
 800a652:	e03e      	b.n	800a6d2 <__swsetup_r+0xba>
 800a654:	4b25      	ldr	r3, [pc, #148]	; (800a6ec <__swsetup_r+0xd4>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d101      	bne.n	800a65e <__swsetup_r+0x46>
 800a65a:	68ac      	ldr	r4, [r5, #8]
 800a65c:	e7eb      	b.n	800a636 <__swsetup_r+0x1e>
 800a65e:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <__swsetup_r+0xd8>)
 800a660:	429c      	cmp	r4, r3
 800a662:	bf08      	it	eq
 800a664:	68ec      	ldreq	r4, [r5, #12]
 800a666:	e7e6      	b.n	800a636 <__swsetup_r+0x1e>
 800a668:	0758      	lsls	r0, r3, #29
 800a66a:	d512      	bpl.n	800a692 <__swsetup_r+0x7a>
 800a66c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a66e:	b141      	cbz	r1, 800a682 <__swsetup_r+0x6a>
 800a670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a674:	4299      	cmp	r1, r3
 800a676:	d002      	beq.n	800a67e <__swsetup_r+0x66>
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff fa77 	bl	8009b6c <_free_r>
 800a67e:	2300      	movs	r3, #0
 800a680:	6363      	str	r3, [r4, #52]	; 0x34
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	2300      	movs	r3, #0
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f043 0308 	orr.w	r3, r3, #8
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	b94b      	cbnz	r3, 800a6b2 <__swsetup_r+0x9a>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a8:	d003      	beq.n	800a6b2 <__swsetup_r+0x9a>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 fa07 	bl	800aac0 <__smakebuf_r>
 800a6b2:	89a0      	ldrh	r0, [r4, #12]
 800a6b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6b8:	f010 0301 	ands.w	r3, r0, #1
 800a6bc:	d00a      	beq.n	800a6d4 <__swsetup_r+0xbc>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60a3      	str	r3, [r4, #8]
 800a6c2:	6963      	ldr	r3, [r4, #20]
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	61a3      	str	r3, [r4, #24]
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	b943      	cbnz	r3, 800a6de <__swsetup_r+0xc6>
 800a6cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6d0:	d1ba      	bne.n	800a648 <__swsetup_r+0x30>
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	0781      	lsls	r1, r0, #30
 800a6d6:	bf58      	it	pl
 800a6d8:	6963      	ldrpl	r3, [r4, #20]
 800a6da:	60a3      	str	r3, [r4, #8]
 800a6dc:	e7f4      	b.n	800a6c8 <__swsetup_r+0xb0>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e7f7      	b.n	800a6d2 <__swsetup_r+0xba>
 800a6e2:	bf00      	nop
 800a6e4:	200000ac 	.word	0x200000ac
 800a6e8:	0800ed4c 	.word	0x0800ed4c
 800a6ec:	0800ed6c 	.word	0x0800ed6c
 800a6f0:	0800ed2c 	.word	0x0800ed2c

0800a6f4 <abort>:
 800a6f4:	b508      	push	{r3, lr}
 800a6f6:	2006      	movs	r0, #6
 800a6f8:	f000 fa96 	bl	800ac28 <raise>
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	f7fb f9af 	bl	8005a60 <_exit>
	...

0800a704 <__sflush_r>:
 800a704:	898a      	ldrh	r2, [r1, #12]
 800a706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70a:	4605      	mov	r5, r0
 800a70c:	0710      	lsls	r0, r2, #28
 800a70e:	460c      	mov	r4, r1
 800a710:	d458      	bmi.n	800a7c4 <__sflush_r+0xc0>
 800a712:	684b      	ldr	r3, [r1, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc05      	bgt.n	800a724 <__sflush_r+0x20>
 800a718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dc02      	bgt.n	800a724 <__sflush_r+0x20>
 800a71e:	2000      	movs	r0, #0
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a726:	2e00      	cmp	r6, #0
 800a728:	d0f9      	beq.n	800a71e <__sflush_r+0x1a>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a730:	682f      	ldr	r7, [r5, #0]
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	d032      	beq.n	800a79c <__sflush_r+0x98>
 800a736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	075a      	lsls	r2, r3, #29
 800a73c:	d505      	bpl.n	800a74a <__sflush_r+0x46>
 800a73e:	6863      	ldr	r3, [r4, #4]
 800a740:	1ac0      	subs	r0, r0, r3
 800a742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a744:	b10b      	cbz	r3, 800a74a <__sflush_r+0x46>
 800a746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a748:	1ac0      	subs	r0, r0, r3
 800a74a:	2300      	movs	r3, #0
 800a74c:	4602      	mov	r2, r0
 800a74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a750:	6a21      	ldr	r1, [r4, #32]
 800a752:	4628      	mov	r0, r5
 800a754:	47b0      	blx	r6
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	d106      	bne.n	800a76a <__sflush_r+0x66>
 800a75c:	6829      	ldr	r1, [r5, #0]
 800a75e:	291d      	cmp	r1, #29
 800a760:	d82c      	bhi.n	800a7bc <__sflush_r+0xb8>
 800a762:	4a2a      	ldr	r2, [pc, #168]	; (800a80c <__sflush_r+0x108>)
 800a764:	40ca      	lsrs	r2, r1
 800a766:	07d6      	lsls	r6, r2, #31
 800a768:	d528      	bpl.n	800a7bc <__sflush_r+0xb8>
 800a76a:	2200      	movs	r2, #0
 800a76c:	6062      	str	r2, [r4, #4]
 800a76e:	04d9      	lsls	r1, r3, #19
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	6022      	str	r2, [r4, #0]
 800a774:	d504      	bpl.n	800a780 <__sflush_r+0x7c>
 800a776:	1c42      	adds	r2, r0, #1
 800a778:	d101      	bne.n	800a77e <__sflush_r+0x7a>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	b903      	cbnz	r3, 800a780 <__sflush_r+0x7c>
 800a77e:	6560      	str	r0, [r4, #84]	; 0x54
 800a780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a782:	602f      	str	r7, [r5, #0]
 800a784:	2900      	cmp	r1, #0
 800a786:	d0ca      	beq.n	800a71e <__sflush_r+0x1a>
 800a788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a78c:	4299      	cmp	r1, r3
 800a78e:	d002      	beq.n	800a796 <__sflush_r+0x92>
 800a790:	4628      	mov	r0, r5
 800a792:	f7ff f9eb 	bl	8009b6c <_free_r>
 800a796:	2000      	movs	r0, #0
 800a798:	6360      	str	r0, [r4, #52]	; 0x34
 800a79a:	e7c1      	b.n	800a720 <__sflush_r+0x1c>
 800a79c:	6a21      	ldr	r1, [r4, #32]
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b0      	blx	r6
 800a7a4:	1c41      	adds	r1, r0, #1
 800a7a6:	d1c7      	bne.n	800a738 <__sflush_r+0x34>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0c4      	beq.n	800a738 <__sflush_r+0x34>
 800a7ae:	2b1d      	cmp	r3, #29
 800a7b0:	d001      	beq.n	800a7b6 <__sflush_r+0xb2>
 800a7b2:	2b16      	cmp	r3, #22
 800a7b4:	d101      	bne.n	800a7ba <__sflush_r+0xb6>
 800a7b6:	602f      	str	r7, [r5, #0]
 800a7b8:	e7b1      	b.n	800a71e <__sflush_r+0x1a>
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	e7ad      	b.n	800a720 <__sflush_r+0x1c>
 800a7c4:	690f      	ldr	r7, [r1, #16]
 800a7c6:	2f00      	cmp	r7, #0
 800a7c8:	d0a9      	beq.n	800a71e <__sflush_r+0x1a>
 800a7ca:	0793      	lsls	r3, r2, #30
 800a7cc:	680e      	ldr	r6, [r1, #0]
 800a7ce:	bf08      	it	eq
 800a7d0:	694b      	ldreq	r3, [r1, #20]
 800a7d2:	600f      	str	r7, [r1, #0]
 800a7d4:	bf18      	it	ne
 800a7d6:	2300      	movne	r3, #0
 800a7d8:	eba6 0807 	sub.w	r8, r6, r7
 800a7dc:	608b      	str	r3, [r1, #8]
 800a7de:	f1b8 0f00 	cmp.w	r8, #0
 800a7e2:	dd9c      	ble.n	800a71e <__sflush_r+0x1a>
 800a7e4:	6a21      	ldr	r1, [r4, #32]
 800a7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7e8:	4643      	mov	r3, r8
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b0      	blx	r6
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	dc06      	bgt.n	800a802 <__sflush_r+0xfe>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7fa:	81a3      	strh	r3, [r4, #12]
 800a7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a800:	e78e      	b.n	800a720 <__sflush_r+0x1c>
 800a802:	4407      	add	r7, r0
 800a804:	eba8 0800 	sub.w	r8, r8, r0
 800a808:	e7e9      	b.n	800a7de <__sflush_r+0xda>
 800a80a:	bf00      	nop
 800a80c:	20400001 	.word	0x20400001

0800a810 <_fflush_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	690b      	ldr	r3, [r1, #16]
 800a814:	4605      	mov	r5, r0
 800a816:	460c      	mov	r4, r1
 800a818:	b913      	cbnz	r3, 800a820 <_fflush_r+0x10>
 800a81a:	2500      	movs	r5, #0
 800a81c:	4628      	mov	r0, r5
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	b118      	cbz	r0, 800a82a <_fflush_r+0x1a>
 800a822:	6983      	ldr	r3, [r0, #24]
 800a824:	b90b      	cbnz	r3, 800a82a <_fflush_r+0x1a>
 800a826:	f000 f887 	bl	800a938 <__sinit>
 800a82a:	4b14      	ldr	r3, [pc, #80]	; (800a87c <_fflush_r+0x6c>)
 800a82c:	429c      	cmp	r4, r3
 800a82e:	d11b      	bne.n	800a868 <_fflush_r+0x58>
 800a830:	686c      	ldr	r4, [r5, #4]
 800a832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0ef      	beq.n	800a81a <_fflush_r+0xa>
 800a83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a83c:	07d0      	lsls	r0, r2, #31
 800a83e:	d404      	bmi.n	800a84a <_fflush_r+0x3a>
 800a840:	0599      	lsls	r1, r3, #22
 800a842:	d402      	bmi.n	800a84a <_fflush_r+0x3a>
 800a844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a846:	f000 f915 	bl	800aa74 <__retarget_lock_acquire_recursive>
 800a84a:	4628      	mov	r0, r5
 800a84c:	4621      	mov	r1, r4
 800a84e:	f7ff ff59 	bl	800a704 <__sflush_r>
 800a852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a854:	07da      	lsls	r2, r3, #31
 800a856:	4605      	mov	r5, r0
 800a858:	d4e0      	bmi.n	800a81c <_fflush_r+0xc>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	059b      	lsls	r3, r3, #22
 800a85e:	d4dd      	bmi.n	800a81c <_fflush_r+0xc>
 800a860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a862:	f000 f908 	bl	800aa76 <__retarget_lock_release_recursive>
 800a866:	e7d9      	b.n	800a81c <_fflush_r+0xc>
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <_fflush_r+0x70>)
 800a86a:	429c      	cmp	r4, r3
 800a86c:	d101      	bne.n	800a872 <_fflush_r+0x62>
 800a86e:	68ac      	ldr	r4, [r5, #8]
 800a870:	e7df      	b.n	800a832 <_fflush_r+0x22>
 800a872:	4b04      	ldr	r3, [pc, #16]	; (800a884 <_fflush_r+0x74>)
 800a874:	429c      	cmp	r4, r3
 800a876:	bf08      	it	eq
 800a878:	68ec      	ldreq	r4, [r5, #12]
 800a87a:	e7da      	b.n	800a832 <_fflush_r+0x22>
 800a87c:	0800ed4c 	.word	0x0800ed4c
 800a880:	0800ed6c 	.word	0x0800ed6c
 800a884:	0800ed2c 	.word	0x0800ed2c

0800a888 <std>:
 800a888:	2300      	movs	r3, #0
 800a88a:	b510      	push	{r4, lr}
 800a88c:	4604      	mov	r4, r0
 800a88e:	e9c0 3300 	strd	r3, r3, [r0]
 800a892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a896:	6083      	str	r3, [r0, #8]
 800a898:	8181      	strh	r1, [r0, #12]
 800a89a:	6643      	str	r3, [r0, #100]	; 0x64
 800a89c:	81c2      	strh	r2, [r0, #14]
 800a89e:	6183      	str	r3, [r0, #24]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	2208      	movs	r2, #8
 800a8a4:	305c      	adds	r0, #92	; 0x5c
 800a8a6:	f7ff f843 	bl	8009930 <memset>
 800a8aa:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <std+0x38>)
 800a8ac:	6263      	str	r3, [r4, #36]	; 0x24
 800a8ae:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <std+0x3c>)
 800a8b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8b2:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <std+0x40>)
 800a8b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <std+0x44>)
 800a8b8:	6224      	str	r4, [r4, #32]
 800a8ba:	6323      	str	r3, [r4, #48]	; 0x30
 800a8bc:	bd10      	pop	{r4, pc}
 800a8be:	bf00      	nop
 800a8c0:	0800ac61 	.word	0x0800ac61
 800a8c4:	0800ac83 	.word	0x0800ac83
 800a8c8:	0800acbb 	.word	0x0800acbb
 800a8cc:	0800acdf 	.word	0x0800acdf

0800a8d0 <_cleanup_r>:
 800a8d0:	4901      	ldr	r1, [pc, #4]	; (800a8d8 <_cleanup_r+0x8>)
 800a8d2:	f000 b8af 	b.w	800aa34 <_fwalk_reent>
 800a8d6:	bf00      	nop
 800a8d8:	0800a811 	.word	0x0800a811

0800a8dc <__sfmoreglue>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	1e4a      	subs	r2, r1, #1
 800a8e0:	2568      	movs	r5, #104	; 0x68
 800a8e2:	4355      	muls	r5, r2
 800a8e4:	460e      	mov	r6, r1
 800a8e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8ea:	f7ff f98f 	bl	8009c0c <_malloc_r>
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	b140      	cbz	r0, 800a904 <__sfmoreglue+0x28>
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	e9c0 1600 	strd	r1, r6, [r0]
 800a8f8:	300c      	adds	r0, #12
 800a8fa:	60a0      	str	r0, [r4, #8]
 800a8fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a900:	f7ff f816 	bl	8009930 <memset>
 800a904:	4620      	mov	r0, r4
 800a906:	bd70      	pop	{r4, r5, r6, pc}

0800a908 <__sfp_lock_acquire>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__sfp_lock_acquire+0x8>)
 800a90a:	f000 b8b3 	b.w	800aa74 <__retarget_lock_acquire_recursive>
 800a90e:	bf00      	nop
 800a910:	20002a8c 	.word	0x20002a8c

0800a914 <__sfp_lock_release>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__sfp_lock_release+0x8>)
 800a916:	f000 b8ae 	b.w	800aa76 <__retarget_lock_release_recursive>
 800a91a:	bf00      	nop
 800a91c:	20002a8c 	.word	0x20002a8c

0800a920 <__sinit_lock_acquire>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__sinit_lock_acquire+0x8>)
 800a922:	f000 b8a7 	b.w	800aa74 <__retarget_lock_acquire_recursive>
 800a926:	bf00      	nop
 800a928:	20002a87 	.word	0x20002a87

0800a92c <__sinit_lock_release>:
 800a92c:	4801      	ldr	r0, [pc, #4]	; (800a934 <__sinit_lock_release+0x8>)
 800a92e:	f000 b8a2 	b.w	800aa76 <__retarget_lock_release_recursive>
 800a932:	bf00      	nop
 800a934:	20002a87 	.word	0x20002a87

0800a938 <__sinit>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	4604      	mov	r4, r0
 800a93c:	f7ff fff0 	bl	800a920 <__sinit_lock_acquire>
 800a940:	69a3      	ldr	r3, [r4, #24]
 800a942:	b11b      	cbz	r3, 800a94c <__sinit+0x14>
 800a944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a948:	f7ff bff0 	b.w	800a92c <__sinit_lock_release>
 800a94c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a950:	6523      	str	r3, [r4, #80]	; 0x50
 800a952:	4b13      	ldr	r3, [pc, #76]	; (800a9a0 <__sinit+0x68>)
 800a954:	4a13      	ldr	r2, [pc, #76]	; (800a9a4 <__sinit+0x6c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	62a2      	str	r2, [r4, #40]	; 0x28
 800a95a:	42a3      	cmp	r3, r4
 800a95c:	bf04      	itt	eq
 800a95e:	2301      	moveq	r3, #1
 800a960:	61a3      	streq	r3, [r4, #24]
 800a962:	4620      	mov	r0, r4
 800a964:	f000 f820 	bl	800a9a8 <__sfp>
 800a968:	6060      	str	r0, [r4, #4]
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 f81c 	bl	800a9a8 <__sfp>
 800a970:	60a0      	str	r0, [r4, #8]
 800a972:	4620      	mov	r0, r4
 800a974:	f000 f818 	bl	800a9a8 <__sfp>
 800a978:	2200      	movs	r2, #0
 800a97a:	60e0      	str	r0, [r4, #12]
 800a97c:	2104      	movs	r1, #4
 800a97e:	6860      	ldr	r0, [r4, #4]
 800a980:	f7ff ff82 	bl	800a888 <std>
 800a984:	68a0      	ldr	r0, [r4, #8]
 800a986:	2201      	movs	r2, #1
 800a988:	2109      	movs	r1, #9
 800a98a:	f7ff ff7d 	bl	800a888 <std>
 800a98e:	68e0      	ldr	r0, [r4, #12]
 800a990:	2202      	movs	r2, #2
 800a992:	2112      	movs	r1, #18
 800a994:	f7ff ff78 	bl	800a888 <std>
 800a998:	2301      	movs	r3, #1
 800a99a:	61a3      	str	r3, [r4, #24]
 800a99c:	e7d2      	b.n	800a944 <__sinit+0xc>
 800a99e:	bf00      	nop
 800a9a0:	0800ec40 	.word	0x0800ec40
 800a9a4:	0800a8d1 	.word	0x0800a8d1

0800a9a8 <__sfp>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	4607      	mov	r7, r0
 800a9ac:	f7ff ffac 	bl	800a908 <__sfp_lock_acquire>
 800a9b0:	4b1e      	ldr	r3, [pc, #120]	; (800aa2c <__sfp+0x84>)
 800a9b2:	681e      	ldr	r6, [r3, #0]
 800a9b4:	69b3      	ldr	r3, [r6, #24]
 800a9b6:	b913      	cbnz	r3, 800a9be <__sfp+0x16>
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7ff ffbd 	bl	800a938 <__sinit>
 800a9be:	3648      	adds	r6, #72	; 0x48
 800a9c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	d503      	bpl.n	800a9d0 <__sfp+0x28>
 800a9c8:	6833      	ldr	r3, [r6, #0]
 800a9ca:	b30b      	cbz	r3, 800aa10 <__sfp+0x68>
 800a9cc:	6836      	ldr	r6, [r6, #0]
 800a9ce:	e7f7      	b.n	800a9c0 <__sfp+0x18>
 800a9d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9d4:	b9d5      	cbnz	r5, 800aa0c <__sfp+0x64>
 800a9d6:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <__sfp+0x88>)
 800a9d8:	60e3      	str	r3, [r4, #12]
 800a9da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9de:	6665      	str	r5, [r4, #100]	; 0x64
 800a9e0:	f000 f847 	bl	800aa72 <__retarget_lock_init_recursive>
 800a9e4:	f7ff ff96 	bl	800a914 <__sfp_lock_release>
 800a9e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9f0:	6025      	str	r5, [r4, #0]
 800a9f2:	61a5      	str	r5, [r4, #24]
 800a9f4:	2208      	movs	r2, #8
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9fc:	f7fe ff98 	bl	8009930 <memset>
 800aa00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa08:	4620      	mov	r0, r4
 800aa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa0c:	3468      	adds	r4, #104	; 0x68
 800aa0e:	e7d9      	b.n	800a9c4 <__sfp+0x1c>
 800aa10:	2104      	movs	r1, #4
 800aa12:	4638      	mov	r0, r7
 800aa14:	f7ff ff62 	bl	800a8dc <__sfmoreglue>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	6030      	str	r0, [r6, #0]
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d1d5      	bne.n	800a9cc <__sfp+0x24>
 800aa20:	f7ff ff78 	bl	800a914 <__sfp_lock_release>
 800aa24:	230c      	movs	r3, #12
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	e7ee      	b.n	800aa08 <__sfp+0x60>
 800aa2a:	bf00      	nop
 800aa2c:	0800ec40 	.word	0x0800ec40
 800aa30:	ffff0001 	.word	0xffff0001

0800aa34 <_fwalk_reent>:
 800aa34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa38:	4606      	mov	r6, r0
 800aa3a:	4688      	mov	r8, r1
 800aa3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa40:	2700      	movs	r7, #0
 800aa42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa46:	f1b9 0901 	subs.w	r9, r9, #1
 800aa4a:	d505      	bpl.n	800aa58 <_fwalk_reent+0x24>
 800aa4c:	6824      	ldr	r4, [r4, #0]
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	d1f7      	bne.n	800aa42 <_fwalk_reent+0xe>
 800aa52:	4638      	mov	r0, r7
 800aa54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa58:	89ab      	ldrh	r3, [r5, #12]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d907      	bls.n	800aa6e <_fwalk_reent+0x3a>
 800aa5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa62:	3301      	adds	r3, #1
 800aa64:	d003      	beq.n	800aa6e <_fwalk_reent+0x3a>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4630      	mov	r0, r6
 800aa6a:	47c0      	blx	r8
 800aa6c:	4307      	orrs	r7, r0
 800aa6e:	3568      	adds	r5, #104	; 0x68
 800aa70:	e7e9      	b.n	800aa46 <_fwalk_reent+0x12>

0800aa72 <__retarget_lock_init_recursive>:
 800aa72:	4770      	bx	lr

0800aa74 <__retarget_lock_acquire_recursive>:
 800aa74:	4770      	bx	lr

0800aa76 <__retarget_lock_release_recursive>:
 800aa76:	4770      	bx	lr

0800aa78 <__swhatbuf_r>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	460e      	mov	r6, r1
 800aa7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa80:	2900      	cmp	r1, #0
 800aa82:	b096      	sub	sp, #88	; 0x58
 800aa84:	4614      	mov	r4, r2
 800aa86:	461d      	mov	r5, r3
 800aa88:	da07      	bge.n	800aa9a <__swhatbuf_r+0x22>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	89b3      	ldrh	r3, [r6, #12]
 800aa90:	061a      	lsls	r2, r3, #24
 800aa92:	d410      	bmi.n	800aab6 <__swhatbuf_r+0x3e>
 800aa94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa98:	e00e      	b.n	800aab8 <__swhatbuf_r+0x40>
 800aa9a:	466a      	mov	r2, sp
 800aa9c:	f000 f946 	bl	800ad2c <_fstat_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	dbf2      	blt.n	800aa8a <__swhatbuf_r+0x12>
 800aaa4:	9a01      	ldr	r2, [sp, #4]
 800aaa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aaaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aaae:	425a      	negs	r2, r3
 800aab0:	415a      	adcs	r2, r3
 800aab2:	602a      	str	r2, [r5, #0]
 800aab4:	e7ee      	b.n	800aa94 <__swhatbuf_r+0x1c>
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	2000      	movs	r0, #0
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	b016      	add	sp, #88	; 0x58
 800aabe:	bd70      	pop	{r4, r5, r6, pc}

0800aac0 <__smakebuf_r>:
 800aac0:	898b      	ldrh	r3, [r1, #12]
 800aac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aac4:	079d      	lsls	r5, r3, #30
 800aac6:	4606      	mov	r6, r0
 800aac8:	460c      	mov	r4, r1
 800aaca:	d507      	bpl.n	800aadc <__smakebuf_r+0x1c>
 800aacc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	2301      	movs	r3, #1
 800aad6:	6163      	str	r3, [r4, #20]
 800aad8:	b002      	add	sp, #8
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	ab01      	add	r3, sp, #4
 800aade:	466a      	mov	r2, sp
 800aae0:	f7ff ffca 	bl	800aa78 <__swhatbuf_r>
 800aae4:	9900      	ldr	r1, [sp, #0]
 800aae6:	4605      	mov	r5, r0
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff f88f 	bl	8009c0c <_malloc_r>
 800aaee:	b948      	cbnz	r0, 800ab04 <__smakebuf_r+0x44>
 800aaf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf4:	059a      	lsls	r2, r3, #22
 800aaf6:	d4ef      	bmi.n	800aad8 <__smakebuf_r+0x18>
 800aaf8:	f023 0303 	bic.w	r3, r3, #3
 800aafc:	f043 0302 	orr.w	r3, r3, #2
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	e7e3      	b.n	800aacc <__smakebuf_r+0xc>
 800ab04:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <__smakebuf_r+0x7c>)
 800ab06:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	6020      	str	r0, [r4, #0]
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	9b00      	ldr	r3, [sp, #0]
 800ab14:	6163      	str	r3, [r4, #20]
 800ab16:	9b01      	ldr	r3, [sp, #4]
 800ab18:	6120      	str	r0, [r4, #16]
 800ab1a:	b15b      	cbz	r3, 800ab34 <__smakebuf_r+0x74>
 800ab1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab20:	4630      	mov	r0, r6
 800ab22:	f000 f915 	bl	800ad50 <_isatty_r>
 800ab26:	b128      	cbz	r0, 800ab34 <__smakebuf_r+0x74>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	f023 0303 	bic.w	r3, r3, #3
 800ab2e:	f043 0301 	orr.w	r3, r3, #1
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	89a0      	ldrh	r0, [r4, #12]
 800ab36:	4305      	orrs	r5, r0
 800ab38:	81a5      	strh	r5, [r4, #12]
 800ab3a:	e7cd      	b.n	800aad8 <__smakebuf_r+0x18>
 800ab3c:	0800a8d1 	.word	0x0800a8d1

0800ab40 <memmove>:
 800ab40:	4288      	cmp	r0, r1
 800ab42:	b510      	push	{r4, lr}
 800ab44:	eb01 0402 	add.w	r4, r1, r2
 800ab48:	d902      	bls.n	800ab50 <memmove+0x10>
 800ab4a:	4284      	cmp	r4, r0
 800ab4c:	4623      	mov	r3, r4
 800ab4e:	d807      	bhi.n	800ab60 <memmove+0x20>
 800ab50:	1e43      	subs	r3, r0, #1
 800ab52:	42a1      	cmp	r1, r4
 800ab54:	d008      	beq.n	800ab68 <memmove+0x28>
 800ab56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab5e:	e7f8      	b.n	800ab52 <memmove+0x12>
 800ab60:	4402      	add	r2, r0
 800ab62:	4601      	mov	r1, r0
 800ab64:	428a      	cmp	r2, r1
 800ab66:	d100      	bne.n	800ab6a <memmove+0x2a>
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab72:	e7f7      	b.n	800ab64 <memmove+0x24>

0800ab74 <__malloc_lock>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__malloc_lock+0x8>)
 800ab76:	f7ff bf7d 	b.w	800aa74 <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20002a88 	.word	0x20002a88

0800ab80 <__malloc_unlock>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__malloc_unlock+0x8>)
 800ab82:	f7ff bf78 	b.w	800aa76 <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	20002a88 	.word	0x20002a88

0800ab8c <_realloc_r>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	4607      	mov	r7, r0
 800ab90:	4614      	mov	r4, r2
 800ab92:	460e      	mov	r6, r1
 800ab94:	b921      	cbnz	r1, 800aba0 <_realloc_r+0x14>
 800ab96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	f7ff b836 	b.w	8009c0c <_malloc_r>
 800aba0:	b922      	cbnz	r2, 800abac <_realloc_r+0x20>
 800aba2:	f7fe ffe3 	bl	8009b6c <_free_r>
 800aba6:	4625      	mov	r5, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abac:	f000 f8f2 	bl	800ad94 <_malloc_usable_size_r>
 800abb0:	42a0      	cmp	r0, r4
 800abb2:	d20f      	bcs.n	800abd4 <_realloc_r+0x48>
 800abb4:	4621      	mov	r1, r4
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7ff f828 	bl	8009c0c <_malloc_r>
 800abbc:	4605      	mov	r5, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0f2      	beq.n	800aba8 <_realloc_r+0x1c>
 800abc2:	4631      	mov	r1, r6
 800abc4:	4622      	mov	r2, r4
 800abc6:	f7fe ffc3 	bl	8009b50 <memcpy>
 800abca:	4631      	mov	r1, r6
 800abcc:	4638      	mov	r0, r7
 800abce:	f7fe ffcd 	bl	8009b6c <_free_r>
 800abd2:	e7e9      	b.n	800aba8 <_realloc_r+0x1c>
 800abd4:	4635      	mov	r5, r6
 800abd6:	e7e7      	b.n	800aba8 <_realloc_r+0x1c>

0800abd8 <_raise_r>:
 800abd8:	291f      	cmp	r1, #31
 800abda:	b538      	push	{r3, r4, r5, lr}
 800abdc:	4604      	mov	r4, r0
 800abde:	460d      	mov	r5, r1
 800abe0:	d904      	bls.n	800abec <_raise_r+0x14>
 800abe2:	2316      	movs	r3, #22
 800abe4:	6003      	str	r3, [r0, #0]
 800abe6:	f04f 30ff 	mov.w	r0, #4294967295
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abee:	b112      	cbz	r2, 800abf6 <_raise_r+0x1e>
 800abf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abf4:	b94b      	cbnz	r3, 800ac0a <_raise_r+0x32>
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 f830 	bl	800ac5c <_getpid_r>
 800abfc:	462a      	mov	r2, r5
 800abfe:	4601      	mov	r1, r0
 800ac00:	4620      	mov	r0, r4
 800ac02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac06:	f000 b817 	b.w	800ac38 <_kill_r>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d00a      	beq.n	800ac24 <_raise_r+0x4c>
 800ac0e:	1c59      	adds	r1, r3, #1
 800ac10:	d103      	bne.n	800ac1a <_raise_r+0x42>
 800ac12:	2316      	movs	r3, #22
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	2001      	movs	r0, #1
 800ac18:	e7e7      	b.n	800abea <_raise_r+0x12>
 800ac1a:	2400      	movs	r4, #0
 800ac1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac20:	4628      	mov	r0, r5
 800ac22:	4798      	blx	r3
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7e0      	b.n	800abea <_raise_r+0x12>

0800ac28 <raise>:
 800ac28:	4b02      	ldr	r3, [pc, #8]	; (800ac34 <raise+0xc>)
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	f7ff bfd3 	b.w	800abd8 <_raise_r>
 800ac32:	bf00      	nop
 800ac34:	200000ac 	.word	0x200000ac

0800ac38 <_kill_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d07      	ldr	r5, [pc, #28]	; (800ac58 <_kill_r+0x20>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	4611      	mov	r1, r2
 800ac44:	602b      	str	r3, [r5, #0]
 800ac46:	f7fa fefb 	bl	8005a40 <_kill>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	d102      	bne.n	800ac54 <_kill_r+0x1c>
 800ac4e:	682b      	ldr	r3, [r5, #0]
 800ac50:	b103      	cbz	r3, 800ac54 <_kill_r+0x1c>
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	bf00      	nop
 800ac58:	20002a90 	.word	0x20002a90

0800ac5c <_getpid_r>:
 800ac5c:	f7fa bee8 	b.w	8005a30 <_getpid>

0800ac60 <__sread>:
 800ac60:	b510      	push	{r4, lr}
 800ac62:	460c      	mov	r4, r1
 800ac64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac68:	f000 f89c 	bl	800ada4 <_read_r>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	bfab      	itete	ge
 800ac70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac72:	89a3      	ldrhlt	r3, [r4, #12]
 800ac74:	181b      	addge	r3, r3, r0
 800ac76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac7a:	bfac      	ite	ge
 800ac7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac7e:	81a3      	strhlt	r3, [r4, #12]
 800ac80:	bd10      	pop	{r4, pc}

0800ac82 <__swrite>:
 800ac82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	461f      	mov	r7, r3
 800ac88:	898b      	ldrh	r3, [r1, #12]
 800ac8a:	05db      	lsls	r3, r3, #23
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	4616      	mov	r6, r2
 800ac92:	d505      	bpl.n	800aca0 <__swrite+0x1e>
 800ac94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac98:	2302      	movs	r3, #2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f000 f868 	bl	800ad70 <_lseek_r>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	4628      	mov	r0, r5
 800acb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	f000 b817 	b.w	800ace8 <_write_r>

0800acba <__sseek>:
 800acba:	b510      	push	{r4, lr}
 800acbc:	460c      	mov	r4, r1
 800acbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc2:	f000 f855 	bl	800ad70 <_lseek_r>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	bf15      	itete	ne
 800accc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acd6:	81a3      	strheq	r3, [r4, #12]
 800acd8:	bf18      	it	ne
 800acda:	81a3      	strhne	r3, [r4, #12]
 800acdc:	bd10      	pop	{r4, pc}

0800acde <__sclose>:
 800acde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace2:	f000 b813 	b.w	800ad0c <_close_r>
	...

0800ace8 <_write_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d07      	ldr	r5, [pc, #28]	; (800ad08 <_write_r+0x20>)
 800acec:	4604      	mov	r4, r0
 800acee:	4608      	mov	r0, r1
 800acf0:	4611      	mov	r1, r2
 800acf2:	2200      	movs	r2, #0
 800acf4:	602a      	str	r2, [r5, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f7fa fed9 	bl	8005aae <_write>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_write_r+0x1e>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_write_r+0x1e>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20002a90 	.word	0x20002a90

0800ad0c <_close_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d06      	ldr	r5, [pc, #24]	; (800ad28 <_close_r+0x1c>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7fa fee5 	bl	8005ae6 <_close>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_close_r+0x1a>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_close_r+0x1a>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	20002a90 	.word	0x20002a90

0800ad2c <_fstat_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d07      	ldr	r5, [pc, #28]	; (800ad4c <_fstat_r+0x20>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	4611      	mov	r1, r2
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	f7fa fee0 	bl	8005afe <_fstat>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	d102      	bne.n	800ad48 <_fstat_r+0x1c>
 800ad42:	682b      	ldr	r3, [r5, #0]
 800ad44:	b103      	cbz	r3, 800ad48 <_fstat_r+0x1c>
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20002a90 	.word	0x20002a90

0800ad50 <_isatty_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d06      	ldr	r5, [pc, #24]	; (800ad6c <_isatty_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	f7fa fedf 	bl	8005b1e <_isatty>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_isatty_r+0x1a>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_isatty_r+0x1a>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20002a90 	.word	0x20002a90

0800ad70 <_lseek_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_lseek_r+0x20>)
 800ad74:	4604      	mov	r4, r0
 800ad76:	4608      	mov	r0, r1
 800ad78:	4611      	mov	r1, r2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	602a      	str	r2, [r5, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f7fa fed8 	bl	8005b34 <_lseek>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_lseek_r+0x1e>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_lseek_r+0x1e>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20002a90 	.word	0x20002a90

0800ad94 <_malloc_usable_size_r>:
 800ad94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad98:	1f18      	subs	r0, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bfbc      	itt	lt
 800ad9e:	580b      	ldrlt	r3, [r1, r0]
 800ada0:	18c0      	addlt	r0, r0, r3
 800ada2:	4770      	bx	lr

0800ada4 <_read_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d07      	ldr	r5, [pc, #28]	; (800adc4 <_read_r+0x20>)
 800ada8:	4604      	mov	r4, r0
 800adaa:	4608      	mov	r0, r1
 800adac:	4611      	mov	r1, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	602a      	str	r2, [r5, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f7fa fe5e 	bl	8005a74 <_read>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d102      	bne.n	800adc2 <_read_r+0x1e>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	b103      	cbz	r3, 800adc2 <_read_r+0x1e>
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	20002a90 	.word	0x20002a90

0800adc8 <_init>:
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	bf00      	nop
 800adcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adce:	bc08      	pop	{r3}
 800add0:	469e      	mov	lr, r3
 800add2:	4770      	bx	lr

0800add4 <_fini>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	bf00      	nop
 800add8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adda:	bc08      	pop	{r3}
 800addc:	469e      	mov	lr, r3
 800adde:	4770      	bx	lr
