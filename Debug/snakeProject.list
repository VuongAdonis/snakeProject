
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ade0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fa8  0800af70  0800af70  0001af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef18  0800ef18  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef18  0800ef18  0001ef18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef20  0800ef20  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef20  0800ef20  0001ef20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800ef28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          0000293c  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a4c  20002a4c  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018364  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000437e  00000000  00000000  000384a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001370  00000000  00000000  0003ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269e4  00000000  00000000  0003f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021527  00000000  00000000  00065b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3331  00000000  00000000  00087043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a374  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006154  00000000  00000000  0015a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af58 	.word	0x0800af58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800af58 	.word	0x0800af58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b095      	sub	sp, #84	; 0x54
 8000588:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 800058a:	2000      	movs	r0, #0
 800058c:	f001 f996 	bl	80018bc <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8000590:	4bb0      	ldr	r3, [pc, #704]	; (8000854 <setupAdvance+0x2d0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b298      	uxth	r0, r3
 8000596:	4bb0      	ldr	r3, [pc, #704]	; (8000858 <setupAdvance+0x2d4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b299      	uxth	r1, r3
 800059c:	4baf      	ldr	r3, [pc, #700]	; (800085c <setupAdvance+0x2d8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4baf      	ldr	r3, [pc, #700]	; (8000860 <setupAdvance+0x2dc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4cae      	ldr	r4, [pc, #696]	; (8000864 <setupAdvance+0x2e0>)
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	f001 fb90 	bl	8001cd0 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2318      	movs	r3, #24
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f248 4330 	movw	r3, #33840	; 0x8430
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	4aa9      	ldr	r2, [pc, #676]	; (8000868 <setupAdvance+0x2e4>)
 80005c4:	2137      	movs	r1, #55	; 0x37
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f001 fd5c 	bl	8002084 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80005cc:	4aa7      	ldr	r2, [pc, #668]	; (800086c <setupAdvance+0x2e8>)
 80005ce:	463b      	mov	r3, r7
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	1dbb      	adds	r3, r7, #6
 80005dc:	222c      	movs	r2, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f009 fa2d 	bl	8009a40 <memset>
	char *str2 = convert2str(ID);
 80005e6:	4ba2      	ldr	r3, [pc, #648]	; (8000870 <setupAdvance+0x2ec>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f852 	bl	8002694 <convert2str>
 80005f0:	4603      	mov	r3, r0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80005f4:	463b      	mov	r3, r7
 80005f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fac9 	bl	8009b90 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80005fe:	463a      	mov	r2, r7
 8000600:	2300      	movs	r3, #0
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2318      	movs	r3, #24
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f248 4330 	movw	r3, #33840	; 0x8430
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	2000      	movs	r0, #0
 8000616:	f001 fd99 	bl	800214c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800061a:	2300      	movs	r3, #0
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2318      	movs	r3, #24
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	f248 4330 	movw	r3, #33840	; 0x8430
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062c:	4a91      	ldr	r2, [pc, #580]	; (8000874 <setupAdvance+0x2f0>)
 800062e:	2196      	movs	r1, #150	; 0x96
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fd8b 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000636:	2300      	movs	r3, #0
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2318      	movs	r3, #24
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	4a8b      	ldr	r2, [pc, #556]	; (8000878 <setupAdvance+0x2f4>)
 800064a:	21d7      	movs	r1, #215	; 0xd7
 800064c:	2014      	movs	r0, #20
 800064e:	f001 fd19 	bl	8002084 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	23f0      	movs	r3, #240	; 0xf0
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	21d2      	movs	r1, #210	; 0xd2
 800065e:	2096      	movs	r0, #150	; 0x96
 8000660:	f001 fa2f 	bl	8001ac2 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8000664:	4b85      	ldr	r3, [pc, #532]	; (800087c <setupAdvance+0x2f8>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f813 	bl	8002694 <convert2str>
 800066e:	4603      	mov	r3, r0
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8000672:	4b82      	ldr	r3, [pc, #520]	; (800087c <setupAdvance+0x2f8>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2b77      	cmp	r3, #119	; 0x77
 8000678:	d80e      	bhi.n	8000698 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 800067a:	2301      	movs	r3, #1
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2318      	movs	r3, #24
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f248 4330 	movw	r3, #33840	; 0x8430
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800068e:	21d4      	movs	r1, #212	; 0xd4
 8000690:	20a5      	movs	r0, #165	; 0xa5
 8000692:	f001 fcf7 	bl	8002084 <lcd_ShowStr>
 8000696:	e00d      	b.n	80006b4 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8000698:	2301      	movs	r3, #1
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	2318      	movs	r3, #24
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006ac:	21d4      	movs	r1, #212	; 0xd4
 80006ae:	209d      	movs	r0, #157	; 0x9d
 80006b0:	f001 fce8 	bl	8002084 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80006b4:	4b71      	ldr	r3, [pc, #452]	; (800087c <setupAdvance+0x2f8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b77      	cmp	r3, #119	; 0x77
 80006ba:	d81a      	bhi.n	80006f2 <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80006bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	23dc      	movs	r3, #220	; 0xdc
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	21dc      	movs	r1, #220	; 0xdc
 80006c8:	20cd      	movs	r0, #205	; 0xcd
 80006ca:	f001 f976 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	23d2      	movs	r3, #210	; 0xd2
 80006d6:	22d7      	movs	r2, #215	; 0xd7
 80006d8:	21dc      	movs	r1, #220	; 0xdc
 80006da:	20cd      	movs	r0, #205	; 0xcd
 80006dc:	f001 f96d 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	23d2      	movs	r3, #210	; 0xd2
 80006e8:	22d7      	movs	r2, #215	; 0xd7
 80006ea:	21dc      	movs	r1, #220	; 0xdc
 80006ec:	20e1      	movs	r0, #225	; 0xe1
 80006ee:	f001 f964 	bl	80019ba <lcd_DrawLine>
	}
	if(TIMING > 30)
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <setupAdvance+0x2f8>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b1e      	cmp	r3, #30
 80006f8:	d91a      	bls.n	8000730 <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	23e6      	movs	r3, #230	; 0xe6
 8000702:	22e1      	movs	r2, #225	; 0xe1
 8000704:	21e6      	movs	r1, #230	; 0xe6
 8000706:	20cd      	movs	r0, #205	; 0xcd
 8000708:	f001 f957 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 800070c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	23f0      	movs	r3, #240	; 0xf0
 8000714:	22d7      	movs	r2, #215	; 0xd7
 8000716:	21e6      	movs	r1, #230	; 0xe6
 8000718:	20cd      	movs	r0, #205	; 0xcd
 800071a:	f001 f94e 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	23f0      	movs	r3, #240	; 0xf0
 8000726:	22d7      	movs	r2, #215	; 0xd7
 8000728:	21e6      	movs	r1, #230	; 0xe6
 800072a:	20e1      	movs	r0, #225	; 0xe1
 800072c:	f001 f945 	bl	80019ba <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 8000730:	2300      	movs	r3, #0
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2318      	movs	r3, #24
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	f248 4330 	movw	r3, #33840	; 0x8430
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <setupAdvance+0x2fc>)
 8000744:	f240 1109 	movw	r1, #265	; 0x109
 8000748:	2014      	movs	r0, #20
 800074a:	f001 fc9b 	bl	8002084 <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800074e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000758:	22c8      	movs	r2, #200	; 0xc8
 800075a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800075e:	2096      	movs	r0, #150	; 0x96
 8000760:	f001 f9af 	bl	8001ac2 <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <setupAdvance+0x300>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f001 ff93 	bl	8002694 <convert2str>
 800076e:	4603      	mov	r3, r0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 8000772:	4b44      	ldr	r3, [pc, #272]	; (8000884 <setupAdvance+0x300>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b09      	cmp	r3, #9
 8000778:	d80f      	bhi.n	800079a <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 800077a:	2301      	movs	r3, #1
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2318      	movs	r3, #24
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f248 4330 	movw	r3, #33840	; 0x8430
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800078e:	f240 1109 	movw	r1, #265	; 0x109
 8000792:	20aa      	movs	r0, #170	; 0xaa
 8000794:	f001 fc76 	bl	8002084 <lcd_ShowStr>
 8000798:	e00e      	b.n	80007b8 <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 800079a:	2301      	movs	r3, #1
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	2318      	movs	r3, #24
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ae:	f240 1109 	movw	r1, #265	; 0x109
 80007b2:	20a5      	movs	r0, #165	; 0xa5
 80007b4:	f001 fc66 	bl	8002084 <lcd_ShowStr>
	}

	if(WALL < 30)
 80007b8:	4b32      	ldr	r3, [pc, #200]	; (8000884 <setupAdvance+0x300>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b1d      	cmp	r3, #29
 80007be:	d820      	bhi.n	8000802 <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80007c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007ca:	22e1      	movs	r2, #225	; 0xe1
 80007cc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007d0:	20cd      	movs	r0, #205	; 0xcd
 80007d2:	f001 f8f2 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007e0:	22d7      	movs	r2, #215	; 0xd7
 80007e2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007e6:	20cd      	movs	r0, #205	; 0xcd
 80007e8:	f001 f8e7 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 80007ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007f6:	22d7      	movs	r2, #215	; 0xd7
 80007f8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007fc:	20e1      	movs	r0, #225	; 0xe1
 80007fe:	f001 f8dc 	bl	80019ba <lcd_DrawLine>
	}
	if(WALL > 0)
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <setupAdvance+0x300>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d020      	beq.n	800084c <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	f44f 718c 	mov.w	r1, #280	; 0x118
 800081a:	20cd      	movs	r0, #205	; 0xcd
 800081c:	f001 f8cd 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	f44f 7391 	mov.w	r3, #290	; 0x122
 800082a:	22d7      	movs	r2, #215	; 0xd7
 800082c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000830:	20cd      	movs	r0, #205	; 0xcd
 8000832:	f001 f8c2 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000840:	22d7      	movs	r2, #215	; 0xd7
 8000842:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000846:	20e1      	movs	r0, #225	; 0xe1
 8000848:	f001 f8b7 	bl	80019ba <lcd_DrawLine>
	}
}
 800084c:	bf00      	nop
 800084e:	3744      	adds	r7, #68	; 0x44
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000074 	.word	0x20000074
 8000858:	20000078 	.word	0x20000078
 800085c:	2000007c 	.word	0x2000007c
 8000860:	20000080 	.word	0x20000080
 8000864:	0800e188 	.word	0x0800e188
 8000868:	0800af70 	.word	0x0800af70
 800086c:	0800afa0 	.word	0x0800afa0
 8000870:	200001a4 	.word	0x200001a4
 8000874:	0800af80 	.word	0x0800af80
 8000878:	0800af90 	.word	0x0800af90
 800087c:	20000000 	.word	0x20000000
 8000880:	0800af98 	.word	0x0800af98
 8000884:	200001a8 	.word	0x200001a8

08000888 <initAdvanceMode>:

void initAdvanceMode()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <initAdvanceMode+0x94>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10e      	bne.n	80008b2 <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <initAdvanceMode+0x98>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	331e      	adds	r3, #30
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <initAdvanceMode+0x98>)
 800089e:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <initAdvanceMode+0x98>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	2b78      	cmp	r3, #120	; 0x78
 80008a6:	d902      	bls.n	80008ae <initAdvanceMode+0x26>
		{
			TIMING = 120;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <initAdvanceMode+0x98>)
 80008aa:	2278      	movs	r2, #120	; 0x78
 80008ac:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008ae:	f7ff fe69 	bl	8000584 <setupAdvance>
	}
	if(button_count[7] == 1)
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <initAdvanceMode+0x94>)
 80008b4:	89db      	ldrh	r3, [r3, #14]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10e      	bne.n	80008d8 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <initAdvanceMode+0x98>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	3b1e      	subs	r3, #30
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <initAdvanceMode+0x98>)
 80008c4:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <initAdvanceMode+0x98>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b1d      	cmp	r3, #29
 80008cc:	d802      	bhi.n	80008d4 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <initAdvanceMode+0x98>)
 80008d0:	221e      	movs	r2, #30
 80008d2:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008d4:	f7ff fe56 	bl	8000584 <setupAdvance>
	}
	if(button_count[11] == 1)
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <initAdvanceMode+0x94>)
 80008da:	8adb      	ldrh	r3, [r3, #22]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10e      	bne.n	80008fe <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <initAdvanceMode+0x9c>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	3305      	adds	r3, #5
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <initAdvanceMode+0x9c>)
 80008ea:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <initAdvanceMode+0x9c>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	2b1e      	cmp	r3, #30
 80008f2:	d902      	bls.n	80008fa <initAdvanceMode+0x72>
		{
			WALL = 30;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <initAdvanceMode+0x9c>)
 80008f6:	221e      	movs	r2, #30
 80008f8:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008fa:	f7ff fe43 	bl	8000584 <setupAdvance>
	}
	if(button_count[15] == 1)
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <initAdvanceMode+0x94>)
 8000900:	8bdb      	ldrh	r3, [r3, #30]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d107      	bne.n	8000916 <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <initAdvanceMode+0x9c>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	3b05      	subs	r3, #5
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <initAdvanceMode+0x9c>)
 8000910:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000912:	f7ff fe37 	bl	8000584 <setupAdvance>
	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000012c 	.word	0x2000012c
 8000920:	20000000 	.word	0x20000000
 8000924:	200001a8 	.word	0x200001a8

08000928 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <button_init+0x14>)
 8000932:	f005 ffe7 	bl	8006904 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020c00 	.word	0x40020c00

08000940 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	482f      	ldr	r0, [pc, #188]	; (8000a08 <button_Scan+0xc8>)
 800094c:	f005 ffda 	bl	8006904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	2108      	movs	r1, #8
 8000954:	482c      	ldr	r0, [pc, #176]	; (8000a08 <button_Scan+0xc8>)
 8000956:	f005 ffd5 	bl	8006904 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800095a:	230a      	movs	r3, #10
 800095c:	2202      	movs	r2, #2
 800095e:	492b      	ldr	r1, [pc, #172]	; (8000a0c <button_Scan+0xcc>)
 8000960:	482b      	ldr	r0, [pc, #172]	; (8000a10 <button_Scan+0xd0>)
 8000962:	f006 fe46 	bl	80075f2 <HAL_SPI_Receive>
	  int button_index = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	e03f      	b.n	80009f6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db06      	blt.n	800098a <button_Scan+0x4a>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b03      	cmp	r3, #3
 8000980:	dc03      	bgt.n	800098a <button_Scan+0x4a>
			  button_index = i + 4;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3304      	adds	r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e018      	b.n	80009bc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b03      	cmp	r3, #3
 800098e:	dd07      	ble.n	80009a0 <button_Scan+0x60>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b07      	cmp	r3, #7
 8000994:	dc04      	bgt.n	80009a0 <button_Scan+0x60>
			  button_index = 7 - i;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f1c3 0307 	rsb	r3, r3, #7
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e00d      	b.n	80009bc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	dd06      	ble.n	80009b4 <button_Scan+0x74>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0b      	cmp	r3, #11
 80009aa:	dc03      	bgt.n	80009b4 <button_Scan+0x74>
			  button_index = i + 4;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3304      	adds	r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e003      	b.n	80009bc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f1c3 0317 	rsb	r3, r3, #23
 80009ba:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <button_Scan+0xcc>)
 80009be:	881a      	ldrh	r2, [r3, #0]
 80009c0:	897b      	ldrh	r3, [r7, #10]
 80009c2:	4013      	ands	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <button_Scan+0x96>
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <button_Scan+0xd4>)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d4:	e009      	b.n	80009ea <button_Scan+0xaa>
		  else button_count[button_index]++;
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <button_Scan+0xd4>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	3301      	adds	r3, #1
 80009e0:	b299      	uxth	r1, r3
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <button_Scan+0xd4>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	ddbc      	ble.n	8000976 <button_Scan+0x36>
	  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	2000014c 	.word	0x2000014c
 8000a10:	2000294c 	.word	0x2000294c
 8000a14:	2000012c 	.word	0x2000012c

08000a18 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	3305      	adds	r3, #5
 8000a26:	b299      	uxth	r1, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <showNotifyExit+0xc0>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f001 fb86 	bl	800214c <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3314      	adds	r3, #20
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	2310      	movs	r3, #16
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <showNotifyExit+0xc4>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 fb75 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <showNotifyExit+0xc8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3308      	adds	r3, #8
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	0fda      	lsrs	r2, r3, #31
 8000a78:	4413      	add	r3, r2
 8000a7a:	105b      	asrs	r3, r3, #1
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3b14      	subs	r3, #20
 8000a80:	b299      	uxth	r1, r3
 8000a82:	2301      	movs	r3, #1
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2310      	movs	r3, #16
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	f248 4330 	movw	r3, #33840	; 0x8430
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <showNotifyExit+0xcc>)
 8000a94:	f001 faf6 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <showNotifyExit+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	b298      	uxth	r0, r3
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <showNotifyExit+0xbc>)
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <showNotifyExit+0xbc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	0fda      	lsrs	r2, r3, #31
 8000aae:	4413      	add	r3, r2
 8000ab0:	105b      	asrs	r3, r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3319      	adds	r3, #25
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2310      	movs	r3, #16
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <showNotifyExit+0xd0>)
 8000aca:	f001 fadb 	bl	8002084 <lcd_ShowStr>
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000004c 	.word	0x2000004c
 8000ad8:	0800afd4 	.word	0x0800afd4
 8000adc:	0800afe0 	.word	0x0800afe0
 8000ae0:	2000003c 	.word	0x2000003c
 8000ae4:	0800afec 	.word	0x0800afec
 8000ae8:	0800aff0 	.word	0x0800aff0

08000aec <drawArrowExit>:

void drawArrowExit()
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8000af2:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <drawArrowExit+0x168>)
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <drawArrowExit+0x168>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	0fda      	lsrs	r2, r3, #31
 8000afe:	4413      	add	r3, r2
 8000b00:	105b      	asrs	r3, r3, #1
 8000b02:	3b08      	subs	r3, #8
 8000b04:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <drawArrowExit+0x168>)
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4b52      	ldr	r3, [pc, #328]	; (8000c54 <drawArrowExit+0x168>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	0fda      	lsrs	r2, r3, #31
 8000b12:	4413      	add	r3, r2
 8000b14:	105b      	asrs	r3, r3, #1
 8000b16:	331c      	adds	r3, #28
 8000b18:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 8000b1a:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <drawArrowExit+0x16c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d003      	beq.n	8000b2a <drawArrowExit+0x3e>
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	f000 80a2 	beq.w	8000c6c <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8000b28:	e135      	b.n	8000d96 <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	; (8000c5c <drawArrowExit+0x170>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <drawArrowExit+0x174>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	b298      	uxth	r0, r3
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <drawArrowExit+0x168>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3323      	adds	r3, #35	; 0x23
 8000b42:	b299      	uxth	r1, r3
 8000b44:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <drawArrowExit+0x170>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <drawArrowExit+0x174>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <drawArrowExit+0x168>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	3b05      	subs	r3, #5
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f248 4430 	movw	r4, #33840	; 0x8430
 8000b62:	9400      	str	r4, [sp, #0]
 8000b64:	f000 fedc 	bl	8001920 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <drawArrowExit+0x170>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3308      	adds	r3, #8
 8000b70:	b298      	uxth	r0, r3
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <drawArrowExit+0x168>)
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <drawArrowExit+0x168>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	0fda      	lsrs	r2, r3, #31
 8000b7e:	4413      	add	r3, r2
 8000b80:	105b      	asrs	r3, r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3b0f      	subs	r3, #15
 8000b86:	b299      	uxth	r1, r3
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	f248 4330 	movw	r3, #33840	; 0x8430
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <drawArrowExit+0x178>)
 8000b9c:	f001 fa72 	bl	8002084 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <drawArrowExit+0x170>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	b298      	uxth	r0, r3
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <drawArrowExit+0x168>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <drawArrowExit+0x168>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	0fda      	lsrs	r2, r3, #31
 8000bb6:	4413      	add	r3, r2
 8000bb8:	105b      	asrs	r3, r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	b299      	uxth	r1, r3
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	f248 4330 	movw	r3, #33840	; 0x8430
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <drawArrowExit+0x17c>)
 8000bd2:	f001 fa57 	bl	8002084 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <drawArrowExit+0x170>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3b0f      	subs	r3, #15
 8000bde:	b298      	uxth	r0, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b299      	uxth	r1, r3
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <drawArrowExit+0x170>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b0a      	subs	r3, #10
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	3b05      	subs	r3, #5
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	9400      	str	r4, [sp, #0]
 8000bfa:	f000 fede 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <drawArrowExit+0x170>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3b0f      	subs	r3, #15
 8000c06:	b298      	uxth	r0, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <drawArrowExit+0x170>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	3b0a      	subs	r3, #10
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	3305      	adds	r3, #5
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2400      	movs	r4, #0
 8000c20:	9400      	str	r4, [sp, #0]
 8000c22:	f000 feca 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <drawArrowExit+0x170>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b0a      	subs	r3, #10
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b05      	subs	r3, #5
 8000c36:	b299      	uxth	r1, r3
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <drawArrowExit+0x170>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3b0a      	subs	r3, #10
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3305      	adds	r3, #5
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	9400      	str	r4, [sp, #0]
 8000c4e:	f000 feb4 	bl	80019ba <lcd_DrawLine>
		break;
 8000c52:	e0a0      	b.n	8000d96 <drawArrowExit+0x2aa>
 8000c54:	2000004c 	.word	0x2000004c
 8000c58:	20000060 	.word	0x20000060
 8000c5c:	2000003c 	.word	0x2000003c
 8000c60:	20000038 	.word	0x20000038
 8000c64:	0800afec 	.word	0x0800afec
 8000c68:	0800aff0 	.word	0x0800aff0
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <drawArrowExit+0x2b4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <drawArrowExit+0x2b8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4413      	add	r3, r2
 8000c7a:	b298      	uxth	r0, r3
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <drawArrowExit+0x2bc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	3323      	adds	r3, #35	; 0x23
 8000c84:	b299      	uxth	r1, r3
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <drawArrowExit+0x2b4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <drawArrowExit+0x2b8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <drawArrowExit+0x2bc>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3b05      	subs	r3, #5
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	f248 4430 	movw	r4, #33840	; 0x8430
 8000ca4:	9400      	str	r4, [sp, #0]
 8000ca6:	f000 fe3b 	bl	8001920 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <drawArrowExit+0x2b4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	0fda      	lsrs	r2, r3, #31
 8000cc0:	4413      	add	r3, r2
 8000cc2:	105b      	asrs	r3, r3, #1
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	3b0f      	subs	r3, #15
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	2310      	movs	r3, #16
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	f248 4330 	movw	r3, #33840	; 0x8430
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4a34      	ldr	r2, [pc, #208]	; (8000dac <drawArrowExit+0x2c0>)
 8000cdc:	f001 f9d2 	bl	8002084 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <drawArrowExit+0x2b4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	b298      	uxth	r0, r3
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	0fda      	lsrs	r2, r3, #31
 8000cf6:	4413      	add	r3, r2
 8000cf8:	105b      	asrs	r3, r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	2301      	movs	r3, #1
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2310      	movs	r3, #16
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	f248 4330 	movw	r3, #33840	; 0x8430
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <drawArrowExit+0x2c4>)
 8000d14:	f001 f9b6 	bl	8002084 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3b0f      	subs	r3, #15
 8000d20:	b298      	uxth	r0, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b0a      	subs	r3, #10
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	3b05      	subs	r3, #5
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2400      	movs	r4, #0
 8000d3a:	9400      	str	r4, [sp, #0]
 8000d3c:	f000 fe3d 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b0f      	subs	r3, #15
 8000d48:	b298      	uxth	r0, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b0a      	subs	r3, #10
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3305      	adds	r3, #5
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2400      	movs	r4, #0
 8000d62:	9400      	str	r4, [sp, #0]
 8000d64:	f000 fe29 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3b0a      	subs	r3, #10
 8000d70:	b298      	uxth	r0, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b05      	subs	r3, #5
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3b0a      	subs	r3, #10
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3305      	adds	r3, #5
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	9400      	str	r4, [sp, #0]
 8000d90:	f000 fe13 	bl	80019ba <lcd_DrawLine>
		break;
 8000d94:	bf00      	nop
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000003c 	.word	0x2000003c
 8000da4:	20000038 	.word	0x20000038
 8000da8:	2000004c 	.word	0x2000004c
 8000dac:	0800afec 	.word	0x0800afec
 8000db0:	0800aff0 	.word	0x0800aff0

08000db4 <gameExitUI>:

void gameExitUI()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	showWallnotify();
 8000db8:	f000 f91e 	bl	8000ff8 <showWallnotify>
	showNotifyExit();
 8000dbc:	f7ff fe2c 	bl	8000a18 <showNotifyExit>
	drawArrowExit();
 8000dc0:	f7ff fe94 	bl	8000aec <drawArrowExit>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <askToExit>:

void askToExit()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <askToExit+0x74>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b0a      	cmp	r3, #10
 8000dd2:	d131      	bne.n	8000e38 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <askToExit+0x78>)
 8000dd6:	88db      	ldrh	r3, [r3, #6]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10c      	bne.n	8000df6 <askToExit+0x2e>
		{
			flagExit = 1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <askToExit+0x7c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <askToExit+0x80>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d023      	beq.n	8000e32 <askToExit+0x6a>
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d104      	bne.n	8000df8 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <askToExit+0x80>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
				break;
 8000df4:	e000      	b.n	8000df8 <askToExit+0x30>
			}
		}
 8000df6:	bf00      	nop
		if(button_count[7] == 1)
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <askToExit+0x78>)
 8000dfa:	89db      	ldrh	r3, [r3, #14]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10d      	bne.n	8000e1c <askToExit+0x54>
		{
			flagExit = 1;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <askToExit+0x7c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <askToExit+0x80>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d002      	beq.n	8000e14 <askToExit+0x4c>
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d011      	beq.n	8000e36 <askToExit+0x6e>
 8000e12:	e004      	b.n	8000e1e <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <askToExit+0x80>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	601a      	str	r2, [r3, #0]
				break;
 8000e1a:	e000      	b.n	8000e1e <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 8000e1c:	bf00      	nop
		if(flagExit == 1)
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <askToExit+0x7c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <askToExit+0x70>
		{
			gameExitUI();
 8000e26:	f7ff ffc5 	bl	8000db4 <gameExitUI>
			flagExit = 0;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <askToExit+0x7c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e002      	b.n	8000e38 <askToExit+0x70>
				return;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <askToExit+0x70>
				return;
 8000e36:	bf00      	nop
		}
	}
}
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001b8 	.word	0x200001b8
 8000e40:	2000012c 	.word	0x2000012c
 8000e44:	200001c8 	.word	0x200001c8
 8000e48:	20000060 	.word	0x20000060

08000e4c <initExit>:

void initExit()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	gameExitUI();
 8000e50:	f7ff ffb0 	bl	8000db4 <gameExitUI>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	; (8000f48 <MX_FSMC_Init+0xf0>)
 8000e90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000eea:	230f      	movs	r3, #15
 8000eec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000ef2:	233c      	movs	r3, #60	; 0x3c
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000efa:	2310      	movs	r3, #16
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000efe:	2311      	movs	r3, #17
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000f06:	2308      	movs	r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000f16:	2310      	movs	r3, #16
 8000f18:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000f1a:	2311      	movs	r3, #17
 8000f1c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000f22:	463a      	mov	r2, r7
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000f2c:	f006 ff44 	bl	8007db8 <HAL_SRAM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000f36:	f001 fba7 	bl	8002688 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000150 	.word	0x20000150
 8000f48:	a0000104 	.word	0xa0000104

08000f4c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_FSMC_MspInit+0x88>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d131      	bne.n	8000fcc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_FSMC_MspInit+0x88>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f8a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000f8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_FSMC_MspInit+0x90>)
 8000fa6:	f005 fb11 	bl	80065cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000faa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000fae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <HAL_FSMC_MspInit+0x94>)
 8000fc6:	f005 fb01 	bl	80065cc <HAL_GPIO_Init>
 8000fca:	e000      	b.n	8000fce <HAL_FSMC_MspInit+0x82>
    return;
 8000fcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001a0 	.word	0x200001a0
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fec:	f7ff ffae 	bl	8000f4c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <showWallnotify>:
#include "main.h"
#include "button.h"
#include "picture.h"

void showWallnotify()
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <showWallnotify+0xe8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b298      	uxth	r0, r3
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <showWallnotify+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b299      	uxth	r1, r3
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <showWallnotify+0xe8>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	b29c      	uxth	r4, r3
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <showWallnotify+0xec>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <showWallnotify+0xf0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	f248 4230 	movw	r2, #33840	; 0x8430
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4622      	mov	r2, r4
 8001028:	f000 fc7a 	bl	8001920 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <showWallnotify+0xe8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b298      	uxth	r0, r3
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <showWallnotify+0xec>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b299      	uxth	r1, r3
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <showWallnotify+0xe8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	b29c      	uxth	r4, r3
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <showWallnotify+0xec>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <showWallnotify+0xf0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	2200      	movs	r2, #0
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	4622      	mov	r2, r4
 8001054:	f000 fc64 	bl	8001920 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <showWallnotify+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b298      	uxth	r0, r3
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <showWallnotify+0xec>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b299      	uxth	r1, r3
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <showWallnotify+0xe8>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <showWallnotify+0xf0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <showWallnotify+0xec>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	b29b      	uxth	r3, r3
 800107a:	2400      	movs	r4, #0
 800107c:	9400      	str	r4, [sp, #0]
 800107e:	f000 fc4f 	bl	8001920 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <showWallnotify+0xe8>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <showWallnotify+0xf0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b298      	uxth	r0, r3
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <showWallnotify+0xec>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	b299      	uxth	r1, r3
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <showWallnotify+0xe8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <showWallnotify+0xec>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2400      	movs	r4, #0
 80010a6:	9400      	str	r4, [sp, #0]
 80010a8:	f000 fc3a 	bl	8001920 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <showWallnotify+0xe8>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <showWallnotify+0xec>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <showWallnotify+0xf0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b299      	uxth	r1, r3
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <showWallnotify+0xe8>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <showWallnotify+0xec>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2400      	movs	r4, #0
 80010d0:	9400      	str	r4, [sp, #0]
 80010d2:	f000 fc25 	bl	8001920 <lcd_Fill>

}
 80010d6:	bf00      	nop
 80010d8:	3704      	adds	r7, #4
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000003c 	.word	0x2000003c
 80010e4:	2000004c 	.word	0x2000004c
 80010e8:	20000038 	.word	0x20000038

080010ec <showNotifyOver>:

void showNotifyOver(uint16_t overVal)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	char str1[50] = "";
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	222e      	movs	r2, #46	; 0x2e
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f008 fc9c 	bl	8009a40 <memset>
	char* str2;
	switch(overVal)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d816      	bhi.n	800113c <showNotifyOver+0x50>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <showNotifyOver+0x28>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	08001125 	.word	0x08001125
 8001118:	0800112b 	.word	0x0800112b
 800111c:	08001131 	.word	0x08001131
 8001120:	08001137 	.word	0x08001137
	{
	case 0:
		str2 = " HIT WALL ";
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <showNotifyOver+0xf4>)
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001128:	e008      	b.n	800113c <showNotifyOver+0x50>
	case 1:
		str2 = " TIME OUT ";
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <showNotifyOver+0xf8>)
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800112e:	e005      	b.n	800113c <showNotifyOver+0x50>
	case 2:
		str2 = " EAT BODY ";
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <showNotifyOver+0xfc>)
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001134:	e002      	b.n	800113c <showNotifyOver+0x50>
	case 3:
		str2 = " OUT OF RANGE ";
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <showNotifyOver+0x100>)
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800113a:	bf00      	nop
	}
	strcat(str1, str2);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001142:	4618      	mov	r0, r3
 8001144:	f008 fd24 	bl	8009b90 <strcat>
	lcd_StrCenter(0, overWallY[0] + 10, str1, WHITE, BLACK, 16, 0);
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <showNotifyOver+0x104>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	330a      	adds	r3, #10
 8001150:	b299      	uxth	r1, r3
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	2300      	movs	r3, #0
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2310      	movs	r3, #16
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	2300      	movs	r3, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001166:	2000      	movs	r0, #0
 8001168:	f000 fff0 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <showNotifyOver+0x108>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	3308      	adds	r3, #8
 8001174:	b298      	uxth	r0, r3
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <showNotifyOver+0x104>)
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <showNotifyOver+0x104>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	0fda      	lsrs	r2, r3, #31
 8001182:	4413      	add	r3, r2
 8001184:	105b      	asrs	r3, r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	3b0f      	subs	r3, #15
 800118a:	b299      	uxth	r1, r3
 800118c:	2301      	movs	r3, #1
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2310      	movs	r3, #16
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f248 4330 	movw	r3, #33840	; 0x8430
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <showNotifyOver+0x10c>)
 800119e:	f000 ff71 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <showNotifyOver+0x108>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3308      	adds	r3, #8
 80011aa:	b298      	uxth	r0, r3
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <showNotifyOver+0x104>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <showNotifyOver+0x104>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	0fda      	lsrs	r2, r3, #31
 80011b8:	4413      	add	r3, r2
 80011ba:	105b      	asrs	r3, r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3314      	adds	r3, #20
 80011c0:	b299      	uxth	r1, r3
 80011c2:	2301      	movs	r3, #1
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2310      	movs	r3, #16
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f248 4330 	movw	r3, #33840	; 0x8430
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <showNotifyOver+0x110>)
 80011d4:	f000 ff56 	bl	8002084 <lcd_ShowStr>
}
 80011d8:	bf00      	nop
 80011da:	3740      	adds	r7, #64	; 0x40
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800aff4 	.word	0x0800aff4
 80011e4:	0800b000 	.word	0x0800b000
 80011e8:	0800b00c 	.word	0x0800b00c
 80011ec:	0800b018 	.word	0x0800b018
 80011f0:	2000004c 	.word	0x2000004c
 80011f4:	2000003c 	.word	0x2000003c
 80011f8:	0800b028 	.word	0x0800b028
 80011fc:	0800b034 	.word	0x0800b034

08001200 <eraseFull>:

void eraseFull()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <eraseFull+0x4c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <eraseFull+0x50>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4413      	add	r3, r2
 8001214:	b298      	uxth	r0, r3
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <eraseFull+0x54>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3319      	adds	r3, #25
 800121e:	b299      	uxth	r1, r3
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <eraseFull+0x4c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <eraseFull+0x50>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <eraseFull+0x54>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	b29b      	uxth	r3, r3
 8001236:	3b05      	subs	r3, #5
 8001238:	b29b      	uxth	r3, r3
 800123a:	f248 4430 	movw	r4, #33840	; 0x8430
 800123e:	9400      	str	r4, [sp, #0]
 8001240:	f000 fb6e 	bl	8001920 <lcd_Fill>

}
 8001244:	bf00      	nop
 8001246:	3704      	adds	r7, #4
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	2000003c 	.word	0x2000003c
 8001250:	20000038 	.word	0x20000038
 8001254:	2000004c 	.word	0x2000004c

08001258 <drawArrowOver>:

void drawArrowOver()
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b087      	sub	sp, #28
 800125c:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800125e:	4b87      	ldr	r3, [pc, #540]	; (800147c <drawArrowOver+0x224>)
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b86      	ldr	r3, [pc, #536]	; (800147c <drawArrowOver+0x224>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	0fda      	lsrs	r2, r3, #31
 800126a:	4413      	add	r3, r2
 800126c:	105b      	asrs	r3, r3, #1
 800126e:	3b08      	subs	r3, #8
 8001270:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <drawArrowOver+0x224>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <drawArrowOver+0x224>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	0fda      	lsrs	r2, r3, #31
 800127e:	4413      	add	r3, r2
 8001280:	105b      	asrs	r3, r3, #1
 8001282:	331c      	adds	r3, #28
 8001284:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 8001286:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <drawArrowOver+0x228>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <drawArrowOver+0x3c>
 800128e:	2b01      	cmp	r3, #1
 8001290:	d078      	beq.n	8001384 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8001292:	e0ef      	b.n	8001474 <drawArrowOver+0x21c>
		eraseFull();
 8001294:	f7ff ffb4 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 8001298:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <drawArrowOver+0x22c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3308      	adds	r3, #8
 80012a0:	b298      	uxth	r0, r3
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <drawArrowOver+0x224>)
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	4b75      	ldr	r3, [pc, #468]	; (800147c <drawArrowOver+0x224>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	0fda      	lsrs	r2, r3, #31
 80012ae:	4413      	add	r3, r2
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3b0f      	subs	r3, #15
 80012b6:	b299      	uxth	r1, r3
 80012b8:	2301      	movs	r3, #1
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2310      	movs	r3, #16
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f248 4330 	movw	r3, #33840	; 0x8430
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ca:	4a6f      	ldr	r2, [pc, #444]	; (8001488 <drawArrowOver+0x230>)
 80012cc:	f000 feda 	bl	8002084 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <drawArrowOver+0x22c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3308      	adds	r3, #8
 80012d8:	b298      	uxth	r0, r3
 80012da:	4b68      	ldr	r3, [pc, #416]	; (800147c <drawArrowOver+0x224>)
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <drawArrowOver+0x224>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	0fda      	lsrs	r2, r3, #31
 80012e6:	4413      	add	r3, r2
 80012e8:	105b      	asrs	r3, r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3314      	adds	r3, #20
 80012ee:	b299      	uxth	r1, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2310      	movs	r3, #16
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f248 4330 	movw	r3, #33840	; 0x8430
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	4a62      	ldr	r2, [pc, #392]	; (800148c <drawArrowOver+0x234>)
 8001302:	f000 febf 	bl	8002084 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <drawArrowOver+0x22c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b0f      	subs	r3, #15
 800130e:	b298      	uxth	r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	b299      	uxth	r1, r3
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <drawArrowOver+0x22c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b0a      	subs	r3, #10
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3b05      	subs	r3, #5
 8001324:	b29b      	uxth	r3, r3
 8001326:	2400      	movs	r4, #0
 8001328:	9400      	str	r4, [sp, #0]
 800132a:	f000 fb46 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800132e:	4b55      	ldr	r3, [pc, #340]	; (8001484 <drawArrowOver+0x22c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b0f      	subs	r3, #15
 8001336:	b298      	uxth	r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b299      	uxth	r1, r3
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <drawArrowOver+0x22c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b0a      	subs	r3, #10
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	b29b      	uxth	r3, r3
 800134a:	3305      	adds	r3, #5
 800134c:	b29b      	uxth	r3, r3
 800134e:	2400      	movs	r4, #0
 8001350:	9400      	str	r4, [sp, #0]
 8001352:	f000 fb32 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <drawArrowOver+0x22c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	3b0a      	subs	r3, #10
 800135e:	b298      	uxth	r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	b29b      	uxth	r3, r3
 8001364:	3b05      	subs	r3, #5
 8001366:	b299      	uxth	r1, r3
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <drawArrowOver+0x22c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b0a      	subs	r3, #10
 8001370:	b29a      	uxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b29b      	uxth	r3, r3
 8001376:	3305      	adds	r3, #5
 8001378:	b29b      	uxth	r3, r3
 800137a:	2400      	movs	r4, #0
 800137c:	9400      	str	r4, [sp, #0]
 800137e:	f000 fb1c 	bl	80019ba <lcd_DrawLine>
		break;
 8001382:	e077      	b.n	8001474 <drawArrowOver+0x21c>
		eraseFull();
 8001384:	f7ff ff3c 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <drawArrowOver+0x22c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	3308      	adds	r3, #8
 8001390:	b298      	uxth	r0, r3
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <drawArrowOver+0x224>)
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	4b39      	ldr	r3, [pc, #228]	; (800147c <drawArrowOver+0x224>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	0fda      	lsrs	r2, r3, #31
 800139e:	4413      	add	r3, r2
 80013a0:	105b      	asrs	r3, r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b0f      	subs	r3, #15
 80013a6:	b299      	uxth	r1, r3
 80013a8:	2301      	movs	r3, #1
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2310      	movs	r3, #16
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	f248 4330 	movw	r3, #33840	; 0x8430
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	4a33      	ldr	r2, [pc, #204]	; (8001488 <drawArrowOver+0x230>)
 80013ba:	f000 fe63 	bl	8002084 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <drawArrowOver+0x22c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3308      	adds	r3, #8
 80013c6:	b298      	uxth	r0, r3
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <drawArrowOver+0x224>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <drawArrowOver+0x224>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	0fda      	lsrs	r2, r3, #31
 80013d4:	4413      	add	r3, r2
 80013d6:	105b      	asrs	r3, r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3314      	adds	r3, #20
 80013dc:	b299      	uxth	r1, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2310      	movs	r3, #16
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f248 4330 	movw	r3, #33840	; 0x8430
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <drawArrowOver+0x234>)
 80013f2:	f000 fe47 	bl	8002084 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <drawArrowOver+0x22c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b0f      	subs	r3, #15
 80013fe:	b298      	uxth	r0, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b299      	uxth	r1, r3
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <drawArrowOver+0x22c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	b29b      	uxth	r3, r3
 800140a:	3b0a      	subs	r3, #10
 800140c:	b29a      	uxth	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b05      	subs	r3, #5
 8001414:	b29b      	uxth	r3, r3
 8001416:	2400      	movs	r4, #0
 8001418:	9400      	str	r4, [sp, #0]
 800141a:	f000 face 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <drawArrowOver+0x22c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b0f      	subs	r3, #15
 8001426:	b298      	uxth	r0, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b299      	uxth	r1, r3
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <drawArrowOver+0x22c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	b29b      	uxth	r3, r3
 8001432:	3b0a      	subs	r3, #10
 8001434:	b29a      	uxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	3305      	adds	r3, #5
 800143c:	b29b      	uxth	r3, r3
 800143e:	2400      	movs	r4, #0
 8001440:	9400      	str	r4, [sp, #0]
 8001442:	f000 faba 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <drawArrowOver+0x22c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b0a      	subs	r3, #10
 800144e:	b298      	uxth	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b05      	subs	r3, #5
 8001456:	b299      	uxth	r1, r3
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <drawArrowOver+0x22c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	b29b      	uxth	r3, r3
 800145e:	3b0a      	subs	r3, #10
 8001460:	b29a      	uxth	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	3305      	adds	r3, #5
 8001468:	b29b      	uxth	r3, r3
 800146a:	2400      	movs	r4, #0
 800146c:	9400      	str	r4, [sp, #0]
 800146e:	f000 faa4 	bl	80019ba <lcd_DrawLine>
		break;
 8001472:	bf00      	nop
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	2000004c 	.word	0x2000004c
 8001480:	200001ac 	.word	0x200001ac
 8001484:	2000003c 	.word	0x2000003c
 8001488:	0800b028 	.word	0x0800b028
 800148c:	0800b034 	.word	0x0800b034

08001490 <gameOverUI>:

void gameOverUI(uint16_t overVal)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	showWallnotify();
 800149a:	f7ff fdad 	bl	8000ff8 <showWallnotify>
	showNotifyOver(overVal);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe23 	bl	80010ec <showNotifyOver>
	drawArrowOver();
 80014a6:	f7ff fed7 	bl	8001258 <drawArrowOver>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <pickOver>:

void pickOver(uint16_t overVal)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	if(button_count[3] == 1)
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <pickOver+0x78>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10c      	bne.n	80014e0 <pickOver+0x2c>
	{
		flagOver = 1;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <pickOver+0x7c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <pickOver+0x80>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d025      	beq.n	8001520 <pickOver+0x6c>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <pickOver+0x2e>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <pickOver+0x80>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
			break;
 80014de:	e000      	b.n	80014e2 <pickOver+0x2e>
		}
	}
 80014e0:	bf00      	nop
	if(button_count[7] == 1)
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <pickOver+0x78>)
 80014e4:	89db      	ldrh	r3, [r3, #14]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10d      	bne.n	8001506 <pickOver+0x52>
	{
		flagOver = 1;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <pickOver+0x7c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <pickOver+0x80>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <pickOver+0x4a>
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d013      	beq.n	8001524 <pickOver+0x70>
 80014fc:	e004      	b.n	8001508 <pickOver+0x54>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <pickOver+0x80>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
			break;
 8001504:	e000      	b.n	8001508 <pickOver+0x54>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 8001506:	bf00      	nop
	if(flagOver == 1)
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <pickOver+0x7c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10a      	bne.n	8001526 <pickOver+0x72>
	{
		gameOverUI(overVal);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffbc 	bl	8001490 <gameOverUI>
		flagOver = 0;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <pickOver+0x7c>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e002      	b.n	8001526 <pickOver+0x72>
			return;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <pickOver+0x72>
			return;
 8001524:	bf00      	nop
	}
}
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000012c 	.word	0x2000012c
 8001530:	200001c0 	.word	0x200001c0
 8001534:	200001ac 	.word	0x200001ac

08001538 <initOverMode>:

void initOverMode(uint16_t overVal)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	statusGame = OVERMODE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <initOverMode+0x38>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <initOverMode+0x3c>)
 800154a:	2200      	movs	r2, #0
 800154c:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <initOverMode+0x40>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <initOverMode+0x44>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
	pickOver(overVal);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffa9 	bl	80014b4 <pickOver>
	OVERMESSAGE = overVal;
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <initOverMode+0x48>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	8013      	strh	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200001b8 	.word	0x200001b8
 8001574:	200001a6 	.word	0x200001a6
 8001578:	200001ac 	.word	0x200001ac
 800157c:	200001c0 	.word	0x200001c0
 8001580:	200001ce 	.word	0x200001ce

08001584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a80      	ldr	r2, [pc, #512]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b7e      	ldr	r3, [pc, #504]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a79      	ldr	r2, [pc, #484]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a72      	ldr	r2, [pc, #456]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a6b      	ldr	r2, [pc, #428]	; (80017a4 <MX_GPIO_Init+0x220>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a64      	ldr	r2, [pc, #400]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <MX_GPIO_Init+0x220>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <MX_GPIO_Init+0x220>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a56      	ldr	r2, [pc, #344]	; (80017a4 <MX_GPIO_Init+0x220>)
 800164c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <MX_GPIO_Init+0x220>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2170      	movs	r1, #112	; 0x70
 800167e:	484a      	ldr	r0, [pc, #296]	; (80017a8 <MX_GPIO_Init+0x224>)
 8001680:	f005 f940 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168a:	4848      	ldr	r0, [pc, #288]	; (80017ac <MX_GPIO_Init+0x228>)
 800168c:	f005 f93a 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ESP12_BUSY_Pin|ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001696:	4846      	ldr	r0, [pc, #280]	; (80017b0 <MX_GPIO_Init+0x22c>)
 8001698:	f005 f934 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2140      	movs	r1, #64	; 0x40
 80016a0:	4844      	ldr	r0, [pc, #272]	; (80017b4 <MX_GPIO_Init+0x230>)
 80016a2:	f005 f92f 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ac:	4842      	ldr	r0, [pc, #264]	; (80017b8 <MX_GPIO_Init+0x234>)
 80016ae:	f005 f929 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	4841      	ldr	r0, [pc, #260]	; (80017bc <MX_GPIO_Init+0x238>)
 80016b8:	f005 f924 	bl	8006904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80016bc:	2370      	movs	r3, #112	; 0x70
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4835      	ldr	r0, [pc, #212]	; (80017a8 <MX_GPIO_Init+0x224>)
 80016d4:	f004 ff7a 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	482e      	ldr	r0, [pc, #184]	; (80017ac <MX_GPIO_Init+0x228>)
 80016f2:	f004 ff6b 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin|ESP12_PWR_Pin;
 80016f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4828      	ldr	r0, [pc, #160]	; (80017b0 <MX_GPIO_Init+0x22c>)
 8001710:	f004 ff5c 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4824      	ldr	r0, [pc, #144]	; (80017b8 <MX_GPIO_Init+0x234>)
 8001728:	f004 ff50 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800172c:	2330      	movs	r3, #48	; 0x30
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	481b      	ldr	r0, [pc, #108]	; (80017ac <MX_GPIO_Init+0x228>)
 8001740:	f004 ff44 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4816      	ldr	r0, [pc, #88]	; (80017b4 <MX_GPIO_Init+0x230>)
 800175c:	f004 ff36 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	480f      	ldr	r0, [pc, #60]	; (80017b8 <MX_GPIO_Init+0x234>)
 800177a:	f004 ff27 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800177e:	2308      	movs	r3, #8
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <MX_GPIO_Init+0x238>)
 8001796:	f004 ff19 	bl	80065cc <HAL_GPIO_Init>

}
 800179a:	bf00      	nop
 800179c:	3738      	adds	r7, #56	; 0x38
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40021400 	.word	0x40021400
 80017b4:	40021800 	.word	0x40021800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020c00 	.word	0x40020c00

080017c0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <LCD_WR_REG+0x1c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	8013      	strh	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	600ffffe 	.word	0x600ffffe

080017e0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <LCD_WR_DATA+0x1c>)
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	8053      	strh	r3, [r2, #2]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	600ffffe 	.word	0x600ffffe

08001800 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <LCD_RD_DATA+0x20>)
 8001808:	885b      	ldrh	r3, [r3, #2]
 800180a:	b29b      	uxth	r3, r3
 800180c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b29b      	uxth	r3, r3
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	600ffffe 	.word	0x600ffffe

08001824 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	4603      	mov	r3, r0
 8001838:	80bb      	strh	r3, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]
 800183e:	4613      	mov	r3, r2
 8001840:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001842:	202a      	movs	r0, #42	; 0x2a
 8001844:	f7ff ffbc 	bl	80017c0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffc6 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	b29b      	uxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ffc0 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffba 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffb4 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001878:	202b      	movs	r0, #43	; 0x2b
 800187a:	f7ff ffa1 	bl	80017c0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ffab 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ffa5 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001896:	883b      	ldrh	r3, [r7, #0]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff9f 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80018a2:	883b      	ldrh	r3, [r7, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff99 	bl	80017e0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80018ae:	202c      	movs	r0, #44	; 0x2c
 80018b0:	f7ff ff86 	bl	80017c0 <LCD_WR_REG>
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}

080018bc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <lcd_Clear+0x60>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <lcd_Clear+0x60>)
 80018d0:	885b      	ldrh	r3, [r3, #2]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2100      	movs	r1, #0
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ffa3 	bl	8001824 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	81fb      	strh	r3, [r7, #14]
 80018e2:	e011      	b.n	8001908 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	81bb      	strh	r3, [r7, #12]
 80018e8:	e006      	b.n	80018f8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff77 	bl	80017e0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80018f2:	89bb      	ldrh	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	81bb      	strh	r3, [r7, #12]
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <lcd_Clear+0x60>)
 80018fa:	885b      	ldrh	r3, [r3, #2]
 80018fc:	89ba      	ldrh	r2, [r7, #12]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3f3      	bcc.n	80018ea <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	3301      	adds	r3, #1
 8001906:	81fb      	strh	r3, [r7, #14]
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <lcd_Clear+0x60>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	89fa      	ldrh	r2, [r7, #14]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3e8      	bcc.n	80018e4 <lcd_Clear+0x28>
		}
	}
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200001d0 	.word	0x200001d0

08001920 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4623      	mov	r3, r4
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	4603      	mov	r3, r0
 8001934:	80bb      	strh	r3, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	807b      	strh	r3, [r7, #2]
 800193a:	4613      	mov	r3, r2
 800193c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	883b      	ldrh	r3, [r7, #0]
 8001946:	3b01      	subs	r3, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	88b9      	ldrh	r1, [r7, #4]
 800194c:	88f8      	ldrh	r0, [r7, #6]
 800194e:	f7ff ff69 	bl	8001824 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	81fb      	strh	r3, [r7, #14]
 8001956:	e010      	b.n	800197a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	81bb      	strh	r3, [r7, #12]
 800195c:	e006      	b.n	800196c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800195e:	8c3b      	ldrh	r3, [r7, #32]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff3d 	bl	80017e0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001966:	89bb      	ldrh	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	81bb      	strh	r3, [r7, #12]
 800196c:	89ba      	ldrh	r2, [r7, #12]
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3f4      	bcc.n	800195e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001974:	89fb      	ldrh	r3, [r7, #14]
 8001976:	3301      	adds	r3, #1
 8001978:	81fb      	strh	r3, [r7, #14]
 800197a:	89fa      	ldrh	r2, [r7, #14]
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3ea      	bcc.n	8001958 <lcd_Fill+0x38>
		}
	}
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}

0800198c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	460b      	mov	r3, r1
 8001998:	80bb      	strh	r3, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	88b9      	ldrh	r1, [r7, #4]
 80019a4:	88f8      	ldrh	r0, [r7, #6]
 80019a6:	f7ff ff3d 	bl	8001824 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff17 	bl	80017e0 <LCD_WR_DATA>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80019ba:	b590      	push	{r4, r7, lr}
 80019bc:	b08d      	sub	sp, #52	; 0x34
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4604      	mov	r4, r0
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	461a      	mov	r2, r3
 80019c8:	4623      	mov	r3, r4
 80019ca:	80fb      	strh	r3, [r7, #6]
 80019cc:	4603      	mov	r3, r0
 80019ce:	80bb      	strh	r3, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80019e8:	883a      	ldrh	r2, [r7, #0]
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dd02      	ble.n	8001a04 <lcd_DrawLine+0x4a>
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e00b      	b.n	8001a1c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <lcd_DrawLine+0x56>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e005      	b.n	8001a1c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	425b      	negs	r3, r3
 8001a1a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dd02      	ble.n	8001a28 <lcd_DrawLine+0x6e>
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e00b      	b.n	8001a40 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <lcd_DrawLine+0x7a>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e005      	b.n	8001a40 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dd02      	ble.n	8001a4e <lcd_DrawLine+0x94>
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	e001      	b.n	8001a52 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a56:	e02b      	b.n	8001ab0 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	b291      	uxth	r1, r2
 8001a60:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff91 	bl	800198c <lcd_DrawPoint>
		xerr+=delta_x;
 8001a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	4413      	add	r3, r2
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dd07      	ble.n	8001a92 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dd07      	ble.n	8001aaa <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001aac:	3301      	adds	r3, #1
 8001aae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dacf      	bge.n	8001a58 <lcd_DrawLine+0x9e>
		}
	}
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3734      	adds	r7, #52	; 0x34
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}

08001ac2 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001ac2:	b590      	push	{r4, r7, lr}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af02      	add	r7, sp, #8
 8001ac8:	4604      	mov	r4, r0
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80bb      	strh	r3, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001ae0:	88bc      	ldrh	r4, [r7, #4]
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	88b9      	ldrh	r1, [r7, #4]
 8001ae6:	88f8      	ldrh	r0, [r7, #6]
 8001ae8:	8b3b      	ldrh	r3, [r7, #24]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	f7ff ff64 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001af2:	883c      	ldrh	r4, [r7, #0]
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	88b9      	ldrh	r1, [r7, #4]
 8001af8:	88f8      	ldrh	r0, [r7, #6]
 8001afa:	8b3b      	ldrh	r3, [r7, #24]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4623      	mov	r3, r4
 8001b00:	f7ff ff5b 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001b04:	883c      	ldrh	r4, [r7, #0]
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	8839      	ldrh	r1, [r7, #0]
 8001b0a:	88f8      	ldrh	r0, [r7, #6]
 8001b0c:	8b3b      	ldrh	r3, [r7, #24]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4623      	mov	r3, r4
 8001b12:	f7ff ff52 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001b16:	883c      	ldrh	r4, [r7, #0]
 8001b18:	887a      	ldrh	r2, [r7, #2]
 8001b1a:	88b9      	ldrh	r1, [r7, #4]
 8001b1c:	8878      	ldrh	r0, [r7, #2]
 8001b1e:	8b3b      	ldrh	r3, [r7, #24]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4623      	mov	r3, r4
 8001b24:	f7ff ff49 	bl	80019ba <lcd_DrawLine>
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}

08001b30 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4604      	mov	r4, r0
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4623      	mov	r3, r4
 8001b40:	80fb      	strh	r3, [r7, #6]
 8001b42:	4603      	mov	r3, r0
 8001b44:	80bb      	strh	r3, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001b56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	fb12 f303 	smulbb	r3, r2, r3
 8001b86:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	3b20      	subs	r3, #32
 8001b8c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4413      	add	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29c      	uxth	r4, r3
 8001b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	88bb      	ldrh	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	88b9      	ldrh	r1, [r7, #4]
 8001bae:	88f8      	ldrh	r0, [r7, #6]
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	f7ff fe37 	bl	8001824 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	827b      	strh	r3, [r7, #18]
 8001bba:	e07a      	b.n	8001cb2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001bbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	d028      	beq.n	8001c16 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d108      	bne.n	8001bde <lcd_ShowChar+0xae>
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	8a7b      	ldrh	r3, [r7, #18]
 8001bd0:	493c      	ldr	r1, [pc, #240]	; (8001cc4 <lcd_ShowChar+0x194>)
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	440a      	add	r2, r1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	75fb      	strb	r3, [r7, #23]
 8001bdc:	e01b      	b.n	8001c16 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001be2:	2b18      	cmp	r3, #24
 8001be4:	d10b      	bne.n	8001bfe <lcd_ShowChar+0xce>
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	8a79      	ldrh	r1, [r7, #18]
 8001bea:	4837      	ldr	r0, [pc, #220]	; (8001cc8 <lcd_ShowChar+0x198>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4403      	add	r3, r0
 8001bf6:	440b      	add	r3, r1
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	75fb      	strb	r3, [r7, #23]
 8001bfc:	e00b      	b.n	8001c16 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d15a      	bne.n	8001cbc <lcd_ShowChar+0x18c>
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	8a7b      	ldrh	r3, [r7, #18]
 8001c0a:	4930      	ldr	r1, [pc, #192]	; (8001ccc <lcd_ShowChar+0x19c>)
 8001c0c:	0192      	lsls	r2, r2, #6
 8001c0e:	440a      	add	r2, r1
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	75bb      	strb	r3, [r7, #22]
 8001c1a:	e044      	b.n	8001ca6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001c1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d120      	bne.n	8001c66 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001c24:	7dfa      	ldrb	r2, [r7, #23]
 8001c26:	7dbb      	ldrb	r3, [r7, #22]
 8001c28:	fa42 f303 	asr.w	r3, r2, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <lcd_ShowChar+0x10e>
 8001c34:	883b      	ldrh	r3, [r7, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fdd2 	bl	80017e0 <LCD_WR_DATA>
 8001c3c:	e003      	b.n	8001c46 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fdcd 	bl	80017e0 <LCD_WR_DATA>
				m++;
 8001c46:	7d7b      	ldrb	r3, [r7, #21]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001c4c:	7d7b      	ldrb	r3, [r7, #21]
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11f      	bne.n	8001ca0 <lcd_ShowChar+0x170>
				{
					m=0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	757b      	strb	r3, [r7, #21]
					break;
 8001c64:	e022      	b.n	8001cac <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001c66:	7dfa      	ldrb	r2, [r7, #23]
 8001c68:	7dbb      	ldrb	r3, [r7, #22]
 8001c6a:	fa42 f303 	asr.w	r3, r2, r3
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <lcd_ShowChar+0x152>
 8001c76:	883a      	ldrh	r2, [r7, #0]
 8001c78:	88b9      	ldrh	r1, [r7, #4]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fe85 	bl	800198c <lcd_DrawPoint>
				x++;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	3301      	adds	r3, #1
 8001c86:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	8a3b      	ldrh	r3, [r7, #16]
 8001c8c:	1ad2      	subs	r2, r2, r3
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d105      	bne.n	8001ca0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001c94:	8a3b      	ldrh	r3, [r7, #16]
 8001c96:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	80bb      	strh	r3, [r7, #4]
					break;
 8001c9e:	e005      	b.n	8001cac <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001ca0:	7dbb      	ldrb	r3, [r7, #22]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	75bb      	strb	r3, [r7, #22]
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9b7      	bls.n	8001c1c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001cac:	8a7b      	ldrh	r3, [r7, #18]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	827b      	strh	r3, [r7, #18]
 8001cb2:	8a7a      	ldrh	r2, [r7, #18]
 8001cb4:	89bb      	ldrh	r3, [r7, #12]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d380      	bcc.n	8001bbc <lcd_ShowChar+0x8c>
 8001cba:	e000      	b.n	8001cbe <lcd_ShowChar+0x18e>
		else return;
 8001cbc:	bf00      	nop
				}
			}
		}
	}
}
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	0800b208 	.word	0x0800b208
 8001cc8:	0800b7f8 	.word	0x0800b7f8
 8001ccc:	0800c9c8 	.word	0x0800c9c8

08001cd0 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	80fb      	strh	r3, [r7, #6]
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80bb      	strh	r3, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]
 8001cea:	4613      	mov	r3, r2
 8001cec:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29c      	uxth	r4, r3
 8001cfe:	88ba      	ldrh	r2, [r7, #4]
 8001d00:	883b      	ldrh	r3, [r7, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	88b9      	ldrh	r1, [r7, #4]
 8001d0c:	88f8      	ldrh	r0, [r7, #6]
 8001d0e:	4622      	mov	r2, r4
 8001d10:	f7ff fd88 	bl	8001824 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	82fb      	strh	r3, [r7, #22]
 8001d18:	e027      	b.n	8001d6a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	82bb      	strh	r3, [r7, #20]
 8001d1e:	e01d      	b.n	8001d5c <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	3301      	adds	r3, #1
 8001d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fd48 	bl	80017e0 <LCD_WR_DATA>
			k++;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	3301      	adds	r3, #1
 8001d54:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001d56:	8abb      	ldrh	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	82bb      	strh	r3, [r7, #20]
 8001d5c:	8aba      	ldrh	r2, [r7, #20]
 8001d5e:	883b      	ldrh	r3, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3dd      	bcc.n	8001d20 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001d64:	8afb      	ldrh	r3, [r7, #22]
 8001d66:	3301      	adds	r3, #1
 8001d68:	82fb      	strh	r3, [r7, #22]
 8001d6a:	8afa      	ldrh	r2, [r7, #22]
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d3d3      	bcc.n	8001d1a <lcd_ShowPicture+0x4a>
		}
	}
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}

08001d7c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <lcd_SetDir+0x44>)
 8001d98:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d9c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <lcd_SetDir+0x44>)
 8001da0:	22f0      	movs	r2, #240	; 0xf0
 8001da2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001da4:	e006      	b.n	8001db4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <lcd_SetDir+0x44>)
 8001da8:	22f0      	movs	r2, #240	; 0xf0
 8001daa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <lcd_SetDir+0x44>)
 8001dae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001db2:	805a      	strh	r2, [r3, #2]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	200001d0 	.word	0x200001d0

08001dc4 <lcd_init>:


void lcd_init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dce:	48aa      	ldr	r0, [pc, #680]	; (8002078 <lcd_init+0x2b4>)
 8001dd0:	f004 fd98 	bl	8006904 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dd8:	f004 fa30 	bl	800623c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de2:	48a5      	ldr	r0, [pc, #660]	; (8002078 <lcd_init+0x2b4>)
 8001de4:	f004 fd8e 	bl	8006904 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001de8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dec:	f004 fa26 	bl	800623c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffc3 	bl	8001d7c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001df6:	20d3      	movs	r0, #211	; 0xd3
 8001df8:	f7ff fce2 	bl	80017c0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001dfc:	f7ff fd00 	bl	8001800 <LCD_RD_DATA>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b9d      	ldr	r3, [pc, #628]	; (800207c <lcd_init+0x2b8>)
 8001e06:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001e08:	f7ff fcfa 	bl	8001800 <LCD_RD_DATA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <lcd_init+0x2b8>)
 8001e12:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001e14:	f7ff fcf4 	bl	8001800 <LCD_RD_DATA>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b97      	ldr	r3, [pc, #604]	; (800207c <lcd_init+0x2b8>)
 8001e1e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001e20:	4b96      	ldr	r3, [pc, #600]	; (800207c <lcd_init+0x2b8>)
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b94      	ldr	r3, [pc, #592]	; (800207c <lcd_init+0x2b8>)
 8001e2a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001e2c:	f7ff fce8 	bl	8001800 <LCD_RD_DATA>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b91      	ldr	r3, [pc, #580]	; (800207c <lcd_init+0x2b8>)
 8001e36:	889b      	ldrh	r3, [r3, #4]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <lcd_init+0x2b8>)
 8001e3e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001e40:	20cf      	movs	r0, #207	; 0xcf
 8001e42:	f7ff fcbd 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fcca 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001e4c:	20c1      	movs	r0, #193	; 0xc1
 8001e4e:	f7ff fcc7 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001e52:	2030      	movs	r0, #48	; 0x30
 8001e54:	f7ff fcc4 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001e58:	20ed      	movs	r0, #237	; 0xed
 8001e5a:	f7ff fcb1 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f7ff fcbe 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f7ff fcbb 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001e6a:	2012      	movs	r0, #18
 8001e6c:	f7ff fcb8 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001e70:	2081      	movs	r0, #129	; 0x81
 8001e72:	f7ff fcb5 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001e76:	20e8      	movs	r0, #232	; 0xe8
 8001e78:	f7ff fca2 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001e7c:	2085      	movs	r0, #133	; 0x85
 8001e7e:	f7ff fcaf 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e82:	2010      	movs	r0, #16
 8001e84:	f7ff fcac 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001e88:	207a      	movs	r0, #122	; 0x7a
 8001e8a:	f7ff fca9 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001e8e:	20cb      	movs	r0, #203	; 0xcb
 8001e90:	f7ff fc96 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001e94:	2039      	movs	r0, #57	; 0x39
 8001e96:	f7ff fca3 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7ff fca0 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fc9d 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001ea6:	2034      	movs	r0, #52	; 0x34
 8001ea8:	f7ff fc9a 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7ff fc97 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001eb2:	20f7      	movs	r0, #247	; 0xf7
 8001eb4:	f7ff fc84 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001eb8:	2020      	movs	r0, #32
 8001eba:	f7ff fc91 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001ebe:	20ea      	movs	r0, #234	; 0xea
 8001ec0:	f7ff fc7e 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fc8b 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fc88 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001ed0:	20c0      	movs	r0, #192	; 0xc0
 8001ed2:	f7ff fc75 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ed6:	201b      	movs	r0, #27
 8001ed8:	f7ff fc82 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001edc:	20c1      	movs	r0, #193	; 0xc1
 8001ede:	f7ff fc6f 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7ff fc7c 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001ee8:	20c5      	movs	r0, #197	; 0xc5
 8001eea:	f7ff fc69 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001eee:	2030      	movs	r0, #48	; 0x30
 8001ef0:	f7ff fc76 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001ef4:	2030      	movs	r0, #48	; 0x30
 8001ef6:	f7ff fc73 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001efa:	20c7      	movs	r0, #199	; 0xc7
 8001efc:	f7ff fc60 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f00:	20b7      	movs	r0, #183	; 0xb7
 8001f02:	f7ff fc6d 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f06:	2036      	movs	r0, #54	; 0x36
 8001f08:	f7ff fc5a 	bl	80017c0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001f0c:	2008      	movs	r0, #8
 8001f0e:	f7ff fc67 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001f12:	203a      	movs	r0, #58	; 0x3a
 8001f14:	f7ff fc54 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001f18:	2055      	movs	r0, #85	; 0x55
 8001f1a:	f7ff fc61 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001f1e:	20b1      	movs	r0, #177	; 0xb1
 8001f20:	f7ff fc4e 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fc5b 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f2a:	201a      	movs	r0, #26
 8001f2c:	f7ff fc58 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f30:	20b6      	movs	r0, #182	; 0xb6
 8001f32:	f7ff fc45 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001f36:	200a      	movs	r0, #10
 8001f38:	f7ff fc52 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001f3c:	20a2      	movs	r0, #162	; 0xa2
 8001f3e:	f7ff fc4f 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f42:	20f2      	movs	r0, #242	; 0xf2
 8001f44:	f7ff fc3c 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fc49 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001f4e:	2026      	movs	r0, #38	; 0x26
 8001f50:	f7ff fc36 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff fc43 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001f5a:	20e0      	movs	r0, #224	; 0xe0
 8001f5c:	f7ff fc30 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001f60:	200f      	movs	r0, #15
 8001f62:	f7ff fc3d 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001f66:	202a      	movs	r0, #42	; 0x2a
 8001f68:	f7ff fc3a 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001f6c:	2028      	movs	r0, #40	; 0x28
 8001f6e:	f7ff fc37 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f72:	2008      	movs	r0, #8
 8001f74:	f7ff fc34 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001f78:	200e      	movs	r0, #14
 8001f7a:	f7ff fc31 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f7ff fc2e 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001f84:	2054      	movs	r0, #84	; 0x54
 8001f86:	f7ff fc2b 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001f8a:	20a9      	movs	r0, #169	; 0xa9
 8001f8c:	f7ff fc28 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001f90:	2043      	movs	r0, #67	; 0x43
 8001f92:	f7ff fc25 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001f96:	200a      	movs	r0, #10
 8001f98:	f7ff fc22 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	f7ff fc1f 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fc1c 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff fc19 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff fc16 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff fc13 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001fba:	20e1      	movs	r0, #225	; 0xe1
 8001fbc:	f7ff fc00 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fc0d 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001fc6:	2015      	movs	r0, #21
 8001fc8:	f7ff fc0a 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001fcc:	2017      	movs	r0, #23
 8001fce:	f7ff fc07 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f7ff fc04 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001fd8:	2011      	movs	r0, #17
 8001fda:	f7ff fc01 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001fde:	2006      	movs	r0, #6
 8001fe0:	f7ff fbfe 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001fe4:	202b      	movs	r0, #43	; 0x2b
 8001fe6:	f7ff fbfb 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001fea:	2056      	movs	r0, #86	; 0x56
 8001fec:	f7ff fbf8 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ff0:	203c      	movs	r0, #60	; 0x3c
 8001ff2:	f7ff fbf5 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ff6:	2005      	movs	r0, #5
 8001ff8:	f7ff fbf2 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff fbef 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002002:	200f      	movs	r0, #15
 8002004:	f7ff fbec 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002008:	203f      	movs	r0, #63	; 0x3f
 800200a:	f7ff fbe9 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800200e:	203f      	movs	r0, #63	; 0x3f
 8002010:	f7ff fbe6 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002014:	200f      	movs	r0, #15
 8002016:	f7ff fbe3 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800201a:	202b      	movs	r0, #43	; 0x2b
 800201c:	f7ff fbd0 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fbdd 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fbda 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fbd7 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002032:	203f      	movs	r0, #63	; 0x3f
 8002034:	f7ff fbd4 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002038:	202a      	movs	r0, #42	; 0x2a
 800203a:	f7ff fbc1 	bl	80017c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fbce 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fbcb 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff fbc8 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002050:	20ef      	movs	r0, #239	; 0xef
 8002052:	f7ff fbc5 	bl	80017e0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002056:	2011      	movs	r0, #17
 8002058:	f7ff fbb2 	bl	80017c0 <LCD_WR_REG>
	HAL_Delay(120);
 800205c:	2078      	movs	r0, #120	; 0x78
 800205e:	f004 f8ed 	bl	800623c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002062:	2029      	movs	r0, #41	; 0x29
 8002064:	f7ff fbac 	bl	80017c0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206e:	4804      	ldr	r0, [pc, #16]	; (8002080 <lcd_init+0x2bc>)
 8002070:	f004 fc48 	bl	8006904 <HAL_GPIO_WritePin>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020800 	.word	0x40020800
 800207c:	200001d0 	.word	0x200001d0
 8002080:	40020000 	.word	0x40020000

08002084 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af04      	add	r7, sp, #16
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	461a      	mov	r2, r3
 800208e:	4603      	mov	r3, r0
 8002090:	81fb      	strh	r3, [r7, #14]
 8002092:	460b      	mov	r3, r1
 8002094:	81bb      	strh	r3, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80020a2:	e048      	b.n	8002136 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d145      	bne.n	8002136 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020aa:	89fa      	ldrh	r2, [r7, #14]
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <lcd_ShowStr+0xc4>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	429a      	cmp	r2, r3
 80020be:	dc3f      	bgt.n	8002140 <lcd_ShowStr+0xbc>
 80020c0:	89ba      	ldrh	r2, [r7, #12]
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <lcd_ShowStr+0xc4>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	4619      	mov	r1, r3
 80020c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020cc:	1acb      	subs	r3, r1, r3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dc36      	bgt.n	8002140 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b80      	cmp	r3, #128	; 0x80
 80020d8:	d902      	bls.n	80020e0 <lcd_ShowStr+0x5c>
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
 80020de:	e02a      	b.n	8002136 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b0d      	cmp	r3, #13
 80020e6:	d10b      	bne.n	8002100 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80020e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80020f4:	8abb      	ldrh	r3, [r7, #20]
 80020f6:	81fb      	strh	r3, [r7, #14]
					str++;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	e017      	b.n	8002130 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	88fc      	ldrh	r4, [r7, #6]
 8002106:	89b9      	ldrh	r1, [r7, #12]
 8002108:	89f8      	ldrh	r0, [r7, #14]
 800210a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	4623      	mov	r3, r4
 800211c:	f7ff fd08 	bl	8001b30 <lcd_ShowChar>
					x+=sizey/2;
 8002120:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	4413      	add	r3, r2
 800212e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1b2      	bne.n	80020a4 <lcd_ShowStr+0x20>
 800213e:	e000      	b.n	8002142 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002140:	bf00      	nop
			}
		}
	}
}
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	200001d0 	.word	0x200001d0

0800214c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af04      	add	r7, sp, #16
 8002152:	60ba      	str	r2, [r7, #8]
 8002154:	461a      	mov	r2, r3
 8002156:	4603      	mov	r3, r0
 8002158:	81fb      	strh	r3, [r7, #14]
 800215a:	460b      	mov	r3, r1
 800215c:	81bb      	strh	r3, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002162:	68b8      	ldr	r0, [r7, #8]
 8002164:	f7fe f834 	bl	80001d0 <strlen>
 8002168:	4603      	mov	r3, r0
 800216a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <lcd_StrCenter+0x60>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	8afb      	ldrh	r3, [r7, #22]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	0fda      	lsrs	r2, r3, #31
 800217a:	4413      	add	r3, r2
 800217c:	105b      	asrs	r3, r3, #1
 800217e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002180:	89fa      	ldrh	r2, [r7, #14]
 8002182:	8abb      	ldrh	r3, [r7, #20]
 8002184:	4413      	add	r3, r2
 8002186:	b298      	uxth	r0, r3
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	89b9      	ldrh	r1, [r7, #12]
 800218c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	8c3b      	ldrh	r3, [r7, #32]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f7ff ff70 	bl	8002084 <lcd_ShowStr>
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200001d0 	.word	0x200001d0

080021b0 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <led7_init+0x14>)
 80021ba:	f004 fba3 	bl	8006904 <HAL_GPIO_WritePin>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021800 	.word	0x40021800

080021c8 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <led7_Scan+0x104>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <led7_Scan+0x104>)
 80021d6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80021d8:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <led7_Scan+0x108>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <led7_Scan+0x10c>)
 80021e0:	5c9b      	ldrb	r3, [r3, r2]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <led7_Scan+0x104>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <led7_Scan+0x104>)
 80021f4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <led7_Scan+0x108>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d846      	bhi.n	800228c <led7_Scan+0xc4>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <led7_Scan+0x3c>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002215 	.word	0x08002215
 8002208:	08002233 	.word	0x08002233
 800220c:	08002251 	.word	0x08002251
 8002210:	0800226f 	.word	0x0800226f
	case 0:
		spi_buffer |= 0x00b0;
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <led7_Scan+0x104>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <led7_Scan+0x104>)
 8002220:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <led7_Scan+0x104>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <led7_Scan+0x104>)
 800222e:	801a      	strh	r2, [r3, #0]
		break;
 8002230:	e02d      	b.n	800228e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <led7_Scan+0x104>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <led7_Scan+0x104>)
 800223e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <led7_Scan+0x104>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	f023 0320 	bic.w	r3, r3, #32
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <led7_Scan+0x104>)
 800224c:	801a      	strh	r2, [r3, #0]
		break;
 800224e:	e01e      	b.n	800228e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <led7_Scan+0x104>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <led7_Scan+0x104>)
 800225c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <led7_Scan+0x104>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	f023 0310 	bic.w	r3, r3, #16
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <led7_Scan+0x104>)
 800226a:	801a      	strh	r2, [r3, #0]
		break;
 800226c:	e00f      	b.n	800228e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <led7_Scan+0x104>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <led7_Scan+0x104>)
 800227a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <led7_Scan+0x104>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <led7_Scan+0x104>)
 8002288:	801a      	strh	r2, [r3, #0]
		break;
 800228a:	e000      	b.n	800228e <led7_Scan+0xc6>
	default:
		break;
 800228c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <led7_Scan+0x108>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	425a      	negs	r2, r3
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	bf58      	it	pl
 80022a0:	4253      	negpl	r3, r2
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <led7_Scan+0x108>)
 80022a6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	480a      	ldr	r0, [pc, #40]	; (80022d8 <led7_Scan+0x110>)
 80022ae:	f004 fb29 	bl	8006904 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80022b2:	2301      	movs	r3, #1
 80022b4:	2202      	movs	r2, #2
 80022b6:	4905      	ldr	r1, [pc, #20]	; (80022cc <led7_Scan+0x104>)
 80022b8:	4808      	ldr	r0, [pc, #32]	; (80022dc <led7_Scan+0x114>)
 80022ba:	f005 f85e 	bl	800737a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022be:	2201      	movs	r2, #1
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <led7_Scan+0x110>)
 80022c4:	f004 fb1e 	bl	8006904 <HAL_GPIO_WritePin>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000092 	.word	0x20000092
 80022d0:	200001d6 	.word	0x200001d6
 80022d4:	20000084 	.word	0x20000084
 80022d8:	40021800 	.word	0x40021800
 80022dc:	2000294c 	.word	0x2000294c

080022e0 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0e      	blt.n	8002312 <led7_SetDigit+0x32>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	dc0b      	bgt.n	8002312 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <led7_SetDigit+0x40>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	b2d9      	uxtb	r1, r3
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <led7_SetDigit+0x44>)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	460a      	mov	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
	}
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000088 	.word	0x20000088
 8002324:	20000084 	.word	0x20000084

08002328 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <led7_SetColon+0x20>
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <led7_SetColon+0x3c>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f023 0308 	bic.w	r3, r3, #8
 8002340:	b29a      	uxth	r2, r3
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <led7_SetColon+0x3c>)
 8002344:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002346:	e006      	b.n	8002356 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <led7_SetColon+0x3c>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	b29a      	uxth	r2, r3
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <led7_SetColon+0x3c>)
 8002354:	801a      	strh	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000092 	.word	0x20000092

08002368 <lightProcess>:
#include "light_control.h"
#include "uart.h"

uint8_t light_status = 0;

void lightProcess(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <lightProcess+0x58>)
 800236e:	8b5b      	ldrh	r3, [r3, #26]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d113      	bne.n	800239c <lightProcess+0x34>
		light_status = 1 - light_status;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <lightProcess+0x5c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f1c3 0301 	rsb	r3, r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <lightProcess+0x5c>)
 8002380:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <lightProcess+0x5c>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d104      	bne.n	8002394 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 800238a:	2101      	movs	r1, #1
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <lightProcess+0x60>)
 800238e:	f003 fde9 	bl	8005f64 <uart_EspSendBytes>
 8002392:	e003      	b.n	800239c <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8002394:	2101      	movs	r1, #1
 8002396:	480d      	ldr	r0, [pc, #52]	; (80023cc <lightProcess+0x64>)
 8002398:	f003 fde4 	bl	8005f64 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <lightProcess+0x5c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2120      	movs	r1, #32
 80023a8:	4809      	ldr	r0, [pc, #36]	; (80023d0 <lightProcess+0x68>)
 80023aa:	f004 faab 	bl	8006904 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 80023ae:	e004      	b.n	80023ba <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2120      	movs	r1, #32
 80023b4:	4806      	ldr	r0, [pc, #24]	; (80023d0 <lightProcess+0x68>)
 80023b6:	f004 faa5 	bl	8006904 <HAL_GPIO_WritePin>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000012c 	.word	0x2000012c
 80023c4:	200001d8 	.word	0x200001d8
 80023c8:	0800b03c 	.word	0x0800b03c
 80023cc:	0800b040 	.word	0x0800b040
 80023d0:	40021000 	.word	0x40021000

080023d4 <test_Esp>:

void test_Esp(){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	if(uart_EspCheck() == 0)
 80023d8:	f003 fe0a 	bl	8005ff0 <uart_EspCheck>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <test_Esp+0x16>
	{
		uart_EspSendBytes("o", 1);
 80023e2:	2101      	movs	r1, #1
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <test_Esp+0x1c>)
 80023e6:	f003 fdbd 	bl	8005f64 <uart_EspSendBytes>
	}
//	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	0800b044 	.word	0x0800b044

080023f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f8:	f003 feae 	bl	8006158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023fc:	f000 f892 	bl	8002524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002400:	f7ff f8c0 	bl	8001584 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002404:	f003 fba4 	bl	8005b50 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002408:	f002 f960 	bl	80046cc <MX_SPI1_Init>
  MX_FSMC_Init();
 800240c:	f7fe fd24 	bl	8000e58 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8002410:	f003 fdfe 	bl	8006010 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002414:	f000 f8f0 	bl	80025f8 <system_init>
  lcd_Clear(WHITE);
 8002418:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800241c:	f7ff fa4e 	bl	80018bc <lcd_Clear>
  test_lcd();
 8002420:	f000 f914 	bl	800264c <test_lcd>
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {

    // lcd_Clear(WHITE);
	   if (flagForButton)
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <main+0x10c>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <main+0x4e>
	   {
		   flagForButton= 0;
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <main+0x10c>)
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 8002432:	f7fe fa85 	bl	8000940 <button_Scan>
		   test_Esp();
 8002436:	f7ff ffcd 	bl	80023d4 <test_Esp>
		  lightProcess();
 800243a:	f7ff ff95 	bl	8002368 <lightProcess>
		   beginStartGame();
 800243e:	f002 fd0d 	bl	8004e5c <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <main+0x110>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d007      	beq.n	800245a <main+0x66>
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <main+0x110>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b04      	cmp	r3, #4
 8002450:	d003      	beq.n	800245a <main+0x66>
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <main+0x110>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b05      	cmp	r3, #5
 8002458:	d118      	bne.n	800248c <main+0x98>
	   {
		   generateFruit();
 800245a:	f001 fbf9 	bl	8003c50 <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <main+0x110>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d108      	bne.n	8002478 <main+0x84>
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <main+0x114>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <main+0x84>
		   {
			   generateWall();
 800246e:	f001 fd13 	bl	8003e98 <generateWall>
			   flagForGenerateWall = 0;
 8002472:	4b25      	ldr	r3, [pc, #148]	; (8002508 <main+0x114>)
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <main+0x118>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <main+0x9e>
		   {
			   flagForSnakeRun= 0;
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <main+0x118>)
 8002482:	2200      	movs	r2, #0
 8002484:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 8002486:	f001 fab7 	bl	80039f8 <snakeRun>
		   if (flagForSnakeRun)
 800248a:	e002      	b.n	8002492 <main+0x9e>
		   }
	  }else{
		  flagForSnakeRun = 0;
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <main+0x118>)
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <main+0x110>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b07      	cmp	r3, #7
 8002498:	d104      	bne.n	80024a4 <main+0xb0>
	  {
		  pickOver(OVERMESSAGE);
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <main+0x11c>)
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f808 	bl	80014b4 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <main+0x110>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b06      	cmp	r3, #6
 80024aa:	d101      	bne.n	80024b0 <main+0xbc>
	  {
		  pickStop();
 80024ac:	f003 fa10 	bl	80058d0 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <main+0x110>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b0a      	cmp	r3, #10
 80024b6:	d101      	bne.n	80024bc <main+0xc8>
	  {
		  askToExit();
 80024b8:	f7fe fc86 	bl	8000dc8 <askToExit>
	  }
	  if(flagForTiming == 1)
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <main+0x120>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10b      	bne.n	80024dc <main+0xe8>
	  {
		  flagForTiming = 0;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <main+0x120>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <main+0x110>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
		  initOverMode(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff f831 	bl	8001538 <initOverMode>
		  arrowMode = NORMALMODE;
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <main+0x124>)
 80024d8:	2203      	movs	r2, #3
 80024da:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <main+0x128>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d19f      	bne.n	8002424 <main+0x30>
	  {
		  TIMING--;
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <main+0x12c>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <main+0x12c>)
 80024ee:	801a      	strh	r2, [r3, #0]
		  showTiming();
 80024f0:	f003 fcb6 	bl	8005e60 <showTiming>
		  setTimerDeTime(1000);
 80024f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f8:	f002 f80a 	bl	8004510 <setTimerDeTime>
	   if (flagForButton)
 80024fc:	e792      	b.n	8002424 <main+0x30>
 80024fe:	bf00      	nop
 8002500:	20002928 	.word	0x20002928
 8002504:	200001b8 	.word	0x200001b8
 8002508:	20002946 	.word	0x20002946
 800250c:	2000292e 	.word	0x2000292e
 8002510:	200001ce 	.word	0x200001ce
 8002514:	20002934 	.word	0x20002934
 8002518:	20000014 	.word	0x20000014
 800251c:	20002940 	.word	0x20002940
 8002520:	20000000 	.word	0x20000000

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b094      	sub	sp, #80	; 0x50
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	2230      	movs	r2, #48	; 0x30
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f007 fa84 	bl	8009a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <SystemClock_Config+0xcc>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <SystemClock_Config+0xcc>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002556:	6413      	str	r3, [r2, #64]	; 0x40
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <SystemClock_Config+0xcc>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <SystemClock_Config+0xd0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <SystemClock_Config+0xd0>)
 800256e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <SystemClock_Config+0xd0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002588:	2310      	movs	r3, #16
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258c:	2302      	movs	r3, #2
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002590:	2300      	movs	r3, #0
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002594:	2308      	movs	r3, #8
 8002596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002598:	23a8      	movs	r3, #168	; 0xa8
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800259c:	2302      	movs	r3, #2
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025a0:	2304      	movs	r3, #4
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	4618      	mov	r0, r3
 80025aa:	f004 f9c5 	bl	8006938 <HAL_RCC_OscConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025b4:	f000 f868 	bl	8002688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b8:	230f      	movs	r3, #15
 80025ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2302      	movs	r3, #2
 80025be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80025ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	2105      	movs	r1, #5
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fc26 	bl	8006e28 <HAL_RCC_ClockConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025e2:	f000 f851 	bl	8002688 <Error_Handler>
  }
}
 80025e6:	bf00      	nop
 80025e8:	3750      	adds	r7, #80	; 0x50
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000

080025f8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2120      	movs	r1, #32
 8002600:	4811      	ldr	r0, [pc, #68]	; (8002648 <system_init+0x50>)
 8002602:	f004 f97f 	bl	8006904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	480f      	ldr	r0, [pc, #60]	; (8002648 <system_init+0x50>)
 800260c:	f004 f97a 	bl	8006904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2110      	movs	r1, #16
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <system_init+0x50>)
 8002616:	f004 f975 	bl	8006904 <HAL_GPIO_WritePin>
	  timer_init();
 800261a:	f001 ff33 	bl	8004484 <timer_init>
	  led7_init();
 800261e:	f7ff fdc7 	bl	80021b0 <led7_init>
	  button_init();
 8002622:	f7fe f981 	bl	8000928 <button_init>
	  lcd_init();
 8002626:	f7ff fbcd 	bl	8001dc4 <lcd_init>
	  uart_init_esp();
 800262a:	f003 fc85 	bl	8005f38 <uart_init_esp>
	  setTimerButton(50);
 800262e:	2032      	movs	r0, #50	; 0x32
 8002630:	f001 ffa6 	bl	8004580 <setTimerButton>
	  setTimerSnakeRun(300);
 8002634:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002638:	f001 ff2e 	bl	8004498 <setTimerSnakeRun>
	  setTimerGenerateWall(2000);
 800263c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002640:	f001 ff82 	bl	8004548 <setTimerGenerateWall>
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 8002652:	231f      	movs	r3, #31
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	231d      	movs	r3, #29
 8002658:	221d      	movs	r2, #29
 800265a:	2113      	movs	r1, #19
 800265c:	2013      	movs	r0, #19
 800265e:	f7ff f95f 	bl	8001920 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 8002662:	2301      	movs	r3, #1
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	2310      	movs	r3, #16
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	231f      	movs	r3, #31
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <test_lcd+0x38>)
 8002674:	2164      	movs	r1, #100	; 0x64
 8002676:	2000      	movs	r0, #0
 8002678:	f7ff fd68 	bl	800214c <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	0800b048 	.word	0x0800b048

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002690:	e7fe      	b.n	8002690 <Error_Handler+0x8>
	...

08002694 <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b090      	sub	sp, #64	; 0x40
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	f107 000c 	add.w	r0, r7, #12
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <convert2str+0x2c>)
 80026a6:	2132      	movs	r1, #50	; 0x32
 80026a8:	f007 fa3e 	bl	8009b28 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 fa7d 	bl	8009bb0 <strdup>
 80026b6:	4603      	mov	r3, r0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3740      	adds	r7, #64	; 0x40
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	0800b058 	.word	0x0800b058

080026c4 <lcdDrawWall>:

void lcdDrawWall()
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <lcdDrawWall+0x3c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b298      	uxth	r0, r3
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <lcdDrawWall+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b299      	uxth	r1, r3
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <lcdDrawWall+0x3c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	b29c      	uxth	r4, r3
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <lcdDrawWall+0x40>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <lcdDrawWall+0x44>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	9200      	str	r2, [sp, #0]
 80026f0:	4622      	mov	r2, r4
 80026f2:	f7ff f915 	bl	8001920 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 80026f6:	bf00      	nop
 80026f8:	3704      	adds	r7, #4
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000018 	.word	0x20000018
 8002704:	20000028 	.word	0x20000028
 8002708:	20000038 	.word	0x20000038

0800270c <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b0a3      	sub	sp, #140	; 0x8c
 8002710:	af04      	add	r7, sp, #16
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	80fb      	strh	r3, [r7, #6]
 8002718:	4613      	mov	r3, r2
 800271a:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 800271c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002720:	f7ff f8cc 	bl	80018bc <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002724:	4b45      	ldr	r3, [pc, #276]	; (800283c <setUpLcdNormalPlay+0x130>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b45      	ldr	r3, [pc, #276]	; (8002840 <setUpLcdNormalPlay+0x134>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	211f      	movs	r1, #31
 8002732:	9100      	str	r1, [sp, #0]
 8002734:	2100      	movs	r1, #0
 8002736:	2000      	movs	r0, #0
 8002738:	f7ff f8f2 	bl	8001920 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 800273c:	2301      	movs	r3, #1
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	2310      	movs	r3, #16
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	231f      	movs	r3, #31
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800274c:	4a3d      	ldr	r2, [pc, #244]	; (8002844 <setUpLcdNormalPlay+0x138>)
 800274e:	2105      	movs	r1, #5
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff fc97 	bl	8002084 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002756:	4a3c      	ldr	r2, [pc, #240]	; (8002848 <setUpLcdNormalPlay+0x13c>)
 8002758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	3304      	adds	r3, #4
 8002764:	7019      	strb	r1, [r3, #0]
 8002766:	f107 0341 	add.w	r3, r7, #65	; 0x41
 800276a:	222d      	movs	r2, #45	; 0x2d
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f007 f966 	bl	8009a40 <memset>
	char *str2 = convert2str(ID);
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <setUpLcdNormalPlay+0x140>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff8b 	bl	8002694 <convert2str>
 800277e:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 8002780:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002784:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002786:	4618      	mov	r0, r3
 8002788:	f007 fa02 	bl	8009b90 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 800278c:	4b30      	ldr	r3, [pc, #192]	; (8002850 <setUpLcdNormalPlay+0x144>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b298      	uxth	r0, r3
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <setUpLcdNormalPlay+0x148>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b299      	uxth	r1, r3
 8002798:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800279c:	2301      	movs	r3, #1
 800279e:	9302      	str	r3, [sp, #8]
 80027a0:	2310      	movs	r3, #16
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027ae:	f7ff fc69 	bl	8002084 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <setUpLcdNormalPlay+0x14c>)
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	222a      	movs	r2, #42	; 0x2a
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f007 f939 	bl	8009a40 <memset>
	char *str4 = convert2str(SCORE);
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <setUpLcdNormalPlay+0x150>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff5e 	bl	8002694 <convert2str>
 80027d8:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80027e0:	4618      	mov	r0, r3
 80027e2:	f007 f9d5 	bl	8009b90 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <setUpLcdNormalPlay+0x154>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b298      	uxth	r0, r3
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <setUpLcdNormalPlay+0x158>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3305      	adds	r3, #5
 80027f4:	b299      	uxth	r1, r3
 80027f6:	f107 0208 	add.w	r2, r7, #8
 80027fa:	2300      	movs	r3, #0
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2310      	movs	r3, #16
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	231f      	movs	r3, #31
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800280a:	f7ff fc3b 	bl	8002084 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <setUpLcdNormalPlay+0x15c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b298      	uxth	r0, r3
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <setUpLcdNormalPlay+0x160>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b299      	uxth	r1, r3
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <setUpLcdNormalPlay+0x164>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <setUpLcdNormalPlay+0x168>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4c14      	ldr	r4, [pc, #80]	; (8002878 <setUpLcdNormalPlay+0x16c>)
 8002828:	9400      	str	r4, [sp, #0]
 800282a:	f7ff fa51 	bl	8001cd0 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 800282e:	f7ff ff49 	bl	80026c4 <lcdDrawWall>
}
 8002832:	bf00      	nop
 8002834:	377c      	adds	r7, #124	; 0x7c
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	20000018 	.word	0x20000018
 8002840:	20000028 	.word	0x20000028
 8002844:	0800b05c 	.word	0x0800b05c
 8002848:	0800b06c 	.word	0x0800b06c
 800284c:	200001a4 	.word	0x200001a4
 8002850:	20000064 	.word	0x20000064
 8002854:	20000068 	.word	0x20000068
 8002858:	0800b0a0 	.word	0x0800b0a0
 800285c:	200001a6 	.word	0x200001a6
 8002860:	2000006c 	.word	0x2000006c
 8002864:	20000070 	.word	0x20000070
 8002868:	20000074 	.word	0x20000074
 800286c:	20000078 	.word	0x20000078
 8002870:	2000007c 	.word	0x2000007c
 8002874:	20000080 	.word	0x20000080
 8002878:	0800e188 	.word	0x0800e188

0800287c <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b0a3      	sub	sp, #140	; 0x8c
 8002880:	af04      	add	r7, sp, #16
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	80fb      	strh	r3, [r7, #6]
 8002888:	4613      	mov	r3, r2
 800288a:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 800288c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002890:	f7ff f814 	bl	80018bc <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002894:	4b44      	ldr	r3, [pc, #272]	; (80029a8 <setUpLcdTimingPlay+0x12c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <setUpLcdTimingPlay+0x130>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	211f      	movs	r1, #31
 80028a2:	9100      	str	r1, [sp, #0]
 80028a4:	2100      	movs	r1, #0
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff f83a 	bl	8001920 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 80028ac:	2301      	movs	r3, #1
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2310      	movs	r3, #16
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	231f      	movs	r3, #31
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028bc:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <setUpLcdTimingPlay+0x134>)
 80028be:	2105      	movs	r1, #5
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff fbdf 	bl	8002084 <lcd_ShowStr>

	char str1[50] = "ID: ";
 80028c6:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <setUpLcdTimingPlay+0x138>)
 80028c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028d0:	6018      	str	r0, [r3, #0]
 80028d2:	3304      	adds	r3, #4
 80028d4:	7019      	strb	r1, [r3, #0]
 80028d6:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80028da:	222d      	movs	r2, #45	; 0x2d
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f007 f8ae 	bl	8009a40 <memset>
	char *str2 = convert2str(ID);
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <setUpLcdTimingPlay+0x13c>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fed3 	bl	8002694 <convert2str>
 80028ee:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 80028f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80028f6:	4618      	mov	r0, r3
 80028f8:	f007 f94a 	bl	8009b90 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <setUpLcdTimingPlay+0x140>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b298      	uxth	r0, r3
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <setUpLcdTimingPlay+0x144>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b299      	uxth	r1, r3
 8002908:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800290c:	2301      	movs	r3, #1
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	2310      	movs	r3, #16
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800291e:	f7ff fbb1 	bl	8002084 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002922:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <setUpLcdTimingPlay+0x148>)
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800292c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002930:	f107 0310 	add.w	r3, r7, #16
 8002934:	222a      	movs	r2, #42	; 0x2a
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f007 f881 	bl	8009a40 <memset>
	char *str4 = convert2str(0);
 800293e:	2000      	movs	r0, #0
 8002940:	f7ff fea8 	bl	8002694 <convert2str>
 8002944:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800294c:	4618      	mov	r0, r3
 800294e:	f007 f91f 	bl	8009b90 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <setUpLcdTimingPlay+0x14c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b298      	uxth	r0, r3
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <setUpLcdTimingPlay+0x150>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b299      	uxth	r1, r3
 800295e:	f107 0208 	add.w	r2, r7, #8
 8002962:	2301      	movs	r3, #1
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	2310      	movs	r3, #16
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002974:	f7ff fb86 	bl	8002084 <lcd_ShowStr>

	showTiming();
 8002978:	f003 fa72 	bl	8005e60 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <setUpLcdTimingPlay+0x154>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b298      	uxth	r0, r3
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <setUpLcdTimingPlay+0x158>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b299      	uxth	r1, r3
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <setUpLcdTimingPlay+0x15c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b29a      	uxth	r2, r3
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <setUpLcdTimingPlay+0x160>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	4c12      	ldr	r4, [pc, #72]	; (80029e0 <setUpLcdTimingPlay+0x164>)
 8002996:	9400      	str	r4, [sp, #0]
 8002998:	f7ff f99a 	bl	8001cd0 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 800299c:	f7ff fe92 	bl	80026c4 <lcdDrawWall>
}
 80029a0:	bf00      	nop
 80029a2:	377c      	adds	r7, #124	; 0x7c
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	20000018 	.word	0x20000018
 80029ac:	20000028 	.word	0x20000028
 80029b0:	0800b0d4 	.word	0x0800b0d4
 80029b4:	0800b06c 	.word	0x0800b06c
 80029b8:	200001a4 	.word	0x200001a4
 80029bc:	20000064 	.word	0x20000064
 80029c0:	20000068 	.word	0x20000068
 80029c4:	0800b0a0 	.word	0x0800b0a0
 80029c8:	2000006c 	.word	0x2000006c
 80029cc:	20000070 	.word	0x20000070
 80029d0:	20000074 	.word	0x20000074
 80029d4:	20000078 	.word	0x20000078
 80029d8:	2000007c 	.word	0x2000007c
 80029dc:	20000080 	.word	0x20000080
 80029e0:	0800e188 	.word	0x0800e188

080029e4 <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b0a3      	sub	sp, #140	; 0x8c
 80029e8:	af04      	add	r7, sp, #16
 80029ea:	4603      	mov	r3, r0
 80029ec:	460a      	mov	r2, r1
 80029ee:	80fb      	strh	r3, [r7, #6]
 80029f0:	4613      	mov	r3, r2
 80029f2:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80029f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029f8:	f7fe ff60 	bl	80018bc <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80029fc:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <setUpLcdAdvancePlay+0x12c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <setUpLcdAdvancePlay+0x130>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	211f      	movs	r1, #31
 8002a0a:	9100      	str	r1, [sp, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe ff86 	bl	8001920 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 8002a14:	2301      	movs	r3, #1
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	2310      	movs	r3, #16
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	231f      	movs	r3, #31
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a24:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <setUpLcdAdvancePlay+0x134>)
 8002a26:	2105      	movs	r1, #5
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fb2b 	bl	8002084 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <setUpLcdAdvancePlay+0x138>)
 8002a30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a38:	6018      	str	r0, [r3, #0]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	7019      	strb	r1, [r3, #0]
 8002a3e:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002a42:	222d      	movs	r2, #45	; 0x2d
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 fffa 	bl	8009a40 <memset>
	char *str2 = convert2str(ID);
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <setUpLcdAdvancePlay+0x13c>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe1f 	bl	8002694 <convert2str>
 8002a56:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002a58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f007 f896 	bl	8009b90 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002a64:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <setUpLcdAdvancePlay+0x140>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b298      	uxth	r0, r3
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <setUpLcdAdvancePlay+0x144>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b299      	uxth	r1, r3
 8002a70:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a74:	2301      	movs	r3, #1
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	2310      	movs	r3, #16
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a86:	f7ff fafd 	bl	8002084 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002a8a:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <setUpLcdAdvancePlay+0x148>)
 8002a8c:	f107 0308 	add.w	r3, r7, #8
 8002a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a94:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	222a      	movs	r2, #42	; 0x2a
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f006 ffcd 	bl	8009a40 <memset>
	char *str4 = convert2str(0);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fdf4 	bl	8002694 <convert2str>
 8002aac:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f007 f86b 	bl	8009b90 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <setUpLcdAdvancePlay+0x14c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b298      	uxth	r0, r3
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <setUpLcdAdvancePlay+0x150>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b299      	uxth	r1, r3
 8002ac6:	f107 0208 	add.w	r2, r7, #8
 8002aca:	2301      	movs	r3, #1
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2310      	movs	r3, #16
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002adc:	f7ff fad2 	bl	8002084 <lcd_ShowStr>

	showTiming();
 8002ae0:	f003 f9be 	bl	8005e60 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <setUpLcdAdvancePlay+0x154>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b298      	uxth	r0, r3
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <setUpLcdAdvancePlay+0x158>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b299      	uxth	r1, r3
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <setUpLcdAdvancePlay+0x15c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <setUpLcdAdvancePlay+0x160>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4c12      	ldr	r4, [pc, #72]	; (8002b48 <setUpLcdAdvancePlay+0x164>)
 8002afe:	9400      	str	r4, [sp, #0]
 8002b00:	f7ff f8e6 	bl	8001cd0 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002b04:	f7ff fdde 	bl	80026c4 <lcdDrawWall>
}
 8002b08:	bf00      	nop
 8002b0a:	377c      	adds	r7, #124	; 0x7c
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	20000018 	.word	0x20000018
 8002b14:	20000028 	.word	0x20000028
 8002b18:	0800b0e4 	.word	0x0800b0e4
 8002b1c:	0800b06c 	.word	0x0800b06c
 8002b20:	200001a4 	.word	0x200001a4
 8002b24:	20000064 	.word	0x20000064
 8002b28:	20000068 	.word	0x20000068
 8002b2c:	0800b0a0 	.word	0x0800b0a0
 8002b30:	2000006c 	.word	0x2000006c
 8002b34:	20000070 	.word	0x20000070
 8002b38:	20000074 	.word	0x20000074
 8002b3c:	20000078 	.word	0x20000078
 8002b40:	2000007c 	.word	0x2000007c
 8002b44:	20000080 	.word	0x20000080
 8002b48:	0800e188 	.word	0x0800e188

08002b4c <printScore>:

void printScore()
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b094      	sub	sp, #80	; 0x50
 8002b50:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <printScore+0xd4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d12a      	bne.n	8002bb0 <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 8002b5a:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <printScore+0xd8>)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b62:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	222a      	movs	r2, #42	; 0x2a
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f006 ff66 	bl	8009a40 <memset>
		char *str4 = convert2str(SCORE);
 8002b74:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <printScore+0xdc>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fd8b 	bl	8002694 <convert2str>
 8002b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b84:	4618      	mov	r0, r3
 8002b86:	f007 f803 	bl	8009b90 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 24, 0);
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <printScore+0xe0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b298      	uxth	r0, r3
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <printScore+0xe4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3305      	adds	r3, #5
 8002b98:	b299      	uxth	r1, r3
 8002b9a:	1d3a      	adds	r2, r7, #4
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	2318      	movs	r3, #24
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bac:	f7ff fa6a 	bl	8002084 <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <printScore+0xd4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d003      	beq.n	8002bc0 <printScore+0x74>
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <printScore+0xd4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d12a      	bne.n	8002c16 <printScore+0xca>
	{
		char str3[50] = "SCORE: ";
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <printScore+0xd8>)
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	222a      	movs	r2, #42	; 0x2a
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f006 ff33 	bl	8009a40 <memset>
		char *str4 = convert2str(SCORE);
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <printScore+0xdc>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fd58 	bl	8002694 <convert2str>
 8002be4:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bea:	4618      	mov	r0, r3
 8002bec:	f006 ffd0 	bl	8009b90 <strcat>
		lcd_ShowStr(scoreX, scoreY, str3, RED, BLUE, 16, 0);
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <printScore+0xe0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	b298      	uxth	r0, r3
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <printScore+0xe4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	1d3a      	adds	r2, r7, #4
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	2310      	movs	r3, #16
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	231f      	movs	r3, #31
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c0e:	f7ff fa39 	bl	8002084 <lcd_ShowStr>

		showTiming();
 8002c12:	f003 f925 	bl	8005e60 <showTiming>
	}
}
 8002c16:	bf00      	nop
 8002c18:	3740      	adds	r7, #64	; 0x40
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200001b8 	.word	0x200001b8
 8002c24:	0800b0a0 	.word	0x0800b0a0
 8002c28:	200001a6 	.word	0x200001a6
 8002c2c:	2000006c 	.word	0x2000006c
 8002c30:	20000070 	.word	0x20000070

08002c34 <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 8002c3a:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <drawHeadSnake+0x244>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	f200 8114 	bhi.w	8002e6c <drawHeadSnake+0x238>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <drawHeadSnake+0x18>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002de5 	.word	0x08002de5
 8002c50:	08002d65 	.word	0x08002d65
 8002c54:	08002cdd 	.word	0x08002cdd
 8002c58:	08002c5d 	.word	0x08002c5d
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c5c:	4b86      	ldr	r3, [pc, #536]	; (8002e78 <drawHeadSnake+0x244>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	b298      	uxth	r0, r3
 8002c62:	4b85      	ldr	r3, [pc, #532]	; (8002e78 <drawHeadSnake+0x244>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002c68:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <drawHeadSnake+0x244>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3309      	adds	r3, #9
 8002c70:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <drawHeadSnake+0x244>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3309      	adds	r3, #9
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002c80:	9400      	str	r4, [sp, #0]
 8002c82:	f7fe fe4d 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c86:	4b7c      	ldr	r3, [pc, #496]	; (8002e78 <drawHeadSnake+0x244>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	b298      	uxth	r0, r3
 8002c8c:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <drawHeadSnake+0x244>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002c92:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <drawHeadSnake+0x244>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3304      	adds	r3, #4
 8002c9a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002c9c:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <drawHeadSnake+0x244>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	9400      	str	r4, [sp, #0]
 8002caa:	f7fe fe39 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <drawHeadSnake+0x244>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3305      	adds	r3, #5
 8002cb6:	b298      	uxth	r0, r3
 8002cb8:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <drawHeadSnake+0x244>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002cbe:	4b6e      	ldr	r3, [pc, #440]	; (8002e78 <drawHeadSnake+0x244>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3309      	adds	r3, #9
 8002cc6:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002cc8:	4b6b      	ldr	r3, [pc, #428]	; (8002e78 <drawHeadSnake+0x244>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3304      	adds	r3, #4
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	9400      	str	r4, [sp, #0]
 8002cd6:	f7fe fe23 	bl	8001920 <lcd_Fill>
		break;
 8002cda:	e0c8      	b.n	8002e6e <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002cdc:	4b66      	ldr	r3, [pc, #408]	; (8002e78 <drawHeadSnake+0x244>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	b298      	uxth	r0, r3
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <drawHeadSnake+0x244>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002ce8:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <drawHeadSnake+0x244>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3309      	adds	r3, #9
 8002cf0:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002cf2:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <drawHeadSnake+0x244>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3309      	adds	r3, #9
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002d00:	9400      	str	r4, [sp, #0]
 8002d02:	f7fe fe0d 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002d06:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <drawHeadSnake+0x244>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	b298      	uxth	r0, r3
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <drawHeadSnake+0x244>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3305      	adds	r3, #5
 8002d14:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002d16:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <drawHeadSnake+0x244>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002d20:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <drawHeadSnake+0x244>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3309      	adds	r3, #9
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2400      	movs	r4, #0
 8002d2c:	9400      	str	r4, [sp, #0]
 8002d2e:	f7fe fdf7 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002d32:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <drawHeadSnake+0x244>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3305      	adds	r3, #5
 8002d3a:	b298      	uxth	r0, r3
 8002d3c:	4b4e      	ldr	r3, [pc, #312]	; (8002e78 <drawHeadSnake+0x244>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3305      	adds	r3, #5
 8002d44:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002d46:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <drawHeadSnake+0x244>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3309      	adds	r3, #9
 8002d4e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002d50:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <drawHeadSnake+0x244>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3309      	adds	r3, #9
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2400      	movs	r4, #0
 8002d5c:	9400      	str	r4, [sp, #0]
 8002d5e:	f7fe fddf 	bl	8001920 <lcd_Fill>
		break;
 8002d62:	e084      	b.n	8002e6e <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <drawHeadSnake+0x244>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	b298      	uxth	r0, r3
 8002d6a:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <drawHeadSnake+0x244>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <drawHeadSnake+0x244>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3309      	adds	r3, #9
 8002d78:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <drawHeadSnake+0x244>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3309      	adds	r3, #9
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002d88:	9400      	str	r4, [sp, #0]
 8002d8a:	f7fe fdc9 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <drawHeadSnake+0x244>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	b298      	uxth	r0, r3
 8002d94:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <drawHeadSnake+0x244>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <drawHeadSnake+0x244>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3304      	adds	r3, #4
 8002da2:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002da4:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <drawHeadSnake+0x244>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3304      	adds	r3, #4
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2400      	movs	r4, #0
 8002db0:	9400      	str	r4, [sp, #0]
 8002db2:	f7fe fdb5 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <drawHeadSnake+0x244>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	b298      	uxth	r0, r3
 8002dbc:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <drawHeadSnake+0x244>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3305      	adds	r3, #5
 8002dc4:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <drawHeadSnake+0x244>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3304      	adds	r3, #4
 8002dce:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002dd0:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <drawHeadSnake+0x244>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3309      	adds	r3, #9
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2400      	movs	r4, #0
 8002ddc:	9400      	str	r4, [sp, #0]
 8002dde:	f7fe fd9f 	bl	8001920 <lcd_Fill>
		break;
 8002de2:	e044      	b.n	8002e6e <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <drawHeadSnake+0x244>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	b298      	uxth	r0, r3
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <drawHeadSnake+0x244>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <drawHeadSnake+0x244>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3309      	adds	r3, #9
 8002df8:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <drawHeadSnake+0x244>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3309      	adds	r3, #9
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002e08:	9400      	str	r4, [sp, #0]
 8002e0a:	f7fe fd89 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <drawHeadSnake+0x244>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3305      	adds	r3, #5
 8002e16:	b298      	uxth	r0, r3
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <drawHeadSnake+0x244>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <drawHeadSnake+0x244>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3309      	adds	r3, #9
 8002e26:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <drawHeadSnake+0x244>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3304      	adds	r3, #4
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2400      	movs	r4, #0
 8002e34:	9400      	str	r4, [sp, #0]
 8002e36:	f7fe fd73 	bl	8001920 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <drawHeadSnake+0x244>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3305      	adds	r3, #5
 8002e42:	b298      	uxth	r0, r3
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <drawHeadSnake+0x244>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3305      	adds	r3, #5
 8002e4c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <drawHeadSnake+0x244>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3309      	adds	r3, #9
 8002e56:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <drawHeadSnake+0x244>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3309      	adds	r3, #9
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2400      	movs	r4, #0
 8002e64:	9400      	str	r4, [sp, #0]
 8002e66:	f7fe fd5b 	bl	8001920 <lcd_Fill>
		break;
 8002e6a:	e000      	b.n	8002e6e <drawHeadSnake+0x23a>
	default:
		break;
 8002e6c:	bf00      	nop
	}
}
 8002e6e:	bf00      	nop
 8002e70:	3704      	adds	r7, #4
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200001e0 	.word	0x200001e0

08002e7c <goLeft>:

void goLeft()
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002e82:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <goLeft+0x168>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80a7 	bne.w	8002fda <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002e8c:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <goLeft+0x168>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <goLeft+0x168>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4798      	blx	r3
			break;
 8002e9a:	e09f      	b.n	8002fdc <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <goLeft+0x168>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e091      	b.n	8002fcc <goLeft+0x150>
			{
				if (i == 0)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d128      	bne.n	8002f00 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002eae:	4a4d      	ldr	r2, [pc, #308]	; (8002fe4 <goLeft+0x168>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3305      	adds	r3, #5
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f107 020c 	add.w	r2, r7, #12
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ec2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 8002ec6:	4a47      	ldr	r2, [pc, #284]	; (8002fe4 <goLeft+0x168>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3305      	adds	r3, #5
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f1a3 020a 	sub.w	r2, r3, #10
 8002ed6:	4943      	ldr	r1, [pc, #268]	; (8002fe4 <goLeft+0x168>)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3305      	adds	r3, #5
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8002ee2:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <goLeft+0x168>)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3305      	adds	r3, #5
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	493d      	ldr	r1, [pc, #244]	; (8002fe4 <goLeft+0x168>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3305      	adds	r3, #5
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002efa:	f7ff fe9b 	bl	8002c34 <drawHeadSnake>
 8002efe:	e062      	b.n	8002fc6 <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8002f00:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <goLeft+0x168>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3305      	adds	r3, #5
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	1d3a      	adds	r2, r7, #4
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f12:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8002f16:	4a33      	ldr	r2, [pc, #204]	; (8002fe4 <goLeft+0x168>)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3305      	adds	r3, #5
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	f107 020c 	add.w	r2, r7, #12
 8002f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f2a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	1d3a      	adds	r2, r7, #4
 8002f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f38:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d123      	bne.n	8002f8a <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002f42:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <goLeft+0x168>)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3305      	adds	r3, #5
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	b298      	uxth	r0, r3
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <goLeft+0x168>)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3305      	adds	r3, #5
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <goLeft+0x168>)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3305      	adds	r3, #5
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3309      	adds	r3, #9
 8002f6e:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8002f70:	4c1c      	ldr	r4, [pc, #112]	; (8002fe4 <goLeft+0x168>)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3305      	adds	r3, #5
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4423      	add	r3, r4
 8002f7a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3309      	adds	r3, #9
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2400      	movs	r4, #0
 8002f84:	9400      	str	r4, [sp, #0]
 8002f86:	f7fe fccb 	bl	8001920 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <goLeft+0x168>)
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d117      	bne.n	8002fc6 <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <goLeft+0x168>)
 8002f98:	331c      	adds	r3, #28
 8002f9a:	1d3a      	adds	r2, r7, #4
 8002f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa0:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	b298      	uxth	r0, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	b299      	uxth	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3309      	adds	r3, #9
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3309      	adds	r3, #9
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002fc0:	9400      	str	r4, [sp, #0]
 8002fc2:	f7fe fcad 	bl	8001920 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <goLeft+0x168>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	f6ff af68 	blt.w	8002ea8 <goLeft+0x2c>
					}
				}
			}
			break;
 8002fd8:	e000      	b.n	8002fdc <goLeft+0x160>
		}
	}
 8002fda:	bf00      	nop
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	200001e0 	.word	0x200001e0

08002fe8 <goRight>:

void goRight()
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002fee:	4b58      	ldr	r3, [pc, #352]	; (8003150 <goRight+0x168>)
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f040 80a7 	bne.w	8003146 <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <goRight+0x168>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d103      	bne.n	8003008 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 8003000:	4b53      	ldr	r3, [pc, #332]	; (8003150 <goRight+0x168>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4798      	blx	r3
			break;
 8003006:	e09f      	b.n	8003148 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 8003008:	4b51      	ldr	r3, [pc, #324]	; (8003150 <goRight+0x168>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e091      	b.n	8003138 <goRight+0x150>
			{
				if (i == 0)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d128      	bne.n	800306c <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800301a:	4a4d      	ldr	r2, [pc, #308]	; (8003150 <goRight+0x168>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3305      	adds	r3, #5
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	f107 020c 	add.w	r2, r7, #12
 8003028:	3304      	adds	r3, #4
 800302a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800302e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 8003032:	4a47      	ldr	r2, [pc, #284]	; (8003150 <goRight+0x168>)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3305      	adds	r3, #5
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f103 020a 	add.w	r2, r3, #10
 8003042:	4943      	ldr	r1, [pc, #268]	; (8003150 <goRight+0x168>)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3305      	adds	r3, #5
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 800304e:	4a40      	ldr	r2, [pc, #256]	; (8003150 <goRight+0x168>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3305      	adds	r3, #5
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	493d      	ldr	r1, [pc, #244]	; (8003150 <goRight+0x168>)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3305      	adds	r3, #5
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003066:	f7ff fde5 	bl	8002c34 <drawHeadSnake>
 800306a:	e062      	b.n	8003132 <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <goRight+0x168>)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3305      	adds	r3, #5
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	1d3a      	adds	r2, r7, #4
 8003078:	3304      	adds	r3, #4
 800307a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800307e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003082:	4a33      	ldr	r2, [pc, #204]	; (8003150 <goRight+0x168>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3305      	adds	r3, #5
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	f107 020c 	add.w	r2, r7, #12
 8003092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003096:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	1d3a      	adds	r2, r7, #4
 80030a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030a4:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d123      	bne.n	80030f6 <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <goRight+0x168>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3305      	adds	r3, #5
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	b298      	uxth	r0, r3
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <goRight+0x168>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3305      	adds	r3, #5
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <goRight+0x168>)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3305      	adds	r3, #5
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3309      	adds	r3, #9
 80030da:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80030dc:	4c1c      	ldr	r4, [pc, #112]	; (8003150 <goRight+0x168>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3305      	adds	r3, #5
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4423      	add	r3, r4
 80030e6:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3309      	adds	r3, #9
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2400      	movs	r4, #0
 80030f0:	9400      	str	r4, [sp, #0]
 80030f2:	f7fe fc15 	bl	8001920 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <goRight+0x168>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	3b01      	subs	r3, #1
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d117      	bne.n	8003132 <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <goRight+0x168>)
 8003104:	331c      	adds	r3, #28
 8003106:	1d3a      	adds	r2, r7, #4
 8003108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800310c:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	b298      	uxth	r0, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	b299      	uxth	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	b29b      	uxth	r3, r3
 800311c:	3309      	adds	r3, #9
 800311e:	b29a      	uxth	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	b29b      	uxth	r3, r3
 8003124:	3309      	adds	r3, #9
 8003126:	b29b      	uxth	r3, r3
 8003128:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800312c:	9400      	str	r4, [sp, #0]
 800312e:	f7fe fbf7 	bl	8001920 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3301      	adds	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <goRight+0x168>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	f6ff af68 	blt.w	8003014 <goRight+0x2c>
					}
				}
			}
			break;
 8003144:	e000      	b.n	8003148 <goRight+0x160>
		}
	}
 8003146:	bf00      	nop
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd90      	pop	{r4, r7, pc}
 8003150:	200001e0 	.word	0x200001e0

08003154 <goUp>:

void goUp()
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <goUp+0x168>)
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80a7 	bne.w	80032b2 <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003164:	4b55      	ldr	r3, [pc, #340]	; (80032bc <goUp+0x168>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d103      	bne.n	8003174 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <goUp+0x168>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4798      	blx	r3
			break;
 8003172:	e09f      	b.n	80032b4 <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 8003174:	4b51      	ldr	r3, [pc, #324]	; (80032bc <goUp+0x168>)
 8003176:	2203      	movs	r2, #3
 8003178:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e091      	b.n	80032a4 <goUp+0x150>
			{
				if (i == 0)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d128      	bne.n	80031d8 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003186:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <goUp+0x168>)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3305      	adds	r3, #5
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	f107 020c 	add.w	r2, r7, #12
 8003194:	3304      	adds	r3, #4
 8003196:	e893 0003 	ldmia.w	r3, {r0, r1}
 800319a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 800319e:	4a47      	ldr	r2, [pc, #284]	; (80032bc <goUp+0x168>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3305      	adds	r3, #5
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4944      	ldr	r1, [pc, #272]	; (80032bc <goUp+0x168>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3305      	adds	r3, #5
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 80031b6:	4a41      	ldr	r2, [pc, #260]	; (80032bc <goUp+0x168>)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3305      	adds	r3, #5
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f1a3 020a 	sub.w	r2, r3, #10
 80031c6:	493d      	ldr	r1, [pc, #244]	; (80032bc <goUp+0x168>)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3305      	adds	r3, #5
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80031d2:	f7ff fd2f 	bl	8002c34 <drawHeadSnake>
 80031d6:	e062      	b.n	800329e <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80031d8:	4a38      	ldr	r2, [pc, #224]	; (80032bc <goUp+0x168>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3305      	adds	r3, #5
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	1d3a      	adds	r2, r7, #4
 80031e4:	3304      	adds	r3, #4
 80031e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031ea:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 80031ee:	4a33      	ldr	r2, [pc, #204]	; (80032bc <goUp+0x168>)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3305      	adds	r3, #5
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	f107 020c 	add.w	r2, r7, #12
 80031fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003202:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	1d3a      	adds	r2, r7, #4
 800320c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003210:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d123      	bne.n	8003262 <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800321a:	4a28      	ldr	r2, [pc, #160]	; (80032bc <goUp+0x168>)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3305      	adds	r3, #5
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b298      	uxth	r0, r3
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <goUp+0x168>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3305      	adds	r3, #5
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <goUp+0x168>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3305      	adds	r3, #5
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003242:	b29b      	uxth	r3, r3
 8003244:	3309      	adds	r3, #9
 8003246:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003248:	4c1c      	ldr	r4, [pc, #112]	; (80032bc <goUp+0x168>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3305      	adds	r3, #5
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4423      	add	r3, r4
 8003252:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003254:	b29b      	uxth	r3, r3
 8003256:	3309      	adds	r3, #9
 8003258:	b29b      	uxth	r3, r3
 800325a:	2400      	movs	r4, #0
 800325c:	9400      	str	r4, [sp, #0]
 800325e:	f7fe fb5f 	bl	8001920 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <goUp+0x168>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	3b01      	subs	r3, #1
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	429a      	cmp	r2, r3
 800326c:	d117      	bne.n	800329e <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <goUp+0x168>)
 8003270:	331c      	adds	r3, #28
 8003272:	1d3a      	adds	r2, r7, #4
 8003274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003278:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	b298      	uxth	r0, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	b299      	uxth	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	b29b      	uxth	r3, r3
 8003288:	3309      	adds	r3, #9
 800328a:	b29a      	uxth	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	b29b      	uxth	r3, r3
 8003290:	3309      	adds	r3, #9
 8003292:	b29b      	uxth	r3, r3
 8003294:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003298:	9400      	str	r4, [sp, #0]
 800329a:	f7fe fb41 	bl	8001920 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <goUp+0x168>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f6ff af68 	blt.w	8003180 <goUp+0x2c>
					}
				}
			}
			break;
 80032b0:	e000      	b.n	80032b4 <goUp+0x160>
		}
	}
 80032b2:	bf00      	nop
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	200001e0 	.word	0x200001e0

080032c0 <goDown>:

void goDown()
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <goDown+0x168>)
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 80a7 	bne.w	800341e <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80032d0:	4b55      	ldr	r3, [pc, #340]	; (8003428 <goDown+0x168>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d103      	bne.n	80032e0 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 80032d8:	4b53      	ldr	r3, [pc, #332]	; (8003428 <goDown+0x168>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4798      	blx	r3
			break;
 80032de:	e09f      	b.n	8003420 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 80032e0:	4b51      	ldr	r3, [pc, #324]	; (8003428 <goDown+0x168>)
 80032e2:	2202      	movs	r2, #2
 80032e4:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e091      	b.n	8003410 <goDown+0x150>
			{
				if (i == 0)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d128      	bne.n	8003344 <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 80032f2:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <goDown+0x168>)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3305      	adds	r3, #5
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	f107 020c 	add.w	r2, r7, #12
 8003300:	3304      	adds	r3, #4
 8003302:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003306:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 800330a:	4a47      	ldr	r2, [pc, #284]	; (8003428 <goDown+0x168>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3305      	adds	r3, #5
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4944      	ldr	r1, [pc, #272]	; (8003428 <goDown+0x168>)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3305      	adds	r3, #5
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 8003322:	4a41      	ldr	r2, [pc, #260]	; (8003428 <goDown+0x168>)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3305      	adds	r3, #5
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f103 020a 	add.w	r2, r3, #10
 8003332:	493d      	ldr	r1, [pc, #244]	; (8003428 <goDown+0x168>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3305      	adds	r3, #5
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800333e:	f7ff fc79 	bl	8002c34 <drawHeadSnake>
 8003342:	e062      	b.n	800340a <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003344:	4a38      	ldr	r2, [pc, #224]	; (8003428 <goDown+0x168>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3305      	adds	r3, #5
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	1d3a      	adds	r2, r7, #4
 8003350:	3304      	adds	r3, #4
 8003352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003356:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800335a:	4a33      	ldr	r2, [pc, #204]	; (8003428 <goDown+0x168>)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3305      	adds	r3, #5
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	3304      	adds	r3, #4
 8003366:	f107 020c 	add.w	r2, r7, #12
 800336a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800336e:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	1d3a      	adds	r2, r7, #4
 8003378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800337c:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d123      	bne.n	80033ce <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003386:	4a28      	ldr	r2, [pc, #160]	; (8003428 <goDown+0x168>)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3305      	adds	r3, #5
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b298      	uxth	r0, r3
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <goDown+0x168>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3305      	adds	r3, #5
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <goDown+0x168>)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3305      	adds	r3, #5
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3309      	adds	r3, #9
 80033b2:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80033b4:	4c1c      	ldr	r4, [pc, #112]	; (8003428 <goDown+0x168>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3305      	adds	r3, #5
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4423      	add	r3, r4
 80033be:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3309      	adds	r3, #9
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2400      	movs	r4, #0
 80033c8:	9400      	str	r4, [sp, #0]
 80033ca:	f7fe faa9 	bl	8001920 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <goDown+0x168>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	3b01      	subs	r3, #1
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d117      	bne.n	800340a <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <goDown+0x168>)
 80033dc:	331c      	adds	r3, #28
 80033de:	1d3a      	adds	r2, r7, #4
 80033e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033e4:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	b298      	uxth	r0, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	b299      	uxth	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3309      	adds	r3, #9
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3309      	adds	r3, #9
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003404:	9400      	str	r4, [sp, #0]
 8003406:	f7fe fa8b 	bl	8001920 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <goDown+0x168>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	429a      	cmp	r2, r3
 8003418:	f6ff af68 	blt.w	80032ec <goDown+0x2c>
					}
				}
			}
			break;
 800341c:	e000      	b.n	8003420 <goDown+0x160>
		}
	}
 800341e:	bf00      	nop
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	200001e0 	.word	0x200001e0

0800342c <resumeGame>:

void resumeGame()
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af02      	add	r7, sp, #8
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 8003432:	4b75      	ldr	r3, [pc, #468]	; (8003608 <resumeGame+0x1dc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29a      	uxth	r2, r3
 8003438:	4b74      	ldr	r3, [pc, #464]	; (800360c <resumeGame+0x1e0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4413      	add	r3, r2
 8003440:	b299      	uxth	r1, r3
 8003442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800344c:	22f0      	movs	r2, #240	; 0xf0
 800344e:	2000      	movs	r0, #0
 8003450:	f7fe fa66 	bl	8001920 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e02c      	b.n	80034b4 <resumeGame+0x88>
	{
		if (i == 0)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <resumeGame+0x3a>
			drawHeadSnake();
 8003460:	f7ff fbe8 	bl	8002c34 <drawHeadSnake>
 8003464:	e023      	b.n	80034ae <resumeGame+0x82>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003466:	4a6a      	ldr	r2, [pc, #424]	; (8003610 <resumeGame+0x1e4>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3305      	adds	r3, #5
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b298      	uxth	r0, r3
 8003474:	4a66      	ldr	r2, [pc, #408]	; (8003610 <resumeGame+0x1e4>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3305      	adds	r3, #5
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003482:	4a63      	ldr	r2, [pc, #396]	; (8003610 <resumeGame+0x1e4>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3305      	adds	r3, #5
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800348e:	b29b      	uxth	r3, r3
 8003490:	3309      	adds	r3, #9
 8003492:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003494:	4c5e      	ldr	r4, [pc, #376]	; (8003610 <resumeGame+0x1e4>)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3305      	adds	r3, #5
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4423      	add	r3, r4
 800349e:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3309      	adds	r3, #9
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2400      	movs	r4, #0
 80034a8:	9400      	str	r4, [sp, #0]
 80034aa:	f7fe fa39 	bl	8001920 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <resumeGame+0x1e4>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	dbcd      	blt.n	800345a <resumeGame+0x2e>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	e07e      	b.n	80035c2 <resumeGame+0x196>
	{
		int X = wallObject.infoWall[i].x;
 80034c4:	4953      	ldr	r1, [pc, #332]	; (8003614 <resumeGame+0x1e8>)
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 80034d6:	494f      	ldr	r1, [pc, #316]	; (8003614 <resumeGame+0x1e8>)
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3304      	adds	r3, #4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	b298      	uxth	r0, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b299      	uxth	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3309      	adds	r3, #9
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3309      	adds	r3, #9
 8003500:	b29b      	uxth	r3, r3
 8003502:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003506:	9400      	str	r4, [sp, #0]
 8003508:	f7fe fa0a 	bl	8001920 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 800350c:	4941      	ldr	r1, [pc, #260]	; (8003614 <resumeGame+0x1e8>)
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3308      	adds	r3, #8
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d126      	bne.n	8003570 <resumeGame+0x144>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	b298      	uxth	r0, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	330a      	adds	r3, #10
 800352c:	b299      	uxth	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	b29b      	uxth	r3, r3
 8003532:	3309      	adds	r3, #9
 8003534:	b29a      	uxth	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	3313      	adds	r3, #19
 800353c:	b29b      	uxth	r3, r3
 800353e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003542:	9400      	str	r4, [sp, #0]
 8003544:	f7fe f9ec 	bl	8001920 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	b298      	uxth	r0, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b0a      	subs	r3, #10
 8003552:	b299      	uxth	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	b29b      	uxth	r3, r3
 8003558:	3309      	adds	r3, #9
 800355a:	b29a      	uxth	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003568:	9400      	str	r4, [sp, #0]
 800356a:	f7fe f9d9 	bl	8001920 <lcd_Fill>
 800356e:	e025      	b.n	80035bc <resumeGame+0x190>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	b29b      	uxth	r3, r3
 8003574:	330a      	adds	r3, #10
 8003576:	b298      	uxth	r0, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b299      	uxth	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	b29b      	uxth	r3, r3
 8003580:	3313      	adds	r3, #19
 8003582:	b29a      	uxth	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	3309      	adds	r3, #9
 800358a:	b29b      	uxth	r3, r3
 800358c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003590:	9400      	str	r4, [sp, #0]
 8003592:	f7fe f9c5 	bl	8001920 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b0a      	subs	r3, #10
 800359c:	b298      	uxth	r0, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	b299      	uxth	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3309      	adds	r3, #9
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80035b6:	9400      	str	r4, [sp, #0]
 80035b8:	f7fe f9b2 	bl	8001920 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	3301      	adds	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <resumeGame+0x1e8>)
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f6ff af78 	blt.w	80034c4 <resumeGame+0x98>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <resumeGame+0x1ec>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b298      	uxth	r0, r3
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <resumeGame+0x1f0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b299      	uxth	r1, r3
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <resumeGame+0x1ec>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3309      	adds	r3, #9
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <resumeGame+0x1f0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3309      	adds	r3, #9
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f240 14cf 	movw	r4, #463	; 0x1cf
 80035f8:	9400      	str	r4, [sp, #0]
 80035fa:	f7fe f991 	bl	8001920 <lcd_Fill>
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	bf00      	nop
 8003608:	20000028 	.word	0x20000028
 800360c:	20000038 	.word	0x20000038
 8003610:	200001e0 	.word	0x200001e0
 8003614:	200011ac 	.word	0x200011ac
 8003618:	20000094 	.word	0x20000094
 800361c:	20000098 	.word	0x20000098

08003620 <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <checkOutOfValidRange+0x38>)
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	db0c      	blt.n	8003646 <checkOutOfValidRange+0x26>
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <checkOutOfValidRange+0x38>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2be6      	cmp	r3, #230	; 0xe6
 8003632:	dc08      	bgt.n	8003646 <checkOutOfValidRange+0x26>
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <checkOutOfValidRange+0x38>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	2b45      	cmp	r3, #69	; 0x45
 800363a:	dd04      	ble.n	8003646 <checkOutOfValidRange+0x26>
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <checkOutOfValidRange+0x38>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003644:	dd01      	ble.n	800364a <checkOutOfValidRange+0x2a>
		return 1;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <checkOutOfValidRange+0x2c>
	return 0;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	200001e0 	.word	0x200001e0

0800365c <checkEatBody>:

int checkEatBody()
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003662:	2301      	movs	r3, #1
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e018      	b.n	800369a <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <checkEatBody+0x58>)
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	4911      	ldr	r1, [pc, #68]	; (80036b4 <checkEatBody+0x58>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3305      	adds	r3, #5
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d10b      	bne.n	8003694 <checkEatBody+0x38>
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <checkEatBody+0x58>)
 800367e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003680:	490c      	ldr	r1, [pc, #48]	; (80036b4 <checkEatBody+0x58>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3305      	adds	r3, #5
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d101      	bne.n	8003694 <checkEatBody+0x38>
			return 1;
 8003690:	2301      	movs	r3, #1
 8003692:	e008      	b.n	80036a6 <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <checkEatBody+0x58>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dbe1      	blt.n	8003668 <checkEatBody+0xc>
	return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	200001e0 	.word	0x200001e0

080036b8 <checkEatFruit>:

int checkEatFruit()
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <checkEatFruit+0x2c>)
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <checkEatFruit+0x30>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <checkEatFruit+0x20>
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <checkEatFruit+0x2c>)
 80036ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <checkEatFruit+0x34>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d101      	bne.n	80036d8 <checkEatFruit+0x20>
		return 1;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <checkEatFruit+0x22>
	return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	200001e0 	.word	0x200001e0
 80036e8:	20000094 	.word	0x20000094
 80036ec:	20000098 	.word	0x20000098

080036f0 <checkHitWall>:

int checkHitWall()
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	e079      	b.n	80037f0 <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 80036fc:	4944      	ldr	r1, [pc, #272]	; (8003810 <checkHitWall+0x120>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3308      	adds	r3, #8
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d136      	bne.n	8003780 <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003712:	4b40      	ldr	r3, [pc, #256]	; (8003814 <checkHitWall+0x124>)
 8003714:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003716:	483e      	ldr	r0, [pc, #248]	; (8003810 <checkHitWall+0x120>)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4403      	add	r3, r0
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3b0a      	subs	r3, #10
 800372a:	4299      	cmp	r1, r3
 800372c:	d01a      	beq.n	8003764 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <checkHitWall+0x124>)
 8003730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003732:	4837      	ldr	r0, [pc, #220]	; (8003810 <checkHitWall+0x120>)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4403      	add	r3, r0
 8003740:	3304      	adds	r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003746:	4299      	cmp	r1, r3
 8003748:	d00c      	beq.n	8003764 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 800374a:	4b32      	ldr	r3, [pc, #200]	; (8003814 <checkHitWall+0x124>)
 800374c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374e:	4830      	ldr	r0, [pc, #192]	; (8003810 <checkHitWall+0x120>)
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4403      	add	r3, r0
 800375c:	3304      	adds	r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003760:	4299      	cmp	r1, r3
 8003762:	d142      	bne.n	80037ea <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 8003764:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <checkHitWall+0x124>)
 8003766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003768:	4829      	ldr	r0, [pc, #164]	; (8003810 <checkHitWall+0x120>)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4403      	add	r3, r0
 8003776:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003778:	4299      	cmp	r1, r3
 800377a:	d136      	bne.n	80037ea <checkHitWall+0xfa>
			{
				return 1;
 800377c:	2301      	movs	r3, #1
 800377e:	e041      	b.n	8003804 <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <checkHitWall+0x124>)
 8003782:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003784:	4822      	ldr	r0, [pc, #136]	; (8003810 <checkHitWall+0x120>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4403      	add	r3, r0
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330a      	adds	r3, #10
 8003796:	4299      	cmp	r1, r3
 8003798:	d018      	beq.n	80037cc <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <checkHitWall+0x124>)
 800379c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800379e:	481c      	ldr	r0, [pc, #112]	; (8003810 <checkHitWall+0x120>)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4403      	add	r3, r0
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 80037b0:	4299      	cmp	r1, r3
 80037b2:	d00b      	beq.n	80037cc <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <checkHitWall+0x124>)
 80037b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b8:	4815      	ldr	r0, [pc, #84]	; (8003810 <checkHitWall+0x120>)
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4403      	add	r3, r0
 80037c6:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 80037c8:	4299      	cmp	r1, r3
 80037ca:	d10e      	bne.n	80037ea <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <checkHitWall+0x124>)
 80037ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037d0:	480f      	ldr	r0, [pc, #60]	; (8003810 <checkHitWall+0x120>)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4403      	add	r3, r0
 80037de:	3304      	adds	r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 80037e2:	4299      	cmp	r1, r3
 80037e4:	d101      	bne.n	80037ea <checkHitWall+0xfa>
			{
				return 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00c      	b.n	8003804 <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3301      	adds	r3, #1
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <checkHitWall+0x120>)
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	f6ff af7d 	blt.w	80036fc <checkHitWall+0xc>
			}
		}
	}
	return 0;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	200011ac 	.word	0x200011ac
 8003814:	200001e0 	.word	0x200001e0

08003818 <checkHead>:
void checkHead()
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b085      	sub	sp, #20
 800381c:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 800381e:	f7ff feff 	bl	8003620 <checkOutOfValidRange>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(3);
 8003828:	2003      	movs	r0, #3
 800382a:	f7fd fe85 	bl	8001538 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 800382e:	e065      	b.n	80038fc <checkHead+0xe4>
	}
	if (checkEatBody())
 8003830:	f7ff ff14 	bl	800365c <checkEatBody>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(2);
 800383a:	2002      	movs	r0, #2
 800383c:	f7fd fe7c 	bl	8001538 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003840:	e05c      	b.n	80038fc <checkHead+0xe4>
	}
	if (checkHitWall())
 8003842:	f7ff ff55 	bl	80036f0 <checkHitWall>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <checkHead+0x3c>
	{
		// showGameover
		initOverMode(0);
 800384c:	2000      	movs	r0, #0
 800384e:	f7fd fe73 	bl	8001538 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003852:	e053      	b.n	80038fc <checkHead+0xe4>
	}
	if (checkEatFruit())
 8003854:	f7ff ff30 	bl	80036b8 <checkEatFruit>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d04e      	beq.n	80038fc <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <checkHead+0xec>)
 8003860:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003864:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 8003866:	4b28      	ldr	r3, [pc, #160]	; (8003908 <checkHead+0xf0>)
 8003868:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800386c:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 800386e:	4b27      	ldr	r3, [pc, #156]	; (800390c <checkHead+0xf4>)
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	3301      	adds	r3, #1
 8003874:	4a25      	ldr	r2, [pc, #148]	; (800390c <checkHead+0xf4>)
 8003876:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <checkHead+0xf4>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	3b01      	subs	r3, #1
 800387e:	4a23      	ldr	r2, [pc, #140]	; (800390c <checkHead+0xf4>)
 8003880:	69d2      	ldr	r2, [r2, #28]
 8003882:	4922      	ldr	r1, [pc, #136]	; (800390c <checkHead+0xf4>)
 8003884:	3305      	adds	r3, #5
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	440b      	add	r3, r1
 800388a:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <checkHead+0xf4>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	3b01      	subs	r3, #1
 8003892:	4a1e      	ldr	r2, [pc, #120]	; (800390c <checkHead+0xf4>)
 8003894:	6a12      	ldr	r2, [r2, #32]
 8003896:	491d      	ldr	r1, [pc, #116]	; (800390c <checkHead+0xf4>)
 8003898:	3305      	adds	r3, #5
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	440b      	add	r3, r1
 800389e:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <checkHead+0xf4>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	3b01      	subs	r3, #1
 80038a6:	4a19      	ldr	r2, [pc, #100]	; (800390c <checkHead+0xf4>)
 80038a8:	3305      	adds	r3, #5
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <checkHead+0xf4>)
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	3b01      	subs	r3, #1
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <checkHead+0xf4>)
 80038ba:	3305      	adds	r3, #5
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	b298      	uxth	r0, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b299      	uxth	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3309      	adds	r3, #9
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3309      	adds	r3, #9
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2400      	movs	r4, #0
 80038de:	9400      	str	r4, [sp, #0]
 80038e0:	f7fe f81e 	bl	8001920 <lcd_Fill>
		flagEat = 1;
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <checkHead+0xf8>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

		SCORE++;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <checkHead+0xfc>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <checkHead+0xfc>)
 80038f4:	801a      	strh	r2, [r3, #0]
		printScore();
 80038f6:	f7ff f929 	bl	8002b4c <printScore>
		return;
 80038fa:	bf00      	nop
	}
}
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}
 8003902:	bf00      	nop
 8003904:	20000094 	.word	0x20000094
 8003908:	20000098 	.word	0x20000098
 800390c:	200001e0 	.word	0x200001e0
 8003910:	2000009c 	.word	0x2000009c
 8003914:	200001a6 	.word	0x200001a6

08003918 <move>:

void move()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <move+0x4c>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d81b      	bhi.n	800395c <move+0x44>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <move+0x14>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	0800394d 	.word	0x0800394d
 8003930:	08003955 	.word	0x08003955
 8003934:	0800393d 	.word	0x0800393d
 8003938:	08003945 	.word	0x08003945
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <move+0x4c>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4798      	blx	r3
		break;
 8003942:	e00c      	b.n	800395e <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <move+0x4c>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4798      	blx	r3
		break;
 800394a:	e008      	b.n	800395e <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <move+0x4c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4798      	blx	r3
		break;
 8003952:	e004      	b.n	800395e <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <move+0x4c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4798      	blx	r3
		break;
 800395a:	e000      	b.n	800395e <move+0x46>
	default:
		break;
 800395c:	bf00      	nop
	}
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200001e0 	.word	0x200001e0

08003968 <wallInit>:

void wallInit()
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	e01f      	b.n	80039b4 <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 8003974:	491f      	ldr	r1, [pc, #124]	; (80039f4 <wallInit+0x8c>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 8003986:	491b      	ldr	r1, [pc, #108]	; (80039f4 <wallInit+0x8c>)
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3304      	adds	r3, #4
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 800399a:	4916      	ldr	r1, [pc, #88]	; (80039f4 <wallInit+0x8c>)
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3308      	adds	r3, #8
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3301      	adds	r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039ba:	dbdb      	blt.n	8003974 <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <wallInit+0x8c>)
 80039be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
	wallObject.vertical = 1;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <wallInit+0x8c>)
 80039cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d0:	461a      	mov	r2, r3
 80039d2:	2301      	movs	r3, #1
 80039d4:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	wallObject.stopGenerateWallFlag = 0;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <wallInit+0x8c>)
 80039da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039de:	461a      	mov	r2, r3
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c2 3778 	str.w	r3, [r2, #1912]	; 0x778
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200011ac 	.word	0x200011ac

080039f8 <snakeRun>:

void snakeRun()
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af02      	add	r7, sp, #8
	if (button_count[5])
 80039fe:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <snakeRun+0x100>)
 8003a00:	895b      	ldrh	r3, [r3, #10]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <snakeRun+0x1c>
	{
		(*snakeObject.GOUP)();
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <snakeRun+0x104>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <snakeRun+0x104>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8003a12:	e06e      	b.n	8003af2 <snakeRun+0xfa>
		if (button_count[13])
 8003a14:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <snakeRun+0x100>)
 8003a16:	8b5b      	ldrh	r3, [r3, #26]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <snakeRun+0x32>
			(*snakeObject.GODOWN)();
 8003a1c:	4b37      	ldr	r3, [pc, #220]	; (8003afc <snakeRun+0x104>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <snakeRun+0x104>)
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4798      	blx	r3
}
 8003a28:	e063      	b.n	8003af2 <snakeRun+0xfa>
			if (button_count[10])
 8003a2a:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <snakeRun+0x100>)
 8003a2c:	8a9b      	ldrh	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <snakeRun+0x48>
				(*snakeObject.GORIGHT)();
 8003a32:	4b32      	ldr	r3, [pc, #200]	; (8003afc <snakeRun+0x104>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4798      	blx	r3
				(*snakeObject.CHECKHEAD)();
 8003a38:	4b30      	ldr	r3, [pc, #192]	; (8003afc <snakeRun+0x104>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4798      	blx	r3
}
 8003a3e:	e058      	b.n	8003af2 <snakeRun+0xfa>
				if (button_count[8])
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <snakeRun+0x100>)
 8003a42:	8a1b      	ldrh	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <snakeRun+0x5e>
					(*snakeObject.GOLEFT)();
 8003a48:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <snakeRun+0x104>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <snakeRun+0x104>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4798      	blx	r3
}
 8003a54:	e04d      	b.n	8003af2 <snakeRun+0xfa>
					if (button_count[9])
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <snakeRun+0x100>)
 8003a58:	8a5b      	ldrh	r3, [r3, #18]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d022      	beq.n	8003aa4 <snakeRun+0xac>
						snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <snakeRun+0x104>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b23      	ldr	r3, [pc, #140]	; (8003afc <snakeRun+0x104>)
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
						wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <snakeRun+0x108>)
 8003a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a78:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <snakeRun+0x108>)
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
						snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <snakeRun+0x104>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 ff5e 	bl	8005958 <initStopGame>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4a17      	ldr	r2, [pc, #92]	; (8003afc <snakeRun+0x104>)
 8003aa0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003aa2:	e026      	b.n	8003af2 <snakeRun+0xfa>
						if (button_count[12])
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <snakeRun+0x100>)
 8003aa6:	8b1b      	ldrh	r3, [r3, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01c      	beq.n	8003ae6 <snakeRun+0xee>
							lcd_Clear(WHITE);
 8003aac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ab0:	f7fd ff04 	bl	80018bc <lcd_Clear>
							xFruit = INT_MIN;
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <snakeRun+0x10c>)
 8003ab6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003aba:	601a      	str	r2, [r3, #0]
							yFruit = INT_MIN;
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <snakeRun+0x110>)
 8003abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ac2:	601a      	str	r2, [r3, #0]
							snakeInit();
 8003ac4:	f000 f824 	bl	8003b10 <snakeInit>
							wallInit();
 8003ac8:	f7ff ff4e 	bl	8003968 <wallInit>
							lcd_Fill(0, 0, 240, 70, RED);
 8003acc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2346      	movs	r3, #70	; 0x46
 8003ad4:	22f0      	movs	r2, #240	; 0xf0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fd ff21 	bl	8001920 <lcd_Fill>
							flagEat = 1;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <snakeRun+0x114>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	e005      	b.n	8003af2 <snakeRun+0xfa>
							(*snakeObject.MOVE)();
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <snakeRun+0x104>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <snakeRun+0x104>)
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	4798      	blx	r3
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	2000012c 	.word	0x2000012c
 8003afc:	200001e0 	.word	0x200001e0
 8003b00:	200011ac 	.word	0x200011ac
 8003b04:	20000094 	.word	0x20000094
 8003b08:	20000098 	.word	0x20000098
 8003b0c:	2000009c 	.word	0x2000009c

08003b10 <snakeInit>:

void snakeInit()
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af02      	add	r7, sp, #8
	srand(rst);
 8003b16:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <snakeInit+0x11c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f005 ff98 	bl	8009a50 <srand>
	rst++;
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <snakeInit+0x11c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a41      	ldr	r2, [pc, #260]	; (8003c2c <snakeInit+0x11c>)
 8003b28:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <snakeInit+0x120>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <snakeInit+0x124>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 8003b36:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <snakeInit+0x124>)
 8003b38:	2214      	movs	r2, #20
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <snakeInit+0x124>)
 8003b3e:	2246      	movs	r2, #70	; 0x46
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 8003b42:	4b3c      	ldr	r3, [pc, #240]	; (8003c34 <snakeInit+0x124>)
 8003b44:	220a      	movs	r2, #10
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <snakeInit+0x124>)
 8003b4a:	2246      	movs	r2, #70	; 0x46
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 8003b4e:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <snakeInit+0x124>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 8003b54:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <snakeInit+0x124>)
 8003b56:	2246      	movs	r2, #70	; 0x46
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	e010      	b.n	8003b82 <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 8003b60:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <snakeInit+0x124>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3305      	adds	r3, #5
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 8003b6e:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <snakeInit+0x124>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3305      	adds	r3, #5
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b88:	dbea      	blt.n	8003b60 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <snakeInit+0x124>)
 8003b8c:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <snakeInit+0x128>)
 8003b8e:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <snakeInit+0x124>)
 8003b92:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <snakeInit+0x12c>)
 8003b94:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <snakeInit+0x124>)
 8003b98:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <snakeInit+0x130>)
 8003b9a:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <snakeInit+0x124>)
 8003b9e:	4a29      	ldr	r2, [pc, #164]	; (8003c44 <snakeInit+0x134>)
 8003ba0:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <snakeInit+0x124>)
 8003ba4:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <snakeInit+0x138>)
 8003ba6:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <snakeInit+0x124>)
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <snakeInit+0x13c>)
 8003bac:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <snakeInit+0x124>)
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <snakeInit+0x124>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	e02c      	b.n	8003c1a <snakeInit+0x10a>
	{
		if (i == 0)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <snakeInit+0xbc>
			drawHeadSnake();
 8003bc6:	f7ff f835 	bl	8002c34 <drawHeadSnake>
 8003bca:	e023      	b.n	8003c14 <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <snakeInit+0x124>)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	3305      	adds	r3, #5
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	b298      	uxth	r0, r3
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <snakeInit+0x124>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3305      	adds	r3, #5
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <snakeInit+0x124>)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	3305      	adds	r3, #5
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3309      	adds	r3, #9
 8003bf8:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003bfa:	4c0e      	ldr	r4, [pc, #56]	; (8003c34 <snakeInit+0x124>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3305      	adds	r3, #5
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4423      	add	r3, r4
 8003c04:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3309      	adds	r3, #9
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2400      	movs	r4, #0
 8003c0e:	9400      	str	r4, [sp, #0]
 8003c10:	f7fd fe86 	bl	8001920 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	ddcf      	ble.n	8003bc0 <snakeInit+0xb0>
	}
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200001dc 	.word	0x200001dc
 8003c30:	2000009c 	.word	0x2000009c
 8003c34:	200001e0 	.word	0x200001e0
 8003c38:	080032c1 	.word	0x080032c1
 8003c3c:	08002e7d 	.word	0x08002e7d
 8003c40:	08003155 	.word	0x08003155
 8003c44:	08002fe9 	.word	0x08002fe9
 8003c48:	08003919 	.word	0x08003919
 8003c4c:	08003819 	.word	0x08003819

08003c50 <generateFruit>:

void generateFruit()
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 8003c56:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <generateFruit+0x22c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	f040 8109 	bne.w	8003e72 <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 8003c64:	f005 ff22 	bl	8009aac <rand>
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <generateFruit+0x230>)
 8003c6c:	fb83 2301 	smull	r2, r3, r3, r1
 8003c70:	109a      	asrs	r2, r3, #2
 8003c72:	17cb      	asrs	r3, r1, #31
 8003c74:	1ad2      	subs	r2, r2, r3
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	1aca      	subs	r2, r1, r3
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b7e      	ldr	r3, [pc, #504]	; (8003e84 <generateFruit+0x234>)
 8003c8c:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 8003c8e:	f005 ff0d 	bl	8009aac <rand>
 8003c92:	4601      	mov	r1, r0
 8003c94:	4b7c      	ldr	r3, [pc, #496]	; (8003e88 <generateFruit+0x238>)
 8003c96:	fb83 2301 	smull	r2, r3, r3, r1
 8003c9a:	10da      	asrs	r2, r3, #3
 8003c9c:	17cb      	asrs	r3, r1, #31
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009a      	lsls	r2, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	1aca      	subs	r2, r1, r3
 8003cac:	3207      	adds	r2, #7
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b74      	ldr	r3, [pc, #464]	; (8003e8c <generateFruit+0x23c>)
 8003cba:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	e021      	b.n	8003d06 <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 8003cc2:	4a73      	ldr	r2, [pc, #460]	; (8003e90 <generateFruit+0x240>)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3305      	adds	r3, #5
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <generateFruit+0x234>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d114      	bne.n	8003d00 <generateFruit+0xb0>
 8003cd6:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <generateFruit+0x240>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3305      	adds	r3, #5
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <generateFruit+0x23c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d10a      	bne.n	8003d00 <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 8003cea:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <generateFruit+0x234>)
 8003cec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cf0:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 8003cf2:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <generateFruit+0x23c>)
 8003cf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cf8:	601a      	str	r2, [r3, #0]
					remind = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
					break;
 8003cfe:	e007      	b.n	8003d10 <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3301      	adds	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <generateFruit+0x240>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dbd8      	blt.n	8003cc2 <generateFruit+0x72>
				}
			}
			if (remind)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 80a9 	bne.w	8003e6a <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	e07f      	b.n	8003e1e <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 8003d1e:	495d      	ldr	r1, [pc, #372]	; (8003e94 <generateFruit+0x244>)
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d139      	bne.n	8003da8 <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 8003d34:	4957      	ldr	r1, [pc, #348]	; (8003e94 <generateFruit+0x244>)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3304      	adds	r3, #4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b51      	ldr	r3, [pc, #324]	; (8003e8c <generateFruit+0x23c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d01d      	beq.n	8003d8a <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003d4e:	4951      	ldr	r1, [pc, #324]	; (8003e94 <generateFruit+0x244>)
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f103 020a 	add.w	r2, r3, #10
 8003d64:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <generateFruit+0x23c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d00e      	beq.n	8003d8a <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003d6c:	4949      	ldr	r1, [pc, #292]	; (8003e94 <generateFruit+0x244>)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1a3 020a 	sub.w	r2, r3, #10
 8003d82:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <generateFruit+0x23c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d146      	bne.n	8003e18 <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 8003d8a:	4942      	ldr	r1, [pc, #264]	; (8003e94 <generateFruit+0x244>)
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <generateFruit+0x234>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d13a      	bne.n	8003e18 <generateFruit+0x1c8>
					{
						remind = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
						break;
 8003da6:	e043      	b.n	8003e30 <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 8003da8:	493a      	ldr	r1, [pc, #232]	; (8003e94 <generateFruit+0x244>)
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <generateFruit+0x234>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d01b      	beq.n	8003df8 <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003dc0:	4934      	ldr	r1, [pc, #208]	; (8003e94 <generateFruit+0x244>)
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f103 020a 	add.w	r2, r3, #10
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <generateFruit+0x234>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d00d      	beq.n	8003df8 <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003ddc:	492d      	ldr	r1, [pc, #180]	; (8003e94 <generateFruit+0x244>)
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1a3 020a 	sub.w	r2, r3, #10
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <generateFruit+0x234>)
 8003df2:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d10f      	bne.n	8003e18 <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8003df8:	4926      	ldr	r1, [pc, #152]	; (8003e94 <generateFruit+0x244>)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3304      	adds	r3, #4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <generateFruit+0x23c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d102      	bne.n	8003e18 <generateFruit+0x1c8>
					{
						remind = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
						break;
 8003e16:	e00b      	b.n	8003e30 <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <generateFruit+0x244>)
 8003e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e24:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	f6ff af77 	blt.w	8003d1e <generateFruit+0xce>
					}
				}
			}
			if (remind)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11b      	bne.n	8003e6e <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <generateFruit+0x234>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	b298      	uxth	r0, r3
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <generateFruit+0x23c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	b299      	uxth	r1, r3
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <generateFruit+0x234>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3309      	adds	r3, #9
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <generateFruit+0x23c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3309      	adds	r3, #9
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003e5a:	9400      	str	r4, [sp, #0]
 8003e5c:	f7fd fd60 	bl	8001920 <lcd_Fill>
			flagEat = 0;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <generateFruit+0x22c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
			break;
 8003e66:	bf00      	nop
		}
	}
}
 8003e68:	e003      	b.n	8003e72 <generateFruit+0x222>
				continue;
 8003e6a:	bf00      	nop
 8003e6c:	e6f8      	b.n	8003c60 <generateFruit+0x10>
				continue;
 8003e6e:	bf00      	nop
		{
 8003e70:	e6f6      	b.n	8003c60 <generateFruit+0x10>
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000009c 	.word	0x2000009c
 8003e80:	2aaaaaab 	.word	0x2aaaaaab
 8003e84:	20000094 	.word	0x20000094
 8003e88:	51eb851f 	.word	0x51eb851f
 8003e8c:	20000098 	.word	0x20000098
 8003e90:	200001e0 	.word	0x200001e0
 8003e94:	200011ac 	.word	0x200011ac

08003e98 <generateWall>:

void generateWall()
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b08d      	sub	sp, #52	; 0x34
 8003e9c:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 8003e9e:	4b9c      	ldr	r3, [pc, #624]	; (8004110 <generateWall+0x278>)
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003ea8:	4a9a      	ldr	r2, [pc, #616]	; (8004114 <generateWall+0x27c>)
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	f280 82de 	bge.w	800446e <generateWall+0x5d6>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 8003eb2:	4b97      	ldr	r3, [pc, #604]	; (8004110 <generateWall+0x278>)
 8003eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb8:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 82d7 	bne.w	8004470 <generateWall+0x5d8>
	{
		while (1)
		{
			int remind = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 8003ec6:	f005 fdf1 	bl	8009aac <rand>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b92      	ldr	r3, [pc, #584]	; (8004118 <generateWall+0x280>)
 8003ece:	fb83 1302 	smull	r1, r3, r3, r2
 8003ed2:	1099      	asrs	r1, r3, #2
 8003ed4:	17d3      	asrs	r3, r2, #31
 8003ed6:	1acb      	subs	r3, r1, r3
 8003ed8:	2116      	movs	r1, #22
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 8003eec:	f005 fdde 	bl	8009aac <rand>
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	4b8a      	ldr	r3, [pc, #552]	; (800411c <generateWall+0x284>)
 8003ef4:	fb83 2301 	smull	r2, r3, r3, r1
 8003ef8:	440b      	add	r3, r1
 8003efa:	111a      	asrs	r2, r3, #4
 8003efc:	17cb      	asrs	r3, r1, #31
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	1aca      	subs	r2, r1, r3
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	e0e8      	b.n	80040f0 <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 8003f1e:	497c      	ldr	r1, [pc, #496]	; (8004110 <generateWall+0x278>)
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 8003f30:	4977      	ldr	r1, [pc, #476]	; (8004110 <generateWall+0x278>)
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3304      	adds	r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 8003f44:	4b72      	ldr	r3, [pc, #456]	; (8004110 <generateWall+0x278>)
 8003f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4a:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d166      	bne.n	8004020 <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 8003f52:	496f      	ldr	r1, [pc, #444]	; (8004110 <generateWall+0x278>)
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3308      	adds	r3, #8
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d120      	bne.n	8003faa <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b14      	subs	r3, #20
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d013      	beq.n	8003f9a <generateWall+0x102>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3314      	adds	r3, #20
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d00e      	beq.n	8003f9a <generateWall+0x102>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b0a      	subs	r3, #10
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d009      	beq.n	8003f9a <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d004      	beq.n	8003f9a <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 80a8 	bne.w	80040ea <generateWall+0x252>
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	f040 80a3 	bne.w	80040ea <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8003fa8:	e0ab      	b.n	8004102 <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b0a      	subs	r3, #10
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d008      	beq.n	8003fc6 <generateWall+0x12e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	330a      	adds	r3, #10
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d003      	beq.n	8003fc6 <generateWall+0x12e>
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d103      	bne.n	8003fce <generateWall+0x136>
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d025      	beq.n	800401a <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d008      	beq.n	8003fea <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	330a      	adds	r3, #10
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d003      	beq.n	8003fea <generateWall+0x152>
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d104      	bne.n	8003ff4 <generateWall+0x15c>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	3b0a      	subs	r3, #10
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d012      	beq.n	800401a <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d008      	beq.n	8004010 <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	330a      	adds	r3, #10
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d003      	beq.n	8004010 <generateWall+0x178>
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	d16c      	bne.n	80040ea <generateWall+0x252>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	330a      	adds	r3, #10
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	429a      	cmp	r2, r3
 8004018:	d167      	bne.n	80040ea <generateWall+0x252>
						{
							remind = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	e064      	b.n	80040ea <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 8004020:	493b      	ldr	r1, [pc, #236]	; (8004110 <generateWall+0x278>)
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3308      	adds	r3, #8
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d13a      	bne.n	80040ac <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3b0a      	subs	r3, #10
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d008      	beq.n	8004052 <generateWall+0x1ba>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	330a      	adds	r3, #10
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	429a      	cmp	r2, r3
 8004048:	d003      	beq.n	8004052 <generateWall+0x1ba>
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	429a      	cmp	r2, r3
 8004050:	d103      	bne.n	800405a <generateWall+0x1c2>
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	d025      	beq.n	80040a6 <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d008      	beq.n	8004076 <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	330a      	adds	r3, #10
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	d003      	beq.n	8004076 <generateWall+0x1de>
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	429a      	cmp	r2, r3
 8004074:	d104      	bne.n	8004080 <generateWall+0x1e8>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b0a      	subs	r3, #10
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	429a      	cmp	r2, r3
 800407e:	d012      	beq.n	80040a6 <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	429a      	cmp	r2, r3
 8004088:	d008      	beq.n	800409c <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	330a      	adds	r3, #10
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	429a      	cmp	r2, r3
 8004092:	d003      	beq.n	800409c <generateWall+0x204>
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	429a      	cmp	r2, r3
 800409a:	d126      	bne.n	80040ea <generateWall+0x252>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	330a      	adds	r3, #10
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d121      	bne.n	80040ea <generateWall+0x252>
						{
							remind = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80040aa:	e02a      	b.n	8004102 <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3b14      	subs	r3, #20
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d012      	beq.n	80040dc <generateWall+0x244>
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3314      	adds	r3, #20
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d00d      	beq.n	80040dc <generateWall+0x244>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	330a      	adds	r3, #10
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d008      	beq.n	80040dc <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d003      	beq.n	80040dc <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d106      	bne.n	80040ea <generateWall+0x252>
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d102      	bne.n	80040ea <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 80040e4:	2301      	movs	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80040e8:	e00b      	b.n	8004102 <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	3301      	adds	r3, #1
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <generateWall+0x278>)
 80040f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f6:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80040fa:	6a3a      	ldr	r2, [r7, #32]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f6ff af0e 	blt.w	8003f1e <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 81a8 	bne.w	800445a <generateWall+0x5c2>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	e049      	b.n	80041a4 <generateWall+0x30c>
 8004110:	200011ac 	.word	0x200011ac
 8004114:	200001a8 	.word	0x200001a8
 8004118:	2e8ba2e9 	.word	0x2e8ba2e9
 800411c:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 8004120:	4a60      	ldr	r2, [pc, #384]	; (80042a4 <generateWall+0x40c>)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3305      	adds	r3, #5
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 800412e:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <generateWall+0x40c>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	3305      	adds	r3, #5
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4413      	add	r3, r2
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 800413c:	4b5a      	ldr	r3, [pc, #360]	; (80042a8 <generateWall+0x410>)
 800413e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004142:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004146:	2b01      	cmp	r3, #1
 8004148:	d114      	bne.n	8004174 <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d125      	bne.n	800419e <generateWall+0x306>
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d009      	beq.n	800416e <generateWall+0x2d6>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3b0a      	subs	r3, #10
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d004      	beq.n	800416e <generateWall+0x2d6>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	330a      	adds	r3, #10
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d117      	bne.n	800419e <generateWall+0x306>
					{
						remind = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004172:	e01c      	b.n	80041ae <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d110      	bne.n	800419e <generateWall+0x306>
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d009      	beq.n	8004198 <generateWall+0x300>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	3b0a      	subs	r3, #10
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d004      	beq.n	8004198 <generateWall+0x300>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	330a      	adds	r3, #10
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	d102      	bne.n	800419e <generateWall+0x306>
					{
						remind = 1;
 8004198:	2301      	movs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 800419c:	e007      	b.n	80041ae <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <generateWall+0x40c>)
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	dbb8      	blt.n	8004120 <generateWall+0x288>
					}
				}
			}
			if (remind)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 8154 	bne.w	800445e <generateWall+0x5c6>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <generateWall+0x40c>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d842      	bhi.n	8004244 <generateWall+0x3ac>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <generateWall+0x32c>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	08004229 	.word	0x08004229
 80041c8:	0800420d 	.word	0x0800420d
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041d5 	.word	0x080041d5
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 80041d4:	4b33      	ldr	r3, [pc, #204]	; (80042a4 <generateWall+0x40c>)
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d134      	bne.n	8004248 <generateWall+0x3b0>
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <generateWall+0x40c>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	3b0a      	subs	r3, #10
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d12e      	bne.n	8004248 <generateWall+0x3b0>
					remind = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80041ee:	e02b      	b.n	8004248 <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <generateWall+0x40c>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d128      	bne.n	800424c <generateWall+0x3b4>
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <generateWall+0x40c>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	330a      	adds	r3, #10
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	429a      	cmp	r2, r3
 8004204:	d122      	bne.n	800424c <generateWall+0x3b4>
					remind = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800420a:	e01f      	b.n	800424c <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <generateWall+0x40c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	3b0a      	subs	r3, #10
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d11b      	bne.n	8004250 <generateWall+0x3b8>
 8004218:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <generateWall+0x40c>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	429a      	cmp	r2, r3
 8004220:	d116      	bne.n	8004250 <generateWall+0x3b8>
					remind = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004226:	e013      	b.n	8004250 <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <generateWall+0x40c>)
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	330a      	adds	r3, #10
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d10f      	bne.n	8004254 <generateWall+0x3bc>
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <generateWall+0x40c>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	429a      	cmp	r2, r3
 800423c:	d10a      	bne.n	8004254 <generateWall+0x3bc>
					remind= 1;
 800423e:	2301      	movs	r3, #1
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004242:	e007      	b.n	8004254 <generateWall+0x3bc>
				default:
					break;
 8004244:	bf00      	nop
 8004246:	e006      	b.n	8004256 <generateWall+0x3be>
				break;
 8004248:	bf00      	nop
 800424a:	e004      	b.n	8004256 <generateWall+0x3be>
				break;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <generateWall+0x3be>
				break;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <generateWall+0x3be>
				break;
 8004254:	bf00      	nop
			}
			if (remind)
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 8102 	bne.w	8004462 <generateWall+0x5ca>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <generateWall+0x410>)
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004268:	2b01      	cmp	r3, #1
 800426a:	d123      	bne.n	80042b4 <generateWall+0x41c>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <generateWall+0x414>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	429a      	cmp	r2, r3
 8004274:	d139      	bne.n	80042ea <generateWall+0x452>
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <generateWall+0x418>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	f000 80f2 	beq.w	8004466 <generateWall+0x5ce>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f1a3 020a 	sub.w	r2, r3, #10
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <generateWall+0x418>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	f000 80ea 	beq.w	8004466 <generateWall+0x5ce>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f103 020a 	add.w	r2, r3, #10
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <generateWall+0x418>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d124      	bne.n	80042ea <generateWall+0x452>
					continue;
 80042a0:	e0e1      	b.n	8004466 <generateWall+0x5ce>
 80042a2:	bf00      	nop
 80042a4:	200001e0 	.word	0x200001e0
 80042a8:	200011ac 	.word	0x200011ac
 80042ac:	20000094 	.word	0x20000094
 80042b0:	20000098 	.word	0x20000098
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 80042b4:	4b70      	ldr	r3, [pc, #448]	; (8004478 <generateWall+0x5e0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d115      	bne.n	80042ea <generateWall+0x452>
 80042be:	4b6f      	ldr	r3, [pc, #444]	; (800447c <generateWall+0x5e4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	f000 80d0 	beq.w	800446a <generateWall+0x5d2>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f1a3 020a 	sub.w	r2, r3, #10
 80042d0:	4b6a      	ldr	r3, [pc, #424]	; (800447c <generateWall+0x5e4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	f000 80c8 	beq.w	800446a <generateWall+0x5d2>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f103 020a 	add.w	r2, r3, #10
 80042e0:	4b66      	ldr	r3, [pc, #408]	; (800447c <generateWall+0x5e4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	f000 80c0 	beq.w	800446a <generateWall+0x5d2>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <generateWall+0x5e8>)
 80042ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f0:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80042f4:	4962      	ldr	r1, [pc, #392]	; (8004480 <generateWall+0x5e8>)
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 8004304:	4b5e      	ldr	r3, [pc, #376]	; (8004480 <generateWall+0x5e8>)
 8004306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430a:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 800430e:	495c      	ldr	r1, [pc, #368]	; (8004480 <generateWall+0x5e8>)
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3304      	adds	r3, #4
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	b298      	uxth	r0, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	b299      	uxth	r1, r3
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	b29b      	uxth	r3, r3
 800432c:	3309      	adds	r3, #9
 800432e:	b29a      	uxth	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	b29b      	uxth	r3, r3
 8004334:	3309      	adds	r3, #9
 8004336:	b29b      	uxth	r3, r3
 8004338:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800433c:	9400      	str	r4, [sp, #0]
 800433e:	f7fd faef 	bl	8001920 <lcd_Fill>
			if (wallObject.vertical == 1)
 8004342:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <generateWall+0x5e8>)
 8004344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004348:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800434c:	2b01      	cmp	r3, #1
 800434e:	d134      	bne.n	80043ba <generateWall+0x522>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	b298      	uxth	r0, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	b29b      	uxth	r3, r3
 8004358:	330a      	adds	r3, #10
 800435a:	b299      	uxth	r1, r3
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	b29b      	uxth	r3, r3
 8004360:	3309      	adds	r3, #9
 8004362:	b29a      	uxth	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	b29b      	uxth	r3, r3
 8004368:	3313      	adds	r3, #19
 800436a:	b29b      	uxth	r3, r3
 800436c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004370:	9400      	str	r4, [sp, #0]
 8004372:	f7fd fad5 	bl	8001920 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	b298      	uxth	r0, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b0a      	subs	r3, #10
 8004380:	b299      	uxth	r1, r3
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	b29b      	uxth	r3, r3
 8004386:	3309      	adds	r3, #9
 8004388:	b29a      	uxth	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004396:	9400      	str	r4, [sp, #0]
 8004398:	f7fd fac2 	bl	8001920 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 800439c:	4b38      	ldr	r3, [pc, #224]	; (8004480 <generateWall+0x5e8>)
 800439e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a2:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80043a6:	4936      	ldr	r1, [pc, #216]	; (8004480 <generateWall+0x5e8>)
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3308      	adds	r3, #8
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e033      	b.n	8004422 <generateWall+0x58a>
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	330a      	adds	r3, #10
 80043c0:	b298      	uxth	r0, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	b299      	uxth	r1, r3
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3313      	adds	r3, #19
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3309      	adds	r3, #9
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80043da:	9400      	str	r4, [sp, #0]
 80043dc:	f7fd faa0 	bl	8001920 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b0a      	subs	r3, #10
 80043e6:	b298      	uxth	r0, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	b299      	uxth	r1, r3
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3309      	adds	r3, #9
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004400:	9400      	str	r4, [sp, #0]
 8004402:	f7fd fa8d 	bl	8001920 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <generateWall+0x5e8>)
 8004408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004410:	491b      	ldr	r1, [pc, #108]	; (8004480 <generateWall+0x5e8>)
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3308      	adds	r3, #8
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 8004422:	4b17      	ldr	r3, [pc, #92]	; (8004480 <generateWall+0x5e8>)
 8004424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004428:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 800442c:	3301      	adds	r3, #1
 800442e:	4a14      	ldr	r2, [pc, #80]	; (8004480 <generateWall+0x5e8>)
 8004430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004434:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			wallObject.vertical = !wallObject.vertical;
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <generateWall+0x5e8>)
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <generateWall+0x5e8>)
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
			break;
 8004458:	e00a      	b.n	8004470 <generateWall+0x5d8>
				continue;
 800445a:	bf00      	nop
 800445c:	e531      	b.n	8003ec2 <generateWall+0x2a>
				continue;
 800445e:	bf00      	nop
 8004460:	e52f      	b.n	8003ec2 <generateWall+0x2a>
				continue;
 8004462:	bf00      	nop
 8004464:	e52d      	b.n	8003ec2 <generateWall+0x2a>
					continue;
 8004466:	bf00      	nop
 8004468:	e52b      	b.n	8003ec2 <generateWall+0x2a>
					continue;
 800446a:	bf00      	nop
		{
 800446c:	e529      	b.n	8003ec2 <generateWall+0x2a>
		return;
 800446e:	bf00      	nop
		}
	}
}
 8004470:	372c      	adds	r7, #44	; 0x2c
 8004472:	46bd      	mov	sp, r7
 8004474:	bd90      	pop	{r4, r7, pc}
 8004476:	bf00      	nop
 8004478:	20000098 	.word	0x20000098
 800447c:	20000094 	.word	0x20000094
 8004480:	200011ac 	.word	0x200011ac

08004484 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <timer_init+0x10>)
 800448a:	f003 fd2d 	bl	8007ee8 <HAL_TIM_Base_Start_IT>
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200029a8 	.word	0x200029a8

08004498 <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 80044a2:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <setTimerSnakeRun+0x2c>)
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <setTimerSnakeRun+0x2c>)
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <setTimerSnakeRun+0x30>)
 80044ae:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <setTimerSnakeRun+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	801a      	strh	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20002932 	.word	0x20002932
 80044c8:	20002930 	.word	0x20002930
 80044cc:	2000292e 	.word	0x2000292e

080044d0 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	4a07      	ldr	r2, [pc, #28]	; (8004504 <setTimerTiming+0x34>)
 80044e6:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <setTimerTiming+0x34>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a06      	ldr	r2, [pc, #24]	; (8004508 <setTimerTiming+0x38>)
 80044ee:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <setTimerTiming+0x3c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	801a      	strh	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000293c 	.word	0x2000293c
 8004508:	20002938 	.word	0x20002938
 800450c:	20002934 	.word	0x20002934

08004510 <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <setTimerDeTime+0x2c>)
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <setTimerDeTime+0x2c>)
 8004522:	881a      	ldrh	r2, [r3, #0]
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <setTimerDeTime+0x30>)
 8004526:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <setTimerDeTime+0x34>)
 800452a:	2200      	movs	r2, #0
 800452c:	801a      	strh	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20002944 	.word	0x20002944
 8004540:	20002942 	.word	0x20002942
 8004544:	20002940 	.word	0x20002940

08004548 <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <setTimerGenerateWall+0x2c>)
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <setTimerGenerateWall+0x2c>)
 800455a:	881a      	ldrh	r2, [r3, #0]
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <setTimerGenerateWall+0x30>)
 800455e:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <setTimerGenerateWall+0x34>)
 8004562:	2200      	movs	r2, #0
 8004564:	801a      	strh	r2, [r3, #0]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000294a 	.word	0x2000294a
 8004578:	20002948 	.word	0x20002948
 800457c:	20002946 	.word	0x20002946

08004580 <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <setTimerButton+0x2c>)
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <setTimerButton+0x2c>)
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <setTimerButton+0x30>)
 8004596:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <setTimerButton+0x34>)
 800459a:	2200      	movs	r2, #0
 800459c:	801a      	strh	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	2000292c 	.word	0x2000292c
 80045b0:	2000292a 	.word	0x2000292a
 80045b4:	20002928 	.word	0x20002928

080045b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c8:	d161      	bne.n	800468e <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(timerForSnakeRun > 0)
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timerForSnakeRun--;
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80045dc:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flagForSnakeRun = 1;
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 80045ec:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80045f2:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d010      	beq.n	800461e <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timerForButton--;
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004606:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 8004608:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flagForButton= 1;
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004612:	2201      	movs	r2, #1
 8004614:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 8004616:	4b25      	ldr	r3, [pc, #148]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800461c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			timerForTiming--;
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800462e:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				flagForTiming = 1;
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800463a:	2201      	movs	r2, #1
 800463c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_PeriodElapsedCallback+0xa8>
		{
			timerForDeTime--;
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004650:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				flagForDeTime = 1;
 800465a:	4b18      	ldr	r3, [pc, #96]	; (80046bc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800465c:	2201      	movs	r2, #1
 800465e:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d010      	beq.n	800468a <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			timerForGenerateWall--;
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004672:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <HAL_TIM_PeriodElapsedCallback+0xd2>
			{
				flagForGenerateWall= 1;
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800467e:	2201      	movs	r2, #1
 8004680:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004684:	881a      	ldrh	r2, [r3, #0]
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004688:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 800468a:	f7fd fd9d 	bl	80021c8 <led7_Scan>
	}
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20002930 	.word	0x20002930
 800469c:	2000292e 	.word	0x2000292e
 80046a0:	20002932 	.word	0x20002932
 80046a4:	2000292a 	.word	0x2000292a
 80046a8:	20002928 	.word	0x20002928
 80046ac:	2000292c 	.word	0x2000292c
 80046b0:	20002938 	.word	0x20002938
 80046b4:	20002934 	.word	0x20002934
 80046b8:	20002942 	.word	0x20002942
 80046bc:	20002940 	.word	0x20002940
 80046c0:	20002948 	.word	0x20002948
 80046c4:	20002946 	.word	0x20002946
 80046c8:	2000294a 	.word	0x2000294a

080046cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80046d0:	4b17      	ldr	r3, [pc, #92]	; (8004730 <MX_SPI1_Init+0x64>)
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <MX_SPI1_Init+0x68>)
 80046d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <MX_SPI1_Init+0x64>)
 80046d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <MX_SPI1_Init+0x64>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <MX_SPI1_Init+0x64>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <MX_SPI1_Init+0x64>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <MX_SPI1_Init+0x64>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046f6:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <MX_SPI1_Init+0x64>)
 80046f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <MX_SPI1_Init+0x64>)
 8004700:	2200      	movs	r2, #0
 8004702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <MX_SPI1_Init+0x64>)
 8004706:	2200      	movs	r2, #0
 8004708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <MX_SPI1_Init+0x64>)
 800470c:	2200      	movs	r2, #0
 800470e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <MX_SPI1_Init+0x64>)
 8004712:	2200      	movs	r2, #0
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <MX_SPI1_Init+0x64>)
 8004718:	220a      	movs	r2, #10
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800471c:	4804      	ldr	r0, [pc, #16]	; (8004730 <MX_SPI1_Init+0x64>)
 800471e:	f002 fda3 	bl	8007268 <HAL_SPI_Init>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004728:	f7fd ffae 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800472c:	bf00      	nop
 800472e:	bd80      	pop	{r7, pc}
 8004730:	2000294c 	.word	0x2000294c
 8004734:	40013000 	.word	0x40013000

08004738 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a19      	ldr	r2, [pc, #100]	; (80047bc <HAL_SPI_MspInit+0x84>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d12b      	bne.n	80047b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_SPI_MspInit+0x88>)
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <HAL_SPI_MspInit+0x88>)
 8004764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004768:	6453      	str	r3, [r2, #68]	; 0x44
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_SPI_MspInit+0x88>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_SPI_MspInit+0x88>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <HAL_SPI_MspInit+0x88>)
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	6313      	str	r3, [r2, #48]	; 0x30
 8004786:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <HAL_SPI_MspInit+0x88>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004792:	2338      	movs	r3, #56	; 0x38
 8004794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004796:	2302      	movs	r3, #2
 8004798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479e:	2303      	movs	r3, #3
 80047a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047a2:	2305      	movs	r3, #5
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	4619      	mov	r1, r3
 80047ac:	4805      	ldr	r0, [pc, #20]	; (80047c4 <HAL_SPI_MspInit+0x8c>)
 80047ae:	f001 ff0d 	bl	80065cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80047b2:	bf00      	nop
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40013000 	.word	0x40013000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40020400 	.word	0x40020400

080047c8 <startUI>:
#include "software_timer.h"
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"

void startUI(){
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b093      	sub	sp, #76	; 0x4c
 80047cc:	af04      	add	r7, sp, #16
	char str1[50] = "";
 80047ce:	2300      	movs	r3, #0
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	222e      	movs	r2, #46	; 0x2e
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f005 f931 	bl	8009a40 <memset>

	lcd_Clear(BLACK);
 80047de:	2000      	movs	r0, #0
 80047e0:	f7fd f86c 	bl	80018bc <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80047e4:	4b32      	ldr	r3, [pc, #200]	; (80048b0 <startUI+0xe8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b298      	uxth	r0, r3
 80047ea:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <startUI+0xec>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b299      	uxth	r1, r3
 80047f0:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <startUI+0xf0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	4b31      	ldr	r3, [pc, #196]	; (80048bc <startUI+0xf4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4c30      	ldr	r4, [pc, #192]	; (80048c0 <startUI+0xf8>)
 80047fe:	9400      	str	r4, [sp, #0]
 8004800:	f7fd fa66 	bl	8001cd0 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8004804:	2300      	movs	r3, #0
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	2318      	movs	r3, #24
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	f248 4330 	movw	r3, #33840	; 0x8430
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004816:	4a2b      	ldr	r2, [pc, #172]	; (80048c4 <startUI+0xfc>)
 8004818:	2137      	movs	r1, #55	; 0x37
 800481a:	203c      	movs	r0, #60	; 0x3c
 800481c:	f7fd fc32 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 8004820:	2300      	movs	r3, #0
 8004822:	9302      	str	r3, [sp, #8]
 8004824:	2318      	movs	r3, #24
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	f248 4330 	movw	r3, #33840	; 0x8430
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004832:	4a25      	ldr	r2, [pc, #148]	; (80048c8 <startUI+0x100>)
 8004834:	2164      	movs	r1, #100	; 0x64
 8004836:	2028      	movs	r0, #40	; 0x28
 8004838:	f7fd fc24 	bl	8002084 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 800483c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	23b4      	movs	r3, #180	; 0xb4
 8004844:	22b4      	movs	r2, #180	; 0xb4
 8004846:	2196      	movs	r1, #150	; 0x96
 8004848:	203c      	movs	r0, #60	; 0x3c
 800484a:	f7fd f93a 	bl	8001ac2 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <startUI+0x104>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd ff1e 	bl	8002694 <convert2str>
 8004858:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 800485a:	463b      	mov	r3, r7
 800485c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800485e:	4618      	mov	r0, r3
 8004860:	f005 f996 	bl	8009b90 <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8004864:	463a      	mov	r2, r7
 8004866:	2301      	movs	r3, #1
 8004868:	9302      	str	r3, [sp, #8]
 800486a:	2318      	movs	r3, #24
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004878:	2198      	movs	r1, #152	; 0x98
 800487a:	2000      	movs	r0, #0
 800487c:	f7fd fc66 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8004880:	2300      	movs	r3, #0
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	2318      	movs	r3, #24
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	f248 4330 	movw	r3, #33840	; 0x8430
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004892:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <startUI+0x108>)
 8004894:	21e6      	movs	r1, #230	; 0xe6
 8004896:	2050      	movs	r0, #80	; 0x50
 8004898:	f7fd fbf4 	bl	8002084 <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 800489c:	2300      	movs	r3, #0
 800489e:	2200      	movs	r2, #0
 80048a0:	2100      	movs	r1, #0
 80048a2:	2000      	movs	r0, #0
 80048a4:	f001 faba 	bl	8005e1c <show7seg>
}
 80048a8:	bf00      	nop
 80048aa:	373c      	adds	r7, #60	; 0x3c
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd90      	pop	{r4, r7, pc}
 80048b0:	20000074 	.word	0x20000074
 80048b4:	20000078 	.word	0x20000078
 80048b8:	2000007c 	.word	0x2000007c
 80048bc:	20000080 	.word	0x20000080
 80048c0:	0800e188 	.word	0x0800e188
 80048c4:	0800b0f4 	.word	0x0800b0f4
 80048c8:	0800b104 	.word	0x0800b104
 80048cc:	200001a4 	.word	0x200001a4
 80048d0:	0800b114 	.word	0x0800b114

080048d4 <eraseArrow>:

void eraseArrow()
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 80048da:	2300      	movs	r3, #0
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	f240 134b 	movw	r3, #331	; 0x14b
 80048e2:	22dd      	movs	r2, #221	; 0xdd
 80048e4:	21be      	movs	r1, #190	; 0xbe
 80048e6:	20b4      	movs	r0, #180	; 0xb4
 80048e8:	f7fd f81a 	bl	8001920 <lcd_Fill>
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <drawArrow>:

void drawArrow()
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 80048fa:	f7ff ffeb 	bl	80048d4 <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <drawArrow+0x98>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	b298      	uxth	r0, r3
 8004904:	4b22      	ldr	r3, [pc, #136]	; (8004990 <drawArrow+0x9c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b299      	uxth	r1, r3
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <drawArrow+0xa0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29a      	uxth	r2, r3
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <drawArrow+0xa4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800491a:	9400      	str	r4, [sp, #0]
 800491c:	f7fd f84d 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8004920:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <drawArrow+0xa0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	b298      	uxth	r0, r3
 8004926:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <drawArrow+0xa4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	b299      	uxth	r1, r3
 800492c:	4b17      	ldr	r3, [pc, #92]	; (800498c <drawArrow+0x98>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b29c      	uxth	r4, r3
 8004932:	4b19      	ldr	r3, [pc, #100]	; (8004998 <drawArrow+0xa4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	4b14      	ldr	r3, [pc, #80]	; (8004990 <drawArrow+0x9c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494a:	9200      	str	r2, [sp, #0]
 800494c:	4622      	mov	r2, r4
 800494e:	f7fd f834 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <drawArrow+0x98>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	b298      	uxth	r0, r3
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <drawArrow+0x9c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	b299      	uxth	r1, r3
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <drawArrow+0x98>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29c      	uxth	r4, r3
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <drawArrow+0xa4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <drawArrow+0x9c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800497c:	9200      	str	r2, [sp, #0]
 800497e:	4622      	mov	r2, r4
 8004980:	f7fd f81b 	bl	80019ba <lcd_DrawLine>
}
 8004984:	bf00      	nop
 8004986:	3704      	adds	r7, #4
 8004988:	46bd      	mov	sp, r7
 800498a:	bd90      	pop	{r4, r7, pc}
 800498c:	20000008 	.word	0x20000008
 8004990:	20000010 	.word	0x20000010
 8004994:	20000004 	.word	0x20000004
 8004998:	2000000c 	.word	0x2000000c

0800499c <arrowInPickMode>:

void arrowInPickMode()
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 80049a2:	4b99      	ldr	r3, [pc, #612]	; (8004c08 <arrowInPickMode+0x26c>)
 80049a4:	88db      	ldrh	r3, [r3, #6]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d117      	bne.n	80049da <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 80049aa:	4b98      	ldr	r3, [pc, #608]	; (8004c0c <arrowInPickMode+0x270>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 80049b0:	4b97      	ldr	r3, [pc, #604]	; (8004c10 <arrowInPickMode+0x274>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d009      	beq.n	80049cc <arrowInPickMode+0x30>
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	dc11      	bgt.n	80049e0 <arrowInPickMode+0x44>
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d00e      	beq.n	80049de <arrowInPickMode+0x42>
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d10d      	bne.n	80049e0 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 80049c4:	4b92      	ldr	r3, [pc, #584]	; (8004c10 <arrowInPickMode+0x274>)
 80049c6:	2203      	movs	r2, #3
 80049c8:	601a      	str	r2, [r3, #0]
			break;
 80049ca:	e009      	b.n	80049e0 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 80049cc:	4b90      	ldr	r3, [pc, #576]	; (8004c10 <arrowInPickMode+0x274>)
 80049ce:	2204      	movs	r2, #4
 80049d0:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 80049d2:	4b90      	ldr	r3, [pc, #576]	; (8004c14 <arrowInPickMode+0x278>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
			break;
 80049d8:	e002      	b.n	80049e0 <arrowInPickMode+0x44>
		}

	}
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <arrowInPickMode+0x44>
			break;
 80049de:	bf00      	nop
	if(button_count[7] == 1)
 80049e0:	4b89      	ldr	r3, [pc, #548]	; (8004c08 <arrowInPickMode+0x26c>)
 80049e2:	89db      	ldrh	r3, [r3, #14]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d118      	bne.n	8004a1a <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <arrowInPickMode+0x270>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <arrowInPickMode+0x274>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d013      	beq.n	8004a1e <arrowInPickMode+0x82>
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	dc12      	bgt.n	8004a20 <arrowInPickMode+0x84>
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d002      	beq.n	8004a04 <arrowInPickMode+0x68>
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d007      	beq.n	8004a12 <arrowInPickMode+0x76>
 8004a02:	e00d      	b.n	8004a20 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 8004a04:	4b82      	ldr	r3, [pc, #520]	; (8004c10 <arrowInPickMode+0x274>)
 8004a06:	2204      	movs	r2, #4
 8004a08:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 8004a0a:	4b82      	ldr	r3, [pc, #520]	; (8004c14 <arrowInPickMode+0x278>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
			break;
 8004a10:	e006      	b.n	8004a20 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 8004a12:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <arrowInPickMode+0x274>)
 8004a14:	2205      	movs	r2, #5
 8004a16:	601a      	str	r2, [r3, #0]
			break;
 8004a18:	e002      	b.n	8004a20 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <arrowInPickMode+0x84>
			break;
 8004a1e:	bf00      	nop
	if(flagChange == 1)
 8004a20:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <arrowInPickMode+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 814d 	bne.w	8004cc4 <arrowInPickMode+0x328>
	{
		switch (arrowMode)
 8004a2a:	4b79      	ldr	r3, [pc, #484]	; (8004c10 <arrowInPickMode+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	f000 80fc 	beq.w	8004c2c <arrowInPickMode+0x290>
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	f300 8142 	bgt.w	8004cbe <arrowInPickMode+0x322>
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d002      	beq.n	8004a44 <arrowInPickMode+0xa8>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d04f      	beq.n	8004ae2 <arrowInPickMode+0x146>
 8004a42:	e13c      	b.n	8004cbe <arrowInPickMode+0x322>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 8004a44:	4b74      	ldr	r3, [pc, #464]	; (8004c18 <arrowInPickMode+0x27c>)
 8004a46:	22d2      	movs	r2, #210	; 0xd2
 8004a48:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 8004a4a:	4b74      	ldr	r3, [pc, #464]	; (8004c1c <arrowInPickMode+0x280>)
 8004a4c:	22be      	movs	r2, #190	; 0xbe
 8004a4e:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004a58:	22f0      	movs	r2, #240	; 0xf0
 8004a5a:	21b4      	movs	r1, #180	; 0xb4
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fc ff5f 	bl	8001920 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004a62:	2300      	movs	r3, #0
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	2318      	movs	r3, #24
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	f248 4330 	movw	r3, #33840	; 0x8430
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a74:	4a6a      	ldr	r2, [pc, #424]	; (8004c20 <arrowInPickMode+0x284>)
 8004a76:	21c8      	movs	r1, #200	; 0xc8
 8004a78:	200a      	movs	r0, #10
 8004a7a:	f7fd fb03 	bl	8002084 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9302      	str	r3, [sp, #8]
 8004a82:	2318      	movs	r3, #24
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	f248 4330 	movw	r3, #33840	; 0x8430
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a90:	4a64      	ldr	r2, [pc, #400]	; (8004c24 <arrowInPickMode+0x288>)
 8004a92:	21fa      	movs	r1, #250	; 0xfa
 8004a94:	200a      	movs	r0, #10
 8004a96:	f7fd faf5 	bl	8002084 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004aa4:	2282      	movs	r2, #130	; 0x82
 8004aa6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004aaa:	206e      	movs	r0, #110	; 0x6e
 8004aac:	f7fc ff85 	bl	80019ba <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004aba:	2278      	movs	r2, #120	; 0x78
 8004abc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004ac0:	206e      	movs	r0, #110	; 0x6e
 8004ac2:	f7fc ff7a 	bl	80019ba <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ad0:	2282      	movs	r2, #130	; 0x82
 8004ad2:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004ad6:	2078      	movs	r0, #120	; 0x78
 8004ad8:	f7fc ff6f 	bl	80019ba <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8004adc:	f7ff ff0a 	bl	80048f4 <drawArrow>
			break;
 8004ae0:	e0ed      	b.n	8004cbe <arrowInPickMode+0x322>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004aea:	22f0      	movs	r2, #240	; 0xf0
 8004aec:	21b4      	movs	r1, #180	; 0xb4
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7fc ff16 	bl	8001920 <lcd_Fill>
			if(flagUpDOwn == 0)
 8004af4:	4b47      	ldr	r3, [pc, #284]	; (8004c14 <arrowInPickMode+0x278>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d13d      	bne.n	8004b78 <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 8004afc:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <arrowInPickMode+0x27c>)
 8004afe:	22d2      	movs	r2, #210	; 0xd2
 8004b00:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <arrowInPickMode+0x280>)
 8004b04:	22be      	movs	r2, #190	; 0xbe
 8004b06:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	2318      	movs	r3, #24
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b1a:	4a42      	ldr	r2, [pc, #264]	; (8004c24 <arrowInPickMode+0x288>)
 8004b1c:	21c8      	movs	r1, #200	; 0xc8
 8004b1e:	200a      	movs	r0, #10
 8004b20:	f7fd fab0 	bl	8002084 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 8004b24:	2300      	movs	r3, #0
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	2318      	movs	r3, #24
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <arrowInPickMode+0x28c>)
 8004b38:	21fa      	movs	r1, #250	; 0xfa
 8004b3a:	200a      	movs	r0, #10
 8004b3c:	f7fd faa2 	bl	8002084 <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	23be      	movs	r3, #190	; 0xbe
 8004b48:	2282      	movs	r2, #130	; 0x82
 8004b4a:	21be      	movs	r1, #190	; 0xbe
 8004b4c:	206e      	movs	r0, #110	; 0x6e
 8004b4e:	f7fc ff34 	bl	80019ba <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	23b4      	movs	r3, #180	; 0xb4
 8004b5a:	2278      	movs	r2, #120	; 0x78
 8004b5c:	21be      	movs	r1, #190	; 0xbe
 8004b5e:	206e      	movs	r0, #110	; 0x6e
 8004b60:	f7fc ff2b 	bl	80019ba <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	23be      	movs	r3, #190	; 0xbe
 8004b6c:	2282      	movs	r2, #130	; 0x82
 8004b6e:	21b4      	movs	r1, #180	; 0xb4
 8004b70:	2078      	movs	r0, #120	; 0x78
 8004b72:	f7fc ff22 	bl	80019ba <lcd_DrawLine>
 8004b76:	e043      	b.n	8004c00 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 8004b78:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <arrowInPickMode+0x27c>)
 8004b7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b7e:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8004b80:	4b26      	ldr	r3, [pc, #152]	; (8004c1c <arrowInPickMode+0x280>)
 8004b82:	22f0      	movs	r2, #240	; 0xf0
 8004b84:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8004b86:	2300      	movs	r3, #0
 8004b88:	9302      	str	r3, [sp, #8]
 8004b8a:	2318      	movs	r3, #24
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b98:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <arrowInPickMode+0x284>)
 8004b9a:	21c8      	movs	r1, #200	; 0xc8
 8004b9c:	200a      	movs	r0, #10
 8004b9e:	f7fd fa71 	bl	8002084 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9302      	str	r3, [sp, #8]
 8004ba6:	2318      	movs	r3, #24
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	f248 4330 	movw	r3, #33840	; 0x8430
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004bb4:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <arrowInPickMode+0x288>)
 8004bb6:	21fa      	movs	r1, #250	; 0xfa
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f7fd fa63 	bl	8002084 <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004bc8:	2282      	movs	r2, #130	; 0x82
 8004bca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004bce:	206e      	movs	r0, #110	; 0x6e
 8004bd0:	f7fc fef3 	bl	80019ba <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004bde:	2278      	movs	r2, #120	; 0x78
 8004be0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004be4:	206e      	movs	r0, #110	; 0x6e
 8004be6:	f7fc fee8 	bl	80019ba <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004bf4:	2282      	movs	r2, #130	; 0x82
 8004bf6:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004bfa:	2078      	movs	r0, #120	; 0x78
 8004bfc:	f7fc fedd 	bl	80019ba <lcd_DrawLine>
			}

			drawArrow();
 8004c00:	f7ff fe78 	bl	80048f4 <drawArrow>
			break;
 8004c04:	e05b      	b.n	8004cbe <arrowInPickMode+0x322>
 8004c06:	bf00      	nop
 8004c08:	2000012c 	.word	0x2000012c
 8004c0c:	200001b4 	.word	0x200001b4
 8004c10:	20000014 	.word	0x20000014
 8004c14:	200001b0 	.word	0x200001b0
 8004c18:	2000000c 	.word	0x2000000c
 8004c1c:	20000010 	.word	0x20000010
 8004c20:	0800b11c 	.word	0x0800b11c
 8004c24:	0800b12c 	.word	0x0800b12c
 8004c28:	0800b13c 	.word	0x0800b13c
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <arrowInPickMode+0x330>)
 8004c2e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c32:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 8004c34:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <arrowInPickMode+0x334>)
 8004c36:	22f0      	movs	r2, #240	; 0xf0
 8004c38:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004c42:	22f0      	movs	r2, #240	; 0xf0
 8004c44:	21b4      	movs	r1, #180	; 0xb4
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7fc fe6a 	bl	8001920 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9302      	str	r3, [sp, #8]
 8004c50:	2318      	movs	r3, #24
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <arrowInPickMode+0x338>)
 8004c60:	21c8      	movs	r1, #200	; 0xc8
 8004c62:	200a      	movs	r0, #10
 8004c64:	f7fd fa0e 	bl	8002084 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	2318      	movs	r3, #24
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c7a:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <arrowInPickMode+0x33c>)
 8004c7c:	21fa      	movs	r1, #250	; 0xfa
 8004c7e:	200a      	movs	r0, #10
 8004c80:	f7fd fa00 	bl	8002084 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	23be      	movs	r3, #190	; 0xbe
 8004c8c:	2282      	movs	r2, #130	; 0x82
 8004c8e:	21be      	movs	r1, #190	; 0xbe
 8004c90:	206e      	movs	r0, #110	; 0x6e
 8004c92:	f7fc fe92 	bl	80019ba <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	23b4      	movs	r3, #180	; 0xb4
 8004c9e:	2278      	movs	r2, #120	; 0x78
 8004ca0:	21be      	movs	r1, #190	; 0xbe
 8004ca2:	206e      	movs	r0, #110	; 0x6e
 8004ca4:	f7fc fe89 	bl	80019ba <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	23be      	movs	r3, #190	; 0xbe
 8004cb0:	2282      	movs	r2, #130	; 0x82
 8004cb2:	21b4      	movs	r1, #180	; 0xb4
 8004cb4:	2078      	movs	r0, #120	; 0x78
 8004cb6:	f7fc fe80 	bl	80019ba <lcd_DrawLine>

			// draw arrow
			drawArrow();
 8004cba:	f7ff fe1b 	bl	80048f4 <drawArrow>
		}
		flagChange = 0;
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <arrowInPickMode+0x340>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2000000c 	.word	0x2000000c
 8004cd0:	20000010 	.word	0x20000010
 8004cd4:	0800b12c 	.word	0x0800b12c
 8004cd8:	0800b13c 	.word	0x0800b13c
 8004cdc:	200001b4 	.word	0x200001b4

08004ce0 <pickMode>:

void pickMode(uint16_t id){
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b095      	sub	sp, #84	; 0x54
 8004ce4:	af04      	add	r7, sp, #16
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8004cea:	2000      	movs	r0, #0
 8004cec:	f7fc fde6 	bl	80018bc <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8004cf0:	4b4e      	ldr	r3, [pc, #312]	; (8004e2c <pickMode+0x14c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	b298      	uxth	r0, r3
 8004cf6:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <pickMode+0x150>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	b299      	uxth	r1, r3
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <pickMode+0x154>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	4b4d      	ldr	r3, [pc, #308]	; (8004e38 <pickMode+0x158>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4c4c      	ldr	r4, [pc, #304]	; (8004e3c <pickMode+0x15c>)
 8004d0a:	9400      	str	r4, [sp, #0]
 8004d0c:	f7fc ffe0 	bl	8001cd0 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8004d10:	2300      	movs	r3, #0
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	2318      	movs	r3, #24
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	f248 4330 	movw	r3, #33840	; 0x8430
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d22:	4a47      	ldr	r2, [pc, #284]	; (8004e40 <pickMode+0x160>)
 8004d24:	2137      	movs	r1, #55	; 0x37
 8004d26:	203c      	movs	r0, #60	; 0x3c
 8004d28:	f7fd f9ac 	bl	8002084 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8004d2c:	4a45      	ldr	r2, [pc, #276]	; (8004e44 <pickMode+0x164>)
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d36:	6018      	str	r0, [r3, #0]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	8019      	strh	r1, [r3, #0]
 8004d3c:	f107 030e 	add.w	r3, r7, #14
 8004d40:	222c      	movs	r2, #44	; 0x2c
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f004 fe7b 	bl	8009a40 <memset>
	char *str2 = convert2str(id);
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fd fca1 	bl	8002694 <convert2str>
 8004d52:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f004 ff18 	bl	8009b90 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8004d60:	f107 0208 	add.w	r2, r7, #8
 8004d64:	2300      	movs	r3, #0
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	2318      	movs	r3, #24
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	f248 4330 	movw	r3, #33840	; 0x8430
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d76:	2164      	movs	r1, #100	; 0x64
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7fd f9e7 	bl	800214c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	2318      	movs	r3, #24
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	f248 4330 	movw	r3, #33840	; 0x8430
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d90:	4a2d      	ldr	r2, [pc, #180]	; (8004e48 <pickMode+0x168>)
 8004d92:	2196      	movs	r1, #150	; 0x96
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fd f9d9 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9302      	str	r3, [sp, #8]
 8004d9e:	2318      	movs	r3, #24
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	f248 4330 	movw	r3, #33840	; 0x8430
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004dac:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <pickMode+0x16c>)
 8004dae:	21c8      	movs	r1, #200	; 0xc8
 8004db0:	200a      	movs	r0, #10
 8004db2:	f7fd f967 	bl	8002084 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004db6:	2300      	movs	r3, #0
 8004db8:	9302      	str	r3, [sp, #8]
 8004dba:	2318      	movs	r3, #24
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	f248 4330 	movw	r3, #33840	; 0x8430
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <pickMode+0x170>)
 8004dca:	21fa      	movs	r1, #250	; 0xfa
 8004dcc:	200a      	movs	r0, #10
 8004dce:	f7fd f959 	bl	8002084 <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <pickMode+0x174>)
 8004dd4:	22d2      	movs	r2, #210	; 0xd2
 8004dd6:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 8004dd8:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <pickMode+0x178>)
 8004dda:	22be      	movs	r2, #190	; 0xbe
 8004ddc:	601a      	str	r2, [r3, #0]
	drawArrow();
 8004dde:	f7ff fd89 	bl	80048f4 <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004dec:	2282      	movs	r2, #130	; 0x82
 8004dee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004df2:	206e      	movs	r0, #110	; 0x6e
 8004df4:	f7fc fde1 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004e02:	2278      	movs	r2, #120	; 0x78
 8004e04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004e08:	206e      	movs	r0, #110	; 0x6e
 8004e0a:	f7fc fdd6 	bl	80019ba <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e18:	2282      	movs	r2, #130	; 0x82
 8004e1a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004e1e:	2078      	movs	r0, #120	; 0x78
 8004e20:	f7fc fdcb 	bl	80019ba <lcd_DrawLine>

}
 8004e24:	bf00      	nop
 8004e26:	3744      	adds	r7, #68	; 0x44
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	20000074 	.word	0x20000074
 8004e30:	20000078 	.word	0x20000078
 8004e34:	2000007c 	.word	0x2000007c
 8004e38:	20000080 	.word	0x20000080
 8004e3c:	0800e188 	.word	0x0800e188
 8004e40:	0800b0f4 	.word	0x0800b0f4
 8004e44:	0800b154 	.word	0x0800b154
 8004e48:	0800b14c 	.word	0x0800b14c
 8004e4c:	0800b11c 	.word	0x0800b11c
 8004e50:	0800b12c 	.word	0x0800b12c
 8004e54:	2000000c 	.word	0x2000000c
 8004e58:	20000010 	.word	0x20000010

08004e5c <beginStartGame>:

void beginStartGame()
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b094      	sub	sp, #80	; 0x50
 8004e60:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8004e62:	4ba7      	ldr	r3, [pc, #668]	; (8005100 <beginStartGame+0x2a4>)
 8004e64:	8b9b      	ldrh	r3, [r3, #28]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	f040 81a9 	bne.w	80051be <beginStartGame+0x362>
	{
		switch (statusGame) {
 8004e6c:	4ba5      	ldr	r3, [pc, #660]	; (8005104 <beginStartGame+0x2a8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b0a      	cmp	r3, #10
 8004e72:	f200 81a6 	bhi.w	80051c2 <beginStartGame+0x366>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <beginStartGame+0x20>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	08004ecf 	.word	0x08004ecf
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	080051c3 	.word	0x080051c3
 8004e8c:	080051c3 	.word	0x080051c3
 8004e90:	080051c3 	.word	0x080051c3
 8004e94:	080050bb 	.word	0x080050bb
 8004e98:	08004fcb 	.word	0x08004fcb
 8004e9c:	08004f4d 	.word	0x08004f4d
 8004ea0:	08004f83 	.word	0x08004f83
 8004ea4:	08005153 	.word	0x08005153
			case INIT:
				statusGame = STARTMODE;
 8004ea8:	4b96      	ldr	r3, [pc, #600]	; (8005104 <beginStartGame+0x2a8>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
				ID = 0;
 8004eae:	4b96      	ldr	r3, [pc, #600]	; (8005108 <beginStartGame+0x2ac>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8004eb4:	4b95      	ldr	r3, [pc, #596]	; (800510c <beginStartGame+0x2b0>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8004eba:	4b95      	ldr	r3, [pc, #596]	; (8005110 <beginStartGame+0x2b4>)
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8004ec0:	4b94      	ldr	r3, [pc, #592]	; (8005114 <beginStartGame+0x2b8>)
 8004ec2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ec6:	801a      	strh	r2, [r3, #0]
				startUI();
 8004ec8:	f7ff fc7e 	bl	80047c8 <startUI>
				break;
 8004ecc:	e17e      	b.n	80051cc <beginStartGame+0x370>
			case STARTMODE:
				statusGame = PICKMODE;
 8004ece:	4b8d      	ldr	r3, [pc, #564]	; (8005104 <beginStartGame+0x2a8>)
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8004ed4:	4b8c      	ldr	r3, [pc, #560]	; (8005108 <beginStartGame+0x2ac>)
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff01 	bl	8004ce0 <pickMode>
				break;
 8004ede:	e175      	b.n	80051cc <beginStartGame+0x370>
			case PICKMODE:
				switch (arrowMode)
 8004ee0:	4b8b      	ldr	r3, [pc, #556]	; (8005110 <beginStartGame+0x2b4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b05      	cmp	r3, #5
 8004ee6:	d024      	beq.n	8004f32 <beginStartGame+0xd6>
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	f300 816c 	bgt.w	80051c6 <beginStartGame+0x36a>
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d002      	beq.n	8004ef8 <beginStartGame+0x9c>
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d011      	beq.n	8004f1a <beginStartGame+0xbe>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 8004ef6:	e166      	b.n	80051c6 <beginStartGame+0x36a>
					oldStatusGame = NORMALMODE;
 8004ef8:	4b87      	ldr	r3, [pc, #540]	; (8005118 <beginStartGame+0x2bc>)
 8004efa:	2203      	movs	r2, #3
 8004efc:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 8004efe:	4b81      	ldr	r3, [pc, #516]	; (8005104 <beginStartGame+0x2a8>)
 8004f00:	2203      	movs	r2, #3
 8004f02:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 8004f04:	4b80      	ldr	r3, [pc, #512]	; (8005108 <beginStartGame+0x2ac>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	4a80      	ldr	r2, [pc, #512]	; (800510c <beginStartGame+0x2b0>)
 8004f0a:	8812      	ldrh	r2, [r2, #0]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd fbfc 	bl	800270c <setUpLcdNormalPlay>
					snakeInit();
 8004f14:	f7fe fdfc 	bl	8003b10 <snakeInit>
					break;
 8004f18:	e017      	b.n	8004f4a <beginStartGame+0xee>
					oldStatusGame = TIMINGMODE;
 8004f1a:	4b7f      	ldr	r3, [pc, #508]	; (8005118 <beginStartGame+0x2bc>)
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8004f20:	4b7c      	ldr	r3, [pc, #496]	; (8005114 <beginStartGame+0x2b8>)
 8004f22:	221e      	movs	r2, #30
 8004f24:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 8004f26:	4b77      	ldr	r3, [pc, #476]	; (8005104 <beginStartGame+0x2a8>)
 8004f28:	2208      	movs	r2, #8
 8004f2a:	601a      	str	r2, [r3, #0]
					setupTiming();
 8004f2c:	f000 fe82 	bl	8005c34 <setupTiming>
					break;
 8004f30:	e00b      	b.n	8004f4a <beginStartGame+0xee>
					oldStatusGame = ADVANCEMODE;
 8004f32:	4b79      	ldr	r3, [pc, #484]	; (8005118 <beginStartGame+0x2bc>)
 8004f34:	2205      	movs	r2, #5
 8004f36:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8004f38:	4b76      	ldr	r3, [pc, #472]	; (8005114 <beginStartGame+0x2b8>)
 8004f3a:	221e      	movs	r2, #30
 8004f3c:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 8004f3e:	4b71      	ldr	r3, [pc, #452]	; (8005104 <beginStartGame+0x2a8>)
 8004f40:	2209      	movs	r2, #9
 8004f42:	601a      	str	r2, [r3, #0]
					setupAdvance();
 8004f44:	f7fb fb1e 	bl	8000584 <setupAdvance>
					break;
 8004f48:	bf00      	nop
				break;
 8004f4a:	e13c      	b.n	80051c6 <beginStartGame+0x36a>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 8004f4c:	4b71      	ldr	r3, [pc, #452]	; (8005114 <beginStartGame+0x2b8>)
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fabd 	bl	80044d0 <setTimerTiming>
				setTimerDeTime(1000);
 8004f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f5a:	f7ff fad9 	bl	8004510 <setTimerDeTime>
				oldTiming = TIMING;
 8004f5e:	4b6d      	ldr	r3, [pc, #436]	; (8005114 <beginStartGame+0x2b8>)
 8004f60:	881a      	ldrh	r2, [r3, #0]
 8004f62:	4b6e      	ldr	r3, [pc, #440]	; (800511c <beginStartGame+0x2c0>)
 8004f64:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 8004f66:	4b67      	ldr	r3, [pc, #412]	; (8005104 <beginStartGame+0x2a8>)
 8004f68:	2204      	movs	r2, #4
 8004f6a:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 8004f6c:	4b66      	ldr	r3, [pc, #408]	; (8005108 <beginStartGame+0x2ac>)
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	4a68      	ldr	r2, [pc, #416]	; (8005114 <beginStartGame+0x2b8>)
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fd fc80 	bl	800287c <setUpLcdTimingPlay>
				snakeInit();
 8004f7c:	f7fe fdc8 	bl	8003b10 <snakeInit>
				break;
 8004f80:	e124      	b.n	80051cc <beginStartGame+0x370>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 8004f82:	4b64      	ldr	r3, [pc, #400]	; (8005114 <beginStartGame+0x2b8>)
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff faa2 	bl	80044d0 <setTimerTiming>
				setTimerDeTime(1000);
 8004f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f90:	f7ff fabe 	bl	8004510 <setTimerDeTime>
				setTimerGenerateWall(2000);
 8004f94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004f98:	f7ff fad6 	bl	8004548 <setTimerGenerateWall>
				flagForGenerateWall = 0;
 8004f9c:	4b60      	ldr	r3, [pc, #384]	; (8005120 <beginStartGame+0x2c4>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 8004fa2:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <beginStartGame+0x2b8>)
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	4b5d      	ldr	r3, [pc, #372]	; (800511c <beginStartGame+0x2c0>)
 8004fa8:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 8004faa:	4b56      	ldr	r3, [pc, #344]	; (8005104 <beginStartGame+0x2a8>)
 8004fac:	2205      	movs	r2, #5
 8004fae:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 8004fb0:	4b55      	ldr	r3, [pc, #340]	; (8005108 <beginStartGame+0x2ac>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	4a57      	ldr	r2, [pc, #348]	; (8005114 <beginStartGame+0x2b8>)
 8004fb6:	8812      	ldrh	r2, [r2, #0]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fd fd12 	bl	80029e4 <setUpLcdAdvancePlay>
				wallInit();
 8004fc0:	f7fe fcd2 	bl	8003968 <wallInit>
				snakeInit();
 8004fc4:	f7fe fda4 	bl	8003b10 <snakeInit>
				break;
 8004fc8:	e100      	b.n	80051cc <beginStartGame+0x370>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <beginStartGame+0x2c8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d15f      	bne.n	8005092 <beginStartGame+0x236>
				{
					statusGame = oldStatusGame;
 8004fd2:	4b51      	ldr	r3, [pc, #324]	; (8005118 <beginStartGame+0x2bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4b      	ldr	r2, [pc, #300]	; (8005104 <beginStartGame+0x2a8>)
 8004fd8:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 8004fda:	4b4c      	ldr	r3, [pc, #304]	; (800510c <beginStartGame+0x2b0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 8004fe0:	4b48      	ldr	r3, [pc, #288]	; (8005104 <beginStartGame+0x2a8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d030      	beq.n	800504a <beginStartGame+0x1ee>
 8004fe8:	2b05      	cmp	r3, #5
 8004fea:	f300 80ee 	bgt.w	80051ca <beginStartGame+0x36e>
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d002      	beq.n	8004ff8 <beginStartGame+0x19c>
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00e      	beq.n	8005014 <beginStartGame+0x1b8>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8004ff6:	e0e8      	b.n	80051ca <beginStartGame+0x36e>
						oldStatusGame = NORMALMODE;
 8004ff8:	4b47      	ldr	r3, [pc, #284]	; (8005118 <beginStartGame+0x2bc>)
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 8004ffe:	4b42      	ldr	r3, [pc, #264]	; (8005108 <beginStartGame+0x2ac>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	4a42      	ldr	r2, [pc, #264]	; (800510c <beginStartGame+0x2b0>)
 8005004:	8812      	ldrh	r2, [r2, #0]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7fd fb7f 	bl	800270c <setUpLcdNormalPlay>
						snakeInit();
 800500e:	f7fe fd7f 	bl	8003b10 <snakeInit>
						break;
 8005012:	e051      	b.n	80050b8 <beginStartGame+0x25c>
						oldStatusGame = TIMINGMODE;
 8005014:	4b40      	ldr	r3, [pc, #256]	; (8005118 <beginStartGame+0x2bc>)
 8005016:	2204      	movs	r2, #4
 8005018:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <beginStartGame+0x2c0>)
 800501c:	881a      	ldrh	r2, [r3, #0]
 800501e:	4b3d      	ldr	r3, [pc, #244]	; (8005114 <beginStartGame+0x2b8>)
 8005020:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005022:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <beginStartGame+0x2b8>)
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fa52 	bl	80044d0 <setTimerTiming>
						setTimerDeTime(1000);
 800502c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005030:	f7ff fa6e 	bl	8004510 <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 8005034:	4b34      	ldr	r3, [pc, #208]	; (8005108 <beginStartGame+0x2ac>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	4a36      	ldr	r2, [pc, #216]	; (8005114 <beginStartGame+0x2b8>)
 800503a:	8812      	ldrh	r2, [r2, #0]
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fc1c 	bl	800287c <setUpLcdTimingPlay>
						snakeInit();
 8005044:	f7fe fd64 	bl	8003b10 <snakeInit>
						break;
 8005048:	e036      	b.n	80050b8 <beginStartGame+0x25c>
						oldStatusGame = ADVANCEMODE;
 800504a:	4b33      	ldr	r3, [pc, #204]	; (8005118 <beginStartGame+0x2bc>)
 800504c:	2205      	movs	r2, #5
 800504e:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005050:	4b32      	ldr	r3, [pc, #200]	; (800511c <beginStartGame+0x2c0>)
 8005052:	881a      	ldrh	r2, [r3, #0]
 8005054:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <beginStartGame+0x2b8>)
 8005056:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005058:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <beginStartGame+0x2b8>)
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fa37 	bl	80044d0 <setTimerTiming>
						setTimerDeTime(1000);
 8005062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005066:	f7ff fa53 	bl	8004510 <setTimerDeTime>
						setTimerGenerateWall(2000);
 800506a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800506e:	f7ff fa6b 	bl	8004548 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <beginStartGame+0x2c4>)
 8005074:	2200      	movs	r2, #0
 8005076:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 8005078:	4b23      	ldr	r3, [pc, #140]	; (8005108 <beginStartGame+0x2ac>)
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	4a25      	ldr	r2, [pc, #148]	; (8005114 <beginStartGame+0x2b8>)
 800507e:	8812      	ldrh	r2, [r2, #0]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd fcae 	bl	80029e4 <setUpLcdAdvancePlay>
						snakeInit();
 8005088:	f7fe fd42 	bl	8003b10 <snakeInit>
						wallInit();
 800508c:	f7fe fc6c 	bl	8003968 <wallInit>
						break;
 8005090:	e012      	b.n	80050b8 <beginStartGame+0x25c>
					statusGame = STARTMODE;
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <beginStartGame+0x2a8>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <beginStartGame+0x2ac>)
 800509a:	2200      	movs	r2, #0
 800509c:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <beginStartGame+0x2b0>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <beginStartGame+0x2b4>)
 80050a6:	2203      	movs	r2, #3
 80050a8:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 80050aa:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <beginStartGame+0x2b8>)
 80050ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050b0:	801a      	strh	r2, [r3, #0]
					startUI();
 80050b2:	f7ff fb89 	bl	80047c8 <startUI>
				break;
 80050b6:	e088      	b.n	80051ca <beginStartGame+0x36e>
 80050b8:	e087      	b.n	80051ca <beginStartGame+0x36e>
			case STOPMODE:
				if(arrowStopMode == RESUME)
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <beginStartGame+0x2cc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d134      	bne.n	800512c <beginStartGame+0x2d0>
				{
					statusGame = oldStatusGame;
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <beginStartGame+0x2bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a0f      	ldr	r2, [pc, #60]	; (8005104 <beginStartGame+0x2a8>)
 80050c8:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <beginStartGame+0x2a8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d003      	beq.n	80050da <beginStartGame+0x27e>
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <beginStartGame+0x2a8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d10f      	bne.n	80050fa <beginStartGame+0x29e>
					{
						setTimerTiming(TIMING);
 80050da:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <beginStartGame+0x2b8>)
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff f9f6 	bl	80044d0 <setTimerTiming>
						setTimerDeTime(1000);
 80050e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050e8:	f7ff fa12 	bl	8004510 <setTimerDeTime>
						setTimerGenerateWall(2000);
 80050ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80050f0:	f7ff fa2a 	bl	8004548 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <beginStartGame+0x2c4>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 80050fa:	f7fe f997 	bl	800342c <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 80050fe:	e065      	b.n	80051cc <beginStartGame+0x370>
 8005100:	2000012c 	.word	0x2000012c
 8005104:	200001b8 	.word	0x200001b8
 8005108:	200001a4 	.word	0x200001a4
 800510c:	200001a6 	.word	0x200001a6
 8005110:	20000014 	.word	0x20000014
 8005114:	20000000 	.word	0x20000000
 8005118:	200001bc 	.word	0x200001bc
 800511c:	200001cc 	.word	0x200001cc
 8005120:	20002946 	.word	0x20002946
 8005124:	200001ac 	.word	0x200001ac
 8005128:	2000005c 	.word	0x2000005c
					statusGame = STARTMODE;
 800512c:	4bb1      	ldr	r3, [pc, #708]	; (80053f4 <beginStartGame+0x598>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005132:	4bb1      	ldr	r3, [pc, #708]	; (80053f8 <beginStartGame+0x59c>)
 8005134:	2200      	movs	r2, #0
 8005136:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005138:	4bb0      	ldr	r3, [pc, #704]	; (80053fc <beginStartGame+0x5a0>)
 800513a:	2200      	movs	r2, #0
 800513c:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 800513e:	4bb0      	ldr	r3, [pc, #704]	; (8005400 <beginStartGame+0x5a4>)
 8005140:	2203      	movs	r2, #3
 8005142:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005144:	4baf      	ldr	r3, [pc, #700]	; (8005404 <beginStartGame+0x5a8>)
 8005146:	f240 32e7 	movw	r2, #999	; 0x3e7
 800514a:	801a      	strh	r2, [r3, #0]
					startUI();
 800514c:	f7ff fb3c 	bl	80047c8 <startUI>
				break;
 8005150:	e03c      	b.n	80051cc <beginStartGame+0x370>
			case EXITMODE:
				if(arrowExitMode == YES)
 8005152:	4bad      	ldr	r3, [pc, #692]	; (8005408 <beginStartGame+0x5ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d112      	bne.n	8005180 <beginStartGame+0x324>
				{
					statusGame = STARTMODE;
 800515a:	4ba6      	ldr	r3, [pc, #664]	; (80053f4 <beginStartGame+0x598>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005160:	4ba5      	ldr	r3, [pc, #660]	; (80053f8 <beginStartGame+0x59c>)
 8005162:	2200      	movs	r2, #0
 8005164:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005166:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <beginStartGame+0x5a0>)
 8005168:	2200      	movs	r2, #0
 800516a:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 800516c:	4ba4      	ldr	r3, [pc, #656]	; (8005400 <beginStartGame+0x5a4>)
 800516e:	2203      	movs	r2, #3
 8005170:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005172:	4ba4      	ldr	r3, [pc, #656]	; (8005404 <beginStartGame+0x5a8>)
 8005174:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005178:	801a      	strh	r2, [r3, #0]
					startUI();
 800517a:	f7ff fb25 	bl	80047c8 <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 800517e:	e020      	b.n	80051c2 <beginStartGame+0x366>
					statusGame = oldStatusGame;
 8005180:	4ba2      	ldr	r3, [pc, #648]	; (800540c <beginStartGame+0x5b0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a9b      	ldr	r2, [pc, #620]	; (80053f4 <beginStartGame+0x598>)
 8005186:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005188:	4b9a      	ldr	r3, [pc, #616]	; (80053f4 <beginStartGame+0x598>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d003      	beq.n	8005198 <beginStartGame+0x33c>
 8005190:	4b98      	ldr	r3, [pc, #608]	; (80053f4 <beginStartGame+0x598>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b05      	cmp	r3, #5
 8005196:	d10f      	bne.n	80051b8 <beginStartGame+0x35c>
						setTimerTiming(TIMING);
 8005198:	4b9a      	ldr	r3, [pc, #616]	; (8005404 <beginStartGame+0x5a8>)
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff f997 	bl	80044d0 <setTimerTiming>
						setTimerDeTime(1000);
 80051a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051a6:	f7ff f9b3 	bl	8004510 <setTimerDeTime>
						setTimerGenerateWall(2000);
 80051aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80051ae:	f7ff f9cb 	bl	8004548 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 80051b2:	4b97      	ldr	r3, [pc, #604]	; (8005410 <beginStartGame+0x5b4>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	801a      	strh	r2, [r3, #0]
					resumeGame();
 80051b8:	f7fe f938 	bl	800342c <resumeGame>
				break;
 80051bc:	e001      	b.n	80051c2 <beginStartGame+0x366>
		}
	}
 80051be:	bf00      	nop
 80051c0:	e004      	b.n	80051cc <beginStartGame+0x370>
				break;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <beginStartGame+0x370>
				break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <beginStartGame+0x370>
				break;
 80051ca:	bf00      	nop
	if(statusGame == STARTMODE){
 80051cc:	4b89      	ldr	r3, [pc, #548]	; (80053f4 <beginStartGame+0x598>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f040 8161 	bne.w	8005498 <beginStartGame+0x63c>
		char str1[50] = "";
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	222e      	movs	r2, #46	; 0x2e
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f004 fc2c 	bl	8009a40 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 80051e8:	4b83      	ldr	r3, [pc, #524]	; (80053f8 <beginStartGame+0x59c>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051f2:	e14d      	b.n	8005490 <beginStartGame+0x634>
		{
			if(button_count[i] == 1)
 80051f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051f6:	4a87      	ldr	r2, [pc, #540]	; (8005414 <beginStartGame+0x5b8>)
 80051f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f040 8144 	bne.w	800548a <beginStartGame+0x62e>
			{
				button_count[i] == 0;
				switch (i)
 8005202:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005204:	2b0d      	cmp	r3, #13
 8005206:	f200 811c 	bhi.w	8005442 <beginStartGame+0x5e6>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <beginStartGame+0x3b4>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005249 	.word	0x08005249
 8005214:	08005275 	.word	0x08005275
 8005218:	080052a1 	.word	0x080052a1
 800521c:	08005489 	.word	0x08005489
 8005220:	080052cd 	.word	0x080052cd
 8005224:	080052f5 	.word	0x080052f5
 8005228:	0800531d 	.word	0x0800531d
 800522c:	08005489 	.word	0x08005489
 8005230:	08005345 	.word	0x08005345
 8005234:	08005371 	.word	0x08005371
 8005238:	0800539d 	.word	0x0800539d
 800523c:	08005489 	.word	0x08005489
 8005240:	080053c9 	.word	0x080053c9
 8005244:	08005421 	.word	0x08005421
				{
					case 0:
						val = val*10 + i+1;
 8005248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800524a:	461a      	mov	r2, r3
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	4413      	add	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005256:	4413      	add	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	3301      	adds	r3, #1
 800525c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800525e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd fa17 	bl	8002694 <convert2str>
 8005266:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800526c:	4618      	mov	r0, r3
 800526e:	f004 fc8f 	bl	8009b90 <strcat>
						break;
 8005272:	e0e6      	b.n	8005442 <beginStartGame+0x5e6>
					case 1:
						val = val*10 + i+1;
 8005274:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005276:	461a      	mov	r2, r3
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	4413      	add	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005282:	4413      	add	r3, r2
 8005284:	b29b      	uxth	r3, r3
 8005286:	3301      	adds	r3, #1
 8005288:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800528a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800528c:	4618      	mov	r0, r3
 800528e:	f7fd fa01 	bl	8002694 <convert2str>
 8005292:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005298:	4618      	mov	r0, r3
 800529a:	f004 fc79 	bl	8009b90 <strcat>
						break;
 800529e:	e0d0      	b.n	8005442 <beginStartGame+0x5e6>
					case 2:
						val = val*10 + i+1;
 80052a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052a2:	461a      	mov	r2, r3
 80052a4:	0092      	lsls	r2, r2, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052ae:	4413      	add	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3301      	adds	r3, #1
 80052b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80052b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fd f9eb 	bl	8002694 <convert2str>
 80052be:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052c4:	4618      	mov	r0, r3
 80052c6:	f004 fc63 	bl	8009b90 <strcat>
						break;
 80052ca:	e0ba      	b.n	8005442 <beginStartGame+0x5e6>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 80052cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052ce:	461a      	mov	r2, r3
 80052d0:	0092      	lsls	r2, r2, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052da:	4413      	add	r3, r2
 80052dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80052de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd f9d7 	bl	8002694 <convert2str>
 80052e6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ec:	4618      	mov	r0, r3
 80052ee:	f004 fc4f 	bl	8009b90 <strcat>
						break;
 80052f2:	e0a6      	b.n	8005442 <beginStartGame+0x5e6>
					case 5:
						val = val*10 + i;
 80052f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052f6:	461a      	mov	r2, r3
 80052f8:	0092      	lsls	r2, r2, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005302:	4413      	add	r3, r2
 8005304:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005306:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005308:	4618      	mov	r0, r3
 800530a:	f7fd f9c3 	bl	8002694 <convert2str>
 800530e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005314:	4618      	mov	r0, r3
 8005316:	f004 fc3b 	bl	8009b90 <strcat>
						break;
 800531a:	e092      	b.n	8005442 <beginStartGame+0x5e6>
					case 6:
						val = val*10 + i;
 800531c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800531e:	461a      	mov	r2, r3
 8005320:	0092      	lsls	r2, r2, #2
 8005322:	4413      	add	r3, r2
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800532a:	4413      	add	r3, r2
 800532c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800532e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005330:	4618      	mov	r0, r3
 8005332:	f7fd f9af 	bl	8002694 <convert2str>
 8005336:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800533c:	4618      	mov	r0, r3
 800533e:	f004 fc27 	bl	8009b90 <strcat>
						break;
 8005342:	e07e      	b.n	8005442 <beginStartGame+0x5e6>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 8005344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005346:	461a      	mov	r2, r3
 8005348:	0092      	lsls	r2, r2, #2
 800534a:	4413      	add	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005352:	4413      	add	r3, r2
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800535a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd f999 	bl	8002694 <convert2str>
 8005362:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005368:	4618      	mov	r0, r3
 800536a:	f004 fc11 	bl	8009b90 <strcat>
						break;
 800536e:	e068      	b.n	8005442 <beginStartGame+0x5e6>
					case 9:
						val = val*10 + i-1;
 8005370:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005372:	461a      	mov	r2, r3
 8005374:	0092      	lsls	r2, r2, #2
 8005376:	4413      	add	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800537e:	4413      	add	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005386:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005388:	4618      	mov	r0, r3
 800538a:	f7fd f983 	bl	8002694 <convert2str>
 800538e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005390:	1d3b      	adds	r3, r7, #4
 8005392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005394:	4618      	mov	r0, r3
 8005396:	f004 fbfb 	bl	8009b90 <strcat>
						break;
 800539a:	e052      	b.n	8005442 <beginStartGame+0x5e6>
					case 10:
						val = val*10 + i-1;
 800539c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800539e:	461a      	mov	r2, r3
 80053a0:	0092      	lsls	r2, r2, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053aa:	4413      	add	r3, r2
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80053b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fd f96d 	bl	8002694 <convert2str>
 80053ba:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80053bc:	1d3b      	adds	r3, r7, #4
 80053be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053c0:	4618      	mov	r0, r3
 80053c2:	f004 fbe5 	bl	8009b90 <strcat>
						break;
 80053c6:	e03c      	b.n	8005442 <beginStartGame+0x5e6>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 80053c8:	4b13      	ldr	r3, [pc, #76]	; (8005418 <beginStartGame+0x5bc>)
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 80053d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053d2:	4a12      	ldr	r2, [pc, #72]	; (800541c <beginStartGame+0x5c0>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	08db      	lsrs	r3, r3, #3
 80053da:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80053dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fd f958 	bl	8002694 <convert2str>
 80053e4:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ea:	4618      	mov	r0, r3
 80053ec:	f004 fbd0 	bl	8009b90 <strcat>
						break;
 80053f0:	e027      	b.n	8005442 <beginStartGame+0x5e6>
 80053f2:	bf00      	nop
 80053f4:	200001b8 	.word	0x200001b8
 80053f8:	200001a4 	.word	0x200001a4
 80053fc:	200001a6 	.word	0x200001a6
 8005400:	20000014 	.word	0x20000014
 8005404:	20000000 	.word	0x20000000
 8005408:	20000060 	.word	0x20000060
 800540c:	200001bc 	.word	0x200001bc
 8005410:	20002946 	.word	0x20002946
 8005414:	2000012c 	.word	0x2000012c
 8005418:	0800b188 	.word	0x0800b188
 800541c:	cccccccd 	.word	0xcccccccd
					case 13:
						val = val*10;
 8005420:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005422:	461a      	mov	r2, r3
 8005424:	0092      	lsls	r2, r2, #2
 8005426:	4413      	add	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800542c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd f930 	bl	8002694 <convert2str>
 8005434:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800543a:	4618      	mov	r0, r3
 800543c:	f004 fba8 	bl	8009b90 <strcat>
						break;
 8005440:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 8005442:	2300      	movs	r3, #0
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	23b4      	movs	r3, #180	; 0xb4
 8005448:	22b4      	movs	r2, #180	; 0xb4
 800544a:	2196      	movs	r1, #150	; 0x96
 800544c:	203c      	movs	r0, #60	; 0x3c
 800544e:	f7fc fa67 	bl	8001920 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8005452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	23b4      	movs	r3, #180	; 0xb4
 800545a:	22b4      	movs	r2, #180	; 0xb4
 800545c:	2196      	movs	r1, #150	; 0x96
 800545e:	203c      	movs	r0, #60	; 0x3c
 8005460:	f7fc fb2f 	bl	8001ac2 <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8005464:	1d3a      	adds	r2, r7, #4
 8005466:	2301      	movs	r3, #1
 8005468:	9302      	str	r3, [sp, #8]
 800546a:	2318      	movs	r3, #24
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005478:	2198      	movs	r1, #152	; 0x98
 800547a:	2000      	movs	r0, #0
 800547c:	f7fc fe66 	bl	800214c <lcd_StrCenter>

				ID = val;
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <beginStartGame+0x6a0>)
 8005482:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005484:	8013      	strh	r3, [r2, #0]
 8005486:	e000      	b.n	800548a <beginStartGame+0x62e>
						continue;
 8005488:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 800548a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800548c:	3301      	adds	r3, #1
 800548e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005492:	2b0d      	cmp	r3, #13
 8005494:	f67f aeae 	bls.w	80051f4 <beginStartGame+0x398>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <beginStartGame+0x6a4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d101      	bne.n	80054a4 <beginStartGame+0x648>
	{
		initTimingMode();
 80054a0:	f000 fd1c 	bl	8005edc <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <beginStartGame+0x6a4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b09      	cmp	r3, #9
 80054aa:	d101      	bne.n	80054b0 <beginStartGame+0x654>
	{
		initAdvanceMode();
 80054ac:	f7fb f9ec 	bl	8000888 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <beginStartGame+0x6a4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d00e      	beq.n	80054d6 <beginStartGame+0x67a>
	{
		if(statusGame == PICKMODE)
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <beginStartGame+0x6a4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d101      	bne.n	80054c4 <beginStartGame+0x668>
		{
			arrowInPickMode();
 80054c0:	f7ff fa6c 	bl	800499c <arrowInPickMode>
		}
		if(button_count[12] == 1)
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <beginStartGame+0x6a8>)
 80054c6:	8b1b      	ldrh	r3, [r3, #24]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d104      	bne.n	80054d6 <beginStartGame+0x67a>
		{
			statusGame = EXITMODE;
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <beginStartGame+0x6a4>)
 80054ce:	220a      	movs	r2, #10
 80054d0:	601a      	str	r2, [r3, #0]
			initExit();
 80054d2:	f7fb fcbb 	bl	8000e4c <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <beginStartGame+0x6a4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d009      	beq.n	80054f2 <beginStartGame+0x696>
 80054de:	4b08      	ldr	r3, [pc, #32]	; (8005500 <beginStartGame+0x6a4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d005      	beq.n	80054f2 <beginStartGame+0x696>
	{
		setTimerDeTime(0);
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7ff f812 	bl	8004510 <setTimerDeTime>
		setTimerGenerateWall(0);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7ff f82b 	bl	8004548 <setTimerGenerateWall>
	}
}
 80054f2:	bf00      	nop
 80054f4:	3740      	adds	r7, #64	; 0x40
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	200001a4 	.word	0x200001a4
 8005500:	200001b8 	.word	0x200001b8
 8005504:	2000012c 	.word	0x2000012c

08005508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <HAL_MspInit+0x4c>)
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	4a0f      	ldr	r2, [pc, #60]	; (8005554 <HAL_MspInit+0x4c>)
 8005518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800551c:	6453      	str	r3, [r2, #68]	; 0x44
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <HAL_MspInit+0x4c>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <HAL_MspInit+0x4c>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	4a08      	ldr	r2, [pc, #32]	; (8005554 <HAL_MspInit+0x4c>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	; 0x40
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_MspInit+0x4c>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800

08005558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800555c:	e7fe      	b.n	800555c <NMI_Handler+0x4>

0800555e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005562:	e7fe      	b.n	8005562 <HardFault_Handler+0x4>

08005564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005568:	e7fe      	b.n	8005568 <MemManage_Handler+0x4>

0800556a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800556e:	e7fe      	b.n	800556e <BusFault_Handler+0x4>

08005570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005574:	e7fe      	b.n	8005574 <UsageFault_Handler+0x4>

08005576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055a4:	f000 fe2a 	bl	80061fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a8:	bf00      	nop
 80055aa:	bd80      	pop	{r7, pc}

080055ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <TIM2_IRQHandler+0x10>)
 80055b2:	f002 fd09 	bl	8007fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200029a8 	.word	0x200029a8

080055c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <USART2_IRQHandler+0x10>)
 80055c6:	f003 f9d1 	bl	800896c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200029f4 	.word	0x200029f4

080055d4 <showNotifyStop>:
#include "stop_game.h"
#include "snake.h"
#include "software_timer.h"

void showNotifyStop()
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 80055da:	4b25      	ldr	r3, [pc, #148]	; (8005670 <showNotifyStop+0x9c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	330a      	adds	r3, #10
 80055e2:	b299      	uxth	r1, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	9302      	str	r3, [sp, #8]
 80055e8:	2310      	movs	r3, #16
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	2300      	movs	r3, #0
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f4:	4a1f      	ldr	r2, [pc, #124]	; (8005674 <showNotifyStop+0xa0>)
 80055f6:	2000      	movs	r0, #0
 80055f8:	f7fc fda8 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 80055fc:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <showNotifyStop+0xa4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	3308      	adds	r3, #8
 8005604:	b298      	uxth	r0, r3
 8005606:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <showNotifyStop+0x9c>)
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	4b19      	ldr	r3, [pc, #100]	; (8005670 <showNotifyStop+0x9c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4413      	add	r3, r2
 8005610:	0fda      	lsrs	r2, r3, #31
 8005612:	4413      	add	r3, r2
 8005614:	105b      	asrs	r3, r3, #1
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b14      	subs	r3, #20
 800561a:	b299      	uxth	r1, r3
 800561c:	2301      	movs	r3, #1
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	2310      	movs	r3, #16
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	f248 4330 	movw	r3, #33840	; 0x8430
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	2300      	movs	r3, #0
 800562c:	4a13      	ldr	r2, [pc, #76]	; (800567c <showNotifyStop+0xa8>)
 800562e:	f7fc fd29 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 8005632:	4b11      	ldr	r3, [pc, #68]	; (8005678 <showNotifyStop+0xa4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	3308      	adds	r3, #8
 800563a:	b298      	uxth	r0, r3
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <showNotifyStop+0x9c>)
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <showNotifyStop+0x9c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4413      	add	r3, r2
 8005646:	0fda      	lsrs	r2, r3, #31
 8005648:	4413      	add	r3, r2
 800564a:	105b      	asrs	r3, r3, #1
 800564c:	b29b      	uxth	r3, r3
 800564e:	330f      	adds	r3, #15
 8005650:	b299      	uxth	r1, r3
 8005652:	2301      	movs	r3, #1
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	2310      	movs	r3, #16
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	f248 4330 	movw	r3, #33840	; 0x8430
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	4a07      	ldr	r2, [pc, #28]	; (8005680 <showNotifyStop+0xac>)
 8005664:	f7fc fd0e 	bl	8002084 <lcd_ShowStr>
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	2000004c 	.word	0x2000004c
 8005674:	0800b18c 	.word	0x0800b18c
 8005678:	2000003c 	.word	0x2000003c
 800567c:	0800b19c 	.word	0x0800b19c
 8005680:	0800b1a4 	.word	0x0800b1a4

08005684 <drawArrowStop>:


void drawArrowStop()
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b087      	sub	sp, #28
 8005688:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800568a:	4b87      	ldr	r3, [pc, #540]	; (80058a8 <drawArrowStop+0x224>)
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4b86      	ldr	r3, [pc, #536]	; (80058a8 <drawArrowStop+0x224>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4413      	add	r3, r2
 8005694:	0fda      	lsrs	r2, r3, #31
 8005696:	4413      	add	r3, r2
 8005698:	105b      	asrs	r3, r3, #1
 800569a:	3b08      	subs	r3, #8
 800569c:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 800569e:	4b82      	ldr	r3, [pc, #520]	; (80058a8 <drawArrowStop+0x224>)
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	4b81      	ldr	r3, [pc, #516]	; (80058a8 <drawArrowStop+0x224>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	0fda      	lsrs	r2, r3, #31
 80056aa:	4413      	add	r3, r2
 80056ac:	105b      	asrs	r3, r3, #1
 80056ae:	331c      	adds	r3, #28
 80056b0:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 80056b2:	4b7e      	ldr	r3, [pc, #504]	; (80058ac <drawArrowStop+0x228>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d07a      	beq.n	80057b0 <drawArrowStop+0x12c>
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	f040 80f0 	bne.w	80058a0 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 80056c0:	f7fb fd9e 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 80056c4:	4b7a      	ldr	r3, [pc, #488]	; (80058b0 <drawArrowStop+0x22c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3308      	adds	r3, #8
 80056cc:	b298      	uxth	r0, r3
 80056ce:	4b76      	ldr	r3, [pc, #472]	; (80058a8 <drawArrowStop+0x224>)
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <drawArrowStop+0x224>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4413      	add	r3, r2
 80056d8:	0fda      	lsrs	r2, r3, #31
 80056da:	4413      	add	r3, r2
 80056dc:	105b      	asrs	r3, r3, #1
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b14      	subs	r3, #20
 80056e2:	b299      	uxth	r1, r3
 80056e4:	2301      	movs	r3, #1
 80056e6:	9302      	str	r3, [sp, #8]
 80056e8:	2310      	movs	r3, #16
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	f248 4330 	movw	r3, #33840	; 0x8430
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80056f6:	4a6f      	ldr	r2, [pc, #444]	; (80058b4 <drawArrowStop+0x230>)
 80056f8:	f7fc fcc4 	bl	8002084 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80056fc:	4b6c      	ldr	r3, [pc, #432]	; (80058b0 <drawArrowStop+0x22c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	3308      	adds	r3, #8
 8005704:	b298      	uxth	r0, r3
 8005706:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <drawArrowStop+0x224>)
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	4b67      	ldr	r3, [pc, #412]	; (80058a8 <drawArrowStop+0x224>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4413      	add	r3, r2
 8005710:	0fda      	lsrs	r2, r3, #31
 8005712:	4413      	add	r3, r2
 8005714:	105b      	asrs	r3, r3, #1
 8005716:	b29b      	uxth	r3, r3
 8005718:	330f      	adds	r3, #15
 800571a:	b299      	uxth	r1, r3
 800571c:	2301      	movs	r3, #1
 800571e:	9302      	str	r3, [sp, #8]
 8005720:	2310      	movs	r3, #16
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	f248 4330 	movw	r3, #33840	; 0x8430
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	4a62      	ldr	r2, [pc, #392]	; (80058b8 <drawArrowStop+0x234>)
 800572e:	f7fc fca9 	bl	8002084 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8005732:	4b5f      	ldr	r3, [pc, #380]	; (80058b0 <drawArrowStop+0x22c>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b0f      	subs	r3, #15
 800573a:	b298      	uxth	r0, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	b299      	uxth	r1, r3
 8005740:	4b5b      	ldr	r3, [pc, #364]	; (80058b0 <drawArrowStop+0x22c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b0a      	subs	r3, #10
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b05      	subs	r3, #5
 8005750:	b29b      	uxth	r3, r3
 8005752:	2400      	movs	r4, #0
 8005754:	9400      	str	r4, [sp, #0]
 8005756:	f7fc f930 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800575a:	4b55      	ldr	r3, [pc, #340]	; (80058b0 <drawArrowStop+0x22c>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b0f      	subs	r3, #15
 8005762:	b298      	uxth	r0, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	b299      	uxth	r1, r3
 8005768:	4b51      	ldr	r3, [pc, #324]	; (80058b0 <drawArrowStop+0x22c>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b0a      	subs	r3, #10
 8005770:	b29a      	uxth	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	b29b      	uxth	r3, r3
 8005776:	3305      	adds	r3, #5
 8005778:	b29b      	uxth	r3, r3
 800577a:	2400      	movs	r4, #0
 800577c:	9400      	str	r4, [sp, #0]
 800577e:	f7fc f91c 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8005782:	4b4b      	ldr	r3, [pc, #300]	; (80058b0 <drawArrowStop+0x22c>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b0a      	subs	r3, #10
 800578a:	b298      	uxth	r0, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b05      	subs	r3, #5
 8005792:	b299      	uxth	r1, r3
 8005794:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <drawArrowStop+0x22c>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b0a      	subs	r3, #10
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3305      	adds	r3, #5
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2400      	movs	r4, #0
 80057a8:	9400      	str	r4, [sp, #0]
 80057aa:	f7fc f906 	bl	80019ba <lcd_DrawLine>
		break;
 80057ae:	e077      	b.n	80058a0 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 80057b0:	f7fb fd26 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 80057b4:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <drawArrowStop+0x22c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3308      	adds	r3, #8
 80057bc:	b298      	uxth	r0, r3
 80057be:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <drawArrowStop+0x224>)
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <drawArrowStop+0x224>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	0fda      	lsrs	r2, r3, #31
 80057ca:	4413      	add	r3, r2
 80057cc:	105b      	asrs	r3, r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b14      	subs	r3, #20
 80057d2:	b299      	uxth	r1, r3
 80057d4:	2301      	movs	r3, #1
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	2310      	movs	r3, #16
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	f248 4330 	movw	r3, #33840	; 0x8430
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	4a33      	ldr	r2, [pc, #204]	; (80058b4 <drawArrowStop+0x230>)
 80057e6:	f7fc fc4d 	bl	8002084 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 80057ea:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <drawArrowStop+0x22c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3308      	adds	r3, #8
 80057f2:	b298      	uxth	r0, r3
 80057f4:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <drawArrowStop+0x224>)
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <drawArrowStop+0x224>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4413      	add	r3, r2
 80057fe:	0fda      	lsrs	r2, r3, #31
 8005800:	4413      	add	r3, r2
 8005802:	105b      	asrs	r3, r3, #1
 8005804:	b29b      	uxth	r3, r3
 8005806:	330f      	adds	r3, #15
 8005808:	b299      	uxth	r1, r3
 800580a:	2301      	movs	r3, #1
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	2310      	movs	r3, #16
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	f248 4330 	movw	r3, #33840	; 0x8430
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <drawArrowStop+0x234>)
 800581e:	f7fc fc31 	bl	8002084 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <drawArrowStop+0x22c>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b0f      	subs	r3, #15
 800582a:	b298      	uxth	r0, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	b299      	uxth	r1, r3
 8005830:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <drawArrowStop+0x22c>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b0a      	subs	r3, #10
 8005838:	b29a      	uxth	r2, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b05      	subs	r3, #5
 8005840:	b29b      	uxth	r3, r3
 8005842:	2400      	movs	r4, #0
 8005844:	9400      	str	r4, [sp, #0]
 8005846:	f7fc f8b8 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800584a:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <drawArrowStop+0x22c>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b0f      	subs	r3, #15
 8005852:	b298      	uxth	r0, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	b299      	uxth	r1, r3
 8005858:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <drawArrowStop+0x22c>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b0a      	subs	r3, #10
 8005860:	b29a      	uxth	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	3305      	adds	r3, #5
 8005868:	b29b      	uxth	r3, r3
 800586a:	2400      	movs	r4, #0
 800586c:	9400      	str	r4, [sp, #0]
 800586e:	f7fc f8a4 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8005872:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <drawArrowStop+0x22c>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b0a      	subs	r3, #10
 800587a:	b298      	uxth	r0, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b05      	subs	r3, #5
 8005882:	b299      	uxth	r1, r3
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <drawArrowStop+0x22c>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b0a      	subs	r3, #10
 800588c:	b29a      	uxth	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	3305      	adds	r3, #5
 8005894:	b29b      	uxth	r3, r3
 8005896:	2400      	movs	r4, #0
 8005898:	9400      	str	r4, [sp, #0]
 800589a:	f7fc f88e 	bl	80019ba <lcd_DrawLine>
		break;
 800589e:	bf00      	nop
	}
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd90      	pop	{r4, r7, pc}
 80058a8:	2000004c 	.word	0x2000004c
 80058ac:	2000005c 	.word	0x2000005c
 80058b0:	2000003c 	.word	0x2000003c
 80058b4:	0800b19c 	.word	0x0800b19c
 80058b8:	0800b1a4 	.word	0x0800b1a4

080058bc <gameStopUI>:

void gameStopUI()
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
	showWallnotify();
 80058c0:	f7fb fb9a 	bl	8000ff8 <showWallnotify>
	showNotifyStop();
 80058c4:	f7ff fe86 	bl	80055d4 <showNotifyStop>
	drawArrowStop();
 80058c8:	f7ff fedc 	bl	8005684 <drawArrowStop>
}
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <pickStop>:

void pickStop()
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 80058d4:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <pickStop+0x78>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d133      	bne.n	8005944 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <pickStop+0x7c>)
 80058de:	88db      	ldrh	r3, [r3, #6]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10f      	bne.n	8005904 <pickStop+0x34>
		{
			flagStop = 1;
 80058e4:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <pickStop+0x80>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 80058ea:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <pickStop+0x84>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d002      	beq.n	80058f8 <pickStop+0x28>
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d107      	bne.n	8005906 <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 80058f6:	e025      	b.n	8005944 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 80058f8:	4b16      	ldr	r3, [pc, #88]	; (8005954 <pickStop+0x84>)
 80058fa:	2202      	movs	r2, #2
 80058fc:	601a      	str	r2, [r3, #0]
				gameStopUI();
 80058fe:	f7ff ffdd 	bl	80058bc <gameStopUI>
				break;
 8005902:	e000      	b.n	8005906 <pickStop+0x36>
			}
		}
 8005904:	bf00      	nop
		if(button_count[7] == 1)
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <pickStop+0x7c>)
 8005908:	89db      	ldrh	r3, [r3, #14]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10e      	bne.n	800592c <pickStop+0x5c>
		{
			flagStop = 1;
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <pickStop+0x80>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8005914:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <pickStop+0x84>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d012      	beq.n	8005942 <pickStop+0x72>
 800591c:	2b02      	cmp	r3, #2
 800591e:	d106      	bne.n	800592e <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <pickStop+0x84>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8005926:	f7ff ffc9 	bl	80058bc <gameStopUI>
				break;
 800592a:	e000      	b.n	800592e <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 800592c:	bf00      	nop
		if(flagStop == 1)
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <pickStop+0x80>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d106      	bne.n	8005944 <pickStop+0x74>
		{
			gameStopUI();
 8005936:	f7ff ffc1 	bl	80058bc <gameStopUI>
			flagStop = 0;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <pickStop+0x80>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e000      	b.n	8005944 <pickStop+0x74>
				return;
 8005942:	bf00      	nop
		}
	}
}
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200001b8 	.word	0x200001b8
 800594c:	2000012c 	.word	0x2000012c
 8005950:	200001c4 	.word	0x200001c4
 8005954:	2000005c 	.word	0x2000005c

08005958 <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d110      	bne.n	800598a <initStopGame+0x32>
	{
		statusGame = STOPMODE;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <initStopGame+0x3c>)
 800596a:	2206      	movs	r2, #6
 800596c:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <initStopGame+0x40>)
 8005970:	2202      	movs	r2, #2
 8005972:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 8005974:	2000      	movs	r0, #0
 8005976:	f7fe fdab 	bl	80044d0 <setTimerTiming>
		setTimerGenerateWall(0);
 800597a:	2000      	movs	r0, #0
 800597c:	f7fe fde4 	bl	8004548 <setTimerGenerateWall>
		flagStop = 1;
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <initStopGame+0x44>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
		pickStop();
 8005986:	f7ff ffa3 	bl	80058d0 <pickStop>
	}
	return 0;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	200001b8 	.word	0x200001b8
 8005998:	2000005c 	.word	0x2000005c
 800599c:	200001c4 	.word	0x200001c4

080059a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
	return 1;
 80059a4:	2301      	movs	r3, #1
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <_kill>:

int _kill(int pid, int sig)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059ba:	f004 f817 	bl	80099ec <__errno>
 80059be:	4603      	mov	r3, r0
 80059c0:	2216      	movs	r2, #22
 80059c2:	601a      	str	r2, [r3, #0]
	return -1;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <_exit>:

void _exit (int status)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80059d8:	f04f 31ff 	mov.w	r1, #4294967295
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ffe7 	bl	80059b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80059e2:	e7fe      	b.n	80059e2 <_exit+0x12>

080059e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e00a      	b.n	8005a0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059f6:	f3af 8000 	nop.w
 80059fa:	4601      	mov	r1, r0
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	60ba      	str	r2, [r7, #8]
 8005a02:	b2ca      	uxtb	r2, r1
 8005a04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	dbf0      	blt.n	80059f6 <_read+0x12>
	}

return len;
 8005a14:	687b      	ldr	r3, [r7, #4]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e009      	b.n	8005a44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	60ba      	str	r2, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3301      	adds	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	dbf1      	blt.n	8005a30 <_write+0x12>
	}
	return len;
 8005a4c:	687b      	ldr	r3, [r7, #4]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_close>:

int _close(int file)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_isatty>:

int _isatty(int file)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
	return 1;
 8005a96:	2301      	movs	r3, #1
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
	return 0;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <_sbrk+0x5c>)
 8005aca:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <_sbrk+0x60>)
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <_sbrk+0x64>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <_sbrk+0x64>)
 8005ade:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <_sbrk+0x68>)
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <_sbrk+0x64>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4413      	add	r3, r2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d207      	bcs.n	8005b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005af0:	f003 ff7c 	bl	80099ec <__errno>
 8005af4:	4603      	mov	r3, r0
 8005af6:	220c      	movs	r2, #12
 8005af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	e009      	b.n	8005b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b00:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <_sbrk+0x64>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <_sbrk+0x64>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <_sbrk+0x64>)
 8005b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20020000 	.word	0x20020000
 8005b20:	00000400 	.word	0x00000400
 8005b24:	200029a4 	.word	0x200029a4
 8005b28:	20002a50 	.word	0x20002a50

08005b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <SystemInit+0x20>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <SystemInit+0x20>)
 8005b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	e000ed00 	.word	0xe000ed00

08005b50 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b56:	f107 0308 	add.w	r3, r7, #8
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	609a      	str	r2, [r3, #8]
 8005b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b64:	463b      	mov	r3, r7
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005b74:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b76:	f240 3247 	movw	r2, #839	; 0x347
 8005b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005b82:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b84:	2263      	movs	r2, #99	; 0x63
 8005b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b88:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005b94:	4813      	ldr	r0, [pc, #76]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005b96:	f002 f957 	bl	8007e48 <HAL_TIM_Base_Init>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005ba0:	f7fc fd72 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005baa:	f107 0308 	add.w	r3, r7, #8
 8005bae:	4619      	mov	r1, r3
 8005bb0:	480c      	ldr	r0, [pc, #48]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005bb2:	f002 fb11 	bl	80081d8 <HAL_TIM_ConfigClockSource>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005bbc:	f7fc fd64 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005bc8:	463b      	mov	r3, r7
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4805      	ldr	r0, [pc, #20]	; (8005be4 <MX_TIM2_Init+0x94>)
 8005bce:	f002 fd2d 	bl	800862c <HAL_TIMEx_MasterConfigSynchronization>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005bd8:	f7fc fd56 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005bdc:	bf00      	nop
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	200029a8 	.word	0x200029a8

08005be8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf8:	d115      	bne.n	8005c26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <HAL_TIM_Base_MspInit+0x48>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <HAL_TIM_Base_MspInit+0x48>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <HAL_TIM_Base_MspInit+0x48>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005c16:	2200      	movs	r2, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	201c      	movs	r0, #28
 8005c1c:	f000 fc0d 	bl	800643a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c20:	201c      	movs	r0, #28
 8005c22:	f000 fc26 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800

08005c34 <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b095      	sub	sp, #84	; 0x54
 8005c38:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fb fe3e 	bl	80018bc <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005c40:	4b6b      	ldr	r3, [pc, #428]	; (8005df0 <setupTiming+0x1bc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b298      	uxth	r0, r3
 8005c46:	4b6b      	ldr	r3, [pc, #428]	; (8005df4 <setupTiming+0x1c0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	b299      	uxth	r1, r3
 8005c4c:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <setupTiming+0x1c4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <setupTiming+0x1c8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4c69      	ldr	r4, [pc, #420]	; (8005e00 <setupTiming+0x1cc>)
 8005c5a:	9400      	str	r4, [sp, #0]
 8005c5c:	f7fc f838 	bl	8001cd0 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005c60:	2300      	movs	r3, #0
 8005c62:	9302      	str	r3, [sp, #8]
 8005c64:	2318      	movs	r3, #24
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	f248 4330 	movw	r3, #33840	; 0x8430
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c72:	4a64      	ldr	r2, [pc, #400]	; (8005e04 <setupTiming+0x1d0>)
 8005c74:	2137      	movs	r1, #55	; 0x37
 8005c76:	203c      	movs	r0, #60	; 0x3c
 8005c78:	f7fc fa04 	bl	8002084 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8005c7c:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <setupTiming+0x1d4>)
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c84:	6018      	str	r0, [r3, #0]
 8005c86:	3304      	adds	r3, #4
 8005c88:	8019      	strh	r1, [r3, #0]
 8005c8a:	f107 030a 	add.w	r3, r7, #10
 8005c8e:	222c      	movs	r2, #44	; 0x2c
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f003 fed4 	bl	8009a40 <memset>
	char *str2 = convert2str(ID);
 8005c98:	4b5c      	ldr	r3, [pc, #368]	; (8005e0c <setupTiming+0x1d8>)
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fc fcf9 	bl	8002694 <convert2str>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005caa:	4618      	mov	r0, r3
 8005cac:	f003 ff70 	bl	8009b90 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8005cb0:	1d3a      	adds	r2, r7, #4
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	2318      	movs	r3, #24
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	f248 4330 	movw	r3, #33840	; 0x8430
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc4:	2164      	movs	r1, #100	; 0x64
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7fc fa40 	bl	800214c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9302      	str	r3, [sp, #8]
 8005cd0:	2318      	movs	r3, #24
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	f248 4330 	movw	r3, #33840	; 0x8430
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cde:	4a4c      	ldr	r2, [pc, #304]	; (8005e10 <setupTiming+0x1dc>)
 8005ce0:	2196      	movs	r1, #150	; 0x96
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f7fc fa32 	bl	800214c <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9302      	str	r3, [sp, #8]
 8005cec:	2318      	movs	r3, #24
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	f248 4330 	movw	r3, #33840	; 0x8430
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <setupTiming+0x1e0>)
 8005cfc:	21d2      	movs	r1, #210	; 0xd2
 8005cfe:	2014      	movs	r0, #20
 8005d00:	f7fc f9c0 	bl	8002084 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8005d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	23f0      	movs	r3, #240	; 0xf0
 8005d0c:	22c8      	movs	r2, #200	; 0xc8
 8005d0e:	21d2      	movs	r1, #210	; 0xd2
 8005d10:	2096      	movs	r0, #150	; 0x96
 8005d12:	f7fb fed6 	bl	8001ac2 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8005d16:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <setupTiming+0x1e4>)
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fc fcba 	bl	8002694 <convert2str>
 8005d20:	4603      	mov	r3, r0
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8005d24:	4b3c      	ldr	r3, [pc, #240]	; (8005e18 <setupTiming+0x1e4>)
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b77      	cmp	r3, #119	; 0x77
 8005d2a:	d80e      	bhi.n	8005d4a <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	9302      	str	r3, [sp, #8]
 8005d30:	2318      	movs	r3, #24
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d40:	21d4      	movs	r1, #212	; 0xd4
 8005d42:	20a5      	movs	r0, #165	; 0xa5
 8005d44:	f7fc f99e 	bl	8002084 <lcd_ShowStr>
 8005d48:	e00d      	b.n	8005d66 <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	9302      	str	r3, [sp, #8]
 8005d4e:	2318      	movs	r3, #24
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d5e:	21d4      	movs	r1, #212	; 0xd4
 8005d60:	209d      	movs	r0, #157	; 0x9d
 8005d62:	f7fc f98f 	bl	8002084 <lcd_ShowStr>
	}

	if(TIMING < 120)
 8005d66:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <setupTiming+0x1e4>)
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	2b77      	cmp	r3, #119	; 0x77
 8005d6c:	d81a      	bhi.n	8005da4 <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 8005d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	23c8      	movs	r3, #200	; 0xc8
 8005d76:	22b9      	movs	r2, #185	; 0xb9
 8005d78:	21c8      	movs	r1, #200	; 0xc8
 8005d7a:	20a5      	movs	r0, #165	; 0xa5
 8005d7c:	f7fb fe1d 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 8005d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	23c8      	movs	r3, #200	; 0xc8
 8005d88:	22a5      	movs	r2, #165	; 0xa5
 8005d8a:	21b4      	movs	r1, #180	; 0xb4
 8005d8c:	20af      	movs	r0, #175	; 0xaf
 8005d8e:	f7fb fe14 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 8005d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	23b4      	movs	r3, #180	; 0xb4
 8005d9a:	22af      	movs	r2, #175	; 0xaf
 8005d9c:	21c8      	movs	r1, #200	; 0xc8
 8005d9e:	20b9      	movs	r0, #185	; 0xb9
 8005da0:	f7fb fe0b 	bl	80019ba <lcd_DrawLine>
	}
	if(TIMING > 30)
 8005da4:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <setupTiming+0x1e4>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	2b1e      	cmp	r3, #30
 8005daa:	d91c      	bls.n	8005de6 <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 8005dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	23fa      	movs	r3, #250	; 0xfa
 8005db4:	22b9      	movs	r2, #185	; 0xb9
 8005db6:	21fa      	movs	r1, #250	; 0xfa
 8005db8:	20a5      	movs	r0, #165	; 0xa5
 8005dba:	f7fb fdfe 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 8005dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005dc8:	22af      	movs	r2, #175	; 0xaf
 8005dca:	21fa      	movs	r1, #250	; 0xfa
 8005dcc:	20a5      	movs	r0, #165	; 0xa5
 8005dce:	f7fb fdf4 	bl	80019ba <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 8005dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005ddc:	22af      	movs	r2, #175	; 0xaf
 8005dde:	21fa      	movs	r1, #250	; 0xfa
 8005de0:	20b9      	movs	r0, #185	; 0xb9
 8005de2:	f7fb fdea 	bl	80019ba <lcd_DrawLine>
	}
}
 8005de6:	bf00      	nop
 8005de8:	3744      	adds	r7, #68	; 0x44
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000074 	.word	0x20000074
 8005df4:	20000078 	.word	0x20000078
 8005df8:	2000007c 	.word	0x2000007c
 8005dfc:	20000080 	.word	0x20000080
 8005e00:	0800e188 	.word	0x0800e188
 8005e04:	0800b1ac 	.word	0x0800b1ac
 8005e08:	0800b1d4 	.word	0x0800b1d4
 8005e0c:	200001a4 	.word	0x200001a4
 8005e10:	0800b1bc 	.word	0x0800b1bc
 8005e14:	0800b1cc 	.word	0x0800b1cc
 8005e18:	20000000 	.word	0x20000000

08005e1c <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7fc fa56 	bl	80022e0 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 8005e34:	2200      	movs	r2, #0
 8005e36:	2101      	movs	r1, #1
 8005e38:	68b8      	ldr	r0, [r7, #8]
 8005e3a:	f7fc fa51 	bl	80022e0 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2102      	movs	r1, #2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fc fa4c 	bl	80022e0 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2103      	movs	r1, #3
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7fc fa47 	bl	80022e0 <led7_SetDigit>
	led7_SetColon(1);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f7fc fa68 	bl	8002328 <led7_SetColon>
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <showTiming>:

void showTiming()
{
 8005e60:	b5b0      	push	{r4, r5, r7, lr}
 8005e62:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 8005e64:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <showTiming+0x6c>)
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <showTiming+0x70>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	4618      	mov	r0, r3
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <showTiming+0x6c>)
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <showTiming+0x74>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	461c      	mov	r4, r3
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <showTiming+0x6c>)
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <showTiming+0x74>)
 8005e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8e:	0959      	lsrs	r1, r3, #5
 8005e90:	460b      	mov	r3, r1
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	1a5b      	subs	r3, r3, r1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4a0e      	ldr	r2, [pc, #56]	; (8005ed8 <showTiming+0x78>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461d      	mov	r5, r3
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <showTiming+0x6c>)
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <showTiming+0x78>)
 8005eae:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb2:	08d9      	lsrs	r1, r3, #3
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	f7ff ffaa 	bl	8005e1c <show7seg>
}
 8005ec8:	bf00      	nop
 8005eca:	bdb0      	pop	{r4, r5, r7, pc}
 8005ecc:	20000000 	.word	0x20000000
 8005ed0:	1b4e81b5 	.word	0x1b4e81b5
 8005ed4:	88888889 	.word	0x88888889
 8005ed8:	cccccccd 	.word	0xcccccccd

08005edc <initTimingMode>:

void initTimingMode()
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8005ee0:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <initTimingMode+0x54>)
 8005ee2:	88db      	ldrh	r3, [r3, #6]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10e      	bne.n	8005f06 <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8005ee8:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <initTimingMode+0x58>)
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	331e      	adds	r3, #30
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <initTimingMode+0x58>)
 8005ef2:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <initTimingMode+0x58>)
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	2b78      	cmp	r3, #120	; 0x78
 8005efa:	d902      	bls.n	8005f02 <initTimingMode+0x26>
		{
			TIMING = 120;
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <initTimingMode+0x58>)
 8005efe:	2278      	movs	r2, #120	; 0x78
 8005f00:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8005f02:	f7ff fe97 	bl	8005c34 <setupTiming>
	}
	if(button_count[7] == 1)
 8005f06:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <initTimingMode+0x54>)
 8005f08:	89db      	ldrh	r3, [r3, #14]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d10e      	bne.n	8005f2c <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <initTimingMode+0x58>)
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	3b1e      	subs	r3, #30
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <initTimingMode+0x58>)
 8005f18:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <initTimingMode+0x58>)
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	2b1d      	cmp	r3, #29
 8005f20:	d802      	bhi.n	8005f28 <initTimingMode+0x4c>
		{
			TIMING = 30;
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <initTimingMode+0x58>)
 8005f24:	221e      	movs	r2, #30
 8005f26:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8005f28:	f7ff fe84 	bl	8005c34 <setupTiming>
	}
}
 8005f2c:	bf00      	nop
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	2000012c 	.word	0x2000012c
 8005f34:	20000000 	.word	0x20000000

08005f38 <uart_init_esp>:
//    uart_Rs232SendString(".");
//    sprintf((void*)msg,"%ld",num%100);
//    uart_Rs232SendString(msg);
//}

void uart_init_esp(){
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	4906      	ldr	r1, [pc, #24]	; (8005f58 <uart_init_esp+0x20>)
 8005f40:	4806      	ldr	r0, [pc, #24]	; (8005f5c <uart_init_esp+0x24>)
 8005f42:	f002 fce2 	bl	800890a <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8005f46:	2201      	movs	r2, #1
 8005f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f4c:	4804      	ldr	r0, [pc, #16]	; (8005f60 <uart_init_esp+0x28>)
 8005f4e:	f000 fcd9 	bl	8006904 <HAL_GPIO_WritePin>
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	200029f0 	.word	0x200029f0
 8005f5c:	200029f4 	.word	0x200029f4
 8005f60:	40021400 	.word	0x40021400

08005f64 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8005f70:	887a      	ldrh	r2, [r7, #2]
 8005f72:	230a      	movs	r3, #10
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4803      	ldr	r0, [pc, #12]	; (8005f84 <uart_EspSendBytes+0x20>)
 8005f78:	f002 fc35 	bl	80087e6 <HAL_UART_Transmit>
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200029f4 	.word	0x200029f4

08005f88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <HAL_UART_RxCpltCallback+0x54>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_UART_RxCpltCallback+0x58>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b4f      	cmp	r3, #79	; 0x4f
 8005fa0:	d103      	bne.n	8005faa <HAL_UART_RxCpltCallback+0x22>
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <HAL_UART_RxCpltCallback+0x5c>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e00e      	b.n	8005fc8 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'a') light_status = 0;
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <HAL_UART_RxCpltCallback+0x58>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b61      	cmp	r3, #97	; 0x61
 8005fb0:	d103      	bne.n	8005fba <HAL_UART_RxCpltCallback+0x32>
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <HAL_UART_RxCpltCallback+0x60>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e006      	b.n	8005fc8 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'A') light_status = 1;
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_UART_RxCpltCallback+0x58>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b41      	cmp	r3, #65	; 0x41
 8005fc0:	d102      	bne.n	8005fc8 <HAL_UART_RxCpltCallback+0x40>
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_UART_RxCpltCallback+0x60>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4905      	ldr	r1, [pc, #20]	; (8005fe0 <HAL_UART_RxCpltCallback+0x58>)
 8005fcc:	4807      	ldr	r0, [pc, #28]	; (8005fec <HAL_UART_RxCpltCallback+0x64>)
 8005fce:	f002 fc9c 	bl	800890a <HAL_UART_Receive_IT>
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	200029f0 	.word	0x200029f0
 8005fe4:	200029f1 	.word	0x200029f1
 8005fe8:	200001d8 	.word	0x200001d8
 8005fec:	200029f4 	.word	0x200029f4

08005ff0 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <uart_EspCheck+0x1c>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <uart_EspCheck+0x10>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <uart_EspCheck+0x12>
	return 0;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	200029f1 	.word	0x200029f1

08006010 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <MX_USART2_UART_Init+0x4c>)
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <MX_USART2_UART_Init+0x50>)
 8006018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <MX_USART2_UART_Init+0x4c>)
 800601c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <MX_USART2_UART_Init+0x4c>)
 8006024:	2200      	movs	r2, #0
 8006026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <MX_USART2_UART_Init+0x4c>)
 800602a:	2200      	movs	r2, #0
 800602c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <MX_USART2_UART_Init+0x4c>)
 8006030:	2200      	movs	r2, #0
 8006032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <MX_USART2_UART_Init+0x4c>)
 8006036:	220c      	movs	r2, #12
 8006038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <MX_USART2_UART_Init+0x4c>)
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <MX_USART2_UART_Init+0x4c>)
 8006042:	2200      	movs	r2, #0
 8006044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006046:	4805      	ldr	r0, [pc, #20]	; (800605c <MX_USART2_UART_Init+0x4c>)
 8006048:	f002 fb80 	bl	800874c <HAL_UART_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006052:	f7fc fb19 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200029f4 	.word	0x200029f4
 8006060:	40004400 	.word	0x40004400

08006064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <HAL_UART_MspInit+0x94>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d133      	bne.n	80060ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006086:	2300      	movs	r3, #0
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <HAL_UART_MspInit+0x98>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <HAL_UART_MspInit+0x98>)
 8006090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006094:	6413      	str	r3, [r2, #64]	; 0x40
 8006096:	4b19      	ldr	r3, [pc, #100]	; (80060fc <HAL_UART_MspInit+0x98>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	4b15      	ldr	r3, [pc, #84]	; (80060fc <HAL_UART_MspInit+0x98>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	4a14      	ldr	r2, [pc, #80]	; (80060fc <HAL_UART_MspInit+0x98>)
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	6313      	str	r3, [r2, #48]	; 0x30
 80060b2:	4b12      	ldr	r3, [pc, #72]	; (80060fc <HAL_UART_MspInit+0x98>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060be:	230c      	movs	r3, #12
 80060c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c2:	2302      	movs	r3, #2
 80060c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ca:	2303      	movs	r3, #3
 80060cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060ce:	2307      	movs	r3, #7
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d2:	f107 0314 	add.w	r3, r7, #20
 80060d6:	4619      	mov	r1, r3
 80060d8:	4809      	ldr	r0, [pc, #36]	; (8006100 <HAL_UART_MspInit+0x9c>)
 80060da:	f000 fa77 	bl	80065cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	2026      	movs	r0, #38	; 0x26
 80060e4:	f000 f9a9 	bl	800643a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80060e8:	2026      	movs	r0, #38	; 0x26
 80060ea:	f000 f9c2 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80060ee:	bf00      	nop
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40004400 	.word	0x40004400
 80060fc:	40023800 	.word	0x40023800
 8006100:	40020000 	.word	0x40020000

08006104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800613c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006108:	480d      	ldr	r0, [pc, #52]	; (8006140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800610a:	490e      	ldr	r1, [pc, #56]	; (8006144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800610e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006110:	e002      	b.n	8006118 <LoopCopyDataInit>

08006112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006116:	3304      	adds	r3, #4

08006118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800611a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800611c:	d3f9      	bcc.n	8006112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800611e:	4a0b      	ldr	r2, [pc, #44]	; (800614c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006120:	4c0b      	ldr	r4, [pc, #44]	; (8006150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006124:	e001      	b.n	800612a <LoopFillZerobss>

08006126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006128:	3204      	adds	r2, #4

0800612a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800612a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800612c:	d3fb      	bcc.n	8006126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800612e:	f7ff fcfd 	bl	8005b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006132:	f003 fc61 	bl	80099f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006136:	f7fc f95d 	bl	80023f4 <main>
  bx  lr    
 800613a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800613c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006144:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8006148:	0800ef28 	.word	0x0800ef28
  ldr r2, =_sbss
 800614c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8006150:	20002a4c 	.word	0x20002a4c

08006154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006154:	e7fe      	b.n	8006154 <ADC_IRQHandler>
	...

08006158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_Init+0x40>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <HAL_Init+0x40>)
 8006162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_Init+0x40>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <HAL_Init+0x40>)
 800616e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <HAL_Init+0x40>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a07      	ldr	r2, [pc, #28]	; (8006198 <HAL_Init+0x40>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006180:	2003      	movs	r0, #3
 8006182:	f000 f94f 	bl	8006424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006186:	200f      	movs	r0, #15
 8006188:	f000 f808 	bl	800619c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800618c:	f7ff f9bc 	bl	8005508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40023c00 	.word	0x40023c00

0800619c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061a4:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_InitTick+0x54>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <HAL_InitTick+0x58>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f967 	bl	800648e <HAL_SYSTICK_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e00e      	b.n	80061e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b0f      	cmp	r3, #15
 80061ce:	d80a      	bhi.n	80061e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d0:	2200      	movs	r2, #0
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	f000 f92f 	bl	800643a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061dc:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <HAL_InitTick+0x5c>)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e000      	b.n	80061e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200000a0 	.word	0x200000a0
 80061f4:	200000a8 	.word	0x200000a8
 80061f8:	200000a4 	.word	0x200000a4

080061fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <HAL_IncTick+0x20>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_IncTick+0x24>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4413      	add	r3, r2
 800620c:	4a04      	ldr	r2, [pc, #16]	; (8006220 <HAL_IncTick+0x24>)
 800620e:	6013      	str	r3, [r2, #0]
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	200000a8 	.word	0x200000a8
 8006220:	20002a38 	.word	0x20002a38

08006224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return uwTick;
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_GetTick+0x14>)
 800622a:	681b      	ldr	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20002a38 	.word	0x20002a38

0800623c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7ff ffee 	bl	8006224 <HAL_GetTick>
 8006248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d005      	beq.n	8006262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_Delay+0x44>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006262:	bf00      	nop
 8006264:	f7ff ffde 	bl	8006224 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	429a      	cmp	r2, r3
 8006272:	d8f7      	bhi.n	8006264 <HAL_Delay+0x28>
  {
  }
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200000a8 	.word	0x200000a8

08006284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062a0:	4013      	ands	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062b6:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <__NVIC_SetPriorityGrouping+0x44>)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	60d3      	str	r3, [r2, #12]
}
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	e000ed00 	.word	0xe000ed00

080062cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <__NVIC_GetPriorityGrouping+0x18>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	f003 0307 	and.w	r3, r3, #7
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	e000ed00 	.word	0xe000ed00

080062e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	db0b      	blt.n	8006312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	4907      	ldr	r1, [pc, #28]	; (8006320 <__NVIC_EnableIRQ+0x38>)
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	2001      	movs	r0, #1
 800630a:	fa00 f202 	lsl.w	r2, r0, r2
 800630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000e100 	.word	0xe000e100

08006324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006334:	2b00      	cmp	r3, #0
 8006336:	db0a      	blt.n	800634e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	b2da      	uxtb	r2, r3
 800633c:	490c      	ldr	r1, [pc, #48]	; (8006370 <__NVIC_SetPriority+0x4c>)
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	440b      	add	r3, r1
 8006348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800634c:	e00a      	b.n	8006364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4908      	ldr	r1, [pc, #32]	; (8006374 <__NVIC_SetPriority+0x50>)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	3b04      	subs	r3, #4
 800635c:	0112      	lsls	r2, r2, #4
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	440b      	add	r3, r1
 8006362:	761a      	strb	r2, [r3, #24]
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000e100 	.word	0xe000e100
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006378:	b480      	push	{r7}
 800637a:	b089      	sub	sp, #36	; 0x24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f1c3 0307 	rsb	r3, r3, #7
 8006392:	2b04      	cmp	r3, #4
 8006394:	bf28      	it	cs
 8006396:	2304      	movcs	r3, #4
 8006398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	3304      	adds	r3, #4
 800639e:	2b06      	cmp	r3, #6
 80063a0:	d902      	bls.n	80063a8 <NVIC_EncodePriority+0x30>
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3b03      	subs	r3, #3
 80063a6:	e000      	b.n	80063aa <NVIC_EncodePriority+0x32>
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ac:	f04f 32ff 	mov.w	r2, #4294967295
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43da      	mvns	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	401a      	ands	r2, r3
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c0:	f04f 31ff 	mov.w	r1, #4294967295
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	43d9      	mvns	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d0:	4313      	orrs	r3, r2
         );
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3724      	adds	r7, #36	; 0x24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f0:	d301      	bcc.n	80063f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063f2:	2301      	movs	r3, #1
 80063f4:	e00f      	b.n	8006416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <SysTick_Config+0x40>)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063fe:	210f      	movs	r1, #15
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	f7ff ff8e 	bl	8006324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <SysTick_Config+0x40>)
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <SysTick_Config+0x40>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000e010 	.word	0xe000e010

08006424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff ff29 	bl	8006284 <__NVIC_SetPriorityGrouping>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	4603      	mov	r3, r0
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800644c:	f7ff ff3e 	bl	80062cc <__NVIC_GetPriorityGrouping>
 8006450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	6978      	ldr	r0, [r7, #20]
 8006458:	f7ff ff8e 	bl	8006378 <NVIC_EncodePriority>
 800645c:	4602      	mov	r2, r0
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff5d 	bl	8006324 <__NVIC_SetPriority>
}
 800646a:	bf00      	nop
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	4603      	mov	r3, r0
 800647a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800647c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff31 	bl	80062e8 <__NVIC_EnableIRQ>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff ffa2 	bl	80063e0 <SysTick_Config>
 800649c:	4603      	mov	r3, r0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064b4:	f7ff feb6 	bl	8006224 <HAL_GetTick>
 80064b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d008      	beq.n	80064d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2280      	movs	r2, #128	; 0x80
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e052      	b.n	800657e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0216 	bic.w	r2, r2, #22
 80064e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <HAL_DMA_Abort+0x62>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0208 	bic.w	r2, r2, #8
 8006516:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006528:	e013      	b.n	8006552 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800652a:	f7ff fe7b 	bl	8006224 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b05      	cmp	r3, #5
 8006536:	d90c      	bls.n	8006552 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2203      	movs	r2, #3
 8006542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e015      	b.n	800657e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e4      	bne.n	800652a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006564:	223f      	movs	r2, #63	; 0x3f
 8006566:	409a      	lsls	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d004      	beq.n	80065a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2280      	movs	r2, #128	; 0x80
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e00c      	b.n	80065be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2205      	movs	r2, #5
 80065a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b089      	sub	sp, #36	; 0x24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065de:	2300      	movs	r3, #0
 80065e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	e16b      	b.n	80068c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065e8:	2201      	movs	r2, #1
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4013      	ands	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	429a      	cmp	r2, r3
 8006602:	f040 815a 	bne.w	80068ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b01      	cmp	r3, #1
 8006610:	d005      	beq.n	800661e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800661a:	2b02      	cmp	r3, #2
 800661c:	d130      	bne.n	8006680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	2203      	movs	r2, #3
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43db      	mvns	r3, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	4313      	orrs	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006654:	2201      	movs	r2, #1
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	4013      	ands	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 0201 	and.w	r2, r3, #1
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4313      	orrs	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b03      	cmp	r3, #3
 800668a:	d017      	beq.n	80066bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	2203      	movs	r2, #3
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4013      	ands	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d123      	bne.n	8006710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	08da      	lsrs	r2, r3, #3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3208      	adds	r2, #8
 80066d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	220f      	movs	r2, #15
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	08da      	lsrs	r2, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3208      	adds	r2, #8
 800670a:	69b9      	ldr	r1, [r7, #24]
 800670c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	2203      	movs	r2, #3
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	4013      	ands	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 0203 	and.w	r2, r3, #3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4313      	orrs	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80b4 	beq.w	80068ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	4b60      	ldr	r3, [pc, #384]	; (80068d8 <HAL_GPIO_Init+0x30c>)
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	4a5f      	ldr	r2, [pc, #380]	; (80068d8 <HAL_GPIO_Init+0x30c>)
 800675c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006760:	6453      	str	r3, [r2, #68]	; 0x44
 8006762:	4b5d      	ldr	r3, [pc, #372]	; (80068d8 <HAL_GPIO_Init+0x30c>)
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800676e:	4a5b      	ldr	r2, [pc, #364]	; (80068dc <HAL_GPIO_Init+0x310>)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	3302      	adds	r3, #2
 8006776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	220f      	movs	r2, #15
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4013      	ands	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a52      	ldr	r2, [pc, #328]	; (80068e0 <HAL_GPIO_Init+0x314>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02b      	beq.n	80067f2 <HAL_GPIO_Init+0x226>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a51      	ldr	r2, [pc, #324]	; (80068e4 <HAL_GPIO_Init+0x318>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d025      	beq.n	80067ee <HAL_GPIO_Init+0x222>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a50      	ldr	r2, [pc, #320]	; (80068e8 <HAL_GPIO_Init+0x31c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01f      	beq.n	80067ea <HAL_GPIO_Init+0x21e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a4f      	ldr	r2, [pc, #316]	; (80068ec <HAL_GPIO_Init+0x320>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d019      	beq.n	80067e6 <HAL_GPIO_Init+0x21a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a4e      	ldr	r2, [pc, #312]	; (80068f0 <HAL_GPIO_Init+0x324>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_GPIO_Init+0x216>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a4d      	ldr	r2, [pc, #308]	; (80068f4 <HAL_GPIO_Init+0x328>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00d      	beq.n	80067de <HAL_GPIO_Init+0x212>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a4c      	ldr	r2, [pc, #304]	; (80068f8 <HAL_GPIO_Init+0x32c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <HAL_GPIO_Init+0x20e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a4b      	ldr	r2, [pc, #300]	; (80068fc <HAL_GPIO_Init+0x330>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_GPIO_Init+0x20a>
 80067d2:	2307      	movs	r3, #7
 80067d4:	e00e      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067d6:	2308      	movs	r3, #8
 80067d8:	e00c      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067da:	2306      	movs	r3, #6
 80067dc:	e00a      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067de:	2305      	movs	r3, #5
 80067e0:	e008      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067e2:	2304      	movs	r3, #4
 80067e4:	e006      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067e6:	2303      	movs	r3, #3
 80067e8:	e004      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e002      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <HAL_GPIO_Init+0x228>
 80067f2:	2300      	movs	r3, #0
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	f002 0203 	and.w	r2, r2, #3
 80067fa:	0092      	lsls	r2, r2, #2
 80067fc:	4093      	lsls	r3, r2
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006804:	4935      	ldr	r1, [pc, #212]	; (80068dc <HAL_GPIO_Init+0x310>)
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	3302      	adds	r3, #2
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006812:	4b3b      	ldr	r3, [pc, #236]	; (8006900 <HAL_GPIO_Init+0x334>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006836:	4a32      	ldr	r2, [pc, #200]	; (8006900 <HAL_GPIO_Init+0x334>)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800683c:	4b30      	ldr	r3, [pc, #192]	; (8006900 <HAL_GPIO_Init+0x334>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006860:	4a27      	ldr	r2, [pc, #156]	; (8006900 <HAL_GPIO_Init+0x334>)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006866:	4b26      	ldr	r3, [pc, #152]	; (8006900 <HAL_GPIO_Init+0x334>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800688a:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <HAL_GPIO_Init+0x334>)
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006890:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <HAL_GPIO_Init+0x334>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	43db      	mvns	r3, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068b4:	4a12      	ldr	r2, [pc, #72]	; (8006900 <HAL_GPIO_Init+0x334>)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3301      	adds	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	f67f ae90 	bls.w	80065e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3724      	adds	r7, #36	; 0x24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40013800 	.word	0x40013800
 80068e0:	40020000 	.word	0x40020000
 80068e4:	40020400 	.word	0x40020400
 80068e8:	40020800 	.word	0x40020800
 80068ec:	40020c00 	.word	0x40020c00
 80068f0:	40021000 	.word	0x40021000
 80068f4:	40021400 	.word	0x40021400
 80068f8:	40021800 	.word	0x40021800
 80068fc:	40021c00 	.word	0x40021c00
 8006900:	40013c00 	.word	0x40013c00

08006904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
 8006910:	4613      	mov	r3, r2
 8006912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006914:	787b      	ldrb	r3, [r7, #1]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006920:	e003      	b.n	800692a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	041a      	lsls	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e267      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d075      	beq.n	8006a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006956:	4b88      	ldr	r3, [pc, #544]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	2b04      	cmp	r3, #4
 8006960:	d00c      	beq.n	800697c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006962:	4b85      	ldr	r3, [pc, #532]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800696a:	2b08      	cmp	r3, #8
 800696c:	d112      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800696e:	4b82      	ldr	r3, [pc, #520]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697a:	d10b      	bne.n	8006994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800697c:	4b7e      	ldr	r3, [pc, #504]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x108>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d157      	bne.n	8006a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e242      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x74>
 800699e:	4b76      	ldr	r3, [pc, #472]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a75      	ldr	r2, [pc, #468]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e01d      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x98>
 80069b6:	4b70      	ldr	r3, [pc, #448]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6f      	ldr	r2, [pc, #444]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	4b6d      	ldr	r3, [pc, #436]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6c      	ldr	r2, [pc, #432]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e00b      	b.n	80069e8 <HAL_RCC_OscConfig+0xb0>
 80069d0:	4b69      	ldr	r3, [pc, #420]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a68      	ldr	r2, [pc, #416]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b66      	ldr	r3, [pc, #408]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a65      	ldr	r2, [pc, #404]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7ff fc18 	bl	8006224 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f8:	f7ff fc14 	bl	8006224 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e207      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0xc0>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a18:	f7ff fc04 	bl	8006224 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a20:	f7ff fc00 	bl	8006224 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e1f3      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	4b51      	ldr	r3, [pc, #324]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0xe8>
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d063      	beq.n	8006b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a4e:	4b4a      	ldr	r3, [pc, #296]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a5a:	4b47      	ldr	r3, [pc, #284]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d11c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a66:	4b44      	ldr	r3, [pc, #272]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d116      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a72:	4b41      	ldr	r3, [pc, #260]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCC_OscConfig+0x152>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d001      	beq.n	8006a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e1c7      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8a:	4b3b      	ldr	r3, [pc, #236]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4937      	ldr	r1, [pc, #220]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	e03a      	b.n	8006b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d020      	beq.n	8006aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa8:	4b34      	ldr	r3, [pc, #208]	; (8006b7c <HAL_RCC_OscConfig+0x244>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7ff fbb9 	bl	8006224 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab6:	f7ff fbb5 	bl	8006224 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e1a8      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac8:	4b2b      	ldr	r3, [pc, #172]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad4:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4925      	ldr	r1, [pc, #148]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]
 8006ae8:	e015      	b.n	8006b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aea:	4b24      	ldr	r3, [pc, #144]	; (8006b7c <HAL_RCC_OscConfig+0x244>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7ff fb98 	bl	8006224 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af8:	f7ff fb94 	bl	8006224 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e187      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d036      	beq.n	8006b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d016      	beq.n	8006b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <HAL_RCC_OscConfig+0x248>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7ff fb78 	bl	8006224 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b38:	f7ff fb74 	bl	8006224 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e167      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0x200>
 8006b56:	e01b      	b.n	8006b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <HAL_RCC_OscConfig+0x248>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7ff fb61 	bl	8006224 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b64:	e00e      	b.n	8006b84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b66:	f7ff fb5d 	bl	8006224 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d907      	bls.n	8006b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e150      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	42470000 	.word	0x42470000
 8006b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b84:	4b88      	ldr	r3, [pc, #544]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1ea      	bne.n	8006b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8097 	beq.w	8006ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ba2:	4b81      	ldr	r3, [pc, #516]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	4b7d      	ldr	r3, [pc, #500]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	4a7c      	ldr	r2, [pc, #496]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bbe:	4b7a      	ldr	r3, [pc, #488]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bce:	4b77      	ldr	r3, [pc, #476]	; (8006dac <HAL_RCC_OscConfig+0x474>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d118      	bne.n	8006c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bda:	4b74      	ldr	r3, [pc, #464]	; (8006dac <HAL_RCC_OscConfig+0x474>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a73      	ldr	r2, [pc, #460]	; (8006dac <HAL_RCC_OscConfig+0x474>)
 8006be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006be6:	f7ff fb1d 	bl	8006224 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bee:	f7ff fb19 	bl	8006224 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e10c      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c00:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCC_OscConfig+0x474>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d106      	bne.n	8006c22 <HAL_RCC_OscConfig+0x2ea>
 8006c14:	4b64      	ldr	r3, [pc, #400]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	4a63      	ldr	r2, [pc, #396]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c20:	e01c      	b.n	8006c5c <HAL_RCC_OscConfig+0x324>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b05      	cmp	r3, #5
 8006c28:	d10c      	bne.n	8006c44 <HAL_RCC_OscConfig+0x30c>
 8006c2a:	4b5f      	ldr	r3, [pc, #380]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	4a5e      	ldr	r2, [pc, #376]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c30:	f043 0304 	orr.w	r3, r3, #4
 8006c34:	6713      	str	r3, [r2, #112]	; 0x70
 8006c36:	4b5c      	ldr	r3, [pc, #368]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	4a5b      	ldr	r2, [pc, #364]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	f043 0301 	orr.w	r3, r3, #1
 8006c40:	6713      	str	r3, [r2, #112]	; 0x70
 8006c42:	e00b      	b.n	8006c5c <HAL_RCC_OscConfig+0x324>
 8006c44:	4b58      	ldr	r3, [pc, #352]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	4a57      	ldr	r2, [pc, #348]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c50:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	4a54      	ldr	r2, [pc, #336]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c56:	f023 0304 	bic.w	r3, r3, #4
 8006c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d015      	beq.n	8006c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c64:	f7ff fade 	bl	8006224 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7ff fada 	bl	8006224 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e0cb      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c82:	4b49      	ldr	r3, [pc, #292]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0ee      	beq.n	8006c6c <HAL_RCC_OscConfig+0x334>
 8006c8e:	e014      	b.n	8006cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c90:	f7ff fac8 	bl	8006224 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c98:	f7ff fac4 	bl	8006224 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e0b5      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cae:	4b3e      	ldr	r3, [pc, #248]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ee      	bne.n	8006c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d105      	bne.n	8006ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc0:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	4a38      	ldr	r2, [pc, #224]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80a1 	beq.w	8006e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cd6:	4b34      	ldr	r3, [pc, #208]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 030c 	and.w	r3, r3, #12
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d05c      	beq.n	8006d9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d141      	bne.n	8006d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <HAL_RCC_OscConfig+0x478>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7ff fa98 	bl	8006224 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7ff fa94 	bl	8006224 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e087      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d0a:	4b27      	ldr	r3, [pc, #156]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	019b      	lsls	r3, r3, #6
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	061b      	lsls	r3, r3, #24
 8006d3a:	491b      	ldr	r1, [pc, #108]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d40:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <HAL_RCC_OscConfig+0x478>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d46:	f7ff fa6d 	bl	8006224 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d4e:	f7ff fa69 	bl	8006224 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e05c      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x416>
 8006d6c:	e054      	b.n	8006e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <HAL_RCC_OscConfig+0x478>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d74:	f7ff fa56 	bl	8006224 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7ff fa52 	bl	8006224 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e045      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_RCC_OscConfig+0x470>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f0      	bne.n	8006d7c <HAL_RCC_OscConfig+0x444>
 8006d9a:	e03d      	b.n	8006e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d107      	bne.n	8006db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e038      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40007000 	.word	0x40007000
 8006db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006db4:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <HAL_RCC_OscConfig+0x4ec>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d028      	beq.n	8006e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d121      	bne.n	8006e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d11a      	bne.n	8006e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006de4:	4013      	ands	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d111      	bne.n	8006e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d107      	bne.n	8006e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800

08006e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0cc      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e3c:	4b68      	ldr	r3, [pc, #416]	; (8006fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d90c      	bls.n	8006e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4a:	4b65      	ldr	r3, [pc, #404]	; (8006fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e52:	4b63      	ldr	r3, [pc, #396]	; (8006fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0b8      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d020      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e7c:	4b59      	ldr	r3, [pc, #356]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4a58      	ldr	r2, [pc, #352]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e94:	4b53      	ldr	r3, [pc, #332]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4a52      	ldr	r2, [pc, #328]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ea0:	4b50      	ldr	r3, [pc, #320]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	494d      	ldr	r1, [pc, #308]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d044      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec6:	4b47      	ldr	r3, [pc, #284]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d119      	bne.n	8006f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e07f      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d003      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee6:	4b3f      	ldr	r3, [pc, #252]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e06f      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef6:	4b3b      	ldr	r3, [pc, #236]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e067      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f06:	4b37      	ldr	r3, [pc, #220]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f023 0203 	bic.w	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	4934      	ldr	r1, [pc, #208]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f18:	f7ff f984 	bl	8006224 <HAL_GetTick>
 8006f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1e:	e00a      	b.n	8006f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f20:	f7ff f980 	bl	8006224 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e04f      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f36:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 020c 	and.w	r2, r3, #12
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d1eb      	bne.n	8006f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d20c      	bcs.n	8006f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f56:	4b22      	ldr	r3, [pc, #136]	; (8006fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5e:	4b20      	ldr	r3, [pc, #128]	; (8006fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e032      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f7c:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4916      	ldr	r1, [pc, #88]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	490e      	ldr	r1, [pc, #56]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fae:	f000 f821 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	490a      	ldr	r1, [pc, #40]	; (8006fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8006fc0:	5ccb      	ldrb	r3, [r1, r3]
 8006fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <HAL_RCC_ClockConfig+0x1c4>)
 8006fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff f8e4 	bl	800619c <HAL_InitTick>

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40023c00 	.word	0x40023c00
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	0800edb8 	.word	0x0800edb8
 8006fec:	200000a0 	.word	0x200000a0
 8006ff0:	200000a4 	.word	0x200000a4

08006ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff8:	b094      	sub	sp, #80	; 0x50
 8006ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8007000:	2300      	movs	r3, #0
 8007002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007004:	2300      	movs	r3, #0
 8007006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800700c:	4b79      	ldr	r3, [pc, #484]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b08      	cmp	r3, #8
 8007016:	d00d      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0x40>
 8007018:	2b08      	cmp	r3, #8
 800701a:	f200 80e1 	bhi.w	80071e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <HAL_RCC_GetSysClockFreq+0x34>
 8007022:	2b04      	cmp	r3, #4
 8007024:	d003      	beq.n	800702e <HAL_RCC_GetSysClockFreq+0x3a>
 8007026:	e0db      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007028:	4b73      	ldr	r3, [pc, #460]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800702a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800702c:	e0db      	b.n	80071e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800702e:	4b73      	ldr	r3, [pc, #460]	; (80071fc <HAL_RCC_GetSysClockFreq+0x208>)
 8007030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007032:	e0d8      	b.n	80071e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007034:	4b6f      	ldr	r3, [pc, #444]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800703c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800703e:	4b6d      	ldr	r3, [pc, #436]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d063      	beq.n	8007112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800704a:	4b6a      	ldr	r3, [pc, #424]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	099b      	lsrs	r3, r3, #6
 8007050:	2200      	movs	r2, #0
 8007052:	63bb      	str	r3, [r7, #56]	; 0x38
 8007054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705c:	633b      	str	r3, [r7, #48]	; 0x30
 800705e:	2300      	movs	r3, #0
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
 8007062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	f04f 0000 	mov.w	r0, #0
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	0159      	lsls	r1, r3, #5
 8007074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007078:	0150      	lsls	r0, r2, #5
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4621      	mov	r1, r4
 8007080:	1a51      	subs	r1, r2, r1
 8007082:	6139      	str	r1, [r7, #16]
 8007084:	4629      	mov	r1, r5
 8007086:	eb63 0301 	sbc.w	r3, r3, r1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007098:	4659      	mov	r1, fp
 800709a:	018b      	lsls	r3, r1, #6
 800709c:	4651      	mov	r1, sl
 800709e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070a2:	4651      	mov	r1, sl
 80070a4:	018a      	lsls	r2, r1, #6
 80070a6:	4651      	mov	r1, sl
 80070a8:	ebb2 0801 	subs.w	r8, r2, r1
 80070ac:	4659      	mov	r1, fp
 80070ae:	eb63 0901 	sbc.w	r9, r3, r1
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070c6:	4690      	mov	r8, r2
 80070c8:	4699      	mov	r9, r3
 80070ca:	4623      	mov	r3, r4
 80070cc:	eb18 0303 	adds.w	r3, r8, r3
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	462b      	mov	r3, r5
 80070d4:	eb49 0303 	adc.w	r3, r9, r3
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80070e6:	4629      	mov	r1, r5
 80070e8:	024b      	lsls	r3, r1, #9
 80070ea:	4621      	mov	r1, r4
 80070ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070f0:	4621      	mov	r1, r4
 80070f2:	024a      	lsls	r2, r1, #9
 80070f4:	4610      	mov	r0, r2
 80070f6:	4619      	mov	r1, r3
 80070f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fa:	2200      	movs	r2, #0
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007104:	f7f9 f8bc 	bl	8000280 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4613      	mov	r3, r2
 800710e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007110:	e058      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007112:	4b38      	ldr	r3, [pc, #224]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	2200      	movs	r2, #0
 800711a:	4618      	mov	r0, r3
 800711c:	4611      	mov	r1, r2
 800711e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007122:	623b      	str	r3, [r7, #32]
 8007124:	2300      	movs	r3, #0
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
 8007128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	f04f 0000 	mov.w	r0, #0
 8007134:	f04f 0100 	mov.w	r1, #0
 8007138:	0159      	lsls	r1, r3, #5
 800713a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800713e:	0150      	lsls	r0, r2, #5
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4641      	mov	r1, r8
 8007146:	ebb2 0a01 	subs.w	sl, r2, r1
 800714a:	4649      	mov	r1, r9
 800714c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800715c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007164:	ebb2 040a 	subs.w	r4, r2, sl
 8007168:	eb63 050b 	sbc.w	r5, r3, fp
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	00eb      	lsls	r3, r5, #3
 8007176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800717a:	00e2      	lsls	r2, r4, #3
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	4643      	mov	r3, r8
 8007182:	18e3      	adds	r3, r4, r3
 8007184:	603b      	str	r3, [r7, #0]
 8007186:	464b      	mov	r3, r9
 8007188:	eb45 0303 	adc.w	r3, r5, r3
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800719a:	4629      	mov	r1, r5
 800719c:	028b      	lsls	r3, r1, #10
 800719e:	4621      	mov	r1, r4
 80071a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071a4:	4621      	mov	r1, r4
 80071a6:	028a      	lsls	r2, r1, #10
 80071a8:	4610      	mov	r0, r2
 80071aa:	4619      	mov	r1, r3
 80071ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ae:	2200      	movs	r2, #0
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	61fa      	str	r2, [r7, #28]
 80071b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071b8:	f7f9 f862 	bl	8000280 <__aeabi_uldivmod>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4613      	mov	r3, r2
 80071c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	3301      	adds	r3, #1
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80071d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071de:	e002      	b.n	80071e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80071e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3750      	adds	r7, #80	; 0x50
 80071ec:	46bd      	mov	sp, r7
 80071ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f2:	bf00      	nop
 80071f4:	40023800 	.word	0x40023800
 80071f8:	00f42400 	.word	0x00f42400
 80071fc:	007a1200 	.word	0x007a1200

08007200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <HAL_RCC_GetHCLKFreq+0x14>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	200000a0 	.word	0x200000a0

08007218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800721c:	f7ff fff0 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007220:	4602      	mov	r2, r0
 8007222:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	0a9b      	lsrs	r3, r3, #10
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	4903      	ldr	r1, [pc, #12]	; (800723c <HAL_RCC_GetPCLK1Freq+0x24>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007234:	4618      	mov	r0, r3
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40023800 	.word	0x40023800
 800723c:	0800edc8 	.word	0x0800edc8

08007240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007244:	f7ff ffdc 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 8007248:	4602      	mov	r2, r0
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	0b5b      	lsrs	r3, r3, #13
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	4903      	ldr	r1, [pc, #12]	; (8007264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007256:	5ccb      	ldrb	r3, [r1, r3]
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800725c:	4618      	mov	r0, r3
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40023800 	.word	0x40023800
 8007264:	0800edc8 	.word	0x0800edc8

08007268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e07b      	b.n	8007372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d108      	bne.n	8007294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728a:	d009      	beq.n	80072a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	61da      	str	r2, [r3, #28]
 8007292:	e005      	b.n	80072a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fd fa3c 	bl	8004738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007324:	ea42 0103 	orr.w	r1, r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	0c1b      	lsrs	r3, r3, #16
 800733e:	f003 0104 	and.w	r1, r3, #4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	f003 0210 	and.w	r2, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_SPI_Transmit+0x22>
 8007398:	2302      	movs	r3, #2
 800739a:	e126      	b.n	80075ea <HAL_SPI_Transmit+0x270>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073a4:	f7fe ff3e 	bl	8006224 <HAL_GetTick>
 80073a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
 80073bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073be:	e10b      	b.n	80075d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <HAL_SPI_Transmit+0x52>
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073d0:	e102      	b.n	80075d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2203      	movs	r2, #3
 80073d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007418:	d10f      	bne.n	800743a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007438:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d007      	beq.n	8007458 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007460:	d14b      	bne.n	80074fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_SPI_Transmit+0xf6>
 800746a:	8afb      	ldrh	r3, [r7, #22]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d13e      	bne.n	80074ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007494:	e02b      	b.n	80074ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d112      	bne.n	80074ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	881a      	ldrh	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	1c9a      	adds	r2, r3, #2
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80074c8:	e011      	b.n	80074ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074ca:	f7fe feab 	bl	8006224 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d803      	bhi.n	80074e2 <HAL_SPI_Transmit+0x168>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d102      	bne.n	80074e8 <HAL_SPI_Transmit+0x16e>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074ec:	e074      	b.n	80075d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1ce      	bne.n	8007496 <HAL_SPI_Transmit+0x11c>
 80074f8:	e04c      	b.n	8007594 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <HAL_SPI_Transmit+0x18e>
 8007502:	8afb      	ldrh	r3, [r7, #22]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d140      	bne.n	800758a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	7812      	ldrb	r2, [r2, #0]
 8007514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800752e:	e02c      	b.n	800758a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b02      	cmp	r3, #2
 800753c:	d113      	bne.n	8007566 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	86da      	strh	r2, [r3, #54]	; 0x36
 8007564:	e011      	b.n	800758a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007566:	f7fe fe5d 	bl	8006224 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d803      	bhi.n	800757e <HAL_SPI_Transmit+0x204>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d102      	bne.n	8007584 <HAL_SPI_Transmit+0x20a>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007588:	e026      	b.n	80075d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1cd      	bne.n	8007530 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fbcb 	bl	8007d34 <SPI_EndRxTxTransaction>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e000      	b.n	80075d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80075d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af02      	add	r7, sp, #8
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800760e:	d112      	bne.n	8007636 <HAL_SPI_Receive+0x44>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10e      	bne.n	8007636 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2204      	movs	r2, #4
 800761c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4613      	mov	r3, r2
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f8f1 	bl	8007814 <HAL_SPI_TransmitReceive>
 8007632:	4603      	mov	r3, r0
 8007634:	e0ea      	b.n	800780c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_SPI_Receive+0x52>
 8007640:	2302      	movs	r3, #2
 8007642:	e0e3      	b.n	800780c <HAL_SPI_Receive+0x21a>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800764c:	f7fe fdea 	bl	8006224 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d002      	beq.n	8007664 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800765e:	2302      	movs	r3, #2
 8007660:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007662:	e0ca      	b.n	80077fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Receive+0x7e>
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007674:	e0c1      	b.n	80077fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2204      	movs	r2, #4
 800767a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076bc:	d10f      	bne.n	80076de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d007      	beq.n	80076fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d162      	bne.n	80077ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007704:	e02e      	b.n	8007764 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b01      	cmp	r3, #1
 8007712:	d115      	bne.n	8007740 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f103 020c 	add.w	r2, r3, #12
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800773e:	e011      	b.n	8007764 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007740:	f7fe fd70 	bl	8006224 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d803      	bhi.n	8007758 <HAL_SPI_Receive+0x166>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d102      	bne.n	800775e <HAL_SPI_Receive+0x16c>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007762:	e04a      	b.n	80077fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1cb      	bne.n	8007706 <HAL_SPI_Receive+0x114>
 800776e:	e031      	b.n	80077d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b01      	cmp	r3, #1
 800777c:	d113      	bne.n	80077a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	b292      	uxth	r2, r2
 800778a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	1c9a      	adds	r2, r3, #2
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077a4:	e011      	b.n	80077ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a6:	f7fe fd3d 	bl	8006224 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d803      	bhi.n	80077be <HAL_SPI_Receive+0x1cc>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d102      	bne.n	80077c4 <HAL_SPI_Receive+0x1d2>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077c8:	e017      	b.n	80077fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1cd      	bne.n	8007770 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fa45 	bl	8007c68 <SPI_EndRxTransaction>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
 80077f6:	e000      	b.n	80077fa <HAL_SPI_Receive+0x208>
  }

error :
 80077f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08c      	sub	sp, #48	; 0x30
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007822:	2301      	movs	r3, #1
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_SPI_TransmitReceive+0x26>
 8007836:	2302      	movs	r3, #2
 8007838:	e18a      	b.n	8007b50 <HAL_SPI_TransmitReceive+0x33c>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007842:	f7fe fcef 	bl	8006224 <HAL_GetTick>
 8007846:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007858:	887b      	ldrh	r3, [r7, #2]
 800785a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800785c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007860:	2b01      	cmp	r3, #1
 8007862:	d00f      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x70>
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800786a:	d107      	bne.n	800787c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <HAL_SPI_TransmitReceive+0x68>
 8007874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007878:	2b04      	cmp	r3, #4
 800787a:	d003      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800787c:	2302      	movs	r3, #2
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007882:	e15b      	b.n	8007b3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_SPI_TransmitReceive+0x82>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_SPI_TransmitReceive+0x82>
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d103      	bne.n	800789e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800789c:	e14e      	b.n	8007b3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d003      	beq.n	80078b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2205      	movs	r2, #5
 80078ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	887a      	ldrh	r2, [r7, #2]
 80078c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	887a      	ldrh	r2, [r7, #2]
 80078c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	887a      	ldrh	r2, [r7, #2]
 80078d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	887a      	ldrh	r2, [r7, #2]
 80078da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d007      	beq.n	8007906 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800790e:	d178      	bne.n	8007a02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_SPI_TransmitReceive+0x10a>
 8007918:	8b7b      	ldrh	r3, [r7, #26]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d166      	bne.n	80079ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	881a      	ldrh	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007942:	e053      	b.n	80079ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d11b      	bne.n	800798a <HAL_SPI_TransmitReceive+0x176>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d016      	beq.n	800798a <HAL_SPI_TransmitReceive+0x176>
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	2b01      	cmp	r3, #1
 8007960:	d113      	bne.n	800798a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	881a      	ldrh	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	1c9a      	adds	r2, r3, #2
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	d119      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x1b8>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	b292      	uxth	r2, r2
 80079ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	1c9a      	adds	r2, r3, #2
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079c8:	2301      	movs	r3, #1
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079cc:	f7fe fc2a 	bl	8006224 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d8:	429a      	cmp	r2, r3
 80079da:	d807      	bhi.n	80079ec <HAL_SPI_TransmitReceive+0x1d8>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d003      	beq.n	80079ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079ea:	e0a7      	b.n	8007b3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1a6      	bne.n	8007944 <HAL_SPI_TransmitReceive+0x130>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1a1      	bne.n	8007944 <HAL_SPI_TransmitReceive+0x130>
 8007a00:	e07c      	b.n	8007afc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x1fc>
 8007a0a:	8b7b      	ldrh	r3, [r7, #26]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d16b      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	7812      	ldrb	r2, [r2, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a36:	e057      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d11c      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x26c>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d017      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x26c>
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d114      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d119      	bne.n	8007ac2 <HAL_SPI_TransmitReceive+0x2ae>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d014      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ac2:	f7fe fbaf 	bl	8006224 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d803      	bhi.n	8007ada <HAL_SPI_TransmitReceive+0x2c6>
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad8:	d102      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x2cc>
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ae6:	e029      	b.n	8007b3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1a2      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x224>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d19d      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f917 	bl	8007d34 <SPI_EndRxTxTransaction>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2220      	movs	r2, #32
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b18:	e010      	b.n	8007b3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	e000      	b.n	8007b3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3730      	adds	r7, #48	; 0x30
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b68:	f7fe fb5c 	bl	8006224 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4413      	add	r3, r2
 8007b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b78:	f7fe fb54 	bl	8006224 <HAL_GetTick>
 8007b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b7e:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	015b      	lsls	r3, r3, #5
 8007b84:	0d1b      	lsrs	r3, r3, #20
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b8e:	e054      	b.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b96:	d050      	beq.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b98:	f7fe fb44 	bl	8006224 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d902      	bls.n	8007bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d13d      	bne.n	8007c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc6:	d111      	bne.n	8007bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd0:	d004      	beq.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bda:	d107      	bne.n	8007bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf4:	d10f      	bne.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e017      	b.n	8007c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4013      	ands	r3, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	bf0c      	ite	eq
 8007c4a:	2301      	moveq	r3, #1
 8007c4c:	2300      	movne	r3, #0
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d19b      	bne.n	8007b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3720      	adds	r7, #32
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	200000a0 	.word	0x200000a0

08007c68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c7c:	d111      	bne.n	8007ca2 <SPI_EndRxTransaction+0x3a>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c86:	d004      	beq.n	8007c92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c90:	d107      	bne.n	8007ca2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007caa:	d12a      	bne.n	8007d02 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb4:	d012      	beq.n	8007cdc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff ff49 	bl	8007b58 <SPI_WaitFlagStateUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02d      	beq.n	8007d28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	f043 0220 	orr.w	r2, r3, #32
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e026      	b.n	8007d2a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff ff36 	bl	8007b58 <SPI_WaitFlagStateUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01a      	beq.n	8007d28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	f043 0220 	orr.w	r2, r3, #32
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e013      	b.n	8007d2a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff ff23 	bl	8007b58 <SPI_WaitFlagStateUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	f043 0220 	orr.w	r2, r3, #32
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e000      	b.n	8007d2a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d40:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <SPI_EndRxTxTransaction+0x7c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1b      	ldr	r2, [pc, #108]	; (8007db4 <SPI_EndRxTxTransaction+0x80>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	0d5b      	lsrs	r3, r3, #21
 8007d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d50:	fb02 f303 	mul.w	r3, r2, r3
 8007d54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d5e:	d112      	bne.n	8007d86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2200      	movs	r2, #0
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fef4 	bl	8007b58 <SPI_WaitFlagStateUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f043 0220 	orr.w	r2, r3, #32
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e00f      	b.n	8007da6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9c:	2b80      	cmp	r3, #128	; 0x80
 8007d9e:	d0f2      	beq.n	8007d86 <SPI_EndRxTxTransaction+0x52>
 8007da0:	e000      	b.n	8007da4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007da2:	bf00      	nop
  }

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	200000a0 	.word	0x200000a0
 8007db4:	165e9f81 	.word	0x165e9f81

08007db8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e038      	b.n	8007e40 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7f9 f8fe 	bl	8000fe4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3308      	adds	r3, #8
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f001 fd22 	bl	800983c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	461a      	mov	r2, r3
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	f001 fd84 	bl	8009910 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6858      	ldr	r0, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	f001 fdb1 	bl	800997c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	6892      	ldr	r2, [r2, #8]
 8007e22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	6892      	ldr	r2, [r2, #8]
 8007e2e:	f041 0101 	orr.w	r1, r1, #1
 8007e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e041      	b.n	8007ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fd feba 	bl	8005be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f000 fa96 	bl	80083b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d001      	beq.n	8007f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e04e      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a23      	ldr	r2, [pc, #140]	; (8007fac <HAL_TIM_Base_Start_IT+0xc4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d022      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2a:	d01d      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1c      	ldr	r2, [pc, #112]	; (8007fb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1b      	ldr	r2, [pc, #108]	; (8007fbc <HAL_TIM_Base_Start_IT+0xd4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d111      	bne.n	8007f8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b06      	cmp	r3, #6
 8007f78:	d010      	beq.n	8007f9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	e007      	b.n	8007f9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40010400 	.word	0x40010400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40001800 	.word	0x40001800

08007fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0202 	mvn.w	r2, #2
 8007ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9b5 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f9a7 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f9b8 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b04      	cmp	r3, #4
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0204 	mvn.w	r2, #4
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f98b 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f97d 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f98e 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0308 	and.w	r3, r3, #8
 8008082:	2b08      	cmp	r3, #8
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b08      	cmp	r3, #8
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0208 	mvn.w	r2, #8
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f961 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f953 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f964 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d122      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d11b      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0210 	mvn.w	r2, #16
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2208      	movs	r2, #8
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f937 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f929 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f93a 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b01      	cmp	r3, #1
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0201 	mvn.w	r2, #1
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fc fa36 	bl	80045b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fae0 	bl	8008738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d10e      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d107      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8ff 	bl	80083a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d10e      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d107      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0220 	mvn.w	r2, #32
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 faaa 	bl	8008724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_TIM_ConfigClockSource+0x1c>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e0b4      	b.n	800835e <HAL_TIM_ConfigClockSource+0x186>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800821a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822c:	d03e      	beq.n	80082ac <HAL_TIM_ConfigClockSource+0xd4>
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008232:	f200 8087 	bhi.w	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823a:	f000 8086 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x172>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	d87f      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008244:	2b70      	cmp	r3, #112	; 0x70
 8008246:	d01a      	beq.n	800827e <HAL_TIM_ConfigClockSource+0xa6>
 8008248:	2b70      	cmp	r3, #112	; 0x70
 800824a:	d87b      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800824c:	2b60      	cmp	r3, #96	; 0x60
 800824e:	d050      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008250:	2b60      	cmp	r3, #96	; 0x60
 8008252:	d877      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008254:	2b50      	cmp	r3, #80	; 0x50
 8008256:	d03c      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008258:	2b50      	cmp	r3, #80	; 0x50
 800825a:	d873      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d058      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x13a>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	d86f      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008264:	2b30      	cmp	r3, #48	; 0x30
 8008266:	d064      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008268:	2b30      	cmp	r3, #48	; 0x30
 800826a:	d86b      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d060      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008270:	2b20      	cmp	r3, #32
 8008272:	d867      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d05c      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008278:	2b10      	cmp	r3, #16
 800827a:	d05a      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 800827c:	e062      	b.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6899      	ldr	r1, [r3, #8]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f000 f9ad 	bl	80085ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	609a      	str	r2, [r3, #8]
      break;
 80082aa:	e04f      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6899      	ldr	r1, [r3, #8]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f000 f996 	bl	80085ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082ce:	609a      	str	r2, [r3, #8]
      break;
 80082d0:	e03c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 f90a 	bl	80084f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2150      	movs	r1, #80	; 0x50
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f963 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 80082f0:	e02c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6859      	ldr	r1, [r3, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	461a      	mov	r2, r3
 8008300:	f000 f929 	bl	8008556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2160      	movs	r1, #96	; 0x60
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f953 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8008310:	e01c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6859      	ldr	r1, [r3, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	461a      	mov	r2, r3
 8008320:	f000 f8ea 	bl	80084f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	4618      	mov	r0, r3
 800832c:	f000 f943 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8008330:	e00c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f000 f93a 	bl	80085b6 <TIM_ITRx_SetConfig>
      break;
 8008342:	e003      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e000      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800834a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a40      	ldr	r2, [pc, #256]	; (80084cc <TIM_Base_SetConfig+0x114>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d013      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d00f      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a3d      	ldr	r2, [pc, #244]	; (80084d0 <TIM_Base_SetConfig+0x118>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00b      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a3c      	ldr	r2, [pc, #240]	; (80084d4 <TIM_Base_SetConfig+0x11c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d007      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a3b      	ldr	r2, [pc, #236]	; (80084d8 <TIM_Base_SetConfig+0x120>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a3a      	ldr	r2, [pc, #232]	; (80084dc <TIM_Base_SetConfig+0x124>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d108      	bne.n	800840a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2f      	ldr	r2, [pc, #188]	; (80084cc <TIM_Base_SetConfig+0x114>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d02b      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008418:	d027      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2c      	ldr	r2, [pc, #176]	; (80084d0 <TIM_Base_SetConfig+0x118>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d023      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2b      	ldr	r2, [pc, #172]	; (80084d4 <TIM_Base_SetConfig+0x11c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01f      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <TIM_Base_SetConfig+0x120>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01b      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a29      	ldr	r2, [pc, #164]	; (80084dc <TIM_Base_SetConfig+0x124>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d017      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a28      	ldr	r2, [pc, #160]	; (80084e0 <TIM_Base_SetConfig+0x128>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a27      	ldr	r2, [pc, #156]	; (80084e4 <TIM_Base_SetConfig+0x12c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00f      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a26      	ldr	r2, [pc, #152]	; (80084e8 <TIM_Base_SetConfig+0x130>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00b      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a25      	ldr	r2, [pc, #148]	; (80084ec <TIM_Base_SetConfig+0x134>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a24      	ldr	r2, [pc, #144]	; (80084f0 <TIM_Base_SetConfig+0x138>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a23      	ldr	r2, [pc, #140]	; (80084f4 <TIM_Base_SetConfig+0x13c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <TIM_Base_SetConfig+0x114>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_Base_SetConfig+0xf8>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <TIM_Base_SetConfig+0x124>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d103      	bne.n	80084b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	615a      	str	r2, [r3, #20]
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800
 80084d8:	40000c00 	.word	0x40000c00
 80084dc:	40010400 	.word	0x40010400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800
 80084ec:	40001800 	.word	0x40001800
 80084f0:	40001c00 	.word	0x40001c00
 80084f4:	40002000 	.word	0x40002000

080084f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f023 0201 	bic.w	r2, r3, #1
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f023 030a 	bic.w	r3, r3, #10
 8008534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008556:	b480      	push	{r7}
 8008558:	b087      	sub	sp, #28
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f023 0210 	bic.w	r2, r3, #16
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	031b      	lsls	r3, r3, #12
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4313      	orrs	r3, r2
 800859c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	621a      	str	r2, [r3, #32]
}
 80085aa:	bf00      	nop
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	f043 0307 	orr.w	r3, r3, #7
 80085d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	609a      	str	r2, [r3, #8]
}
 80085e0:	bf00      	nop
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	021a      	lsls	r2, r3, #8
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	431a      	orrs	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4313      	orrs	r3, r2
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	609a      	str	r2, [r3, #8]
}
 8008620:	bf00      	nop
 8008622:	371c      	adds	r7, #28
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008640:	2302      	movs	r3, #2
 8008642:	e05a      	b.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a21      	ldr	r2, [pc, #132]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d022      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008690:	d01d      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1d      	ldr	r2, [pc, #116]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d018      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1a      	ldr	r2, [pc, #104]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00e      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a18      	ldr	r2, [pc, #96]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d009      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a17      	ldr	r2, [pc, #92]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d004      	beq.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a15      	ldr	r2, [pc, #84]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d10c      	bne.n	80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40010000 	.word	0x40010000
 800870c:	40000400 	.word	0x40000400
 8008710:	40000800 	.word	0x40000800
 8008714:	40000c00 	.word	0x40000c00
 8008718:	40010400 	.word	0x40010400
 800871c:	40014000 	.word	0x40014000
 8008720:	40001800 	.word	0x40001800

08008724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e03f      	b.n	80087de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fd fc76 	bl	8006064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2224      	movs	r2, #36	; 0x24
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800878e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fddf 	bl	8009354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	695a      	ldr	r2, [r3, #20]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b08a      	sub	sp, #40	; 0x28
 80087ea:	af02      	add	r7, sp, #8
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b20      	cmp	r3, #32
 8008804:	d17c      	bne.n	8008900 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <HAL_UART_Transmit+0x2c>
 800880c:	88fb      	ldrh	r3, [r7, #6]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e075      	b.n	8008902 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_UART_Transmit+0x3e>
 8008820:	2302      	movs	r3, #2
 8008822:	e06e      	b.n	8008902 <HAL_UART_Transmit+0x11c>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2221      	movs	r2, #33	; 0x21
 8008836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800883a:	f7fd fcf3 	bl	8006224 <HAL_GetTick>
 800883e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008854:	d108      	bne.n	8008868 <HAL_UART_Transmit+0x82>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	e003      	b.n	8008870 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008878:	e02a      	b.n	80088d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2200      	movs	r2, #0
 8008882:	2180      	movs	r1, #128	; 0x80
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fb1f 	bl	8008ec8 <UART_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e036      	b.n	8008902 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	3302      	adds	r3, #2
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	e007      	b.n	80088c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1cf      	bne.n	800887a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2200      	movs	r2, #0
 80088e2:	2140      	movs	r1, #64	; 0x40
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 faef 	bl	8008ec8 <UART_WaitOnFlagUntilTimeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e006      	b.n	8008902 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e000      	b.n	8008902 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	3720      	adds	r7, #32
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	4613      	mov	r3, r2
 8008916:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b20      	cmp	r3, #32
 8008922:	d11d      	bne.n	8008960 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <HAL_UART_Receive_IT+0x26>
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e016      	b.n	8008962 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <HAL_UART_Receive_IT+0x38>
 800893e:	2302      	movs	r3, #2
 8008940:	e00f      	b.n	8008962 <HAL_UART_Receive_IT+0x58>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008950:	88fb      	ldrh	r3, [r7, #6]
 8008952:	461a      	mov	r2, r3
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fb24 	bl	8008fa4 <UART_Start_Receive_IT>
 800895c:	4603      	mov	r3, r0
 800895e:	e000      	b.n	8008962 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008960:	2302      	movs	r3, #2
  }
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b0ba      	sub	sp, #232	; 0xe8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008992:	2300      	movs	r3, #0
 8008994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008998:	2300      	movs	r3, #0
 800899a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800899e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80089aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10f      	bne.n	80089d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d009      	beq.n	80089d2 <HAL_UART_IRQHandler+0x66>
 80089be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc07 	bl	80091de <UART_Receive_IT>
      return;
 80089d0:	e256      	b.n	8008e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80089d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 80de 	beq.w	8008b98 <HAL_UART_IRQHandler+0x22c>
 80089dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80d1 	beq.w	8008b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <HAL_UART_IRQHandler+0xae>
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f043 0201 	orr.w	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <HAL_UART_IRQHandler+0xd2>
 8008a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f043 0202 	orr.w	r2, r3, #2
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <HAL_UART_IRQHandler+0xf6>
 8008a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f043 0204 	orr.w	r2, r3, #4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d011      	beq.n	8008a92 <HAL_UART_IRQHandler+0x126>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f043 0208 	orr.w	r2, r3, #8
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 81ed 	beq.w	8008e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d008      	beq.n	8008aba <HAL_UART_IRQHandler+0x14e>
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fb92 	bl	80091de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac4:	2b40      	cmp	r3, #64	; 0x40
 8008ac6:	bf0c      	ite	eq
 8008ac8:	2301      	moveq	r3, #1
 8008aca:	2300      	movne	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x17a>
 8008ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d04f      	beq.n	8008b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa9a 	bl	8009020 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d141      	bne.n	8008b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3314      	adds	r3, #20
 8008b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b08:	e853 3f00 	ldrex	r3, [r3]
 8008b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3314      	adds	r3, #20
 8008b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1d9      	bne.n	8008afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d013      	beq.n	8008b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b52:	4a7d      	ldr	r2, [pc, #500]	; (8008d48 <HAL_UART_IRQHandler+0x3dc>)
 8008b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fd fd13 	bl	8006586 <HAL_DMA_Abort_IT>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d016      	beq.n	8008b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b74:	e00e      	b.n	8008b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f990 	bl	8008e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7c:	e00a      	b.n	8008b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f98c 	bl	8008e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b84:	e006      	b.n	8008b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f988 	bl	8008e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b92:	e170      	b.n	8008e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b94:	bf00      	nop
    return;
 8008b96:	e16e      	b.n	8008e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	f040 814a 	bne.w	8008e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8143 	beq.w	8008e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 813c 	beq.w	8008e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60bb      	str	r3, [r7, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60bb      	str	r3, [r7, #8]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b40      	cmp	r3, #64	; 0x40
 8008be0:	f040 80b4 	bne.w	8008d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8140 	beq.w	8008e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c02:	429a      	cmp	r2, r3
 8008c04:	f080 8139 	bcs.w	8008e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1a:	f000 8088 	beq.w	8008d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	330c      	adds	r3, #12
 8008c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	330c      	adds	r3, #12
 8008c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1d9      	bne.n	8008c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3314      	adds	r3, #20
 8008c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e1      	bne.n	8008c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3314      	adds	r3, #20
 8008cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e3      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfe:	f023 0310 	bic.w	r3, r3, #16
 8008d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e3      	bne.n	8008cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd fbbc 	bl	80064a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f8b6 	bl	8008eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d44:	e099      	b.n	8008e7a <HAL_UART_IRQHandler+0x50e>
 8008d46:	bf00      	nop
 8008d48:	080090e7 	.word	0x080090e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 808b 	beq.w	8008e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 8086 	beq.w	8008e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d96:	647a      	str	r2, [r7, #68]	; 0x44
 8008d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e3      	bne.n	8008d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3314      	adds	r3, #20
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3314      	adds	r3, #20
 8008dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dce:	633a      	str	r2, [r7, #48]	; 0x30
 8008dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e3      	bne.n	8008daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	330c      	adds	r3, #12
 8008e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e14:	61fa      	str	r2, [r7, #28]
 8008e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	69b9      	ldr	r1, [r7, #24]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	617b      	str	r3, [r7, #20]
   return(result);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e3      	bne.n	8008df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f83e 	bl	8008eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e34:	e023      	b.n	8008e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_UART_IRQHandler+0x4ea>
 8008e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f95d 	bl	800910e <UART_Transmit_IT>
    return;
 8008e54:	e014      	b.n	8008e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00e      	beq.n	8008e80 <HAL_UART_IRQHandler+0x514>
 8008e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d008      	beq.n	8008e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f99d 	bl	80091ae <UART_EndTransmit_IT>
    return;
 8008e74:	e004      	b.n	8008e80 <HAL_UART_IRQHandler+0x514>
    return;
 8008e76:	bf00      	nop
 8008e78:	e002      	b.n	8008e80 <HAL_UART_IRQHandler+0x514>
      return;
 8008e7a:	bf00      	nop
 8008e7c:	e000      	b.n	8008e80 <HAL_UART_IRQHandler+0x514>
      return;
 8008e7e:	bf00      	nop
  }
}
 8008e80:	37e8      	adds	r7, #232	; 0xe8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop

08008e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b090      	sub	sp, #64	; 0x40
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ed8:	e050      	b.n	8008f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee0:	d04c      	beq.n	8008f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ee8:	f7fd f99c 	bl	8006224 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d241      	bcs.n	8008f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f18:	637a      	str	r2, [r7, #52]	; 0x34
 8008f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3314      	adds	r3, #20
 8008f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f4c:	623a      	str	r2, [r7, #32]
 8008f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	69f9      	ldr	r1, [r7, #28]
 8008f52:	6a3a      	ldr	r2, [r7, #32]
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e5      	bne.n	8008f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e00f      	b.n	8008f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	4013      	ands	r3, r2
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d09f      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3740      	adds	r7, #64	; 0x40
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	88fa      	ldrh	r2, [r7, #6]
 8008fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2222      	movs	r2, #34	; 0x22
 8008fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d007      	beq.n	8008ff2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ff0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0201 	orr.w	r2, r2, #1
 8009000:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0220 	orr.w	r2, r2, #32
 8009010:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009020:	b480      	push	{r7}
 8009022:	b095      	sub	sp, #84	; 0x54
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800903e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009048:	643a      	str	r2, [r7, #64]	; 0x40
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800904e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e5      	bne.n	8009028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3314      	adds	r3, #20
 8009062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	61fb      	str	r3, [r7, #28]
   return(result);
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f023 0301 	bic.w	r3, r3, #1
 8009072:	64bb      	str	r3, [r7, #72]	; 0x48
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3314      	adds	r3, #20
 800907a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800907c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800907e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e5      	bne.n	800905c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	2b01      	cmp	r3, #1
 8009096:	d119      	bne.n	80090cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	330c      	adds	r3, #12
 800909e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f023 0310 	bic.w	r3, r3, #16
 80090ae:	647b      	str	r3, [r7, #68]	; 0x44
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	330c      	adds	r3, #12
 80090b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090b8:	61ba      	str	r2, [r7, #24]
 80090ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	6979      	ldr	r1, [r7, #20]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	613b      	str	r3, [r7, #16]
   return(result);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e5      	bne.n	8009098 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090da:	bf00      	nop
 80090dc:	3754      	adds	r7, #84	; 0x54
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7ff fecb 	bl	8008e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800910e:	b480      	push	{r7}
 8009110:	b085      	sub	sp, #20
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b21      	cmp	r3, #33	; 0x21
 8009120:	d13e      	bne.n	80091a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912a:	d114      	bne.n	8009156 <UART_Transmit_IT+0x48>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d110      	bne.n	8009156 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	1c9a      	adds	r2, r3, #2
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	621a      	str	r2, [r3, #32]
 8009154:	e008      	b.n	8009168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	1c59      	adds	r1, r3, #1
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6211      	str	r1, [r2, #32]
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29b      	uxth	r3, r3
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	4619      	mov	r1, r3
 8009176:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10f      	bne.n	800919c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800918a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800919a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	e000      	b.n	80091a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091a0:	2302      	movs	r3, #2
  }
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fe5a 	bl	8008e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b08c      	sub	sp, #48	; 0x30
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b22      	cmp	r3, #34	; 0x22
 80091f0:	f040 80ab 	bne.w	800934a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091fc:	d117      	bne.n	800922e <UART_Receive_IT+0x50>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d113      	bne.n	800922e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921c:	b29a      	uxth	r2, r3
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	1c9a      	adds	r2, r3, #2
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	629a      	str	r2, [r3, #40]	; 0x28
 800922c:	e026      	b.n	800927c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009240:	d007      	beq.n	8009252 <UART_Receive_IT+0x74>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <UART_Receive_IT+0x82>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	b2da      	uxtb	r2, r3
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	e008      	b.n	8009272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926c:	b2da      	uxtb	r2, r3
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29b      	uxth	r3, r3
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4619      	mov	r1, r3
 800928a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800928c:	2b00      	cmp	r3, #0
 800928e:	d15a      	bne.n	8009346 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0220 	bic.w	r2, r2, #32
 800929e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	695a      	ldr	r2, [r3, #20]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0201 	bic.w	r2, r2, #1
 80092be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d135      	bne.n	800933c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	330c      	adds	r3, #12
 80092dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	613b      	str	r3, [r7, #16]
   return(result);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f023 0310 	bic.w	r3, r3, #16
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f6:	623a      	str	r2, [r7, #32]
 80092f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	69f9      	ldr	r1, [r7, #28]
 80092fc:	6a3a      	ldr	r2, [r7, #32]
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	61bb      	str	r3, [r7, #24]
   return(result);
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e5      	bne.n	80092d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0310 	and.w	r3, r3, #16
 8009314:	2b10      	cmp	r3, #16
 8009316:	d10a      	bne.n	800932e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff fdbb 	bl	8008eb0 <HAL_UARTEx_RxEventCallback>
 800933a:	e002      	b.n	8009342 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7fc fe23 	bl	8005f88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	e002      	b.n	800934c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	e000      	b.n	800934c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800934a:	2302      	movs	r3, #2
  }
}
 800934c:	4618      	mov	r0, r3
 800934e:	3730      	adds	r7, #48	; 0x30
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009358:	b0c0      	sub	sp, #256	; 0x100
 800935a:	af00      	add	r7, sp, #0
 800935c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800936c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009370:	68d9      	ldr	r1, [r3, #12]
 8009372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	ea40 0301 	orr.w	r3, r0, r1
 800937c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800937e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009382:	689a      	ldr	r2, [r3, #8]
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	431a      	orrs	r2, r3
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	431a      	orrs	r2, r3
 8009394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	4313      	orrs	r3, r2
 800939c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093ac:	f021 010c 	bic.w	r1, r1, #12
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093ba:	430b      	orrs	r3, r1
 80093bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80093ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ce:	6999      	ldr	r1, [r3, #24]
 80093d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	ea40 0301 	orr.w	r3, r0, r1
 80093da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	4b8f      	ldr	r3, [pc, #572]	; (8009620 <UART_SetConfig+0x2cc>)
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d005      	beq.n	80093f4 <UART_SetConfig+0xa0>
 80093e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4b8d      	ldr	r3, [pc, #564]	; (8009624 <UART_SetConfig+0x2d0>)
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d104      	bne.n	80093fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093f4:	f7fd ff24 	bl	8007240 <HAL_RCC_GetPCLK2Freq>
 80093f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093fc:	e003      	b.n	8009406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093fe:	f7fd ff0b 	bl	8007218 <HAL_RCC_GetPCLK1Freq>
 8009402:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009410:	f040 810c 	bne.w	800962c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009418:	2200      	movs	r2, #0
 800941a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800941e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009426:	4622      	mov	r2, r4
 8009428:	462b      	mov	r3, r5
 800942a:	1891      	adds	r1, r2, r2
 800942c:	65b9      	str	r1, [r7, #88]	; 0x58
 800942e:	415b      	adcs	r3, r3
 8009430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009436:	4621      	mov	r1, r4
 8009438:	eb12 0801 	adds.w	r8, r2, r1
 800943c:	4629      	mov	r1, r5
 800943e:	eb43 0901 	adc.w	r9, r3, r1
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	f04f 0300 	mov.w	r3, #0
 800944a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800944e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009456:	4690      	mov	r8, r2
 8009458:	4699      	mov	r9, r3
 800945a:	4623      	mov	r3, r4
 800945c:	eb18 0303 	adds.w	r3, r8, r3
 8009460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009464:	462b      	mov	r3, r5
 8009466:	eb49 0303 	adc.w	r3, r9, r3
 800946a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800946e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800947a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800947e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009482:	460b      	mov	r3, r1
 8009484:	18db      	adds	r3, r3, r3
 8009486:	653b      	str	r3, [r7, #80]	; 0x50
 8009488:	4613      	mov	r3, r2
 800948a:	eb42 0303 	adc.w	r3, r2, r3
 800948e:	657b      	str	r3, [r7, #84]	; 0x54
 8009490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009498:	f7f6 fef2 	bl	8000280 <__aeabi_uldivmod>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4b61      	ldr	r3, [pc, #388]	; (8009628 <UART_SetConfig+0x2d4>)
 80094a2:	fba3 2302 	umull	r2, r3, r3, r2
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	011c      	lsls	r4, r3, #4
 80094aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80094b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094bc:	4642      	mov	r2, r8
 80094be:	464b      	mov	r3, r9
 80094c0:	1891      	adds	r1, r2, r2
 80094c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80094c4:	415b      	adcs	r3, r3
 80094c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094cc:	4641      	mov	r1, r8
 80094ce:	eb12 0a01 	adds.w	sl, r2, r1
 80094d2:	4649      	mov	r1, r9
 80094d4:	eb43 0b01 	adc.w	fp, r3, r1
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094ec:	4692      	mov	sl, r2
 80094ee:	469b      	mov	fp, r3
 80094f0:	4643      	mov	r3, r8
 80094f2:	eb1a 0303 	adds.w	r3, sl, r3
 80094f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094fa:	464b      	mov	r3, r9
 80094fc:	eb4b 0303 	adc.w	r3, fp, r3
 8009500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009510:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009518:	460b      	mov	r3, r1
 800951a:	18db      	adds	r3, r3, r3
 800951c:	643b      	str	r3, [r7, #64]	; 0x40
 800951e:	4613      	mov	r3, r2
 8009520:	eb42 0303 	adc.w	r3, r2, r3
 8009524:	647b      	str	r3, [r7, #68]	; 0x44
 8009526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800952a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800952e:	f7f6 fea7 	bl	8000280 <__aeabi_uldivmod>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4611      	mov	r1, r2
 8009538:	4b3b      	ldr	r3, [pc, #236]	; (8009628 <UART_SetConfig+0x2d4>)
 800953a:	fba3 2301 	umull	r2, r3, r3, r1
 800953e:	095b      	lsrs	r3, r3, #5
 8009540:	2264      	movs	r2, #100	; 0x64
 8009542:	fb02 f303 	mul.w	r3, r2, r3
 8009546:	1acb      	subs	r3, r1, r3
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800954e:	4b36      	ldr	r3, [pc, #216]	; (8009628 <UART_SetConfig+0x2d4>)
 8009550:	fba3 2302 	umull	r2, r3, r3, r2
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800955c:	441c      	add	r4, r3
 800955e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009562:	2200      	movs	r2, #0
 8009564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009568:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800956c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	1891      	adds	r1, r2, r2
 8009576:	63b9      	str	r1, [r7, #56]	; 0x38
 8009578:	415b      	adcs	r3, r3
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800957c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009580:	4641      	mov	r1, r8
 8009582:	1851      	adds	r1, r2, r1
 8009584:	6339      	str	r1, [r7, #48]	; 0x30
 8009586:	4649      	mov	r1, r9
 8009588:	414b      	adcs	r3, r1
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009598:	4659      	mov	r1, fp
 800959a:	00cb      	lsls	r3, r1, #3
 800959c:	4651      	mov	r1, sl
 800959e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095a2:	4651      	mov	r1, sl
 80095a4:	00ca      	lsls	r2, r1, #3
 80095a6:	4610      	mov	r0, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	4642      	mov	r2, r8
 80095ae:	189b      	adds	r3, r3, r2
 80095b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095b4:	464b      	mov	r3, r9
 80095b6:	460a      	mov	r2, r1
 80095b8:	eb42 0303 	adc.w	r3, r2, r3
 80095bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80095d4:	460b      	mov	r3, r1
 80095d6:	18db      	adds	r3, r3, r3
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095da:	4613      	mov	r3, r2
 80095dc:	eb42 0303 	adc.w	r3, r2, r3
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095ea:	f7f6 fe49 	bl	8000280 <__aeabi_uldivmod>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <UART_SetConfig+0x2d4>)
 80095f4:	fba3 1302 	umull	r1, r3, r3, r2
 80095f8:	095b      	lsrs	r3, r3, #5
 80095fa:	2164      	movs	r1, #100	; 0x64
 80095fc:	fb01 f303 	mul.w	r3, r1, r3
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	3332      	adds	r3, #50	; 0x32
 8009606:	4a08      	ldr	r2, [pc, #32]	; (8009628 <UART_SetConfig+0x2d4>)
 8009608:	fba2 2303 	umull	r2, r3, r2, r3
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	f003 0207 	and.w	r2, r3, #7
 8009612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4422      	add	r2, r4
 800961a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800961c:	e105      	b.n	800982a <UART_SetConfig+0x4d6>
 800961e:	bf00      	nop
 8009620:	40011000 	.word	0x40011000
 8009624:	40011400 	.word	0x40011400
 8009628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800962c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009630:	2200      	movs	r2, #0
 8009632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009636:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800963a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800963e:	4642      	mov	r2, r8
 8009640:	464b      	mov	r3, r9
 8009642:	1891      	adds	r1, r2, r2
 8009644:	6239      	str	r1, [r7, #32]
 8009646:	415b      	adcs	r3, r3
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
 800964a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800964e:	4641      	mov	r1, r8
 8009650:	1854      	adds	r4, r2, r1
 8009652:	4649      	mov	r1, r9
 8009654:	eb43 0501 	adc.w	r5, r3, r1
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	00eb      	lsls	r3, r5, #3
 8009662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009666:	00e2      	lsls	r2, r4, #3
 8009668:	4614      	mov	r4, r2
 800966a:	461d      	mov	r5, r3
 800966c:	4643      	mov	r3, r8
 800966e:	18e3      	adds	r3, r4, r3
 8009670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009674:	464b      	mov	r3, r9
 8009676:	eb45 0303 	adc.w	r3, r5, r3
 800967a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800967e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800968a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	f04f 0300 	mov.w	r3, #0
 8009696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800969a:	4629      	mov	r1, r5
 800969c:	008b      	lsls	r3, r1, #2
 800969e:	4621      	mov	r1, r4
 80096a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096a4:	4621      	mov	r1, r4
 80096a6:	008a      	lsls	r2, r1, #2
 80096a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096ac:	f7f6 fde8 	bl	8000280 <__aeabi_uldivmod>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4b60      	ldr	r3, [pc, #384]	; (8009838 <UART_SetConfig+0x4e4>)
 80096b6:	fba3 2302 	umull	r2, r3, r3, r2
 80096ba:	095b      	lsrs	r3, r3, #5
 80096bc:	011c      	lsls	r4, r3, #4
 80096be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096d0:	4642      	mov	r2, r8
 80096d2:	464b      	mov	r3, r9
 80096d4:	1891      	adds	r1, r2, r2
 80096d6:	61b9      	str	r1, [r7, #24]
 80096d8:	415b      	adcs	r3, r3
 80096da:	61fb      	str	r3, [r7, #28]
 80096dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096e0:	4641      	mov	r1, r8
 80096e2:	1851      	adds	r1, r2, r1
 80096e4:	6139      	str	r1, [r7, #16]
 80096e6:	4649      	mov	r1, r9
 80096e8:	414b      	adcs	r3, r1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	f04f 0300 	mov.w	r3, #0
 80096f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096f8:	4659      	mov	r1, fp
 80096fa:	00cb      	lsls	r3, r1, #3
 80096fc:	4651      	mov	r1, sl
 80096fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009702:	4651      	mov	r1, sl
 8009704:	00ca      	lsls	r2, r1, #3
 8009706:	4610      	mov	r0, r2
 8009708:	4619      	mov	r1, r3
 800970a:	4603      	mov	r3, r0
 800970c:	4642      	mov	r2, r8
 800970e:	189b      	adds	r3, r3, r2
 8009710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009714:	464b      	mov	r3, r9
 8009716:	460a      	mov	r2, r1
 8009718:	eb42 0303 	adc.w	r3, r2, r3
 800971c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	67bb      	str	r3, [r7, #120]	; 0x78
 800972a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009738:	4649      	mov	r1, r9
 800973a:	008b      	lsls	r3, r1, #2
 800973c:	4641      	mov	r1, r8
 800973e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009742:	4641      	mov	r1, r8
 8009744:	008a      	lsls	r2, r1, #2
 8009746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800974a:	f7f6 fd99 	bl	8000280 <__aeabi_uldivmod>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4b39      	ldr	r3, [pc, #228]	; (8009838 <UART_SetConfig+0x4e4>)
 8009754:	fba3 1302 	umull	r1, r3, r3, r2
 8009758:	095b      	lsrs	r3, r3, #5
 800975a:	2164      	movs	r1, #100	; 0x64
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	3332      	adds	r3, #50	; 0x32
 8009766:	4a34      	ldr	r2, [pc, #208]	; (8009838 <UART_SetConfig+0x4e4>)
 8009768:	fba2 2303 	umull	r2, r3, r2, r3
 800976c:	095b      	lsrs	r3, r3, #5
 800976e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009772:	441c      	add	r4, r3
 8009774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009778:	2200      	movs	r2, #0
 800977a:	673b      	str	r3, [r7, #112]	; 0x70
 800977c:	677a      	str	r2, [r7, #116]	; 0x74
 800977e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009782:	4642      	mov	r2, r8
 8009784:	464b      	mov	r3, r9
 8009786:	1891      	adds	r1, r2, r2
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	415b      	adcs	r3, r3
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009792:	4641      	mov	r1, r8
 8009794:	1851      	adds	r1, r2, r1
 8009796:	6039      	str	r1, [r7, #0]
 8009798:	4649      	mov	r1, r9
 800979a:	414b      	adcs	r3, r1
 800979c:	607b      	str	r3, [r7, #4]
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	f04f 0300 	mov.w	r3, #0
 80097a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097aa:	4659      	mov	r1, fp
 80097ac:	00cb      	lsls	r3, r1, #3
 80097ae:	4651      	mov	r1, sl
 80097b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097b4:	4651      	mov	r1, sl
 80097b6:	00ca      	lsls	r2, r1, #3
 80097b8:	4610      	mov	r0, r2
 80097ba:	4619      	mov	r1, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	4642      	mov	r2, r8
 80097c0:	189b      	adds	r3, r3, r2
 80097c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80097c4:	464b      	mov	r3, r9
 80097c6:	460a      	mov	r2, r1
 80097c8:	eb42 0303 	adc.w	r3, r2, r3
 80097cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	663b      	str	r3, [r7, #96]	; 0x60
 80097d8:	667a      	str	r2, [r7, #100]	; 0x64
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80097e6:	4649      	mov	r1, r9
 80097e8:	008b      	lsls	r3, r1, #2
 80097ea:	4641      	mov	r1, r8
 80097ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097f0:	4641      	mov	r1, r8
 80097f2:	008a      	lsls	r2, r1, #2
 80097f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097f8:	f7f6 fd42 	bl	8000280 <__aeabi_uldivmod>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <UART_SetConfig+0x4e4>)
 8009802:	fba3 1302 	umull	r1, r3, r3, r2
 8009806:	095b      	lsrs	r3, r3, #5
 8009808:	2164      	movs	r1, #100	; 0x64
 800980a:	fb01 f303 	mul.w	r3, r1, r3
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	3332      	adds	r3, #50	; 0x32
 8009814:	4a08      	ldr	r2, [pc, #32]	; (8009838 <UART_SetConfig+0x4e4>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	095b      	lsrs	r3, r3, #5
 800981c:	f003 020f 	and.w	r2, r3, #15
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4422      	add	r2, r4
 8009828:	609a      	str	r2, [r3, #8]
}
 800982a:	bf00      	nop
 800982c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009830:	46bd      	mov	sp, r7
 8009832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009836:	bf00      	nop
 8009838:	51eb851f 	.word	0x51eb851f

0800983c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	f023 0101 	bic.w	r1, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b08      	cmp	r3, #8
 8009864:	d102      	bne.n	800986c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009866:	2340      	movs	r3, #64	; 0x40
 8009868:	617b      	str	r3, [r7, #20]
 800986a:	e001      	b.n	8009870 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800987c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009882:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009888:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800988e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009894:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800989a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80098a0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80098a6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80098ac:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80098ca:	4b10      	ldr	r3, [pc, #64]	; (800990c <FSMC_NORSRAM_Init+0xd0>)
 80098cc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098d4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80098dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	43db      	mvns	r3, r3
 80098ec:	ea02 0103 	and.w	r1, r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	4319      	orrs	r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	0008fb7f 	.word	0x0008fb7f

08009910 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009926:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	431a      	orrs	r2, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	431a      	orrs	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	041b      	lsls	r3, r3, #16
 8009944:	431a      	orrs	r2, r3
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	3b01      	subs	r3, #1
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	431a      	orrs	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	3b02      	subs	r3, #2
 8009956:	061b      	lsls	r3, r3, #24
 8009958:	431a      	orrs	r2, r3
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	4313      	orrs	r3, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	3201      	adds	r2, #1
 8009964:	4319      	orrs	r1, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009990:	d11d      	bne.n	80099ce <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800999c:	4013      	ands	r3, r2
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	6811      	ldr	r1, [r2, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	6852      	ldr	r2, [r2, #4]
 80099a6:	0112      	lsls	r2, r2, #4
 80099a8:	4311      	orrs	r1, r2
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	6892      	ldr	r2, [r2, #8]
 80099ae:	0212      	lsls	r2, r2, #8
 80099b0:	4311      	orrs	r1, r2
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	6992      	ldr	r2, [r2, #24]
 80099b6:	4311      	orrs	r1, r2
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	68d2      	ldr	r2, [r2, #12]
 80099bc:	0412      	lsls	r2, r2, #16
 80099be:	430a      	orrs	r2, r1
 80099c0:	ea43 0102 	orr.w	r1, r3, r2
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099cc:	e005      	b.n	80099da <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80099d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	cff00000 	.word	0xcff00000

080099ec <__errno>:
 80099ec:	4b01      	ldr	r3, [pc, #4]	; (80099f4 <__errno+0x8>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	200000ac 	.word	0x200000ac

080099f8 <__libc_init_array>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4d0d      	ldr	r5, [pc, #52]	; (8009a30 <__libc_init_array+0x38>)
 80099fc:	4c0d      	ldr	r4, [pc, #52]	; (8009a34 <__libc_init_array+0x3c>)
 80099fe:	1b64      	subs	r4, r4, r5
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	2600      	movs	r6, #0
 8009a04:	42a6      	cmp	r6, r4
 8009a06:	d109      	bne.n	8009a1c <__libc_init_array+0x24>
 8009a08:	4d0b      	ldr	r5, [pc, #44]	; (8009a38 <__libc_init_array+0x40>)
 8009a0a:	4c0c      	ldr	r4, [pc, #48]	; (8009a3c <__libc_init_array+0x44>)
 8009a0c:	f001 faa4 	bl	800af58 <_init>
 8009a10:	1b64      	subs	r4, r4, r5
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	2600      	movs	r6, #0
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	d105      	bne.n	8009a26 <__libc_init_array+0x2e>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a20:	4798      	blx	r3
 8009a22:	3601      	adds	r6, #1
 8009a24:	e7ee      	b.n	8009a04 <__libc_init_array+0xc>
 8009a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2a:	4798      	blx	r3
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	e7f2      	b.n	8009a16 <__libc_init_array+0x1e>
 8009a30:	0800ef20 	.word	0x0800ef20
 8009a34:	0800ef20 	.word	0x0800ef20
 8009a38:	0800ef20 	.word	0x0800ef20
 8009a3c:	0800ef24 	.word	0x0800ef24

08009a40 <memset>:
 8009a40:	4402      	add	r2, r0
 8009a42:	4603      	mov	r3, r0
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d100      	bne.n	8009a4a <memset+0xa>
 8009a48:	4770      	bx	lr
 8009a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a4e:	e7f9      	b.n	8009a44 <memset+0x4>

08009a50 <srand>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <srand+0x44>)
 8009a54:	681d      	ldr	r5, [r3, #0]
 8009a56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009a58:	4604      	mov	r4, r0
 8009a5a:	b9b3      	cbnz	r3, 8009a8a <srand+0x3a>
 8009a5c:	2018      	movs	r0, #24
 8009a5e:	f000 f8f5 	bl	8009c4c <malloc>
 8009a62:	4602      	mov	r2, r0
 8009a64:	63a8      	str	r0, [r5, #56]	; 0x38
 8009a66:	b920      	cbnz	r0, 8009a72 <srand+0x22>
 8009a68:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <srand+0x48>)
 8009a6a:	480c      	ldr	r0, [pc, #48]	; (8009a9c <srand+0x4c>)
 8009a6c:	2142      	movs	r1, #66	; 0x42
 8009a6e:	f000 f8bd 	bl	8009bec <__assert_func>
 8009a72:	490b      	ldr	r1, [pc, #44]	; (8009aa0 <srand+0x50>)
 8009a74:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <srand+0x54>)
 8009a76:	e9c0 1300 	strd	r1, r3, [r0]
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <srand+0x58>)
 8009a7c:	6083      	str	r3, [r0, #8]
 8009a7e:	230b      	movs	r3, #11
 8009a80:	8183      	strh	r3, [r0, #12]
 8009a82:	2100      	movs	r1, #0
 8009a84:	2001      	movs	r0, #1
 8009a86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009a8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	611c      	str	r4, [r3, #16]
 8009a90:	615a      	str	r2, [r3, #20]
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	200000ac 	.word	0x200000ac
 8009a98:	0800edd4 	.word	0x0800edd4
 8009a9c:	0800edeb 	.word	0x0800edeb
 8009aa0:	abcd330e 	.word	0xabcd330e
 8009aa4:	e66d1234 	.word	0xe66d1234
 8009aa8:	0005deec 	.word	0x0005deec

08009aac <rand>:
 8009aac:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <rand+0x5c>)
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	681c      	ldr	r4, [r3, #0]
 8009ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ab4:	b9b3      	cbnz	r3, 8009ae4 <rand+0x38>
 8009ab6:	2018      	movs	r0, #24
 8009ab8:	f000 f8c8 	bl	8009c4c <malloc>
 8009abc:	63a0      	str	r0, [r4, #56]	; 0x38
 8009abe:	b928      	cbnz	r0, 8009acc <rand+0x20>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <rand+0x60>)
 8009ac4:	4812      	ldr	r0, [pc, #72]	; (8009b10 <rand+0x64>)
 8009ac6:	214e      	movs	r1, #78	; 0x4e
 8009ac8:	f000 f890 	bl	8009bec <__assert_func>
 8009acc:	4a11      	ldr	r2, [pc, #68]	; (8009b14 <rand+0x68>)
 8009ace:	4b12      	ldr	r3, [pc, #72]	; (8009b18 <rand+0x6c>)
 8009ad0:	e9c0 2300 	strd	r2, r3, [r0]
 8009ad4:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <rand+0x70>)
 8009ad6:	6083      	str	r3, [r0, #8]
 8009ad8:	230b      	movs	r3, #11
 8009ada:	8183      	strh	r3, [r0, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009ae4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009ae6:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <rand+0x74>)
 8009ae8:	6920      	ldr	r0, [r4, #16]
 8009aea:	6963      	ldr	r3, [r4, #20]
 8009aec:	490d      	ldr	r1, [pc, #52]	; (8009b24 <rand+0x78>)
 8009aee:	4342      	muls	r2, r0
 8009af0:	fb01 2203 	mla	r2, r1, r3, r2
 8009af4:	fba0 0101 	umull	r0, r1, r0, r1
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	eb42 0001 	adc.w	r0, r2, r1
 8009afe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009b02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009b06:	bd10      	pop	{r4, pc}
 8009b08:	200000ac 	.word	0x200000ac
 8009b0c:	0800edd4 	.word	0x0800edd4
 8009b10:	0800edeb 	.word	0x0800edeb
 8009b14:	abcd330e 	.word	0xabcd330e
 8009b18:	e66d1234 	.word	0xe66d1234
 8009b1c:	0005deec 	.word	0x0005deec
 8009b20:	5851f42d 	.word	0x5851f42d
 8009b24:	4c957f2d 	.word	0x4c957f2d

08009b28 <sniprintf>:
 8009b28:	b40c      	push	{r2, r3}
 8009b2a:	b530      	push	{r4, r5, lr}
 8009b2c:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <sniprintf+0x64>)
 8009b2e:	1e0c      	subs	r4, r1, #0
 8009b30:	681d      	ldr	r5, [r3, #0]
 8009b32:	b09d      	sub	sp, #116	; 0x74
 8009b34:	da08      	bge.n	8009b48 <sniprintf+0x20>
 8009b36:	238b      	movs	r3, #139	; 0x8b
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	b01d      	add	sp, #116	; 0x74
 8009b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b44:	b002      	add	sp, #8
 8009b46:	4770      	bx	lr
 8009b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b50:	bf14      	ite	ne
 8009b52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b56:	4623      	moveq	r3, r4
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	9307      	str	r3, [sp, #28]
 8009b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b60:	9002      	str	r0, [sp, #8]
 8009b62:	9006      	str	r0, [sp, #24]
 8009b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b6a:	ab21      	add	r3, sp, #132	; 0x84
 8009b6c:	a902      	add	r1, sp, #8
 8009b6e:	4628      	mov	r0, r5
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	f000 f9bd 	bl	8009ef0 <_svfiprintf_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	bfbc      	itt	lt
 8009b7a:	238b      	movlt	r3, #139	; 0x8b
 8009b7c:	602b      	strlt	r3, [r5, #0]
 8009b7e:	2c00      	cmp	r4, #0
 8009b80:	d0dd      	beq.n	8009b3e <sniprintf+0x16>
 8009b82:	9b02      	ldr	r3, [sp, #8]
 8009b84:	2200      	movs	r2, #0
 8009b86:	701a      	strb	r2, [r3, #0]
 8009b88:	e7d9      	b.n	8009b3e <sniprintf+0x16>
 8009b8a:	bf00      	nop
 8009b8c:	200000ac 	.word	0x200000ac

08009b90 <strcat>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	4602      	mov	r2, r0
 8009b94:	7814      	ldrb	r4, [r2, #0]
 8009b96:	4613      	mov	r3, r2
 8009b98:	3201      	adds	r2, #1
 8009b9a:	2c00      	cmp	r4, #0
 8009b9c:	d1fa      	bne.n	8009b94 <strcat+0x4>
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ba4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ba8:	2a00      	cmp	r2, #0
 8009baa:	d1f9      	bne.n	8009ba0 <strcat+0x10>
 8009bac:	bd10      	pop	{r4, pc}
	...

08009bb0 <strdup>:
 8009bb0:	4b02      	ldr	r3, [pc, #8]	; (8009bbc <strdup+0xc>)
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f000 b803 	b.w	8009bc0 <_strdup_r>
 8009bba:	bf00      	nop
 8009bbc:	200000ac 	.word	0x200000ac

08009bc0 <_strdup_r>:
 8009bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	460d      	mov	r5, r1
 8009bc8:	f7f6 fb02 	bl	80001d0 <strlen>
 8009bcc:	1c42      	adds	r2, r0, #1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	9201      	str	r2, [sp, #4]
 8009bd4:	f000 f8bc 	bl	8009d50 <_malloc_r>
 8009bd8:	4604      	mov	r4, r0
 8009bda:	b118      	cbz	r0, 8009be4 <_strdup_r+0x24>
 8009bdc:	9a01      	ldr	r2, [sp, #4]
 8009bde:	4629      	mov	r1, r5
 8009be0:	f000 f83c 	bl	8009c5c <memcpy>
 8009be4:	4620      	mov	r0, r4
 8009be6:	b003      	add	sp, #12
 8009be8:	bd30      	pop	{r4, r5, pc}
	...

08009bec <__assert_func>:
 8009bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bee:	4614      	mov	r4, r2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <__assert_func+0x2c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	68d8      	ldr	r0, [r3, #12]
 8009bfa:	b14c      	cbz	r4, 8009c10 <__assert_func+0x24>
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <__assert_func+0x30>)
 8009bfe:	9100      	str	r1, [sp, #0]
 8009c00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c04:	4906      	ldr	r1, [pc, #24]	; (8009c20 <__assert_func+0x34>)
 8009c06:	462b      	mov	r3, r5
 8009c08:	f000 f80e 	bl	8009c28 <fiprintf>
 8009c0c:	f000 fe2e 	bl	800a86c <abort>
 8009c10:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <__assert_func+0x38>)
 8009c12:	461c      	mov	r4, r3
 8009c14:	e7f3      	b.n	8009bfe <__assert_func+0x12>
 8009c16:	bf00      	nop
 8009c18:	200000ac 	.word	0x200000ac
 8009c1c:	0800ee46 	.word	0x0800ee46
 8009c20:	0800ee53 	.word	0x0800ee53
 8009c24:	0800ee81 	.word	0x0800ee81

08009c28 <fiprintf>:
 8009c28:	b40e      	push	{r1, r2, r3}
 8009c2a:	b503      	push	{r0, r1, lr}
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	ab03      	add	r3, sp, #12
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <fiprintf+0x20>)
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	6800      	ldr	r0, [r0, #0]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f000 fa83 	bl	800a144 <_vfiprintf_r>
 8009c3e:	b002      	add	sp, #8
 8009c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c44:	b003      	add	sp, #12
 8009c46:	4770      	bx	lr
 8009c48:	200000ac 	.word	0x200000ac

08009c4c <malloc>:
 8009c4c:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <malloc+0xc>)
 8009c4e:	4601      	mov	r1, r0
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	f000 b87d 	b.w	8009d50 <_malloc_r>
 8009c56:	bf00      	nop
 8009c58:	200000ac 	.word	0x200000ac

08009c5c <memcpy>:
 8009c5c:	440a      	add	r2, r1
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c64:	d100      	bne.n	8009c68 <memcpy+0xc>
 8009c66:	4770      	bx	lr
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c72:	4291      	cmp	r1, r2
 8009c74:	d1f9      	bne.n	8009c6a <memcpy+0xe>
 8009c76:	bd10      	pop	{r4, pc}

08009c78 <_free_r>:
 8009c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c7a:	2900      	cmp	r1, #0
 8009c7c:	d044      	beq.n	8009d08 <_free_r+0x90>
 8009c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c82:	9001      	str	r0, [sp, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f1a1 0404 	sub.w	r4, r1, #4
 8009c8a:	bfb8      	it	lt
 8009c8c:	18e4      	addlt	r4, r4, r3
 8009c8e:	f001 f82f 	bl	800acf0 <__malloc_lock>
 8009c92:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <_free_r+0x94>)
 8009c94:	9801      	ldr	r0, [sp, #4]
 8009c96:	6813      	ldr	r3, [r2, #0]
 8009c98:	b933      	cbnz	r3, 8009ca8 <_free_r+0x30>
 8009c9a:	6063      	str	r3, [r4, #4]
 8009c9c:	6014      	str	r4, [r2, #0]
 8009c9e:	b003      	add	sp, #12
 8009ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ca4:	f001 b82a 	b.w	800acfc <__malloc_unlock>
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d908      	bls.n	8009cbe <_free_r+0x46>
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	1961      	adds	r1, r4, r5
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	bf01      	itttt	eq
 8009cb4:	6819      	ldreq	r1, [r3, #0]
 8009cb6:	685b      	ldreq	r3, [r3, #4]
 8009cb8:	1949      	addeq	r1, r1, r5
 8009cba:	6021      	streq	r1, [r4, #0]
 8009cbc:	e7ed      	b.n	8009c9a <_free_r+0x22>
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	b10b      	cbz	r3, 8009cc8 <_free_r+0x50>
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	d9fa      	bls.n	8009cbe <_free_r+0x46>
 8009cc8:	6811      	ldr	r1, [r2, #0]
 8009cca:	1855      	adds	r5, r2, r1
 8009ccc:	42a5      	cmp	r5, r4
 8009cce:	d10b      	bne.n	8009ce8 <_free_r+0x70>
 8009cd0:	6824      	ldr	r4, [r4, #0]
 8009cd2:	4421      	add	r1, r4
 8009cd4:	1854      	adds	r4, r2, r1
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	6011      	str	r1, [r2, #0]
 8009cda:	d1e0      	bne.n	8009c9e <_free_r+0x26>
 8009cdc:	681c      	ldr	r4, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	6053      	str	r3, [r2, #4]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	6011      	str	r1, [r2, #0]
 8009ce6:	e7da      	b.n	8009c9e <_free_r+0x26>
 8009ce8:	d902      	bls.n	8009cf0 <_free_r+0x78>
 8009cea:	230c      	movs	r3, #12
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	e7d6      	b.n	8009c9e <_free_r+0x26>
 8009cf0:	6825      	ldr	r5, [r4, #0]
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf04      	itt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	bf04      	itt	eq
 8009d00:	1949      	addeq	r1, r1, r5
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	6054      	str	r4, [r2, #4]
 8009d06:	e7ca      	b.n	8009c9e <_free_r+0x26>
 8009d08:	b003      	add	sp, #12
 8009d0a:	bd30      	pop	{r4, r5, pc}
 8009d0c:	20002a3c 	.word	0x20002a3c

08009d10 <sbrk_aligned>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4e0e      	ldr	r6, [pc, #56]	; (8009d4c <sbrk_aligned+0x3c>)
 8009d14:	460c      	mov	r4, r1
 8009d16:	6831      	ldr	r1, [r6, #0]
 8009d18:	4605      	mov	r5, r0
 8009d1a:	b911      	cbnz	r1, 8009d22 <sbrk_aligned+0x12>
 8009d1c:	f000 fcd6 	bl	800a6cc <_sbrk_r>
 8009d20:	6030      	str	r0, [r6, #0]
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f000 fcd1 	bl	800a6cc <_sbrk_r>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d00a      	beq.n	8009d44 <sbrk_aligned+0x34>
 8009d2e:	1cc4      	adds	r4, r0, #3
 8009d30:	f024 0403 	bic.w	r4, r4, #3
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d007      	beq.n	8009d48 <sbrk_aligned+0x38>
 8009d38:	1a21      	subs	r1, r4, r0
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 fcc6 	bl	800a6cc <_sbrk_r>
 8009d40:	3001      	adds	r0, #1
 8009d42:	d101      	bne.n	8009d48 <sbrk_aligned+0x38>
 8009d44:	f04f 34ff 	mov.w	r4, #4294967295
 8009d48:	4620      	mov	r0, r4
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	20002a40 	.word	0x20002a40

08009d50 <_malloc_r>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	1ccd      	adds	r5, r1, #3
 8009d56:	f025 0503 	bic.w	r5, r5, #3
 8009d5a:	3508      	adds	r5, #8
 8009d5c:	2d0c      	cmp	r5, #12
 8009d5e:	bf38      	it	cc
 8009d60:	250c      	movcc	r5, #12
 8009d62:	2d00      	cmp	r5, #0
 8009d64:	4607      	mov	r7, r0
 8009d66:	db01      	blt.n	8009d6c <_malloc_r+0x1c>
 8009d68:	42a9      	cmp	r1, r5
 8009d6a:	d905      	bls.n	8009d78 <_malloc_r+0x28>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	2600      	movs	r6, #0
 8009d72:	4630      	mov	r0, r6
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	4e2e      	ldr	r6, [pc, #184]	; (8009e34 <_malloc_r+0xe4>)
 8009d7a:	f000 ffb9 	bl	800acf0 <__malloc_lock>
 8009d7e:	6833      	ldr	r3, [r6, #0]
 8009d80:	461c      	mov	r4, r3
 8009d82:	bb34      	cbnz	r4, 8009dd2 <_malloc_r+0x82>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4638      	mov	r0, r7
 8009d88:	f7ff ffc2 	bl	8009d10 <sbrk_aligned>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	4604      	mov	r4, r0
 8009d90:	d14d      	bne.n	8009e2e <_malloc_r+0xde>
 8009d92:	6834      	ldr	r4, [r6, #0]
 8009d94:	4626      	mov	r6, r4
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d140      	bne.n	8009e1c <_malloc_r+0xcc>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4638      	mov	r0, r7
 8009da0:	eb04 0803 	add.w	r8, r4, r3
 8009da4:	f000 fc92 	bl	800a6cc <_sbrk_r>
 8009da8:	4580      	cmp	r8, r0
 8009daa:	d13a      	bne.n	8009e22 <_malloc_r+0xd2>
 8009dac:	6821      	ldr	r1, [r4, #0]
 8009dae:	3503      	adds	r5, #3
 8009db0:	1a6d      	subs	r5, r5, r1
 8009db2:	f025 0503 	bic.w	r5, r5, #3
 8009db6:	3508      	adds	r5, #8
 8009db8:	2d0c      	cmp	r5, #12
 8009dba:	bf38      	it	cc
 8009dbc:	250c      	movcc	r5, #12
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ffa5 	bl	8009d10 <sbrk_aligned>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d02b      	beq.n	8009e22 <_malloc_r+0xd2>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	442b      	add	r3, r5
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	e00e      	b.n	8009df0 <_malloc_r+0xa0>
 8009dd2:	6822      	ldr	r2, [r4, #0]
 8009dd4:	1b52      	subs	r2, r2, r5
 8009dd6:	d41e      	bmi.n	8009e16 <_malloc_r+0xc6>
 8009dd8:	2a0b      	cmp	r2, #11
 8009dda:	d916      	bls.n	8009e0a <_malloc_r+0xba>
 8009ddc:	1961      	adds	r1, r4, r5
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	6025      	str	r5, [r4, #0]
 8009de2:	bf18      	it	ne
 8009de4:	6059      	strne	r1, [r3, #4]
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	bf08      	it	eq
 8009dea:	6031      	streq	r1, [r6, #0]
 8009dec:	5162      	str	r2, [r4, r5]
 8009dee:	604b      	str	r3, [r1, #4]
 8009df0:	4638      	mov	r0, r7
 8009df2:	f104 060b 	add.w	r6, r4, #11
 8009df6:	f000 ff81 	bl	800acfc <__malloc_unlock>
 8009dfa:	f026 0607 	bic.w	r6, r6, #7
 8009dfe:	1d23      	adds	r3, r4, #4
 8009e00:	1af2      	subs	r2, r6, r3
 8009e02:	d0b6      	beq.n	8009d72 <_malloc_r+0x22>
 8009e04:	1b9b      	subs	r3, r3, r6
 8009e06:	50a3      	str	r3, [r4, r2]
 8009e08:	e7b3      	b.n	8009d72 <_malloc_r+0x22>
 8009e0a:	6862      	ldr	r2, [r4, #4]
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	bf0c      	ite	eq
 8009e10:	6032      	streq	r2, [r6, #0]
 8009e12:	605a      	strne	r2, [r3, #4]
 8009e14:	e7ec      	b.n	8009df0 <_malloc_r+0xa0>
 8009e16:	4623      	mov	r3, r4
 8009e18:	6864      	ldr	r4, [r4, #4]
 8009e1a:	e7b2      	b.n	8009d82 <_malloc_r+0x32>
 8009e1c:	4634      	mov	r4, r6
 8009e1e:	6876      	ldr	r6, [r6, #4]
 8009e20:	e7b9      	b.n	8009d96 <_malloc_r+0x46>
 8009e22:	230c      	movs	r3, #12
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	4638      	mov	r0, r7
 8009e28:	f000 ff68 	bl	800acfc <__malloc_unlock>
 8009e2c:	e7a1      	b.n	8009d72 <_malloc_r+0x22>
 8009e2e:	6025      	str	r5, [r4, #0]
 8009e30:	e7de      	b.n	8009df0 <_malloc_r+0xa0>
 8009e32:	bf00      	nop
 8009e34:	20002a3c 	.word	0x20002a3c

08009e38 <__ssputs_r>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	688e      	ldr	r6, [r1, #8]
 8009e3e:	429e      	cmp	r6, r3
 8009e40:	4682      	mov	sl, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	4690      	mov	r8, r2
 8009e46:	461f      	mov	r7, r3
 8009e48:	d838      	bhi.n	8009ebc <__ssputs_r+0x84>
 8009e4a:	898a      	ldrh	r2, [r1, #12]
 8009e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e50:	d032      	beq.n	8009eb8 <__ssputs_r+0x80>
 8009e52:	6825      	ldr	r5, [r4, #0]
 8009e54:	6909      	ldr	r1, [r1, #16]
 8009e56:	eba5 0901 	sub.w	r9, r5, r1
 8009e5a:	6965      	ldr	r5, [r4, #20]
 8009e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e64:	3301      	adds	r3, #1
 8009e66:	444b      	add	r3, r9
 8009e68:	106d      	asrs	r5, r5, #1
 8009e6a:	429d      	cmp	r5, r3
 8009e6c:	bf38      	it	cc
 8009e6e:	461d      	movcc	r5, r3
 8009e70:	0553      	lsls	r3, r2, #21
 8009e72:	d531      	bpl.n	8009ed8 <__ssputs_r+0xa0>
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7ff ff6b 	bl	8009d50 <_malloc_r>
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	b950      	cbnz	r0, 8009e94 <__ssputs_r+0x5c>
 8009e7e:	230c      	movs	r3, #12
 8009e80:	f8ca 3000 	str.w	r3, [sl]
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	6921      	ldr	r1, [r4, #16]
 8009e96:	464a      	mov	r2, r9
 8009e98:	f7ff fee0 	bl	8009c5c <memcpy>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	6126      	str	r6, [r4, #16]
 8009eaa:	6165      	str	r5, [r4, #20]
 8009eac:	444e      	add	r6, r9
 8009eae:	eba5 0509 	sub.w	r5, r5, r9
 8009eb2:	6026      	str	r6, [r4, #0]
 8009eb4:	60a5      	str	r5, [r4, #8]
 8009eb6:	463e      	mov	r6, r7
 8009eb8:	42be      	cmp	r6, r7
 8009eba:	d900      	bls.n	8009ebe <__ssputs_r+0x86>
 8009ebc:	463e      	mov	r6, r7
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	f000 fefa 	bl	800acbc <memmove>
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	1b9b      	subs	r3, r3, r6
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	4433      	add	r3, r6
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e7db      	b.n	8009e90 <__ssputs_r+0x58>
 8009ed8:	462a      	mov	r2, r5
 8009eda:	f000 ff15 	bl	800ad08 <_realloc_r>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d1e1      	bne.n	8009ea8 <__ssputs_r+0x70>
 8009ee4:	6921      	ldr	r1, [r4, #16]
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	f7ff fec6 	bl	8009c78 <_free_r>
 8009eec:	e7c7      	b.n	8009e7e <__ssputs_r+0x46>
	...

08009ef0 <_svfiprintf_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	4698      	mov	r8, r3
 8009ef6:	898b      	ldrh	r3, [r1, #12]
 8009ef8:	061b      	lsls	r3, r3, #24
 8009efa:	b09d      	sub	sp, #116	; 0x74
 8009efc:	4607      	mov	r7, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	4614      	mov	r4, r2
 8009f02:	d50e      	bpl.n	8009f22 <_svfiprintf_r+0x32>
 8009f04:	690b      	ldr	r3, [r1, #16]
 8009f06:	b963      	cbnz	r3, 8009f22 <_svfiprintf_r+0x32>
 8009f08:	2140      	movs	r1, #64	; 0x40
 8009f0a:	f7ff ff21 	bl	8009d50 <_malloc_r>
 8009f0e:	6028      	str	r0, [r5, #0]
 8009f10:	6128      	str	r0, [r5, #16]
 8009f12:	b920      	cbnz	r0, 8009f1e <_svfiprintf_r+0x2e>
 8009f14:	230c      	movs	r3, #12
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e0d1      	b.n	800a0c2 <_svfiprintf_r+0x1d2>
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	616b      	str	r3, [r5, #20]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9309      	str	r3, [sp, #36]	; 0x24
 8009f26:	2320      	movs	r3, #32
 8009f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f30:	2330      	movs	r3, #48	; 0x30
 8009f32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0dc <_svfiprintf_r+0x1ec>
 8009f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f3a:	f04f 0901 	mov.w	r9, #1
 8009f3e:	4623      	mov	r3, r4
 8009f40:	469a      	mov	sl, r3
 8009f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f46:	b10a      	cbz	r2, 8009f4c <_svfiprintf_r+0x5c>
 8009f48:	2a25      	cmp	r2, #37	; 0x25
 8009f4a:	d1f9      	bne.n	8009f40 <_svfiprintf_r+0x50>
 8009f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f50:	d00b      	beq.n	8009f6a <_svfiprintf_r+0x7a>
 8009f52:	465b      	mov	r3, fp
 8009f54:	4622      	mov	r2, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ff6d 	bl	8009e38 <__ssputs_r>
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f000 80aa 	beq.w	800a0b8 <_svfiprintf_r+0x1c8>
 8009f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f66:	445a      	add	r2, fp
 8009f68:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80a2 	beq.w	800a0b8 <_svfiprintf_r+0x1c8>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f7e:	f10a 0a01 	add.w	sl, sl, #1
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	9307      	str	r3, [sp, #28]
 8009f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f8c:	4654      	mov	r4, sl
 8009f8e:	2205      	movs	r2, #5
 8009f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f94:	4851      	ldr	r0, [pc, #324]	; (800a0dc <_svfiprintf_r+0x1ec>)
 8009f96:	f7f6 f923 	bl	80001e0 <memchr>
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	b9d8      	cbnz	r0, 8009fd6 <_svfiprintf_r+0xe6>
 8009f9e:	06d0      	lsls	r0, r2, #27
 8009fa0:	bf44      	itt	mi
 8009fa2:	2320      	movmi	r3, #32
 8009fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa8:	0711      	lsls	r1, r2, #28
 8009faa:	bf44      	itt	mi
 8009fac:	232b      	movmi	r3, #43	; 0x2b
 8009fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb8:	d015      	beq.n	8009fe6 <_svfiprintf_r+0xf6>
 8009fba:	9a07      	ldr	r2, [sp, #28]
 8009fbc:	4654      	mov	r4, sl
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f04f 0c0a 	mov.w	ip, #10
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fca:	3b30      	subs	r3, #48	; 0x30
 8009fcc:	2b09      	cmp	r3, #9
 8009fce:	d94e      	bls.n	800a06e <_svfiprintf_r+0x17e>
 8009fd0:	b1b0      	cbz	r0, 800a000 <_svfiprintf_r+0x110>
 8009fd2:	9207      	str	r2, [sp, #28]
 8009fd4:	e014      	b.n	800a000 <_svfiprintf_r+0x110>
 8009fd6:	eba0 0308 	sub.w	r3, r0, r8
 8009fda:	fa09 f303 	lsl.w	r3, r9, r3
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	46a2      	mov	sl, r4
 8009fe4:	e7d2      	b.n	8009f8c <_svfiprintf_r+0x9c>
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	1d19      	adds	r1, r3, #4
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	9103      	str	r1, [sp, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfbb      	ittet	lt
 8009ff2:	425b      	neglt	r3, r3
 8009ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ff8:	9307      	strge	r3, [sp, #28]
 8009ffa:	9307      	strlt	r3, [sp, #28]
 8009ffc:	bfb8      	it	lt
 8009ffe:	9204      	strlt	r2, [sp, #16]
 800a000:	7823      	ldrb	r3, [r4, #0]
 800a002:	2b2e      	cmp	r3, #46	; 0x2e
 800a004:	d10c      	bne.n	800a020 <_svfiprintf_r+0x130>
 800a006:	7863      	ldrb	r3, [r4, #1]
 800a008:	2b2a      	cmp	r3, #42	; 0x2a
 800a00a:	d135      	bne.n	800a078 <_svfiprintf_r+0x188>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	9203      	str	r2, [sp, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	bfb8      	it	lt
 800a018:	f04f 33ff 	movlt.w	r3, #4294967295
 800a01c:	3402      	adds	r4, #2
 800a01e:	9305      	str	r3, [sp, #20]
 800a020:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0ec <_svfiprintf_r+0x1fc>
 800a024:	7821      	ldrb	r1, [r4, #0]
 800a026:	2203      	movs	r2, #3
 800a028:	4650      	mov	r0, sl
 800a02a:	f7f6 f8d9 	bl	80001e0 <memchr>
 800a02e:	b140      	cbz	r0, 800a042 <_svfiprintf_r+0x152>
 800a030:	2340      	movs	r3, #64	; 0x40
 800a032:	eba0 000a 	sub.w	r0, r0, sl
 800a036:	fa03 f000 	lsl.w	r0, r3, r0
 800a03a:	9b04      	ldr	r3, [sp, #16]
 800a03c:	4303      	orrs	r3, r0
 800a03e:	3401      	adds	r4, #1
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a046:	4826      	ldr	r0, [pc, #152]	; (800a0e0 <_svfiprintf_r+0x1f0>)
 800a048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a04c:	2206      	movs	r2, #6
 800a04e:	f7f6 f8c7 	bl	80001e0 <memchr>
 800a052:	2800      	cmp	r0, #0
 800a054:	d038      	beq.n	800a0c8 <_svfiprintf_r+0x1d8>
 800a056:	4b23      	ldr	r3, [pc, #140]	; (800a0e4 <_svfiprintf_r+0x1f4>)
 800a058:	bb1b      	cbnz	r3, 800a0a2 <_svfiprintf_r+0x1b2>
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	3307      	adds	r3, #7
 800a05e:	f023 0307 	bic.w	r3, r3, #7
 800a062:	3308      	adds	r3, #8
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a068:	4433      	add	r3, r6
 800a06a:	9309      	str	r3, [sp, #36]	; 0x24
 800a06c:	e767      	b.n	8009f3e <_svfiprintf_r+0x4e>
 800a06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a072:	460c      	mov	r4, r1
 800a074:	2001      	movs	r0, #1
 800a076:	e7a5      	b.n	8009fc4 <_svfiprintf_r+0xd4>
 800a078:	2300      	movs	r3, #0
 800a07a:	3401      	adds	r4, #1
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	4619      	mov	r1, r3
 800a080:	f04f 0c0a 	mov.w	ip, #10
 800a084:	4620      	mov	r0, r4
 800a086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08a:	3a30      	subs	r2, #48	; 0x30
 800a08c:	2a09      	cmp	r2, #9
 800a08e:	d903      	bls.n	800a098 <_svfiprintf_r+0x1a8>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0c5      	beq.n	800a020 <_svfiprintf_r+0x130>
 800a094:	9105      	str	r1, [sp, #20]
 800a096:	e7c3      	b.n	800a020 <_svfiprintf_r+0x130>
 800a098:	fb0c 2101 	mla	r1, ip, r1, r2
 800a09c:	4604      	mov	r4, r0
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e7f0      	b.n	800a084 <_svfiprintf_r+0x194>
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <_svfiprintf_r+0x1f8>)
 800a0aa:	a904      	add	r1, sp, #16
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f3af 8000 	nop.w
 800a0b2:	1c42      	adds	r2, r0, #1
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	d1d6      	bne.n	800a066 <_svfiprintf_r+0x176>
 800a0b8:	89ab      	ldrh	r3, [r5, #12]
 800a0ba:	065b      	lsls	r3, r3, #25
 800a0bc:	f53f af2c 	bmi.w	8009f18 <_svfiprintf_r+0x28>
 800a0c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c2:	b01d      	add	sp, #116	; 0x74
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	ab03      	add	r3, sp, #12
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	462a      	mov	r2, r5
 800a0ce:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <_svfiprintf_r+0x1f8>)
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	f000 f9d4 	bl	800a480 <_printf_i>
 800a0d8:	e7eb      	b.n	800a0b2 <_svfiprintf_r+0x1c2>
 800a0da:	bf00      	nop
 800a0dc:	0800ee82 	.word	0x0800ee82
 800a0e0:	0800ee8c 	.word	0x0800ee8c
 800a0e4:	00000000 	.word	0x00000000
 800a0e8:	08009e39 	.word	0x08009e39
 800a0ec:	0800ee88 	.word	0x0800ee88

0800a0f0 <__sfputc_r>:
 800a0f0:	6893      	ldr	r3, [r2, #8]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	b410      	push	{r4}
 800a0f8:	6093      	str	r3, [r2, #8]
 800a0fa:	da08      	bge.n	800a10e <__sfputc_r+0x1e>
 800a0fc:	6994      	ldr	r4, [r2, #24]
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	db01      	blt.n	800a106 <__sfputc_r+0x16>
 800a102:	290a      	cmp	r1, #10
 800a104:	d103      	bne.n	800a10e <__sfputc_r+0x1e>
 800a106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a10a:	f000 baef 	b.w	800a6ec <__swbuf_r>
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	1c58      	adds	r0, r3, #1
 800a112:	6010      	str	r0, [r2, #0]
 800a114:	7019      	strb	r1, [r3, #0]
 800a116:	4608      	mov	r0, r1
 800a118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <__sfputs_r>:
 800a11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a120:	4606      	mov	r6, r0
 800a122:	460f      	mov	r7, r1
 800a124:	4614      	mov	r4, r2
 800a126:	18d5      	adds	r5, r2, r3
 800a128:	42ac      	cmp	r4, r5
 800a12a:	d101      	bne.n	800a130 <__sfputs_r+0x12>
 800a12c:	2000      	movs	r0, #0
 800a12e:	e007      	b.n	800a140 <__sfputs_r+0x22>
 800a130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a134:	463a      	mov	r2, r7
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffda 	bl	800a0f0 <__sfputc_r>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d1f3      	bne.n	800a128 <__sfputs_r+0xa>
 800a140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a144 <_vfiprintf_r>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	460d      	mov	r5, r1
 800a14a:	b09d      	sub	sp, #116	; 0x74
 800a14c:	4614      	mov	r4, r2
 800a14e:	4698      	mov	r8, r3
 800a150:	4606      	mov	r6, r0
 800a152:	b118      	cbz	r0, 800a15c <_vfiprintf_r+0x18>
 800a154:	6983      	ldr	r3, [r0, #24]
 800a156:	b90b      	cbnz	r3, 800a15c <_vfiprintf_r+0x18>
 800a158:	f000 fcaa 	bl	800aab0 <__sinit>
 800a15c:	4b89      	ldr	r3, [pc, #548]	; (800a384 <_vfiprintf_r+0x240>)
 800a15e:	429d      	cmp	r5, r3
 800a160:	d11b      	bne.n	800a19a <_vfiprintf_r+0x56>
 800a162:	6875      	ldr	r5, [r6, #4]
 800a164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a166:	07d9      	lsls	r1, r3, #31
 800a168:	d405      	bmi.n	800a176 <_vfiprintf_r+0x32>
 800a16a:	89ab      	ldrh	r3, [r5, #12]
 800a16c:	059a      	lsls	r2, r3, #22
 800a16e:	d402      	bmi.n	800a176 <_vfiprintf_r+0x32>
 800a170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a172:	f000 fd3b 	bl	800abec <__retarget_lock_acquire_recursive>
 800a176:	89ab      	ldrh	r3, [r5, #12]
 800a178:	071b      	lsls	r3, r3, #28
 800a17a:	d501      	bpl.n	800a180 <_vfiprintf_r+0x3c>
 800a17c:	692b      	ldr	r3, [r5, #16]
 800a17e:	b9eb      	cbnz	r3, 800a1bc <_vfiprintf_r+0x78>
 800a180:	4629      	mov	r1, r5
 800a182:	4630      	mov	r0, r6
 800a184:	f000 fb04 	bl	800a790 <__swsetup_r>
 800a188:	b1c0      	cbz	r0, 800a1bc <_vfiprintf_r+0x78>
 800a18a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a18c:	07dc      	lsls	r4, r3, #31
 800a18e:	d50e      	bpl.n	800a1ae <_vfiprintf_r+0x6a>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	b01d      	add	sp, #116	; 0x74
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19a:	4b7b      	ldr	r3, [pc, #492]	; (800a388 <_vfiprintf_r+0x244>)
 800a19c:	429d      	cmp	r5, r3
 800a19e:	d101      	bne.n	800a1a4 <_vfiprintf_r+0x60>
 800a1a0:	68b5      	ldr	r5, [r6, #8]
 800a1a2:	e7df      	b.n	800a164 <_vfiprintf_r+0x20>
 800a1a4:	4b79      	ldr	r3, [pc, #484]	; (800a38c <_vfiprintf_r+0x248>)
 800a1a6:	429d      	cmp	r5, r3
 800a1a8:	bf08      	it	eq
 800a1aa:	68f5      	ldreq	r5, [r6, #12]
 800a1ac:	e7da      	b.n	800a164 <_vfiprintf_r+0x20>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	0598      	lsls	r0, r3, #22
 800a1b2:	d4ed      	bmi.n	800a190 <_vfiprintf_r+0x4c>
 800a1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b6:	f000 fd1a 	bl	800abee <__retarget_lock_release_recursive>
 800a1ba:	e7e9      	b.n	800a190 <_vfiprintf_r+0x4c>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	2320      	movs	r3, #32
 800a1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ca:	2330      	movs	r3, #48	; 0x30
 800a1cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a390 <_vfiprintf_r+0x24c>
 800a1d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1d4:	f04f 0901 	mov.w	r9, #1
 800a1d8:	4623      	mov	r3, r4
 800a1da:	469a      	mov	sl, r3
 800a1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e0:	b10a      	cbz	r2, 800a1e6 <_vfiprintf_r+0xa2>
 800a1e2:	2a25      	cmp	r2, #37	; 0x25
 800a1e4:	d1f9      	bne.n	800a1da <_vfiprintf_r+0x96>
 800a1e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ea:	d00b      	beq.n	800a204 <_vfiprintf_r+0xc0>
 800a1ec:	465b      	mov	r3, fp
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff ff93 	bl	800a11e <__sfputs_r>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f000 80aa 	beq.w	800a352 <_vfiprintf_r+0x20e>
 800a1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a200:	445a      	add	r2, fp
 800a202:	9209      	str	r2, [sp, #36]	; 0x24
 800a204:	f89a 3000 	ldrb.w	r3, [sl]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 80a2 	beq.w	800a352 <_vfiprintf_r+0x20e>
 800a20e:	2300      	movs	r3, #0
 800a210:	f04f 32ff 	mov.w	r2, #4294967295
 800a214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a218:	f10a 0a01 	add.w	sl, sl, #1
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	9307      	str	r3, [sp, #28]
 800a220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a224:	931a      	str	r3, [sp, #104]	; 0x68
 800a226:	4654      	mov	r4, sl
 800a228:	2205      	movs	r2, #5
 800a22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22e:	4858      	ldr	r0, [pc, #352]	; (800a390 <_vfiprintf_r+0x24c>)
 800a230:	f7f5 ffd6 	bl	80001e0 <memchr>
 800a234:	9a04      	ldr	r2, [sp, #16]
 800a236:	b9d8      	cbnz	r0, 800a270 <_vfiprintf_r+0x12c>
 800a238:	06d1      	lsls	r1, r2, #27
 800a23a:	bf44      	itt	mi
 800a23c:	2320      	movmi	r3, #32
 800a23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a242:	0713      	lsls	r3, r2, #28
 800a244:	bf44      	itt	mi
 800a246:	232b      	movmi	r3, #43	; 0x2b
 800a248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a24c:	f89a 3000 	ldrb.w	r3, [sl]
 800a250:	2b2a      	cmp	r3, #42	; 0x2a
 800a252:	d015      	beq.n	800a280 <_vfiprintf_r+0x13c>
 800a254:	9a07      	ldr	r2, [sp, #28]
 800a256:	4654      	mov	r4, sl
 800a258:	2000      	movs	r0, #0
 800a25a:	f04f 0c0a 	mov.w	ip, #10
 800a25e:	4621      	mov	r1, r4
 800a260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a264:	3b30      	subs	r3, #48	; 0x30
 800a266:	2b09      	cmp	r3, #9
 800a268:	d94e      	bls.n	800a308 <_vfiprintf_r+0x1c4>
 800a26a:	b1b0      	cbz	r0, 800a29a <_vfiprintf_r+0x156>
 800a26c:	9207      	str	r2, [sp, #28]
 800a26e:	e014      	b.n	800a29a <_vfiprintf_r+0x156>
 800a270:	eba0 0308 	sub.w	r3, r0, r8
 800a274:	fa09 f303 	lsl.w	r3, r9, r3
 800a278:	4313      	orrs	r3, r2
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	46a2      	mov	sl, r4
 800a27e:	e7d2      	b.n	800a226 <_vfiprintf_r+0xe2>
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	1d19      	adds	r1, r3, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	9103      	str	r1, [sp, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	bfbb      	ittet	lt
 800a28c:	425b      	neglt	r3, r3
 800a28e:	f042 0202 	orrlt.w	r2, r2, #2
 800a292:	9307      	strge	r3, [sp, #28]
 800a294:	9307      	strlt	r3, [sp, #28]
 800a296:	bfb8      	it	lt
 800a298:	9204      	strlt	r2, [sp, #16]
 800a29a:	7823      	ldrb	r3, [r4, #0]
 800a29c:	2b2e      	cmp	r3, #46	; 0x2e
 800a29e:	d10c      	bne.n	800a2ba <_vfiprintf_r+0x176>
 800a2a0:	7863      	ldrb	r3, [r4, #1]
 800a2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a4:	d135      	bne.n	800a312 <_vfiprintf_r+0x1ce>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	1d1a      	adds	r2, r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	9203      	str	r2, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bfb8      	it	lt
 800a2b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2b6:	3402      	adds	r4, #2
 800a2b8:	9305      	str	r3, [sp, #20]
 800a2ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3a0 <_vfiprintf_r+0x25c>
 800a2be:	7821      	ldrb	r1, [r4, #0]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	f7f5 ff8c 	bl	80001e0 <memchr>
 800a2c8:	b140      	cbz	r0, 800a2dc <_vfiprintf_r+0x198>
 800a2ca:	2340      	movs	r3, #64	; 0x40
 800a2cc:	eba0 000a 	sub.w	r0, r0, sl
 800a2d0:	fa03 f000 	lsl.w	r0, r3, r0
 800a2d4:	9b04      	ldr	r3, [sp, #16]
 800a2d6:	4303      	orrs	r3, r0
 800a2d8:	3401      	adds	r4, #1
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	482c      	ldr	r0, [pc, #176]	; (800a394 <_vfiprintf_r+0x250>)
 800a2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e6:	2206      	movs	r2, #6
 800a2e8:	f7f5 ff7a 	bl	80001e0 <memchr>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d03f      	beq.n	800a370 <_vfiprintf_r+0x22c>
 800a2f0:	4b29      	ldr	r3, [pc, #164]	; (800a398 <_vfiprintf_r+0x254>)
 800a2f2:	bb1b      	cbnz	r3, 800a33c <_vfiprintf_r+0x1f8>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	3307      	adds	r3, #7
 800a2f8:	f023 0307 	bic.w	r3, r3, #7
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a302:	443b      	add	r3, r7
 800a304:	9309      	str	r3, [sp, #36]	; 0x24
 800a306:	e767      	b.n	800a1d8 <_vfiprintf_r+0x94>
 800a308:	fb0c 3202 	mla	r2, ip, r2, r3
 800a30c:	460c      	mov	r4, r1
 800a30e:	2001      	movs	r0, #1
 800a310:	e7a5      	b.n	800a25e <_vfiprintf_r+0x11a>
 800a312:	2300      	movs	r3, #0
 800a314:	3401      	adds	r4, #1
 800a316:	9305      	str	r3, [sp, #20]
 800a318:	4619      	mov	r1, r3
 800a31a:	f04f 0c0a 	mov.w	ip, #10
 800a31e:	4620      	mov	r0, r4
 800a320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a324:	3a30      	subs	r2, #48	; 0x30
 800a326:	2a09      	cmp	r2, #9
 800a328:	d903      	bls.n	800a332 <_vfiprintf_r+0x1ee>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0c5      	beq.n	800a2ba <_vfiprintf_r+0x176>
 800a32e:	9105      	str	r1, [sp, #20]
 800a330:	e7c3      	b.n	800a2ba <_vfiprintf_r+0x176>
 800a332:	fb0c 2101 	mla	r1, ip, r1, r2
 800a336:	4604      	mov	r4, r0
 800a338:	2301      	movs	r3, #1
 800a33a:	e7f0      	b.n	800a31e <_vfiprintf_r+0x1da>
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	462a      	mov	r2, r5
 800a342:	4b16      	ldr	r3, [pc, #88]	; (800a39c <_vfiprintf_r+0x258>)
 800a344:	a904      	add	r1, sp, #16
 800a346:	4630      	mov	r0, r6
 800a348:	f3af 8000 	nop.w
 800a34c:	4607      	mov	r7, r0
 800a34e:	1c78      	adds	r0, r7, #1
 800a350:	d1d6      	bne.n	800a300 <_vfiprintf_r+0x1bc>
 800a352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a354:	07d9      	lsls	r1, r3, #31
 800a356:	d405      	bmi.n	800a364 <_vfiprintf_r+0x220>
 800a358:	89ab      	ldrh	r3, [r5, #12]
 800a35a:	059a      	lsls	r2, r3, #22
 800a35c:	d402      	bmi.n	800a364 <_vfiprintf_r+0x220>
 800a35e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a360:	f000 fc45 	bl	800abee <__retarget_lock_release_recursive>
 800a364:	89ab      	ldrh	r3, [r5, #12]
 800a366:	065b      	lsls	r3, r3, #25
 800a368:	f53f af12 	bmi.w	800a190 <_vfiprintf_r+0x4c>
 800a36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a36e:	e711      	b.n	800a194 <_vfiprintf_r+0x50>
 800a370:	ab03      	add	r3, sp, #12
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	462a      	mov	r2, r5
 800a376:	4b09      	ldr	r3, [pc, #36]	; (800a39c <_vfiprintf_r+0x258>)
 800a378:	a904      	add	r1, sp, #16
 800a37a:	4630      	mov	r0, r6
 800a37c:	f000 f880 	bl	800a480 <_printf_i>
 800a380:	e7e4      	b.n	800a34c <_vfiprintf_r+0x208>
 800a382:	bf00      	nop
 800a384:	0800eed8 	.word	0x0800eed8
 800a388:	0800eef8 	.word	0x0800eef8
 800a38c:	0800eeb8 	.word	0x0800eeb8
 800a390:	0800ee82 	.word	0x0800ee82
 800a394:	0800ee8c 	.word	0x0800ee8c
 800a398:	00000000 	.word	0x00000000
 800a39c:	0800a11f 	.word	0x0800a11f
 800a3a0:	0800ee88 	.word	0x0800ee88

0800a3a4 <_printf_common>:
 800a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	4699      	mov	r9, r3
 800a3ac:	688a      	ldr	r2, [r1, #8]
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	bfb8      	it	lt
 800a3b8:	4613      	movlt	r3, r2
 800a3ba:	6033      	str	r3, [r6, #0]
 800a3bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	b10a      	cbz	r2, 800a3ca <_printf_common+0x26>
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	6033      	str	r3, [r6, #0]
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	0699      	lsls	r1, r3, #26
 800a3ce:	bf42      	ittt	mi
 800a3d0:	6833      	ldrmi	r3, [r6, #0]
 800a3d2:	3302      	addmi	r3, #2
 800a3d4:	6033      	strmi	r3, [r6, #0]
 800a3d6:	6825      	ldr	r5, [r4, #0]
 800a3d8:	f015 0506 	ands.w	r5, r5, #6
 800a3dc:	d106      	bne.n	800a3ec <_printf_common+0x48>
 800a3de:	f104 0a19 	add.w	sl, r4, #25
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	6832      	ldr	r2, [r6, #0]
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dc26      	bgt.n	800a43a <_printf_common+0x96>
 800a3ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3f0:	1e13      	subs	r3, r2, #0
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	bf18      	it	ne
 800a3f6:	2301      	movne	r3, #1
 800a3f8:	0692      	lsls	r2, r2, #26
 800a3fa:	d42b      	bmi.n	800a454 <_printf_common+0xb0>
 800a3fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a400:	4649      	mov	r1, r9
 800a402:	4638      	mov	r0, r7
 800a404:	47c0      	blx	r8
 800a406:	3001      	adds	r0, #1
 800a408:	d01e      	beq.n	800a448 <_printf_common+0xa4>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	68e5      	ldr	r5, [r4, #12]
 800a40e:	6832      	ldr	r2, [r6, #0]
 800a410:	f003 0306 	and.w	r3, r3, #6
 800a414:	2b04      	cmp	r3, #4
 800a416:	bf08      	it	eq
 800a418:	1aad      	subeq	r5, r5, r2
 800a41a:	68a3      	ldr	r3, [r4, #8]
 800a41c:	6922      	ldr	r2, [r4, #16]
 800a41e:	bf0c      	ite	eq
 800a420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a424:	2500      	movne	r5, #0
 800a426:	4293      	cmp	r3, r2
 800a428:	bfc4      	itt	gt
 800a42a:	1a9b      	subgt	r3, r3, r2
 800a42c:	18ed      	addgt	r5, r5, r3
 800a42e:	2600      	movs	r6, #0
 800a430:	341a      	adds	r4, #26
 800a432:	42b5      	cmp	r5, r6
 800a434:	d11a      	bne.n	800a46c <_printf_common+0xc8>
 800a436:	2000      	movs	r0, #0
 800a438:	e008      	b.n	800a44c <_printf_common+0xa8>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4652      	mov	r2, sl
 800a43e:	4649      	mov	r1, r9
 800a440:	4638      	mov	r0, r7
 800a442:	47c0      	blx	r8
 800a444:	3001      	adds	r0, #1
 800a446:	d103      	bne.n	800a450 <_printf_common+0xac>
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a450:	3501      	adds	r5, #1
 800a452:	e7c6      	b.n	800a3e2 <_printf_common+0x3e>
 800a454:	18e1      	adds	r1, r4, r3
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	2030      	movs	r0, #48	; 0x30
 800a45a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a45e:	4422      	add	r2, r4
 800a460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a468:	3302      	adds	r3, #2
 800a46a:	e7c7      	b.n	800a3fc <_printf_common+0x58>
 800a46c:	2301      	movs	r3, #1
 800a46e:	4622      	mov	r2, r4
 800a470:	4649      	mov	r1, r9
 800a472:	4638      	mov	r0, r7
 800a474:	47c0      	blx	r8
 800a476:	3001      	adds	r0, #1
 800a478:	d0e6      	beq.n	800a448 <_printf_common+0xa4>
 800a47a:	3601      	adds	r6, #1
 800a47c:	e7d9      	b.n	800a432 <_printf_common+0x8e>
	...

0800a480 <_printf_i>:
 800a480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	7e0f      	ldrb	r7, [r1, #24]
 800a486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a488:	2f78      	cmp	r7, #120	; 0x78
 800a48a:	4691      	mov	r9, r2
 800a48c:	4680      	mov	r8, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	469a      	mov	sl, r3
 800a492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a496:	d807      	bhi.n	800a4a8 <_printf_i+0x28>
 800a498:	2f62      	cmp	r7, #98	; 0x62
 800a49a:	d80a      	bhi.n	800a4b2 <_printf_i+0x32>
 800a49c:	2f00      	cmp	r7, #0
 800a49e:	f000 80d8 	beq.w	800a652 <_printf_i+0x1d2>
 800a4a2:	2f58      	cmp	r7, #88	; 0x58
 800a4a4:	f000 80a3 	beq.w	800a5ee <_printf_i+0x16e>
 800a4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4b0:	e03a      	b.n	800a528 <_printf_i+0xa8>
 800a4b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4b6:	2b15      	cmp	r3, #21
 800a4b8:	d8f6      	bhi.n	800a4a8 <_printf_i+0x28>
 800a4ba:	a101      	add	r1, pc, #4	; (adr r1, 800a4c0 <_printf_i+0x40>)
 800a4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4c0:	0800a519 	.word	0x0800a519
 800a4c4:	0800a52d 	.word	0x0800a52d
 800a4c8:	0800a4a9 	.word	0x0800a4a9
 800a4cc:	0800a4a9 	.word	0x0800a4a9
 800a4d0:	0800a4a9 	.word	0x0800a4a9
 800a4d4:	0800a4a9 	.word	0x0800a4a9
 800a4d8:	0800a52d 	.word	0x0800a52d
 800a4dc:	0800a4a9 	.word	0x0800a4a9
 800a4e0:	0800a4a9 	.word	0x0800a4a9
 800a4e4:	0800a4a9 	.word	0x0800a4a9
 800a4e8:	0800a4a9 	.word	0x0800a4a9
 800a4ec:	0800a639 	.word	0x0800a639
 800a4f0:	0800a55d 	.word	0x0800a55d
 800a4f4:	0800a61b 	.word	0x0800a61b
 800a4f8:	0800a4a9 	.word	0x0800a4a9
 800a4fc:	0800a4a9 	.word	0x0800a4a9
 800a500:	0800a65b 	.word	0x0800a65b
 800a504:	0800a4a9 	.word	0x0800a4a9
 800a508:	0800a55d 	.word	0x0800a55d
 800a50c:	0800a4a9 	.word	0x0800a4a9
 800a510:	0800a4a9 	.word	0x0800a4a9
 800a514:	0800a623 	.word	0x0800a623
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	602a      	str	r2, [r5, #0]
 800a520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a528:	2301      	movs	r3, #1
 800a52a:	e0a3      	b.n	800a674 <_printf_i+0x1f4>
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	6829      	ldr	r1, [r5, #0]
 800a530:	0606      	lsls	r6, r0, #24
 800a532:	f101 0304 	add.w	r3, r1, #4
 800a536:	d50a      	bpl.n	800a54e <_printf_i+0xce>
 800a538:	680e      	ldr	r6, [r1, #0]
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	2e00      	cmp	r6, #0
 800a53e:	da03      	bge.n	800a548 <_printf_i+0xc8>
 800a540:	232d      	movs	r3, #45	; 0x2d
 800a542:	4276      	negs	r6, r6
 800a544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a548:	485e      	ldr	r0, [pc, #376]	; (800a6c4 <_printf_i+0x244>)
 800a54a:	230a      	movs	r3, #10
 800a54c:	e019      	b.n	800a582 <_printf_i+0x102>
 800a54e:	680e      	ldr	r6, [r1, #0]
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a556:	bf18      	it	ne
 800a558:	b236      	sxthne	r6, r6
 800a55a:	e7ef      	b.n	800a53c <_printf_i+0xbc>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	6820      	ldr	r0, [r4, #0]
 800a560:	1d19      	adds	r1, r3, #4
 800a562:	6029      	str	r1, [r5, #0]
 800a564:	0601      	lsls	r1, r0, #24
 800a566:	d501      	bpl.n	800a56c <_printf_i+0xec>
 800a568:	681e      	ldr	r6, [r3, #0]
 800a56a:	e002      	b.n	800a572 <_printf_i+0xf2>
 800a56c:	0646      	lsls	r6, r0, #25
 800a56e:	d5fb      	bpl.n	800a568 <_printf_i+0xe8>
 800a570:	881e      	ldrh	r6, [r3, #0]
 800a572:	4854      	ldr	r0, [pc, #336]	; (800a6c4 <_printf_i+0x244>)
 800a574:	2f6f      	cmp	r7, #111	; 0x6f
 800a576:	bf0c      	ite	eq
 800a578:	2308      	moveq	r3, #8
 800a57a:	230a      	movne	r3, #10
 800a57c:	2100      	movs	r1, #0
 800a57e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a582:	6865      	ldr	r5, [r4, #4]
 800a584:	60a5      	str	r5, [r4, #8]
 800a586:	2d00      	cmp	r5, #0
 800a588:	bfa2      	ittt	ge
 800a58a:	6821      	ldrge	r1, [r4, #0]
 800a58c:	f021 0104 	bicge.w	r1, r1, #4
 800a590:	6021      	strge	r1, [r4, #0]
 800a592:	b90e      	cbnz	r6, 800a598 <_printf_i+0x118>
 800a594:	2d00      	cmp	r5, #0
 800a596:	d04d      	beq.n	800a634 <_printf_i+0x1b4>
 800a598:	4615      	mov	r5, r2
 800a59a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a59e:	fb03 6711 	mls	r7, r3, r1, r6
 800a5a2:	5dc7      	ldrb	r7, [r0, r7]
 800a5a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5a8:	4637      	mov	r7, r6
 800a5aa:	42bb      	cmp	r3, r7
 800a5ac:	460e      	mov	r6, r1
 800a5ae:	d9f4      	bls.n	800a59a <_printf_i+0x11a>
 800a5b0:	2b08      	cmp	r3, #8
 800a5b2:	d10b      	bne.n	800a5cc <_printf_i+0x14c>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	07de      	lsls	r6, r3, #31
 800a5b8:	d508      	bpl.n	800a5cc <_printf_i+0x14c>
 800a5ba:	6923      	ldr	r3, [r4, #16]
 800a5bc:	6861      	ldr	r1, [r4, #4]
 800a5be:	4299      	cmp	r1, r3
 800a5c0:	bfde      	ittt	le
 800a5c2:	2330      	movle	r3, #48	; 0x30
 800a5c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5cc:	1b52      	subs	r2, r2, r5
 800a5ce:	6122      	str	r2, [r4, #16]
 800a5d0:	f8cd a000 	str.w	sl, [sp]
 800a5d4:	464b      	mov	r3, r9
 800a5d6:	aa03      	add	r2, sp, #12
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4640      	mov	r0, r8
 800a5dc:	f7ff fee2 	bl	800a3a4 <_printf_common>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d14c      	bne.n	800a67e <_printf_i+0x1fe>
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	b004      	add	sp, #16
 800a5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ee:	4835      	ldr	r0, [pc, #212]	; (800a6c4 <_printf_i+0x244>)
 800a5f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5f4:	6829      	ldr	r1, [r5, #0]
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5fc:	6029      	str	r1, [r5, #0]
 800a5fe:	061d      	lsls	r5, r3, #24
 800a600:	d514      	bpl.n	800a62c <_printf_i+0x1ac>
 800a602:	07df      	lsls	r7, r3, #31
 800a604:	bf44      	itt	mi
 800a606:	f043 0320 	orrmi.w	r3, r3, #32
 800a60a:	6023      	strmi	r3, [r4, #0]
 800a60c:	b91e      	cbnz	r6, 800a616 <_printf_i+0x196>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	f023 0320 	bic.w	r3, r3, #32
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	2310      	movs	r3, #16
 800a618:	e7b0      	b.n	800a57c <_printf_i+0xfc>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	f043 0320 	orr.w	r3, r3, #32
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	2378      	movs	r3, #120	; 0x78
 800a624:	4828      	ldr	r0, [pc, #160]	; (800a6c8 <_printf_i+0x248>)
 800a626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a62a:	e7e3      	b.n	800a5f4 <_printf_i+0x174>
 800a62c:	0659      	lsls	r1, r3, #25
 800a62e:	bf48      	it	mi
 800a630:	b2b6      	uxthmi	r6, r6
 800a632:	e7e6      	b.n	800a602 <_printf_i+0x182>
 800a634:	4615      	mov	r5, r2
 800a636:	e7bb      	b.n	800a5b0 <_printf_i+0x130>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	6826      	ldr	r6, [r4, #0]
 800a63c:	6961      	ldr	r1, [r4, #20]
 800a63e:	1d18      	adds	r0, r3, #4
 800a640:	6028      	str	r0, [r5, #0]
 800a642:	0635      	lsls	r5, r6, #24
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	d501      	bpl.n	800a64c <_printf_i+0x1cc>
 800a648:	6019      	str	r1, [r3, #0]
 800a64a:	e002      	b.n	800a652 <_printf_i+0x1d2>
 800a64c:	0670      	lsls	r0, r6, #25
 800a64e:	d5fb      	bpl.n	800a648 <_printf_i+0x1c8>
 800a650:	8019      	strh	r1, [r3, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	6123      	str	r3, [r4, #16]
 800a656:	4615      	mov	r5, r2
 800a658:	e7ba      	b.n	800a5d0 <_printf_i+0x150>
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	1d1a      	adds	r2, r3, #4
 800a65e:	602a      	str	r2, [r5, #0]
 800a660:	681d      	ldr	r5, [r3, #0]
 800a662:	6862      	ldr	r2, [r4, #4]
 800a664:	2100      	movs	r1, #0
 800a666:	4628      	mov	r0, r5
 800a668:	f7f5 fdba 	bl	80001e0 <memchr>
 800a66c:	b108      	cbz	r0, 800a672 <_printf_i+0x1f2>
 800a66e:	1b40      	subs	r0, r0, r5
 800a670:	6060      	str	r0, [r4, #4]
 800a672:	6863      	ldr	r3, [r4, #4]
 800a674:	6123      	str	r3, [r4, #16]
 800a676:	2300      	movs	r3, #0
 800a678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a67c:	e7a8      	b.n	800a5d0 <_printf_i+0x150>
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	462a      	mov	r2, r5
 800a682:	4649      	mov	r1, r9
 800a684:	4640      	mov	r0, r8
 800a686:	47d0      	blx	sl
 800a688:	3001      	adds	r0, #1
 800a68a:	d0ab      	beq.n	800a5e4 <_printf_i+0x164>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	079b      	lsls	r3, r3, #30
 800a690:	d413      	bmi.n	800a6ba <_printf_i+0x23a>
 800a692:	68e0      	ldr	r0, [r4, #12]
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	4298      	cmp	r0, r3
 800a698:	bfb8      	it	lt
 800a69a:	4618      	movlt	r0, r3
 800a69c:	e7a4      	b.n	800a5e8 <_printf_i+0x168>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	47d0      	blx	sl
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	d09b      	beq.n	800a5e4 <_printf_i+0x164>
 800a6ac:	3501      	adds	r5, #1
 800a6ae:	68e3      	ldr	r3, [r4, #12]
 800a6b0:	9903      	ldr	r1, [sp, #12]
 800a6b2:	1a5b      	subs	r3, r3, r1
 800a6b4:	42ab      	cmp	r3, r5
 800a6b6:	dcf2      	bgt.n	800a69e <_printf_i+0x21e>
 800a6b8:	e7eb      	b.n	800a692 <_printf_i+0x212>
 800a6ba:	2500      	movs	r5, #0
 800a6bc:	f104 0619 	add.w	r6, r4, #25
 800a6c0:	e7f5      	b.n	800a6ae <_printf_i+0x22e>
 800a6c2:	bf00      	nop
 800a6c4:	0800ee93 	.word	0x0800ee93
 800a6c8:	0800eea4 	.word	0x0800eea4

0800a6cc <_sbrk_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4d06      	ldr	r5, [pc, #24]	; (800a6e8 <_sbrk_r+0x1c>)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	f7fb f9f2 	bl	8005ac0 <_sbrk>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_sbrk_r+0x1a>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_sbrk_r+0x1a>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20002a48 	.word	0x20002a48

0800a6ec <__swbuf_r>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x12>
 800a6f6:	6983      	ldr	r3, [r0, #24]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <__swbuf_r+0x12>
 800a6fa:	f000 f9d9 	bl	800aab0 <__sinit>
 800a6fe:	4b21      	ldr	r3, [pc, #132]	; (800a784 <__swbuf_r+0x98>)
 800a700:	429c      	cmp	r4, r3
 800a702:	d12b      	bne.n	800a75c <__swbuf_r+0x70>
 800a704:	686c      	ldr	r4, [r5, #4]
 800a706:	69a3      	ldr	r3, [r4, #24]
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	071a      	lsls	r2, r3, #28
 800a70e:	d52f      	bpl.n	800a770 <__swbuf_r+0x84>
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b36b      	cbz	r3, 800a770 <__swbuf_r+0x84>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	6820      	ldr	r0, [r4, #0]
 800a718:	1ac0      	subs	r0, r0, r3
 800a71a:	6963      	ldr	r3, [r4, #20]
 800a71c:	b2f6      	uxtb	r6, r6
 800a71e:	4283      	cmp	r3, r0
 800a720:	4637      	mov	r7, r6
 800a722:	dc04      	bgt.n	800a72e <__swbuf_r+0x42>
 800a724:	4621      	mov	r1, r4
 800a726:	4628      	mov	r0, r5
 800a728:	f000 f92e 	bl	800a988 <_fflush_r>
 800a72c:	bb30      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	3b01      	subs	r3, #1
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	701e      	strb	r6, [r3, #0]
 800a73c:	6963      	ldr	r3, [r4, #20]
 800a73e:	3001      	adds	r0, #1
 800a740:	4283      	cmp	r3, r0
 800a742:	d004      	beq.n	800a74e <__swbuf_r+0x62>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	07db      	lsls	r3, r3, #31
 800a748:	d506      	bpl.n	800a758 <__swbuf_r+0x6c>
 800a74a:	2e0a      	cmp	r6, #10
 800a74c:	d104      	bne.n	800a758 <__swbuf_r+0x6c>
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 f919 	bl	800a988 <_fflush_r>
 800a756:	b988      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a758:	4638      	mov	r0, r7
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <__swbuf_r+0x9c>)
 800a75e:	429c      	cmp	r4, r3
 800a760:	d101      	bne.n	800a766 <__swbuf_r+0x7a>
 800a762:	68ac      	ldr	r4, [r5, #8]
 800a764:	e7cf      	b.n	800a706 <__swbuf_r+0x1a>
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <__swbuf_r+0xa0>)
 800a768:	429c      	cmp	r4, r3
 800a76a:	bf08      	it	eq
 800a76c:	68ec      	ldreq	r4, [r5, #12]
 800a76e:	e7ca      	b.n	800a706 <__swbuf_r+0x1a>
 800a770:	4621      	mov	r1, r4
 800a772:	4628      	mov	r0, r5
 800a774:	f000 f80c 	bl	800a790 <__swsetup_r>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0cb      	beq.n	800a714 <__swbuf_r+0x28>
 800a77c:	f04f 37ff 	mov.w	r7, #4294967295
 800a780:	e7ea      	b.n	800a758 <__swbuf_r+0x6c>
 800a782:	bf00      	nop
 800a784:	0800eed8 	.word	0x0800eed8
 800a788:	0800eef8 	.word	0x0800eef8
 800a78c:	0800eeb8 	.word	0x0800eeb8

0800a790 <__swsetup_r>:
 800a790:	4b32      	ldr	r3, [pc, #200]	; (800a85c <__swsetup_r+0xcc>)
 800a792:	b570      	push	{r4, r5, r6, lr}
 800a794:	681d      	ldr	r5, [r3, #0]
 800a796:	4606      	mov	r6, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	b125      	cbz	r5, 800a7a6 <__swsetup_r+0x16>
 800a79c:	69ab      	ldr	r3, [r5, #24]
 800a79e:	b913      	cbnz	r3, 800a7a6 <__swsetup_r+0x16>
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f985 	bl	800aab0 <__sinit>
 800a7a6:	4b2e      	ldr	r3, [pc, #184]	; (800a860 <__swsetup_r+0xd0>)
 800a7a8:	429c      	cmp	r4, r3
 800a7aa:	d10f      	bne.n	800a7cc <__swsetup_r+0x3c>
 800a7ac:	686c      	ldr	r4, [r5, #4]
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7b4:	0719      	lsls	r1, r3, #28
 800a7b6:	d42c      	bmi.n	800a812 <__swsetup_r+0x82>
 800a7b8:	06dd      	lsls	r5, r3, #27
 800a7ba:	d411      	bmi.n	800a7e0 <__swsetup_r+0x50>
 800a7bc:	2309      	movs	r3, #9
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7c4:	81a3      	strh	r3, [r4, #12]
 800a7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ca:	e03e      	b.n	800a84a <__swsetup_r+0xba>
 800a7cc:	4b25      	ldr	r3, [pc, #148]	; (800a864 <__swsetup_r+0xd4>)
 800a7ce:	429c      	cmp	r4, r3
 800a7d0:	d101      	bne.n	800a7d6 <__swsetup_r+0x46>
 800a7d2:	68ac      	ldr	r4, [r5, #8]
 800a7d4:	e7eb      	b.n	800a7ae <__swsetup_r+0x1e>
 800a7d6:	4b24      	ldr	r3, [pc, #144]	; (800a868 <__swsetup_r+0xd8>)
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	bf08      	it	eq
 800a7dc:	68ec      	ldreq	r4, [r5, #12]
 800a7de:	e7e6      	b.n	800a7ae <__swsetup_r+0x1e>
 800a7e0:	0758      	lsls	r0, r3, #29
 800a7e2:	d512      	bpl.n	800a80a <__swsetup_r+0x7a>
 800a7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7e6:	b141      	cbz	r1, 800a7fa <__swsetup_r+0x6a>
 800a7e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ec:	4299      	cmp	r1, r3
 800a7ee:	d002      	beq.n	800a7f6 <__swsetup_r+0x66>
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff fa41 	bl	8009c78 <_free_r>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a800:	81a3      	strh	r3, [r4, #12]
 800a802:	2300      	movs	r3, #0
 800a804:	6063      	str	r3, [r4, #4]
 800a806:	6923      	ldr	r3, [r4, #16]
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	f043 0308 	orr.w	r3, r3, #8
 800a810:	81a3      	strh	r3, [r4, #12]
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	b94b      	cbnz	r3, 800a82a <__swsetup_r+0x9a>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a81c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a820:	d003      	beq.n	800a82a <__swsetup_r+0x9a>
 800a822:	4621      	mov	r1, r4
 800a824:	4630      	mov	r0, r6
 800a826:	f000 fa09 	bl	800ac3c <__smakebuf_r>
 800a82a:	89a0      	ldrh	r0, [r4, #12]
 800a82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a830:	f010 0301 	ands.w	r3, r0, #1
 800a834:	d00a      	beq.n	800a84c <__swsetup_r+0xbc>
 800a836:	2300      	movs	r3, #0
 800a838:	60a3      	str	r3, [r4, #8]
 800a83a:	6963      	ldr	r3, [r4, #20]
 800a83c:	425b      	negs	r3, r3
 800a83e:	61a3      	str	r3, [r4, #24]
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	b943      	cbnz	r3, 800a856 <__swsetup_r+0xc6>
 800a844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a848:	d1ba      	bne.n	800a7c0 <__swsetup_r+0x30>
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	0781      	lsls	r1, r0, #30
 800a84e:	bf58      	it	pl
 800a850:	6963      	ldrpl	r3, [r4, #20]
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	e7f4      	b.n	800a840 <__swsetup_r+0xb0>
 800a856:	2000      	movs	r0, #0
 800a858:	e7f7      	b.n	800a84a <__swsetup_r+0xba>
 800a85a:	bf00      	nop
 800a85c:	200000ac 	.word	0x200000ac
 800a860:	0800eed8 	.word	0x0800eed8
 800a864:	0800eef8 	.word	0x0800eef8
 800a868:	0800eeb8 	.word	0x0800eeb8

0800a86c <abort>:
 800a86c:	b508      	push	{r3, lr}
 800a86e:	2006      	movs	r0, #6
 800a870:	f000 faa2 	bl	800adb8 <raise>
 800a874:	2001      	movs	r0, #1
 800a876:	f7fb f8ab 	bl	80059d0 <_exit>
	...

0800a87c <__sflush_r>:
 800a87c:	898a      	ldrh	r2, [r1, #12]
 800a87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	4605      	mov	r5, r0
 800a884:	0710      	lsls	r0, r2, #28
 800a886:	460c      	mov	r4, r1
 800a888:	d458      	bmi.n	800a93c <__sflush_r+0xc0>
 800a88a:	684b      	ldr	r3, [r1, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc05      	bgt.n	800a89c <__sflush_r+0x20>
 800a890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a892:	2b00      	cmp	r3, #0
 800a894:	dc02      	bgt.n	800a89c <__sflush_r+0x20>
 800a896:	2000      	movs	r0, #0
 800a898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d0f9      	beq.n	800a896 <__sflush_r+0x1a>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8a8:	682f      	ldr	r7, [r5, #0]
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	d032      	beq.n	800a914 <__sflush_r+0x98>
 800a8ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	075a      	lsls	r2, r3, #29
 800a8b4:	d505      	bpl.n	800a8c2 <__sflush_r+0x46>
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	1ac0      	subs	r0, r0, r3
 800a8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8bc:	b10b      	cbz	r3, 800a8c2 <__sflush_r+0x46>
 800a8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8c0:	1ac0      	subs	r0, r0, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8c8:	6a21      	ldr	r1, [r4, #32]
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b0      	blx	r6
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	d106      	bne.n	800a8e2 <__sflush_r+0x66>
 800a8d4:	6829      	ldr	r1, [r5, #0]
 800a8d6:	291d      	cmp	r1, #29
 800a8d8:	d82c      	bhi.n	800a934 <__sflush_r+0xb8>
 800a8da:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <__sflush_r+0x108>)
 800a8dc:	40ca      	lsrs	r2, r1
 800a8de:	07d6      	lsls	r6, r2, #31
 800a8e0:	d528      	bpl.n	800a934 <__sflush_r+0xb8>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	6062      	str	r2, [r4, #4]
 800a8e6:	04d9      	lsls	r1, r3, #19
 800a8e8:	6922      	ldr	r2, [r4, #16]
 800a8ea:	6022      	str	r2, [r4, #0]
 800a8ec:	d504      	bpl.n	800a8f8 <__sflush_r+0x7c>
 800a8ee:	1c42      	adds	r2, r0, #1
 800a8f0:	d101      	bne.n	800a8f6 <__sflush_r+0x7a>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b903      	cbnz	r3, 800a8f8 <__sflush_r+0x7c>
 800a8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d0ca      	beq.n	800a896 <__sflush_r+0x1a>
 800a900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a904:	4299      	cmp	r1, r3
 800a906:	d002      	beq.n	800a90e <__sflush_r+0x92>
 800a908:	4628      	mov	r0, r5
 800a90a:	f7ff f9b5 	bl	8009c78 <_free_r>
 800a90e:	2000      	movs	r0, #0
 800a910:	6360      	str	r0, [r4, #52]	; 0x34
 800a912:	e7c1      	b.n	800a898 <__sflush_r+0x1c>
 800a914:	6a21      	ldr	r1, [r4, #32]
 800a916:	2301      	movs	r3, #1
 800a918:	4628      	mov	r0, r5
 800a91a:	47b0      	blx	r6
 800a91c:	1c41      	adds	r1, r0, #1
 800a91e:	d1c7      	bne.n	800a8b0 <__sflush_r+0x34>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0c4      	beq.n	800a8b0 <__sflush_r+0x34>
 800a926:	2b1d      	cmp	r3, #29
 800a928:	d001      	beq.n	800a92e <__sflush_r+0xb2>
 800a92a:	2b16      	cmp	r3, #22
 800a92c:	d101      	bne.n	800a932 <__sflush_r+0xb6>
 800a92e:	602f      	str	r7, [r5, #0]
 800a930:	e7b1      	b.n	800a896 <__sflush_r+0x1a>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	e7ad      	b.n	800a898 <__sflush_r+0x1c>
 800a93c:	690f      	ldr	r7, [r1, #16]
 800a93e:	2f00      	cmp	r7, #0
 800a940:	d0a9      	beq.n	800a896 <__sflush_r+0x1a>
 800a942:	0793      	lsls	r3, r2, #30
 800a944:	680e      	ldr	r6, [r1, #0]
 800a946:	bf08      	it	eq
 800a948:	694b      	ldreq	r3, [r1, #20]
 800a94a:	600f      	str	r7, [r1, #0]
 800a94c:	bf18      	it	ne
 800a94e:	2300      	movne	r3, #0
 800a950:	eba6 0807 	sub.w	r8, r6, r7
 800a954:	608b      	str	r3, [r1, #8]
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	dd9c      	ble.n	800a896 <__sflush_r+0x1a>
 800a95c:	6a21      	ldr	r1, [r4, #32]
 800a95e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a960:	4643      	mov	r3, r8
 800a962:	463a      	mov	r2, r7
 800a964:	4628      	mov	r0, r5
 800a966:	47b0      	blx	r6
 800a968:	2800      	cmp	r0, #0
 800a96a:	dc06      	bgt.n	800a97a <__sflush_r+0xfe>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	e78e      	b.n	800a898 <__sflush_r+0x1c>
 800a97a:	4407      	add	r7, r0
 800a97c:	eba8 0800 	sub.w	r8, r8, r0
 800a980:	e7e9      	b.n	800a956 <__sflush_r+0xda>
 800a982:	bf00      	nop
 800a984:	20400001 	.word	0x20400001

0800a988 <_fflush_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	690b      	ldr	r3, [r1, #16]
 800a98c:	4605      	mov	r5, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	b913      	cbnz	r3, 800a998 <_fflush_r+0x10>
 800a992:	2500      	movs	r5, #0
 800a994:	4628      	mov	r0, r5
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	b118      	cbz	r0, 800a9a2 <_fflush_r+0x1a>
 800a99a:	6983      	ldr	r3, [r0, #24]
 800a99c:	b90b      	cbnz	r3, 800a9a2 <_fflush_r+0x1a>
 800a99e:	f000 f887 	bl	800aab0 <__sinit>
 800a9a2:	4b14      	ldr	r3, [pc, #80]	; (800a9f4 <_fflush_r+0x6c>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d11b      	bne.n	800a9e0 <_fflush_r+0x58>
 800a9a8:	686c      	ldr	r4, [r5, #4]
 800a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0ef      	beq.n	800a992 <_fflush_r+0xa>
 800a9b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9b4:	07d0      	lsls	r0, r2, #31
 800a9b6:	d404      	bmi.n	800a9c2 <_fflush_r+0x3a>
 800a9b8:	0599      	lsls	r1, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_fflush_r+0x3a>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9be:	f000 f915 	bl	800abec <__retarget_lock_acquire_recursive>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7ff ff59 	bl	800a87c <__sflush_r>
 800a9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9cc:	07da      	lsls	r2, r3, #31
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	d4e0      	bmi.n	800a994 <_fflush_r+0xc>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	059b      	lsls	r3, r3, #22
 800a9d6:	d4dd      	bmi.n	800a994 <_fflush_r+0xc>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9da:	f000 f908 	bl	800abee <__retarget_lock_release_recursive>
 800a9de:	e7d9      	b.n	800a994 <_fflush_r+0xc>
 800a9e0:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <_fflush_r+0x70>)
 800a9e2:	429c      	cmp	r4, r3
 800a9e4:	d101      	bne.n	800a9ea <_fflush_r+0x62>
 800a9e6:	68ac      	ldr	r4, [r5, #8]
 800a9e8:	e7df      	b.n	800a9aa <_fflush_r+0x22>
 800a9ea:	4b04      	ldr	r3, [pc, #16]	; (800a9fc <_fflush_r+0x74>)
 800a9ec:	429c      	cmp	r4, r3
 800a9ee:	bf08      	it	eq
 800a9f0:	68ec      	ldreq	r4, [r5, #12]
 800a9f2:	e7da      	b.n	800a9aa <_fflush_r+0x22>
 800a9f4:	0800eed8 	.word	0x0800eed8
 800a9f8:	0800eef8 	.word	0x0800eef8
 800a9fc:	0800eeb8 	.word	0x0800eeb8

0800aa00 <std>:
 800aa00:	2300      	movs	r3, #0
 800aa02:	b510      	push	{r4, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	e9c0 3300 	strd	r3, r3, [r0]
 800aa0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa0e:	6083      	str	r3, [r0, #8]
 800aa10:	8181      	strh	r1, [r0, #12]
 800aa12:	6643      	str	r3, [r0, #100]	; 0x64
 800aa14:	81c2      	strh	r2, [r0, #14]
 800aa16:	6183      	str	r3, [r0, #24]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	305c      	adds	r0, #92	; 0x5c
 800aa1e:	f7ff f80f 	bl	8009a40 <memset>
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <std+0x38>)
 800aa24:	6263      	str	r3, [r4, #36]	; 0x24
 800aa26:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <std+0x3c>)
 800aa28:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <std+0x40>)
 800aa2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <std+0x44>)
 800aa30:	6224      	str	r4, [r4, #32]
 800aa32:	6323      	str	r3, [r4, #48]	; 0x30
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	0800adf1 	.word	0x0800adf1
 800aa3c:	0800ae13 	.word	0x0800ae13
 800aa40:	0800ae4b 	.word	0x0800ae4b
 800aa44:	0800ae6f 	.word	0x0800ae6f

0800aa48 <_cleanup_r>:
 800aa48:	4901      	ldr	r1, [pc, #4]	; (800aa50 <_cleanup_r+0x8>)
 800aa4a:	f000 b8af 	b.w	800abac <_fwalk_reent>
 800aa4e:	bf00      	nop
 800aa50:	0800a989 	.word	0x0800a989

0800aa54 <__sfmoreglue>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	2268      	movs	r2, #104	; 0x68
 800aa58:	1e4d      	subs	r5, r1, #1
 800aa5a:	4355      	muls	r5, r2
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa62:	f7ff f975 	bl	8009d50 <_malloc_r>
 800aa66:	4604      	mov	r4, r0
 800aa68:	b140      	cbz	r0, 800aa7c <__sfmoreglue+0x28>
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa70:	300c      	adds	r0, #12
 800aa72:	60a0      	str	r0, [r4, #8]
 800aa74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa78:	f7fe ffe2 	bl	8009a40 <memset>
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <__sfp_lock_acquire>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__sfp_lock_acquire+0x8>)
 800aa82:	f000 b8b3 	b.w	800abec <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	20002a45 	.word	0x20002a45

0800aa8c <__sfp_lock_release>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__sfp_lock_release+0x8>)
 800aa8e:	f000 b8ae 	b.w	800abee <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	20002a45 	.word	0x20002a45

0800aa98 <__sinit_lock_acquire>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__sinit_lock_acquire+0x8>)
 800aa9a:	f000 b8a7 	b.w	800abec <__retarget_lock_acquire_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	20002a46 	.word	0x20002a46

0800aaa4 <__sinit_lock_release>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__sinit_lock_release+0x8>)
 800aaa6:	f000 b8a2 	b.w	800abee <__retarget_lock_release_recursive>
 800aaaa:	bf00      	nop
 800aaac:	20002a46 	.word	0x20002a46

0800aab0 <__sinit>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	4604      	mov	r4, r0
 800aab4:	f7ff fff0 	bl	800aa98 <__sinit_lock_acquire>
 800aab8:	69a3      	ldr	r3, [r4, #24]
 800aaba:	b11b      	cbz	r3, 800aac4 <__sinit+0x14>
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac0:	f7ff bff0 	b.w	800aaa4 <__sinit_lock_release>
 800aac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aac8:	6523      	str	r3, [r4, #80]	; 0x50
 800aaca:	4b13      	ldr	r3, [pc, #76]	; (800ab18 <__sinit+0x68>)
 800aacc:	4a13      	ldr	r2, [pc, #76]	; (800ab1c <__sinit+0x6c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	bf04      	itt	eq
 800aad6:	2301      	moveq	r3, #1
 800aad8:	61a3      	streq	r3, [r4, #24]
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f820 	bl	800ab20 <__sfp>
 800aae0:	6060      	str	r0, [r4, #4]
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 f81c 	bl	800ab20 <__sfp>
 800aae8:	60a0      	str	r0, [r4, #8]
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 f818 	bl	800ab20 <__sfp>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60e0      	str	r0, [r4, #12]
 800aaf4:	2104      	movs	r1, #4
 800aaf6:	6860      	ldr	r0, [r4, #4]
 800aaf8:	f7ff ff82 	bl	800aa00 <std>
 800aafc:	68a0      	ldr	r0, [r4, #8]
 800aafe:	2201      	movs	r2, #1
 800ab00:	2109      	movs	r1, #9
 800ab02:	f7ff ff7d 	bl	800aa00 <std>
 800ab06:	68e0      	ldr	r0, [r4, #12]
 800ab08:	2202      	movs	r2, #2
 800ab0a:	2112      	movs	r1, #18
 800ab0c:	f7ff ff78 	bl	800aa00 <std>
 800ab10:	2301      	movs	r3, #1
 800ab12:	61a3      	str	r3, [r4, #24]
 800ab14:	e7d2      	b.n	800aabc <__sinit+0xc>
 800ab16:	bf00      	nop
 800ab18:	0800edd0 	.word	0x0800edd0
 800ab1c:	0800aa49 	.word	0x0800aa49

0800ab20 <__sfp>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	4607      	mov	r7, r0
 800ab24:	f7ff ffac 	bl	800aa80 <__sfp_lock_acquire>
 800ab28:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <__sfp+0x84>)
 800ab2a:	681e      	ldr	r6, [r3, #0]
 800ab2c:	69b3      	ldr	r3, [r6, #24]
 800ab2e:	b913      	cbnz	r3, 800ab36 <__sfp+0x16>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff ffbd 	bl	800aab0 <__sinit>
 800ab36:	3648      	adds	r6, #72	; 0x48
 800ab38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	d503      	bpl.n	800ab48 <__sfp+0x28>
 800ab40:	6833      	ldr	r3, [r6, #0]
 800ab42:	b30b      	cbz	r3, 800ab88 <__sfp+0x68>
 800ab44:	6836      	ldr	r6, [r6, #0]
 800ab46:	e7f7      	b.n	800ab38 <__sfp+0x18>
 800ab48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab4c:	b9d5      	cbnz	r5, 800ab84 <__sfp+0x64>
 800ab4e:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <__sfp+0x88>)
 800ab50:	60e3      	str	r3, [r4, #12]
 800ab52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab56:	6665      	str	r5, [r4, #100]	; 0x64
 800ab58:	f000 f847 	bl	800abea <__retarget_lock_init_recursive>
 800ab5c:	f7ff ff96 	bl	800aa8c <__sfp_lock_release>
 800ab60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab68:	6025      	str	r5, [r4, #0]
 800ab6a:	61a5      	str	r5, [r4, #24]
 800ab6c:	2208      	movs	r2, #8
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab74:	f7fe ff64 	bl	8009a40 <memset>
 800ab78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab80:	4620      	mov	r0, r4
 800ab82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab84:	3468      	adds	r4, #104	; 0x68
 800ab86:	e7d9      	b.n	800ab3c <__sfp+0x1c>
 800ab88:	2104      	movs	r1, #4
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f7ff ff62 	bl	800aa54 <__sfmoreglue>
 800ab90:	4604      	mov	r4, r0
 800ab92:	6030      	str	r0, [r6, #0]
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d1d5      	bne.n	800ab44 <__sfp+0x24>
 800ab98:	f7ff ff78 	bl	800aa8c <__sfp_lock_release>
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	e7ee      	b.n	800ab80 <__sfp+0x60>
 800aba2:	bf00      	nop
 800aba4:	0800edd0 	.word	0x0800edd0
 800aba8:	ffff0001 	.word	0xffff0001

0800abac <_fwalk_reent>:
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	4606      	mov	r6, r0
 800abb2:	4688      	mov	r8, r1
 800abb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abb8:	2700      	movs	r7, #0
 800abba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abbe:	f1b9 0901 	subs.w	r9, r9, #1
 800abc2:	d505      	bpl.n	800abd0 <_fwalk_reent+0x24>
 800abc4:	6824      	ldr	r4, [r4, #0]
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d1f7      	bne.n	800abba <_fwalk_reent+0xe>
 800abca:	4638      	mov	r0, r7
 800abcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd0:	89ab      	ldrh	r3, [r5, #12]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d907      	bls.n	800abe6 <_fwalk_reent+0x3a>
 800abd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abda:	3301      	adds	r3, #1
 800abdc:	d003      	beq.n	800abe6 <_fwalk_reent+0x3a>
 800abde:	4629      	mov	r1, r5
 800abe0:	4630      	mov	r0, r6
 800abe2:	47c0      	blx	r8
 800abe4:	4307      	orrs	r7, r0
 800abe6:	3568      	adds	r5, #104	; 0x68
 800abe8:	e7e9      	b.n	800abbe <_fwalk_reent+0x12>

0800abea <__retarget_lock_init_recursive>:
 800abea:	4770      	bx	lr

0800abec <__retarget_lock_acquire_recursive>:
 800abec:	4770      	bx	lr

0800abee <__retarget_lock_release_recursive>:
 800abee:	4770      	bx	lr

0800abf0 <__swhatbuf_r>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	460e      	mov	r6, r1
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	2900      	cmp	r1, #0
 800abfa:	b096      	sub	sp, #88	; 0x58
 800abfc:	4614      	mov	r4, r2
 800abfe:	461d      	mov	r5, r3
 800ac00:	da08      	bge.n	800ac14 <__swhatbuf_r+0x24>
 800ac02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	602a      	str	r2, [r5, #0]
 800ac0a:	061a      	lsls	r2, r3, #24
 800ac0c:	d410      	bmi.n	800ac30 <__swhatbuf_r+0x40>
 800ac0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac12:	e00e      	b.n	800ac32 <__swhatbuf_r+0x42>
 800ac14:	466a      	mov	r2, sp
 800ac16:	f000 f951 	bl	800aebc <_fstat_r>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	dbf1      	blt.n	800ac02 <__swhatbuf_r+0x12>
 800ac1e:	9a01      	ldr	r2, [sp, #4]
 800ac20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac28:	425a      	negs	r2, r3
 800ac2a:	415a      	adcs	r2, r3
 800ac2c:	602a      	str	r2, [r5, #0]
 800ac2e:	e7ee      	b.n	800ac0e <__swhatbuf_r+0x1e>
 800ac30:	2340      	movs	r3, #64	; 0x40
 800ac32:	2000      	movs	r0, #0
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	b016      	add	sp, #88	; 0x58
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac3c <__smakebuf_r>:
 800ac3c:	898b      	ldrh	r3, [r1, #12]
 800ac3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac40:	079d      	lsls	r5, r3, #30
 800ac42:	4606      	mov	r6, r0
 800ac44:	460c      	mov	r4, r1
 800ac46:	d507      	bpl.n	800ac58 <__smakebuf_r+0x1c>
 800ac48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	6123      	str	r3, [r4, #16]
 800ac50:	2301      	movs	r3, #1
 800ac52:	6163      	str	r3, [r4, #20]
 800ac54:	b002      	add	sp, #8
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	ab01      	add	r3, sp, #4
 800ac5a:	466a      	mov	r2, sp
 800ac5c:	f7ff ffc8 	bl	800abf0 <__swhatbuf_r>
 800ac60:	9900      	ldr	r1, [sp, #0]
 800ac62:	4605      	mov	r5, r0
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff f873 	bl	8009d50 <_malloc_r>
 800ac6a:	b948      	cbnz	r0, 800ac80 <__smakebuf_r+0x44>
 800ac6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac70:	059a      	lsls	r2, r3, #22
 800ac72:	d4ef      	bmi.n	800ac54 <__smakebuf_r+0x18>
 800ac74:	f023 0303 	bic.w	r3, r3, #3
 800ac78:	f043 0302 	orr.w	r3, r3, #2
 800ac7c:	81a3      	strh	r3, [r4, #12]
 800ac7e:	e7e3      	b.n	800ac48 <__smakebuf_r+0xc>
 800ac80:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <__smakebuf_r+0x7c>)
 800ac82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	6020      	str	r0, [r4, #0]
 800ac88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	6163      	str	r3, [r4, #20]
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	6120      	str	r0, [r4, #16]
 800ac96:	b15b      	cbz	r3, 800acb0 <__smakebuf_r+0x74>
 800ac98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f000 f91f 	bl	800aee0 <_isatty_r>
 800aca2:	b128      	cbz	r0, 800acb0 <__smakebuf_r+0x74>
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	89a0      	ldrh	r0, [r4, #12]
 800acb2:	4305      	orrs	r5, r0
 800acb4:	81a5      	strh	r5, [r4, #12]
 800acb6:	e7cd      	b.n	800ac54 <__smakebuf_r+0x18>
 800acb8:	0800aa49 	.word	0x0800aa49

0800acbc <memmove>:
 800acbc:	4288      	cmp	r0, r1
 800acbe:	b510      	push	{r4, lr}
 800acc0:	eb01 0402 	add.w	r4, r1, r2
 800acc4:	d902      	bls.n	800accc <memmove+0x10>
 800acc6:	4284      	cmp	r4, r0
 800acc8:	4623      	mov	r3, r4
 800acca:	d807      	bhi.n	800acdc <memmove+0x20>
 800accc:	1e43      	subs	r3, r0, #1
 800acce:	42a1      	cmp	r1, r4
 800acd0:	d008      	beq.n	800ace4 <memmove+0x28>
 800acd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acda:	e7f8      	b.n	800acce <memmove+0x12>
 800acdc:	4402      	add	r2, r0
 800acde:	4601      	mov	r1, r0
 800ace0:	428a      	cmp	r2, r1
 800ace2:	d100      	bne.n	800ace6 <memmove+0x2a>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acee:	e7f7      	b.n	800ace0 <memmove+0x24>

0800acf0 <__malloc_lock>:
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <__malloc_lock+0x8>)
 800acf2:	f7ff bf7b 	b.w	800abec <__retarget_lock_acquire_recursive>
 800acf6:	bf00      	nop
 800acf8:	20002a44 	.word	0x20002a44

0800acfc <__malloc_unlock>:
 800acfc:	4801      	ldr	r0, [pc, #4]	; (800ad04 <__malloc_unlock+0x8>)
 800acfe:	f7ff bf76 	b.w	800abee <__retarget_lock_release_recursive>
 800ad02:	bf00      	nop
 800ad04:	20002a44 	.word	0x20002a44

0800ad08 <_realloc_r>:
 800ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0c:	4680      	mov	r8, r0
 800ad0e:	4614      	mov	r4, r2
 800ad10:	460e      	mov	r6, r1
 800ad12:	b921      	cbnz	r1, 800ad1e <_realloc_r+0x16>
 800ad14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad18:	4611      	mov	r1, r2
 800ad1a:	f7ff b819 	b.w	8009d50 <_malloc_r>
 800ad1e:	b92a      	cbnz	r2, 800ad2c <_realloc_r+0x24>
 800ad20:	f7fe ffaa 	bl	8009c78 <_free_r>
 800ad24:	4625      	mov	r5, r4
 800ad26:	4628      	mov	r0, r5
 800ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2c:	f000 f8fa 	bl	800af24 <_malloc_usable_size_r>
 800ad30:	4284      	cmp	r4, r0
 800ad32:	4607      	mov	r7, r0
 800ad34:	d802      	bhi.n	800ad3c <_realloc_r+0x34>
 800ad36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad3a:	d812      	bhi.n	800ad62 <_realloc_r+0x5a>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4640      	mov	r0, r8
 800ad40:	f7ff f806 	bl	8009d50 <_malloc_r>
 800ad44:	4605      	mov	r5, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0ed      	beq.n	800ad26 <_realloc_r+0x1e>
 800ad4a:	42bc      	cmp	r4, r7
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4631      	mov	r1, r6
 800ad50:	bf28      	it	cs
 800ad52:	463a      	movcs	r2, r7
 800ad54:	f7fe ff82 	bl	8009c5c <memcpy>
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f7fe ff8c 	bl	8009c78 <_free_r>
 800ad60:	e7e1      	b.n	800ad26 <_realloc_r+0x1e>
 800ad62:	4635      	mov	r5, r6
 800ad64:	e7df      	b.n	800ad26 <_realloc_r+0x1e>

0800ad66 <_raise_r>:
 800ad66:	291f      	cmp	r1, #31
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	d904      	bls.n	800ad7a <_raise_r+0x14>
 800ad70:	2316      	movs	r3, #22
 800ad72:	6003      	str	r3, [r0, #0]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	bd38      	pop	{r3, r4, r5, pc}
 800ad7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad7c:	b112      	cbz	r2, 800ad84 <_raise_r+0x1e>
 800ad7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad82:	b94b      	cbnz	r3, 800ad98 <_raise_r+0x32>
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 f831 	bl	800adec <_getpid_r>
 800ad8a:	462a      	mov	r2, r5
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	4620      	mov	r0, r4
 800ad90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad94:	f000 b818 	b.w	800adc8 <_kill_r>
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d00a      	beq.n	800adb2 <_raise_r+0x4c>
 800ad9c:	1c59      	adds	r1, r3, #1
 800ad9e:	d103      	bne.n	800ada8 <_raise_r+0x42>
 800ada0:	2316      	movs	r3, #22
 800ada2:	6003      	str	r3, [r0, #0]
 800ada4:	2001      	movs	r0, #1
 800ada6:	e7e7      	b.n	800ad78 <_raise_r+0x12>
 800ada8:	2400      	movs	r4, #0
 800adaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adae:	4628      	mov	r0, r5
 800adb0:	4798      	blx	r3
 800adb2:	2000      	movs	r0, #0
 800adb4:	e7e0      	b.n	800ad78 <_raise_r+0x12>
	...

0800adb8 <raise>:
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <raise+0xc>)
 800adba:	4601      	mov	r1, r0
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	f7ff bfd2 	b.w	800ad66 <_raise_r>
 800adc2:	bf00      	nop
 800adc4:	200000ac 	.word	0x200000ac

0800adc8 <_kill_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	; (800ade8 <_kill_r+0x20>)
 800adcc:	2300      	movs	r3, #0
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	4611      	mov	r1, r2
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	f7fa fdeb 	bl	80059b0 <_kill>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	d102      	bne.n	800ade4 <_kill_r+0x1c>
 800adde:	682b      	ldr	r3, [r5, #0]
 800ade0:	b103      	cbz	r3, 800ade4 <_kill_r+0x1c>
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	bd38      	pop	{r3, r4, r5, pc}
 800ade6:	bf00      	nop
 800ade8:	20002a48 	.word	0x20002a48

0800adec <_getpid_r>:
 800adec:	f7fa bdd8 	b.w	80059a0 <_getpid>

0800adf0 <__sread>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	460c      	mov	r4, r1
 800adf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf8:	f000 f89c 	bl	800af34 <_read_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	bfab      	itete	ge
 800ae00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae02:	89a3      	ldrhlt	r3, [r4, #12]
 800ae04:	181b      	addge	r3, r3, r0
 800ae06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae0a:	bfac      	ite	ge
 800ae0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae0e:	81a3      	strhlt	r3, [r4, #12]
 800ae10:	bd10      	pop	{r4, pc}

0800ae12 <__swrite>:
 800ae12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	461f      	mov	r7, r3
 800ae18:	898b      	ldrh	r3, [r1, #12]
 800ae1a:	05db      	lsls	r3, r3, #23
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	460c      	mov	r4, r1
 800ae20:	4616      	mov	r6, r2
 800ae22:	d505      	bpl.n	800ae30 <__swrite+0x1e>
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	2302      	movs	r3, #2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f000 f868 	bl	800af00 <_lseek_r>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	463b      	mov	r3, r7
 800ae40:	4628      	mov	r0, r5
 800ae42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	f000 b817 	b.w	800ae78 <_write_r>

0800ae4a <__sseek>:
 800ae4a:	b510      	push	{r4, lr}
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae52:	f000 f855 	bl	800af00 <_lseek_r>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	bf15      	itete	ne
 800ae5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae66:	81a3      	strheq	r3, [r4, #12]
 800ae68:	bf18      	it	ne
 800ae6a:	81a3      	strhne	r3, [r4, #12]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__sclose>:
 800ae6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae72:	f000 b813 	b.w	800ae9c <_close_r>
	...

0800ae78 <_write_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	; (800ae98 <_write_r+0x20>)
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	2200      	movs	r2, #0
 800ae84:	602a      	str	r2, [r5, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	f7fa fdc9 	bl	8005a1e <_write>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_write_r+0x1e>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_write_r+0x1e>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20002a48 	.word	0x20002a48

0800ae9c <_close_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d06      	ldr	r5, [pc, #24]	; (800aeb8 <_close_r+0x1c>)
 800aea0:	2300      	movs	r3, #0
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	f7fa fdd5 	bl	8005a56 <_close>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_close_r+0x1a>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_close_r+0x1a>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	20002a48 	.word	0x20002a48

0800aebc <_fstat_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d07      	ldr	r5, [pc, #28]	; (800aedc <_fstat_r+0x20>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	4611      	mov	r1, r2
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	f7fa fdd0 	bl	8005a6e <_fstat>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	d102      	bne.n	800aed8 <_fstat_r+0x1c>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	b103      	cbz	r3, 800aed8 <_fstat_r+0x1c>
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	bd38      	pop	{r3, r4, r5, pc}
 800aeda:	bf00      	nop
 800aedc:	20002a48 	.word	0x20002a48

0800aee0 <_isatty_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d06      	ldr	r5, [pc, #24]	; (800aefc <_isatty_r+0x1c>)
 800aee4:	2300      	movs	r3, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	602b      	str	r3, [r5, #0]
 800aeec:	f7fa fdcf 	bl	8005a8e <_isatty>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_isatty_r+0x1a>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_isatty_r+0x1a>
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	20002a48 	.word	0x20002a48

0800af00 <_lseek_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d07      	ldr	r5, [pc, #28]	; (800af20 <_lseek_r+0x20>)
 800af04:	4604      	mov	r4, r0
 800af06:	4608      	mov	r0, r1
 800af08:	4611      	mov	r1, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	602a      	str	r2, [r5, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	f7fa fdc8 	bl	8005aa4 <_lseek>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_lseek_r+0x1e>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_lseek_r+0x1e>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	20002a48 	.word	0x20002a48

0800af24 <_malloc_usable_size_r>:
 800af24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af28:	1f18      	subs	r0, r3, #4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bfbc      	itt	lt
 800af2e:	580b      	ldrlt	r3, [r1, r0]
 800af30:	18c0      	addlt	r0, r0, r3
 800af32:	4770      	bx	lr

0800af34 <_read_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_read_r+0x20>)
 800af38:	4604      	mov	r4, r0
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7fa fd4e 	bl	80059e4 <_read>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_read_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_read_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	20002a48 	.word	0x20002a48

0800af58 <_init>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr

0800af64 <_fini>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	bf00      	nop
 800af68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6a:	bc08      	pop	{r3}
 800af6c:	469e      	mov	lr, r3
 800af6e:	4770      	bx	lr
