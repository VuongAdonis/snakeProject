
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004298  0800c978  0800c978  0001c978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c10  08010c10  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08010c10  08010c10  00020c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c18  08010c18  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c18  08010c18  00020c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c1c  08010c1c  00020c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08010c20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00002a98  20000110  20000110  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002ba8  20002ba8  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029f05  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056ac  00000000  00000000  0005a045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0005f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00060e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029120  00000000  00000000  00062308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022eca  00000000  00000000  0008b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e034f  00000000  00000000  000ae2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018e641  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006760  00000000  00000000  0018e694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c960 	.word	0x0800c960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800c960 	.word	0x0800c960

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <MX_ADC1_Init+0x108>)
 800058c:	4a3d      	ldr	r2, [pc, #244]	; (8000684 <MX_ADC1_Init+0x10c>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <MX_ADC1_Init+0x108>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <MX_ADC1_Init+0x108>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059c:	4b38      	ldr	r3, [pc, #224]	; (8000680 <MX_ADC1_Init+0x108>)
 800059e:	2201      	movs	r2, #1
 80005a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a2:	4b37      	ldr	r3, [pc, #220]	; (8000680 <MX_ADC1_Init+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_ADC1_Init+0x108>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b8:	4a33      	ldr	r2, [pc, #204]	; (8000688 <MX_ADC1_Init+0x110>)
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <MX_ADC1_Init+0x108>)
 80005c4:	2205      	movs	r2, #5
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d6:	482a      	ldr	r0, [pc, #168]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d8:	f006 fd1a 	bl	8007010 <HAL_ADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f002 fbf1 	bl	8002dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	4822      	ldr	r0, [pc, #136]	; (8000680 <MX_ADC1_Init+0x108>)
 80005f8:	f006 fe7c 	bl	80072f4 <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000602:	f002 fbe1 	bl	8002dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000606:	2309      	movs	r3, #9
 8000608:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	481b      	ldr	r0, [pc, #108]	; (8000680 <MX_ADC1_Init+0x108>)
 8000614:	f006 fe6e 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800061e:	f002 fbd3 	bl	8002dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000622:	230a      	movs	r3, #10
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_ADC1_Init+0x108>)
 8000630:	f006 fe60 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800063a:	f002 fbc5 	bl	8002dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800063e:	230b      	movs	r3, #11
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x108>)
 800064c:	f006 fe52 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000656:	f002 fbb7 	bl	8002dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800065a:	230c      	movs	r3, #12
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800065e:	2305      	movs	r3, #5
 8000660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_ADC1_Init+0x108>)
 8000668:	f006 fe44 	bl	80072f4 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000672:	f002 fba9 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001b4 	.word	0x200001b4
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a3c      	ldr	r2, [pc, #240]	; (800079c <HAL_ADC_MspInit+0x110>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d171      	bne.n	8000792 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000702:	2307      	movs	r3, #7
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <HAL_ADC_MspInit+0x118>)
 8000716:	f007 fda1 	bl	800825c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <HAL_ADC_MspInit+0x11c>)
 800072e:	f007 fd95 	bl	800825c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x124>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800074c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000750:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000758:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000778:	f007 f96e 	bl	8007a58 <HAL_DMA_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000782:	f002 fb21 	bl	8002dc8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800078a:	639a      	str	r2, [r3, #56]	; 0x38
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40012000 	.word	0x40012000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	200001fc 	.word	0x200001fc
 80007b0:	40026410 	.word	0x40026410

080007b4 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b095      	sub	sp, #84	; 0x54
 80007b8:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f001 fc3a 	bl	8002034 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80007c0:	4bb0      	ldr	r3, [pc, #704]	; (8000a84 <setupAdvance+0x2d0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	b298      	uxth	r0, r3
 80007c6:	4bb0      	ldr	r3, [pc, #704]	; (8000a88 <setupAdvance+0x2d4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b299      	uxth	r1, r3
 80007cc:	4baf      	ldr	r3, [pc, #700]	; (8000a8c <setupAdvance+0x2d8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4baf      	ldr	r3, [pc, #700]	; (8000a90 <setupAdvance+0x2dc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4cae      	ldr	r4, [pc, #696]	; (8000a94 <setupAdvance+0x2e0>)
 80007da:	9400      	str	r4, [sp, #0]
 80007dc:	f001 fe34 	bl	8002448 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80007e0:	2300      	movs	r3, #0
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	2318      	movs	r3, #24
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	f248 4330 	movw	r3, #33840	; 0x8430
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f2:	4aa9      	ldr	r2, [pc, #676]	; (8000a98 <setupAdvance+0x2e4>)
 80007f4:	2137      	movs	r1, #55	; 0x37
 80007f6:	203c      	movs	r0, #60	; 0x3c
 80007f8:	f002 f800 	bl	80027fc <lcd_ShowStr>

	char str1[50] = " ID: ";
 80007fc:	4aa7      	ldr	r2, [pc, #668]	; (8000a9c <setupAdvance+0x2e8>)
 80007fe:	463b      	mov	r3, r7
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	8019      	strh	r1, [r3, #0]
 800080a:	1dbb      	adds	r3, r7, #6
 800080c:	222c      	movs	r2, #44	; 0x2c
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f00a fe59 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 8000816:	4ba2      	ldr	r3, [pc, #648]	; (8000aa0 <setupAdvance+0x2ec>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fb2c 	bl	8002e78 <convert2str>
 8000820:	4603      	mov	r3, r0
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8000824:	463b      	mov	r3, r7
 8000826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000828:	4618      	mov	r0, r3
 800082a:	f00a fef7 	bl	800b61c <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 800082e:	463a      	mov	r2, r7
 8000830:	2300      	movs	r3, #0
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2318      	movs	r3, #24
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	f248 4330 	movw	r3, #33840	; 0x8430
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000842:	2164      	movs	r1, #100	; 0x64
 8000844:	2000      	movs	r0, #0
 8000846:	f002 f83d 	bl	80028c4 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800084a:	2300      	movs	r3, #0
 800084c:	9302      	str	r3, [sp, #8]
 800084e:	2318      	movs	r3, #24
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	f248 4330 	movw	r3, #33840	; 0x8430
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085c:	4a91      	ldr	r2, [pc, #580]	; (8000aa4 <setupAdvance+0x2f0>)
 800085e:	2196      	movs	r1, #150	; 0x96
 8000860:	2000      	movs	r0, #0
 8000862:	f002 f82f 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000866:	2300      	movs	r3, #0
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2318      	movs	r3, #24
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000878:	4a8b      	ldr	r2, [pc, #556]	; (8000aa8 <setupAdvance+0x2f4>)
 800087a:	21d7      	movs	r1, #215	; 0xd7
 800087c:	2014      	movs	r0, #20
 800087e:	f001 ffbd 	bl	80027fc <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8000882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	23f0      	movs	r3, #240	; 0xf0
 800088a:	22c8      	movs	r2, #200	; 0xc8
 800088c:	21d2      	movs	r1, #210	; 0xd2
 800088e:	2096      	movs	r0, #150	; 0x96
 8000890:	f001 fcd3 	bl	800223a <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8000894:	4b85      	ldr	r3, [pc, #532]	; (8000aac <setupAdvance+0x2f8>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f002 faed 	bl	8002e78 <convert2str>
 800089e:	4603      	mov	r3, r0
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 80008a2:	4b82      	ldr	r3, [pc, #520]	; (8000aac <setupAdvance+0x2f8>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	2b77      	cmp	r3, #119	; 0x77
 80008a8:	d80e      	bhi.n	80008c8 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 80008aa:	2301      	movs	r3, #1
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2318      	movs	r3, #24
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	f248 4330 	movw	r3, #33840	; 0x8430
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008be:	21d4      	movs	r1, #212	; 0xd4
 80008c0:	20a5      	movs	r0, #165	; 0xa5
 80008c2:	f001 ff9b 	bl	80027fc <lcd_ShowStr>
 80008c6:	e00d      	b.n	80008e4 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 80008c8:	2301      	movs	r3, #1
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2318      	movs	r3, #24
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	f248 4330 	movw	r3, #33840	; 0x8430
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008dc:	21d4      	movs	r1, #212	; 0xd4
 80008de:	209d      	movs	r0, #157	; 0x9d
 80008e0:	f001 ff8c 	bl	80027fc <lcd_ShowStr>
	}

	if(TIMING < 120)
 80008e4:	4b71      	ldr	r3, [pc, #452]	; (8000aac <setupAdvance+0x2f8>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	2b77      	cmp	r3, #119	; 0x77
 80008ea:	d81a      	bhi.n	8000922 <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80008ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	23dc      	movs	r3, #220	; 0xdc
 80008f4:	22e1      	movs	r2, #225	; 0xe1
 80008f6:	21dc      	movs	r1, #220	; 0xdc
 80008f8:	20cd      	movs	r0, #205	; 0xcd
 80008fa:	f001 fc1a 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 80008fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	23d2      	movs	r3, #210	; 0xd2
 8000906:	22d7      	movs	r2, #215	; 0xd7
 8000908:	21dc      	movs	r1, #220	; 0xdc
 800090a:	20cd      	movs	r0, #205	; 0xcd
 800090c:	f001 fc11 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 8000910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	23d2      	movs	r3, #210	; 0xd2
 8000918:	22d7      	movs	r2, #215	; 0xd7
 800091a:	21dc      	movs	r1, #220	; 0xdc
 800091c:	20e1      	movs	r0, #225	; 0xe1
 800091e:	f001 fc08 	bl	8002132 <lcd_DrawLine>
	}
	if(TIMING > 30)
 8000922:	4b62      	ldr	r3, [pc, #392]	; (8000aac <setupAdvance+0x2f8>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b1e      	cmp	r3, #30
 8000928:	d91a      	bls.n	8000960 <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 800092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	23e6      	movs	r3, #230	; 0xe6
 8000932:	22e1      	movs	r2, #225	; 0xe1
 8000934:	21e6      	movs	r1, #230	; 0xe6
 8000936:	20cd      	movs	r0, #205	; 0xcd
 8000938:	f001 fbfb 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 800093c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	23f0      	movs	r3, #240	; 0xf0
 8000944:	22d7      	movs	r2, #215	; 0xd7
 8000946:	21e6      	movs	r1, #230	; 0xe6
 8000948:	20cd      	movs	r0, #205	; 0xcd
 800094a:	f001 fbf2 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800094e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	23f0      	movs	r3, #240	; 0xf0
 8000956:	22d7      	movs	r2, #215	; 0xd7
 8000958:	21e6      	movs	r1, #230	; 0xe6
 800095a:	20e1      	movs	r0, #225	; 0xe1
 800095c:	f001 fbe9 	bl	8002132 <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 8000960:	2300      	movs	r3, #0
 8000962:	9302      	str	r3, [sp, #8]
 8000964:	2318      	movs	r3, #24
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	f248 4330 	movw	r3, #33840	; 0x8430
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000972:	4a4f      	ldr	r2, [pc, #316]	; (8000ab0 <setupAdvance+0x2fc>)
 8000974:	f240 1109 	movw	r1, #265	; 0x109
 8000978:	2014      	movs	r0, #20
 800097a:	f001 ff3f 	bl	80027fc <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800097e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000988:	22c8      	movs	r2, #200	; 0xc8
 800098a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800098e:	2096      	movs	r0, #150	; 0x96
 8000990:	f001 fc53 	bl	800223a <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <setupAdvance+0x300>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fa6d 	bl	8002e78 <convert2str>
 800099e:	4603      	mov	r3, r0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <setupAdvance+0x300>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	2b09      	cmp	r3, #9
 80009a8:	d80f      	bhi.n	80009ca <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 80009aa:	2301      	movs	r3, #1
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	2318      	movs	r3, #24
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	f248 4330 	movw	r3, #33840	; 0x8430
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009be:	f240 1109 	movw	r1, #265	; 0x109
 80009c2:	20aa      	movs	r0, #170	; 0xaa
 80009c4:	f001 ff1a 	bl	80027fc <lcd_ShowStr>
 80009c8:	e00e      	b.n	80009e8 <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 80009ca:	2301      	movs	r3, #1
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	2318      	movs	r3, #24
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	f248 4330 	movw	r3, #33840	; 0x8430
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009de:	f240 1109 	movw	r1, #265	; 0x109
 80009e2:	20a5      	movs	r0, #165	; 0xa5
 80009e4:	f001 ff0a 	bl	80027fc <lcd_ShowStr>
	}

	if(WALL < 30)
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <setupAdvance+0x300>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	2b1d      	cmp	r3, #29
 80009ee:	d820      	bhi.n	8000a32 <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80009f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80009fa:	22e1      	movs	r2, #225	; 0xe1
 80009fc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a00:	20cd      	movs	r0, #205	; 0xcd
 8000a02:	f001 fb96 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 8000a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a10:	22d7      	movs	r2, #215	; 0xd7
 8000a12:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a16:	20cd      	movs	r0, #205	; 0xcd
 8000a18:	f001 fb8b 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 8000a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a26:	22d7      	movs	r2, #215	; 0xd7
 8000a28:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a2c:	20e1      	movs	r0, #225	; 0xe1
 8000a2e:	f001 fb80 	bl	8002132 <lcd_DrawLine>
	}
	if(WALL > 0)
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <setupAdvance+0x300>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d020      	beq.n	8000a7c <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 8000a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a44:	22e1      	movs	r2, #225	; 0xe1
 8000a46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a4a:	20cd      	movs	r0, #205	; 0xcd
 8000a4c:	f001 fb71 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a5a:	22d7      	movs	r2, #215	; 0xd7
 8000a5c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a60:	20cd      	movs	r0, #205	; 0xcd
 8000a62:	f001 fb66 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 8000a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a70:	22d7      	movs	r2, #215	; 0xd7
 8000a72:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a76:	20e1      	movs	r0, #225	; 0xe1
 8000a78:	f001 fb5b 	bl	8002132 <lcd_DrawLine>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3744      	adds	r7, #68	; 0x44
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	20000074 	.word	0x20000074
 8000a88:	20000078 	.word	0x20000078
 8000a8c:	2000007c 	.word	0x2000007c
 8000a90:	20000080 	.word	0x20000080
 8000a94:	0800fe74 	.word	0x0800fe74
 8000a98:	0800c978 	.word	0x0800c978
 8000a9c:	0800c9a8 	.word	0x0800c9a8
 8000aa0:	20000130 	.word	0x20000130
 8000aa4:	0800c988 	.word	0x0800c988
 8000aa8:	0800c998 	.word	0x0800c998
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	0800c9a0 	.word	0x0800c9a0
 8000ab4:	20000134 	.word	0x20000134

08000ab8 <initAdvanceMode>:

void initAdvanceMode()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <initAdvanceMode+0x94>)
 8000abe:	88db      	ldrh	r3, [r3, #6]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10e      	bne.n	8000ae2 <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <initAdvanceMode+0x98>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	331e      	adds	r3, #30
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <initAdvanceMode+0x98>)
 8000ace:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <initAdvanceMode+0x98>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	2b78      	cmp	r3, #120	; 0x78
 8000ad6:	d902      	bls.n	8000ade <initAdvanceMode+0x26>
		{
			TIMING = 120;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <initAdvanceMode+0x98>)
 8000ada:	2278      	movs	r2, #120	; 0x78
 8000adc:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000ade:	f7ff fe69 	bl	80007b4 <setupAdvance>
	}
	if(button_count[7] == 1)
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <initAdvanceMode+0x94>)
 8000ae4:	89db      	ldrh	r3, [r3, #14]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d10e      	bne.n	8000b08 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <initAdvanceMode+0x98>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	3b1e      	subs	r3, #30
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <initAdvanceMode+0x98>)
 8000af4:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <initAdvanceMode+0x98>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	2b1d      	cmp	r3, #29
 8000afc:	d802      	bhi.n	8000b04 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <initAdvanceMode+0x98>)
 8000b00:	221e      	movs	r2, #30
 8000b02:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000b04:	f7ff fe56 	bl	80007b4 <setupAdvance>
	}
	if(button_count[11] == 1)
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <initAdvanceMode+0x94>)
 8000b0a:	8adb      	ldrh	r3, [r3, #22]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10e      	bne.n	8000b2e <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <initAdvanceMode+0x9c>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	3305      	adds	r3, #5
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <initAdvanceMode+0x9c>)
 8000b1a:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <initAdvanceMode+0x9c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	2b1e      	cmp	r3, #30
 8000b22:	d902      	bls.n	8000b2a <initAdvanceMode+0x72>
		{
			WALL = 30;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <initAdvanceMode+0x9c>)
 8000b26:	221e      	movs	r2, #30
 8000b28:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000b2a:	f7ff fe43 	bl	80007b4 <setupAdvance>
	}
	if(button_count[15] == 1)
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <initAdvanceMode+0x94>)
 8000b30:	8bdb      	ldrh	r3, [r3, #30]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d107      	bne.n	8000b46 <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <initAdvanceMode+0x9c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	3b05      	subs	r3, #5
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <initAdvanceMode+0x9c>)
 8000b40:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000b42:	f7ff fe37 	bl	80007b4 <setupAdvance>
	}
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000268 	.word	0x20000268
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000134 	.word	0x20000134

08000b58 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
	for (int i= 0; i < 6; i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e007      	b.n	8000b74 <button_init+0x1c>
	{
		buttonForSnake[i]= 0;
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <button_init+0x30>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i= 0; i < 6; i++)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	ddf4      	ble.n	8000b64 <button_init+0xc>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	2000025c 	.word	0x2000025c

08000b8c <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
//	for (int i= 0; i < 16; i++)
//	{
//		button_count[i]= 0;
//	}
	 for (int i= 0; i < 4; i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	e1b3      	b.n	8000f00 <button_Scan+0x374>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	f200 81ac 	bhi.w	8000ef8 <button_Scan+0x36c>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <button_Scan+0x1c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bb9 	.word	0x08000bb9
 8000bac:	08000c71 	.word	0x08000c71
 8000bb0:	08000d35 	.word	0x08000d35
 8000bb4:	08000e25 	.word	0x08000e25
	 {
	 	switch (i)
	 	{
	 		case 0:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4894      	ldr	r0, [pc, #592]	; (8000e10 <button_Scan+0x284>)
 8000bbe:	f007 fd01 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4892      	ldr	r0, [pc, #584]	; (8000e10 <button_Scan+0x284>)
 8000bc8:	f007 fcfc 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2108      	movs	r1, #8
 8000bd0:	4890      	ldr	r0, [pc, #576]	; (8000e14 <button_Scan+0x288>)
 8000bd2:	f007 fcf7 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bdc:	488e      	ldr	r0, [pc, #568]	; (8000e18 <button_Scan+0x28c>)
 8000bde:	f007 fcf1 	bl	80085c4 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be6:	488c      	ldr	r0, [pc, #560]	; (8000e18 <button_Scan+0x28c>)
 8000be8:	f007 fcd4 	bl	8008594 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <button_Scan+0x74>
	 				button_count[0]+= 1;
 8000bf2:	4b8a      	ldr	r3, [pc, #552]	; (8000e1c <button_Scan+0x290>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <button_Scan+0x290>)
 8000bfc:	801a      	strh	r2, [r3, #0]
	 						else
	 							button_count[3]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000bfe:	e17c      	b.n	8000efa <button_Scan+0x36e>
	 				button_count[0]= 0;
 8000c00:	4b86      	ldr	r3, [pc, #536]	; (8000e1c <button_Scan+0x290>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	801a      	strh	r2, [r3, #0]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	4883      	ldr	r0, [pc, #524]	; (8000e18 <button_Scan+0x28c>)
 8000c0c:	f007 fcc2 	bl	8008594 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d106      	bne.n	8000c24 <button_Scan+0x98>
	 					button_count[1]+= 1;
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <button_Scan+0x290>)
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b7f      	ldr	r3, [pc, #508]	; (8000e1c <button_Scan+0x290>)
 8000c20:	805a      	strh	r2, [r3, #2]
	 			break;
 8000c22:	e16a      	b.n	8000efa <button_Scan+0x36e>
	 					button_count[1]= 0;
 8000c24:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <button_Scan+0x290>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	805a      	strh	r2, [r3, #2]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4879      	ldr	r0, [pc, #484]	; (8000e14 <button_Scan+0x288>)
 8000c2e:	f007 fcb1 	bl	8008594 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <button_Scan+0xba>
	 						button_count[2]+= 1;
 8000c38:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <button_Scan+0x290>)
 8000c3a:	889b      	ldrh	r3, [r3, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b76      	ldr	r3, [pc, #472]	; (8000e1c <button_Scan+0x290>)
 8000c42:	809a      	strh	r2, [r3, #4]
	 			break;
 8000c44:	e159      	b.n	8000efa <button_Scan+0x36e>
	 						button_count[2]= 0;
 8000c46:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <button_Scan+0x290>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	809a      	strh	r2, [r3, #4]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	4871      	ldr	r0, [pc, #452]	; (8000e14 <button_Scan+0x288>)
 8000c50:	f007 fca0 	bl	8008594 <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <button_Scan+0xdc>
	 							button_count[3]+= 1;
 8000c5a:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <button_Scan+0x290>)
 8000c5c:	88db      	ldrh	r3, [r3, #6]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <button_Scan+0x290>)
 8000c64:	80da      	strh	r2, [r3, #6]
	 			break;
 8000c66:	e148      	b.n	8000efa <button_Scan+0x36e>
	 							button_count[3]= 0;
 8000c68:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <button_Scan+0x290>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	80da      	strh	r2, [r3, #6]
	 			break;
 8000c6e:	e144      	b.n	8000efa <button_Scan+0x36e>
	 		case 1:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2120      	movs	r1, #32
 8000c74:	4866      	ldr	r0, [pc, #408]	; (8000e10 <button_Scan+0x284>)
 8000c76:	f007 fca5 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4864      	ldr	r0, [pc, #400]	; (8000e10 <button_Scan+0x284>)
 8000c80:	f007 fca0 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2108      	movs	r1, #8
 8000c88:	4862      	ldr	r0, [pc, #392]	; (8000e14 <button_Scan+0x288>)
 8000c8a:	f007 fc9b 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c94:	4860      	ldr	r0, [pc, #384]	; (8000e18 <button_Scan+0x28c>)
 8000c96:	f007 fc95 	bl	80085c4 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9e:	485e      	ldr	r0, [pc, #376]	; (8000e18 <button_Scan+0x28c>)
 8000ca0:	f007 fc78 	bl	8008594 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d106      	bne.n	8000cb8 <button_Scan+0x12c>
	 				button_count[4]+= 1;
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <button_Scan+0x290>)
 8000cac:	891b      	ldrh	r3, [r3, #8]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <button_Scan+0x290>)
 8000cb4:	811a      	strh	r2, [r3, #8]
	 						else
	 							button_count[7]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000cb6:	e120      	b.n	8000efa <button_Scan+0x36e>
	 				button_count[4]= 0;
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <button_Scan+0x290>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	811a      	strh	r2, [r3, #8]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	4855      	ldr	r0, [pc, #340]	; (8000e18 <button_Scan+0x28c>)
 8000cc4:	f007 fc66 	bl	8008594 <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10c      	bne.n	8000ce8 <button_Scan+0x15c>
	 					button_count[5]+= 1;
 8000cce:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <button_Scan+0x290>)
 8000cd0:	895b      	ldrh	r3, [r3, #10]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <button_Scan+0x290>)
 8000cd8:	815a      	strh	r2, [r3, #10]
	 					buttonForSnake[0]+= 1;
 8000cda:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <button_Scan+0x294>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <button_Scan+0x294>)
 8000ce4:	801a      	strh	r2, [r3, #0]
	 			break;
 8000ce6:	e108      	b.n	8000efa <button_Scan+0x36e>
	 					button_count[5]= 0;
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <button_Scan+0x290>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	815a      	strh	r2, [r3, #10]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	4848      	ldr	r0, [pc, #288]	; (8000e14 <button_Scan+0x288>)
 8000cf2:	f007 fc4f 	bl	8008594 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <button_Scan+0x17e>
	 						button_count[6]+= 1;
 8000cfc:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <button_Scan+0x290>)
 8000cfe:	899b      	ldrh	r3, [r3, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <button_Scan+0x290>)
 8000d06:	819a      	strh	r2, [r3, #12]
	 			break;
 8000d08:	e0f7      	b.n	8000efa <button_Scan+0x36e>
	 						button_count[6]= 0;
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <button_Scan+0x290>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	819a      	strh	r2, [r3, #12]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	4840      	ldr	r0, [pc, #256]	; (8000e14 <button_Scan+0x288>)
 8000d14:	f007 fc3e 	bl	8008594 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <button_Scan+0x1a0>
	 							button_count[7]+= 1;
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <button_Scan+0x290>)
 8000d20:	89db      	ldrh	r3, [r3, #14]
 8000d22:	3301      	adds	r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <button_Scan+0x290>)
 8000d28:	81da      	strh	r2, [r3, #14]
	 			break;
 8000d2a:	e0e6      	b.n	8000efa <button_Scan+0x36e>
	 							button_count[7]= 0;
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <button_Scan+0x290>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	81da      	strh	r2, [r3, #14]
	 			break;
 8000d32:	e0e2      	b.n	8000efa <button_Scan+0x36e>
	 		case 2:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2120      	movs	r1, #32
 8000d38:	4835      	ldr	r0, [pc, #212]	; (8000e10 <button_Scan+0x284>)
 8000d3a:	f007 fc43 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <button_Scan+0x284>)
 8000d44:	f007 fc3e 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4831      	ldr	r0, [pc, #196]	; (8000e14 <button_Scan+0x288>)
 8000d4e:	f007 fc39 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d58:	482f      	ldr	r0, [pc, #188]	; (8000e18 <button_Scan+0x28c>)
 8000d5a:	f007 fc33 	bl	80085c4 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	482d      	ldr	r0, [pc, #180]	; (8000e18 <button_Scan+0x28c>)
 8000d64:	f007 fc16 	bl	8008594 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <button_Scan+0x1fc>
	 			{
	 				button_count[8]+= 1;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <button_Scan+0x290>)
 8000d70:	8a1b      	ldrh	r3, [r3, #16]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <button_Scan+0x290>)
 8000d78:	821a      	strh	r2, [r3, #16]
	 				buttonForSnake[1]+= 1;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <button_Scan+0x294>)
 8000d7c:	885b      	ldrh	r3, [r3, #2]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <button_Scan+0x294>)
 8000d84:	805a      	strh	r2, [r3, #2]
	 						else
	 							button_count[11]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000d86:	e0b8      	b.n	8000efa <button_Scan+0x36e>
	 				button_count[8]= 0;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <button_Scan+0x290>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	821a      	strh	r2, [r3, #16]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	4821      	ldr	r0, [pc, #132]	; (8000e18 <button_Scan+0x28c>)
 8000d94:	f007 fbfe 	bl	8008594 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10c      	bne.n	8000db8 <button_Scan+0x22c>
	 					button_count[9]+= 1;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <button_Scan+0x290>)
 8000da0:	8a5b      	ldrh	r3, [r3, #18]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <button_Scan+0x290>)
 8000da8:	825a      	strh	r2, [r3, #18]
	 					buttonForSnake[2]+= 1;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <button_Scan+0x294>)
 8000dac:	889b      	ldrh	r3, [r3, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <button_Scan+0x294>)
 8000db4:	809a      	strh	r2, [r3, #4]
	 			break;
 8000db6:	e0a0      	b.n	8000efa <button_Scan+0x36e>
	 					button_count[9]= 0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <button_Scan+0x290>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	825a      	strh	r2, [r3, #18]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	4814      	ldr	r0, [pc, #80]	; (8000e14 <button_Scan+0x288>)
 8000dc2:	f007 fbe7 	bl	8008594 <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10c      	bne.n	8000de6 <button_Scan+0x25a>
	 						button_count[10]+= 1;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <button_Scan+0x290>)
 8000dce:	8a9b      	ldrh	r3, [r3, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <button_Scan+0x290>)
 8000dd6:	829a      	strh	r2, [r3, #20]
	 						buttonForSnake[3]+= 1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <button_Scan+0x294>)
 8000dda:	88db      	ldrh	r3, [r3, #6]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <button_Scan+0x294>)
 8000de2:	80da      	strh	r2, [r3, #6]
	 			break;
 8000de4:	e089      	b.n	8000efa <button_Scan+0x36e>
	 						button_count[10]= 0;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <button_Scan+0x290>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	829a      	strh	r2, [r3, #20]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <button_Scan+0x288>)
 8000df0:	f007 fbd0 	bl	8008594 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d106      	bne.n	8000e08 <button_Scan+0x27c>
	 							button_count[11]+= 1;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <button_Scan+0x290>)
 8000dfc:	8adb      	ldrh	r3, [r3, #22]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <button_Scan+0x290>)
 8000e04:	82da      	strh	r2, [r3, #22]
	 			break;
 8000e06:	e078      	b.n	8000efa <button_Scan+0x36e>
	 							button_count[11]= 0;
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <button_Scan+0x290>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	82da      	strh	r2, [r3, #22]
	 			break;
 8000e0e:	e074      	b.n	8000efa <button_Scan+0x36e>
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	20000268 	.word	0x20000268
 8000e20:	2000025c 	.word	0x2000025c
	 		case 3:
	 			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2120      	movs	r1, #32
 8000e28:	483a      	ldr	r0, [pc, #232]	; (8000f14 <button_Scan+0x388>)
 8000e2a:	f007 fbcb 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	4838      	ldr	r0, [pc, #224]	; (8000f14 <button_Scan+0x388>)
 8000e34:	f007 fbc6 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	4836      	ldr	r0, [pc, #216]	; (8000f18 <button_Scan+0x38c>)
 8000e3e:	f007 fbc1 	bl	80085c4 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e48:	4834      	ldr	r0, [pc, #208]	; (8000f1c <button_Scan+0x390>)
 8000e4a:	f007 fbbb 	bl	80085c4 <HAL_GPIO_WritePin>
	 			if (HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin)== 0)
 8000e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e52:	4832      	ldr	r0, [pc, #200]	; (8000f1c <button_Scan+0x390>)
 8000e54:	f007 fb9e 	bl	8008594 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <button_Scan+0x2ec>
	 			{
	 				button_count[12]+= 1;
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <button_Scan+0x394>)
 8000e60:	8b1b      	ldrh	r3, [r3, #24]
 8000e62:	3301      	adds	r3, #1
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <button_Scan+0x394>)
 8000e68:	831a      	strh	r2, [r3, #24]
	 				buttonForSnake[4]+= 1;
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <button_Scan+0x398>)
 8000e6c:	891b      	ldrh	r3, [r3, #8]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <button_Scan+0x398>)
 8000e74:	811a      	strh	r2, [r3, #8]
							else
								button_count[15]= 0;
	 					}
	 				}
	 			}
	 			break;
 8000e76:	e040      	b.n	8000efa <button_Scan+0x36e>
	 				button_count[12]= 0;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <button_Scan+0x394>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	831a      	strh	r2, [r3, #24]
	 				if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)== 0)
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	4826      	ldr	r0, [pc, #152]	; (8000f1c <button_Scan+0x390>)
 8000e84:	f007 fb86 	bl	8008594 <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10c      	bne.n	8000ea8 <button_Scan+0x31c>
	 					button_count[13]+= 1;
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <button_Scan+0x394>)
 8000e90:	8b5b      	ldrh	r3, [r3, #26]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <button_Scan+0x394>)
 8000e98:	835a      	strh	r2, [r3, #26]
	 					buttonForSnake[5]+= 1;
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <button_Scan+0x398>)
 8000e9c:	895b      	ldrh	r3, [r3, #10]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <button_Scan+0x398>)
 8000ea4:	815a      	strh	r2, [r3, #10]
	 			break;
 8000ea6:	e028      	b.n	8000efa <button_Scan+0x36e>
	 					button_count[13]= 0;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <button_Scan+0x394>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	835a      	strh	r2, [r3, #26]
	 					if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)== 0)
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <button_Scan+0x38c>)
 8000eb2:	f007 fb6f 	bl	8008594 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <button_Scan+0x342>
	 						button_count[14]+= 1;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <button_Scan+0x394>)
 8000ebe:	8b9b      	ldrh	r3, [r3, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <button_Scan+0x394>)
 8000ec6:	839a      	strh	r2, [r3, #28]
							button_init();
 8000ec8:	f7ff fe46 	bl	8000b58 <button_init>
	 			break;
 8000ecc:	e015      	b.n	8000efa <button_Scan+0x36e>
	 						button_count[14]= 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <button_Scan+0x394>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	839a      	strh	r2, [r3, #28]
	 						if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)== 0)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <button_Scan+0x38c>)
 8000ed8:	f007 fb5c 	bl	8008594 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d106      	bne.n	8000ef0 <button_Scan+0x364>
	 							button_count[15]+= 1;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <button_Scan+0x394>)
 8000ee4:	8bdb      	ldrh	r3, [r3, #30]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <button_Scan+0x394>)
 8000eec:	83da      	strh	r2, [r3, #30]
	 			break;
 8000eee:	e004      	b.n	8000efa <button_Scan+0x36e>
								button_count[15]= 0;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <button_Scan+0x394>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	83da      	strh	r2, [r3, #30]
	 			break;
 8000ef6:	e000      	b.n	8000efa <button_Scan+0x36e>
	 		default:
	 			break;
 8000ef8:	bf00      	nop
	 for (int i= 0; i < 4; i++)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3301      	adds	r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	f77f ae48 	ble.w	8000b98 <button_Scan+0xc>
//					break;
//				}
//		  }
//		  mask = mask >> 1;
//	  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	20000268 	.word	0x20000268
 8000f24:	2000025c 	.word	0x2000025c

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_DMA_Init+0x3c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <MX_DMA_Init+0x3c>)
 8000f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_DMA_Init+0x3c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2038      	movs	r0, #56	; 0x38
 8000f50:	f006 fd4b 	bl	80079ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f54:	2038      	movs	r0, #56	; 0x38
 8000f56:	f006 fd64 	bl	8007a22 <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <showNotifyExit+0xbc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3305      	adds	r3, #5
 8000f76:	b299      	uxth	r1, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <showNotifyExit+0xc0>)
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f001 fc9a 	bl	80028c4 <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <showNotifyExit+0xbc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3314      	adds	r3, #20
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000faa:	4a20      	ldr	r2, [pc, #128]	; (800102c <showNotifyExit+0xc4>)
 8000fac:	2000      	movs	r0, #0
 8000fae:	f001 fc89 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <showNotifyExit+0xc8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3308      	adds	r3, #8
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <showNotifyExit+0xbc>)
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <showNotifyExit+0xbc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	0fda      	lsrs	r2, r3, #31
 8000fc8:	4413      	add	r3, r2
 8000fca:	105b      	asrs	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b14      	subs	r3, #20
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f248 4330 	movw	r3, #33840	; 0x8430
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <showNotifyExit+0xcc>)
 8000fe4:	f001 fc0a 	bl	80027fc <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <showNotifyExit+0xc8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3308      	adds	r3, #8
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <showNotifyExit+0xbc>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <showNotifyExit+0xbc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	0fda      	lsrs	r2, r3, #31
 8000ffe:	4413      	add	r3, r2
 8001000:	105b      	asrs	r3, r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	3319      	adds	r3, #25
 8001006:	b299      	uxth	r1, r3
 8001008:	2301      	movs	r3, #1
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2310      	movs	r3, #16
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	f248 4330 	movw	r3, #33840	; 0x8430
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <showNotifyExit+0xd0>)
 800101a:	f001 fbef 	bl	80027fc <lcd_ShowStr>
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000004c 	.word	0x2000004c
 8001028:	0800c9dc 	.word	0x0800c9dc
 800102c:	0800c9e8 	.word	0x0800c9e8
 8001030:	2000003c 	.word	0x2000003c
 8001034:	0800c9f4 	.word	0x0800c9f4
 8001038:	0800c9f8 	.word	0x0800c9f8

0800103c <drawArrowExit>:

void drawArrowExit()
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b087      	sub	sp, #28
 8001040:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8001042:	4b58      	ldr	r3, [pc, #352]	; (80011a4 <drawArrowExit+0x168>)
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <drawArrowExit+0x168>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	0fda      	lsrs	r2, r3, #31
 800104e:	4413      	add	r3, r2
 8001050:	105b      	asrs	r3, r3, #1
 8001052:	3b08      	subs	r3, #8
 8001054:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8001056:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <drawArrowExit+0x168>)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <drawArrowExit+0x168>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	0fda      	lsrs	r2, r3, #31
 8001062:	4413      	add	r3, r2
 8001064:	105b      	asrs	r3, r3, #1
 8001066:	331c      	adds	r3, #28
 8001068:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 800106a:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <drawArrowExit+0x16c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d003      	beq.n	800107a <drawArrowExit+0x3e>
 8001072:	2b04      	cmp	r3, #4
 8001074:	f000 80a2 	beq.w	80011bc <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8001078:	e135      	b.n	80012e6 <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 800107a:	4b4c      	ldr	r3, [pc, #304]	; (80011ac <drawArrowExit+0x170>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <drawArrowExit+0x174>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b298      	uxth	r0, r3
 800108a:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <drawArrowExit+0x168>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	3323      	adds	r3, #35	; 0x23
 8001092:	b299      	uxth	r1, r3
 8001094:	4b45      	ldr	r3, [pc, #276]	; (80011ac <drawArrowExit+0x170>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <drawArrowExit+0x174>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <drawArrowExit+0x168>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	3b05      	subs	r3, #5
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f248 4430 	movw	r4, #33840	; 0x8430
 80010b2:	9400      	str	r4, [sp, #0]
 80010b4:	f000 fff0 	bl	8002098 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 80010b8:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <drawArrowExit+0x170>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	3308      	adds	r3, #8
 80010c0:	b298      	uxth	r0, r3
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <drawArrowExit+0x168>)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <drawArrowExit+0x168>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	0fda      	lsrs	r2, r3, #31
 80010ce:	4413      	add	r3, r2
 80010d0:	105b      	asrs	r3, r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3b0f      	subs	r3, #15
 80010d6:	b299      	uxth	r1, r3
 80010d8:	2301      	movs	r3, #1
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2310      	movs	r3, #16
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010ea:	4a32      	ldr	r2, [pc, #200]	; (80011b4 <drawArrowExit+0x178>)
 80010ec:	f001 fb86 	bl	80027fc <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <drawArrowExit+0x170>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3308      	adds	r3, #8
 80010f8:	b298      	uxth	r0, r3
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <drawArrowExit+0x168>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <drawArrowExit+0x168>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	0fda      	lsrs	r2, r3, #31
 8001106:	4413      	add	r3, r2
 8001108:	105b      	asrs	r3, r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	3314      	adds	r3, #20
 800110e:	b299      	uxth	r1, r3
 8001110:	2301      	movs	r3, #1
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2310      	movs	r3, #16
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f248 4330 	movw	r3, #33840	; 0x8430
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <drawArrowExit+0x17c>)
 8001122:	f001 fb6b 	bl	80027fc <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <drawArrowExit+0x170>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	b29b      	uxth	r3, r3
 800112c:	3b0f      	subs	r3, #15
 800112e:	b298      	uxth	r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	b299      	uxth	r1, r3
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <drawArrowExit+0x170>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	b29b      	uxth	r3, r3
 800113a:	3b0a      	subs	r3, #10
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	b29b      	uxth	r3, r3
 8001142:	3b05      	subs	r3, #5
 8001144:	b29b      	uxth	r3, r3
 8001146:	2400      	movs	r4, #0
 8001148:	9400      	str	r4, [sp, #0]
 800114a:	f000 fff2 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <drawArrowExit+0x170>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	b29b      	uxth	r3, r3
 8001154:	3b0f      	subs	r3, #15
 8001156:	b298      	uxth	r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	b299      	uxth	r1, r3
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <drawArrowExit+0x170>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b0a      	subs	r3, #10
 8001164:	b29a      	uxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	b29b      	uxth	r3, r3
 800116a:	3305      	adds	r3, #5
 800116c:	b29b      	uxth	r3, r3
 800116e:	2400      	movs	r4, #0
 8001170:	9400      	str	r4, [sp, #0]
 8001172:	f000 ffde 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <drawArrowExit+0x170>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	b29b      	uxth	r3, r3
 800117c:	3b0a      	subs	r3, #10
 800117e:	b298      	uxth	r0, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b05      	subs	r3, #5
 8001186:	b299      	uxth	r1, r3
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <drawArrowExit+0x170>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b0a      	subs	r3, #10
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	b29b      	uxth	r3, r3
 8001196:	3305      	adds	r3, #5
 8001198:	b29b      	uxth	r3, r3
 800119a:	2400      	movs	r4, #0
 800119c:	9400      	str	r4, [sp, #0]
 800119e:	f000 ffc8 	bl	8002132 <lcd_DrawLine>
		break;
 80011a2:	e0a0      	b.n	80012e6 <drawArrowExit+0x2aa>
 80011a4:	2000004c 	.word	0x2000004c
 80011a8:	20000060 	.word	0x20000060
 80011ac:	2000003c 	.word	0x2000003c
 80011b0:	20000038 	.word	0x20000038
 80011b4:	0800c9f4 	.word	0x0800c9f4
 80011b8:	0800c9f8 	.word	0x0800c9f8
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 80011bc:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <drawArrowExit+0x2b4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <drawArrowExit+0x2b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b298      	uxth	r0, r3
 80011cc:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <drawArrowExit+0x2bc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3323      	adds	r3, #35	; 0x23
 80011d4:	b299      	uxth	r1, r3
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <drawArrowExit+0x2b4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <drawArrowExit+0x2b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <drawArrowExit+0x2bc>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b05      	subs	r3, #5
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f248 4430 	movw	r4, #33840	; 0x8430
 80011f4:	9400      	str	r4, [sp, #0]
 80011f6:	f000 ff4f 	bl	8002098 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <drawArrowExit+0x2b4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	3308      	adds	r3, #8
 8001202:	b298      	uxth	r0, r3
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <drawArrowExit+0x2bc>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <drawArrowExit+0x2bc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	0fda      	lsrs	r2, r3, #31
 8001210:	4413      	add	r3, r2
 8001212:	105b      	asrs	r3, r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	3b0f      	subs	r3, #15
 8001218:	b299      	uxth	r1, r3
 800121a:	2301      	movs	r3, #1
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2310      	movs	r3, #16
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	f248 4330 	movw	r3, #33840	; 0x8430
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	4a34      	ldr	r2, [pc, #208]	; (80012fc <drawArrowExit+0x2c0>)
 800122c:	f001 fae6 	bl	80027fc <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <drawArrowExit+0x2b4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	3308      	adds	r3, #8
 8001238:	b298      	uxth	r0, r3
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <drawArrowExit+0x2bc>)
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <drawArrowExit+0x2bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	0fda      	lsrs	r2, r3, #31
 8001246:	4413      	add	r3, r2
 8001248:	105b      	asrs	r3, r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	3314      	adds	r3, #20
 800124e:	b299      	uxth	r1, r3
 8001250:	2301      	movs	r3, #1
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2310      	movs	r3, #16
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f248 4330 	movw	r3, #33840	; 0x8430
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001262:	4a27      	ldr	r2, [pc, #156]	; (8001300 <drawArrowExit+0x2c4>)
 8001264:	f001 faca 	bl	80027fc <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <drawArrowExit+0x2b4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	b29b      	uxth	r3, r3
 800126e:	3b0f      	subs	r3, #15
 8001270:	b298      	uxth	r0, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b299      	uxth	r1, r3
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <drawArrowExit+0x2b4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b0a      	subs	r3, #10
 800127e:	b29a      	uxth	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b05      	subs	r3, #5
 8001286:	b29b      	uxth	r3, r3
 8001288:	2400      	movs	r4, #0
 800128a:	9400      	str	r4, [sp, #0]
 800128c:	f000 ff51 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <drawArrowExit+0x2b4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b0f      	subs	r3, #15
 8001298:	b298      	uxth	r0, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b299      	uxth	r1, r3
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <drawArrowExit+0x2b4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b0a      	subs	r3, #10
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3305      	adds	r3, #5
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2400      	movs	r4, #0
 80012b2:	9400      	str	r4, [sp, #0]
 80012b4:	f000 ff3d 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <drawArrowExit+0x2b4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3b0a      	subs	r3, #10
 80012c0:	b298      	uxth	r0, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b05      	subs	r3, #5
 80012c8:	b299      	uxth	r1, r3
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <drawArrowExit+0x2b4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3b0a      	subs	r3, #10
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3305      	adds	r3, #5
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2400      	movs	r4, #0
 80012de:	9400      	str	r4, [sp, #0]
 80012e0:	f000 ff27 	bl	8002132 <lcd_DrawLine>
		break;
 80012e4:	bf00      	nop
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000003c 	.word	0x2000003c
 80012f4:	20000038 	.word	0x20000038
 80012f8:	2000004c 	.word	0x2000004c
 80012fc:	0800c9f4 	.word	0x0800c9f4
 8001300:	0800c9f8 	.word	0x0800c9f8

08001304 <gameExitUI>:

void gameExitUI()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	showWallnotify();
 8001308:	f000 f91e 	bl	8001548 <showWallnotify>
	showNotifyExit();
 800130c:	f7ff fe2c 	bl	8000f68 <showNotifyExit>
	drawArrowExit();
 8001310:	f7ff fe94 	bl	800103c <drawArrowExit>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <askToExit>:

void askToExit()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <askToExit+0x74>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b0a      	cmp	r3, #10
 8001322:	d131      	bne.n	8001388 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <askToExit+0x78>)
 8001326:	88db      	ldrh	r3, [r3, #6]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10c      	bne.n	8001346 <askToExit+0x2e>
		{
			flagExit = 1;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <askToExit+0x7c>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <askToExit+0x80>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d023      	beq.n	8001382 <askToExit+0x6a>
 800133a:	2b04      	cmp	r3, #4
 800133c:	d104      	bne.n	8001348 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <askToExit+0x80>)
 8001340:	2203      	movs	r2, #3
 8001342:	601a      	str	r2, [r3, #0]
				break;
 8001344:	e000      	b.n	8001348 <askToExit+0x30>
			}
		}
 8001346:	bf00      	nop
		if(button_count[7] == 1)
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <askToExit+0x78>)
 800134a:	89db      	ldrh	r3, [r3, #14]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10d      	bne.n	800136c <askToExit+0x54>
		{
			flagExit = 1;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <askToExit+0x7c>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <askToExit+0x80>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d002      	beq.n	8001364 <askToExit+0x4c>
 800135e:	2b04      	cmp	r3, #4
 8001360:	d011      	beq.n	8001386 <askToExit+0x6e>
 8001362:	e004      	b.n	800136e <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <askToExit+0x80>)
 8001366:	2204      	movs	r2, #4
 8001368:	601a      	str	r2, [r3, #0]
				break;
 800136a:	e000      	b.n	800136e <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 800136c:	bf00      	nop
		if(flagExit == 1)
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <askToExit+0x7c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d108      	bne.n	8001388 <askToExit+0x70>
		{
			gameExitUI();
 8001376:	f7ff ffc5 	bl	8001304 <gameExitUI>
			flagExit = 0;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <askToExit+0x7c>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e002      	b.n	8001388 <askToExit+0x70>
				return;
 8001382:	bf00      	nop
 8001384:	e000      	b.n	8001388 <askToExit+0x70>
				return;
 8001386:	bf00      	nop
		}
	}
}
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000144 	.word	0x20000144
 8001390:	20000268 	.word	0x20000268
 8001394:	20000154 	.word	0x20000154
 8001398:	20000060 	.word	0x20000060

0800139c <initExit>:

void initExit()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	gameExitUI();
 80013a0:	f7ff ffb0 	bl	8001304 <gameExitUI>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	; 0x38
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <MX_FSMC_Init+0xec>)
 80013d6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_FSMC_Init+0xec>)
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <MX_FSMC_Init+0xf0>)
 80013e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <MX_FSMC_Init+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_FSMC_Init+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <MX_FSMC_Init+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <MX_FSMC_Init+0xec>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <MX_FSMC_Init+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <MX_FSMC_Init+0xec>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_FSMC_Init+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_FSMC_Init+0xec>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_FSMC_Init+0xec>)
 8001414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_FSMC_Init+0xec>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_FSMC_Init+0xec>)
 8001422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_FSMC_Init+0xec>)
 800142a:	2200      	movs	r2, #0
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_FSMC_Init+0xec>)
 8001430:	2200      	movs	r2, #0
 8001432:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_FSMC_Init+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800143a:	230f      	movs	r3, #15
 800143c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800143e:	230f      	movs	r3, #15
 8001440:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001442:	233c      	movs	r3, #60	; 0x3c
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800144a:	2310      	movs	r3, #16
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800144e:	2311      	movs	r3, #17
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001456:	2308      	movs	r3, #8
 8001458:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800145a:	230f      	movs	r3, #15
 800145c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800145e:	2309      	movs	r3, #9
 8001460:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001466:	2310      	movs	r3, #16
 8001468:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800146a:	2311      	movs	r3, #17
 800146c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001472:	463a      	mov	r2, r7
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_FSMC_Init+0xec>)
 800147c:	f007 ffc0 	bl	8009400 <HAL_SRAM_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001486:	f001 fc9f 	bl	8002dc8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800148a:	bf00      	nop
 800148c:	3738      	adds	r7, #56	; 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000288 	.word	0x20000288
 8001498:	a0000104 	.word	0xa0000104

0800149c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_FSMC_MspInit+0x88>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d131      	bne.n	800151c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_FSMC_MspInit+0x88>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_FSMC_MspInit+0x8c>)
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	4a18      	ldr	r2, [pc, #96]	; (8001528 <HAL_FSMC_MspInit+0x8c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_FSMC_MspInit+0x8c>)
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014da:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014ec:	230c      	movs	r3, #12
 80014ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <HAL_FSMC_MspInit+0x90>)
 80014f6:	f006 feb1 	bl	800825c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014fa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800150c:	230c      	movs	r3, #12
 800150e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_FSMC_MspInit+0x94>)
 8001516:	f006 fea1 	bl	800825c <HAL_GPIO_Init>
 800151a:	e000      	b.n	800151e <HAL_FSMC_MspInit+0x82>
    return;
 800151c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000012c 	.word	0x2000012c
 8001528:	40023800 	.word	0x40023800
 800152c:	40021000 	.word	0x40021000
 8001530:	40020c00 	.word	0x40020c00

08001534 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800153c:	f7ff ffae 	bl	800149c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <showWallnotify>:
#include "button.h"
#include "picture.h"
#include "uart.h"

void showWallnotify()
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <showWallnotify+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b298      	uxth	r0, r3
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <showWallnotify+0xec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b299      	uxth	r1, r3
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <showWallnotify+0xe8>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	b29c      	uxth	r4, r3
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <showWallnotify+0xec>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <showWallnotify+0xf0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	f248 4230 	movw	r2, #33840	; 0x8430
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	4622      	mov	r2, r4
 8001578:	f000 fd8e 	bl	8002098 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <showWallnotify+0xe8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b298      	uxth	r0, r3
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <showWallnotify+0xec>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b299      	uxth	r1, r3
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <showWallnotify+0xe8>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	b29c      	uxth	r4, r3
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <showWallnotify+0xec>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <showWallnotify+0xf0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4413      	add	r3, r2
 800159c:	b29b      	uxth	r3, r3
 800159e:	2200      	movs	r2, #0
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	4622      	mov	r2, r4
 80015a4:	f000 fd78 	bl	8002098 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <showWallnotify+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b298      	uxth	r0, r3
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <showWallnotify+0xec>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b299      	uxth	r1, r3
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <showWallnotify+0xe8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <showWallnotify+0xf0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <showWallnotify+0xec>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2400      	movs	r4, #0
 80015cc:	9400      	str	r4, [sp, #0]
 80015ce:	f000 fd63 	bl	8002098 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <showWallnotify+0xe8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <showWallnotify+0xf0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b298      	uxth	r0, r3
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <showWallnotify+0xec>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <showWallnotify+0xe8>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <showWallnotify+0xec>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	2400      	movs	r4, #0
 80015f6:	9400      	str	r4, [sp, #0]
 80015f8:	f000 fd4e 	bl	8002098 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <showWallnotify+0xe8>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	b298      	uxth	r0, r3
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <showWallnotify+0xec>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <showWallnotify+0xf0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b299      	uxth	r1, r3
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <showWallnotify+0xe8>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <showWallnotify+0xec>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	b29b      	uxth	r3, r3
 800161e:	2400      	movs	r4, #0
 8001620:	9400      	str	r4, [sp, #0]
 8001622:	f000 fd39 	bl	8002098 <lcd_Fill>

}
 8001626:	bf00      	nop
 8001628:	3704      	adds	r7, #4
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	2000003c 	.word	0x2000003c
 8001634:	2000004c 	.word	0x2000004c
 8001638:	20000038 	.word	0x20000038

0800163c <showNotifyOver>:

void showNotifyOver(uint16_t overVal)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	; 0x50
 8001640:	af04      	add	r7, sp, #16
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
	char str1[50] = "";
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	222e      	movs	r2, #46	; 0x2e
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f009 ff38 	bl	800b4c8 <memset>
	char* str2;
	switch(overVal)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d816      	bhi.n	800168c <showNotifyOver+0x50>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <showNotifyOver+0x28>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001675 	.word	0x08001675
 8001668:	0800167b 	.word	0x0800167b
 800166c:	08001681 	.word	0x08001681
 8001670:	08001687 	.word	0x08001687
	{
	case 0:
		str2 = " HIT WALL ";
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <showNotifyOver+0xf4>)
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001678:	e008      	b.n	800168c <showNotifyOver+0x50>
	case 1:
		str2 = " TIME OUT ";
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <showNotifyOver+0xf8>)
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800167e:	e005      	b.n	800168c <showNotifyOver+0x50>
	case 2:
		str2 = " EAT BODY ";
 8001680:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <showNotifyOver+0xfc>)
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001684:	e002      	b.n	800168c <showNotifyOver+0x50>
	case 3:
		str2 = " OUT OF RANGE ";
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <showNotifyOver+0x100>)
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800168a:	bf00      	nop
	}
	strcat(str1, str2);
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001692:	4618      	mov	r0, r3
 8001694:	f009 ffc2 	bl	800b61c <strcat>
	lcd_StrCenter(0, overWallY[0] + 10, str1, WHITE, BLACK, 16, 0);
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <showNotifyOver+0x104>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	330a      	adds	r3, #10
 80016a0:	b299      	uxth	r1, r3
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	2300      	movs	r3, #0
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2310      	movs	r3, #16
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b6:	2000      	movs	r0, #0
 80016b8:	f001 f904 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <showNotifyOver+0x108>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3308      	adds	r3, #8
 80016c4:	b298      	uxth	r0, r3
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <showNotifyOver+0x104>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <showNotifyOver+0x104>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	0fda      	lsrs	r2, r3, #31
 80016d2:	4413      	add	r3, r2
 80016d4:	105b      	asrs	r3, r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b0f      	subs	r3, #15
 80016da:	b299      	uxth	r1, r3
 80016dc:	2301      	movs	r3, #1
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2310      	movs	r3, #16
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	f248 4330 	movw	r3, #33840	; 0x8430
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <showNotifyOver+0x10c>)
 80016ee:	f001 f885 	bl	80027fc <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <showNotifyOver+0x108>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3308      	adds	r3, #8
 80016fa:	b298      	uxth	r0, r3
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <showNotifyOver+0x104>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <showNotifyOver+0x104>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4413      	add	r3, r2
 8001706:	0fda      	lsrs	r2, r3, #31
 8001708:	4413      	add	r3, r2
 800170a:	105b      	asrs	r3, r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	3314      	adds	r3, #20
 8001710:	b299      	uxth	r1, r3
 8001712:	2301      	movs	r3, #1
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2310      	movs	r3, #16
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f248 4330 	movw	r3, #33840	; 0x8430
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <showNotifyOver+0x110>)
 8001724:	f001 f86a 	bl	80027fc <lcd_ShowStr>
}
 8001728:	bf00      	nop
 800172a:	3740      	adds	r7, #64	; 0x40
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0800c9fc 	.word	0x0800c9fc
 8001734:	0800ca08 	.word	0x0800ca08
 8001738:	0800ca14 	.word	0x0800ca14
 800173c:	0800ca20 	.word	0x0800ca20
 8001740:	2000004c 	.word	0x2000004c
 8001744:	2000003c 	.word	0x2000003c
 8001748:	0800ca30 	.word	0x0800ca30
 800174c:	0800ca3c 	.word	0x0800ca3c

08001750 <eraseFull>:

void eraseFull()
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <eraseFull+0x4c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <eraseFull+0x50>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4413      	add	r3, r2
 8001764:	b298      	uxth	r0, r3
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <eraseFull+0x54>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	3319      	adds	r3, #25
 800176e:	b299      	uxth	r1, r3
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <eraseFull+0x4c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <eraseFull+0x50>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <eraseFull+0x54>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b05      	subs	r3, #5
 8001788:	b29b      	uxth	r3, r3
 800178a:	f248 4430 	movw	r4, #33840	; 0x8430
 800178e:	9400      	str	r4, [sp, #0]
 8001790:	f000 fc82 	bl	8002098 <lcd_Fill>

}
 8001794:	bf00      	nop
 8001796:	3704      	adds	r7, #4
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	2000003c 	.word	0x2000003c
 80017a0:	20000038 	.word	0x20000038
 80017a4:	2000004c 	.word	0x2000004c

080017a8 <drawArrowOver>:

void drawArrowOver()
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 80017ae:	4b87      	ldr	r3, [pc, #540]	; (80019cc <drawArrowOver+0x224>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	4b86      	ldr	r3, [pc, #536]	; (80019cc <drawArrowOver+0x224>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	0fda      	lsrs	r2, r3, #31
 80017ba:	4413      	add	r3, r2
 80017bc:	105b      	asrs	r3, r3, #1
 80017be:	3b08      	subs	r3, #8
 80017c0:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 80017c2:	4b82      	ldr	r3, [pc, #520]	; (80019cc <drawArrowOver+0x224>)
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b81      	ldr	r3, [pc, #516]	; (80019cc <drawArrowOver+0x224>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	0fda      	lsrs	r2, r3, #31
 80017ce:	4413      	add	r3, r2
 80017d0:	105b      	asrs	r3, r3, #1
 80017d2:	331c      	adds	r3, #28
 80017d4:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 80017d6:	4b7e      	ldr	r3, [pc, #504]	; (80019d0 <drawArrowOver+0x228>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <drawArrowOver+0x3c>
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d078      	beq.n	80018d4 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 80017e2:	e0ef      	b.n	80019c4 <drawArrowOver+0x21c>
		eraseFull();
 80017e4:	f7ff ffb4 	bl	8001750 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 80017e8:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <drawArrowOver+0x22c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3308      	adds	r3, #8
 80017f0:	b298      	uxth	r0, r3
 80017f2:	4b76      	ldr	r3, [pc, #472]	; (80019cc <drawArrowOver+0x224>)
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	4b75      	ldr	r3, [pc, #468]	; (80019cc <drawArrowOver+0x224>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	0fda      	lsrs	r2, r3, #31
 80017fe:	4413      	add	r3, r2
 8001800:	105b      	asrs	r3, r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b0f      	subs	r3, #15
 8001806:	b299      	uxth	r1, r3
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2310      	movs	r3, #16
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f248 4330 	movw	r3, #33840	; 0x8430
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800181a:	4a6f      	ldr	r2, [pc, #444]	; (80019d8 <drawArrowOver+0x230>)
 800181c:	f000 ffee 	bl	80027fc <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 8001820:	4b6c      	ldr	r3, [pc, #432]	; (80019d4 <drawArrowOver+0x22c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	3308      	adds	r3, #8
 8001828:	b298      	uxth	r0, r3
 800182a:	4b68      	ldr	r3, [pc, #416]	; (80019cc <drawArrowOver+0x224>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <drawArrowOver+0x224>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	0fda      	lsrs	r2, r3, #31
 8001836:	4413      	add	r3, r2
 8001838:	105b      	asrs	r3, r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	3314      	adds	r3, #20
 800183e:	b299      	uxth	r1, r3
 8001840:	2301      	movs	r3, #1
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	2310      	movs	r3, #16
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	f248 4330 	movw	r3, #33840	; 0x8430
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	4a62      	ldr	r2, [pc, #392]	; (80019dc <drawArrowOver+0x234>)
 8001852:	f000 ffd3 	bl	80027fc <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <drawArrowOver+0x22c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b29b      	uxth	r3, r3
 800185c:	3b0f      	subs	r3, #15
 800185e:	b298      	uxth	r0, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	b299      	uxth	r1, r3
 8001864:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <drawArrowOver+0x22c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b0a      	subs	r3, #10
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b05      	subs	r3, #5
 8001874:	b29b      	uxth	r3, r3
 8001876:	2400      	movs	r4, #0
 8001878:	9400      	str	r4, [sp, #0]
 800187a:	f000 fc5a 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800187e:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <drawArrowOver+0x22c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b0f      	subs	r3, #15
 8001886:	b298      	uxth	r0, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	b299      	uxth	r1, r3
 800188c:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <drawArrowOver+0x22c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b0a      	subs	r3, #10
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	b29b      	uxth	r3, r3
 800189a:	3305      	adds	r3, #5
 800189c:	b29b      	uxth	r3, r3
 800189e:	2400      	movs	r4, #0
 80018a0:	9400      	str	r4, [sp, #0]
 80018a2:	f000 fc46 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80018a6:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <drawArrowOver+0x22c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b0a      	subs	r3, #10
 80018ae:	b298      	uxth	r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3b05      	subs	r3, #5
 80018b6:	b299      	uxth	r1, r3
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <drawArrowOver+0x22c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b0a      	subs	r3, #10
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3305      	adds	r3, #5
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2400      	movs	r4, #0
 80018cc:	9400      	str	r4, [sp, #0]
 80018ce:	f000 fc30 	bl	8002132 <lcd_DrawLine>
		break;
 80018d2:	e077      	b.n	80019c4 <drawArrowOver+0x21c>
		eraseFull();
 80018d4:	f7ff ff3c 	bl	8001750 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 80018d8:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <drawArrowOver+0x22c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3308      	adds	r3, #8
 80018e0:	b298      	uxth	r0, r3
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <drawArrowOver+0x224>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <drawArrowOver+0x224>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	0fda      	lsrs	r2, r3, #31
 80018ee:	4413      	add	r3, r2
 80018f0:	105b      	asrs	r3, r3, #1
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b0f      	subs	r3, #15
 80018f6:	b299      	uxth	r1, r3
 80018f8:	2301      	movs	r3, #1
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	2310      	movs	r3, #16
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f248 4330 	movw	r3, #33840	; 0x8430
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <drawArrowOver+0x230>)
 800190a:	f000 ff77 	bl	80027fc <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <drawArrowOver+0x22c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	3308      	adds	r3, #8
 8001916:	b298      	uxth	r0, r3
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <drawArrowOver+0x224>)
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <drawArrowOver+0x224>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	0fda      	lsrs	r2, r3, #31
 8001924:	4413      	add	r3, r2
 8001926:	105b      	asrs	r3, r3, #1
 8001928:	b29b      	uxth	r3, r3
 800192a:	3314      	adds	r3, #20
 800192c:	b299      	uxth	r1, r3
 800192e:	2301      	movs	r3, #1
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	2310      	movs	r3, #16
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	f248 4330 	movw	r3, #33840	; 0x8430
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <drawArrowOver+0x234>)
 8001942:	f000 ff5b 	bl	80027fc <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <drawArrowOver+0x22c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b0f      	subs	r3, #15
 800194e:	b298      	uxth	r0, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b299      	uxth	r1, r3
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <drawArrowOver+0x22c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b0a      	subs	r3, #10
 800195c:	b29a      	uxth	r2, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	3b05      	subs	r3, #5
 8001964:	b29b      	uxth	r3, r3
 8001966:	2400      	movs	r4, #0
 8001968:	9400      	str	r4, [sp, #0]
 800196a:	f000 fbe2 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <drawArrowOver+0x22c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b0f      	subs	r3, #15
 8001976:	b298      	uxth	r0, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b299      	uxth	r1, r3
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <drawArrowOver+0x22c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b0a      	subs	r3, #10
 8001984:	b29a      	uxth	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b29b      	uxth	r3, r3
 800198a:	3305      	adds	r3, #5
 800198c:	b29b      	uxth	r3, r3
 800198e:	2400      	movs	r4, #0
 8001990:	9400      	str	r4, [sp, #0]
 8001992:	f000 fbce 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <drawArrowOver+0x22c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	b29b      	uxth	r3, r3
 800199c:	3b0a      	subs	r3, #10
 800199e:	b298      	uxth	r0, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b05      	subs	r3, #5
 80019a6:	b299      	uxth	r1, r3
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <drawArrowOver+0x22c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b0a      	subs	r3, #10
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3305      	adds	r3, #5
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2400      	movs	r4, #0
 80019bc:	9400      	str	r4, [sp, #0]
 80019be:	f000 fbb8 	bl	8002132 <lcd_DrawLine>
		break;
 80019c2:	bf00      	nop
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	2000004c 	.word	0x2000004c
 80019d0:	20000138 	.word	0x20000138
 80019d4:	2000003c 	.word	0x2000003c
 80019d8:	0800ca30 	.word	0x0800ca30
 80019dc:	0800ca3c 	.word	0x0800ca3c

080019e0 <gameOverUI>:

void gameOverUI(uint16_t overVal)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
	showWallnotify();
 80019ea:	f7ff fdad 	bl	8001548 <showWallnotify>
	showNotifyOver(overVal);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe23 	bl	800163c <showNotifyOver>
	drawArrowOver();
 80019f6:	f7ff fed7 	bl	80017a8 <drawArrowOver>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <pickOver>:

void pickOver(uint16_t overVal)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	if(button_count[3] == 1)
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <pickOver+0x78>)
 8001a10:	88db      	ldrh	r3, [r3, #6]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10c      	bne.n	8001a30 <pickOver+0x2c>
	{
		flagOver = 1;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <pickOver+0x7c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <pickOver+0x80>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d025      	beq.n	8001a70 <pickOver+0x6c>
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d104      	bne.n	8001a32 <pickOver+0x2e>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <pickOver+0x80>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
			break;
 8001a2e:	e000      	b.n	8001a32 <pickOver+0x2e>
		}
	}
 8001a30:	bf00      	nop
	if(button_count[7] == 1)
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <pickOver+0x78>)
 8001a34:	89db      	ldrh	r3, [r3, #14]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <pickOver+0x52>
	{
		flagOver = 1;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <pickOver+0x7c>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <pickOver+0x80>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <pickOver+0x4a>
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d013      	beq.n	8001a74 <pickOver+0x70>
 8001a4c:	e004      	b.n	8001a58 <pickOver+0x54>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <pickOver+0x80>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
			break;
 8001a54:	e000      	b.n	8001a58 <pickOver+0x54>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 8001a56:	bf00      	nop
	if(flagOver == 1)
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <pickOver+0x7c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10a      	bne.n	8001a76 <pickOver+0x72>
	{
		gameOverUI(overVal);
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ffbc 	bl	80019e0 <gameOverUI>
		flagOver = 0;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <pickOver+0x7c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e002      	b.n	8001a76 <pickOver+0x72>
			return;
 8001a70:	bf00      	nop
 8001a72:	e000      	b.n	8001a76 <pickOver+0x72>
			return;
 8001a74:	bf00      	nop
	}
}
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000268 	.word	0x20000268
 8001a80:	2000014c 	.word	0x2000014c
 8001a84:	20000138 	.word	0x20000138

08001a88 <initOverMode>:

void initOverMode(uint16_t overVal)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b0a6      	sub	sp, #152	; 0x98
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
	TOTALSCORE = TOTALSCORE + SCORE;
 8001a92:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <initOverMode+0x1b8>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <initOverMode+0x1bc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a69      	ldr	r2, [pc, #420]	; (8001c44 <initOverMode+0x1bc>)
 8001aa0:	6013      	str	r3, [r2, #0]
	TOTALTIMEPLAY = TOTALTIMEPLAY + TOTALTIME;
 8001aa2:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <initOverMode+0x1c0>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <initOverMode+0x1c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <initOverMode+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]
	TOTALPLAY = TOTALPLAY + 1;
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <initOverMode+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <initOverMode+0x1c8>)
 8001aba:	6013      	str	r3, [r2, #0]

	char str1[70] = "GAME_FINISH#";
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <initOverMode+0x1cc>)
 8001abe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ac6:	7023      	strb	r3, [r4, #0]
 8001ac8:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8001acc:	2239      	movs	r2, #57	; 0x39
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f009 fcf9 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 8001ad6:	4b60      	ldr	r3, [pc, #384]	; (8001c58 <initOverMode+0x1d0>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 f9cc 	bl	8002e78 <convert2str>
 8001ae0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	strcat(str1, str2);
 8001ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ae8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001aec:	4618      	mov	r0, r3
 8001aee:	f009 fd95 	bl	800b61c <strcat>
	char str3[50] = "has finished game, performance value: ";
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <initOverMode+0x1d4>)
 8001af4:	f107 040c 	add.w	r4, r7, #12
 8001af8:	461d      	mov	r5, r3
 8001afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b06:	6020      	str	r0, [r4, #0]
 8001b08:	3404      	adds	r4, #4
 8001b0a:	8021      	strh	r1, [r4, #0]
 8001b0c:	3402      	adds	r4, #2
 8001b0e:	0c0b      	lsrs	r3, r1, #16
 8001b10:	7023      	strb	r3, [r4, #0]
 8001b12:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	f8c3 2007 	str.w	r2, [r3, #7]
	char *str4 = convert2str(SCORE);
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <initOverMode+0x1b8>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 f9a7 	bl	8002e78 <convert2str>
 8001b2a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	strcat(str3, str4);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 fd70 	bl	800b61c <strcat>
	strcat(str1, str3);
 8001b3c:	f107 020c 	add.w	r2, r7, #12
 8001b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 fd68 	bl	800b61c <strcat>
	strcat(str1, "#");
 8001b4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb3d 	bl	80001d0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5e:	4413      	add	r3, r2
 8001b60:	493f      	ldr	r1, [pc, #252]	; (8001c60 <initOverMode+0x1d8>)
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	8013      	strh	r3, [r2, #0]

	char *str5 = convert2str(TOTALSCORE/TOTALPLAY);
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <initOverMode+0x1bc>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <initOverMode+0x1c8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 f97d 	bl	8002e78 <convert2str>
 8001b7e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	strcat(str1, str5);
 8001b82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b86:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f009 fd46 	bl	800b61c <strcat>
	strcat(str1, "#");
 8001b90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fb1b 	bl	80001d0 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba2:	4413      	add	r3, r2
 8001ba4:	492e      	ldr	r1, [pc, #184]	; (8001c60 <initOverMode+0x1d8>)
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	8013      	strh	r3, [r2, #0]

	char *str6 = convert2str(TOTALTIMEPLAY/TOTALPLAY);
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <initOverMode+0x1c4>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <initOverMode+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 f95b 	bl	8002e78 <convert2str>
 8001bc2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	strcat(str1, str6);
 8001bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bca:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f009 fd24 	bl	800b61c <strcat>
	strcat(str1, "#");
 8001bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe faf9 	bl	80001d0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001be6:	4413      	add	r3, r2
 8001be8:	491d      	ldr	r1, [pc, #116]	; (8001c60 <initOverMode+0x1d8>)
 8001bea:	461a      	mov	r2, r3
 8001bec:	460b      	mov	r3, r1
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8001bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe faea 	bl	80001d0 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 ff10 	bl	8006a2c <uart_EspSendBytes>

	statusGame = OVERMODE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <initOverMode+0x1dc>)
 8001c0e:	2207      	movs	r2, #7
 8001c10:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <initOverMode+0x1b8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	801a      	strh	r2, [r3, #0]
	TOTALTIME = 0;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <initOverMode+0x1c0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <initOverMode+0x1e0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <initOverMode+0x1e4>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
	pickOver(overVal);
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fee9 	bl	8001a04 <pickOver>
	OVERMESSAGE = overVal;
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <initOverMode+0x1e8>)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	8013      	strh	r3, [r2, #0]

}
 8001c38:	bf00      	nop
 8001c3a:	3798      	adds	r7, #152	; 0x98
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c40:	20000132 	.word	0x20000132
 8001c44:	20000160 	.word	0x20000160
 8001c48:	2000015c 	.word	0x2000015c
 8001c4c:	20000164 	.word	0x20000164
 8001c50:	20000168 	.word	0x20000168
 8001c54:	0800ca48 	.word	0x0800ca48
 8001c58:	20000130 	.word	0x20000130
 8001c5c:	0800ca90 	.word	0x0800ca90
 8001c60:	0800ca44 	.word	0x0800ca44
 8001c64:	20000144 	.word	0x20000144
 8001c68:	20000138 	.word	0x20000138
 8001c6c:	2000014c 	.word	0x2000014c
 8001c70:	2000015a 	.word	0x2000015a

08001c74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
 8001c8e:	4ba3      	ldr	r3, [pc, #652]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4aa2      	ldr	r2, [pc, #648]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4ba0      	ldr	r3, [pc, #640]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	4b9c      	ldr	r3, [pc, #624]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a9b      	ldr	r2, [pc, #620]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b99      	ldr	r3, [pc, #612]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b95      	ldr	r3, [pc, #596]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a94      	ldr	r2, [pc, #592]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a8d      	ldr	r2, [pc, #564]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b87      	ldr	r3, [pc, #540]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a86      	ldr	r2, [pc, #536]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b84      	ldr	r3, [pc, #528]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a7f      	ldr	r2, [pc, #508]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b7d      	ldr	r3, [pc, #500]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a78      	ldr	r2, [pc, #480]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a71      	ldr	r2, [pc, #452]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <MX_GPIO_Init+0x2a8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2170      	movs	r1, #112	; 0x70
 8001d6e:	486c      	ldr	r0, [pc, #432]	; (8001f20 <MX_GPIO_Init+0x2ac>)
 8001d70:	f006 fc28 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7a:	486a      	ldr	r0, [pc, #424]	; (8001f24 <MX_GPIO_Init+0x2b0>)
 8001d7c:	f006 fc22 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ESP12_BUSY_Pin|ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001d86:	4868      	ldr	r0, [pc, #416]	; (8001f28 <MX_GPIO_Init+0x2b4>)
 8001d88:	f006 fc1c 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	4866      	ldr	r0, [pc, #408]	; (8001f2c <MX_GPIO_Init+0x2b8>)
 8001d92:	f006 fc17 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9c:	4864      	ldr	r0, [pc, #400]	; (8001f30 <MX_GPIO_Init+0x2bc>)
 8001d9e:	f006 fc11 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2108      	movs	r1, #8
 8001da6:	4863      	ldr	r0, [pc, #396]	; (8001f34 <MX_GPIO_Init+0x2c0>)
 8001da8:	f006 fc0c 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001dac:	2370      	movs	r3, #112	; 0x70
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4857      	ldr	r0, [pc, #348]	; (8001f20 <MX_GPIO_Init+0x2ac>)
 8001dc4:	f006 fa4a 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	4619      	mov	r1, r3
 8001de0:	4850      	ldr	r0, [pc, #320]	; (8001f24 <MX_GPIO_Init+0x2b0>)
 8001de2:	f006 fa3b 	bl	800825c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R2_Pin;
 8001de6:	2308      	movs	r3, #8
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4849      	ldr	r0, [pc, #292]	; (8001f24 <MX_GPIO_Init+0x2b0>)
 8001dfe:	f006 fa2d 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R1_Pin|R0_Pin;
 8001e02:	2330      	movs	r3, #48	; 0x30
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e16:	4619      	mov	r1, r3
 8001e18:	4845      	ldr	r0, [pc, #276]	; (8001f30 <MX_GPIO_Init+0x2bc>)
 8001e1a:	f006 fa1f 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = C2_Pin|C3_Pin;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2e:	4619      	mov	r1, r3
 8001e30:	483c      	ldr	r0, [pc, #240]	; (8001f24 <MX_GPIO_Init+0x2b0>)
 8001e32:	f006 fa13 	bl	800825c <HAL_GPIO_Init>

    /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin;
 8001e36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4838      	ldr	r0, [pc, #224]	; (8001f2c <MX_GPIO_Init+0x2b8>)
 8001e4c:	f006 fa06 	bl	800825c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R3_Pin;
 8001e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	4619      	mov	r1, r3
 8001e68:	4830      	ldr	r0, [pc, #192]	; (8001f2c <MX_GPIO_Init+0x2b8>)
 8001e6a:	f006 f9f7 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin|ESP12_PWR_Pin;
 8001e6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x2b4>)
 8001e88:	f006 f9e8 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001e8c:	23c0      	movs	r3, #192	; 0xc0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4824      	ldr	r0, [pc, #144]	; (8001f30 <MX_GPIO_Init+0x2bc>)
 8001ea0:	f006 f9dc 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001ea4:	2330      	movs	r3, #48	; 0x30
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481b      	ldr	r0, [pc, #108]	; (8001f24 <MX_GPIO_Init+0x2b0>)
 8001eb8:	f006 f9d0 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001ebc:	2340      	movs	r3, #64	; 0x40
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4816      	ldr	r0, [pc, #88]	; (8001f2c <MX_GPIO_Init+0x2b8>)
 8001ed4:	f006 f9c2 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <MX_GPIO_Init+0x2bc>)
 8001ef2:	f006 f9b3 	bl	800825c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <MX_GPIO_Init+0x2c0>)
 8001f0e:	f006 f9a5 	bl	800825c <HAL_GPIO_Init>

}
 8001f12:	bf00      	nop
 8001f14:	3738      	adds	r7, #56	; 0x38
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020c00 	.word	0x40020c00

08001f38 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <LCD_WR_REG+0x1c>)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	8013      	strh	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	600ffffe 	.word	0x600ffffe

08001f58 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <LCD_WR_DATA+0x1c>)
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	8053      	strh	r3, [r2, #2]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	600ffffe 	.word	0x600ffffe

08001f78 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <LCD_RD_DATA+0x20>)
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	b29b      	uxth	r3, r3
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	600ffffe 	.word	0x600ffffe

08001f9c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	80fb      	strh	r3, [r7, #6]
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80bb      	strh	r3, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	807b      	strh	r3, [r7, #2]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001fba:	202a      	movs	r0, #42	; 0x2a
 8001fbc:	f7ff ffbc 	bl	8001f38 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ffc6 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ffc0 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ffba 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ffb4 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001ff0:	202b      	movs	r0, #43	; 0x2b
 8001ff2:	f7ff ffa1 	bl	8001f38 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001ff6:	88bb      	ldrh	r3, [r7, #4]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffab 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002002:	88bb      	ldrh	r3, [r7, #4]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ffa5 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800200e:	883b      	ldrh	r3, [r7, #0]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff9f 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800201a:	883b      	ldrh	r3, [r7, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff99 	bl	8001f58 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002026:	202c      	movs	r0, #44	; 0x2c
 8002028:	f7ff ff86 	bl	8001f38 <LCD_WR_REG>
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}

08002034 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <lcd_Clear+0x60>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <lcd_Clear+0x60>)
 8002048:	885b      	ldrh	r3, [r3, #2]
 800204a:	3b01      	subs	r3, #1
 800204c:	b29b      	uxth	r3, r3
 800204e:	2100      	movs	r1, #0
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff ffa3 	bl	8001f9c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8002056:	2300      	movs	r3, #0
 8002058:	81fb      	strh	r3, [r7, #14]
 800205a:	e011      	b.n	8002080 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800205c:	2300      	movs	r3, #0
 800205e:	81bb      	strh	r3, [r7, #12]
 8002060:	e006      	b.n	8002070 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff77 	bl	8001f58 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800206a:	89bb      	ldrh	r3, [r7, #12]
 800206c:	3301      	adds	r3, #1
 800206e:	81bb      	strh	r3, [r7, #12]
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <lcd_Clear+0x60>)
 8002072:	885b      	ldrh	r3, [r3, #2]
 8002074:	89ba      	ldrh	r2, [r7, #12]
 8002076:	429a      	cmp	r2, r3
 8002078:	d3f3      	bcc.n	8002062 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	3301      	adds	r3, #1
 800207e:	81fb      	strh	r3, [r7, #14]
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <lcd_Clear+0x60>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	89fa      	ldrh	r2, [r7, #14]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3e8      	bcc.n	800205c <lcd_Clear+0x28>
		}
	}
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002d8 	.word	0x200002d8

08002098 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	4604      	mov	r4, r0
 80020a0:	4608      	mov	r0, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	80fb      	strh	r3, [r7, #6]
 80020aa:	4603      	mov	r3, r0
 80020ac:	80bb      	strh	r3, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	807b      	strh	r3, [r7, #2]
 80020b2:	4613      	mov	r3, r2
 80020b4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	883b      	ldrh	r3, [r7, #0]
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	88b9      	ldrh	r1, [r7, #4]
 80020c4:	88f8      	ldrh	r0, [r7, #6]
 80020c6:	f7ff ff69 	bl	8001f9c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80020ca:	88bb      	ldrh	r3, [r7, #4]
 80020cc:	81fb      	strh	r3, [r7, #14]
 80020ce:	e010      	b.n	80020f2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	81bb      	strh	r3, [r7, #12]
 80020d4:	e006      	b.n	80020e4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80020d6:	8c3b      	ldrh	r3, [r7, #32]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff3d 	bl	8001f58 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80020de:	89bb      	ldrh	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	81bb      	strh	r3, [r7, #12]
 80020e4:	89ba      	ldrh	r2, [r7, #12]
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d3f4      	bcc.n	80020d6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	3301      	adds	r3, #1
 80020f0:	81fb      	strh	r3, [r7, #14]
 80020f2:	89fa      	ldrh	r2, [r7, #14]
 80020f4:	883b      	ldrh	r3, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3ea      	bcc.n	80020d0 <lcd_Fill+0x38>
		}
	}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}

08002104 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
 800210e:	460b      	mov	r3, r1
 8002110:	80bb      	strh	r3, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002116:	88bb      	ldrh	r3, [r7, #4]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	88b9      	ldrh	r1, [r7, #4]
 800211c:	88f8      	ldrh	r0, [r7, #6]
 800211e:	f7ff ff3d 	bl	8001f9c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff17 	bl	8001f58 <LCD_WR_DATA>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8002132:	b590      	push	{r4, r7, lr}
 8002134:	b08d      	sub	sp, #52	; 0x34
 8002136:	af00      	add	r7, sp, #0
 8002138:	4604      	mov	r4, r0
 800213a:	4608      	mov	r0, r1
 800213c:	4611      	mov	r1, r2
 800213e:	461a      	mov	r2, r3
 8002140:	4623      	mov	r3, r4
 8002142:	80fb      	strh	r3, [r7, #6]
 8002144:	4603      	mov	r3, r0
 8002146:	80bb      	strh	r3, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8002160:	883a      	ldrh	r2, [r7, #0]
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800216c:	88bb      	ldrh	r3, [r7, #4]
 800216e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	2b00      	cmp	r3, #0
 8002174:	dd02      	ble.n	800217c <lcd_DrawLine+0x4a>
 8002176:	2301      	movs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e00b      	b.n	8002194 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <lcd_DrawLine+0x56>
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e005      	b.n	8002194 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	425b      	negs	r3, r3
 8002192:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	dd02      	ble.n	80021a0 <lcd_DrawLine+0x6e>
 800219a:	2301      	movs	r3, #1
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e00b      	b.n	80021b8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <lcd_DrawLine+0x7a>
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e005      	b.n	80021b8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	425b      	negs	r3, r3
 80021b6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dd02      	ble.n	80021c6 <lcd_DrawLine+0x94>
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e001      	b.n	80021ca <lcd_DrawLine+0x98>
	else distance=delta_y;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80021ce:	e02b      	b.n	8002228 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	b291      	uxth	r1, r2
 80021d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff91 	bl	8002104 <lcd_DrawPoint>
		xerr+=delta_x;
 80021e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	4413      	add	r3, r2
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4413      	add	r3, r2
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80021f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dd07      	ble.n	800220a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80021fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	429a      	cmp	r2, r3
 8002210:	dd07      	ble.n	8002222 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8002222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002224:	3301      	adds	r3, #1
 8002226:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002228:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	429a      	cmp	r2, r3
 800222e:	dacf      	bge.n	80021d0 <lcd_DrawLine+0x9e>
		}
	}
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3734      	adds	r7, #52	; 0x34
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b085      	sub	sp, #20
 800223e:	af02      	add	r7, sp, #8
 8002240:	4604      	mov	r4, r0
 8002242:	4608      	mov	r0, r1
 8002244:	4611      	mov	r1, r2
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	80fb      	strh	r3, [r7, #6]
 800224c:	4603      	mov	r3, r0
 800224e:	80bb      	strh	r3, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8002258:	88bc      	ldrh	r4, [r7, #4]
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	88b9      	ldrh	r1, [r7, #4]
 800225e:	88f8      	ldrh	r0, [r7, #6]
 8002260:	8b3b      	ldrh	r3, [r7, #24]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4623      	mov	r3, r4
 8002266:	f7ff ff64 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800226a:	883c      	ldrh	r4, [r7, #0]
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	88b9      	ldrh	r1, [r7, #4]
 8002270:	88f8      	ldrh	r0, [r7, #6]
 8002272:	8b3b      	ldrh	r3, [r7, #24]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4623      	mov	r3, r4
 8002278:	f7ff ff5b 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800227c:	883c      	ldrh	r4, [r7, #0]
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	8839      	ldrh	r1, [r7, #0]
 8002282:	88f8      	ldrh	r0, [r7, #6]
 8002284:	8b3b      	ldrh	r3, [r7, #24]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4623      	mov	r3, r4
 800228a:	f7ff ff52 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800228e:	883c      	ldrh	r4, [r7, #0]
 8002290:	887a      	ldrh	r2, [r7, #2]
 8002292:	88b9      	ldrh	r1, [r7, #4]
 8002294:	8878      	ldrh	r0, [r7, #2]
 8002296:	8b3b      	ldrh	r3, [r7, #24]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	4623      	mov	r3, r4
 800229c:	f7ff ff49 	bl	8002132 <lcd_DrawLine>
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4604      	mov	r4, r0
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4623      	mov	r3, r4
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	4603      	mov	r3, r0
 80022bc:	80bb      	strh	r3, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
 80022c2:	4613      	mov	r3, r2
 80022c4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80022ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	fb12 f303 	smulbb	r3, r2, r3
 80022fe:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	3b20      	subs	r3, #32
 8002304:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	b29a      	uxth	r2, r3
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	4413      	add	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29c      	uxth	r4, r3
 8002314:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002318:	b29a      	uxth	r2, r3
 800231a:	88bb      	ldrh	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29b      	uxth	r3, r3
 8002324:	88b9      	ldrh	r1, [r7, #4]
 8002326:	88f8      	ldrh	r0, [r7, #6]
 8002328:	4622      	mov	r2, r4
 800232a:	f7ff fe37 	bl	8001f9c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800232e:	2300      	movs	r3, #0
 8002330:	827b      	strh	r3, [r7, #18]
 8002332:	e07a      	b.n	800242a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002334:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002338:	2b0c      	cmp	r3, #12
 800233a:	d028      	beq.n	800238e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800233c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002340:	2b10      	cmp	r3, #16
 8002342:	d108      	bne.n	8002356 <lcd_ShowChar+0xae>
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	8a7b      	ldrh	r3, [r7, #18]
 8002348:	493c      	ldr	r1, [pc, #240]	; (800243c <lcd_ShowChar+0x194>)
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	440a      	add	r2, r1
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	75fb      	strb	r3, [r7, #23]
 8002354:	e01b      	b.n	800238e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002356:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800235a:	2b18      	cmp	r3, #24
 800235c:	d10b      	bne.n	8002376 <lcd_ShowChar+0xce>
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	8a79      	ldrh	r1, [r7, #18]
 8002362:	4837      	ldr	r0, [pc, #220]	; (8002440 <lcd_ShowChar+0x198>)
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4403      	add	r3, r0
 800236e:	440b      	add	r3, r1
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	e00b      	b.n	800238e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002376:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800237a:	2b20      	cmp	r3, #32
 800237c:	d15a      	bne.n	8002434 <lcd_ShowChar+0x18c>
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	8a7b      	ldrh	r3, [r7, #18]
 8002382:	4930      	ldr	r1, [pc, #192]	; (8002444 <lcd_ShowChar+0x19c>)
 8002384:	0192      	lsls	r2, r2, #6
 8002386:	440a      	add	r2, r1
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800238e:	2300      	movs	r3, #0
 8002390:	75bb      	strb	r3, [r7, #22]
 8002392:	e044      	b.n	800241e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002394:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002398:	2b00      	cmp	r3, #0
 800239a:	d120      	bne.n	80023de <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800239c:	7dfa      	ldrb	r2, [r7, #23]
 800239e:	7dbb      	ldrb	r3, [r7, #22]
 80023a0:	fa42 f303 	asr.w	r3, r2, r3
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <lcd_ShowChar+0x10e>
 80023ac:	883b      	ldrh	r3, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fdd2 	bl	8001f58 <LCD_WR_DATA>
 80023b4:	e003      	b.n	80023be <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80023b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fdcd 	bl	8001f58 <LCD_WR_DATA>
				m++;
 80023be:	7d7b      	ldrb	r3, [r7, #21]
 80023c0:	3301      	adds	r3, #1
 80023c2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80023c4:	7d7b      	ldrb	r3, [r7, #21]
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023cc:	fb02 f201 	mul.w	r2, r2, r1
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11f      	bne.n	8002418 <lcd_ShowChar+0x170>
				{
					m=0;
 80023d8:	2300      	movs	r3, #0
 80023da:	757b      	strb	r3, [r7, #21]
					break;
 80023dc:	e022      	b.n	8002424 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80023de:	7dfa      	ldrb	r2, [r7, #23]
 80023e0:	7dbb      	ldrb	r3, [r7, #22]
 80023e2:	fa42 f303 	asr.w	r3, r2, r3
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <lcd_ShowChar+0x152>
 80023ee:	883a      	ldrh	r2, [r7, #0]
 80023f0:	88b9      	ldrh	r1, [r7, #4]
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe85 	bl	8002104 <lcd_DrawPoint>
				x++;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	3301      	adds	r3, #1
 80023fe:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	8a3b      	ldrh	r3, [r7, #16]
 8002404:	1ad2      	subs	r2, r2, r3
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	429a      	cmp	r2, r3
 800240a:	d105      	bne.n	8002418 <lcd_ShowChar+0x170>
				{
					x=x0;
 800240c:	8a3b      	ldrh	r3, [r7, #16]
 800240e:	80fb      	strh	r3, [r7, #6]
					y++;
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	80bb      	strh	r3, [r7, #4]
					break;
 8002416:	e005      	b.n	8002424 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002418:	7dbb      	ldrb	r3, [r7, #22]
 800241a:	3301      	adds	r3, #1
 800241c:	75bb      	strb	r3, [r7, #22]
 800241e:	7dbb      	ldrb	r3, [r7, #22]
 8002420:	2b07      	cmp	r3, #7
 8002422:	d9b7      	bls.n	8002394 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002424:	8a7b      	ldrh	r3, [r7, #18]
 8002426:	3301      	adds	r3, #1
 8002428:	827b      	strh	r3, [r7, #18]
 800242a:	8a7a      	ldrh	r2, [r7, #18]
 800242c:	89bb      	ldrh	r3, [r7, #12]
 800242e:	429a      	cmp	r2, r3
 8002430:	d380      	bcc.n	8002334 <lcd_ShowChar+0x8c>
 8002432:	e000      	b.n	8002436 <lcd_ShowChar+0x18e>
		else return;
 8002434:	bf00      	nop
				}
			}
		}
	}
}
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	0800cef4 	.word	0x0800cef4
 8002440:	0800d4e4 	.word	0x0800d4e4
 8002444:	0800e6b4 	.word	0x0800e6b4

08002448 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	80fb      	strh	r3, [r7, #6]
 800245a:	4603      	mov	r3, r0
 800245c:	80bb      	strh	r3, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	807b      	strh	r3, [r7, #2]
 8002462:	4613      	mov	r3, r2
 8002464:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	4413      	add	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29c      	uxth	r4, r3
 8002476:	88ba      	ldrh	r2, [r7, #4]
 8002478:	883b      	ldrh	r3, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	88b9      	ldrh	r1, [r7, #4]
 8002484:	88f8      	ldrh	r0, [r7, #6]
 8002486:	4622      	mov	r2, r4
 8002488:	f7ff fd88 	bl	8001f9c <lcd_AddressSet>
	for(i=0;i<length;i++)
 800248c:	2300      	movs	r3, #0
 800248e:	82fb      	strh	r3, [r7, #22]
 8002490:	e027      	b.n	80024e2 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8002492:	2300      	movs	r3, #0
 8002494:	82bb      	strh	r3, [r7, #20]
 8002496:	e01d      	b.n	80024d4 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	3301      	adds	r3, #1
 80024aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fd48 	bl	8001f58 <LCD_WR_DATA>
			k++;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	3301      	adds	r3, #1
 80024cc:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 80024ce:	8abb      	ldrh	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	82bb      	strh	r3, [r7, #20]
 80024d4:	8aba      	ldrh	r2, [r7, #20]
 80024d6:	883b      	ldrh	r3, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3dd      	bcc.n	8002498 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	3301      	adds	r3, #1
 80024e0:	82fb      	strh	r3, [r7, #22]
 80024e2:	8afa      	ldrh	r2, [r7, #22]
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d3d3      	bcc.n	8002492 <lcd_ShowPicture+0x4a>
		}
	}
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <lcd_SetDir+0x44>)
 8002510:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002514:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <lcd_SetDir+0x44>)
 8002518:	22f0      	movs	r2, #240	; 0xf0
 800251a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800251c:	e006      	b.n	800252c <lcd_SetDir+0x38>
		lcddev.width=240;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <lcd_SetDir+0x44>)
 8002520:	22f0      	movs	r2, #240	; 0xf0
 8002522:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <lcd_SetDir+0x44>)
 8002526:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800252a:	805a      	strh	r2, [r3, #2]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	200002d8 	.word	0x200002d8

0800253c <lcd_init>:


void lcd_init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002546:	48aa      	ldr	r0, [pc, #680]	; (80027f0 <lcd_init+0x2b4>)
 8002548:	f006 f83c 	bl	80085c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800254c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002550:	f004 fd3a 	bl	8006fc8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800255a:	48a5      	ldr	r0, [pc, #660]	; (80027f0 <lcd_init+0x2b4>)
 800255c:	f006 f832 	bl	80085c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002564:	f004 fd30 	bl	8006fc8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002568:	2000      	movs	r0, #0
 800256a:	f7ff ffc3 	bl	80024f4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800256e:	20d3      	movs	r0, #211	; 0xd3
 8002570:	f7ff fce2 	bl	8001f38 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002574:	f7ff fd00 	bl	8001f78 <LCD_RD_DATA>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b9d      	ldr	r3, [pc, #628]	; (80027f4 <lcd_init+0x2b8>)
 800257e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002580:	f7ff fcfa 	bl	8001f78 <LCD_RD_DATA>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <lcd_init+0x2b8>)
 800258a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800258c:	f7ff fcf4 	bl	8001f78 <LCD_RD_DATA>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <lcd_init+0x2b8>)
 8002596:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002598:	4b96      	ldr	r3, [pc, #600]	; (80027f4 <lcd_init+0x2b8>)
 800259a:	889b      	ldrh	r3, [r3, #4]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <lcd_init+0x2b8>)
 80025a2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80025a4:	f7ff fce8 	bl	8001f78 <LCD_RD_DATA>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <lcd_init+0x2b8>)
 80025ae:	889b      	ldrh	r3, [r3, #4]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b8f      	ldr	r3, [pc, #572]	; (80027f4 <lcd_init+0x2b8>)
 80025b6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80025b8:	20cf      	movs	r0, #207	; 0xcf
 80025ba:	f7ff fcbd 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff fcca 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80025c4:	20c1      	movs	r0, #193	; 0xc1
 80025c6:	f7ff fcc7 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80025ca:	2030      	movs	r0, #48	; 0x30
 80025cc:	f7ff fcc4 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80025d0:	20ed      	movs	r0, #237	; 0xed
 80025d2:	f7ff fcb1 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80025d6:	2064      	movs	r0, #100	; 0x64
 80025d8:	f7ff fcbe 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80025dc:	2003      	movs	r0, #3
 80025de:	f7ff fcbb 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80025e2:	2012      	movs	r0, #18
 80025e4:	f7ff fcb8 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80025e8:	2081      	movs	r0, #129	; 0x81
 80025ea:	f7ff fcb5 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80025ee:	20e8      	movs	r0, #232	; 0xe8
 80025f0:	f7ff fca2 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80025f4:	2085      	movs	r0, #133	; 0x85
 80025f6:	f7ff fcaf 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80025fa:	2010      	movs	r0, #16
 80025fc:	f7ff fcac 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002600:	207a      	movs	r0, #122	; 0x7a
 8002602:	f7ff fca9 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002606:	20cb      	movs	r0, #203	; 0xcb
 8002608:	f7ff fc96 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800260c:	2039      	movs	r0, #57	; 0x39
 800260e:	f7ff fca3 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002612:	202c      	movs	r0, #44	; 0x2c
 8002614:	f7ff fca0 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fc9d 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800261e:	2034      	movs	r0, #52	; 0x34
 8002620:	f7ff fc9a 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002624:	2002      	movs	r0, #2
 8002626:	f7ff fc97 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800262a:	20f7      	movs	r0, #247	; 0xf7
 800262c:	f7ff fc84 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002630:	2020      	movs	r0, #32
 8002632:	f7ff fc91 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002636:	20ea      	movs	r0, #234	; 0xea
 8002638:	f7ff fc7e 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff fc8b 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7ff fc88 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002648:	20c0      	movs	r0, #192	; 0xc0
 800264a:	f7ff fc75 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800264e:	201b      	movs	r0, #27
 8002650:	f7ff fc82 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002654:	20c1      	movs	r0, #193	; 0xc1
 8002656:	f7ff fc6f 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff fc7c 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002660:	20c5      	movs	r0, #197	; 0xc5
 8002662:	f7ff fc69 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002666:	2030      	movs	r0, #48	; 0x30
 8002668:	f7ff fc76 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800266c:	2030      	movs	r0, #48	; 0x30
 800266e:	f7ff fc73 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002672:	20c7      	movs	r0, #199	; 0xc7
 8002674:	f7ff fc60 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002678:	20b7      	movs	r0, #183	; 0xb7
 800267a:	f7ff fc6d 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800267e:	2036      	movs	r0, #54	; 0x36
 8002680:	f7ff fc5a 	bl	8001f38 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002684:	2008      	movs	r0, #8
 8002686:	f7ff fc67 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800268a:	203a      	movs	r0, #58	; 0x3a
 800268c:	f7ff fc54 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002690:	2055      	movs	r0, #85	; 0x55
 8002692:	f7ff fc61 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002696:	20b1      	movs	r0, #177	; 0xb1
 8002698:	f7ff fc4e 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff fc5b 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80026a2:	201a      	movs	r0, #26
 80026a4:	f7ff fc58 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80026a8:	20b6      	movs	r0, #182	; 0xb6
 80026aa:	f7ff fc45 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80026ae:	200a      	movs	r0, #10
 80026b0:	f7ff fc52 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80026b4:	20a2      	movs	r0, #162	; 0xa2
 80026b6:	f7ff fc4f 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80026ba:	20f2      	movs	r0, #242	; 0xf2
 80026bc:	f7ff fc3c 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff fc49 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80026c6:	2026      	movs	r0, #38	; 0x26
 80026c8:	f7ff fc36 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7ff fc43 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80026d2:	20e0      	movs	r0, #224	; 0xe0
 80026d4:	f7ff fc30 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80026d8:	200f      	movs	r0, #15
 80026da:	f7ff fc3d 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80026de:	202a      	movs	r0, #42	; 0x2a
 80026e0:	f7ff fc3a 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80026e4:	2028      	movs	r0, #40	; 0x28
 80026e6:	f7ff fc37 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80026ea:	2008      	movs	r0, #8
 80026ec:	f7ff fc34 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80026f0:	200e      	movs	r0, #14
 80026f2:	f7ff fc31 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80026f6:	2008      	movs	r0, #8
 80026f8:	f7ff fc2e 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80026fc:	2054      	movs	r0, #84	; 0x54
 80026fe:	f7ff fc2b 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002702:	20a9      	movs	r0, #169	; 0xa9
 8002704:	f7ff fc28 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002708:	2043      	movs	r0, #67	; 0x43
 800270a:	f7ff fc25 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800270e:	200a      	movs	r0, #10
 8002710:	f7ff fc22 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002714:	200f      	movs	r0, #15
 8002716:	f7ff fc1f 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fc1c 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7ff fc19 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fc16 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7ff fc13 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002732:	20e1      	movs	r0, #225	; 0xe1
 8002734:	f7ff fc00 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff fc0d 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800273e:	2015      	movs	r0, #21
 8002740:	f7ff fc0a 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002744:	2017      	movs	r0, #23
 8002746:	f7ff fc07 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800274a:	2007      	movs	r0, #7
 800274c:	f7ff fc04 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002750:	2011      	movs	r0, #17
 8002752:	f7ff fc01 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002756:	2006      	movs	r0, #6
 8002758:	f7ff fbfe 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800275c:	202b      	movs	r0, #43	; 0x2b
 800275e:	f7ff fbfb 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002762:	2056      	movs	r0, #86	; 0x56
 8002764:	f7ff fbf8 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002768:	203c      	movs	r0, #60	; 0x3c
 800276a:	f7ff fbf5 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800276e:	2005      	movs	r0, #5
 8002770:	f7ff fbf2 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002774:	2010      	movs	r0, #16
 8002776:	f7ff fbef 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800277a:	200f      	movs	r0, #15
 800277c:	f7ff fbec 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002780:	203f      	movs	r0, #63	; 0x3f
 8002782:	f7ff fbe9 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002786:	203f      	movs	r0, #63	; 0x3f
 8002788:	f7ff fbe6 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800278c:	200f      	movs	r0, #15
 800278e:	f7ff fbe3 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002792:	202b      	movs	r0, #43	; 0x2b
 8002794:	f7ff fbd0 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7ff fbdd 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7ff fbda 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7ff fbd7 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80027aa:	203f      	movs	r0, #63	; 0x3f
 80027ac:	f7ff fbd4 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80027b0:	202a      	movs	r0, #42	; 0x2a
 80027b2:	f7ff fbc1 	bl	8001f38 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff fbce 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff fbcb 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff fbc8 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80027c8:	20ef      	movs	r0, #239	; 0xef
 80027ca:	f7ff fbc5 	bl	8001f58 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80027ce:	2011      	movs	r0, #17
 80027d0:	f7ff fbb2 	bl	8001f38 <LCD_WR_REG>
	HAL_Delay(120);
 80027d4:	2078      	movs	r0, #120	; 0x78
 80027d6:	f004 fbf7 	bl	8006fc8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80027da:	2029      	movs	r0, #41	; 0x29
 80027dc:	f7ff fbac 	bl	8001f38 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e6:	4804      	ldr	r0, [pc, #16]	; (80027f8 <lcd_init+0x2bc>)
 80027e8:	f005 feec 	bl	80085c4 <HAL_GPIO_WritePin>
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40020800 	.word	0x40020800
 80027f4:	200002d8 	.word	0x200002d8
 80027f8:	40020000 	.word	0x40020000

080027fc <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b08b      	sub	sp, #44	; 0x2c
 8002800:	af04      	add	r7, sp, #16
 8002802:	60ba      	str	r2, [r7, #8]
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	81fb      	strh	r3, [r7, #14]
 800280a:	460b      	mov	r3, r1
 800280c:	81bb      	strh	r3, [r7, #12]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800281a:	e048      	b.n	80028ae <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d145      	bne.n	80028ae <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002822:	89fa      	ldrh	r2, [r7, #14]
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <lcd_ShowStr+0xc4>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	1acb      	subs	r3, r1, r3
 8002834:	429a      	cmp	r2, r3
 8002836:	dc3f      	bgt.n	80028b8 <lcd_ShowStr+0xbc>
 8002838:	89ba      	ldrh	r2, [r7, #12]
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <lcd_ShowStr+0xc4>)
 800283c:	885b      	ldrh	r3, [r3, #2]
 800283e:	4619      	mov	r1, r3
 8002840:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002844:	1acb      	subs	r3, r1, r3
 8002846:	429a      	cmp	r2, r3
 8002848:	dc36      	bgt.n	80028b8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d902      	bls.n	8002858 <lcd_ShowStr+0x5c>
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
 8002856:	e02a      	b.n	80028ae <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0d      	cmp	r3, #13
 800285e:	d10b      	bne.n	8002878 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002860:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002864:	b29a      	uxth	r2, r3
 8002866:	89bb      	ldrh	r3, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800286c:	8abb      	ldrh	r3, [r7, #20]
 800286e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	e017      	b.n	80028a8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	88fc      	ldrh	r4, [r7, #6]
 800287e:	89b9      	ldrh	r1, [r7, #12]
 8002880:	89f8      	ldrh	r0, [r7, #14]
 8002882:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4623      	mov	r3, r4
 8002894:	f7ff fd08 	bl	80022a8 <lcd_ShowChar>
					x+=sizey/2;
 8002898:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	89fb      	ldrh	r3, [r7, #14]
 80028a4:	4413      	add	r3, r2
 80028a6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1b2      	bne.n	800281c <lcd_ShowStr+0x20>
 80028b6:	e000      	b.n	80028ba <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80028b8:	bf00      	nop
			}
		}
	}
}
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	200002d8 	.word	0x200002d8

080028c4 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60ba      	str	r2, [r7, #8]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	81fb      	strh	r3, [r7, #14]
 80028d2:	460b      	mov	r3, r1
 80028d4:	81bb      	strh	r3, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80028da:	68b8      	ldr	r0, [r7, #8]
 80028dc:	f7fd fc78 	bl	80001d0 <strlen>
 80028e0:	4603      	mov	r3, r0
 80028e2:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <lcd_StrCenter+0x60>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	8afb      	ldrh	r3, [r7, #22]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	0fda      	lsrs	r2, r3, #31
 80028f2:	4413      	add	r3, r2
 80028f4:	105b      	asrs	r3, r3, #1
 80028f6:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80028f8:	89fa      	ldrh	r2, [r7, #14]
 80028fa:	8abb      	ldrh	r3, [r7, #20]
 80028fc:	4413      	add	r3, r2
 80028fe:	b298      	uxth	r0, r3
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	89b9      	ldrh	r1, [r7, #12]
 8002904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002908:	9302      	str	r3, [sp, #8]
 800290a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	8c3b      	ldrh	r3, [r7, #32]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f7ff ff70 	bl	80027fc <lcd_ShowStr>
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200002d8 	.word	0x200002d8

08002928 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800292c:	2201      	movs	r2, #1
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <led7_init+0x14>)
 8002932:	f005 fe47 	bl	80085c4 <HAL_GPIO_WritePin>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021800 	.word	0x40021800

08002940 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <led7_Scan+0x104>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <led7_Scan+0x104>)
 800294e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002950:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <led7_Scan+0x108>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <led7_Scan+0x10c>)
 8002958:	5c9b      	ldrb	r3, [r3, r2]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	b21a      	sxth	r2, r3
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <led7_Scan+0x104>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b21b      	sxth	r3, r3
 8002964:	4313      	orrs	r3, r2
 8002966:	b21b      	sxth	r3, r3
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <led7_Scan+0x104>)
 800296c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <led7_Scan+0x108>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d846      	bhi.n	8002a04 <led7_Scan+0xc4>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <led7_Scan+0x3c>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	0800298d 	.word	0x0800298d
 8002980:	080029ab 	.word	0x080029ab
 8002984:	080029c9 	.word	0x080029c9
 8002988:	080029e7 	.word	0x080029e7
	case 0:
		spi_buffer |= 0x00b0;
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <led7_Scan+0x104>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002994:	b29a      	uxth	r2, r3
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <led7_Scan+0x104>)
 8002998:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800299a:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <led7_Scan+0x104>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <led7_Scan+0x104>)
 80029a6:	801a      	strh	r2, [r3, #0]
		break;
 80029a8:	e02d      	b.n	8002a06 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <led7_Scan+0x104>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <led7_Scan+0x104>)
 80029b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <led7_Scan+0x104>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	f023 0320 	bic.w	r3, r3, #32
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <led7_Scan+0x104>)
 80029c4:	801a      	strh	r2, [r3, #0]
		break;
 80029c6:	e01e      	b.n	8002a06 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <led7_Scan+0x104>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <led7_Scan+0x104>)
 80029d4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <led7_Scan+0x104>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	f023 0310 	bic.w	r3, r3, #16
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <led7_Scan+0x104>)
 80029e2:	801a      	strh	r2, [r3, #0]
		break;
 80029e4:	e00f      	b.n	8002a06 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <led7_Scan+0x104>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <led7_Scan+0x104>)
 80029f2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <led7_Scan+0x104>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <led7_Scan+0x104>)
 8002a00:	801a      	strh	r2, [r3, #0]
		break;
 8002a02:	e000      	b.n	8002a06 <led7_Scan+0xc6>
	default:
		break;
 8002a04:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <led7_Scan+0x108>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	425a      	negs	r2, r3
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	bf58      	it	pl
 8002a18:	4253      	negpl	r3, r2
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <led7_Scan+0x108>)
 8002a1e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2140      	movs	r1, #64	; 0x40
 8002a24:	480a      	ldr	r0, [pc, #40]	; (8002a50 <led7_Scan+0x110>)
 8002a26:	f005 fdcd 	bl	80085c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4905      	ldr	r1, [pc, #20]	; (8002a44 <led7_Scan+0x104>)
 8002a30:	4808      	ldr	r0, [pc, #32]	; (8002a54 <led7_Scan+0x114>)
 8002a32:	f006 fade 	bl	8008ff2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002a36:	2201      	movs	r2, #1
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <led7_Scan+0x110>)
 8002a3c:	f005 fdc2 	bl	80085c4 <HAL_GPIO_WritePin>
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000092 	.word	0x20000092
 8002a48:	2000016c 	.word	0x2000016c
 8002a4c:	20000084 	.word	0x20000084
 8002a50:	40021800 	.word	0x40021800
 8002a54:	20002a68 	.word	0x20002a68

08002a58 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0e      	blt.n	8002a8a <led7_SetDigit+0x32>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	dc0b      	bgt.n	8002a8a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <led7_SetDigit+0x40>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	b2d9      	uxtb	r1, r3
 8002a80:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <led7_SetDigit+0x44>)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4413      	add	r3, r2
 8002a86:	460a      	mov	r2, r1
 8002a88:	701a      	strb	r2, [r3, #0]
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000088 	.word	0x20000088
 8002a9c:	20000084 	.word	0x20000084

08002aa0 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <led7_SetColon+0x20>
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <led7_SetColon+0x3c>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	f023 0308 	bic.w	r3, r3, #8
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <led7_SetColon+0x3c>)
 8002abc:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002abe:	e006      	b.n	8002ace <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <led7_SetColon+0x3c>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <led7_SetColon+0x3c>)
 8002acc:	801a      	strh	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000092 	.word	0x20000092

08002ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae4:	f004 f9fe 	bl	8006ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae8:	f000 f8b6 	bl	8002c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aec:	f7ff f8c2 	bl	8001c74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002af0:	f7fe fa1a 	bl	8000f28 <MX_DMA_Init>
  MX_TIM2_Init();
 8002af4:	f003 fcf2 	bl	80064dc <MX_TIM2_Init>
  MX_SPI1_Init();
 8002af8:	f002 fa58 	bl	8004fac <MX_SPI1_Init>
  MX_FSMC_Init();
 8002afc:	f7fe fc54 	bl	80013a8 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8002b00:	f004 f94c 	bl	8006d9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002b04:	f7fd fd38 	bl	8000578 <MX_ADC1_Init>
  MX_TIM13_Init();
 8002b08:	f003 fd34 	bl	8006574 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002b0c:	f000 f90e 	bl	8002d2c <system_init>
  lcd_Clear(WHITE);
 8002b10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b14:	f7ff fa8e 	bl	8002034 <lcd_Clear>
  test_lcd();
 8002b18:	f000 f938 	bl	8002d8c <test_lcd>
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {

    // lcd_Clear(WHITE);
	   if (flagForButton)
 8002b1c:	4b42      	ldr	r3, [pc, #264]	; (8002c28 <main+0x148>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <main+0x52>
	   {
		   flagForButton= 0;
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <main+0x148>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 8002b2a:	f7fe f82f 	bl	8000b8c <button_Scan>
//		   test_Esp();
//		  lightProcess();
		   beginStartGame();
 8002b2e:	f002 fdf9 	bl	8005724 <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <main+0x14c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d007      	beq.n	8002b4a <main+0x6a>
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <main+0x14c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d003      	beq.n	8002b4a <main+0x6a>
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <main+0x14c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d126      	bne.n	8002b98 <main+0xb8>
	   {
		   generateFruit();
 8002b4a:	f001 fc89 	bl	8004460 <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <main+0x14c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d108      	bne.n	8002b68 <main+0x88>
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <main+0x150>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <main+0x88>
		   {
			   generateWall();
 8002b5e:	f001 fda3 	bl	80046a8 <generateWall>
			   flagForGenerateWall = 0;
 8002b62:	4b33      	ldr	r3, [pc, #204]	; (8002c30 <main+0x150>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <main+0x154>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <main+0x9a>
		   {
			   flagForSnakeRun= 0;
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <main+0x154>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 8002b76:	f001 fb35 	bl	80041e4 <snakeRun>
		   }
		   if(flagForUart == 1)
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <main+0x158>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d110      	bne.n	8002ba4 <main+0xc4>
		   {
//			   uartSendPlay();
			   TOTALTIME = TOTALTIME + 1;
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <main+0x15c>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <main+0x15c>)
 8002b8c:	801a      	strh	r2, [r3, #0]
			   setTimerUart(1000);
 8002b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b92:	f002 f8f7 	bl	8004d84 <setTimerUart>
		   if(flagForUart == 1)
 8002b96:	e005      	b.n	8002ba4 <main+0xc4>
		   }
	  }else{
		  setTimerUart(0);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f002 f8f3 	bl	8004d84 <setTimerUart>
		  flagForSnakeRun = 0;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <main+0x154>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <main+0x14c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b07      	cmp	r3, #7
 8002baa:	d104      	bne.n	8002bb6 <main+0xd6>
	  {
		  pickOver(OVERMESSAGE);
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <main+0x160>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe ff27 	bl	8001a04 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <main+0x14c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d101      	bne.n	8002bc2 <main+0xe2>
	  {
		  pickStop();
 8002bbe:	f003 fb09 	bl	80061d4 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <main+0x14c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b0a      	cmp	r3, #10
 8002bc8:	d101      	bne.n	8002bce <main+0xee>
	  {
		  askToExit();
 8002bca:	f7fe fba5 	bl	8001318 <askToExit>
	  }
	  if(flagForTiming == 1)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <main+0x164>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10b      	bne.n	8002bee <main+0x10e>
	  {
		  flagForTiming = 0;
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <main+0x164>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <main+0x14c>)
 8002bde:	2207      	movs	r2, #7
 8002be0:	601a      	str	r2, [r3, #0]
		  initOverMode(1);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7fe ff50 	bl	8001a88 <initOverMode>
		  arrowMode = NORMALMODE;
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <main+0x168>)
 8002bea:	2203      	movs	r2, #3
 8002bec:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <main+0x16c>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10b      	bne.n	8002c0e <main+0x12e>
	  {
		  TIMING--;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <main+0x170>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <main+0x170>)
 8002c00:	801a      	strh	r2, [r3, #0]
		  showTiming();
 8002c02:	f003 fe91 	bl	8006928 <showTiming>
		  setTimerDeTime(1000);
 8002c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c0a:	f002 f883 	bl	8004d14 <setTimerDeTime>
	  }
	  if(flagForSendSensor == 1)
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <main+0x174>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d182      	bne.n	8002b1c <main+0x3c>
	  {
		  sensor_Read();
 8002c16:	f000 f8eb 	bl	8002df0 <sensor_Read>
		  uartSendSensor();
 8002c1a:	f004 f813 	bl	8006c44 <uartSendSensor>
		  setTimerSendSensor(10000);
 8002c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002c22:	f002 f8e7 	bl	8004df4 <setTimerSendSensor>
	   if (flagForButton)
 8002c26:	e779      	b.n	8002b1c <main+0x3c>
 8002c28:	20000174 	.word	0x20000174
 8002c2c:	20000144 	.word	0x20000144
 8002c30:	20000192 	.word	0x20000192
 8002c34:	2000017a 	.word	0x2000017a
 8002c38:	20000198 	.word	0x20000198
 8002c3c:	2000015c 	.word	0x2000015c
 8002c40:	2000015a 	.word	0x2000015a
 8002c44:	20000180 	.word	0x20000180
 8002c48:	20000014 	.word	0x20000014
 8002c4c:	2000018c 	.word	0x2000018c
 8002c50:	20000000 	.word	0x20000000
 8002c54:	2000019e 	.word	0x2000019e

08002c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b094      	sub	sp, #80	; 0x50
 8002c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c5e:	f107 0320 	add.w	r3, r7, #32
 8002c62:	2230      	movs	r2, #48	; 0x30
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f008 fc2e 	bl	800b4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <SystemClock_Config+0xcc>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <SystemClock_Config+0xcc>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <SystemClock_Config+0xcc>)
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <SystemClock_Config+0xd0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <SystemClock_Config+0xd0>)
 8002ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <SystemClock_Config+0xd0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ccc:	23a8      	movs	r3, #168	; 0xa8
 8002cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cd8:	f107 0320 	add.w	r3, r7, #32
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f005 fc8b 	bl	80085f8 <HAL_RCC_OscConfig>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ce8:	f000 f86e 	bl	8002dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cec:	230f      	movs	r3, #15
 8002cee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002cfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	2105      	movs	r1, #5
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 feec 	bl	8008ae8 <HAL_RCC_ClockConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d16:	f000 f857 	bl	8002dc8 <Error_Handler>
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3750      	adds	r7, #80	; 0x50
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40007000 	.word	0x40007000

08002d2c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2120      	movs	r1, #32
 8002d34:	4814      	ldr	r0, [pc, #80]	; (8002d88 <system_init+0x5c>)
 8002d36:	f005 fc45 	bl	80085c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	4812      	ldr	r0, [pc, #72]	; (8002d88 <system_init+0x5c>)
 8002d40:	f005 fc40 	bl	80085c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2110      	movs	r1, #16
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <system_init+0x5c>)
 8002d4a:	f005 fc3b 	bl	80085c4 <HAL_GPIO_WritePin>
	  timer_init();
 8002d4e:	f001 ff9b 	bl	8004c88 <timer_init>
	  led7_init();
 8002d52:	f7ff fde9 	bl	8002928 <led7_init>
	  button_init();
 8002d56:	f7fd feff 	bl	8000b58 <button_init>
	  lcd_init();
 8002d5a:	f7ff fbef 	bl	800253c <lcd_init>
	  uart_init_esp();
 8002d5e:	f003 fe4f 	bl	8006a00 <uart_init_esp>
	  sensor_init();
 8002d62:	f000 f837 	bl	8002dd4 <sensor_init>
	  setTimerButton(50);
 8002d66:	2032      	movs	r0, #50	; 0x32
 8002d68:	f002 f828 	bl	8004dbc <setTimerButton>
	  setTimerSnakeRun(250);
 8002d6c:	20fa      	movs	r0, #250	; 0xfa
 8002d6e:	f001 ff95 	bl	8004c9c <setTimerSnakeRun>
	  setTimerGenerateWall(4000);
 8002d72:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002d76:	f001 ffe9 	bl	8004d4c <setTimerGenerateWall>
	  setTimerSendSensor(10000);
 8002d7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8002d7e:	f002 f839 	bl	8004df4 <setTimerSendSensor>
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000

08002d8c <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 8002d92:	231f      	movs	r3, #31
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	231d      	movs	r3, #29
 8002d98:	221d      	movs	r2, #29
 8002d9a:	2113      	movs	r1, #19
 8002d9c:	2013      	movs	r0, #19
 8002d9e:	f7ff f97b 	bl	8002098 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 8002da2:	2301      	movs	r3, #1
 8002da4:	9302      	str	r3, [sp, #8]
 8002da6:	2310      	movs	r3, #16
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	231f      	movs	r3, #31
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <test_lcd+0x38>)
 8002db4:	2164      	movs	r1, #100	; 0x64
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7ff fd84 	bl	80028c4 <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800cac4 	.word	0x0800cac4

08002dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dcc:	b672      	cpsid	i
}
 8002dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <Error_Handler+0x8>
	...

08002dd4 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002dd8:	2205      	movs	r2, #5
 8002dda:	4903      	ldr	r1, [pc, #12]	; (8002de8 <sensor_init+0x14>)
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <sensor_init+0x18>)
 8002dde:	f004 f95b 	bl	8007098 <HAL_ADC_Start_DMA>
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000314 	.word	0x20000314
 8002dec:	200001b4 	.word	0x200001b4

08002df0 <sensor_Read>:

void sensor_Read(){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002df4:	2205      	movs	r2, #5
 8002df6:	4903      	ldr	r1, [pc, #12]	; (8002e04 <sensor_Read+0x14>)
 8002df8:	4803      	ldr	r0, [pc, #12]	; (8002e08 <sensor_Read+0x18>)
 8002dfa:	f004 f94d 	bl	8007098 <HAL_ADC_Start_DMA>
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000314 	.word	0x20000314
 8002e08:	200001b4 	.word	0x200001b4

08002e0c <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <sensor_GetLight+0x14>)
 8002e12:	889b      	ldrh	r3, [r3, #4]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000314 	.word	0x20000314

08002e24 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <sensor_GetPotentiometer+0x14>)
 8002e2a:	88db      	ldrh	r3, [r3, #6]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000314 	.word	0x20000314

08002e3c <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <sensor_GetTemperature+0x30>)
 8002e42:	891b      	ldrh	r3, [r3, #8]
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002e70 <sensor_GetTemperature+0x34>
 8002e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e54:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002e74 <sensor_GetTemperature+0x38>
 8002e58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e60:	eeb0 0a67 	vmov.f32	s0, s15
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	20000314 	.word	0x20000314
 8002e70:	43a50000 	.word	0x43a50000
 8002e74:	457ff000 	.word	0x457ff000

08002e78 <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	; 0x40
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	f107 000c 	add.w	r0, r7, #12
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <convert2str+0x2c>)
 8002e8a:	2132      	movs	r1, #50	; 0x32
 8002e8c:	f008 fb92 	bl	800b5b4 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	4618      	mov	r0, r3
 8002e96:	f008 fbd1 	bl	800b63c <strdup>
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3740      	adds	r7, #64	; 0x40
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	0800cad4 	.word	0x0800cad4

08002ea8 <lcdDrawWall>:

void lcdDrawWall()
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <lcdDrawWall+0x3c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b298      	uxth	r0, r3
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <lcdDrawWall+0x40>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b299      	uxth	r1, r3
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <lcdDrawWall+0x3c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b29c      	uxth	r4, r3
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <lcdDrawWall+0x40>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <lcdDrawWall+0x44>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	9200      	str	r2, [sp, #0]
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	f7ff f8df 	bl	8002098 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 8002eda:	bf00      	nop
 8002edc:	3704      	adds	r7, #4
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000018 	.word	0x20000018
 8002ee8:	20000028 	.word	0x20000028
 8002eec:	20000038 	.word	0x20000038

08002ef0 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b0a3      	sub	sp, #140	; 0x8c
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	80fb      	strh	r3, [r7, #6]
 8002efc:	4613      	mov	r3, r2
 8002efe:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002f00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f04:	f7ff f896 	bl	8002034 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002f08:	4b45      	ldr	r3, [pc, #276]	; (8003020 <setUpLcdNormalPlay+0x130>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	4b45      	ldr	r3, [pc, #276]	; (8003024 <setUpLcdNormalPlay+0x134>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	211f      	movs	r1, #31
 8002f16:	9100      	str	r1, [sp, #0]
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7ff f8bc 	bl	8002098 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 8002f20:	2301      	movs	r3, #1
 8002f22:	9302      	str	r3, [sp, #8]
 8002f24:	2310      	movs	r3, #16
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	231f      	movs	r3, #31
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f30:	4a3d      	ldr	r2, [pc, #244]	; (8003028 <setUpLcdNormalPlay+0x138>)
 8002f32:	2105      	movs	r1, #5
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff fc61 	bl	80027fc <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002f3a:	4a3c      	ldr	r2, [pc, #240]	; (800302c <setUpLcdNormalPlay+0x13c>)
 8002f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f44:	6018      	str	r0, [r3, #0]
 8002f46:	3304      	adds	r3, #4
 8002f48:	7019      	strb	r1, [r3, #0]
 8002f4a:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002f4e:	222d      	movs	r2, #45	; 0x2d
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f008 fab8 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <setUpLcdNormalPlay+0x140>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff8b 	bl	8002e78 <convert2str>
 8002f62:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 8002f64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f68:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f008 fb56 	bl	800b61c <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002f70:	4b30      	ldr	r3, [pc, #192]	; (8003034 <setUpLcdNormalPlay+0x144>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b298      	uxth	r0, r3
 8002f76:	4b30      	ldr	r3, [pc, #192]	; (8003038 <setUpLcdNormalPlay+0x148>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f80:	2301      	movs	r3, #1
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	2310      	movs	r3, #16
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f92:	f7ff fc33 	bl	80027fc <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <setUpLcdNormalPlay+0x14c>)
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa0:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	222a      	movs	r2, #42	; 0x2a
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f008 fa8b 	bl	800b4c8 <memset>
	char *str4 = convert2str(SCORE);
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <setUpLcdNormalPlay+0x150>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff5e 	bl	8002e78 <convert2str>
 8002fbc:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f008 fb29 	bl	800b61c <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <setUpLcdNormalPlay+0x154>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b298      	uxth	r0, r3
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <setUpLcdNormalPlay+0x158>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	b299      	uxth	r1, r3
 8002fda:	f107 0208 	add.w	r2, r7, #8
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9302      	str	r3, [sp, #8]
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	231f      	movs	r3, #31
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fee:	f7ff fc05 	bl	80027fc <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <setUpLcdNormalPlay+0x15c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b298      	uxth	r0, r3
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <setUpLcdNormalPlay+0x160>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b299      	uxth	r1, r3
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <setUpLcdNormalPlay+0x164>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29a      	uxth	r2, r3
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <setUpLcdNormalPlay+0x168>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4c14      	ldr	r4, [pc, #80]	; (800305c <setUpLcdNormalPlay+0x16c>)
 800300c:	9400      	str	r4, [sp, #0]
 800300e:	f7ff fa1b 	bl	8002448 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8003012:	f7ff ff49 	bl	8002ea8 <lcdDrawWall>
}
 8003016:	bf00      	nop
 8003018:	377c      	adds	r7, #124	; 0x7c
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop
 8003020:	20000018 	.word	0x20000018
 8003024:	20000028 	.word	0x20000028
 8003028:	0800cad8 	.word	0x0800cad8
 800302c:	0800cae8 	.word	0x0800cae8
 8003030:	20000130 	.word	0x20000130
 8003034:	20000064 	.word	0x20000064
 8003038:	20000068 	.word	0x20000068
 800303c:	0800cb1c 	.word	0x0800cb1c
 8003040:	20000132 	.word	0x20000132
 8003044:	2000006c 	.word	0x2000006c
 8003048:	20000070 	.word	0x20000070
 800304c:	20000074 	.word	0x20000074
 8003050:	20000078 	.word	0x20000078
 8003054:	2000007c 	.word	0x2000007c
 8003058:	20000080 	.word	0x20000080
 800305c:	0800fe74 	.word	0x0800fe74

08003060 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b0a3      	sub	sp, #140	; 0x8c
 8003064:	af04      	add	r7, sp, #16
 8003066:	4603      	mov	r3, r0
 8003068:	460a      	mov	r2, r1
 800306a:	80fb      	strh	r3, [r7, #6]
 800306c:	4613      	mov	r3, r2
 800306e:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8003070:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003074:	f7fe ffde 	bl	8002034 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8003078:	4b45      	ldr	r3, [pc, #276]	; (8003190 <setUpLcdTimingPlay+0x130>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	b29a      	uxth	r2, r3
 800307e:	4b45      	ldr	r3, [pc, #276]	; (8003194 <setUpLcdTimingPlay+0x134>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	211f      	movs	r1, #31
 8003086:	9100      	str	r1, [sp, #0]
 8003088:	2100      	movs	r1, #0
 800308a:	2000      	movs	r0, #0
 800308c:	f7ff f804 	bl	8002098 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 8003090:	2301      	movs	r3, #1
 8003092:	9302      	str	r3, [sp, #8]
 8003094:	2310      	movs	r3, #16
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	231f      	movs	r3, #31
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030a0:	4a3d      	ldr	r2, [pc, #244]	; (8003198 <setUpLcdTimingPlay+0x138>)
 80030a2:	2105      	movs	r1, #5
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7ff fba9 	bl	80027fc <lcd_ShowStr>

	char str1[50] = "ID: ";
 80030aa:	4a3c      	ldr	r2, [pc, #240]	; (800319c <setUpLcdTimingPlay+0x13c>)
 80030ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030b4:	6018      	str	r0, [r3, #0]
 80030b6:	3304      	adds	r3, #4
 80030b8:	7019      	strb	r1, [r3, #0]
 80030ba:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80030be:	222d      	movs	r2, #45	; 0x2d
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f008 fa00 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 80030c8:	4b35      	ldr	r3, [pc, #212]	; (80031a0 <setUpLcdTimingPlay+0x140>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fed3 	bl	8002e78 <convert2str>
 80030d2:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 80030d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030d8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030da:	4618      	mov	r0, r3
 80030dc:	f008 fa9e 	bl	800b61c <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <setUpLcdTimingPlay+0x144>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b298      	uxth	r0, r3
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <setUpLcdTimingPlay+0x148>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b299      	uxth	r1, r3
 80030ec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80030f0:	2301      	movs	r3, #1
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	2310      	movs	r3, #16
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003102:	f7ff fb7b 	bl	80027fc <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <setUpLcdTimingPlay+0x14c>)
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003110:	e883 0003 	stmia.w	r3, {r0, r1}
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	222a      	movs	r2, #42	; 0x2a
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f008 f9d3 	bl	800b4c8 <memset>
	char *str4 = convert2str(0);
 8003122:	2000      	movs	r0, #0
 8003124:	f7ff fea8 	bl	8002e78 <convert2str>
 8003128:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003130:	4618      	mov	r0, r3
 8003132:	f008 fa73 	bl	800b61c <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <setUpLcdTimingPlay+0x150>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b298      	uxth	r0, r3
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <setUpLcdTimingPlay+0x154>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	3305      	adds	r3, #5
 8003144:	b299      	uxth	r1, r3
 8003146:	f107 0208 	add.w	r2, r7, #8
 800314a:	2301      	movs	r3, #1
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	2310      	movs	r3, #16
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800315c:	f7ff fb4e 	bl	80027fc <lcd_ShowStr>

	showTiming();
 8003160:	f003 fbe2 	bl	8006928 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <setUpLcdTimingPlay+0x158>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b298      	uxth	r0, r3
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <setUpLcdTimingPlay+0x15c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b299      	uxth	r1, r3
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <setUpLcdTimingPlay+0x160>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <setUpLcdTimingPlay+0x164>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4c12      	ldr	r4, [pc, #72]	; (80031c8 <setUpLcdTimingPlay+0x168>)
 800317e:	9400      	str	r4, [sp, #0]
 8003180:	f7ff f962 	bl	8002448 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8003184:	f7ff fe90 	bl	8002ea8 <lcdDrawWall>
}
 8003188:	bf00      	nop
 800318a:	377c      	adds	r7, #124	; 0x7c
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	20000018 	.word	0x20000018
 8003194:	20000028 	.word	0x20000028
 8003198:	0800cb50 	.word	0x0800cb50
 800319c:	0800cae8 	.word	0x0800cae8
 80031a0:	20000130 	.word	0x20000130
 80031a4:	20000064 	.word	0x20000064
 80031a8:	20000068 	.word	0x20000068
 80031ac:	0800cb1c 	.word	0x0800cb1c
 80031b0:	2000006c 	.word	0x2000006c
 80031b4:	20000070 	.word	0x20000070
 80031b8:	20000074 	.word	0x20000074
 80031bc:	20000078 	.word	0x20000078
 80031c0:	2000007c 	.word	0x2000007c
 80031c4:	20000080 	.word	0x20000080
 80031c8:	0800fe74 	.word	0x0800fe74

080031cc <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b0a3      	sub	sp, #140	; 0x8c
 80031d0:	af04      	add	r7, sp, #16
 80031d2:	4603      	mov	r3, r0
 80031d4:	460a      	mov	r2, r1
 80031d6:	80fb      	strh	r3, [r7, #6]
 80031d8:	4613      	mov	r3, r2
 80031da:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80031dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031e0:	f7fe ff28 	bl	8002034 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80031e4:	4b45      	ldr	r3, [pc, #276]	; (80032fc <setUpLcdAdvancePlay+0x130>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	4b45      	ldr	r3, [pc, #276]	; (8003300 <setUpLcdAdvancePlay+0x134>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	211f      	movs	r1, #31
 80031f2:	9100      	str	r1, [sp, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fe ff4e 	bl	8002098 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 80031fc:	2301      	movs	r3, #1
 80031fe:	9302      	str	r3, [sp, #8]
 8003200:	2310      	movs	r3, #16
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	231f      	movs	r3, #31
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800320c:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <setUpLcdAdvancePlay+0x138>)
 800320e:	2105      	movs	r1, #5
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff faf3 	bl	80027fc <lcd_ShowStr>

	char str1[50] = "ID: ";
 8003216:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <setUpLcdAdvancePlay+0x13c>)
 8003218:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800321c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003220:	6018      	str	r0, [r3, #0]
 8003222:	3304      	adds	r3, #4
 8003224:	7019      	strb	r1, [r3, #0]
 8003226:	f107 0341 	add.w	r3, r7, #65	; 0x41
 800322a:	222d      	movs	r2, #45	; 0x2d
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f008 f94a 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <setUpLcdAdvancePlay+0x140>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fe1d 	bl	8002e78 <convert2str>
 800323e:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8003240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003244:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003246:	4618      	mov	r0, r3
 8003248:	f008 f9e8 	bl	800b61c <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <setUpLcdAdvancePlay+0x144>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	b298      	uxth	r0, r3
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <setUpLcdAdvancePlay+0x148>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b299      	uxth	r1, r3
 8003258:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800325c:	2301      	movs	r3, #1
 800325e:	9302      	str	r3, [sp, #8]
 8003260:	2310      	movs	r3, #16
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800326e:	f7ff fac5 	bl	80027fc <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <setUpLcdAdvancePlay+0x14c>)
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800327c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003280:	f107 0310 	add.w	r3, r7, #16
 8003284:	222a      	movs	r2, #42	; 0x2a
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f008 f91d 	bl	800b4c8 <memset>
	char *str4 = convert2str(0);
 800328e:	2000      	movs	r0, #0
 8003290:	f7ff fdf2 	bl	8002e78 <convert2str>
 8003294:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800329c:	4618      	mov	r0, r3
 800329e:	f008 f9bd 	bl	800b61c <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <setUpLcdAdvancePlay+0x150>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b298      	uxth	r0, r3
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <setUpLcdAdvancePlay+0x154>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3305      	adds	r3, #5
 80032b0:	b299      	uxth	r1, r3
 80032b2:	f107 0208 	add.w	r2, r7, #8
 80032b6:	2301      	movs	r3, #1
 80032b8:	9302      	str	r3, [sp, #8]
 80032ba:	2310      	movs	r3, #16
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032c8:	f7ff fa98 	bl	80027fc <lcd_ShowStr>

	showTiming();
 80032cc:	f003 fb2c 	bl	8006928 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <setUpLcdAdvancePlay+0x158>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b298      	uxth	r0, r3
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <setUpLcdAdvancePlay+0x15c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b299      	uxth	r1, r3
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <setUpLcdAdvancePlay+0x160>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <setUpLcdAdvancePlay+0x164>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4c12      	ldr	r4, [pc, #72]	; (8003334 <setUpLcdAdvancePlay+0x168>)
 80032ea:	9400      	str	r4, [sp, #0]
 80032ec:	f7ff f8ac 	bl	8002448 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 80032f0:	f7ff fdda 	bl	8002ea8 <lcdDrawWall>
}
 80032f4:	bf00      	nop
 80032f6:	377c      	adds	r7, #124	; 0x7c
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	20000018 	.word	0x20000018
 8003300:	20000028 	.word	0x20000028
 8003304:	0800cb60 	.word	0x0800cb60
 8003308:	0800cae8 	.word	0x0800cae8
 800330c:	20000130 	.word	0x20000130
 8003310:	20000064 	.word	0x20000064
 8003314:	20000068 	.word	0x20000068
 8003318:	0800cb1c 	.word	0x0800cb1c
 800331c:	2000006c 	.word	0x2000006c
 8003320:	20000070 	.word	0x20000070
 8003324:	20000074 	.word	0x20000074
 8003328:	20000078 	.word	0x20000078
 800332c:	2000007c 	.word	0x2000007c
 8003330:	20000080 	.word	0x20000080
 8003334:	0800fe74 	.word	0x0800fe74

08003338 <printScore>:

void printScore()
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b094      	sub	sp, #80	; 0x50
 800333c:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 800333e:	4b34      	ldr	r3, [pc, #208]	; (8003410 <printScore+0xd8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d12a      	bne.n	800339c <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 8003346:	4a33      	ldr	r2, [pc, #204]	; (8003414 <printScore+0xdc>)
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800334e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	222a      	movs	r2, #42	; 0x2a
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f008 f8b4 	bl	800b4c8 <memset>
		char *str4 = convert2str(SCORE);
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <printScore+0xe0>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fd87 	bl	8002e78 <convert2str>
 800336a:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003370:	4618      	mov	r0, r3
 8003372:	f008 f953 	bl	800b61c <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <printScore+0xe4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b298      	uxth	r0, r3
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <printScore+0xe8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	3305      	adds	r3, #5
 8003384:	b299      	uxth	r1, r3
 8003386:	1d3a      	adds	r2, r7, #4
 8003388:	2300      	movs	r3, #0
 800338a:	9302      	str	r3, [sp, #8]
 800338c:	2310      	movs	r3, #16
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	231f      	movs	r3, #31
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003398:	f7ff fa30 	bl	80027fc <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 800339c:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <printScore+0xd8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d003      	beq.n	80033ac <printScore+0x74>
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <printScore+0xd8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d12c      	bne.n	8003406 <printScore+0xce>
	{
		char str3[50] = "SCORE: ";
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <printScore+0xdc>)
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	222a      	movs	r2, #42	; 0x2a
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f008 f881 	bl	800b4c8 <memset>
		char *str4 = convert2str(SCORE);
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <printScore+0xe0>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fd54 	bl	8002e78 <convert2str>
 80033d0:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d6:	4618      	mov	r0, r3
 80033d8:	f008 f920 	bl	800b61c <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <printScore+0xe4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b298      	uxth	r0, r3
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <printScore+0xe8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3305      	adds	r3, #5
 80033ea:	b299      	uxth	r1, r3
 80033ec:	1d3a      	adds	r2, r7, #4
 80033ee:	2300      	movs	r3, #0
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	2310      	movs	r3, #16
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	231f      	movs	r3, #31
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033fe:	f7ff f9fd 	bl	80027fc <lcd_ShowStr>

		showTiming();
 8003402:	f003 fa91 	bl	8006928 <showTiming>
	}
}
 8003406:	bf00      	nop
 8003408:	3740      	adds	r7, #64	; 0x40
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000144 	.word	0x20000144
 8003414:	0800cb1c 	.word	0x0800cb1c
 8003418:	20000132 	.word	0x20000132
 800341c:	2000006c 	.word	0x2000006c
 8003420:	20000070 	.word	0x20000070

08003424 <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b083      	sub	sp, #12
 8003428:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 800342a:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <drawHeadSnake+0x244>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b03      	cmp	r3, #3
 8003430:	f200 8114 	bhi.w	800365c <drawHeadSnake+0x238>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <drawHeadSnake+0x18>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	080035d5 	.word	0x080035d5
 8003440:	08003555 	.word	0x08003555
 8003444:	080034cd 	.word	0x080034cd
 8003448:	0800344d 	.word	0x0800344d
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800344c:	4b86      	ldr	r3, [pc, #536]	; (8003668 <drawHeadSnake+0x244>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	b298      	uxth	r0, r3
 8003452:	4b85      	ldr	r3, [pc, #532]	; (8003668 <drawHeadSnake+0x244>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003458:	4b83      	ldr	r3, [pc, #524]	; (8003668 <drawHeadSnake+0x244>)
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800345c:	b29b      	uxth	r3, r3
 800345e:	3309      	adds	r3, #9
 8003460:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003462:	4b81      	ldr	r3, [pc, #516]	; (8003668 <drawHeadSnake+0x244>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003466:	b29b      	uxth	r3, r3
 8003468:	3309      	adds	r3, #9
 800346a:	b29b      	uxth	r3, r3
 800346c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003470:	9400      	str	r4, [sp, #0]
 8003472:	f7fe fe11 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003476:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <drawHeadSnake+0x244>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	b298      	uxth	r0, r3
 800347c:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <drawHeadSnake+0x244>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8003482:	4b79      	ldr	r3, [pc, #484]	; (8003668 <drawHeadSnake+0x244>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003486:	b29b      	uxth	r3, r3
 8003488:	3304      	adds	r3, #4
 800348a:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 800348c:	4b76      	ldr	r3, [pc, #472]	; (8003668 <drawHeadSnake+0x244>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003490:	b29b      	uxth	r3, r3
 8003492:	3304      	adds	r3, #4
 8003494:	b29b      	uxth	r3, r3
 8003496:	2400      	movs	r4, #0
 8003498:	9400      	str	r4, [sp, #0]
 800349a:	f7fe fdfd 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800349e:	4b72      	ldr	r3, [pc, #456]	; (8003668 <drawHeadSnake+0x244>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3305      	adds	r3, #5
 80034a6:	b298      	uxth	r0, r3
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <drawHeadSnake+0x244>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 80034ae:	4b6e      	ldr	r3, [pc, #440]	; (8003668 <drawHeadSnake+0x244>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3309      	adds	r3, #9
 80034b6:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 80034b8:	4b6b      	ldr	r3, [pc, #428]	; (8003668 <drawHeadSnake+0x244>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3304      	adds	r3, #4
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2400      	movs	r4, #0
 80034c4:	9400      	str	r4, [sp, #0]
 80034c6:	f7fe fde7 	bl	8002098 <lcd_Fill>
		break;
 80034ca:	e0c8      	b.n	800365e <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80034cc:	4b66      	ldr	r3, [pc, #408]	; (8003668 <drawHeadSnake+0x244>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	b298      	uxth	r0, r3
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <drawHeadSnake+0x244>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80034d8:	4b63      	ldr	r3, [pc, #396]	; (8003668 <drawHeadSnake+0x244>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3309      	adds	r3, #9
 80034e0:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80034e2:	4b61      	ldr	r3, [pc, #388]	; (8003668 <drawHeadSnake+0x244>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3309      	adds	r3, #9
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80034f0:	9400      	str	r4, [sp, #0]
 80034f2:	f7fe fdd1 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <drawHeadSnake+0x244>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	b298      	uxth	r0, r3
 80034fc:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <drawHeadSnake+0x244>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	b29b      	uxth	r3, r3
 8003502:	3305      	adds	r3, #5
 8003504:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003506:	4b58      	ldr	r3, [pc, #352]	; (8003668 <drawHeadSnake+0x244>)
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800350a:	b29b      	uxth	r3, r3
 800350c:	3304      	adds	r3, #4
 800350e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003510:	4b55      	ldr	r3, [pc, #340]	; (8003668 <drawHeadSnake+0x244>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003514:	b29b      	uxth	r3, r3
 8003516:	3309      	adds	r3, #9
 8003518:	b29b      	uxth	r3, r3
 800351a:	2400      	movs	r4, #0
 800351c:	9400      	str	r4, [sp, #0]
 800351e:	f7fe fdbb 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <drawHeadSnake+0x244>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	b29b      	uxth	r3, r3
 8003528:	3305      	adds	r3, #5
 800352a:	b298      	uxth	r0, r3
 800352c:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <drawHeadSnake+0x244>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	b29b      	uxth	r3, r3
 8003532:	3305      	adds	r3, #5
 8003534:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8003536:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <drawHeadSnake+0x244>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 800353a:	b29b      	uxth	r3, r3
 800353c:	3309      	adds	r3, #9
 800353e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <drawHeadSnake+0x244>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8003544:	b29b      	uxth	r3, r3
 8003546:	3309      	adds	r3, #9
 8003548:	b29b      	uxth	r3, r3
 800354a:	2400      	movs	r4, #0
 800354c:	9400      	str	r4, [sp, #0]
 800354e:	f7fe fda3 	bl	8002098 <lcd_Fill>
		break;
 8003552:	e084      	b.n	800365e <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003554:	4b44      	ldr	r3, [pc, #272]	; (8003668 <drawHeadSnake+0x244>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	b298      	uxth	r0, r3
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <drawHeadSnake+0x244>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003560:	4b41      	ldr	r3, [pc, #260]	; (8003668 <drawHeadSnake+0x244>)
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003564:	b29b      	uxth	r3, r3
 8003566:	3309      	adds	r3, #9
 8003568:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <drawHeadSnake+0x244>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800356e:	b29b      	uxth	r3, r3
 8003570:	3309      	adds	r3, #9
 8003572:	b29b      	uxth	r3, r3
 8003574:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003578:	9400      	str	r4, [sp, #0]
 800357a:	f7fe fd8d 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <drawHeadSnake+0x244>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	b298      	uxth	r0, r3
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <drawHeadSnake+0x244>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <drawHeadSnake+0x244>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800358e:	b29b      	uxth	r3, r3
 8003590:	3304      	adds	r3, #4
 8003592:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <drawHeadSnake+0x244>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003598:	b29b      	uxth	r3, r3
 800359a:	3304      	adds	r3, #4
 800359c:	b29b      	uxth	r3, r3
 800359e:	2400      	movs	r4, #0
 80035a0:	9400      	str	r4, [sp, #0]
 80035a2:	f7fe fd79 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <drawHeadSnake+0x244>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	b298      	uxth	r0, r3
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <drawHeadSnake+0x244>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3305      	adds	r3, #5
 80035b4:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 80035b6:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <drawHeadSnake+0x244>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3304      	adds	r3, #4
 80035be:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <drawHeadSnake+0x244>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3309      	adds	r3, #9
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2400      	movs	r4, #0
 80035cc:	9400      	str	r4, [sp, #0]
 80035ce:	f7fe fd63 	bl	8002098 <lcd_Fill>
		break;
 80035d2:	e044      	b.n	800365e <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <drawHeadSnake+0x244>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	b298      	uxth	r0, r3
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <drawHeadSnake+0x244>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <drawHeadSnake+0x244>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3309      	adds	r3, #9
 80035e8:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <drawHeadSnake+0x244>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3309      	adds	r3, #9
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80035f8:	9400      	str	r4, [sp, #0]
 80035fa:	f7fe fd4d 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <drawHeadSnake+0x244>)
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	b29b      	uxth	r3, r3
 8003604:	3305      	adds	r3, #5
 8003606:	b298      	uxth	r0, r3
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <drawHeadSnake+0x244>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <drawHeadSnake+0x244>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8003612:	b29b      	uxth	r3, r3
 8003614:	3309      	adds	r3, #9
 8003616:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <drawHeadSnake+0x244>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800361c:	b29b      	uxth	r3, r3
 800361e:	3304      	adds	r3, #4
 8003620:	b29b      	uxth	r3, r3
 8003622:	2400      	movs	r4, #0
 8003624:	9400      	str	r4, [sp, #0]
 8003626:	f7fe fd37 	bl	8002098 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <drawHeadSnake+0x244>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	b29b      	uxth	r3, r3
 8003630:	3305      	adds	r3, #5
 8003632:	b298      	uxth	r0, r3
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <drawHeadSnake+0x244>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	b29b      	uxth	r3, r3
 800363a:	3305      	adds	r3, #5
 800363c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <drawHeadSnake+0x244>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8003642:	b29b      	uxth	r3, r3
 8003644:	3309      	adds	r3, #9
 8003646:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <drawHeadSnake+0x244>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 800364c:	b29b      	uxth	r3, r3
 800364e:	3309      	adds	r3, #9
 8003650:	b29b      	uxth	r3, r3
 8003652:	2400      	movs	r4, #0
 8003654:	9400      	str	r4, [sp, #0]
 8003656:	f7fe fd1f 	bl	8002098 <lcd_Fill>
		break;
 800365a:	e000      	b.n	800365e <drawHeadSnake+0x23a>
	default:
		break;
 800365c:	bf00      	nop
	}
}
 800365e:	bf00      	nop
 8003660:	3704      	adds	r7, #4
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	bf00      	nop
 8003668:	20001a9c 	.word	0x20001a9c

0800366c <goLeft>:

void goLeft()
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003672:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <goLeft+0x168>)
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 80a7 	bne.w	80037ca <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 800367c:	4b55      	ldr	r3, [pc, #340]	; (80037d4 <goLeft+0x168>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d103      	bne.n	800368c <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <goLeft+0x168>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4798      	blx	r3
			break;
 800368a:	e09f      	b.n	80037cc <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 800368c:	4b51      	ldr	r3, [pc, #324]	; (80037d4 <goLeft+0x168>)
 800368e:	2201      	movs	r2, #1
 8003690:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e091      	b.n	80037bc <goLeft+0x150>
			{
				if (i == 0)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d128      	bne.n	80036f0 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800369e:	4a4d      	ldr	r2, [pc, #308]	; (80037d4 <goLeft+0x168>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3305      	adds	r3, #5
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	f107 020c 	add.w	r2, r7, #12
 80036ac:	3304      	adds	r3, #4
 80036ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036b2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 80036b6:	4a47      	ldr	r2, [pc, #284]	; (80037d4 <goLeft+0x168>)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3305      	adds	r3, #5
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f1a3 020a 	sub.w	r2, r3, #10
 80036c6:	4943      	ldr	r1, [pc, #268]	; (80037d4 <goLeft+0x168>)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3305      	adds	r3, #5
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 80036d2:	4a40      	ldr	r2, [pc, #256]	; (80037d4 <goLeft+0x168>)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3305      	adds	r3, #5
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	493d      	ldr	r1, [pc, #244]	; (80037d4 <goLeft+0x168>)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3305      	adds	r3, #5
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80036ea:	f7ff fe9b 	bl	8003424 <drawHeadSnake>
 80036ee:	e062      	b.n	80037b6 <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80036f0:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <goLeft+0x168>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3305      	adds	r3, #5
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	1d3a      	adds	r2, r7, #4
 80036fc:	3304      	adds	r3, #4
 80036fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003702:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003706:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <goLeft+0x168>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3305      	adds	r3, #5
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	f107 020c 	add.w	r2, r7, #12
 8003716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800371a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	1d3a      	adds	r2, r7, #4
 8003724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003728:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d123      	bne.n	800377a <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003732:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <goLeft+0x168>)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	3305      	adds	r3, #5
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b298      	uxth	r0, r3
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <goLeft+0x168>)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3305      	adds	r3, #5
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <goLeft+0x168>)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3305      	adds	r3, #5
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800375a:	b29b      	uxth	r3, r3
 800375c:	3309      	adds	r3, #9
 800375e:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003760:	4c1c      	ldr	r4, [pc, #112]	; (80037d4 <goLeft+0x168>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3305      	adds	r3, #5
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4423      	add	r3, r4
 800376a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800376c:	b29b      	uxth	r3, r3
 800376e:	3309      	adds	r3, #9
 8003770:	b29b      	uxth	r3, r3
 8003772:	2400      	movs	r4, #0
 8003774:	9400      	str	r4, [sp, #0]
 8003776:	f7fe fc8f 	bl	8002098 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <goLeft+0x168>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	3b01      	subs	r3, #1
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	429a      	cmp	r2, r3
 8003784:	d117      	bne.n	80037b6 <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <goLeft+0x168>)
 8003788:	331c      	adds	r3, #28
 800378a:	1d3a      	adds	r2, r7, #4
 800378c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003790:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	b298      	uxth	r0, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	b299      	uxth	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3309      	adds	r3, #9
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3309      	adds	r3, #9
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80037b0:	9400      	str	r4, [sp, #0]
 80037b2:	f7fe fc71 	bl	8002098 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <goLeft+0x168>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	f6ff af68 	blt.w	8003698 <goLeft+0x2c>
					}
				}
			}
			break;
 80037c8:	e000      	b.n	80037cc <goLeft+0x160>
		}
	}
 80037ca:	bf00      	nop
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}
 80037d4:	20001a9c 	.word	0x20001a9c

080037d8 <goRight>:

void goRight()
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 80037de:	4b58      	ldr	r3, [pc, #352]	; (8003940 <goRight+0x168>)
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 80a7 	bne.w	8003936 <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <goRight+0x168>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d103      	bne.n	80037f8 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <goRight+0x168>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4798      	blx	r3
			break;
 80037f6:	e09f      	b.n	8003938 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 80037f8:	4b51      	ldr	r3, [pc, #324]	; (8003940 <goRight+0x168>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e091      	b.n	8003928 <goRight+0x150>
			{
				if (i == 0)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d128      	bne.n	800385c <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800380a:	4a4d      	ldr	r2, [pc, #308]	; (8003940 <goRight+0x168>)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3305      	adds	r3, #5
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	f107 020c 	add.w	r2, r7, #12
 8003818:	3304      	adds	r3, #4
 800381a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800381e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 8003822:	4a47      	ldr	r2, [pc, #284]	; (8003940 <goRight+0x168>)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3305      	adds	r3, #5
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f103 020a 	add.w	r2, r3, #10
 8003832:	4943      	ldr	r1, [pc, #268]	; (8003940 <goRight+0x168>)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3305      	adds	r3, #5
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 800383e:	4a40      	ldr	r2, [pc, #256]	; (8003940 <goRight+0x168>)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3305      	adds	r3, #5
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	493d      	ldr	r1, [pc, #244]	; (8003940 <goRight+0x168>)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3305      	adds	r3, #5
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003856:	f7ff fde5 	bl	8003424 <drawHeadSnake>
 800385a:	e062      	b.n	8003922 <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <goRight+0x168>)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3305      	adds	r3, #5
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	1d3a      	adds	r2, r7, #4
 8003868:	3304      	adds	r3, #4
 800386a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800386e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003872:	4a33      	ldr	r2, [pc, #204]	; (8003940 <goRight+0x168>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3305      	adds	r3, #5
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	f107 020c 	add.w	r2, r7, #12
 8003882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003886:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800388a:	f107 030c 	add.w	r3, r7, #12
 800388e:	1d3a      	adds	r2, r7, #4
 8003890:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003894:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d123      	bne.n	80038e6 <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <goRight+0x168>)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3305      	adds	r3, #5
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	b298      	uxth	r0, r3
 80038ac:	4a24      	ldr	r2, [pc, #144]	; (8003940 <goRight+0x168>)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3305      	adds	r3, #5
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <goRight+0x168>)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3305      	adds	r3, #5
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3309      	adds	r3, #9
 80038ca:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80038cc:	4c1c      	ldr	r4, [pc, #112]	; (8003940 <goRight+0x168>)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3305      	adds	r3, #5
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4423      	add	r3, r4
 80038d6:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3309      	adds	r3, #9
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2400      	movs	r4, #0
 80038e0:	9400      	str	r4, [sp, #0]
 80038e2:	f7fe fbd9 	bl	8002098 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <goRight+0x168>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	3b01      	subs	r3, #1
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d117      	bne.n	8003922 <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <goRight+0x168>)
 80038f4:	331c      	adds	r3, #28
 80038f6:	1d3a      	adds	r2, r7, #4
 80038f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038fc:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	b298      	uxth	r0, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	b299      	uxth	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	b29b      	uxth	r3, r3
 800390c:	3309      	adds	r3, #9
 800390e:	b29a      	uxth	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	b29b      	uxth	r3, r3
 8003914:	3309      	adds	r3, #9
 8003916:	b29b      	uxth	r3, r3
 8003918:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800391c:	9400      	str	r4, [sp, #0]
 800391e:	f7fe fbbb 	bl	8002098 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <goRight+0x168>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	429a      	cmp	r2, r3
 8003930:	f6ff af68 	blt.w	8003804 <goRight+0x2c>
					}
				}
			}
			break;
 8003934:	e000      	b.n	8003938 <goRight+0x160>
		}
	}
 8003936:	bf00      	nop
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	20001a9c 	.word	0x20001a9c

08003944 <goUp>:

void goUp()
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <goUp+0x168>)
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 80a7 	bne.w	8003aa2 <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003954:	4b55      	ldr	r3, [pc, #340]	; (8003aac <goUp+0x168>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d103      	bne.n	8003964 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 800395c:	4b53      	ldr	r3, [pc, #332]	; (8003aac <goUp+0x168>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4798      	blx	r3
			break;
 8003962:	e09f      	b.n	8003aa4 <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 8003964:	4b51      	ldr	r3, [pc, #324]	; (8003aac <goUp+0x168>)
 8003966:	2203      	movs	r2, #3
 8003968:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e091      	b.n	8003a94 <goUp+0x150>
			{
				if (i == 0)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d128      	bne.n	80039c8 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003976:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <goUp+0x168>)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3305      	adds	r3, #5
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	f107 020c 	add.w	r2, r7, #12
 8003984:	3304      	adds	r3, #4
 8003986:	e893 0003 	ldmia.w	r3, {r0, r1}
 800398a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 800398e:	4a47      	ldr	r2, [pc, #284]	; (8003aac <goUp+0x168>)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3305      	adds	r3, #5
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	4944      	ldr	r1, [pc, #272]	; (8003aac <goUp+0x168>)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3305      	adds	r3, #5
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 80039a6:	4a41      	ldr	r2, [pc, #260]	; (8003aac <goUp+0x168>)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3305      	adds	r3, #5
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f1a3 020a 	sub.w	r2, r3, #10
 80039b6:	493d      	ldr	r1, [pc, #244]	; (8003aac <goUp+0x168>)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3305      	adds	r3, #5
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80039c2:	f7ff fd2f 	bl	8003424 <drawHeadSnake>
 80039c6:	e062      	b.n	8003a8e <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80039c8:	4a38      	ldr	r2, [pc, #224]	; (8003aac <goUp+0x168>)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3305      	adds	r3, #5
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	1d3a      	adds	r2, r7, #4
 80039d4:	3304      	adds	r3, #4
 80039d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039da:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 80039de:	4a33      	ldr	r2, [pc, #204]	; (8003aac <goUp+0x168>)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	3305      	adds	r3, #5
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	f107 020c 	add.w	r2, r7, #12
 80039ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039f2:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	1d3a      	adds	r2, r7, #4
 80039fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a00:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d123      	bne.n	8003a52 <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a0a:	4a28      	ldr	r2, [pc, #160]	; (8003aac <goUp+0x168>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3305      	adds	r3, #5
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b298      	uxth	r0, r3
 8003a18:	4a24      	ldr	r2, [pc, #144]	; (8003aac <goUp+0x168>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	3305      	adds	r3, #5
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003a26:	4a21      	ldr	r2, [pc, #132]	; (8003aac <goUp+0x168>)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3305      	adds	r3, #5
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3309      	adds	r3, #9
 8003a36:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003a38:	4c1c      	ldr	r4, [pc, #112]	; (8003aac <goUp+0x168>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3305      	adds	r3, #5
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4423      	add	r3, r4
 8003a42:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3309      	adds	r3, #9
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2400      	movs	r4, #0
 8003a4c:	9400      	str	r4, [sp, #0]
 8003a4e:	f7fe fb23 	bl	8002098 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <goUp+0x168>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	3b01      	subs	r3, #1
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d117      	bne.n	8003a8e <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <goUp+0x168>)
 8003a60:	331c      	adds	r3, #28
 8003a62:	1d3a      	adds	r2, r7, #4
 8003a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a68:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	b298      	uxth	r0, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	b299      	uxth	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3309      	adds	r3, #9
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3309      	adds	r3, #9
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003a88:	9400      	str	r4, [sp, #0]
 8003a8a:	f7fe fb05 	bl	8002098 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <goUp+0x168>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	f6ff af68 	blt.w	8003970 <goUp+0x2c>
					}
				}
			}
			break;
 8003aa0:	e000      	b.n	8003aa4 <goUp+0x160>
		}
	}
 8003aa2:	bf00      	nop
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	20001a9c 	.word	0x20001a9c

08003ab0 <goDown>:

void goDown()
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003ab6:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <goDown+0x168>)
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 80a7 	bne.w	8003c0e <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <goDown+0x168>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d103      	bne.n	8003ad0 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <goDown+0x168>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4798      	blx	r3
			break;
 8003ace:	e09f      	b.n	8003c10 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 8003ad0:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <goDown+0x168>)
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e091      	b.n	8003c00 <goDown+0x150>
			{
				if (i == 0)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d128      	bne.n	8003b34 <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003ae2:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <goDown+0x168>)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	f107 020c 	add.w	r2, r7, #12
 8003af0:	3304      	adds	r3, #4
 8003af2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003af6:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8003afa:	4a47      	ldr	r2, [pc, #284]	; (8003c18 <goDown+0x168>)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3305      	adds	r3, #5
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	4944      	ldr	r1, [pc, #272]	; (8003c18 <goDown+0x168>)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3305      	adds	r3, #5
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 8003b12:	4a41      	ldr	r2, [pc, #260]	; (8003c18 <goDown+0x168>)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3305      	adds	r3, #5
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f103 020a 	add.w	r2, r3, #10
 8003b22:	493d      	ldr	r1, [pc, #244]	; (8003c18 <goDown+0x168>)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3305      	adds	r3, #5
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003b2e:	f7ff fc79 	bl	8003424 <drawHeadSnake>
 8003b32:	e062      	b.n	8003bfa <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <goDown+0x168>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3305      	adds	r3, #5
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	1d3a      	adds	r2, r7, #4
 8003b40:	3304      	adds	r3, #4
 8003b42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b46:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003b4a:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <goDown+0x168>)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3305      	adds	r3, #5
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	f107 020c 	add.w	r2, r7, #12
 8003b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b5e:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	1d3a      	adds	r2, r7, #4
 8003b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b6c:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d123      	bne.n	8003bbe <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003b76:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <goDown+0x168>)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3305      	adds	r3, #5
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	b298      	uxth	r0, r3
 8003b84:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <goDown+0x168>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	3305      	adds	r3, #5
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <goDown+0x168>)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3305      	adds	r3, #5
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3309      	adds	r3, #9
 8003ba2:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003ba4:	4c1c      	ldr	r4, [pc, #112]	; (8003c18 <goDown+0x168>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3305      	adds	r3, #5
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4423      	add	r3, r4
 8003bae:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3309      	adds	r3, #9
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2400      	movs	r4, #0
 8003bb8:	9400      	str	r4, [sp, #0]
 8003bba:	f7fe fa6d 	bl	8002098 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003bbe:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <goDown+0x168>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d117      	bne.n	8003bfa <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <goDown+0x168>)
 8003bcc:	331c      	adds	r3, #28
 8003bce:	1d3a      	adds	r2, r7, #4
 8003bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd4:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	b298      	uxth	r0, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	b299      	uxth	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3309      	adds	r3, #9
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3309      	adds	r3, #9
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003bf4:	9400      	str	r4, [sp, #0]
 8003bf6:	f7fe fa4f 	bl	8002098 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <goDown+0x168>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	f6ff af68 	blt.w	8003adc <goDown+0x2c>
					}
				}
			}
			break;
 8003c0c:	e000      	b.n	8003c10 <goDown+0x160>
		}
	}
 8003c0e:	bf00      	nop
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd90      	pop	{r4, r7, pc}
 8003c18:	20001a9c 	.word	0x20001a9c

08003c1c <resumeGame>:

void resumeGame()
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af02      	add	r7, sp, #8
	uartSendContinuePlay();
 8003c22:	f002 ff49 	bl	8006ab8 <uartSendContinuePlay>
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 8003c26:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <resumeGame+0x1e0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b74      	ldr	r3, [pc, #464]	; (8003e00 <resumeGame+0x1e4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	b299      	uxth	r1, r3
 8003c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003c40:	22f0      	movs	r2, #240	; 0xf0
 8003c42:	2000      	movs	r0, #0
 8003c44:	f7fe fa28 	bl	8002098 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e02c      	b.n	8003ca8 <resumeGame+0x8c>
	{
		if (i == 0)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <resumeGame+0x3e>
			drawHeadSnake();
 8003c54:	f7ff fbe6 	bl	8003424 <drawHeadSnake>
 8003c58:	e023      	b.n	8003ca2 <resumeGame+0x86>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003c5a:	4a6a      	ldr	r2, [pc, #424]	; (8003e04 <resumeGame+0x1e8>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3305      	adds	r3, #5
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b298      	uxth	r0, r3
 8003c68:	4a66      	ldr	r2, [pc, #408]	; (8003e04 <resumeGame+0x1e8>)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3305      	adds	r3, #5
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003c76:	4a63      	ldr	r2, [pc, #396]	; (8003e04 <resumeGame+0x1e8>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3305      	adds	r3, #5
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3309      	adds	r3, #9
 8003c86:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003c88:	4c5e      	ldr	r4, [pc, #376]	; (8003e04 <resumeGame+0x1e8>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3305      	adds	r3, #5
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4423      	add	r3, r4
 8003c92:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3309      	adds	r3, #9
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2400      	movs	r4, #0
 8003c9c:	9400      	str	r4, [sp, #0]
 8003c9e:	f7fe f9fb 	bl	8002098 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	4b56      	ldr	r3, [pc, #344]	; (8003e04 <resumeGame+0x1e8>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	dbcd      	blt.n	8003c4e <resumeGame+0x32>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	e07e      	b.n	8003db6 <resumeGame+0x19a>
	{
		int X = wallObject.infoWall[i].x;
 8003cb8:	4953      	ldr	r1, [pc, #332]	; (8003e08 <resumeGame+0x1ec>)
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 8003cca:	494f      	ldr	r1, [pc, #316]	; (8003e08 <resumeGame+0x1ec>)
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3304      	adds	r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	b298      	uxth	r0, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b299      	uxth	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3309      	adds	r3, #9
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3309      	adds	r3, #9
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003cfa:	9400      	str	r4, [sp, #0]
 8003cfc:	f7fe f9cc 	bl	8002098 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 8003d00:	4941      	ldr	r1, [pc, #260]	; (8003e08 <resumeGame+0x1ec>)
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3308      	adds	r3, #8
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d126      	bne.n	8003d64 <resumeGame+0x148>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	b298      	uxth	r0, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	330a      	adds	r3, #10
 8003d20:	b299      	uxth	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3309      	adds	r3, #9
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3313      	adds	r3, #19
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003d36:	9400      	str	r4, [sp, #0]
 8003d38:	f7fe f9ae 	bl	8002098 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	b298      	uxth	r0, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b0a      	subs	r3, #10
 8003d46:	b299      	uxth	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3309      	adds	r3, #9
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003d5c:	9400      	str	r4, [sp, #0]
 8003d5e:	f7fe f99b 	bl	8002098 <lcd_Fill>
 8003d62:	e025      	b.n	8003db0 <resumeGame+0x194>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	330a      	adds	r3, #10
 8003d6a:	b298      	uxth	r0, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b299      	uxth	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3313      	adds	r3, #19
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3309      	adds	r3, #9
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003d84:	9400      	str	r4, [sp, #0]
 8003d86:	f7fe f987 	bl	8002098 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b0a      	subs	r3, #10
 8003d90:	b298      	uxth	r0, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b299      	uxth	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3309      	adds	r3, #9
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003daa:	9400      	str	r4, [sp, #0]
 8003dac:	f7fe f974 	bl	8002098 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <resumeGame+0x1ec>)
 8003db8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003dbc:	3310      	adds	r3, #16
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	f6ff af78 	blt.w	8003cb8 <resumeGame+0x9c>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <resumeGame+0x1f0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b298      	uxth	r0, r3
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <resumeGame+0x1f4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	b299      	uxth	r1, r3
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <resumeGame+0x1f0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3309      	adds	r3, #9
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <resumeGame+0x1f4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3309      	adds	r3, #9
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003dec:	9400      	str	r4, [sp, #0]
 8003dee:	f7fe f953 	bl	8002098 <lcd_Fill>
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000028 	.word	0x20000028
 8003e00:	20000038 	.word	0x20000038
 8003e04:	20001a9c 	.word	0x20001a9c
 8003e08:	20000320 	.word	0x20000320
 8003e0c:	20000094 	.word	0x20000094
 8003e10:	20000098 	.word	0x20000098

08003e14 <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <checkOutOfValidRange+0x38>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0c      	blt.n	8003e3a <checkOutOfValidRange+0x26>
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <checkOutOfValidRange+0x38>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	2be6      	cmp	r3, #230	; 0xe6
 8003e26:	dc08      	bgt.n	8003e3a <checkOutOfValidRange+0x26>
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <checkOutOfValidRange+0x38>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	2b45      	cmp	r3, #69	; 0x45
 8003e2e:	dd04      	ble.n	8003e3a <checkOutOfValidRange+0x26>
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <checkOutOfValidRange+0x38>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003e38:	dd01      	ble.n	8003e3e <checkOutOfValidRange+0x2a>
		return 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <checkOutOfValidRange+0x2c>
	return 0;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20001a9c 	.word	0x20001a9c

08003e50 <checkEatBody>:

int checkEatBody()
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003e56:	2301      	movs	r3, #1
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	e018      	b.n	8003e8e <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <checkEatBody+0x58>)
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	4911      	ldr	r1, [pc, #68]	; (8003ea8 <checkEatBody+0x58>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3305      	adds	r3, #5
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d10b      	bne.n	8003e88 <checkEatBody+0x38>
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <checkEatBody+0x58>)
 8003e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e74:	490c      	ldr	r1, [pc, #48]	; (8003ea8 <checkEatBody+0x58>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3305      	adds	r3, #5
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d101      	bne.n	8003e88 <checkEatBody+0x38>
			return 1;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e008      	b.n	8003e9a <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <checkEatBody+0x58>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dbe1      	blt.n	8003e5c <checkEatBody+0xc>
	return 0;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20001a9c 	.word	0x20001a9c

08003eac <checkEatFruit>:

int checkEatFruit()
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <checkEatFruit+0x2c>)
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <checkEatFruit+0x30>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d107      	bne.n	8003ecc <checkEatFruit+0x20>
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <checkEatFruit+0x2c>)
 8003ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <checkEatFruit+0x34>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d101      	bne.n	8003ecc <checkEatFruit+0x20>
		return 1;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <checkEatFruit+0x22>
	return 0;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	20001a9c 	.word	0x20001a9c
 8003edc:	20000094 	.word	0x20000094
 8003ee0:	20000098 	.word	0x20000098

08003ee4 <checkHitWall>:

int checkHitWall()
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	e079      	b.n	8003fe4 <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 8003ef0:	4944      	ldr	r1, [pc, #272]	; (8004004 <checkHitWall+0x120>)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	3308      	adds	r3, #8
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d136      	bne.n	8003f74 <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003f06:	4b40      	ldr	r3, [pc, #256]	; (8004008 <checkHitWall+0x124>)
 8003f08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f0a:	483e      	ldr	r0, [pc, #248]	; (8004004 <checkHitWall+0x120>)
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4403      	add	r3, r0
 8003f18:	3304      	adds	r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3b0a      	subs	r3, #10
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	d01a      	beq.n	8003f58 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003f22:	4b39      	ldr	r3, [pc, #228]	; (8004008 <checkHitWall+0x124>)
 8003f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f26:	4837      	ldr	r0, [pc, #220]	; (8004004 <checkHitWall+0x120>)
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4403      	add	r3, r0
 8003f34:	3304      	adds	r3, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003f3a:	4299      	cmp	r1, r3
 8003f3c:	d00c      	beq.n	8003f58 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <checkHitWall+0x124>)
 8003f40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f42:	4830      	ldr	r0, [pc, #192]	; (8004004 <checkHitWall+0x120>)
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4403      	add	r3, r0
 8003f50:	3304      	adds	r3, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d142      	bne.n	8003fde <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 8003f58:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <checkHitWall+0x124>)
 8003f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f5c:	4829      	ldr	r0, [pc, #164]	; (8004004 <checkHitWall+0x120>)
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4403      	add	r3, r0
 8003f6a:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	d136      	bne.n	8003fde <checkHitWall+0xfa>
			{
				return 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e041      	b.n	8003ff8 <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <checkHitWall+0x124>)
 8003f76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f78:	4822      	ldr	r0, [pc, #136]	; (8004004 <checkHitWall+0x120>)
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4403      	add	r3, r0
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330a      	adds	r3, #10
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	d018      	beq.n	8003fc0 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <checkHitWall+0x124>)
 8003f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f92:	481c      	ldr	r0, [pc, #112]	; (8004004 <checkHitWall+0x120>)
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d00b      	beq.n	8003fc0 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <checkHitWall+0x124>)
 8003faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fac:	4815      	ldr	r0, [pc, #84]	; (8004004 <checkHitWall+0x120>)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4403      	add	r3, r0
 8003fba:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	d10e      	bne.n	8003fde <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <checkHitWall+0x124>)
 8003fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fc4:	480f      	ldr	r0, [pc, #60]	; (8004004 <checkHitWall+0x120>)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	d101      	bne.n	8003fde <checkHitWall+0xfa>
			{
				return 1;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e00c      	b.n	8003ff8 <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	4b07      	ldr	r3, [pc, #28]	; (8004004 <checkHitWall+0x120>)
 8003fe6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003fea:	3310      	adds	r3, #16
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f6ff af7d 	blt.w	8003ef0 <checkHitWall+0xc>
			}
		}
	}
	return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20000320 	.word	0x20000320
 8004008:	20001a9c 	.word	0x20001a9c

0800400c <checkHead>:
void checkHead()
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b085      	sub	sp, #20
 8004010:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 8004012:	f7ff feff 	bl	8003e14 <checkOutOfValidRange>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(3);
 800401c:	2003      	movs	r0, #3
 800401e:	f7fd fd33 	bl	8001a88 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8004022:	e065      	b.n	80040f0 <checkHead+0xe4>
	}
	if (checkEatBody())
 8004024:	f7ff ff14 	bl	8003e50 <checkEatBody>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(2);
 800402e:	2002      	movs	r0, #2
 8004030:	f7fd fd2a 	bl	8001a88 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8004034:	e05c      	b.n	80040f0 <checkHead+0xe4>
	}
	if (checkHitWall())
 8004036:	f7ff ff55 	bl	8003ee4 <checkHitWall>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <checkHead+0x3c>
	{
		// showGameover
		initOverMode(0);
 8004040:	2000      	movs	r0, #0
 8004042:	f7fd fd21 	bl	8001a88 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8004046:	e053      	b.n	80040f0 <checkHead+0xe4>
	}
	if (checkEatFruit())
 8004048:	f7ff ff30 	bl	8003eac <checkEatFruit>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04e      	beq.n	80040f0 <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <checkHead+0xec>)
 8004054:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004058:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <checkHead+0xf0>)
 800405c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004060:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <checkHead+0xf4>)
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	3301      	adds	r3, #1
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <checkHead+0xf4>)
 800406a:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <checkHead+0xf4>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	3b01      	subs	r3, #1
 8004072:	4a23      	ldr	r2, [pc, #140]	; (8004100 <checkHead+0xf4>)
 8004074:	69d2      	ldr	r2, [r2, #28]
 8004076:	4922      	ldr	r1, [pc, #136]	; (8004100 <checkHead+0xf4>)
 8004078:	3305      	adds	r3, #5
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <checkHead+0xf4>)
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	3b01      	subs	r3, #1
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <checkHead+0xf4>)
 8004088:	6a12      	ldr	r2, [r2, #32]
 800408a:	491d      	ldr	r1, [pc, #116]	; (8004100 <checkHead+0xf4>)
 800408c:	3305      	adds	r3, #5
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <checkHead+0xf4>)
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	3b01      	subs	r3, #1
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <checkHead+0xf4>)
 800409c:	3305      	adds	r3, #5
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <checkHead+0xf4>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	3b01      	subs	r3, #1
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <checkHead+0xf4>)
 80040ae:	3305      	adds	r3, #5
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	b298      	uxth	r0, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b299      	uxth	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3309      	adds	r3, #9
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3309      	adds	r3, #9
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2400      	movs	r4, #0
 80040d2:	9400      	str	r4, [sp, #0]
 80040d4:	f7fd ffe0 	bl	8002098 <lcd_Fill>
		flagEat = 1;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <checkHead+0xf8>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

		SCORE++;
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <checkHead+0xfc>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <checkHead+0xfc>)
 80040e8:	801a      	strh	r2, [r3, #0]
		printScore();
 80040ea:	f7ff f925 	bl	8003338 <printScore>
		return;
 80040ee:	bf00      	nop
	}
}
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000094 	.word	0x20000094
 80040fc:	20000098 	.word	0x20000098
 8004100:	20001a9c 	.word	0x20001a9c
 8004104:	2000009c 	.word	0x2000009c
 8004108:	20000132 	.word	0x20000132

0800410c <move>:

void move()
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <move+0x4c>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d81b      	bhi.n	8004150 <move+0x44>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <move+0x14>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004141 	.word	0x08004141
 8004124:	08004149 	.word	0x08004149
 8004128:	08004131 	.word	0x08004131
 800412c:	08004139 	.word	0x08004139
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <move+0x4c>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4798      	blx	r3
		break;
 8004136:	e00c      	b.n	8004152 <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <move+0x4c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4798      	blx	r3
		break;
 800413e:	e008      	b.n	8004152 <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <move+0x4c>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4798      	blx	r3
		break;
 8004146:	e004      	b.n	8004152 <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <move+0x4c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4798      	blx	r3
		break;
 800414e:	e000      	b.n	8004152 <move+0x46>
	default:
		break;
 8004150:	bf00      	nop
	}
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20001a9c 	.word	0x20001a9c

0800415c <wallInit>:

void wallInit()
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 8004162:	2300      	movs	r3, #0
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	e01f      	b.n	80041a8 <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 8004168:	491d      	ldr	r1, [pc, #116]	; (80041e0 <wallInit+0x84>)
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 800417a:	4919      	ldr	r1, [pc, #100]	; (80041e0 <wallInit+0x84>)
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	3304      	adds	r3, #4
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 800418e:	4914      	ldr	r1, [pc, #80]	; (80041e0 <wallInit+0x84>)
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3308      	adds	r3, #8
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3301      	adds	r3, #1
 80041a6:	607b      	str	r3, [r7, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041ae:	dbdb      	blt.n	8004168 <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <wallInit+0x84>)
 80041b2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80041b6:	3310      	adds	r3, #16
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
	wallObject.vertical = 1;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <wallInit+0x84>)
 80041be:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80041c2:	3314      	adds	r3, #20
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
	wallObject.stopGenerateWallFlag = 0;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <wallInit+0x84>)
 80041ca:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80041ce:	3318      	adds	r3, #24
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000320 	.word	0x20000320

080041e4 <snakeRun>:

void snakeRun()
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af02      	add	r7, sp, #8
	if (buttonForSnake[0])
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <snakeRun+0x124>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <snakeRun+0x22>
	{
		buttonForSnake[0]= 0;
 80041f2:	4b45      	ldr	r3, [pc, #276]	; (8004308 <snakeRun+0x124>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	801a      	strh	r2, [r3, #0]
		(*snakeObject.GOUP)();
 80041f8:	4b44      	ldr	r3, [pc, #272]	; (800430c <snakeRun+0x128>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 80041fe:	4b43      	ldr	r3, [pc, #268]	; (800430c <snakeRun+0x128>)
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8004204:	e07d      	b.n	8004302 <snakeRun+0x11e>
		if (buttonForSnake[1])
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <snakeRun+0x124>)
 8004208:	885b      	ldrh	r3, [r3, #2]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <snakeRun+0x3e>
			buttonForSnake[1]= 0;
 800420e:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <snakeRun+0x124>)
 8004210:	2200      	movs	r2, #0
 8004212:	805a      	strh	r2, [r3, #2]
			(*snakeObject.GOLEFT)();
 8004214:	4b3d      	ldr	r3, [pc, #244]	; (800430c <snakeRun+0x128>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 800421a:	4b3c      	ldr	r3, [pc, #240]	; (800430c <snakeRun+0x128>)
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4798      	blx	r3
}
 8004220:	e06f      	b.n	8004302 <snakeRun+0x11e>
			if (buttonForSnake[2])
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <snakeRun+0x124>)
 8004224:	889b      	ldrh	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d025      	beq.n	8004276 <snakeRun+0x92>
				buttonForSnake[2]= 0;
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <snakeRun+0x124>)
 800422c:	2200      	movs	r2, #0
 800422e:	809a      	strh	r2, [r3, #4]
				snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 8004230:	4b36      	ldr	r3, [pc, #216]	; (800430c <snakeRun+0x128>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	4b32      	ldr	r3, [pc, #200]	; (800430c <snakeRun+0x128>)
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
				wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <snakeRun+0x12c>)
 8004246:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800424a:	3318      	adds	r3, #24
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <snakeRun+0x12c>)
 800425c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004260:	3318      	adds	r3, #24
 8004262:	601a      	str	r2, [r3, #0]
				snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <snakeRun+0x128>)
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fff7 	bl	800625c <initStopGame>
 800426e:	4603      	mov	r3, r0
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <snakeRun+0x128>)
 8004272:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004274:	e045      	b.n	8004302 <snakeRun+0x11e>
				if (buttonForSnake[3])
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <snakeRun+0x124>)
 8004278:	88db      	ldrh	r3, [r3, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <snakeRun+0xae>
					buttonForSnake[3]= 0;
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <snakeRun+0x124>)
 8004280:	2200      	movs	r2, #0
 8004282:	80da      	strh	r2, [r3, #6]
					(*snakeObject.GORIGHT)();
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <snakeRun+0x128>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <snakeRun+0x128>)
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4798      	blx	r3
}
 8004290:	e037      	b.n	8004302 <snakeRun+0x11e>
					if (buttonForSnake[4])
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <snakeRun+0x124>)
 8004294:	891b      	ldrh	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01f      	beq.n	80042da <snakeRun+0xf6>
						buttonForSnake[4]= 0;
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <snakeRun+0x124>)
 800429c:	2200      	movs	r2, #0
 800429e:	811a      	strh	r2, [r3, #8]
						lcd_Clear(WHITE);
 80042a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80042a4:	f7fd fec6 	bl	8002034 <lcd_Clear>
						xFruit = INT_MIN;
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <snakeRun+0x130>)
 80042aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042ae:	601a      	str	r2, [r3, #0]
						yFruit = INT_MIN;
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <snakeRun+0x134>)
 80042b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042b6:	601a      	str	r2, [r3, #0]
						snakeInit();
 80042b8:	f000 f832 	bl	8004320 <snakeInit>
						wallInit();
 80042bc:	f7ff ff4e 	bl	800415c <wallInit>
						lcd_Fill(0, 0, 240, 70, RED);
 80042c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	2346      	movs	r3, #70	; 0x46
 80042c8:	22f0      	movs	r2, #240	; 0xf0
 80042ca:	2100      	movs	r1, #0
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7fd fee3 	bl	8002098 <lcd_Fill>
						flagEat = 1;
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <snakeRun+0x138>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	e013      	b.n	8004302 <snakeRun+0x11e>
						if (buttonForSnake[5])
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <snakeRun+0x124>)
 80042dc:	895b      	ldrh	r3, [r3, #10]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <snakeRun+0x112>
							buttonForSnake[5]= 0;
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <snakeRun+0x124>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	815a      	strh	r2, [r3, #10]
							(*snakeObject.GODOWN)();
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <snakeRun+0x128>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <snakeRun+0x128>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4798      	blx	r3
}
 80042f4:	e005      	b.n	8004302 <snakeRun+0x11e>
							(*snakeObject.MOVE)();
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <snakeRun+0x128>)
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <snakeRun+0x128>)
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4798      	blx	r3
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000025c 	.word	0x2000025c
 800430c:	20001a9c 	.word	0x20001a9c
 8004310:	20000320 	.word	0x20000320
 8004314:	20000094 	.word	0x20000094
 8004318:	20000098 	.word	0x20000098
 800431c:	2000009c 	.word	0x2000009c

08004320 <snakeInit>:

void snakeInit()
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b085      	sub	sp, #20
 8004324:	af02      	add	r7, sp, #8
	srand(rst);
 8004326:	4b45      	ldr	r3, [pc, #276]	; (800443c <snakeInit+0x11c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f007 f8d4 	bl	800b4d8 <srand>
	rst++;
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <snakeInit+0x11c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a41      	ldr	r2, [pc, #260]	; (800443c <snakeInit+0x11c>)
 8004338:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <snakeInit+0x120>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 8004340:	4b40      	ldr	r3, [pc, #256]	; (8004444 <snakeInit+0x124>)
 8004342:	2200      	movs	r2, #0
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 8004346:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <snakeInit+0x124>)
 8004348:	2214      	movs	r2, #20
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 800434c:	4b3d      	ldr	r3, [pc, #244]	; (8004444 <snakeInit+0x124>)
 800434e:	2246      	movs	r2, #70	; 0x46
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 8004352:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <snakeInit+0x124>)
 8004354:	220a      	movs	r2, #10
 8004356:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8004358:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <snakeInit+0x124>)
 800435a:	2246      	movs	r2, #70	; 0x46
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 800435e:	4b39      	ldr	r3, [pc, #228]	; (8004444 <snakeInit+0x124>)
 8004360:	2200      	movs	r2, #0
 8004362:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 8004364:	4b37      	ldr	r3, [pc, #220]	; (8004444 <snakeInit+0x124>)
 8004366:	2246      	movs	r2, #70	; 0x46
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 800436a:	2303      	movs	r3, #3
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	e010      	b.n	8004392 <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 8004370:	4a34      	ldr	r2, [pc, #208]	; (8004444 <snakeInit+0x124>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3305      	adds	r3, #5
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 800437e:	4a31      	ldr	r2, [pc, #196]	; (8004444 <snakeInit+0x124>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3305      	adds	r3, #5
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3301      	adds	r3, #1
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004398:	dbea      	blt.n	8004370 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <snakeInit+0x124>)
 800439c:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <snakeInit+0x128>)
 800439e:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <snakeInit+0x124>)
 80043a2:	4a2a      	ldr	r2, [pc, #168]	; (800444c <snakeInit+0x12c>)
 80043a4:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <snakeInit+0x124>)
 80043a8:	4a29      	ldr	r2, [pc, #164]	; (8004450 <snakeInit+0x130>)
 80043aa:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <snakeInit+0x124>)
 80043ae:	4a29      	ldr	r2, [pc, #164]	; (8004454 <snakeInit+0x134>)
 80043b0:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <snakeInit+0x124>)
 80043b4:	4a28      	ldr	r2, [pc, #160]	; (8004458 <snakeInit+0x138>)
 80043b6:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <snakeInit+0x124>)
 80043ba:	4a28      	ldr	r2, [pc, #160]	; (800445c <snakeInit+0x13c>)
 80043bc:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 80043be:	4b21      	ldr	r3, [pc, #132]	; (8004444 <snakeInit+0x124>)
 80043c0:	2203      	movs	r2, #3
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <snakeInit+0x124>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	e02c      	b.n	800442a <snakeInit+0x10a>
	{
		if (i == 0)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <snakeInit+0xbc>
			drawHeadSnake();
 80043d6:	f7ff f825 	bl	8003424 <drawHeadSnake>
 80043da:	e023      	b.n	8004424 <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <snakeInit+0x124>)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	3305      	adds	r3, #5
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b298      	uxth	r0, r3
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <snakeInit+0x124>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	3305      	adds	r3, #5
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80043f8:	4a12      	ldr	r2, [pc, #72]	; (8004444 <snakeInit+0x124>)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	3305      	adds	r3, #5
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8004404:	b29b      	uxth	r3, r3
 8004406:	3309      	adds	r3, #9
 8004408:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800440a:	4c0e      	ldr	r4, [pc, #56]	; (8004444 <snakeInit+0x124>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	3305      	adds	r3, #5
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4423      	add	r3, r4
 8004414:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8004416:	b29b      	uxth	r3, r3
 8004418:	3309      	adds	r3, #9
 800441a:	b29b      	uxth	r3, r3
 800441c:	2400      	movs	r4, #0
 800441e:	9400      	str	r4, [sp, #0]
 8004420:	f7fd fe3a 	bl	8002098 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	ddcf      	ble.n	80043d0 <snakeInit+0xb0>
	}
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop
 800443c:	20000170 	.word	0x20000170
 8004440:	2000009c 	.word	0x2000009c
 8004444:	20001a9c 	.word	0x20001a9c
 8004448:	08003ab1 	.word	0x08003ab1
 800444c:	0800366d 	.word	0x0800366d
 8004450:	08003945 	.word	0x08003945
 8004454:	080037d9 	.word	0x080037d9
 8004458:	0800410d 	.word	0x0800410d
 800445c:	0800400d 	.word	0x0800400d

08004460 <generateFruit>:

void generateFruit()
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b087      	sub	sp, #28
 8004464:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 8004466:	4b89      	ldr	r3, [pc, #548]	; (800468c <generateFruit+0x22c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	f040 8109 	bne.w	8004682 <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 8004474:	f007 f85e 	bl	800b534 <rand>
 8004478:	4601      	mov	r1, r0
 800447a:	4b85      	ldr	r3, [pc, #532]	; (8004690 <generateFruit+0x230>)
 800447c:	fb83 2301 	smull	r2, r3, r3, r1
 8004480:	109a      	asrs	r2, r3, #2
 8004482:	17cb      	asrs	r3, r1, #31
 8004484:	1ad2      	subs	r2, r2, r3
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	1aca      	subs	r2, r1, r3
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	461a      	mov	r2, r3
 800449a:	4b7e      	ldr	r3, [pc, #504]	; (8004694 <generateFruit+0x234>)
 800449c:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 800449e:	f007 f849 	bl	800b534 <rand>
 80044a2:	4601      	mov	r1, r0
 80044a4:	4b7c      	ldr	r3, [pc, #496]	; (8004698 <generateFruit+0x238>)
 80044a6:	fb83 2301 	smull	r2, r3, r3, r1
 80044aa:	10da      	asrs	r2, r3, #3
 80044ac:	17cb      	asrs	r3, r1, #31
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009a      	lsls	r2, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	1aca      	subs	r2, r1, r3
 80044bc:	3207      	adds	r2, #7
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b74      	ldr	r3, [pc, #464]	; (800469c <generateFruit+0x23c>)
 80044ca:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	e021      	b.n	8004516 <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 80044d2:	4a73      	ldr	r2, [pc, #460]	; (80046a0 <generateFruit+0x240>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	3305      	adds	r3, #5
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	4b6d      	ldr	r3, [pc, #436]	; (8004694 <generateFruit+0x234>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d114      	bne.n	8004510 <generateFruit+0xb0>
 80044e6:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <generateFruit+0x240>)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	3305      	adds	r3, #5
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	4b6a      	ldr	r3, [pc, #424]	; (800469c <generateFruit+0x23c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10a      	bne.n	8004510 <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 80044fa:	4b66      	ldr	r3, [pc, #408]	; (8004694 <generateFruit+0x234>)
 80044fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004500:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 8004502:	4b66      	ldr	r3, [pc, #408]	; (800469c <generateFruit+0x23c>)
 8004504:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004508:	601a      	str	r2, [r3, #0]
					remind = 1;
 800450a:	2301      	movs	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
					break;
 800450e:	e007      	b.n	8004520 <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3301      	adds	r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <generateFruit+0x240>)
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	dbd8      	blt.n	80044d2 <generateFruit+0x72>
				}
			}
			if (remind)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80a9 	bne.w	800467a <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004528:	2300      	movs	r3, #0
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	e07f      	b.n	800462e <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 800452e:	495d      	ldr	r1, [pc, #372]	; (80046a4 <generateFruit+0x244>)
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3308      	adds	r3, #8
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d139      	bne.n	80045b8 <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 8004544:	4957      	ldr	r1, [pc, #348]	; (80046a4 <generateFruit+0x244>)
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	3304      	adds	r3, #4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b51      	ldr	r3, [pc, #324]	; (800469c <generateFruit+0x23c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d01d      	beq.n	800459a <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 800455e:	4951      	ldr	r1, [pc, #324]	; (80046a4 <generateFruit+0x244>)
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3304      	adds	r3, #4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f103 020a 	add.w	r2, r3, #10
 8004574:	4b49      	ldr	r3, [pc, #292]	; (800469c <generateFruit+0x23c>)
 8004576:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d00e      	beq.n	800459a <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 800457c:	4949      	ldr	r1, [pc, #292]	; (80046a4 <generateFruit+0x244>)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3304      	adds	r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1a3 020a 	sub.w	r2, r3, #10
 8004592:	4b42      	ldr	r3, [pc, #264]	; (800469c <generateFruit+0x23c>)
 8004594:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d146      	bne.n	8004628 <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 800459a:	4942      	ldr	r1, [pc, #264]	; (80046a4 <generateFruit+0x244>)
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <generateFruit+0x234>)
 80045ac:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d13a      	bne.n	8004628 <generateFruit+0x1c8>
					{
						remind = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
						break;
 80045b6:	e043      	b.n	8004640 <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 80045b8:	493a      	ldr	r1, [pc, #232]	; (80046a4 <generateFruit+0x244>)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b32      	ldr	r3, [pc, #200]	; (8004694 <generateFruit+0x234>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d01b      	beq.n	8004608 <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 80045d0:	4934      	ldr	r1, [pc, #208]	; (80046a4 <generateFruit+0x244>)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f103 020a 	add.w	r2, r3, #10
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <generateFruit+0x234>)
 80045e6:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d00d      	beq.n	8004608 <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 80045ec:	492d      	ldr	r1, [pc, #180]	; (80046a4 <generateFruit+0x244>)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f1a3 020a 	sub.w	r2, r3, #10
 8004600:	4b24      	ldr	r3, [pc, #144]	; (8004694 <generateFruit+0x234>)
 8004602:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d10f      	bne.n	8004628 <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8004608:	4926      	ldr	r1, [pc, #152]	; (80046a4 <generateFruit+0x244>)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3304      	adds	r3, #4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b20      	ldr	r3, [pc, #128]	; (800469c <generateFruit+0x23c>)
 800461c:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 800461e:	429a      	cmp	r2, r3
 8004620:	d102      	bne.n	8004628 <generateFruit+0x1c8>
					{
						remind = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
						break;
 8004626:	e00b      	b.n	8004640 <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <generateFruit+0x244>)
 8004630:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004634:	3310      	adds	r3, #16
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	f6ff af77 	blt.w	800452e <generateFruit+0xce>
					}
				}
			}
			if (remind)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11b      	bne.n	800467e <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <generateFruit+0x234>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	b298      	uxth	r0, r3
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <generateFruit+0x23c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b299      	uxth	r1, r3
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <generateFruit+0x234>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	3309      	adds	r3, #9
 800465a:	b29a      	uxth	r2, r3
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <generateFruit+0x23c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	3309      	adds	r3, #9
 8004664:	b29b      	uxth	r3, r3
 8004666:	f240 14cf 	movw	r4, #463	; 0x1cf
 800466a:	9400      	str	r4, [sp, #0]
 800466c:	f7fd fd14 	bl	8002098 <lcd_Fill>
			flagEat = 0;
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <generateFruit+0x22c>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
			break;
 8004676:	bf00      	nop
		}
	}
}
 8004678:	e003      	b.n	8004682 <generateFruit+0x222>
				continue;
 800467a:	bf00      	nop
 800467c:	e6f8      	b.n	8004470 <generateFruit+0x10>
				continue;
 800467e:	bf00      	nop
		{
 8004680:	e6f6      	b.n	8004470 <generateFruit+0x10>
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	bf00      	nop
 800468c:	2000009c 	.word	0x2000009c
 8004690:	2aaaaaab 	.word	0x2aaaaaab
 8004694:	20000094 	.word	0x20000094
 8004698:	51eb851f 	.word	0x51eb851f
 800469c:	20000098 	.word	0x20000098
 80046a0:	20001a9c 	.word	0x20001a9c
 80046a4:	20000320 	.word	0x20000320

080046a8 <generateWall>:

void generateWall()
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b08d      	sub	sp, #52	; 0x34
 80046ac:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 80046ae:	4b9c      	ldr	r3, [pc, #624]	; (8004920 <generateWall+0x278>)
 80046b0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80046b4:	3310      	adds	r3, #16
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a9a      	ldr	r2, [pc, #616]	; (8004924 <generateWall+0x27c>)
 80046ba:	8812      	ldrh	r2, [r2, #0]
 80046bc:	4293      	cmp	r3, r2
 80046be:	f280 82dd 	bge.w	8004c7c <generateWall+0x5d4>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 80046c2:	4b97      	ldr	r3, [pc, #604]	; (8004920 <generateWall+0x278>)
 80046c4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80046c8:	3318      	adds	r3, #24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 82d6 	bne.w	8004c7e <generateWall+0x5d6>
	{
		while (1)
		{
			int remind = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 80046d6:	f006 ff2d 	bl	800b534 <rand>
 80046da:	4602      	mov	r2, r0
 80046dc:	4b92      	ldr	r3, [pc, #584]	; (8004928 <generateWall+0x280>)
 80046de:	fb83 1302 	smull	r1, r3, r3, r2
 80046e2:	1099      	asrs	r1, r3, #2
 80046e4:	17d3      	asrs	r3, r2, #31
 80046e6:	1acb      	subs	r3, r1, r3
 80046e8:	2116      	movs	r1, #22
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 80046fc:	f006 ff1a 	bl	800b534 <rand>
 8004700:	4601      	mov	r1, r0
 8004702:	4b8a      	ldr	r3, [pc, #552]	; (800492c <generateWall+0x284>)
 8004704:	fb83 2301 	smull	r2, r3, r3, r1
 8004708:	440b      	add	r3, r1
 800470a:	111a      	asrs	r2, r3, #4
 800470c:	17cb      	asrs	r3, r1, #31
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	1aca      	subs	r2, r1, r3
 800471c:	3208      	adds	r2, #8
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004728:	2300      	movs	r3, #0
 800472a:	623b      	str	r3, [r7, #32]
 800472c:	e0e8      	b.n	8004900 <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 800472e:	497c      	ldr	r1, [pc, #496]	; (8004920 <generateWall+0x278>)
 8004730:	6a3a      	ldr	r2, [r7, #32]
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 8004740:	4977      	ldr	r1, [pc, #476]	; (8004920 <generateWall+0x278>)
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3304      	adds	r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 8004754:	4b72      	ldr	r3, [pc, #456]	; (8004920 <generateWall+0x278>)
 8004756:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800475a:	3314      	adds	r3, #20
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d166      	bne.n	8004830 <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 8004762:	496f      	ldr	r1, [pc, #444]	; (8004920 <generateWall+0x278>)
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3308      	adds	r3, #8
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d120      	bne.n	80047ba <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3b14      	subs	r3, #20
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	429a      	cmp	r2, r3
 8004780:	d013      	beq.n	80047aa <generateWall+0x102>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3314      	adds	r3, #20
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d00e      	beq.n	80047aa <generateWall+0x102>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3b0a      	subs	r3, #10
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	429a      	cmp	r2, r3
 8004794:	d009      	beq.n	80047aa <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	d004      	beq.n	80047aa <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f040 80a8 	bne.w	80048fa <generateWall+0x252>
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	f040 80a3 	bne.w	80048fa <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 80047b4:	2301      	movs	r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80047b8:	e0ab      	b.n	8004912 <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3b0a      	subs	r3, #10
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d008      	beq.n	80047d6 <generateWall+0x12e>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	330a      	adds	r3, #10
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d003      	beq.n	80047d6 <generateWall+0x12e>
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d103      	bne.n	80047de <generateWall+0x136>
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d025      	beq.n	800482a <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d008      	beq.n	80047fa <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	330a      	adds	r3, #10
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d003      	beq.n	80047fa <generateWall+0x152>
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d104      	bne.n	8004804 <generateWall+0x15c>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3b0a      	subs	r3, #10
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	429a      	cmp	r2, r3
 8004802:	d012      	beq.n	800482a <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	429a      	cmp	r2, r3
 800480c:	d008      	beq.n	8004820 <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	330a      	adds	r3, #10
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	429a      	cmp	r2, r3
 8004816:	d003      	beq.n	8004820 <generateWall+0x178>
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	429a      	cmp	r2, r3
 800481e:	d16c      	bne.n	80048fa <generateWall+0x252>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	330a      	adds	r3, #10
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d167      	bne.n	80048fa <generateWall+0x252>
						{
							remind = 1;
 800482a:	2301      	movs	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	e064      	b.n	80048fa <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 8004830:	493b      	ldr	r1, [pc, #236]	; (8004920 <generateWall+0x278>)
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	3308      	adds	r3, #8
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d13a      	bne.n	80048bc <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3b0a      	subs	r3, #10
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	429a      	cmp	r2, r3
 800484e:	d008      	beq.n	8004862 <generateWall+0x1ba>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	330a      	adds	r3, #10
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	429a      	cmp	r2, r3
 8004858:	d003      	beq.n	8004862 <generateWall+0x1ba>
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	429a      	cmp	r2, r3
 8004860:	d103      	bne.n	800486a <generateWall+0x1c2>
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	429a      	cmp	r2, r3
 8004868:	d025      	beq.n	80048b6 <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	429a      	cmp	r2, r3
 8004872:	d008      	beq.n	8004886 <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	330a      	adds	r3, #10
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d003      	beq.n	8004886 <generateWall+0x1de>
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	429a      	cmp	r2, r3
 8004884:	d104      	bne.n	8004890 <generateWall+0x1e8>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b0a      	subs	r3, #10
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	d012      	beq.n	80048b6 <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d008      	beq.n	80048ac <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	330a      	adds	r3, #10
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d003      	beq.n	80048ac <generateWall+0x204>
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d126      	bne.n	80048fa <generateWall+0x252>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	330a      	adds	r3, #10
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d121      	bne.n	80048fa <generateWall+0x252>
						{
							remind = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80048ba:	e02a      	b.n	8004912 <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3b14      	subs	r3, #20
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d012      	beq.n	80048ec <generateWall+0x244>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3314      	adds	r3, #20
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d00d      	beq.n	80048ec <generateWall+0x244>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	330a      	adds	r3, #10
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d008      	beq.n	80048ec <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d003      	beq.n	80048ec <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <generateWall+0x252>
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d102      	bne.n	80048fa <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80048f8:	e00b      	b.n	8004912 <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	3301      	adds	r3, #1
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <generateWall+0x278>)
 8004902:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004906:	3310      	adds	r3, #16
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	429a      	cmp	r2, r3
 800490e:	f6ff af0e 	blt.w	800472e <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 81a7 	bne.w	8004c68 <generateWall+0x5c0>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	e049      	b.n	80049b4 <generateWall+0x30c>
 8004920:	20000320 	.word	0x20000320
 8004924:	20000134 	.word	0x20000134
 8004928:	2e8ba2e9 	.word	0x2e8ba2e9
 800492c:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 8004930:	4aa1      	ldr	r2, [pc, #644]	; (8004bb8 <generateWall+0x510>)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3305      	adds	r3, #5
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 800493e:	4a9e      	ldr	r2, [pc, #632]	; (8004bb8 <generateWall+0x510>)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	3305      	adds	r3, #5
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4413      	add	r3, r2
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 800494c:	4b9b      	ldr	r3, [pc, #620]	; (8004bbc <generateWall+0x514>)
 800494e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004952:	3314      	adds	r3, #20
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d114      	bne.n	8004984 <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d125      	bne.n	80049ae <generateWall+0x306>
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d009      	beq.n	800497e <generateWall+0x2d6>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	3b0a      	subs	r3, #10
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d004      	beq.n	800497e <generateWall+0x2d6>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	330a      	adds	r3, #10
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d117      	bne.n	80049ae <generateWall+0x306>
					{
						remind = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 8004982:	e01c      	b.n	80049be <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d110      	bne.n	80049ae <generateWall+0x306>
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d009      	beq.n	80049a8 <generateWall+0x300>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	3b0a      	subs	r3, #10
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d004      	beq.n	80049a8 <generateWall+0x300>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	330a      	adds	r3, #10
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d102      	bne.n	80049ae <generateWall+0x306>
					{
						remind = 1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80049ac:	e007      	b.n	80049be <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <generateWall+0x510>)
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	dbb8      	blt.n	8004930 <generateWall+0x288>
					}
				}
			}
			if (remind)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8153 	bne.w	8004c6c <generateWall+0x5c4>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 80049c6:	4b7c      	ldr	r3, [pc, #496]	; (8004bb8 <generateWall+0x510>)
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d842      	bhi.n	8004a54 <generateWall+0x3ac>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <generateWall+0x32c>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004a1d 	.word	0x08004a1d
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	080049e5 	.word	0x080049e5
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 80049e4:	4b74      	ldr	r3, [pc, #464]	; (8004bb8 <generateWall+0x510>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d134      	bne.n	8004a58 <generateWall+0x3b0>
 80049ee:	4b72      	ldr	r3, [pc, #456]	; (8004bb8 <generateWall+0x510>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	3b0a      	subs	r3, #10
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d12e      	bne.n	8004a58 <generateWall+0x3b0>
					remind = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80049fe:	e02b      	b.n	8004a58 <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 8004a00:	4b6d      	ldr	r3, [pc, #436]	; (8004bb8 <generateWall+0x510>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d128      	bne.n	8004a5c <generateWall+0x3b4>
 8004a0a:	4b6b      	ldr	r3, [pc, #428]	; (8004bb8 <generateWall+0x510>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	330a      	adds	r3, #10
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d122      	bne.n	8004a5c <generateWall+0x3b4>
					remind = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004a1a:	e01f      	b.n	8004a5c <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 8004a1c:	4b66      	ldr	r3, [pc, #408]	; (8004bb8 <generateWall+0x510>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	3b0a      	subs	r3, #10
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d11b      	bne.n	8004a60 <generateWall+0x3b8>
 8004a28:	4b63      	ldr	r3, [pc, #396]	; (8004bb8 <generateWall+0x510>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d116      	bne.n	8004a60 <generateWall+0x3b8>
					remind = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004a36:	e013      	b.n	8004a60 <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 8004a38:	4b5f      	ldr	r3, [pc, #380]	; (8004bb8 <generateWall+0x510>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	330a      	adds	r3, #10
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d10f      	bne.n	8004a64 <generateWall+0x3bc>
 8004a44:	4b5c      	ldr	r3, [pc, #368]	; (8004bb8 <generateWall+0x510>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10a      	bne.n	8004a64 <generateWall+0x3bc>
					remind= 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004a52:	e007      	b.n	8004a64 <generateWall+0x3bc>
				default:
					break;
 8004a54:	bf00      	nop
 8004a56:	e006      	b.n	8004a66 <generateWall+0x3be>
				break;
 8004a58:	bf00      	nop
 8004a5a:	e004      	b.n	8004a66 <generateWall+0x3be>
				break;
 8004a5c:	bf00      	nop
 8004a5e:	e002      	b.n	8004a66 <generateWall+0x3be>
				break;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <generateWall+0x3be>
				break;
 8004a64:	bf00      	nop
			}
			if (remind)
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8101 	bne.w	8004c70 <generateWall+0x5c8>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 8004a6e:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <generateWall+0x514>)
 8004a70:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004a74:	3314      	adds	r3, #20
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d11a      	bne.n	8004ab2 <generateWall+0x40a>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <generateWall+0x518>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d130      	bne.n	8004ae8 <generateWall+0x440>
 8004a86:	4b4f      	ldr	r3, [pc, #316]	; (8004bc4 <generateWall+0x51c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	f000 80f1 	beq.w	8004c74 <generateWall+0x5cc>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f1a3 020a 	sub.w	r2, r3, #10
 8004a98:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <generateWall+0x51c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f000 80e9 	beq.w	8004c74 <generateWall+0x5cc>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f103 020a 	add.w	r2, r3, #10
 8004aa8:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <generateWall+0x51c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d11b      	bne.n	8004ae8 <generateWall+0x440>
					continue;
 8004ab0:	e0e0      	b.n	8004c74 <generateWall+0x5cc>
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 8004ab2:	4b44      	ldr	r3, [pc, #272]	; (8004bc4 <generateWall+0x51c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d115      	bne.n	8004ae8 <generateWall+0x440>
 8004abc:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <generateWall+0x518>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	f000 80d8 	beq.w	8004c78 <generateWall+0x5d0>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f1a3 020a 	sub.w	r2, r3, #10
 8004ace:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <generateWall+0x518>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	f000 80d0 	beq.w	8004c78 <generateWall+0x5d0>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f103 020a 	add.w	r2, r3, #10
 8004ade:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <generateWall+0x518>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	f000 80c8 	beq.w	8004c78 <generateWall+0x5d0>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 8004ae8:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <generateWall+0x514>)
 8004aea:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004aee:	3310      	adds	r3, #16
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4932      	ldr	r1, [pc, #200]	; (8004bbc <generateWall+0x514>)
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <generateWall+0x514>)
 8004b04:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004b08:	3310      	adds	r3, #16
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	492b      	ldr	r1, [pc, #172]	; (8004bbc <generateWall+0x514>)
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3304      	adds	r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	b298      	uxth	r0, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	b299      	uxth	r1, r3
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3309      	adds	r3, #9
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3309      	adds	r3, #9
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004b3a:	9400      	str	r4, [sp, #0]
 8004b3c:	f7fd faac 	bl	8002098 <lcd_Fill>
			if (wallObject.vertical == 1)
 8004b40:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <generateWall+0x514>)
 8004b42:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004b46:	3314      	adds	r3, #20
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d13c      	bne.n	8004bc8 <generateWall+0x520>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	b298      	uxth	r0, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	330a      	adds	r3, #10
 8004b58:	b299      	uxth	r1, r3
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3309      	adds	r3, #9
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3313      	adds	r3, #19
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004b6e:	9400      	str	r4, [sp, #0]
 8004b70:	f7fd fa92 	bl	8002098 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	b298      	uxth	r0, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b0a      	subs	r3, #10
 8004b7e:	b299      	uxth	r1, r3
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3309      	adds	r3, #9
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004b94:	9400      	str	r4, [sp, #0]
 8004b96:	f7fd fa7f 	bl	8002098 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 8004b9a:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <generateWall+0x514>)
 8004b9c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4905      	ldr	r1, [pc, #20]	; (8004bbc <generateWall+0x514>)
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e03b      	b.n	8004c30 <generateWall+0x588>
 8004bb8:	20001a9c 	.word	0x20001a9c
 8004bbc:	20000320 	.word	0x20000320
 8004bc0:	20000094 	.word	0x20000094
 8004bc4:	20000098 	.word	0x20000098
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	330a      	adds	r3, #10
 8004bce:	b298      	uxth	r0, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	b299      	uxth	r1, r3
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3313      	adds	r3, #19
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3309      	adds	r3, #9
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004be8:	9400      	str	r4, [sp, #0]
 8004bea:	f7fd fa55 	bl	8002098 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b0a      	subs	r3, #10
 8004bf4:	b298      	uxth	r0, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	b299      	uxth	r1, r3
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3309      	adds	r3, #9
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004c0e:	9400      	str	r4, [sp, #0]
 8004c10:	f7fd fa42 	bl	8002098 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <generateWall+0x5dc>)
 8004c16:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4919      	ldr	r1, [pc, #100]	; (8004c84 <generateWall+0x5dc>)
 8004c20:	4613      	mov	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <generateWall+0x5dc>)
 8004c32:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004c36:	3310      	adds	r3, #16
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <generateWall+0x5dc>)
 8004c3e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004c42:	3310      	adds	r3, #16
 8004c44:	601a      	str	r2, [r3, #0]
			wallObject.vertical = !wallObject.vertical;
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <generateWall+0x5dc>)
 8004c48:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <generateWall+0x5dc>)
 8004c5e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004c62:	3314      	adds	r3, #20
 8004c64:	601a      	str	r2, [r3, #0]
			break;
 8004c66:	e00a      	b.n	8004c7e <generateWall+0x5d6>
				continue;
 8004c68:	bf00      	nop
 8004c6a:	e532      	b.n	80046d2 <generateWall+0x2a>
				continue;
 8004c6c:	bf00      	nop
 8004c6e:	e530      	b.n	80046d2 <generateWall+0x2a>
				continue;
 8004c70:	bf00      	nop
 8004c72:	e52e      	b.n	80046d2 <generateWall+0x2a>
					continue;
 8004c74:	bf00      	nop
 8004c76:	e52c      	b.n	80046d2 <generateWall+0x2a>
					continue;
 8004c78:	bf00      	nop
		{
 8004c7a:	e52a      	b.n	80046d2 <generateWall+0x2a>
		return;
 8004c7c:	bf00      	nop
		}
	}
}
 8004c7e:	372c      	adds	r7, #44	; 0x2c
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd90      	pop	{r4, r7, pc}
 8004c84:	20000320 	.word	0x20000320

08004c88 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004c8c:	4802      	ldr	r0, [pc, #8]	; (8004c98 <timer_init+0x10>)
 8004c8e:	f004 fc4f 	bl	8009530 <HAL_TIM_Base_Start_IT>
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20002b08 	.word	0x20002b08

08004c9c <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 8004ca6:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <setTimerSnakeRun+0x2c>)
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <setTimerSnakeRun+0x2c>)
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <setTimerSnakeRun+0x30>)
 8004cb2:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <setTimerSnakeRun+0x34>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	801a      	strh	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	2000017e 	.word	0x2000017e
 8004ccc:	2000017c 	.word	0x2000017c
 8004cd0:	2000017a 	.word	0x2000017a

08004cd4 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <setTimerTiming+0x34>)
 8004cea:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <setTimerTiming+0x34>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <setTimerTiming+0x38>)
 8004cf2:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <setTimerTiming+0x3c>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	801a      	strh	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000188 	.word	0x20000188
 8004d0c:	20000184 	.word	0x20000184
 8004d10:	20000180 	.word	0x20000180

08004d14 <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 8004d1e:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <setTimerDeTime+0x2c>)
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <setTimerDeTime+0x2c>)
 8004d26:	881a      	ldrh	r2, [r3, #0]
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <setTimerDeTime+0x30>)
 8004d2a:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <setTimerDeTime+0x34>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	801a      	strh	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000190 	.word	0x20000190
 8004d44:	2000018e 	.word	0x2000018e
 8004d48:	2000018c 	.word	0x2000018c

08004d4c <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 8004d56:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <setTimerGenerateWall+0x2c>)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <setTimerGenerateWall+0x2c>)
 8004d5e:	881a      	ldrh	r2, [r3, #0]
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <setTimerGenerateWall+0x30>)
 8004d62:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <setTimerGenerateWall+0x34>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	801a      	strh	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000196 	.word	0x20000196
 8004d7c:	20000194 	.word	0x20000194
 8004d80:	20000192 	.word	0x20000192

08004d84 <setTimerUart>:

void setTimerUart(uint16_t duration)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	80fb      	strh	r3, [r7, #6]
	timerForUart_MUL= duration/ TIMER_CYCLE_2;
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <setTimerUart+0x2c>)
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	8013      	strh	r3, [r2, #0]
	timerForUart= timerForUart_MUL;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <setTimerUart+0x2c>)
 8004d96:	881a      	ldrh	r2, [r3, #0]
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <setTimerUart+0x30>)
 8004d9a:	801a      	strh	r2, [r3, #0]
	flagForUart= 0;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <setTimerUart+0x34>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	801a      	strh	r2, [r3, #0]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	2000019c 	.word	0x2000019c
 8004db4:	2000019a 	.word	0x2000019a
 8004db8:	20000198 	.word	0x20000198

08004dbc <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <setTimerButton+0x2c>)
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <setTimerButton+0x2c>)
 8004dce:	881a      	ldrh	r2, [r3, #0]
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <setTimerButton+0x30>)
 8004dd2:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <setTimerButton+0x34>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	801a      	strh	r2, [r3, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000178 	.word	0x20000178
 8004dec:	20000176 	.word	0x20000176
 8004df0:	20000174 	.word	0x20000174

08004df4 <setTimerSendSensor>:

void setTimerSendSensor(uint16_t duration)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	80fb      	strh	r3, [r7, #6]
	timerForSendSensor_MUL= duration/TIMER_CYCLE_2;
 8004dfe:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <setTimerSendSensor+0x2c>)
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	8013      	strh	r3, [r2, #0]
	timerForSendSensor= timerForSendSensor_MUL;
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <setTimerSendSensor+0x2c>)
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <setTimerSendSensor+0x30>)
 8004e0a:	801a      	strh	r2, [r3, #0]
	flagForSendSensor= 0;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <setTimerSendSensor+0x34>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	801a      	strh	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	200001a2 	.word	0x200001a2
 8004e24:	200001a0 	.word	0x200001a0
 8004e28:	2000019e 	.word	0x2000019e

08004e2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	f040 808c 	bne.w	8004f58 <HAL_TIM_PeriodElapsedCallback+0x12c>
		if(timerForSnakeRun > 0)
 8004e40:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			timerForSnakeRun--;
 8004e48:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004e52:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 8004e54:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_PeriodElapsedCallback+0x3e>
				flagForSnakeRun = 1;
 8004e5c:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 8004e62:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004e68:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 8004e6a:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d010      	beq.n	8004e94 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			timerForButton--;
 8004e72:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004e7c:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				flagForButton= 1;
 8004e86:	4b3a      	ldr	r3, [pc, #232]	; (8004f70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 8004e8c:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004e92:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 8004e94:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			timerForTiming--;
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004ea4:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 8004ea6:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x88>
			{
				flagForTiming = 1;
 8004eae:	4b33      	ldr	r3, [pc, #204]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 8004eb4:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			timerForDeTime--;
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004ec6:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				flagForDeTime = 1;
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			timerForGenerateWall--;
 8004ede:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004ee8:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_PeriodElapsedCallback+0xd4>
			{
				flagForGenerateWall= 1;
 8004ef2:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004efe:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForUart > 0)
 8004f00:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_TIM_PeriodElapsedCallback+0xfe>
		{
			timerForUart--;
 8004f08:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004f12:	801a      	strh	r2, [r3, #0]
			if (timerForUart <= 0)
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_TIM_PeriodElapsedCallback+0xfe>
			{
				flagForUart= 1;
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	801a      	strh	r2, [r3, #0]
				timerForUart= timerForUart_MUL;
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004f28:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForSendSensor > 0)
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d010      	beq.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0x128>
		{
			timerForSendSensor--;
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004f3c:	801a      	strh	r2, [r3, #0]
			if (timerForSendSensor <= 0)
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_PeriodElapsedCallback+0x128>
			{
				flagForSendSensor= 1;
 8004f46:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	801a      	strh	r2, [r3, #0]
				timerForSendSensor= timerForSendSensor_MUL;
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004f52:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8004f54:	f7fd fcf4 	bl	8002940 <led7_Scan>
	}
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	2000017c 	.word	0x2000017c
 8004f64:	2000017a 	.word	0x2000017a
 8004f68:	2000017e 	.word	0x2000017e
 8004f6c:	20000176 	.word	0x20000176
 8004f70:	20000174 	.word	0x20000174
 8004f74:	20000178 	.word	0x20000178
 8004f78:	20000184 	.word	0x20000184
 8004f7c:	20000180 	.word	0x20000180
 8004f80:	2000018e 	.word	0x2000018e
 8004f84:	2000018c 	.word	0x2000018c
 8004f88:	20000194 	.word	0x20000194
 8004f8c:	20000192 	.word	0x20000192
 8004f90:	20000196 	.word	0x20000196
 8004f94:	2000019a 	.word	0x2000019a
 8004f98:	20000198 	.word	0x20000198
 8004f9c:	2000019c 	.word	0x2000019c
 8004fa0:	200001a0 	.word	0x200001a0
 8004fa4:	2000019e 	.word	0x2000019e
 8004fa8:	200001a2 	.word	0x200001a2

08004fac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <MX_SPI1_Init+0x68>)
 8004fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fc4:	4b12      	ldr	r3, [pc, #72]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <MX_SPI1_Init+0x64>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <MX_SPI1_Init+0x64>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <MX_SPI1_Init+0x64>)
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ffc:	4804      	ldr	r0, [pc, #16]	; (8005010 <MX_SPI1_Init+0x64>)
 8004ffe:	f003 ff6f 	bl	8008ee0 <HAL_SPI_Init>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005008:	f7fd fede 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20002a68 	.word	0x20002a68
 8005014:	40013000 	.word	0x40013000

08005018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_SPI_MspInit+0x84>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d12b      	bne.n	8005092 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	4b18      	ldr	r3, [pc, #96]	; (80050a0 <HAL_SPI_MspInit+0x88>)
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <HAL_SPI_MspInit+0x88>)
 8005044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005048:	6453      	str	r3, [r2, #68]	; 0x44
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <HAL_SPI_MspInit+0x88>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_SPI_MspInit+0x88>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <HAL_SPI_MspInit+0x88>)
 8005060:	f043 0302 	orr.w	r3, r3, #2
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <HAL_SPI_MspInit+0x88>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005072:	2338      	movs	r3, #56	; 0x38
 8005074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507e:	2303      	movs	r3, #3
 8005080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005082:	2305      	movs	r3, #5
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	4619      	mov	r1, r3
 800508c:	4805      	ldr	r0, [pc, #20]	; (80050a4 <HAL_SPI_MspInit+0x8c>)
 800508e:	f003 f8e5 	bl	800825c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005092:	bf00      	nop
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40013000 	.word	0x40013000
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40020400 	.word	0x40020400

080050a8 <startUI>:
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"
#include "uart.h"

void startUI(){
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b093      	sub	sp, #76	; 0x4c
 80050ac:	af04      	add	r7, sp, #16
	char str1[50] = "";
 80050ae:	2300      	movs	r3, #0
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	222e      	movs	r2, #46	; 0x2e
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f006 fa05 	bl	800b4c8 <memset>

	lcd_Clear(BLACK);
 80050be:	2000      	movs	r0, #0
 80050c0:	f7fc ffb8 	bl	8002034 <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80050c4:	4b32      	ldr	r3, [pc, #200]	; (8005190 <startUI+0xe8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	b298      	uxth	r0, r3
 80050ca:	4b32      	ldr	r3, [pc, #200]	; (8005194 <startUI+0xec>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	b299      	uxth	r1, r3
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <startUI+0xf0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	4b31      	ldr	r3, [pc, #196]	; (800519c <startUI+0xf4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	4c30      	ldr	r4, [pc, #192]	; (80051a0 <startUI+0xf8>)
 80050de:	9400      	str	r4, [sp, #0]
 80050e0:	f7fd f9b2 	bl	8002448 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80050e4:	2300      	movs	r3, #0
 80050e6:	9302      	str	r3, [sp, #8]
 80050e8:	2318      	movs	r3, #24
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	f248 4330 	movw	r3, #33840	; 0x8430
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050f6:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <startUI+0xfc>)
 80050f8:	2137      	movs	r1, #55	; 0x37
 80050fa:	203c      	movs	r0, #60	; 0x3c
 80050fc:	f7fd fb7e 	bl	80027fc <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 8005100:	2300      	movs	r3, #0
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	2318      	movs	r3, #24
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	f248 4330 	movw	r3, #33840	; 0x8430
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005112:	4a25      	ldr	r2, [pc, #148]	; (80051a8 <startUI+0x100>)
 8005114:	2164      	movs	r1, #100	; 0x64
 8005116:	2028      	movs	r0, #40	; 0x28
 8005118:	f7fd fb70 	bl	80027fc <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 800511c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	23b4      	movs	r3, #180	; 0xb4
 8005124:	22b4      	movs	r2, #180	; 0xb4
 8005126:	2196      	movs	r1, #150	; 0x96
 8005128:	203c      	movs	r0, #60	; 0x3c
 800512a:	f7fd f886 	bl	800223a <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 800512e:	4b1f      	ldr	r3, [pc, #124]	; (80051ac <startUI+0x104>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fd fea0 	bl	8002e78 <convert2str>
 8005138:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 800513a:	463b      	mov	r3, r7
 800513c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800513e:	4618      	mov	r0, r3
 8005140:	f006 fa6c 	bl	800b61c <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8005144:	463a      	mov	r2, r7
 8005146:	2301      	movs	r3, #1
 8005148:	9302      	str	r3, [sp, #8]
 800514a:	2318      	movs	r3, #24
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005158:	2198      	movs	r1, #152	; 0x98
 800515a:	2000      	movs	r0, #0
 800515c:	f7fd fbb2 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8005160:	2300      	movs	r3, #0
 8005162:	9302      	str	r3, [sp, #8]
 8005164:	2318      	movs	r3, #24
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	f248 4330 	movw	r3, #33840	; 0x8430
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005172:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <startUI+0x108>)
 8005174:	21e6      	movs	r1, #230	; 0xe6
 8005176:	2050      	movs	r0, #80	; 0x50
 8005178:	f7fd fb40 	bl	80027fc <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 800517c:	2300      	movs	r3, #0
 800517e:	2200      	movs	r2, #0
 8005180:	2100      	movs	r1, #0
 8005182:	2000      	movs	r0, #0
 8005184:	f001 fbae 	bl	80068e4 <show7seg>
}
 8005188:	bf00      	nop
 800518a:	373c      	adds	r7, #60	; 0x3c
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	20000074 	.word	0x20000074
 8005194:	20000078 	.word	0x20000078
 8005198:	2000007c 	.word	0x2000007c
 800519c:	20000080 	.word	0x20000080
 80051a0:	0800fe74 	.word	0x0800fe74
 80051a4:	0800cb70 	.word	0x0800cb70
 80051a8:	0800cb80 	.word	0x0800cb80
 80051ac:	20000130 	.word	0x20000130
 80051b0:	0800cb90 	.word	0x0800cb90

080051b4 <eraseArrow>:

void eraseArrow()
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	f240 134b 	movw	r3, #331	; 0x14b
 80051c2:	22dd      	movs	r2, #221	; 0xdd
 80051c4:	21be      	movs	r1, #190	; 0xbe
 80051c6:	20b4      	movs	r0, #180	; 0xb4
 80051c8:	f7fc ff66 	bl	8002098 <lcd_Fill>
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <drawArrow>:

void drawArrow()
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 80051da:	f7ff ffeb 	bl	80051b4 <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 80051de:	4b23      	ldr	r3, [pc, #140]	; (800526c <drawArrow+0x98>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b298      	uxth	r0, r3
 80051e4:	4b22      	ldr	r3, [pc, #136]	; (8005270 <drawArrow+0x9c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b299      	uxth	r1, r3
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <drawArrow+0xa0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <drawArrow+0xa4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80051fa:	9400      	str	r4, [sp, #0]
 80051fc:	f7fc ff99 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8005200:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <drawArrow+0xa0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	b298      	uxth	r0, r3
 8005206:	4b1c      	ldr	r3, [pc, #112]	; (8005278 <drawArrow+0xa4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b299      	uxth	r1, r3
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <drawArrow+0x98>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b29c      	uxth	r4, r3
 8005212:	4b19      	ldr	r3, [pc, #100]	; (8005278 <drawArrow+0xa4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	4b14      	ldr	r3, [pc, #80]	; (8005270 <drawArrow+0x9c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	b29b      	uxth	r3, r3
 8005226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800522a:	9200      	str	r2, [sp, #0]
 800522c:	4622      	mov	r2, r4
 800522e:	f7fc ff80 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <drawArrow+0x98>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	b298      	uxth	r0, r3
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <drawArrow+0x9c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b299      	uxth	r1, r3
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <drawArrow+0x98>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b29c      	uxth	r4, r3
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <drawArrow+0xa4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <drawArrow+0x9c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800525c:	9200      	str	r2, [sp, #0]
 800525e:	4622      	mov	r2, r4
 8005260:	f7fc ff67 	bl	8002132 <lcd_DrawLine>
}
 8005264:	bf00      	nop
 8005266:	3704      	adds	r7, #4
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}
 800526c:	20000008 	.word	0x20000008
 8005270:	20000010 	.word	0x20000010
 8005274:	20000004 	.word	0x20000004
 8005278:	2000000c 	.word	0x2000000c

0800527c <arrowInPickMode>:

void arrowInPickMode()
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8005282:	4bc0      	ldr	r3, [pc, #768]	; (8005584 <arrowInPickMode+0x308>)
 8005284:	88db      	ldrh	r3, [r3, #6]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d117      	bne.n	80052ba <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 800528a:	4bbf      	ldr	r3, [pc, #764]	; (8005588 <arrowInPickMode+0x30c>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8005290:	4bbe      	ldr	r3, [pc, #760]	; (800558c <arrowInPickMode+0x310>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d009      	beq.n	80052ac <arrowInPickMode+0x30>
 8005298:	2b05      	cmp	r3, #5
 800529a:	dc11      	bgt.n	80052c0 <arrowInPickMode+0x44>
 800529c:	2b03      	cmp	r3, #3
 800529e:	d00e      	beq.n	80052be <arrowInPickMode+0x42>
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d10d      	bne.n	80052c0 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 80052a4:	4bb9      	ldr	r3, [pc, #740]	; (800558c <arrowInPickMode+0x310>)
 80052a6:	2203      	movs	r2, #3
 80052a8:	601a      	str	r2, [r3, #0]
			break;
 80052aa:	e009      	b.n	80052c0 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 80052ac:	4bb7      	ldr	r3, [pc, #732]	; (800558c <arrowInPickMode+0x310>)
 80052ae:	2204      	movs	r2, #4
 80052b0:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 80052b2:	4bb7      	ldr	r3, [pc, #732]	; (8005590 <arrowInPickMode+0x314>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
			break;
 80052b8:	e002      	b.n	80052c0 <arrowInPickMode+0x44>
		}

	}
 80052ba:	bf00      	nop
 80052bc:	e000      	b.n	80052c0 <arrowInPickMode+0x44>
			break;
 80052be:	bf00      	nop
	if(button_count[7] == 1)
 80052c0:	4bb0      	ldr	r3, [pc, #704]	; (8005584 <arrowInPickMode+0x308>)
 80052c2:	89db      	ldrh	r3, [r3, #14]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d118      	bne.n	80052fa <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 80052c8:	4baf      	ldr	r3, [pc, #700]	; (8005588 <arrowInPickMode+0x30c>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 80052ce:	4baf      	ldr	r3, [pc, #700]	; (800558c <arrowInPickMode+0x310>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d013      	beq.n	80052fe <arrowInPickMode+0x82>
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	dc12      	bgt.n	8005300 <arrowInPickMode+0x84>
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d002      	beq.n	80052e4 <arrowInPickMode+0x68>
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d007      	beq.n	80052f2 <arrowInPickMode+0x76>
 80052e2:	e00d      	b.n	8005300 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 80052e4:	4ba9      	ldr	r3, [pc, #676]	; (800558c <arrowInPickMode+0x310>)
 80052e6:	2204      	movs	r2, #4
 80052e8:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 80052ea:	4ba9      	ldr	r3, [pc, #676]	; (8005590 <arrowInPickMode+0x314>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
			break;
 80052f0:	e006      	b.n	8005300 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 80052f2:	4ba6      	ldr	r3, [pc, #664]	; (800558c <arrowInPickMode+0x310>)
 80052f4:	2205      	movs	r2, #5
 80052f6:	601a      	str	r2, [r3, #0]
			break;
 80052f8:	e002      	b.n	8005300 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <arrowInPickMode+0x84>
			break;
 80052fe:	bf00      	nop
	if(flagChange == 1)
 8005300:	4ba1      	ldr	r3, [pc, #644]	; (8005588 <arrowInPickMode+0x30c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	f040 813a 	bne.w	800557e <arrowInPickMode+0x302>
	{
		switch (arrowMode)
 800530a:	4ba0      	ldr	r3, [pc, #640]	; (800558c <arrowInPickMode+0x310>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b05      	cmp	r3, #5
 8005310:	f000 80e9 	beq.w	80054e6 <arrowInPickMode+0x26a>
 8005314:	2b05      	cmp	r3, #5
 8005316:	f300 812f 	bgt.w	8005578 <arrowInPickMode+0x2fc>
 800531a:	2b03      	cmp	r3, #3
 800531c:	d002      	beq.n	8005324 <arrowInPickMode+0xa8>
 800531e:	2b04      	cmp	r3, #4
 8005320:	d04f      	beq.n	80053c2 <arrowInPickMode+0x146>
 8005322:	e129      	b.n	8005578 <arrowInPickMode+0x2fc>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 8005324:	4b9b      	ldr	r3, [pc, #620]	; (8005594 <arrowInPickMode+0x318>)
 8005326:	22d2      	movs	r2, #210	; 0xd2
 8005328:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 800532a:	4b9b      	ldr	r3, [pc, #620]	; (8005598 <arrowInPickMode+0x31c>)
 800532c:	22be      	movs	r2, #190	; 0xbe
 800532e:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005338:	22f0      	movs	r2, #240	; 0xf0
 800533a:	21b4      	movs	r1, #180	; 0xb4
 800533c:	2000      	movs	r0, #0
 800533e:	f7fc feab 	bl	8002098 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8005342:	2300      	movs	r3, #0
 8005344:	9302      	str	r3, [sp, #8]
 8005346:	2318      	movs	r3, #24
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	f248 4330 	movw	r3, #33840	; 0x8430
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005354:	4a91      	ldr	r2, [pc, #580]	; (800559c <arrowInPickMode+0x320>)
 8005356:	21c8      	movs	r1, #200	; 0xc8
 8005358:	200a      	movs	r0, #10
 800535a:	f7fd fa4f 	bl	80027fc <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 800535e:	2300      	movs	r3, #0
 8005360:	9302      	str	r3, [sp, #8]
 8005362:	2318      	movs	r3, #24
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	f248 4330 	movw	r3, #33840	; 0x8430
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005370:	4a8b      	ldr	r2, [pc, #556]	; (80055a0 <arrowInPickMode+0x324>)
 8005372:	21fa      	movs	r1, #250	; 0xfa
 8005374:	200a      	movs	r0, #10
 8005376:	f7fd fa41 	bl	80027fc <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 800537a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005384:	2282      	movs	r2, #130	; 0x82
 8005386:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800538a:	206e      	movs	r0, #110	; 0x6e
 800538c:	f7fc fed1 	bl	8002132 <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8005390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	f44f 739b 	mov.w	r3, #310	; 0x136
 800539a:	2278      	movs	r2, #120	; 0x78
 800539c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80053a0:	206e      	movs	r0, #110	; 0x6e
 80053a2:	f7fc fec6 	bl	8002132 <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 80053a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80053b0:	2282      	movs	r2, #130	; 0x82
 80053b2:	f44f 719b 	mov.w	r1, #310	; 0x136
 80053b6:	2078      	movs	r0, #120	; 0x78
 80053b8:	f7fc febb 	bl	8002132 <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 80053bc:	f7ff ff0a 	bl	80051d4 <drawArrow>
			break;
 80053c0:	e0da      	b.n	8005578 <arrowInPickMode+0x2fc>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 80053c2:	2300      	movs	r3, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80053ca:	22f0      	movs	r2, #240	; 0xf0
 80053cc:	21b4      	movs	r1, #180	; 0xb4
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7fc fe62 	bl	8002098 <lcd_Fill>
			if(flagUpDOwn == 0)
 80053d4:	4b6e      	ldr	r3, [pc, #440]	; (8005590 <arrowInPickMode+0x314>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d13d      	bne.n	8005458 <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 80053dc:	4b6d      	ldr	r3, [pc, #436]	; (8005594 <arrowInPickMode+0x318>)
 80053de:	22d2      	movs	r2, #210	; 0xd2
 80053e0:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 80053e2:	4b6d      	ldr	r3, [pc, #436]	; (8005598 <arrowInPickMode+0x31c>)
 80053e4:	22be      	movs	r2, #190	; 0xbe
 80053e6:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 80053e8:	2300      	movs	r3, #0
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	2318      	movs	r3, #24
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	f248 4330 	movw	r3, #33840	; 0x8430
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053fa:	4a69      	ldr	r2, [pc, #420]	; (80055a0 <arrowInPickMode+0x324>)
 80053fc:	21c8      	movs	r1, #200	; 0xc8
 80053fe:	200a      	movs	r0, #10
 8005400:	f7fd f9fc 	bl	80027fc <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 8005404:	2300      	movs	r3, #0
 8005406:	9302      	str	r3, [sp, #8]
 8005408:	2318      	movs	r3, #24
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	f248 4330 	movw	r3, #33840	; 0x8430
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005416:	4a63      	ldr	r2, [pc, #396]	; (80055a4 <arrowInPickMode+0x328>)
 8005418:	21fa      	movs	r1, #250	; 0xfa
 800541a:	200a      	movs	r0, #10
 800541c:	f7fd f9ee 	bl	80027fc <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 8005420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	23be      	movs	r3, #190	; 0xbe
 8005428:	2282      	movs	r2, #130	; 0x82
 800542a:	21be      	movs	r1, #190	; 0xbe
 800542c:	206e      	movs	r0, #110	; 0x6e
 800542e:	f7fc fe80 	bl	8002132 <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 8005432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	23b4      	movs	r3, #180	; 0xb4
 800543a:	2278      	movs	r2, #120	; 0x78
 800543c:	21be      	movs	r1, #190	; 0xbe
 800543e:	206e      	movs	r0, #110	; 0x6e
 8005440:	f7fc fe77 	bl	8002132 <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 8005444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	23be      	movs	r3, #190	; 0xbe
 800544c:	2282      	movs	r2, #130	; 0x82
 800544e:	21b4      	movs	r1, #180	; 0xb4
 8005450:	2078      	movs	r0, #120	; 0x78
 8005452:	f7fc fe6e 	bl	8002132 <lcd_DrawLine>
 8005456:	e043      	b.n	80054e0 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 8005458:	4b4e      	ldr	r3, [pc, #312]	; (8005594 <arrowInPickMode+0x318>)
 800545a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800545e:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8005460:	4b4d      	ldr	r3, [pc, #308]	; (8005598 <arrowInPickMode+0x31c>)
 8005462:	22f0      	movs	r2, #240	; 0xf0
 8005464:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8005466:	2300      	movs	r3, #0
 8005468:	9302      	str	r3, [sp, #8]
 800546a:	2318      	movs	r3, #24
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	f248 4330 	movw	r3, #33840	; 0x8430
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005478:	4a48      	ldr	r2, [pc, #288]	; (800559c <arrowInPickMode+0x320>)
 800547a:	21c8      	movs	r1, #200	; 0xc8
 800547c:	200a      	movs	r0, #10
 800547e:	f7fd f9bd 	bl	80027fc <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8005482:	2300      	movs	r3, #0
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	2318      	movs	r3, #24
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	f248 4330 	movw	r3, #33840	; 0x8430
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005494:	4a42      	ldr	r2, [pc, #264]	; (80055a0 <arrowInPickMode+0x324>)
 8005496:	21fa      	movs	r1, #250	; 0xfa
 8005498:	200a      	movs	r0, #10
 800549a:	f7fd f9af 	bl	80027fc <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 800549e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80054a8:	2282      	movs	r2, #130	; 0x82
 80054aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80054ae:	206e      	movs	r0, #110	; 0x6e
 80054b0:	f7fc fe3f 	bl	8002132 <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 80054b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	f44f 739b 	mov.w	r3, #310	; 0x136
 80054be:	2278      	movs	r2, #120	; 0x78
 80054c0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80054c4:	206e      	movs	r0, #110	; 0x6e
 80054c6:	f7fc fe34 	bl	8002132 <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 80054ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80054d4:	2282      	movs	r2, #130	; 0x82
 80054d6:	f44f 719b 	mov.w	r1, #310	; 0x136
 80054da:	2078      	movs	r0, #120	; 0x78
 80054dc:	f7fc fe29 	bl	8002132 <lcd_DrawLine>
			}

			drawArrow();
 80054e0:	f7ff fe78 	bl	80051d4 <drawArrow>
			break;
 80054e4:	e048      	b.n	8005578 <arrowInPickMode+0x2fc>
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <arrowInPickMode+0x318>)
 80054e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054ec:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 80054ee:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <arrowInPickMode+0x31c>)
 80054f0:	22f0      	movs	r2, #240	; 0xf0
 80054f2:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80054fc:	22f0      	movs	r2, #240	; 0xf0
 80054fe:	21b4      	movs	r1, #180	; 0xb4
 8005500:	2000      	movs	r0, #0
 8005502:	f7fc fdc9 	bl	8002098 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8005506:	2300      	movs	r3, #0
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	2318      	movs	r3, #24
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	f248 4330 	movw	r3, #33840	; 0x8430
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005518:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <arrowInPickMode+0x324>)
 800551a:	21c8      	movs	r1, #200	; 0xc8
 800551c:	200a      	movs	r0, #10
 800551e:	f7fd f96d 	bl	80027fc <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 8005522:	2300      	movs	r3, #0
 8005524:	9302      	str	r3, [sp, #8]
 8005526:	2318      	movs	r3, #24
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	f248 4330 	movw	r3, #33840	; 0x8430
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005534:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <arrowInPickMode+0x328>)
 8005536:	21fa      	movs	r1, #250	; 0xfa
 8005538:	200a      	movs	r0, #10
 800553a:	f7fd f95f 	bl	80027fc <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 800553e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	23be      	movs	r3, #190	; 0xbe
 8005546:	2282      	movs	r2, #130	; 0x82
 8005548:	21be      	movs	r1, #190	; 0xbe
 800554a:	206e      	movs	r0, #110	; 0x6e
 800554c:	f7fc fdf1 	bl	8002132 <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 8005550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	23b4      	movs	r3, #180	; 0xb4
 8005558:	2278      	movs	r2, #120	; 0x78
 800555a:	21be      	movs	r1, #190	; 0xbe
 800555c:	206e      	movs	r0, #110	; 0x6e
 800555e:	f7fc fde8 	bl	8002132 <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 8005562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	23be      	movs	r3, #190	; 0xbe
 800556a:	2282      	movs	r2, #130	; 0x82
 800556c:	21b4      	movs	r1, #180	; 0xb4
 800556e:	2078      	movs	r0, #120	; 0x78
 8005570:	f7fc fddf 	bl	8002132 <lcd_DrawLine>

			// draw arrow
			drawArrow();
 8005574:	f7ff fe2e 	bl	80051d4 <drawArrow>
		}
		flagChange = 0;
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <arrowInPickMode+0x30c>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
	}
}
 800557e:	bf00      	nop
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000268 	.word	0x20000268
 8005588:	20000140 	.word	0x20000140
 800558c:	20000014 	.word	0x20000014
 8005590:	2000013c 	.word	0x2000013c
 8005594:	2000000c 	.word	0x2000000c
 8005598:	20000010 	.word	0x20000010
 800559c:	0800cb98 	.word	0x0800cb98
 80055a0:	0800cba8 	.word	0x0800cba8
 80055a4:	0800cbb8 	.word	0x0800cbb8

080055a8 <pickMode>:

void pickMode(uint16_t id){
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b095      	sub	sp, #84	; 0x54
 80055ac:	af04      	add	r7, sp, #16
 80055ae:	4603      	mov	r3, r0
 80055b0:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7fc fd3e 	bl	8002034 <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80055b8:	4b4e      	ldr	r3, [pc, #312]	; (80056f4 <pickMode+0x14c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b298      	uxth	r0, r3
 80055be:	4b4e      	ldr	r3, [pc, #312]	; (80056f8 <pickMode+0x150>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	b299      	uxth	r1, r3
 80055c4:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <pickMode+0x154>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	4b4d      	ldr	r3, [pc, #308]	; (8005700 <pickMode+0x158>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	4c4c      	ldr	r4, [pc, #304]	; (8005704 <pickMode+0x15c>)
 80055d2:	9400      	str	r4, [sp, #0]
 80055d4:	f7fc ff38 	bl	8002448 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80055d8:	2300      	movs	r3, #0
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	2318      	movs	r3, #24
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ea:	4a47      	ldr	r2, [pc, #284]	; (8005708 <pickMode+0x160>)
 80055ec:	2137      	movs	r1, #55	; 0x37
 80055ee:	203c      	movs	r0, #60	; 0x3c
 80055f0:	f7fd f904 	bl	80027fc <lcd_ShowStr>

	char str1[50] = " ID: ";
 80055f4:	4a45      	ldr	r2, [pc, #276]	; (800570c <pickMode+0x164>)
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055fe:	6018      	str	r0, [r3, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	8019      	strh	r1, [r3, #0]
 8005604:	f107 030e 	add.w	r3, r7, #14
 8005608:	222c      	movs	r2, #44	; 0x2c
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f005 ff5b 	bl	800b4c8 <memset>
	char *str2 = convert2str(id);
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd fc2f 	bl	8002e78 <convert2str>
 800561a:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005622:	4618      	mov	r0, r3
 8005624:	f005 fffa 	bl	800b61c <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8005628:	f107 0208 	add.w	r2, r7, #8
 800562c:	2300      	movs	r3, #0
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	2318      	movs	r3, #24
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	f248 4330 	movw	r3, #33840	; 0x8430
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800563e:	2164      	movs	r1, #100	; 0x64
 8005640:	2000      	movs	r0, #0
 8005642:	f7fd f93f 	bl	80028c4 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 8005646:	2300      	movs	r3, #0
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	2318      	movs	r3, #24
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	f248 4330 	movw	r3, #33840	; 0x8430
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005658:	4a2d      	ldr	r2, [pc, #180]	; (8005710 <pickMode+0x168>)
 800565a:	2196      	movs	r1, #150	; 0x96
 800565c:	2000      	movs	r0, #0
 800565e:	f7fd f931 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8005662:	2300      	movs	r3, #0
 8005664:	9302      	str	r3, [sp, #8]
 8005666:	2318      	movs	r3, #24
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	f248 4330 	movw	r3, #33840	; 0x8430
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005674:	4a27      	ldr	r2, [pc, #156]	; (8005714 <pickMode+0x16c>)
 8005676:	21c8      	movs	r1, #200	; 0xc8
 8005678:	200a      	movs	r0, #10
 800567a:	f7fd f8bf 	bl	80027fc <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 800567e:	2300      	movs	r3, #0
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	2318      	movs	r3, #24
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	f248 4330 	movw	r3, #33840	; 0x8430
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005690:	4a21      	ldr	r2, [pc, #132]	; (8005718 <pickMode+0x170>)
 8005692:	21fa      	movs	r1, #250	; 0xfa
 8005694:	200a      	movs	r0, #10
 8005696:	f7fd f8b1 	bl	80027fc <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 800569a:	4b20      	ldr	r3, [pc, #128]	; (800571c <pickMode+0x174>)
 800569c:	22d2      	movs	r2, #210	; 0xd2
 800569e:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 80056a0:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <pickMode+0x178>)
 80056a2:	22be      	movs	r2, #190	; 0xbe
 80056a4:	601a      	str	r2, [r3, #0]
	drawArrow();
 80056a6:	f7ff fd95 	bl	80051d4 <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 80056aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80056b4:	2282      	movs	r2, #130	; 0x82
 80056b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80056ba:	206e      	movs	r0, #110	; 0x6e
 80056bc:	f7fc fd39 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 80056c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	f44f 739b 	mov.w	r3, #310	; 0x136
 80056ca:	2278      	movs	r2, #120	; 0x78
 80056cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80056d0:	206e      	movs	r0, #110	; 0x6e
 80056d2:	f7fc fd2e 	bl	8002132 <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 80056d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80056e0:	2282      	movs	r2, #130	; 0x82
 80056e2:	f44f 719b 	mov.w	r1, #310	; 0x136
 80056e6:	2078      	movs	r0, #120	; 0x78
 80056e8:	f7fc fd23 	bl	8002132 <lcd_DrawLine>

}
 80056ec:	bf00      	nop
 80056ee:	3744      	adds	r7, #68	; 0x44
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd90      	pop	{r4, r7, pc}
 80056f4:	20000074 	.word	0x20000074
 80056f8:	20000078 	.word	0x20000078
 80056fc:	2000007c 	.word	0x2000007c
 8005700:	20000080 	.word	0x20000080
 8005704:	0800fe74 	.word	0x0800fe74
 8005708:	0800cb70 	.word	0x0800cb70
 800570c:	0800cbd0 	.word	0x0800cbd0
 8005710:	0800cbc8 	.word	0x0800cbc8
 8005714:	0800cb98 	.word	0x0800cb98
 8005718:	0800cba8 	.word	0x0800cba8
 800571c:	2000000c 	.word	0x2000000c
 8005720:	20000010 	.word	0x20000010

08005724 <beginStartGame>:

void beginStartGame()
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b094      	sub	sp, #80	; 0x50
 8005728:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 800572a:	4b9d      	ldr	r3, [pc, #628]	; (80059a0 <beginStartGame+0x27c>)
 800572c:	8b9b      	ldrh	r3, [r3, #28]
 800572e:	2b01      	cmp	r3, #1
 8005730:	f040 81bc 	bne.w	8005aac <beginStartGame+0x388>
	{
		// button_init();
		switch (statusGame) {
 8005734:	4b9b      	ldr	r3, [pc, #620]	; (80059a4 <beginStartGame+0x280>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b0a      	cmp	r3, #10
 800573a:	f200 81b9 	bhi.w	8005ab0 <beginStartGame+0x38c>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <beginStartGame+0x20>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005771 	.word	0x08005771
 8005748:	08005797 	.word	0x08005797
 800574c:	080057af 	.word	0x080057af
 8005750:	08005ab1 	.word	0x08005ab1
 8005754:	08005ab1 	.word	0x08005ab1
 8005758:	08005ab1 	.word	0x08005ab1
 800575c:	080059cd 	.word	0x080059cd
 8005760:	080058b1 	.word	0x080058b1
 8005764:	08005823 	.word	0x08005823
 8005768:	08005861 	.word	0x08005861
 800576c:	08005a41 	.word	0x08005a41
			case INIT:
				statusGame = STARTMODE;
 8005770:	4b8c      	ldr	r3, [pc, #560]	; (80059a4 <beginStartGame+0x280>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
				ID = 0;
 8005776:	4b8c      	ldr	r3, [pc, #560]	; (80059a8 <beginStartGame+0x284>)
 8005778:	2200      	movs	r2, #0
 800577a:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 800577c:	4b8b      	ldr	r3, [pc, #556]	; (80059ac <beginStartGame+0x288>)
 800577e:	2200      	movs	r2, #0
 8005780:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8005782:	4b8b      	ldr	r3, [pc, #556]	; (80059b0 <beginStartGame+0x28c>)
 8005784:	2203      	movs	r2, #3
 8005786:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8005788:	4b8a      	ldr	r3, [pc, #552]	; (80059b4 <beginStartGame+0x290>)
 800578a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800578e:	801a      	strh	r2, [r3, #0]
				startUI();
 8005790:	f7ff fc8a 	bl	80050a8 <startUI>
				break;
 8005794:	e191      	b.n	8005aba <beginStartGame+0x396>
			case STARTMODE:
				TOTALTIME = 0;
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <beginStartGame+0x294>)
 8005798:	2200      	movs	r2, #0
 800579a:	801a      	strh	r2, [r3, #0]
				statusGame = PICKMODE;
 800579c:	4b81      	ldr	r3, [pc, #516]	; (80059a4 <beginStartGame+0x280>)
 800579e:	2202      	movs	r2, #2
 80057a0:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 80057a2:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <beginStartGame+0x284>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fefe 	bl	80055a8 <pickMode>
				break;
 80057ac:	e185      	b.n	8005aba <beginStartGame+0x396>
			case PICKMODE:
				switch (arrowMode)
 80057ae:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <beginStartGame+0x28c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d028      	beq.n	8005808 <beginStartGame+0xe4>
 80057b6:	2b05      	cmp	r3, #5
 80057b8:	f300 817c 	bgt.w	8005ab4 <beginStartGame+0x390>
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d002      	beq.n	80057c6 <beginStartGame+0xa2>
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d015      	beq.n	80057f0 <beginStartGame+0xcc>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 80057c4:	e176      	b.n	8005ab4 <beginStartGame+0x390>
					oldStatusGame = NORMALMODE;
 80057c6:	4b7d      	ldr	r3, [pc, #500]	; (80059bc <beginStartGame+0x298>)
 80057c8:	2203      	movs	r2, #3
 80057ca:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 80057cc:	4b75      	ldr	r3, [pc, #468]	; (80059a4 <beginStartGame+0x280>)
 80057ce:	2203      	movs	r2, #3
 80057d0:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 80057d2:	4b75      	ldr	r3, [pc, #468]	; (80059a8 <beginStartGame+0x284>)
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	4a75      	ldr	r2, [pc, #468]	; (80059ac <beginStartGame+0x288>)
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fd fb87 	bl	8002ef0 <setUpLcdNormalPlay>
					setTimerUart(1000);
 80057e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057e6:	f7ff facd 	bl	8004d84 <setTimerUart>
					snakeInit();
 80057ea:	f7fe fd99 	bl	8004320 <snakeInit>
					break;
 80057ee:	e017      	b.n	8005820 <beginStartGame+0xfc>
					oldStatusGame = TIMINGMODE;
 80057f0:	4b72      	ldr	r3, [pc, #456]	; (80059bc <beginStartGame+0x298>)
 80057f2:	2204      	movs	r2, #4
 80057f4:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 80057f6:	4b6f      	ldr	r3, [pc, #444]	; (80059b4 <beginStartGame+0x290>)
 80057f8:	221e      	movs	r2, #30
 80057fa:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 80057fc:	4b69      	ldr	r3, [pc, #420]	; (80059a4 <beginStartGame+0x280>)
 80057fe:	2208      	movs	r2, #8
 8005800:	601a      	str	r2, [r3, #0]
					setupTiming();
 8005802:	f000 ff7b 	bl	80066fc <setupTiming>
					break;
 8005806:	e00b      	b.n	8005820 <beginStartGame+0xfc>
					oldStatusGame = ADVANCEMODE;
 8005808:	4b6c      	ldr	r3, [pc, #432]	; (80059bc <beginStartGame+0x298>)
 800580a:	2205      	movs	r2, #5
 800580c:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 800580e:	4b69      	ldr	r3, [pc, #420]	; (80059b4 <beginStartGame+0x290>)
 8005810:	221e      	movs	r2, #30
 8005812:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 8005814:	4b63      	ldr	r3, [pc, #396]	; (80059a4 <beginStartGame+0x280>)
 8005816:	2209      	movs	r2, #9
 8005818:	601a      	str	r2, [r3, #0]
					setupAdvance();
 800581a:	f7fa ffcb 	bl	80007b4 <setupAdvance>
					break;
 800581e:	bf00      	nop
				break;
 8005820:	e148      	b.n	8005ab4 <beginStartGame+0x390>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 8005822:	4b64      	ldr	r3, [pc, #400]	; (80059b4 <beginStartGame+0x290>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fa54 	bl	8004cd4 <setTimerTiming>
				setTimerDeTime(1000);
 800582c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005830:	f7ff fa70 	bl	8004d14 <setTimerDeTime>
				oldTiming = TIMING;
 8005834:	4b5f      	ldr	r3, [pc, #380]	; (80059b4 <beginStartGame+0x290>)
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	4b61      	ldr	r3, [pc, #388]	; (80059c0 <beginStartGame+0x29c>)
 800583a:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 800583c:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <beginStartGame+0x280>)
 800583e:	2204      	movs	r2, #4
 8005840:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 8005842:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <beginStartGame+0x284>)
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	4a5b      	ldr	r2, [pc, #364]	; (80059b4 <beginStartGame+0x290>)
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	4611      	mov	r1, r2
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd fc07 	bl	8003060 <setUpLcdTimingPlay>
				setTimerUart(1000);
 8005852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005856:	f7ff fa95 	bl	8004d84 <setTimerUart>
				snakeInit();
 800585a:	f7fe fd61 	bl	8004320 <snakeInit>
				break;
 800585e:	e12c      	b.n	8005aba <beginStartGame+0x396>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 8005860:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <beginStartGame+0x290>)
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fa35 	bl	8004cd4 <setTimerTiming>
				setTimerDeTime(1000);
 800586a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800586e:	f7ff fa51 	bl	8004d14 <setTimerDeTime>
				setTimerGenerateWall(2000);
 8005872:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005876:	f7ff fa69 	bl	8004d4c <setTimerGenerateWall>
				flagForGenerateWall = 0;
 800587a:	4b52      	ldr	r3, [pc, #328]	; (80059c4 <beginStartGame+0x2a0>)
 800587c:	2200      	movs	r2, #0
 800587e:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 8005880:	4b4c      	ldr	r3, [pc, #304]	; (80059b4 <beginStartGame+0x290>)
 8005882:	881a      	ldrh	r2, [r3, #0]
 8005884:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <beginStartGame+0x29c>)
 8005886:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 8005888:	4b46      	ldr	r3, [pc, #280]	; (80059a4 <beginStartGame+0x280>)
 800588a:	2205      	movs	r2, #5
 800588c:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 800588e:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <beginStartGame+0x284>)
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	4a48      	ldr	r2, [pc, #288]	; (80059b4 <beginStartGame+0x290>)
 8005894:	8812      	ldrh	r2, [r2, #0]
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7fd fc97 	bl	80031cc <setUpLcdAdvancePlay>
				setTimerUart(1000);
 800589e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058a2:	f7ff fa6f 	bl	8004d84 <setTimerUart>
				wallInit();
 80058a6:	f7fe fc59 	bl	800415c <wallInit>
				snakeInit();
 80058aa:	f7fe fd39 	bl	8004320 <snakeInit>
				break;
 80058ae:	e104      	b.n	8005aba <beginStartGame+0x396>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 80058b0:	4b45      	ldr	r3, [pc, #276]	; (80059c8 <beginStartGame+0x2a4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d15f      	bne.n	8005978 <beginStartGame+0x254>
				{
					statusGame = oldStatusGame;
 80058b8:	4b40      	ldr	r3, [pc, #256]	; (80059bc <beginStartGame+0x298>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a39      	ldr	r2, [pc, #228]	; (80059a4 <beginStartGame+0x280>)
 80058be:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 80058c0:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <beginStartGame+0x288>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <beginStartGame+0x280>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	d030      	beq.n	8005930 <beginStartGame+0x20c>
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	f300 80f2 	bgt.w	8005ab8 <beginStartGame+0x394>
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d002      	beq.n	80058de <beginStartGame+0x1ba>
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d00e      	beq.n	80058fa <beginStartGame+0x1d6>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 80058dc:	e0ec      	b.n	8005ab8 <beginStartGame+0x394>
						oldStatusGame = NORMALMODE;
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <beginStartGame+0x298>)
 80058e0:	2203      	movs	r2, #3
 80058e2:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 80058e4:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <beginStartGame+0x284>)
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	4a30      	ldr	r2, [pc, #192]	; (80059ac <beginStartGame+0x288>)
 80058ea:	8812      	ldrh	r2, [r2, #0]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fd fafe 	bl	8002ef0 <setUpLcdNormalPlay>
						snakeInit();
 80058f4:	f7fe fd14 	bl	8004320 <snakeInit>
						break;
 80058f8:	e051      	b.n	800599e <beginStartGame+0x27a>
						oldStatusGame = TIMINGMODE;
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <beginStartGame+0x298>)
 80058fc:	2204      	movs	r2, #4
 80058fe:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005900:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <beginStartGame+0x29c>)
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <beginStartGame+0x290>)
 8005906:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005908:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <beginStartGame+0x290>)
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff f9e1 	bl	8004cd4 <setTimerTiming>
						setTimerDeTime(1000);
 8005912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005916:	f7ff f9fd 	bl	8004d14 <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <beginStartGame+0x284>)
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <beginStartGame+0x290>)
 8005920:	8812      	ldrh	r2, [r2, #0]
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f7fd fb9b 	bl	8003060 <setUpLcdTimingPlay>
						snakeInit();
 800592a:	f7fe fcf9 	bl	8004320 <snakeInit>
						break;
 800592e:	e036      	b.n	800599e <beginStartGame+0x27a>
						oldStatusGame = ADVANCEMODE;
 8005930:	4b22      	ldr	r3, [pc, #136]	; (80059bc <beginStartGame+0x298>)
 8005932:	2205      	movs	r2, #5
 8005934:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005936:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <beginStartGame+0x29c>)
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <beginStartGame+0x290>)
 800593c:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 800593e:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <beginStartGame+0x290>)
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff f9c6 	bl	8004cd4 <setTimerTiming>
						setTimerDeTime(1000);
 8005948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800594c:	f7ff f9e2 	bl	8004d14 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005950:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005954:	f7ff f9fa 	bl	8004d4c <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <beginStartGame+0x2a0>)
 800595a:	2200      	movs	r2, #0
 800595c:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <beginStartGame+0x284>)
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <beginStartGame+0x290>)
 8005964:	8812      	ldrh	r2, [r2, #0]
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f7fd fc2f 	bl	80031cc <setUpLcdAdvancePlay>
						snakeInit();
 800596e:	f7fe fcd7 	bl	8004320 <snakeInit>
						wallInit();
 8005972:	f7fe fbf3 	bl	800415c <wallInit>
						break;
 8005976:	e012      	b.n	800599e <beginStartGame+0x27a>
					statusGame = STARTMODE;
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <beginStartGame+0x280>)
 800597a:	2201      	movs	r2, #1
 800597c:	601a      	str	r2, [r3, #0]
					ID = 0;
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <beginStartGame+0x284>)
 8005980:	2200      	movs	r2, #0
 8005982:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <beginStartGame+0x288>)
 8005986:	2200      	movs	r2, #0
 8005988:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <beginStartGame+0x28c>)
 800598c:	2203      	movs	r2, #3
 800598e:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005990:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <beginStartGame+0x290>)
 8005992:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005996:	801a      	strh	r2, [r3, #0]
					startUI();
 8005998:	f7ff fb86 	bl	80050a8 <startUI>
				break;
 800599c:	e08c      	b.n	8005ab8 <beginStartGame+0x394>
 800599e:	e08b      	b.n	8005ab8 <beginStartGame+0x394>
 80059a0:	20000268 	.word	0x20000268
 80059a4:	20000144 	.word	0x20000144
 80059a8:	20000130 	.word	0x20000130
 80059ac:	20000132 	.word	0x20000132
 80059b0:	20000014 	.word	0x20000014
 80059b4:	20000000 	.word	0x20000000
 80059b8:	2000015c 	.word	0x2000015c
 80059bc:	20000148 	.word	0x20000148
 80059c0:	20000158 	.word	0x20000158
 80059c4:	20000192 	.word	0x20000192
 80059c8:	20000138 	.word	0x20000138
			case STOPMODE:
				if(arrowStopMode == RESUME)
 80059cc:	4baf      	ldr	r3, [pc, #700]	; (8005c8c <beginStartGame+0x568>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d122      	bne.n	8005a1a <beginStartGame+0x2f6>
				{
					statusGame = oldStatusGame;
 80059d4:	4bae      	ldr	r3, [pc, #696]	; (8005c90 <beginStartGame+0x56c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4aae      	ldr	r2, [pc, #696]	; (8005c94 <beginStartGame+0x570>)
 80059da:	6013      	str	r3, [r2, #0]
					setTimerUart(1000);
 80059dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059e0:	f7ff f9d0 	bl	8004d84 <setTimerUart>
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80059e4:	4bab      	ldr	r3, [pc, #684]	; (8005c94 <beginStartGame+0x570>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d003      	beq.n	80059f4 <beginStartGame+0x2d0>
 80059ec:	4ba9      	ldr	r3, [pc, #676]	; (8005c94 <beginStartGame+0x570>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d10f      	bne.n	8005a14 <beginStartGame+0x2f0>
					{
						setTimerTiming(TIMING);
 80059f4:	4ba8      	ldr	r3, [pc, #672]	; (8005c98 <beginStartGame+0x574>)
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff f96b 	bl	8004cd4 <setTimerTiming>
						setTimerDeTime(1000);
 80059fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a02:	f7ff f987 	bl	8004d14 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005a06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a0a:	f7ff f99f 	bl	8004d4c <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005a0e:	4ba3      	ldr	r3, [pc, #652]	; (8005c9c <beginStartGame+0x578>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 8005a14:	f7fe f902 	bl	8003c1c <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8005a18:	e04f      	b.n	8005aba <beginStartGame+0x396>
					statusGame = STARTMODE;
 8005a1a:	4b9e      	ldr	r3, [pc, #632]	; (8005c94 <beginStartGame+0x570>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005a20:	4b9f      	ldr	r3, [pc, #636]	; (8005ca0 <beginStartGame+0x57c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005a26:	4b9f      	ldr	r3, [pc, #636]	; (8005ca4 <beginStartGame+0x580>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005a2c:	4b9e      	ldr	r3, [pc, #632]	; (8005ca8 <beginStartGame+0x584>)
 8005a2e:	2203      	movs	r2, #3
 8005a30:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005a32:	4b99      	ldr	r3, [pc, #612]	; (8005c98 <beginStartGame+0x574>)
 8005a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a38:	801a      	strh	r2, [r3, #0]
					startUI();
 8005a3a:	f7ff fb35 	bl	80050a8 <startUI>
				break;
 8005a3e:	e03c      	b.n	8005aba <beginStartGame+0x396>
			case EXITMODE:
				if(arrowExitMode == YES)
 8005a40:	4b9a      	ldr	r3, [pc, #616]	; (8005cac <beginStartGame+0x588>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d112      	bne.n	8005a6e <beginStartGame+0x34a>
				{
					statusGame = STARTMODE;
 8005a48:	4b92      	ldr	r3, [pc, #584]	; (8005c94 <beginStartGame+0x570>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005a4e:	4b94      	ldr	r3, [pc, #592]	; (8005ca0 <beginStartGame+0x57c>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005a54:	4b93      	ldr	r3, [pc, #588]	; (8005ca4 <beginStartGame+0x580>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005a5a:	4b93      	ldr	r3, [pc, #588]	; (8005ca8 <beginStartGame+0x584>)
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005a60:	4b8d      	ldr	r3, [pc, #564]	; (8005c98 <beginStartGame+0x574>)
 8005a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a66:	801a      	strh	r2, [r3, #0]
					startUI();
 8005a68:	f7ff fb1e 	bl	80050a8 <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 8005a6c:	e020      	b.n	8005ab0 <beginStartGame+0x38c>
					statusGame = oldStatusGame;
 8005a6e:	4b88      	ldr	r3, [pc, #544]	; (8005c90 <beginStartGame+0x56c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a88      	ldr	r2, [pc, #544]	; (8005c94 <beginStartGame+0x570>)
 8005a74:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005a76:	4b87      	ldr	r3, [pc, #540]	; (8005c94 <beginStartGame+0x570>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d003      	beq.n	8005a86 <beginStartGame+0x362>
 8005a7e:	4b85      	ldr	r3, [pc, #532]	; (8005c94 <beginStartGame+0x570>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d10f      	bne.n	8005aa6 <beginStartGame+0x382>
						setTimerTiming(TIMING);
 8005a86:	4b84      	ldr	r3, [pc, #528]	; (8005c98 <beginStartGame+0x574>)
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff f922 	bl	8004cd4 <setTimerTiming>
						setTimerDeTime(1000);
 8005a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a94:	f7ff f93e 	bl	8004d14 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005a98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a9c:	f7ff f956 	bl	8004d4c <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005aa0:	4b7e      	ldr	r3, [pc, #504]	; (8005c9c <beginStartGame+0x578>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	801a      	strh	r2, [r3, #0]
					resumeGame();
 8005aa6:	f7fe f8b9 	bl	8003c1c <resumeGame>
				break;
 8005aaa:	e001      	b.n	8005ab0 <beginStartGame+0x38c>
		}
	}
 8005aac:	bf00      	nop
 8005aae:	e004      	b.n	8005aba <beginStartGame+0x396>
				break;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <beginStartGame+0x396>
				break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <beginStartGame+0x396>
				break;
 8005ab8:	bf00      	nop
	if(statusGame == STARTMODE){
 8005aba:	4b76      	ldr	r3, [pc, #472]	; (8005c94 <beginStartGame+0x570>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	f040 815f 	bne.w	8005d82 <beginStartGame+0x65e>
		char str1[50] = "";
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	222e      	movs	r2, #46	; 0x2e
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f005 fcf9 	bl	800b4c8 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 8005ad6:	4b72      	ldr	r3, [pc, #456]	; (8005ca0 <beginStartGame+0x57c>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ae0:	e14b      	b.n	8005d7a <beginStartGame+0x656>
		{
			if(button_count[i] == 1)
 8005ae2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ae4:	4a72      	ldr	r2, [pc, #456]	; (8005cb0 <beginStartGame+0x58c>)
 8005ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f040 8142 	bne.w	8005d74 <beginStartGame+0x650>
			{
//				button_count[i] = 0;
				switch (i)
 8005af0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005af2:	2b0d      	cmp	r3, #13
 8005af4:	f200 811a 	bhi.w	8005d2c <beginStartGame+0x608>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <beginStartGame+0x3dc>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b39 	.word	0x08005b39
 8005b04:	08005b65 	.word	0x08005b65
 8005b08:	08005b91 	.word	0x08005b91
 8005b0c:	08005d73 	.word	0x08005d73
 8005b10:	08005bbd 	.word	0x08005bbd
 8005b14:	08005be5 	.word	0x08005be5
 8005b18:	08005c0d 	.word	0x08005c0d
 8005b1c:	08005d73 	.word	0x08005d73
 8005b20:	08005c35 	.word	0x08005c35
 8005b24:	08005c61 	.word	0x08005c61
 8005b28:	08005cb5 	.word	0x08005cb5
 8005b2c:	08005d73 	.word	0x08005d73
 8005b30:	08005ce1 	.word	0x08005ce1
 8005b34:	08005d0b 	.word	0x08005d0b
				{
					case 0:
						val = val*10 + i+1;
 8005b38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	0092      	lsls	r2, r2, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b46:	4413      	add	r3, r2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005b4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fd f991 	bl	8002e78 <convert2str>
 8005b56:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f005 fd5d 	bl	800b61c <strcat>
						break;
 8005b62:	e0e3      	b.n	8005d2c <beginStartGame+0x608>
					case 1:
						val = val*10 + i+1;
 8005b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b66:	461a      	mov	r2, r3
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b72:	4413      	add	r3, r2
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3301      	adds	r3, #1
 8005b78:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005b7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd f97b 	bl	8002e78 <convert2str>
 8005b82:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f005 fd47 	bl	800b61c <strcat>
						break;
 8005b8e:	e0cd      	b.n	8005d2c <beginStartGame+0x608>
					case 2:
						val = val*10 + i+1;
 8005b90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b92:	461a      	mov	r2, r3
 8005b94:	0092      	lsls	r2, r2, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b9e:	4413      	add	r3, r2
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005ba6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fd f965 	bl	8002e78 <convert2str>
 8005bae:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 fd31 	bl	800b61c <strcat>
						break;
 8005bba:	e0b7      	b.n	8005d2c <beginStartGame+0x608>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 8005bbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	0092      	lsls	r2, r2, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005bca:	4413      	add	r3, r2
 8005bcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005bce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fd f951 	bl	8002e78 <convert2str>
 8005bd6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f005 fd1d 	bl	800b61c <strcat>
						break;
 8005be2:	e0a3      	b.n	8005d2c <beginStartGame+0x608>
					case 5:
						val = val*10 + i;
 8005be4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005be6:	461a      	mov	r2, r3
 8005be8:	0092      	lsls	r2, r2, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005bf2:	4413      	add	r3, r2
 8005bf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005bf6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fd f93d 	bl	8002e78 <convert2str>
 8005bfe:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c04:	4618      	mov	r0, r3
 8005c06:	f005 fd09 	bl	800b61c <strcat>
						break;
 8005c0a:	e08f      	b.n	8005d2c <beginStartGame+0x608>
					case 6:
						val = val*10 + i;
 8005c0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c0e:	461a      	mov	r2, r3
 8005c10:	0092      	lsls	r2, r2, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c1a:	4413      	add	r3, r2
 8005c1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005c1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fd f929 	bl	8002e78 <convert2str>
 8005c26:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f005 fcf5 	bl	800b61c <strcat>
						break;
 8005c32:	e07b      	b.n	8005d2c <beginStartGame+0x608>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 8005c34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c36:	461a      	mov	r2, r3
 8005c38:	0092      	lsls	r2, r2, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c42:	4413      	add	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005c4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fd f913 	bl	8002e78 <convert2str>
 8005c52:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f005 fcdf 	bl	800b61c <strcat>
						break;
 8005c5e:	e065      	b.n	8005d2c <beginStartGame+0x608>
					case 9:
						val = val*10 + i-1;
 8005c60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c62:	461a      	mov	r2, r3
 8005c64:	0092      	lsls	r2, r2, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005c76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fd f8fd 	bl	8002e78 <convert2str>
 8005c7e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c84:	4618      	mov	r0, r3
 8005c86:	f005 fcc9 	bl	800b61c <strcat>
						break;
 8005c8a:	e04f      	b.n	8005d2c <beginStartGame+0x608>
 8005c8c:	2000005c 	.word	0x2000005c
 8005c90:	20000148 	.word	0x20000148
 8005c94:	20000144 	.word	0x20000144
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	20000192 	.word	0x20000192
 8005ca0:	20000130 	.word	0x20000130
 8005ca4:	20000132 	.word	0x20000132
 8005ca8:	20000014 	.word	0x20000014
 8005cac:	20000060 	.word	0x20000060
 8005cb0:	20000268 	.word	0x20000268
					case 10:
						val = val*10 + i-1;
 8005cb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	0092      	lsls	r2, r2, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cc2:	4413      	add	r3, r2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005cca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fd f8d3 	bl	8002e78 <convert2str>
 8005cd2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f005 fc9f 	bl	800b61c <strcat>
						break;
 8005cde:	e025      	b.n	8005d2c <beginStartGame+0x608>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8005ce0:	4b40      	ldr	r3, [pc, #256]	; (8005de4 <beginStartGame+0x6c0>)
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 8005ce8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cea:	4a3f      	ldr	r2, [pc, #252]	; (8005de8 <beginStartGame+0x6c4>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	08db      	lsrs	r3, r3, #3
 8005cf2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005cf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fd f8be 	bl	8002e78 <convert2str>
 8005cfc:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d02:	4618      	mov	r0, r3
 8005d04:	f005 fc8a 	bl	800b61c <strcat>
						break;
 8005d08:	e010      	b.n	8005d2c <beginStartGame+0x608>
					case 13:
						val = val*10;
 8005d0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005d16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fd f8ad 	bl	8002e78 <convert2str>
 8005d1e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005d20:	1d3b      	adds	r3, r7, #4
 8005d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d24:	4618      	mov	r0, r3
 8005d26:	f005 fc79 	bl	800b61c <strcat>
						break;
 8005d2a:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	23b4      	movs	r3, #180	; 0xb4
 8005d32:	22b4      	movs	r2, #180	; 0xb4
 8005d34:	2196      	movs	r1, #150	; 0x96
 8005d36:	203c      	movs	r0, #60	; 0x3c
 8005d38:	f7fc f9ae 	bl	8002098 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8005d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	23b4      	movs	r3, #180	; 0xb4
 8005d44:	22b4      	movs	r2, #180	; 0xb4
 8005d46:	2196      	movs	r1, #150	; 0x96
 8005d48:	203c      	movs	r0, #60	; 0x3c
 8005d4a:	f7fc fa76 	bl	800223a <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8005d4e:	1d3a      	adds	r2, r7, #4
 8005d50:	2301      	movs	r3, #1
 8005d52:	9302      	str	r3, [sp, #8]
 8005d54:	2318      	movs	r3, #24
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d62:	2198      	movs	r1, #152	; 0x98
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7fc fdad 	bl	80028c4 <lcd_StrCenter>

				ID = val;
 8005d6a:	4a20      	ldr	r2, [pc, #128]	; (8005dec <beginStartGame+0x6c8>)
 8005d6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d6e:	8013      	strh	r3, [r2, #0]
 8005d70:	e000      	b.n	8005d74 <beginStartGame+0x650>
						continue;
 8005d72:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 8005d74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d76:	3301      	adds	r3, #1
 8005d78:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d7c:	2b0d      	cmp	r3, #13
 8005d7e:	f67f aeb0 	bls.w	8005ae2 <beginStartGame+0x3be>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8005d82:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <beginStartGame+0x6cc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d101      	bne.n	8005d8e <beginStartGame+0x66a>
	{
		initTimingMode();
 8005d8a:	f000 fe0b 	bl	80069a4 <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 8005d8e:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <beginStartGame+0x6cc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b09      	cmp	r3, #9
 8005d94:	d101      	bne.n	8005d9a <beginStartGame+0x676>
	{
		initAdvanceMode();
 8005d96:	f7fa fe8f 	bl	8000ab8 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 8005d9a:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <beginStartGame+0x6cc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d00e      	beq.n	8005dc0 <beginStartGame+0x69c>
	{
		if(statusGame == PICKMODE)
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <beginStartGame+0x6cc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d101      	bne.n	8005dae <beginStartGame+0x68a>
		{
			arrowInPickMode();
 8005daa:	f7ff fa67 	bl	800527c <arrowInPickMode>
		}
		if(button_count[12] == 1)
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <beginStartGame+0x6d0>)
 8005db0:	8b1b      	ldrh	r3, [r3, #24]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d104      	bne.n	8005dc0 <beginStartGame+0x69c>
		{
			statusGame = EXITMODE;
 8005db6:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <beginStartGame+0x6cc>)
 8005db8:	220a      	movs	r2, #10
 8005dba:	601a      	str	r2, [r3, #0]
			initExit();
 8005dbc:	f7fb faee 	bl	800139c <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <beginStartGame+0x6cc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d009      	beq.n	8005ddc <beginStartGame+0x6b8>
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <beginStartGame+0x6cc>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d005      	beq.n	8005ddc <beginStartGame+0x6b8>
	{
		setTimerDeTime(0);
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f7fe ff9f 	bl	8004d14 <setTimerDeTime>
		setTimerGenerateWall(0);
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f7fe ffb8 	bl	8004d4c <setTimerGenerateWall>
	}
}
 8005ddc:	bf00      	nop
 8005dde:	3740      	adds	r7, #64	; 0x40
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	0800cc04 	.word	0x0800cc04
 8005de8:	cccccccd 	.word	0xcccccccd
 8005dec:	20000130 	.word	0x20000130
 8005df0:	20000144 	.word	0x20000144
 8005df4:	20000268 	.word	0x20000268

08005df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <HAL_MspInit+0x4c>)
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	4a0f      	ldr	r2, [pc, #60]	; (8005e44 <HAL_MspInit+0x4c>)
 8005e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <HAL_MspInit+0x4c>)
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_MspInit+0x4c>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <HAL_MspInit+0x4c>)
 8005e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e28:	6413      	str	r3, [r2, #64]	; 0x40
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_MspInit+0x4c>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40023800 	.word	0x40023800

08005e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e4c:	e7fe      	b.n	8005e4c <NMI_Handler+0x4>

08005e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e52:	e7fe      	b.n	8005e52 <HardFault_Handler+0x4>

08005e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e58:	e7fe      	b.n	8005e58 <MemManage_Handler+0x4>

08005e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e5e:	e7fe      	b.n	8005e5e <BusFault_Handler+0x4>

08005e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e64:	e7fe      	b.n	8005e64 <UsageFault_Handler+0x4>

08005e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e6a:	bf00      	nop
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e82:	b480      	push	{r7}
 8005e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e86:	bf00      	nop
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e94:	f001 f878 	bl	8006f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ea0:	4802      	ldr	r0, [pc, #8]	; (8005eac <TIM2_IRQHandler+0x10>)
 8005ea2:	f003 fc0e 	bl	80096c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20002b08 	.word	0x20002b08

08005eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005eb4:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <USART2_IRQHandler+0x10>)
 8005eb6:	f004 fb49 	bl	800a54c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20002b50 	.word	0x20002b50

08005ec4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ec8:	4802      	ldr	r0, [pc, #8]	; (8005ed4 <DMA2_Stream0_IRQHandler+0x10>)
 8005eca:	f001 ff5d 	bl	8007d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200001fc 	.word	0x200001fc

08005ed8 <showNotifyStop>:
#include "software_timer.h"
#include "uart.h"
#include "game_over.h"

void showNotifyStop()
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <showNotifyStop+0x9c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	330a      	adds	r3, #10
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9302      	str	r3, [sp, #8]
 8005eec:	2310      	movs	r3, #16
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <showNotifyStop+0xa0>)
 8005efa:	2000      	movs	r0, #0
 8005efc:	f7fc fce2 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8005f00:	4b1e      	ldr	r3, [pc, #120]	; (8005f7c <showNotifyStop+0xa4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3308      	adds	r3, #8
 8005f08:	b298      	uxth	r0, r3
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <showNotifyStop+0x9c>)
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <showNotifyStop+0x9c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4413      	add	r3, r2
 8005f14:	0fda      	lsrs	r2, r3, #31
 8005f16:	4413      	add	r3, r2
 8005f18:	105b      	asrs	r3, r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b14      	subs	r3, #20
 8005f1e:	b299      	uxth	r1, r3
 8005f20:	2301      	movs	r3, #1
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	2310      	movs	r3, #16
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	f248 4330 	movw	r3, #33840	; 0x8430
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <showNotifyStop+0xa8>)
 8005f32:	f7fc fc63 	bl	80027fc <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <showNotifyStop+0xa4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <showNotifyStop+0x9c>)
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <showNotifyStop+0x9c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4413      	add	r3, r2
 8005f4a:	0fda      	lsrs	r2, r3, #31
 8005f4c:	4413      	add	r3, r2
 8005f4e:	105b      	asrs	r3, r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	330f      	adds	r3, #15
 8005f54:	b299      	uxth	r1, r3
 8005f56:	2301      	movs	r3, #1
 8005f58:	9302      	str	r3, [sp, #8]
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	f248 4330 	movw	r3, #33840	; 0x8430
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	2300      	movs	r3, #0
 8005f66:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <showNotifyStop+0xac>)
 8005f68:	f7fc fc48 	bl	80027fc <lcd_ShowStr>
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	2000004c 	.word	0x2000004c
 8005f78:	0800cc08 	.word	0x0800cc08
 8005f7c:	2000003c 	.word	0x2000003c
 8005f80:	0800cc18 	.word	0x0800cc18
 8005f84:	0800cc20 	.word	0x0800cc20

08005f88 <drawArrowStop>:


void drawArrowStop()
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8005f8e:	4b87      	ldr	r3, [pc, #540]	; (80061ac <drawArrowStop+0x224>)
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	4b86      	ldr	r3, [pc, #536]	; (80061ac <drawArrowStop+0x224>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4413      	add	r3, r2
 8005f98:	0fda      	lsrs	r2, r3, #31
 8005f9a:	4413      	add	r3, r2
 8005f9c:	105b      	asrs	r3, r3, #1
 8005f9e:	3b08      	subs	r3, #8
 8005fa0:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8005fa2:	4b82      	ldr	r3, [pc, #520]	; (80061ac <drawArrowStop+0x224>)
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	4b81      	ldr	r3, [pc, #516]	; (80061ac <drawArrowStop+0x224>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4413      	add	r3, r2
 8005fac:	0fda      	lsrs	r2, r3, #31
 8005fae:	4413      	add	r3, r2
 8005fb0:	105b      	asrs	r3, r3, #1
 8005fb2:	331c      	adds	r3, #28
 8005fb4:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 8005fb6:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <drawArrowStop+0x228>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d07a      	beq.n	80060b4 <drawArrowStop+0x12c>
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	f040 80f0 	bne.w	80061a4 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8005fc4:	f7fb fbc4 	bl	8001750 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 8005fc8:	4b7a      	ldr	r3, [pc, #488]	; (80061b4 <drawArrowStop+0x22c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3308      	adds	r3, #8
 8005fd0:	b298      	uxth	r0, r3
 8005fd2:	4b76      	ldr	r3, [pc, #472]	; (80061ac <drawArrowStop+0x224>)
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	4b75      	ldr	r3, [pc, #468]	; (80061ac <drawArrowStop+0x224>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	0fda      	lsrs	r2, r3, #31
 8005fde:	4413      	add	r3, r2
 8005fe0:	105b      	asrs	r3, r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b14      	subs	r3, #20
 8005fe6:	b299      	uxth	r1, r3
 8005fe8:	2301      	movs	r3, #1
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	2310      	movs	r3, #16
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	f248 4330 	movw	r3, #33840	; 0x8430
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ffa:	4a6f      	ldr	r2, [pc, #444]	; (80061b8 <drawArrowStop+0x230>)
 8005ffc:	f7fc fbfe 	bl	80027fc <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 8006000:	4b6c      	ldr	r3, [pc, #432]	; (80061b4 <drawArrowStop+0x22c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	3308      	adds	r3, #8
 8006008:	b298      	uxth	r0, r3
 800600a:	4b68      	ldr	r3, [pc, #416]	; (80061ac <drawArrowStop+0x224>)
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	4b67      	ldr	r3, [pc, #412]	; (80061ac <drawArrowStop+0x224>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4413      	add	r3, r2
 8006014:	0fda      	lsrs	r2, r3, #31
 8006016:	4413      	add	r3, r2
 8006018:	105b      	asrs	r3, r3, #1
 800601a:	b29b      	uxth	r3, r3
 800601c:	330f      	adds	r3, #15
 800601e:	b299      	uxth	r1, r3
 8006020:	2301      	movs	r3, #1
 8006022:	9302      	str	r3, [sp, #8]
 8006024:	2310      	movs	r3, #16
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	f248 4330 	movw	r3, #33840	; 0x8430
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	2300      	movs	r3, #0
 8006030:	4a62      	ldr	r2, [pc, #392]	; (80061bc <drawArrowStop+0x234>)
 8006032:	f7fc fbe3 	bl	80027fc <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8006036:	4b5f      	ldr	r3, [pc, #380]	; (80061b4 <drawArrowStop+0x22c>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b0f      	subs	r3, #15
 800603e:	b298      	uxth	r0, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	b299      	uxth	r1, r3
 8006044:	4b5b      	ldr	r3, [pc, #364]	; (80061b4 <drawArrowStop+0x22c>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b0a      	subs	r3, #10
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b05      	subs	r3, #5
 8006054:	b29b      	uxth	r3, r3
 8006056:	2400      	movs	r4, #0
 8006058:	9400      	str	r4, [sp, #0]
 800605a:	f7fc f86a 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800605e:	4b55      	ldr	r3, [pc, #340]	; (80061b4 <drawArrowStop+0x22c>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b0f      	subs	r3, #15
 8006066:	b298      	uxth	r0, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	b299      	uxth	r1, r3
 800606c:	4b51      	ldr	r3, [pc, #324]	; (80061b4 <drawArrowStop+0x22c>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b0a      	subs	r3, #10
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	b29b      	uxth	r3, r3
 800607a:	3305      	adds	r3, #5
 800607c:	b29b      	uxth	r3, r3
 800607e:	2400      	movs	r4, #0
 8006080:	9400      	str	r4, [sp, #0]
 8006082:	f7fc f856 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <drawArrowStop+0x22c>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b0a      	subs	r3, #10
 800608e:	b298      	uxth	r0, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b05      	subs	r3, #5
 8006096:	b299      	uxth	r1, r3
 8006098:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <drawArrowStop+0x22c>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b0a      	subs	r3, #10
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3305      	adds	r3, #5
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2400      	movs	r4, #0
 80060ac:	9400      	str	r4, [sp, #0]
 80060ae:	f7fc f840 	bl	8002132 <lcd_DrawLine>
		break;
 80060b2:	e077      	b.n	80061a4 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 80060b4:	f7fb fb4c 	bl	8001750 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 80060b8:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <drawArrowStop+0x22c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3308      	adds	r3, #8
 80060c0:	b298      	uxth	r0, r3
 80060c2:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <drawArrowStop+0x224>)
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <drawArrowStop+0x224>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4413      	add	r3, r2
 80060cc:	0fda      	lsrs	r2, r3, #31
 80060ce:	4413      	add	r3, r2
 80060d0:	105b      	asrs	r3, r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b14      	subs	r3, #20
 80060d6:	b299      	uxth	r1, r3
 80060d8:	2301      	movs	r3, #1
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	2310      	movs	r3, #16
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	2300      	movs	r3, #0
 80060e8:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <drawArrowStop+0x230>)
 80060ea:	f7fc fb87 	bl	80027fc <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <drawArrowStop+0x22c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3308      	adds	r3, #8
 80060f6:	b298      	uxth	r0, r3
 80060f8:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <drawArrowStop+0x224>)
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <drawArrowStop+0x224>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4413      	add	r3, r2
 8006102:	0fda      	lsrs	r2, r3, #31
 8006104:	4413      	add	r3, r2
 8006106:	105b      	asrs	r3, r3, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	330f      	adds	r3, #15
 800610c:	b299      	uxth	r1, r3
 800610e:	2301      	movs	r3, #1
 8006110:	9302      	str	r3, [sp, #8]
 8006112:	2310      	movs	r3, #16
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	f248 4330 	movw	r3, #33840	; 0x8430
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006120:	4a26      	ldr	r2, [pc, #152]	; (80061bc <drawArrowStop+0x234>)
 8006122:	f7fc fb6b 	bl	80027fc <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <drawArrowStop+0x22c>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b0f      	subs	r3, #15
 800612e:	b298      	uxth	r0, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	b299      	uxth	r1, r3
 8006134:	4b1f      	ldr	r3, [pc, #124]	; (80061b4 <drawArrowStop+0x22c>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b0a      	subs	r3, #10
 800613c:	b29a      	uxth	r2, r3
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b05      	subs	r3, #5
 8006144:	b29b      	uxth	r3, r3
 8006146:	2400      	movs	r4, #0
 8006148:	9400      	str	r4, [sp, #0]
 800614a:	f7fb fff2 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800614e:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <drawArrowStop+0x22c>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b0f      	subs	r3, #15
 8006156:	b298      	uxth	r0, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	b299      	uxth	r1, r3
 800615c:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <drawArrowStop+0x22c>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b0a      	subs	r3, #10
 8006164:	b29a      	uxth	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	3305      	adds	r3, #5
 800616c:	b29b      	uxth	r3, r3
 800616e:	2400      	movs	r4, #0
 8006170:	9400      	str	r4, [sp, #0]
 8006172:	f7fb ffde 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8006176:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <drawArrowStop+0x22c>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b0a      	subs	r3, #10
 800617e:	b298      	uxth	r0, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b05      	subs	r3, #5
 8006186:	b299      	uxth	r1, r3
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <drawArrowStop+0x22c>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b0a      	subs	r3, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	3305      	adds	r3, #5
 8006198:	b29b      	uxth	r3, r3
 800619a:	2400      	movs	r4, #0
 800619c:	9400      	str	r4, [sp, #0]
 800619e:	f7fb ffc8 	bl	8002132 <lcd_DrawLine>
		break;
 80061a2:	bf00      	nop
	}
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd90      	pop	{r4, r7, pc}
 80061ac:	2000004c 	.word	0x2000004c
 80061b0:	2000005c 	.word	0x2000005c
 80061b4:	2000003c 	.word	0x2000003c
 80061b8:	0800cc18 	.word	0x0800cc18
 80061bc:	0800cc20 	.word	0x0800cc20

080061c0 <gameStopUI>:

void gameStopUI()
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
	showWallnotify();
 80061c4:	f7fb f9c0 	bl	8001548 <showWallnotify>
	showNotifyStop();
 80061c8:	f7ff fe86 	bl	8005ed8 <showNotifyStop>
	drawArrowStop();
 80061cc:	f7ff fedc 	bl	8005f88 <drawArrowStop>
}
 80061d0:	bf00      	nop
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <pickStop>:

void pickStop()
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 80061d8:	4b1c      	ldr	r3, [pc, #112]	; (800624c <pickStop+0x78>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d133      	bne.n	8006248 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <pickStop+0x7c>)
 80061e2:	88db      	ldrh	r3, [r3, #6]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10f      	bne.n	8006208 <pickStop+0x34>
		{
			flagStop = 1;
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <pickStop+0x80>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <pickStop+0x84>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d002      	beq.n	80061fc <pickStop+0x28>
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d107      	bne.n	800620a <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 80061fa:	e025      	b.n	8006248 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <pickStop+0x84>)
 80061fe:	2202      	movs	r2, #2
 8006200:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8006202:	f7ff ffdd 	bl	80061c0 <gameStopUI>
				break;
 8006206:	e000      	b.n	800620a <pickStop+0x36>
			}
		}
 8006208:	bf00      	nop
		if(button_count[7] == 1)
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <pickStop+0x7c>)
 800620c:	89db      	ldrh	r3, [r3, #14]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10e      	bne.n	8006230 <pickStop+0x5c>
		{
			flagStop = 1;
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <pickStop+0x80>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <pickStop+0x84>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d012      	beq.n	8006246 <pickStop+0x72>
 8006220:	2b02      	cmp	r3, #2
 8006222:	d106      	bne.n	8006232 <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <pickStop+0x84>)
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
				gameStopUI();
 800622a:	f7ff ffc9 	bl	80061c0 <gameStopUI>
				break;
 800622e:	e000      	b.n	8006232 <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 8006230:	bf00      	nop
		if(flagStop == 1)
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <pickStop+0x80>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d106      	bne.n	8006248 <pickStop+0x74>
		{
			gameStopUI();
 800623a:	f7ff ffc1 	bl	80061c0 <gameStopUI>
			flagStop = 0;
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <pickStop+0x80>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e000      	b.n	8006248 <pickStop+0x74>
				return;
 8006246:	bf00      	nop
		}
	}
}
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000144 	.word	0x20000144
 8006250:	20000268 	.word	0x20000268
 8006254:	20000150 	.word	0x20000150
 8006258:	2000005c 	.word	0x2000005c

0800625c <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b097      	sub	sp, #92	; 0x5c
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d14d      	bne.n	8006308 <initStopGame+0xac>
	{
		char str1[60] = "GAME_PLAY#";
 800626c:	4a29      	ldr	r2, [pc, #164]	; (8006314 <initStopGame+0xb8>)
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	ca07      	ldmia	r2, {r0, r1, r2}
 8006274:	c303      	stmia	r3!, {r0, r1}
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	3302      	adds	r3, #2
 800627a:	0c12      	lsrs	r2, r2, #16
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	f107 0313 	add.w	r3, r7, #19
 8006282:	2231      	movs	r2, #49	; 0x31
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f005 f91e 	bl	800b4c8 <memset>
		char *str2 = convert2str(ID);
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <initStopGame+0xbc>)
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f7fc fdf1 	bl	8002e78 <convert2str>
 8006296:	6578      	str	r0, [r7, #84]	; 0x54
		strcat(str1, str2);
 8006298:	f107 0308 	add.w	r3, r7, #8
 800629c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800629e:	4618      	mov	r0, r3
 80062a0:	f005 f9bc 	bl	800b61c <strcat>
		char str3[15] = "has stop game#";
 80062a4:	4b1d      	ldr	r3, [pc, #116]	; (800631c <initStopGame+0xc0>)
 80062a6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80062aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062ac:	c407      	stmia	r4!, {r0, r1, r2}
 80062ae:	8023      	strh	r3, [r4, #0]
 80062b0:	3402      	adds	r4, #2
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	7023      	strb	r3, [r4, #0]
		strcat(str1, str3);
 80062b6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	4611      	mov	r1, r2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f005 f9ab 	bl	800b61c <strcat>
		uart_EspSendBytes(str1, strlen(str1));
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7f9 ff80 	bl	80001d0 <strlen>
 80062d0:	4603      	mov	r3, r0
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f107 0308 	add.w	r3, r7, #8
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fba6 	bl	8006a2c <uart_EspSendBytes>

		statusGame = STOPMODE;
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <initStopGame+0xc4>)
 80062e2:	2206      	movs	r2, #6
 80062e4:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <initStopGame+0xc8>)
 80062e8:	2202      	movs	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7fe fcf1 	bl	8004cd4 <setTimerTiming>
		setTimerUart(0);
 80062f2:	2000      	movs	r0, #0
 80062f4:	f7fe fd46 	bl	8004d84 <setTimerUart>
		setTimerGenerateWall(0);
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7fe fd27 	bl	8004d4c <setTimerGenerateWall>
		flagStop = 1;
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <initStopGame+0xcc>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
		pickStop();
 8006304:	f7ff ff66 	bl	80061d4 <pickStop>
	}
	return 0;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	375c      	adds	r7, #92	; 0x5c
 800630e:	46bd      	mov	sp, r7
 8006310:	bd90      	pop	{r4, r7, pc}
 8006312:	bf00      	nop
 8006314:	0800cc28 	.word	0x0800cc28
 8006318:	20000130 	.word	0x20000130
 800631c:	0800cc64 	.word	0x0800cc64
 8006320:	20000144 	.word	0x20000144
 8006324:	2000005c 	.word	0x2000005c
 8006328:	20000150 	.word	0x20000150

0800632c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
	return 1;
 8006330:	2301      	movs	r3, #1
}
 8006332:	4618      	mov	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <_kill>:

int _kill(int pid, int sig)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006346:	f005 f895 	bl	800b474 <__errno>
 800634a:	4603      	mov	r3, r0
 800634c:	2216      	movs	r2, #22
 800634e:	601a      	str	r2, [r3, #0]
	return -1;
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_exit>:

void _exit (int status)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006364:	f04f 31ff 	mov.w	r1, #4294967295
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff ffe7 	bl	800633c <_kill>
	while (1) {}		/* Make sure we hang here */
 800636e:	e7fe      	b.n	800636e <_exit+0x12>

08006370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e00a      	b.n	8006398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006382:	f3af 8000 	nop.w
 8006386:	4601      	mov	r1, r0
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	60ba      	str	r2, [r7, #8]
 800638e:	b2ca      	uxtb	r2, r1
 8006390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	3301      	adds	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	dbf0      	blt.n	8006382 <_read+0x12>
	}

return len;
 80063a0:	687b      	ldr	r3, [r7, #4]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e009      	b.n	80063d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	60ba      	str	r2, [r7, #8]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	3301      	adds	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	dbf1      	blt.n	80063bc <_write+0x12>
	}
	return len;
 80063d8:	687b      	ldr	r3, [r7, #4]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_close>:

int _close(int file)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
	return -1;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800640a:	605a      	str	r2, [r3, #4]
	return 0;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <_isatty>:

int _isatty(int file)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
	return 1;
 8006422:	2301      	movs	r3, #1
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
	return 0;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006454:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <_sbrk+0x5c>)
 8006456:	4b15      	ldr	r3, [pc, #84]	; (80064ac <_sbrk+0x60>)
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <_sbrk+0x64>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <_sbrk+0x64>)
 800646a:	4a12      	ldr	r2, [pc, #72]	; (80064b4 <_sbrk+0x68>)
 800646c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <_sbrk+0x64>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4413      	add	r3, r2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	429a      	cmp	r2, r3
 800647a:	d207      	bcs.n	800648c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800647c:	f004 fffa 	bl	800b474 <__errno>
 8006480:	4603      	mov	r3, r0
 8006482:	220c      	movs	r2, #12
 8006484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295
 800648a:	e009      	b.n	80064a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <_sbrk+0x64>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <_sbrk+0x64>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <_sbrk+0x64>)
 800649c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20020000 	.word	0x20020000
 80064ac:	00000400 	.word	0x00000400
 80064b0:	200001a4 	.word	0x200001a4
 80064b4:	20002ba8 	.word	0x20002ba8

080064b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <SystemInit+0x20>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c2:	4a05      	ldr	r2, [pc, #20]	; (80064d8 <SystemInit+0x20>)
 80064c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	e000ed00 	.word	0xe000ed00

080064dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	609a      	str	r2, [r3, #8]
 80064ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064f0:	463b      	mov	r3, r7
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <MX_TIM2_Init+0x94>)
 80064fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80064fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <MX_TIM2_Init+0x94>)
 8006502:	f240 3247 	movw	r2, #839	; 0x347
 8006506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <MX_TIM2_Init+0x94>)
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800650e:	4b18      	ldr	r3, [pc, #96]	; (8006570 <MX_TIM2_Init+0x94>)
 8006510:	2263      	movs	r2, #99	; 0x63
 8006512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006514:	4b16      	ldr	r3, [pc, #88]	; (8006570 <MX_TIM2_Init+0x94>)
 8006516:	2200      	movs	r2, #0
 8006518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800651a:	4b15      	ldr	r3, [pc, #84]	; (8006570 <MX_TIM2_Init+0x94>)
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006520:	4813      	ldr	r0, [pc, #76]	; (8006570 <MX_TIM2_Init+0x94>)
 8006522:	f002 ffb5 	bl	8009490 <HAL_TIM_Base_Init>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800652c:	f7fc fc4c 	bl	8002dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	4619      	mov	r1, r3
 800653c:	480c      	ldr	r0, [pc, #48]	; (8006570 <MX_TIM2_Init+0x94>)
 800653e:	f003 fa8b 	bl	8009a58 <HAL_TIM_ConfigClockSource>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006548:	f7fc fc3e 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800654c:	2300      	movs	r3, #0
 800654e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006550:	2300      	movs	r3, #0
 8006552:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006554:	463b      	mov	r3, r7
 8006556:	4619      	mov	r1, r3
 8006558:	4805      	ldr	r0, [pc, #20]	; (8006570 <MX_TIM2_Init+0x94>)
 800655a:	f003 fe57 	bl	800a20c <HAL_TIMEx_MasterConfigSynchronization>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006564:	f7fc fc30 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006568:	bf00      	nop
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20002b08 	.word	0x20002b08

08006574 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800657a:	1d3b      	adds	r3, r7, #4
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	605a      	str	r2, [r3, #4]
 8006582:	609a      	str	r2, [r3, #8]
 8006584:	60da      	str	r2, [r3, #12]
 8006586:	611a      	str	r2, [r3, #16]
 8006588:	615a      	str	r2, [r3, #20]
 800658a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800658c:	4b1e      	ldr	r3, [pc, #120]	; (8006608 <MX_TIM13_Init+0x94>)
 800658e:	4a1f      	ldr	r2, [pc, #124]	; (800660c <MX_TIM13_Init+0x98>)
 8006590:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8006592:	4b1d      	ldr	r3, [pc, #116]	; (8006608 <MX_TIM13_Init+0x94>)
 8006594:	f240 3247 	movw	r2, #839	; 0x347
 8006598:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <MX_TIM13_Init+0x94>)
 800659c:	2200      	movs	r2, #0
 800659e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80065a0:	4b19      	ldr	r3, [pc, #100]	; (8006608 <MX_TIM13_Init+0x94>)
 80065a2:	2263      	movs	r2, #99	; 0x63
 80065a4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065a6:	4b18      	ldr	r3, [pc, #96]	; (8006608 <MX_TIM13_Init+0x94>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <MX_TIM13_Init+0x94>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80065b2:	4815      	ldr	r0, [pc, #84]	; (8006608 <MX_TIM13_Init+0x94>)
 80065b4:	f002 ff6c 	bl	8009490 <HAL_TIM_Base_Init>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80065be:	f7fc fc03 	bl	8002dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80065c2:	4811      	ldr	r0, [pc, #68]	; (8006608 <MX_TIM13_Init+0x94>)
 80065c4:	f003 f824 	bl	8009610 <HAL_TIM_PWM_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80065ce:	f7fc fbfb 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065d2:	2360      	movs	r3, #96	; 0x60
 80065d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	2200      	movs	r2, #0
 80065e6:	4619      	mov	r1, r3
 80065e8:	4807      	ldr	r0, [pc, #28]	; (8006608 <MX_TIM13_Init+0x94>)
 80065ea:	f003 f973 	bl	80098d4 <HAL_TIM_PWM_ConfigChannel>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80065f4:	f7fc fbe8 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80065f8:	4803      	ldr	r0, [pc, #12]	; (8006608 <MX_TIM13_Init+0x94>)
 80065fa:	f000 f845 	bl	8006688 <HAL_TIM_MspPostInit>

}
 80065fe:	bf00      	nop
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20002ac0 	.word	0x20002ac0
 800660c:	40001c00 	.word	0x40001c00

08006610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006620:	d116      	bne.n	8006650 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4b16      	ldr	r3, [pc, #88]	; (8006680 <HAL_TIM_Base_MspInit+0x70>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	4a15      	ldr	r2, [pc, #84]	; (8006680 <HAL_TIM_Base_MspInit+0x70>)
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	6413      	str	r3, [r2, #64]	; 0x40
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_TIM_Base_MspInit+0x70>)
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	2100      	movs	r1, #0
 8006642:	201c      	movs	r0, #28
 8006644:	f001 f9d1 	bl	80079ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006648:	201c      	movs	r0, #28
 800664a:	f001 f9ea 	bl	8007a22 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800664e:	e012      	b.n	8006676 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <HAL_TIM_Base_MspInit+0x74>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <HAL_TIM_Base_MspInit+0x70>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	4a07      	ldr	r2, [pc, #28]	; (8006680 <HAL_TIM_Base_MspInit+0x70>)
 8006664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006668:	6413      	str	r3, [r2, #64]	; 0x40
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_TIM_Base_MspInit+0x70>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40023800 	.word	0x40023800
 8006684:	40001c00 	.word	0x40001c00

08006688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	f107 030c 	add.w	r3, r7, #12
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <HAL_TIM_MspPostInit+0x68>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d11e      	bne.n	80066e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <HAL_TIM_MspPostInit+0x6c>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	4a10      	ldr	r2, [pc, #64]	; (80066f4 <HAL_TIM_MspPostInit+0x6c>)
 80066b4:	f043 0320 	orr.w	r3, r3, #32
 80066b8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <HAL_TIM_MspPostInit+0x6c>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066cc:	2302      	movs	r3, #2
 80066ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80066d8:	2309      	movs	r3, #9
 80066da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80066dc:	f107 030c 	add.w	r3, r7, #12
 80066e0:	4619      	mov	r1, r3
 80066e2:	4805      	ldr	r0, [pc, #20]	; (80066f8 <HAL_TIM_MspPostInit+0x70>)
 80066e4:	f001 fdba 	bl	800825c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80066e8:	bf00      	nop
 80066ea:	3720      	adds	r7, #32
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40001c00 	.word	0x40001c00
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40021400 	.word	0x40021400

080066fc <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b095      	sub	sp, #84	; 0x54
 8006700:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8006702:	2000      	movs	r0, #0
 8006704:	f7fb fc96 	bl	8002034 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8006708:	4b6b      	ldr	r3, [pc, #428]	; (80068b8 <setupTiming+0x1bc>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	b298      	uxth	r0, r3
 800670e:	4b6b      	ldr	r3, [pc, #428]	; (80068bc <setupTiming+0x1c0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	b299      	uxth	r1, r3
 8006714:	4b6a      	ldr	r3, [pc, #424]	; (80068c0 <setupTiming+0x1c4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	b29a      	uxth	r2, r3
 800671a:	4b6a      	ldr	r3, [pc, #424]	; (80068c4 <setupTiming+0x1c8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	4c69      	ldr	r4, [pc, #420]	; (80068c8 <setupTiming+0x1cc>)
 8006722:	9400      	str	r4, [sp, #0]
 8006724:	f7fb fe90 	bl	8002448 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8006728:	2300      	movs	r3, #0
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	2318      	movs	r3, #24
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	f248 4330 	movw	r3, #33840	; 0x8430
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800673a:	4a64      	ldr	r2, [pc, #400]	; (80068cc <setupTiming+0x1d0>)
 800673c:	2137      	movs	r1, #55	; 0x37
 800673e:	203c      	movs	r0, #60	; 0x3c
 8006740:	f7fc f85c 	bl	80027fc <lcd_ShowStr>

	char str1[50] = " ID: ";
 8006744:	4a62      	ldr	r2, [pc, #392]	; (80068d0 <setupTiming+0x1d4>)
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800674c:	6018      	str	r0, [r3, #0]
 800674e:	3304      	adds	r3, #4
 8006750:	8019      	strh	r1, [r3, #0]
 8006752:	f107 030a 	add.w	r3, r7, #10
 8006756:	222c      	movs	r2, #44	; 0x2c
 8006758:	2100      	movs	r1, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f004 feb4 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 8006760:	4b5c      	ldr	r3, [pc, #368]	; (80068d4 <setupTiming+0x1d8>)
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fc fb87 	bl	8002e78 <convert2str>
 800676a:	4603      	mov	r3, r0
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006772:	4618      	mov	r0, r3
 8006774:	f004 ff52 	bl	800b61c <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8006778:	1d3a      	adds	r2, r7, #4
 800677a:	2300      	movs	r3, #0
 800677c:	9302      	str	r3, [sp, #8]
 800677e:	2318      	movs	r3, #24
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	f248 4330 	movw	r3, #33840	; 0x8430
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800678c:	2164      	movs	r1, #100	; 0x64
 800678e:	2000      	movs	r0, #0
 8006790:	f7fc f898 	bl	80028c4 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8006794:	2300      	movs	r3, #0
 8006796:	9302      	str	r3, [sp, #8]
 8006798:	2318      	movs	r3, #24
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	f248 4330 	movw	r3, #33840	; 0x8430
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a6:	4a4c      	ldr	r2, [pc, #304]	; (80068d8 <setupTiming+0x1dc>)
 80067a8:	2196      	movs	r1, #150	; 0x96
 80067aa:	2000      	movs	r0, #0
 80067ac:	f7fc f88a 	bl	80028c4 <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 80067b0:	2300      	movs	r3, #0
 80067b2:	9302      	str	r3, [sp, #8]
 80067b4:	2318      	movs	r3, #24
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	f248 4330 	movw	r3, #33840	; 0x8430
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067c2:	4a46      	ldr	r2, [pc, #280]	; (80068dc <setupTiming+0x1e0>)
 80067c4:	21d2      	movs	r1, #210	; 0xd2
 80067c6:	2014      	movs	r0, #20
 80067c8:	f7fc f818 	bl	80027fc <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 80067cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	23f0      	movs	r3, #240	; 0xf0
 80067d4:	22c8      	movs	r2, #200	; 0xc8
 80067d6:	21d2      	movs	r1, #210	; 0xd2
 80067d8:	2096      	movs	r0, #150	; 0x96
 80067da:	f7fb fd2e 	bl	800223a <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 80067de:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <setupTiming+0x1e4>)
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fc fb48 	bl	8002e78 <convert2str>
 80067e8:	4603      	mov	r3, r0
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 80067ec:	4b3c      	ldr	r3, [pc, #240]	; (80068e0 <setupTiming+0x1e4>)
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	2b77      	cmp	r3, #119	; 0x77
 80067f2:	d80e      	bhi.n	8006812 <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 80067f4:	2301      	movs	r3, #1
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	2318      	movs	r3, #24
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	f248 4330 	movw	r3, #33840	; 0x8430
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006808:	21d4      	movs	r1, #212	; 0xd4
 800680a:	20a5      	movs	r0, #165	; 0xa5
 800680c:	f7fb fff6 	bl	80027fc <lcd_ShowStr>
 8006810:	e00d      	b.n	800682e <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8006812:	2301      	movs	r3, #1
 8006814:	9302      	str	r3, [sp, #8]
 8006816:	2318      	movs	r3, #24
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	f248 4330 	movw	r3, #33840	; 0x8430
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006826:	21d4      	movs	r1, #212	; 0xd4
 8006828:	209d      	movs	r0, #157	; 0x9d
 800682a:	f7fb ffe7 	bl	80027fc <lcd_ShowStr>
	}

	if(TIMING < 120)
 800682e:	4b2c      	ldr	r3, [pc, #176]	; (80068e0 <setupTiming+0x1e4>)
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	2b77      	cmp	r3, #119	; 0x77
 8006834:	d81a      	bhi.n	800686c <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 8006836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	23c8      	movs	r3, #200	; 0xc8
 800683e:	22b9      	movs	r2, #185	; 0xb9
 8006840:	21c8      	movs	r1, #200	; 0xc8
 8006842:	20a5      	movs	r0, #165	; 0xa5
 8006844:	f7fb fc75 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 8006848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	23c8      	movs	r3, #200	; 0xc8
 8006850:	22a5      	movs	r2, #165	; 0xa5
 8006852:	21b4      	movs	r1, #180	; 0xb4
 8006854:	20af      	movs	r0, #175	; 0xaf
 8006856:	f7fb fc6c 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 800685a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	23b4      	movs	r3, #180	; 0xb4
 8006862:	22af      	movs	r2, #175	; 0xaf
 8006864:	21c8      	movs	r1, #200	; 0xc8
 8006866:	20b9      	movs	r0, #185	; 0xb9
 8006868:	f7fb fc63 	bl	8002132 <lcd_DrawLine>
	}
	if(TIMING > 30)
 800686c:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <setupTiming+0x1e4>)
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	2b1e      	cmp	r3, #30
 8006872:	d91c      	bls.n	80068ae <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 8006874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	23fa      	movs	r3, #250	; 0xfa
 800687c:	22b9      	movs	r2, #185	; 0xb9
 800687e:	21fa      	movs	r1, #250	; 0xfa
 8006880:	20a5      	movs	r0, #165	; 0xa5
 8006882:	f7fb fc56 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 8006886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006890:	22af      	movs	r2, #175	; 0xaf
 8006892:	21fa      	movs	r1, #250	; 0xfa
 8006894:	20a5      	movs	r0, #165	; 0xa5
 8006896:	f7fb fc4c 	bl	8002132 <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 800689a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80068a4:	22af      	movs	r2, #175	; 0xaf
 80068a6:	21fa      	movs	r1, #250	; 0xfa
 80068a8:	20b9      	movs	r0, #185	; 0xb9
 80068aa:	f7fb fc42 	bl	8002132 <lcd_DrawLine>
	}
}
 80068ae:	bf00      	nop
 80068b0:	3744      	adds	r7, #68	; 0x44
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000074 	.word	0x20000074
 80068bc:	20000078 	.word	0x20000078
 80068c0:	2000007c 	.word	0x2000007c
 80068c4:	20000080 	.word	0x20000080
 80068c8:	0800fe74 	.word	0x0800fe74
 80068cc:	0800cc74 	.word	0x0800cc74
 80068d0:	0800cc9c 	.word	0x0800cc9c
 80068d4:	20000130 	.word	0x20000130
 80068d8:	0800cc84 	.word	0x0800cc84
 80068dc:	0800cc94 	.word	0x0800cc94
 80068e0:	20000000 	.word	0x20000000

080068e4 <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7fc f8ae 	bl	8002a58 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 80068fc:	2200      	movs	r2, #0
 80068fe:	2101      	movs	r1, #1
 8006900:	68b8      	ldr	r0, [r7, #8]
 8006902:	f7fc f8a9 	bl	8002a58 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 8006906:	2200      	movs	r2, #0
 8006908:	2102      	movs	r1, #2
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fc f8a4 	bl	8002a58 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 8006910:	2200      	movs	r2, #0
 8006912:	2103      	movs	r1, #3
 8006914:	6838      	ldr	r0, [r7, #0]
 8006916:	f7fc f89f 	bl	8002a58 <led7_SetDigit>
	led7_SetColon(1);
 800691a:	2001      	movs	r0, #1
 800691c:	f7fc f8c0 	bl	8002aa0 <led7_SetColon>
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <showTiming>:

void showTiming()
{
 8006928:	b5b0      	push	{r4, r5, r7, lr}
 800692a:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 800692c:	4b19      	ldr	r3, [pc, #100]	; (8006994 <showTiming+0x6c>)
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	4a19      	ldr	r2, [pc, #100]	; (8006998 <showTiming+0x70>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	b29b      	uxth	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <showTiming+0x6c>)
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	4a16      	ldr	r2, [pc, #88]	; (800699c <showTiming+0x74>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	b29b      	uxth	r3, r3
 800694a:	461c      	mov	r4, r3
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <showTiming+0x6c>)
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	4b12      	ldr	r3, [pc, #72]	; (800699c <showTiming+0x74>)
 8006952:	fba3 1302 	umull	r1, r3, r3, r2
 8006956:	0959      	lsrs	r1, r3, #5
 8006958:	460b      	mov	r3, r1
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	1a5b      	subs	r3, r3, r1
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	4a0e      	ldr	r2, [pc, #56]	; (80069a0 <showTiming+0x78>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	b29b      	uxth	r3, r3
 800696e:	461d      	mov	r5, r3
 8006970:	4b08      	ldr	r3, [pc, #32]	; (8006994 <showTiming+0x6c>)
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <showTiming+0x78>)
 8006976:	fba3 1302 	umull	r1, r3, r3, r2
 800697a:	08d9      	lsrs	r1, r3, #3
 800697c:	460b      	mov	r3, r1
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	b29b      	uxth	r3, r3
 8006988:	462a      	mov	r2, r5
 800698a:	4621      	mov	r1, r4
 800698c:	f7ff ffaa 	bl	80068e4 <show7seg>
}
 8006990:	bf00      	nop
 8006992:	bdb0      	pop	{r4, r5, r7, pc}
 8006994:	20000000 	.word	0x20000000
 8006998:	1b4e81b5 	.word	0x1b4e81b5
 800699c:	88888889 	.word	0x88888889
 80069a0:	cccccccd 	.word	0xcccccccd

080069a4 <initTimingMode>:

void initTimingMode()
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 80069a8:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <initTimingMode+0x54>)
 80069aa:	88db      	ldrh	r3, [r3, #6]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10e      	bne.n	80069ce <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <initTimingMode+0x58>)
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	331e      	adds	r3, #30
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	4b10      	ldr	r3, [pc, #64]	; (80069fc <initTimingMode+0x58>)
 80069ba:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <initTimingMode+0x58>)
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	2b78      	cmp	r3, #120	; 0x78
 80069c2:	d902      	bls.n	80069ca <initTimingMode+0x26>
		{
			TIMING = 120;
 80069c4:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <initTimingMode+0x58>)
 80069c6:	2278      	movs	r2, #120	; 0x78
 80069c8:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 80069ca:	f7ff fe97 	bl	80066fc <setupTiming>
	}
	if(button_count[7] == 1)
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <initTimingMode+0x54>)
 80069d0:	89db      	ldrh	r3, [r3, #14]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10e      	bne.n	80069f4 <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <initTimingMode+0x58>)
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	3b1e      	subs	r3, #30
 80069dc:	b29a      	uxth	r2, r3
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <initTimingMode+0x58>)
 80069e0:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <initTimingMode+0x58>)
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	2b1d      	cmp	r3, #29
 80069e8:	d802      	bhi.n	80069f0 <initTimingMode+0x4c>
		{
			TIMING = 30;
 80069ea:	4b04      	ldr	r3, [pc, #16]	; (80069fc <initTimingMode+0x58>)
 80069ec:	221e      	movs	r2, #30
 80069ee:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 80069f0:	f7ff fe84 	bl	80066fc <setupTiming>
	}
}
 80069f4:	bf00      	nop
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000268 	.word	0x20000268
 80069fc:	20000000 	.word	0x20000000

08006a00 <uart_init_esp>:
//    uart_Rs232SendString(".");
//    sprintf((void*)msg,"%ld",num%100);
//    uart_Rs232SendString(msg);
//}

void uart_init_esp(){
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006a04:	2201      	movs	r2, #1
 8006a06:	4906      	ldr	r1, [pc, #24]	; (8006a20 <uart_init_esp+0x20>)
 8006a08:	4806      	ldr	r0, [pc, #24]	; (8006a24 <uart_init_esp+0x24>)
 8006a0a:	f003 fd6e 	bl	800a4ea <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a14:	4804      	ldr	r0, [pc, #16]	; (8006a28 <uart_init_esp+0x28>)
 8006a16:	f001 fdd5 	bl	80085c4 <HAL_GPIO_WritePin>
}
 8006a1a:	bf00      	nop
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200001a8 	.word	0x200001a8
 8006a24:	20002b50 	.word	0x20002b50
 8006a28:	40021400 	.word	0x40021400

08006a2c <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8006a38:	887a      	ldrh	r2, [r7, #2]
 8006a3a:	230a      	movs	r3, #10
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4803      	ldr	r0, [pc, #12]	; (8006a4c <uart_EspSendBytes+0x20>)
 8006a40:	f003 fcc1 	bl	800a3c6 <HAL_UART_Transmit>
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20002b50 	.word	0x20002b50

08006a50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a11      	ldr	r2, [pc, #68]	; (8006aa4 <HAL_UART_RxCpltCallback+0x54>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d11b      	bne.n	8006a9a <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8006a62:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <HAL_UART_RxCpltCallback+0x58>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b4f      	cmp	r3, #79	; 0x4f
 8006a68:	d103      	bne.n	8006a72 <HAL_UART_RxCpltCallback+0x22>
 8006a6a:	4b10      	ldr	r3, [pc, #64]	; (8006aac <HAL_UART_RxCpltCallback+0x5c>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e00e      	b.n	8006a90 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'a') light_status = 0;
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <HAL_UART_RxCpltCallback+0x58>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b61      	cmp	r3, #97	; 0x61
 8006a78:	d103      	bne.n	8006a82 <HAL_UART_RxCpltCallback+0x32>
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <HAL_UART_RxCpltCallback+0x60>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e006      	b.n	8006a90 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'A') light_status = 1;
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_UART_RxCpltCallback+0x58>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b41      	cmp	r3, #65	; 0x41
 8006a88:	d102      	bne.n	8006a90 <HAL_UART_RxCpltCallback+0x40>
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <HAL_UART_RxCpltCallback+0x60>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006a90:	2201      	movs	r2, #1
 8006a92:	4905      	ldr	r1, [pc, #20]	; (8006aa8 <HAL_UART_RxCpltCallback+0x58>)
 8006a94:	4807      	ldr	r0, [pc, #28]	; (8006ab4 <HAL_UART_RxCpltCallback+0x64>)
 8006a96:	f003 fd28 	bl	800a4ea <HAL_UART_Receive_IT>
	}
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40004400 	.word	0x40004400
 8006aa8:	200001a8 	.word	0x200001a8
 8006aac:	200001a9 	.word	0x200001a9
 8006ab0:	2000016e 	.word	0x2000016e
 8006ab4:	20002b50 	.word	0x20002b50

08006ab8 <uartSendContinuePlay>:
	strcat(str1, "#");
	uart_EspSendBytes(str1, strlen(str1));
}

void uartSendContinuePlay()
{
 8006ab8:	b5b0      	push	{r4, r5, r7, lr}
 8006aba:	b0c0      	sub	sp, #256	; 0x100
 8006abc:	af00      	add	r7, sp, #0
	char str1[70] = "GAME_PLAY#";
 8006abe:	4a59      	ldr	r2, [pc, #356]	; (8006c24 <uartSendContinuePlay+0x16c>)
 8006ac0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ac6:	c303      	stmia	r3!, {r0, r1}
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	3302      	adds	r3, #2
 8006acc:	0c12      	lsrs	r2, r2, #16
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	f107 03b3 	add.w	r3, r7, #179	; 0xb3
 8006ad4:	223b      	movs	r2, #59	; 0x3b
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f004 fcf5 	bl	800b4c8 <memset>
	char *str2 = convert2str(ID);
 8006ade:	4b52      	ldr	r3, [pc, #328]	; (8006c28 <uartSendContinuePlay+0x170>)
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fc f9c8 	bl	8002e78 <convert2str>
 8006ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	strcat(str1, str2);
 8006aec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006af0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006af4:	4618      	mov	r0, r3
 8006af6:	f004 fd91 	bl	800b61c <strcat>

	char str3[60] = "is continue playing game, time: ";
 8006afa:	4b4c      	ldr	r3, [pc, #304]	; (8006c2c <uartSendContinuePlay+0x174>)
 8006afc:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8006b00:	461d      	mov	r5, r3
 8006b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0a:	682b      	ldr	r3, [r5, #0]
 8006b0c:	7023      	strb	r3, [r4, #0]
 8006b0e:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	605a      	str	r2, [r3, #4]
 8006b18:	609a      	str	r2, [r3, #8]
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	611a      	str	r2, [r3, #16]
 8006b1e:	615a      	str	r2, [r3, #20]
 8006b20:	f8c3 2017 	str.w	r2, [r3, #23]
	char *str4 = convert2str(TOTALTIME);
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <uartSendContinuePlay+0x178>)
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fc f9a5 	bl	8002e78 <convert2str>
 8006b2e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	strcat(str3, str4);
 8006b32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b36:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f004 fd6e 	bl	800b61c <strcat>

	char str5[50] = ", score: ";
 8006b40:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <uartSendContinuePlay+0x17c>)
 8006b42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b48:	c303      	stmia	r3!, {r0, r1}
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8006b50:	2228      	movs	r2, #40	; 0x28
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f004 fcb7 	bl	800b4c8 <memset>
	char *str6 = convert2str(SCORE);
 8006b5a:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <uartSendContinuePlay+0x180>)
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fc f98a 	bl	8002e78 <convert2str>
 8006b64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	strcat(str5, str6);
 8006b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b6c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8006b70:	4618      	mov	r0, r3
 8006b72:	f004 fd53 	bl	800b61c <strcat>

	char str7[50] = ", performance: ";
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <uartSendContinuePlay+0x184>)
 8006b78:	1d3c      	adds	r4, r7, #4
 8006b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	2222      	movs	r2, #34	; 0x22
 8006b86:	2100      	movs	r1, #0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f004 fc9d 	bl	800b4c8 <memset>
	char *str8 = convert2str(SCORE/TOTALTIME);
 8006b8e:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <uartSendContinuePlay+0x180>)
 8006b90:	881a      	ldrh	r2, [r3, #0]
 8006b92:	4b27      	ldr	r3, [pc, #156]	; (8006c30 <uartSendContinuePlay+0x178>)
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fc f96b 	bl	8002e78 <convert2str>
 8006ba2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	strcat(str7, str8);
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f004 fd35 	bl	800b61c <strcat>

	strcat(str1, str3);
 8006bb2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006bb6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f004 fd2d 	bl	800b61c <strcat>
	strcat(str1, str5);
 8006bc2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006bc6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f004 fd25 	bl	800b61c <strcat>
	strcat(str1, str7);
 8006bd2:	1d3a      	adds	r2, r7, #4
 8006bd4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f004 fd1e 	bl	800b61c <strcat>
	strcat(str1, "#");
 8006be0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7f9 faf3 	bl	80001d0 <strlen>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006bf2:	4413      	add	r3, r2
 8006bf4:	4912      	ldr	r1, [pc, #72]	; (8006c40 <uartSendContinuePlay+0x188>)
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8006bfe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fae4 	bl	80001d0 <strlen>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff ff0a 	bl	8006a2c <uart_EspSendBytes>
}
 8006c18:	bf00      	nop
 8006c1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bdb0      	pop	{r4, r5, r7, pc}
 8006c22:	bf00      	nop
 8006c24:	0800ccd4 	.word	0x0800ccd4
 8006c28:	20000130 	.word	0x20000130
 8006c2c:	0800cd78 	.word	0x0800cd78
 8006c30:	2000015c 	.word	0x2000015c
 8006c34:	0800cdb4 	.word	0x0800cdb4
 8006c38:	20000132 	.word	0x20000132
 8006c3c:	0800cde8 	.word	0x0800cde8
 8006c40:	0800ccd0 	.word	0x0800ccd0

08006c44 <uartSendSensor>:

void uartSendSensor()
{
 8006c44:	b5b0      	push	{r4, r5, r7, lr}
 8006c46:	b0ba      	sub	sp, #232	; 0xe8
 8006c48:	af00      	add	r7, sp, #0
	char str1[50] = "SENSOR_INFO#";
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <uartSendSensor+0x144>)
 8006c4c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8006c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c52:	c407      	stmia	r4!, {r0, r1, r2}
 8006c54:	7023      	strb	r3, [r4, #0]
 8006c56:	f107 03b5 	add.w	r3, r7, #181	; 0xb5
 8006c5a:	2225      	movs	r2, #37	; 0x25
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f004 fc32 	bl	800b4c8 <memset>
	char str3[60] = "Temperature: ";
 8006c64:	4b49      	ldr	r3, [pc, #292]	; (8006d8c <uartSendSensor+0x148>)
 8006c66:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8006c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c6c:	c407      	stmia	r4!, {r0, r1, r2}
 8006c6e:	8023      	strh	r3, [r4, #0]
 8006c70:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8006c74:	222e      	movs	r2, #46	; 0x2e
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f004 fc25 	bl	800b4c8 <memset>
	char *str4 = convert2str((uint16_t)sensor_GetTemperature());
 8006c7e:	f7fc f8dd 	bl	8002e3c <sensor_GetTemperature>
 8006c82:	eef0 7a40 	vmov.f32	s15, s0
 8006c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c8a:	ee17 3a90 	vmov	r3, s15
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fc f8f1 	bl	8002e78 <convert2str>
 8006c96:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	strcat(str3, str4);
 8006c9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006c9e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f004 fcba 	bl	800b61c <strcat>

	char str5[50] = ", light: ";
 8006ca8:	4a39      	ldr	r2, [pc, #228]	; (8006d90 <uartSendSensor+0x14c>)
 8006caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cae:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cb0:	c303      	stmia	r3!, {r0, r1}
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8006cb8:	2228      	movs	r2, #40	; 0x28
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f004 fc03 	bl	800b4c8 <memset>
	char *str6 = convert2str(sensor_GetLight());
 8006cc2:	f7fc f8a3 	bl	8002e0c <sensor_GetLight>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fc f8d5 	bl	8002e78 <convert2str>
 8006cce:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	strcat(str5, str6);
 8006cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cd6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f004 fc9e 	bl	800b61c <strcat>

	char str7[50] = ", potentiometer: ";
 8006ce0:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <uartSendSensor+0x150>)
 8006ce2:	1d3c      	adds	r4, r7, #4
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	8023      	strh	r3, [r4, #0]
 8006cee:	f107 0316 	add.w	r3, r7, #22
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f004 fbe6 	bl	800b4c8 <memset>
	char *str8 = convert2str(sensor_GetPotentiometer());
 8006cfc:	f7fc f892 	bl	8002e24 <sensor_GetPotentiometer>
 8006d00:	4603      	mov	r3, r0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fc f8b8 	bl	8002e78 <convert2str>
 8006d08:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	strcat(str7, str8);
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006d12:	4618      	mov	r0, r3
 8006d14:	f004 fc82 	bl	800b61c <strcat>

	strcat(str1, str3);
 8006d18:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006d1c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f004 fc7a 	bl	800b61c <strcat>
	strcat(str1, str5);
 8006d28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f004 fc72 	bl	800b61c <strcat>
	strcat(str1, str7);
 8006d38:	1d3a      	adds	r2, r7, #4
 8006d3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f004 fc6b 	bl	800b61c <strcat>
	strcat(str1, "#");
 8006d46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7f9 fa40 	bl	80001d0 <strlen>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d58:	4413      	add	r3, r2
 8006d5a:	490f      	ldr	r1, [pc, #60]	; (8006d98 <uartSendSensor+0x154>)
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	460b      	mov	r3, r1
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8006d64:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7f9 fa31 	bl	80001d0 <strlen>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fe57 	bl	8006a2c <uart_EspSendBytes>
}
 8006d7e:	bf00      	nop
 8006d80:	37e8      	adds	r7, #232	; 0xe8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bdb0      	pop	{r4, r5, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	0800ce1c 	.word	0x0800ce1c
 8006d8c:	0800ce50 	.word	0x0800ce50
 8006d90:	0800ce8c 	.word	0x0800ce8c
 8006d94:	0800cec0 	.word	0x0800cec0
 8006d98:	0800ccd0 	.word	0x0800ccd0

08006d9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006da2:	4a12      	ldr	r2, [pc, #72]	; (8006dec <MX_USART2_UART_Init+0x50>)
 8006da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006dae:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006dba:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006dc0:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006dc2:	220c      	movs	r2, #12
 8006dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dc6:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006dd2:	4805      	ldr	r0, [pc, #20]	; (8006de8 <MX_USART2_UART_Init+0x4c>)
 8006dd4:	f003 faaa 	bl	800a32c <HAL_UART_Init>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006dde:	f7fb fff3 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20002b50 	.word	0x20002b50
 8006dec:	40004400 	.word	0x40004400

08006df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df8:	f107 0314 	add.w	r3, r7, #20
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <HAL_UART_MspInit+0x94>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d133      	bne.n	8006e7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <HAL_UART_MspInit+0x98>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <HAL_UART_MspInit+0x98>)
 8006e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e20:	6413      	str	r3, [r2, #64]	; 0x40
 8006e22:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <HAL_UART_MspInit+0x98>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <HAL_UART_MspInit+0x98>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	4a14      	ldr	r2, [pc, #80]	; (8006e88 <HAL_UART_MspInit+0x98>)
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <HAL_UART_MspInit+0x98>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e56:	2303      	movs	r3, #3
 8006e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e5a:	2307      	movs	r3, #7
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e5e:	f107 0314 	add.w	r3, r7, #20
 8006e62:	4619      	mov	r1, r3
 8006e64:	4809      	ldr	r0, [pc, #36]	; (8006e8c <HAL_UART_MspInit+0x9c>)
 8006e66:	f001 f9f9 	bl	800825c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	2026      	movs	r0, #38	; 0x26
 8006e70:	f000 fdbb 	bl	80079ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006e74:	2026      	movs	r0, #38	; 0x26
 8006e76:	f000 fdd4 	bl	8007a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	3728      	adds	r7, #40	; 0x28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40004400 	.word	0x40004400
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	40020000 	.word	0x40020000

08006e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e94:	480d      	ldr	r0, [pc, #52]	; (8006ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006e96:	490e      	ldr	r1, [pc, #56]	; (8006ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006e98:	4a0e      	ldr	r2, [pc, #56]	; (8006ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e9c:	e002      	b.n	8006ea4 <LoopCopyDataInit>

08006e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006ea2:	3304      	adds	r3, #4

08006ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ea8:	d3f9      	bcc.n	8006e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006eaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006eac:	4c0b      	ldr	r4, [pc, #44]	; (8006edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8006eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006eb0:	e001      	b.n	8006eb6 <LoopFillZerobss>

08006eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006eb4:	3204      	adds	r2, #4

08006eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006eb8:	d3fb      	bcc.n	8006eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006eba:	f7ff fafd 	bl	80064b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ebe:	f004 fadf 	bl	800b480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ec2:	f7fb fe0d 	bl	8002ae0 <main>
  bx  lr    
 8006ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ed0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8006ed4:	08010c20 	.word	0x08010c20
  ldr r2, =_sbss
 8006ed8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8006edc:	20002ba8 	.word	0x20002ba8

08006ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ee0:	e7fe      	b.n	8006ee0 <ADC_IRQHandler>
	...

08006ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <HAL_Init+0x40>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <HAL_Init+0x40>)
 8006eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <HAL_Init+0x40>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <HAL_Init+0x40>)
 8006efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_Init+0x40>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <HAL_Init+0x40>)
 8006f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f0c:	2003      	movs	r0, #3
 8006f0e:	f000 fd61 	bl	80079d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f12:	200f      	movs	r0, #15
 8006f14:	f000 f808 	bl	8006f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f18:	f7fe ff6e 	bl	8005df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	40023c00 	.word	0x40023c00

08006f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f30:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <HAL_InitTick+0x54>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <HAL_InitTick+0x58>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fd79 	bl	8007a3e <HAL_SYSTICK_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e00e      	b.n	8006f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b0f      	cmp	r3, #15
 8006f5a:	d80a      	bhi.n	8006f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	f000 fd41 	bl	80079ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f68:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <HAL_InitTick+0x5c>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e000      	b.n	8006f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200000a0 	.word	0x200000a0
 8006f80:	200000a8 	.word	0x200000a8
 8006f84:	200000a4 	.word	0x200000a4

08006f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_IncTick+0x20>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <HAL_IncTick+0x24>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4413      	add	r3, r2
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <HAL_IncTick+0x24>)
 8006f9a:	6013      	str	r3, [r2, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	200000a8 	.word	0x200000a8
 8006fac:	20002b94 	.word	0x20002b94

08006fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <HAL_GetTick+0x14>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20002b94 	.word	0x20002b94

08006fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fd0:	f7ff ffee 	bl	8006fb0 <HAL_GetTick>
 8006fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d005      	beq.n	8006fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <HAL_Delay+0x44>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006fee:	bf00      	nop
 8006ff0:	f7ff ffde 	bl	8006fb0 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d8f7      	bhi.n	8006ff0 <HAL_Delay+0x28>
  {
  }
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200000a8 	.word	0x200000a8

08007010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e033      	b.n	800708e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7f9 fb2c 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b00      	cmp	r3, #0
 800704c:	d118      	bne.n	8007080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007056:	f023 0302 	bic.w	r3, r3, #2
 800705a:	f043 0202 	orr.w	r2, r3, #2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa68 	bl	8007538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	f043 0201 	orr.w	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	641a      	str	r2, [r3, #64]	; 0x40
 800707e:	e001      	b.n	8007084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_ADC_Start_DMA+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0e9      	b.n	800728a <HAL_ADC_Start_DMA+0x1f2>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d018      	beq.n	80070fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80070dc:	4b6d      	ldr	r3, [pc, #436]	; (8007294 <HAL_ADC_Start_DMA+0x1fc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a6d      	ldr	r2, [pc, #436]	; (8007298 <HAL_ADC_Start_DMA+0x200>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	0c9a      	lsrs	r2, r3, #18
 80070e8:	4613      	mov	r3, r2
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	4413      	add	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80070f0:	e002      	b.n	80070f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f9      	bne.n	80070f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710c:	d107      	bne.n	800711e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800711c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b01      	cmp	r3, #1
 800712a:	f040 80a1 	bne.w	8007270 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007158:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716c:	d106      	bne.n	800717c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	f023 0206 	bic.w	r2, r3, #6
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
 800717a:	e002      	b.n	8007182 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800718a:	4b44      	ldr	r3, [pc, #272]	; (800729c <HAL_ADC_Start_DMA+0x204>)
 800718c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	4a43      	ldr	r2, [pc, #268]	; (80072a0 <HAL_ADC_Start_DMA+0x208>)
 8007194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	4a42      	ldr	r2, [pc, #264]	; (80072a4 <HAL_ADC_Start_DMA+0x20c>)
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	4a41      	ldr	r2, [pc, #260]	; (80072a8 <HAL_ADC_Start_DMA+0x210>)
 80071a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80071ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80071be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	334c      	adds	r3, #76	; 0x4c
 80071da:	4619      	mov	r1, r3
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f000 fce8 	bl	8007bb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d12a      	bne.n	8007246 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2d      	ldr	r2, [pc, #180]	; (80072ac <HAL_ADC_Start_DMA+0x214>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d015      	beq.n	8007226 <HAL_ADC_Start_DMA+0x18e>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <HAL_ADC_Start_DMA+0x218>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d105      	bne.n	8007210 <HAL_ADC_Start_DMA+0x178>
 8007204:	4b25      	ldr	r3, [pc, #148]	; (800729c <HAL_ADC_Start_DMA+0x204>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a27      	ldr	r2, [pc, #156]	; (80072b4 <HAL_ADC_Start_DMA+0x21c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d136      	bne.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
 800721a:	4b20      	ldr	r3, [pc, #128]	; (800729c <HAL_ADC_Start_DMA+0x204>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	d130      	bne.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d129      	bne.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	e020      	b.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a18      	ldr	r2, [pc, #96]	; (80072ac <HAL_ADC_Start_DMA+0x214>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d11b      	bne.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d114      	bne.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800726c:	609a      	str	r2, [r3, #8]
 800726e:	e00b      	b.n	8007288 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	f043 0210 	orr.w	r2, r3, #16
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	f043 0201 	orr.w	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200000a0 	.word	0x200000a0
 8007298:	431bde83 	.word	0x431bde83
 800729c:	40012300 	.word	0x40012300
 80072a0:	08007731 	.word	0x08007731
 80072a4:	080077eb 	.word	0x080077eb
 80072a8:	08007807 	.word	0x08007807
 80072ac:	40012000 	.word	0x40012000
 80072b0:	40012100 	.word	0x40012100
 80072b4:	40012200 	.word	0x40012200

080072b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_ADC_ConfigChannel+0x1c>
 800730c:	2302      	movs	r3, #2
 800730e:	e105      	b.n	800751c <HAL_ADC_ConfigChannel+0x228>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b09      	cmp	r3, #9
 800731e:	d925      	bls.n	800736c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68d9      	ldr	r1, [r3, #12]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	3b1e      	subs	r3, #30
 8007336:	2207      	movs	r2, #7
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43da      	mvns	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	400a      	ands	r2, r1
 8007344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68d9      	ldr	r1, [r3, #12]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	4618      	mov	r0, r3
 8007358:	4603      	mov	r3, r0
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4403      	add	r3, r0
 800735e:	3b1e      	subs	r3, #30
 8007360:	409a      	lsls	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	e022      	b.n	80073b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6919      	ldr	r1, [r3, #16]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	2207      	movs	r2, #7
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	43da      	mvns	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	400a      	ands	r2, r1
 800738e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6919      	ldr	r1, [r3, #16]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4618      	mov	r0, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4403      	add	r3, r0
 80073a8:	409a      	lsls	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d824      	bhi.n	8007404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	3b05      	subs	r3, #5
 80073cc:	221f      	movs	r2, #31
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43da      	mvns	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	400a      	ands	r2, r1
 80073da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4618      	mov	r0, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	3b05      	subs	r3, #5
 80073f6:	fa00 f203 	lsl.w	r2, r0, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	635a      	str	r2, [r3, #52]	; 0x34
 8007402:	e04c      	b.n	800749e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b0c      	cmp	r3, #12
 800740a:	d824      	bhi.n	8007456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	3b23      	subs	r3, #35	; 0x23
 800741e:	221f      	movs	r2, #31
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43da      	mvns	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	400a      	ands	r2, r1
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	4618      	mov	r0, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	3b23      	subs	r3, #35	; 0x23
 8007448:	fa00 f203 	lsl.w	r2, r0, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
 8007454:	e023      	b.n	800749e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	3b41      	subs	r3, #65	; 0x41
 8007468:	221f      	movs	r2, #31
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43da      	mvns	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	400a      	ands	r2, r1
 8007476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	4618      	mov	r0, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	3b41      	subs	r3, #65	; 0x41
 8007492:	fa00 f203 	lsl.w	r2, r0, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800749e:	4b22      	ldr	r3, [pc, #136]	; (8007528 <HAL_ADC_ConfigChannel+0x234>)
 80074a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a21      	ldr	r2, [pc, #132]	; (800752c <HAL_ADC_ConfigChannel+0x238>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d109      	bne.n	80074c0 <HAL_ADC_ConfigChannel+0x1cc>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b12      	cmp	r3, #18
 80074b2:	d105      	bne.n	80074c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <HAL_ADC_ConfigChannel+0x238>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d123      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x21e>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d003      	beq.n	80074da <HAL_ADC_ConfigChannel+0x1e6>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b11      	cmp	r3, #17
 80074d8:	d11b      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d111      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <HAL_ADC_ConfigChannel+0x23c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a10      	ldr	r2, [pc, #64]	; (8007534 <HAL_ADC_ConfigChannel+0x240>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	0c9a      	lsrs	r2, r3, #18
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007504:	e002      	b.n	800750c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f9      	bne.n	8007506 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40012300 	.word	0x40012300
 800752c:	40012000 	.word	0x40012000
 8007530:	200000a0 	.word	0x200000a0
 8007534:	431bde83 	.word	0x431bde83

08007538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007540:	4b79      	ldr	r3, [pc, #484]	; (8007728 <ADC_Init+0x1f0>)
 8007542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	431a      	orrs	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800756c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6859      	ldr	r1, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	021a      	lsls	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6899      	ldr	r1, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	4a58      	ldr	r2, [pc, #352]	; (800772c <ADC_Init+0x1f4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d022      	beq.n	8007616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6899      	ldr	r1, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6899      	ldr	r1, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	e00f      	b.n	8007636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0202 	bic.w	r2, r2, #2
 8007644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6899      	ldr	r1, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7e1b      	ldrb	r3, [r3, #24]
 8007650:	005a      	lsls	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	3b01      	subs	r3, #1
 8007690:	035a      	lsls	r2, r3, #13
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	e007      	b.n	80076ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	051a      	lsls	r2, r3, #20
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6899      	ldr	r1, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076ee:	025a      	lsls	r2, r3, #9
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6899      	ldr	r1, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	029a      	lsls	r2, r3, #10
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012300 	.word	0x40012300
 800772c:	0f000001 	.word	0x0f000001

08007730 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007746:	2b00      	cmp	r3, #0
 8007748:	d13c      	bne.n	80077c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d12b      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007768:	2b00      	cmp	r3, #0
 800776a:	d127      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007784:	2b00      	cmp	r3, #0
 8007786:	d119      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0220 	bic.w	r2, r2, #32
 8007796:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d105      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff fd7b 	bl	80072b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80077c2:	e00e      	b.n	80077e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff fd85 	bl	80072e0 <HAL_ADC_ErrorCallback>
}
 80077d6:	e004      	b.n	80077e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff fd67 	bl	80072cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077fe:	bf00      	nop
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2240      	movs	r2, #64	; 0x40
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff fd5a 	bl	80072e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007844:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <__NVIC_SetPriorityGrouping+0x44>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007850:	4013      	ands	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800785c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <__NVIC_SetPriorityGrouping+0x44>)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	60d3      	str	r3, [r2, #12]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	e000ed00 	.word	0xe000ed00

0800787c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <__NVIC_GetPriorityGrouping+0x18>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	0a1b      	lsrs	r3, r3, #8
 8007886:	f003 0307 	and.w	r3, r3, #7
}
 800788a:	4618      	mov	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	e000ed00 	.word	0xe000ed00

08007898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	db0b      	blt.n	80078c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	f003 021f 	and.w	r2, r3, #31
 80078b0:	4907      	ldr	r1, [pc, #28]	; (80078d0 <__NVIC_EnableIRQ+0x38>)
 80078b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	2001      	movs	r0, #1
 80078ba:	fa00 f202 	lsl.w	r2, r0, r2
 80078be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	e000e100 	.word	0xe000e100

080078d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	db0a      	blt.n	80078fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	490c      	ldr	r1, [pc, #48]	; (8007920 <__NVIC_SetPriority+0x4c>)
 80078ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f2:	0112      	lsls	r2, r2, #4
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	440b      	add	r3, r1
 80078f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078fc:	e00a      	b.n	8007914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	4908      	ldr	r1, [pc, #32]	; (8007924 <__NVIC_SetPriority+0x50>)
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	3b04      	subs	r3, #4
 800790c:	0112      	lsls	r2, r2, #4
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	440b      	add	r3, r1
 8007912:	761a      	strb	r2, [r3, #24]
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	e000e100 	.word	0xe000e100
 8007924:	e000ed00 	.word	0xe000ed00

08007928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007928:	b480      	push	{r7}
 800792a:	b089      	sub	sp, #36	; 0x24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f1c3 0307 	rsb	r3, r3, #7
 8007942:	2b04      	cmp	r3, #4
 8007944:	bf28      	it	cs
 8007946:	2304      	movcs	r3, #4
 8007948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3304      	adds	r3, #4
 800794e:	2b06      	cmp	r3, #6
 8007950:	d902      	bls.n	8007958 <NVIC_EncodePriority+0x30>
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	3b03      	subs	r3, #3
 8007956:	e000      	b.n	800795a <NVIC_EncodePriority+0x32>
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	43da      	mvns	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	401a      	ands	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007970:	f04f 31ff 	mov.w	r1, #4294967295
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	fa01 f303 	lsl.w	r3, r1, r3
 800797a:	43d9      	mvns	r1, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007980:	4313      	orrs	r3, r2
         );
}
 8007982:	4618      	mov	r0, r3
 8007984:	3724      	adds	r7, #36	; 0x24
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3b01      	subs	r3, #1
 800799c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079a0:	d301      	bcc.n	80079a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079a2:	2301      	movs	r3, #1
 80079a4:	e00f      	b.n	80079c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079a6:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <SysTick_Config+0x40>)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079ae:	210f      	movs	r1, #15
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	f7ff ff8e 	bl	80078d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <SysTick_Config+0x40>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <SysTick_Config+0x40>)
 80079c0:	2207      	movs	r2, #7
 80079c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	e000e010 	.word	0xe000e010

080079d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ff29 	bl	8007834 <__NVIC_SetPriorityGrouping>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b086      	sub	sp, #24
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	4603      	mov	r3, r0
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	607a      	str	r2, [r7, #4]
 80079f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079fc:	f7ff ff3e 	bl	800787c <__NVIC_GetPriorityGrouping>
 8007a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	6978      	ldr	r0, [r7, #20]
 8007a08:	f7ff ff8e 	bl	8007928 <NVIC_EncodePriority>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff ff5d 	bl	80078d4 <__NVIC_SetPriority>
}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	4603      	mov	r3, r0
 8007a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff ff31 	bl	8007898 <__NVIC_EnableIRQ>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ffa2 	bl	8007990 <SysTick_Config>
 8007a4c:	4603      	mov	r3, r0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a64:	f7ff faa4 	bl	8006fb0 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e099      	b.n	8007ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a94:	e00f      	b.n	8007ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a96:	f7ff fa8b 	bl	8006fb0 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b05      	cmp	r3, #5
 8007aa2:	d908      	bls.n	8007ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2203      	movs	r2, #3
 8007aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e078      	b.n	8007ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e8      	bne.n	8007a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4b38      	ldr	r3, [pc, #224]	; (8007bb0 <HAL_DMA_Init+0x158>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d107      	bne.n	8007b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0307 	bic.w	r3, r3, #7
 8007b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d117      	bne.n	8007b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00e      	beq.n	8007b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fb01 	bl	8008164 <DMA_CheckFifoParam>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2240      	movs	r2, #64	; 0x40
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b76:	2301      	movs	r3, #1
 8007b78:	e016      	b.n	8007ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fab8 	bl	80080f8 <DMA_CalcBaseAndBitshift>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	223f      	movs	r2, #63	; 0x3f
 8007b92:	409a      	lsls	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	f010803f 	.word	0xf010803f

08007bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_DMA_Start_IT+0x26>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e040      	b.n	8007c5c <HAL_DMA_Start_IT+0xa8>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d12f      	bne.n	8007c4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fa4a 	bl	800809c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	223f      	movs	r2, #63	; 0x3f
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0216 	orr.w	r2, r2, #22
 8007c22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e005      	b.n	8007c5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c56:	2302      	movs	r3, #2
 8007c58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007c72:	f7ff f99d 	bl	8006fb0 <HAL_GetTick>
 8007c76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d008      	beq.n	8007c96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2280      	movs	r2, #128	; 0x80
 8007c88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e052      	b.n	8007d3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0216 	bic.w	r2, r2, #22
 8007ca4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695a      	ldr	r2, [r3, #20]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <HAL_DMA_Abort+0x62>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0208 	bic.w	r2, r2, #8
 8007cd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ce6:	e013      	b.n	8007d10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ce8:	f7ff f962 	bl	8006fb0 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b05      	cmp	r3, #5
 8007cf4:	d90c      	bls.n	8007d10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2203      	movs	r2, #3
 8007d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e015      	b.n	8007d3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e4      	bne.n	8007ce8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d22:	223f      	movs	r2, #63	; 0x3f
 8007d24:	409a      	lsls	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d004      	beq.n	8007d62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2280      	movs	r2, #128	; 0x80
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e00c      	b.n	8007d7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2205      	movs	r2, #5
 8007d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0201 	bic.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d94:	4b92      	ldr	r3, [pc, #584]	; (8007fe0 <HAL_DMA_IRQHandler+0x258>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a92      	ldr	r2, [pc, #584]	; (8007fe4 <HAL_DMA_IRQHandler+0x25c>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	0a9b      	lsrs	r3, r3, #10
 8007da0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db2:	2208      	movs	r2, #8
 8007db4:	409a      	lsls	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01a      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d013      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0204 	bic.w	r2, r2, #4
 8007dda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de0:	2208      	movs	r2, #8
 8007de2:	409a      	lsls	r2, r3
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dec:	f043 0201 	orr.w	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df8:	2201      	movs	r2, #1
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d012      	beq.n	8007e2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	2201      	movs	r2, #1
 8007e18:	409a      	lsls	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e22:	f043 0202 	orr.w	r2, r3, #2
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	2204      	movs	r2, #4
 8007e30:	409a      	lsls	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4013      	ands	r3, r2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d012      	beq.n	8007e60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e58:	f043 0204 	orr.w	r2, r3, #4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e64:	2210      	movs	r2, #16
 8007e66:	409a      	lsls	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d043      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d03c      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	2210      	movs	r2, #16
 8007e84:	409a      	lsls	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d018      	beq.n	8007eca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d108      	bne.n	8007eb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d024      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
 8007eb6:	e01f      	b.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01b      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	4798      	blx	r3
 8007ec8:	e016      	b.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d107      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0208 	bic.w	r2, r2, #8
 8007ee6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efc:	2220      	movs	r2, #32
 8007efe:	409a      	lsls	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4013      	ands	r3, r2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 808e 	beq.w	8008026 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8086 	beq.w	8008026 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	2220      	movs	r2, #32
 8007f20:	409a      	lsls	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b05      	cmp	r3, #5
 8007f30:	d136      	bne.n	8007fa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0216 	bic.w	r2, r2, #22
 8007f40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695a      	ldr	r2, [r3, #20]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <HAL_DMA_IRQHandler+0x1da>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0208 	bic.w	r2, r2, #8
 8007f70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f76:	223f      	movs	r2, #63	; 0x3f
 8007f78:	409a      	lsls	r2, r3
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d07d      	beq.n	8008092 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
        }
        return;
 8007f9e:	e078      	b.n	8008092 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01c      	beq.n	8007fe8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d030      	beq.n	8008026 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
 8007fcc:	e02b      	b.n	8008026 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d027      	beq.n	8008026 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
 8007fde:	e022      	b.n	8008026 <HAL_DMA_IRQHandler+0x29e>
 8007fe0:	200000a0 	.word	0x200000a0
 8007fe4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0210 	bic.w	r2, r2, #16
 8008004:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	2b00      	cmp	r3, #0
 800802c:	d032      	beq.n	8008094 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d022      	beq.n	8008080 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2205      	movs	r2, #5
 800803e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0201 	bic.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	3301      	adds	r3, #1
 8008056:	60bb      	str	r3, [r7, #8]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	429a      	cmp	r2, r3
 800805c:	d307      	bcc.n	800806e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f2      	bne.n	8008052 <HAL_DMA_IRQHandler+0x2ca>
 800806c:	e000      	b.n	8008070 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800806e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
 8008090:	e000      	b.n	8008094 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008092:	bf00      	nop
    }
  }
}
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop

0800809c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d108      	bne.n	80080dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80080da:	e007      	b.n	80080ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	60da      	str	r2, [r3, #12]
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	3b10      	subs	r3, #16
 8008108:	4a14      	ldr	r2, [pc, #80]	; (800815c <DMA_CalcBaseAndBitshift+0x64>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	091b      	lsrs	r3, r3, #4
 8008110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008112:	4a13      	ldr	r2, [pc, #76]	; (8008160 <DMA_CalcBaseAndBitshift+0x68>)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b03      	cmp	r3, #3
 8008124:	d909      	bls.n	800813a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800812e:	f023 0303 	bic.w	r3, r3, #3
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	659a      	str	r2, [r3, #88]	; 0x58
 8008138:	e007      	b.n	800814a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008142:	f023 0303 	bic.w	r3, r3, #3
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	aaaaaaab 	.word	0xaaaaaaab
 8008160:	08010abc 	.word	0x08010abc

08008164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d11f      	bne.n	80081be <DMA_CheckFifoParam+0x5a>
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d856      	bhi.n	8008232 <DMA_CheckFifoParam+0xce>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <DMA_CheckFifoParam+0x28>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	0800819d 	.word	0x0800819d
 8008190:	080081af 	.word	0x080081af
 8008194:	0800819d 	.word	0x0800819d
 8008198:	08008233 	.word	0x08008233
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d046      	beq.n	8008236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ac:	e043      	b.n	8008236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081b6:	d140      	bne.n	800823a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081bc:	e03d      	b.n	800823a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c6:	d121      	bne.n	800820c <DMA_CheckFifoParam+0xa8>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d837      	bhi.n	800823e <DMA_CheckFifoParam+0xda>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <DMA_CheckFifoParam+0x70>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	080081e5 	.word	0x080081e5
 80081d8:	080081eb 	.word	0x080081eb
 80081dc:	080081e5 	.word	0x080081e5
 80081e0:	080081fd 	.word	0x080081fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
      break;
 80081e8:	e030      	b.n	800824c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d025      	beq.n	8008242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081fa:	e022      	b.n	8008242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008204:	d11f      	bne.n	8008246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800820a:	e01c      	b.n	8008246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d903      	bls.n	800821a <DMA_CheckFifoParam+0xb6>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d003      	beq.n	8008220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008218:	e018      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	73fb      	strb	r3, [r7, #15]
      break;
 800821e:	e015      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00e      	beq.n	800824a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]
      break;
 8008230:	e00b      	b.n	800824a <DMA_CheckFifoParam+0xe6>
      break;
 8008232:	bf00      	nop
 8008234:	e00a      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      break;
 8008236:	bf00      	nop
 8008238:	e008      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      break;
 800823a:	bf00      	nop
 800823c:	e006      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      break;
 800823e:	bf00      	nop
 8008240:	e004      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      break;
 8008242:	bf00      	nop
 8008244:	e002      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      break;   
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <DMA_CheckFifoParam+0xe8>
      break;
 800824a:	bf00      	nop
    }
  } 
  
  return status; 
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop

0800825c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800825c:	b480      	push	{r7}
 800825e:	b089      	sub	sp, #36	; 0x24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800826e:	2300      	movs	r3, #0
 8008270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e16b      	b.n	8008550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008278:	2201      	movs	r2, #1
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	4013      	ands	r3, r2
 800828a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	429a      	cmp	r2, r3
 8008292:	f040 815a 	bne.w	800854a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d005      	beq.n	80082ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d130      	bne.n	8008310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	2203      	movs	r2, #3
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	43db      	mvns	r3, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4013      	ands	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082e4:	2201      	movs	r2, #1
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4013      	ands	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	f003 0201 	and.w	r2, r3, #1
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4313      	orrs	r3, r2
 8008308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d017      	beq.n	800834c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	2203      	movs	r2, #3
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	43db      	mvns	r3, r3
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	4013      	ands	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4313      	orrs	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d123      	bne.n	80083a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	08da      	lsrs	r2, r3, #3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3208      	adds	r2, #8
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f003 0307 	and.w	r3, r3, #7
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	220f      	movs	r2, #15
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	4313      	orrs	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	08da      	lsrs	r2, r3, #3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3208      	adds	r2, #8
 800839a:	69b9      	ldr	r1, [r7, #24]
 800839c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	2203      	movs	r2, #3
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	43db      	mvns	r3, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4013      	ands	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 0203 	and.w	r2, r3, #3
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	fa02 f303 	lsl.w	r3, r2, r3
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80b4 	beq.w	800854a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	4b60      	ldr	r3, [pc, #384]	; (8008568 <HAL_GPIO_Init+0x30c>)
 80083e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ea:	4a5f      	ldr	r2, [pc, #380]	; (8008568 <HAL_GPIO_Init+0x30c>)
 80083ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083f0:	6453      	str	r3, [r2, #68]	; 0x44
 80083f2:	4b5d      	ldr	r3, [pc, #372]	; (8008568 <HAL_GPIO_Init+0x30c>)
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083fe:	4a5b      	ldr	r2, [pc, #364]	; (800856c <HAL_GPIO_Init+0x310>)
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	3302      	adds	r3, #2
 8008406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	220f      	movs	r2, #15
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	43db      	mvns	r3, r3
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	4013      	ands	r3, r2
 8008420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a52      	ldr	r2, [pc, #328]	; (8008570 <HAL_GPIO_Init+0x314>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d02b      	beq.n	8008482 <HAL_GPIO_Init+0x226>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a51      	ldr	r2, [pc, #324]	; (8008574 <HAL_GPIO_Init+0x318>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d025      	beq.n	800847e <HAL_GPIO_Init+0x222>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a50      	ldr	r2, [pc, #320]	; (8008578 <HAL_GPIO_Init+0x31c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01f      	beq.n	800847a <HAL_GPIO_Init+0x21e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a4f      	ldr	r2, [pc, #316]	; (800857c <HAL_GPIO_Init+0x320>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d019      	beq.n	8008476 <HAL_GPIO_Init+0x21a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a4e      	ldr	r2, [pc, #312]	; (8008580 <HAL_GPIO_Init+0x324>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <HAL_GPIO_Init+0x216>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a4d      	ldr	r2, [pc, #308]	; (8008584 <HAL_GPIO_Init+0x328>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00d      	beq.n	800846e <HAL_GPIO_Init+0x212>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a4c      	ldr	r2, [pc, #304]	; (8008588 <HAL_GPIO_Init+0x32c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <HAL_GPIO_Init+0x20e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a4b      	ldr	r2, [pc, #300]	; (800858c <HAL_GPIO_Init+0x330>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d101      	bne.n	8008466 <HAL_GPIO_Init+0x20a>
 8008462:	2307      	movs	r3, #7
 8008464:	e00e      	b.n	8008484 <HAL_GPIO_Init+0x228>
 8008466:	2308      	movs	r3, #8
 8008468:	e00c      	b.n	8008484 <HAL_GPIO_Init+0x228>
 800846a:	2306      	movs	r3, #6
 800846c:	e00a      	b.n	8008484 <HAL_GPIO_Init+0x228>
 800846e:	2305      	movs	r3, #5
 8008470:	e008      	b.n	8008484 <HAL_GPIO_Init+0x228>
 8008472:	2304      	movs	r3, #4
 8008474:	e006      	b.n	8008484 <HAL_GPIO_Init+0x228>
 8008476:	2303      	movs	r3, #3
 8008478:	e004      	b.n	8008484 <HAL_GPIO_Init+0x228>
 800847a:	2302      	movs	r3, #2
 800847c:	e002      	b.n	8008484 <HAL_GPIO_Init+0x228>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <HAL_GPIO_Init+0x228>
 8008482:	2300      	movs	r3, #0
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	f002 0203 	and.w	r2, r2, #3
 800848a:	0092      	lsls	r2, r2, #2
 800848c:	4093      	lsls	r3, r2
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	4313      	orrs	r3, r2
 8008492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008494:	4935      	ldr	r1, [pc, #212]	; (800856c <HAL_GPIO_Init+0x310>)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	089b      	lsrs	r3, r3, #2
 800849a:	3302      	adds	r3, #2
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084a2:	4b3b      	ldr	r3, [pc, #236]	; (8008590 <HAL_GPIO_Init+0x334>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	43db      	mvns	r3, r3
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4013      	ands	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084c6:	4a32      	ldr	r2, [pc, #200]	; (8008590 <HAL_GPIO_Init+0x334>)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084cc:	4b30      	ldr	r3, [pc, #192]	; (8008590 <HAL_GPIO_Init+0x334>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	43db      	mvns	r3, r3
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	4013      	ands	r3, r2
 80084da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80084f0:	4a27      	ldr	r2, [pc, #156]	; (8008590 <HAL_GPIO_Init+0x334>)
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80084f6:	4b26      	ldr	r3, [pc, #152]	; (8008590 <HAL_GPIO_Init+0x334>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	43db      	mvns	r3, r3
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	4013      	ands	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4313      	orrs	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800851a:	4a1d      	ldr	r2, [pc, #116]	; (8008590 <HAL_GPIO_Init+0x334>)
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008520:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <HAL_GPIO_Init+0x334>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	43db      	mvns	r3, r3
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	4013      	ands	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008544:	4a12      	ldr	r2, [pc, #72]	; (8008590 <HAL_GPIO_Init+0x334>)
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	3301      	adds	r3, #1
 800854e:	61fb      	str	r3, [r7, #28]
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b0f      	cmp	r3, #15
 8008554:	f67f ae90 	bls.w	8008278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40023800 	.word	0x40023800
 800856c:	40013800 	.word	0x40013800
 8008570:	40020000 	.word	0x40020000
 8008574:	40020400 	.word	0x40020400
 8008578:	40020800 	.word	0x40020800
 800857c:	40020c00 	.word	0x40020c00
 8008580:	40021000 	.word	0x40021000
 8008584:	40021400 	.word	0x40021400
 8008588:	40021800 	.word	0x40021800
 800858c:	40021c00 	.word	0x40021c00
 8008590:	40013c00 	.word	0x40013c00

08008594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	887b      	ldrh	r3, [r7, #2]
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73fb      	strb	r3, [r7, #15]
 80085b0:	e001      	b.n	80085b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	807b      	strh	r3, [r7, #2]
 80085d0:	4613      	mov	r3, r2
 80085d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085d4:	787b      	ldrb	r3, [r7, #1]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085da:	887a      	ldrh	r2, [r7, #2]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085e0:	e003      	b.n	80085ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	041a      	lsls	r2, r3, #16
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	619a      	str	r2, [r3, #24]
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e264      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d075      	beq.n	8008702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008616:	4ba3      	ldr	r3, [pc, #652]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 030c 	and.w	r3, r3, #12
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00c      	beq.n	800863c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008622:	4ba0      	ldr	r3, [pc, #640]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800862a:	2b08      	cmp	r3, #8
 800862c:	d112      	bne.n	8008654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800862e:	4b9d      	ldr	r3, [pc, #628]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800863a:	d10b      	bne.n	8008654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800863c:	4b99      	ldr	r3, [pc, #612]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05b      	beq.n	8008700 <HAL_RCC_OscConfig+0x108>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d157      	bne.n	8008700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e23f      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d106      	bne.n	800866c <HAL_RCC_OscConfig+0x74>
 800865e:	4b91      	ldr	r3, [pc, #580]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a90      	ldr	r2, [pc, #576]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e01d      	b.n	80086a8 <HAL_RCC_OscConfig+0xb0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008674:	d10c      	bne.n	8008690 <HAL_RCC_OscConfig+0x98>
 8008676:	4b8b      	ldr	r3, [pc, #556]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a8a      	ldr	r2, [pc, #552]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800867c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4b88      	ldr	r3, [pc, #544]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a87      	ldr	r2, [pc, #540]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e00b      	b.n	80086a8 <HAL_RCC_OscConfig+0xb0>
 8008690:	4b84      	ldr	r3, [pc, #528]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a83      	ldr	r2, [pc, #524]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b81      	ldr	r3, [pc, #516]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a80      	ldr	r2, [pc, #512]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80086a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b0:	f7fe fc7e 	bl	8006fb0 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086b8:	f7fe fc7a 	bl	8006fb0 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b64      	cmp	r3, #100	; 0x64
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e204      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ca:	4b76      	ldr	r3, [pc, #472]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0xc0>
 80086d6:	e014      	b.n	8008702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d8:	f7fe fc6a 	bl	8006fb0 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e0:	f7fe fc66 	bl	8006fb0 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b64      	cmp	r3, #100	; 0x64
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e1f0      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f2:	4b6c      	ldr	r3, [pc, #432]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f0      	bne.n	80086e0 <HAL_RCC_OscConfig+0xe8>
 80086fe:	e000      	b.n	8008702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d063      	beq.n	80087d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800870e:	4b65      	ldr	r3, [pc, #404]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800871a:	4b62      	ldr	r3, [pc, #392]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008722:	2b08      	cmp	r3, #8
 8008724:	d11c      	bne.n	8008760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008726:	4b5f      	ldr	r3, [pc, #380]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d116      	bne.n	8008760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008732:	4b5c      	ldr	r3, [pc, #368]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_RCC_OscConfig+0x152>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d001      	beq.n	800874a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e1c4      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874a:	4b56      	ldr	r3, [pc, #344]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	4952      	ldr	r1, [pc, #328]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800875a:	4313      	orrs	r3, r2
 800875c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875e:	e03a      	b.n	80087d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d020      	beq.n	80087aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008768:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <HAL_RCC_OscConfig+0x2b0>)
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876e:	f7fe fc1f 	bl	8006fb0 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008776:	f7fe fc1b 	bl	8006fb0 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e1a5      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008788:	4b46      	ldr	r3, [pc, #280]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008794:	4b43      	ldr	r3, [pc, #268]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4940      	ldr	r1, [pc, #256]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	600b      	str	r3, [r1, #0]
 80087a8:	e015      	b.n	80087d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087aa:	4b3f      	ldr	r3, [pc, #252]	; (80088a8 <HAL_RCC_OscConfig+0x2b0>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b0:	f7fe fbfe 	bl	8006fb0 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b8:	f7fe fbfa 	bl	8006fb0 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e184      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ca:	4b36      	ldr	r3, [pc, #216]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1f0      	bne.n	80087b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d030      	beq.n	8008844 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ea:	4b30      	ldr	r3, [pc, #192]	; (80088ac <HAL_RCC_OscConfig+0x2b4>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f0:	f7fe fbde 	bl	8006fb0 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f8:	f7fe fbda 	bl	8006fb0 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e164      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800880a:	4b26      	ldr	r3, [pc, #152]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800880c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x200>
 8008816:	e015      	b.n	8008844 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008818:	4b24      	ldr	r3, [pc, #144]	; (80088ac <HAL_RCC_OscConfig+0x2b4>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800881e:	f7fe fbc7 	bl	8006fb0 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008826:	f7fe fbc3 	bl	8006fb0 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e14d      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008838:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f0      	bne.n	8008826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80a0 	beq.w	8008992 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008852:	2300      	movs	r3, #0
 8008854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008856:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10f      	bne.n	8008882 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	4b0f      	ldr	r3, [pc, #60]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	4a0e      	ldr	r2, [pc, #56]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 800886c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008870:	6413      	str	r3, [r2, #64]	; 0x40
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <HAL_RCC_OscConfig+0x2ac>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887a:	60bb      	str	r3, [r7, #8]
 800887c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800887e:	2301      	movs	r3, #1
 8008880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <HAL_RCC_OscConfig+0x2b8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d121      	bne.n	80088d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800888e:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <HAL_RCC_OscConfig+0x2b8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <HAL_RCC_OscConfig+0x2b8>)
 8008894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800889a:	f7fe fb89 	bl	8006fb0 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088a0:	e011      	b.n	80088c6 <HAL_RCC_OscConfig+0x2ce>
 80088a2:	bf00      	nop
 80088a4:	40023800 	.word	0x40023800
 80088a8:	42470000 	.word	0x42470000
 80088ac:	42470e80 	.word	0x42470e80
 80088b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088b4:	f7fe fb7c 	bl	8006fb0 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e106      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088c6:	4b85      	ldr	r3, [pc, #532]	; (8008adc <HAL_RCC_OscConfig+0x4e4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d106      	bne.n	80088e8 <HAL_RCC_OscConfig+0x2f0>
 80088da:	4b81      	ldr	r3, [pc, #516]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 80088dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088de:	4a80      	ldr	r2, [pc, #512]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	6713      	str	r3, [r2, #112]	; 0x70
 80088e6:	e01c      	b.n	8008922 <HAL_RCC_OscConfig+0x32a>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b05      	cmp	r3, #5
 80088ee:	d10c      	bne.n	800890a <HAL_RCC_OscConfig+0x312>
 80088f0:	4b7b      	ldr	r3, [pc, #492]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 80088f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f4:	4a7a      	ldr	r2, [pc, #488]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 80088f6:	f043 0304 	orr.w	r3, r3, #4
 80088fa:	6713      	str	r3, [r2, #112]	; 0x70
 80088fc:	4b78      	ldr	r3, [pc, #480]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	4a77      	ldr	r2, [pc, #476]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	6713      	str	r3, [r2, #112]	; 0x70
 8008908:	e00b      	b.n	8008922 <HAL_RCC_OscConfig+0x32a>
 800890a:	4b75      	ldr	r3, [pc, #468]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	4a74      	ldr	r2, [pc, #464]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	6713      	str	r3, [r2, #112]	; 0x70
 8008916:	4b72      	ldr	r3, [pc, #456]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	4a71      	ldr	r2, [pc, #452]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d015      	beq.n	8008956 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892a:	f7fe fb41 	bl	8006fb0 <HAL_GetTick>
 800892e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008930:	e00a      	b.n	8008948 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008932:	f7fe fb3d 	bl	8006fb0 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008940:	4293      	cmp	r3, r2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e0c5      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008948:	4b65      	ldr	r3, [pc, #404]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0ee      	beq.n	8008932 <HAL_RCC_OscConfig+0x33a>
 8008954:	e014      	b.n	8008980 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008956:	f7fe fb2b 	bl	8006fb0 <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800895c:	e00a      	b.n	8008974 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800895e:	f7fe fb27 	bl	8006fb0 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f241 3288 	movw	r2, #5000	; 0x1388
 800896c:	4293      	cmp	r3, r2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e0af      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008974:	4b5a      	ldr	r3, [pc, #360]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1ee      	bne.n	800895e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d105      	bne.n	8008992 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008986:	4b56      	ldr	r3, [pc, #344]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	4a55      	ldr	r2, [pc, #340]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 800898c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 809b 	beq.w	8008ad2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800899c:	4b50      	ldr	r3, [pc, #320]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 030c 	and.w	r3, r3, #12
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d05c      	beq.n	8008a62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d141      	bne.n	8008a34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089b0:	4b4c      	ldr	r3, [pc, #304]	; (8008ae4 <HAL_RCC_OscConfig+0x4ec>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b6:	f7fe fafb 	bl	8006fb0 <HAL_GetTick>
 80089ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089bc:	e008      	b.n	80089d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089be:	f7fe faf7 	bl	8006fb0 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e081      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d0:	4b43      	ldr	r3, [pc, #268]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f0      	bne.n	80089be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	019b      	lsls	r3, r3, #6
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	3b01      	subs	r3, #1
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	061b      	lsls	r3, r3, #24
 8008a00:	4937      	ldr	r1, [pc, #220]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a06:	4b37      	ldr	r3, [pc, #220]	; (8008ae4 <HAL_RCC_OscConfig+0x4ec>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a0c:	f7fe fad0 	bl	8006fb0 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a14:	f7fe facc 	bl	8006fb0 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e056      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a26:	4b2e      	ldr	r3, [pc, #184]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x41c>
 8008a32:	e04e      	b.n	8008ad2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a34:	4b2b      	ldr	r3, [pc, #172]	; (8008ae4 <HAL_RCC_OscConfig+0x4ec>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a3a:	f7fe fab9 	bl	8006fb0 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a40:	e008      	b.n	8008a54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a42:	f7fe fab5 	bl	8006fb0 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e03f      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a54:	4b22      	ldr	r3, [pc, #136]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1f0      	bne.n	8008a42 <HAL_RCC_OscConfig+0x44a>
 8008a60:	e037      	b.n	8008ad2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e032      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <HAL_RCC_OscConfig+0x4e8>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d028      	beq.n	8008ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d121      	bne.n	8008ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d11a      	bne.n	8008ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aa4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d111      	bne.n	8008ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	085b      	lsrs	r3, r3, #1
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d107      	bne.n	8008ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d001      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40007000 	.word	0x40007000
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	42470060 	.word	0x42470060

08008ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0cc      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008afc:	4b68      	ldr	r3, [pc, #416]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d90c      	bls.n	8008b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0a:	4b65      	ldr	r3, [pc, #404]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b12:	4b63      	ldr	r3, [pc, #396]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d001      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e0b8      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d020      	beq.n	8008b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b3c:	4b59      	ldr	r3, [pc, #356]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4a58      	ldr	r2, [pc, #352]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b54:	4b53      	ldr	r3, [pc, #332]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	4a52      	ldr	r2, [pc, #328]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b60:	4b50      	ldr	r3, [pc, #320]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	494d      	ldr	r1, [pc, #308]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d044      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d107      	bne.n	8008b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b86:	4b47      	ldr	r3, [pc, #284]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d119      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e07f      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d003      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ba6:	4b3f      	ldr	r3, [pc, #252]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e06f      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb6:	4b3b      	ldr	r3, [pc, #236]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e067      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bc6:	4b37      	ldr	r3, [pc, #220]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f023 0203 	bic.w	r2, r3, #3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	4934      	ldr	r1, [pc, #208]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bd8:	f7fe f9ea 	bl	8006fb0 <HAL_GetTick>
 8008bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bde:	e00a      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008be0:	f7fe f9e6 	bl	8006fb0 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e04f      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bf6:	4b2b      	ldr	r3, [pc, #172]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 020c 	and.w	r2, r3, #12
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d1eb      	bne.n	8008be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c08:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d20c      	bcs.n	8008c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c16:	4b22      	ldr	r3, [pc, #136]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1e:	4b20      	ldr	r3, [pc, #128]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d001      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e032      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d008      	beq.n	8008c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c3c:	4b19      	ldr	r3, [pc, #100]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	4916      	ldr	r1, [pc, #88]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	490e      	ldr	r1, [pc, #56]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c6e:	f000 f821 	bl	8008cb4 <HAL_RCC_GetSysClockFreq>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	091b      	lsrs	r3, r3, #4
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	490a      	ldr	r1, [pc, #40]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c80:	5ccb      	ldrb	r3, [r1, r3]
 8008c82:	fa22 f303 	lsr.w	r3, r2, r3
 8008c86:	4a09      	ldr	r2, [pc, #36]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c8a:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe f94a 	bl	8006f28 <HAL_InitTick>

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40023c00 	.word	0x40023c00
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	08010aa4 	.word	0x08010aa4
 8008cac:	200000a0 	.word	0x200000a0
 8008cb0:	200000a4 	.word	0x200000a4

08008cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ccc:	4b67      	ldr	r3, [pc, #412]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 030c 	and.w	r3, r3, #12
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d00d      	beq.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	f200 80bd 	bhi.w	8008e58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d003      	beq.n	8008cee <HAL_RCC_GetSysClockFreq+0x3a>
 8008ce6:	e0b7      	b.n	8008e58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ce8:	4b61      	ldr	r3, [pc, #388]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008cea:	60bb      	str	r3, [r7, #8]
       break;
 8008cec:	e0b7      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cee:	4b61      	ldr	r3, [pc, #388]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008cf0:	60bb      	str	r3, [r7, #8]
      break;
 8008cf2:	e0b4      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cf4:	4b5d      	ldr	r3, [pc, #372]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cfe:	4b5b      	ldr	r3, [pc, #364]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d04d      	beq.n	8008da6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d0a:	4b58      	ldr	r3, [pc, #352]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	099b      	lsrs	r3, r3, #6
 8008d10:	461a      	mov	r2, r3
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d1a:	f04f 0100 	mov.w	r1, #0
 8008d1e:	ea02 0800 	and.w	r8, r2, r0
 8008d22:	ea03 0901 	and.w	r9, r3, r1
 8008d26:	4640      	mov	r0, r8
 8008d28:	4649      	mov	r1, r9
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	014b      	lsls	r3, r1, #5
 8008d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d38:	0142      	lsls	r2, r0, #5
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	ebb0 0008 	subs.w	r0, r0, r8
 8008d42:	eb61 0109 	sbc.w	r1, r1, r9
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	018b      	lsls	r3, r1, #6
 8008d50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d54:	0182      	lsls	r2, r0, #6
 8008d56:	1a12      	subs	r2, r2, r0
 8008d58:	eb63 0301 	sbc.w	r3, r3, r1
 8008d5c:	f04f 0000 	mov.w	r0, #0
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	00d9      	lsls	r1, r3, #3
 8008d66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d6a:	00d0      	lsls	r0, r2, #3
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	eb12 0208 	adds.w	r2, r2, r8
 8008d74:	eb43 0309 	adc.w	r3, r3, r9
 8008d78:	f04f 0000 	mov.w	r0, #0
 8008d7c:	f04f 0100 	mov.w	r1, #0
 8008d80:	0259      	lsls	r1, r3, #9
 8008d82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008d86:	0250      	lsls	r0, r2, #9
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4619      	mov	r1, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	461a      	mov	r2, r3
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	f7f7 fa72 	bl	8000280 <__aeabi_uldivmod>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4613      	mov	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e04a      	b.n	8008e3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008da6:	4b31      	ldr	r3, [pc, #196]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	099b      	lsrs	r3, r3, #6
 8008dac:	461a      	mov	r2, r3
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008db6:	f04f 0100 	mov.w	r1, #0
 8008dba:	ea02 0400 	and.w	r4, r2, r0
 8008dbe:	ea03 0501 	and.w	r5, r3, r1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	014b      	lsls	r3, r1, #5
 8008dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008dd4:	0142      	lsls	r2, r0, #5
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	4619      	mov	r1, r3
 8008dda:	1b00      	subs	r0, r0, r4
 8008ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	018b      	lsls	r3, r1, #6
 8008dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008dee:	0182      	lsls	r2, r0, #6
 8008df0:	1a12      	subs	r2, r2, r0
 8008df2:	eb63 0301 	sbc.w	r3, r3, r1
 8008df6:	f04f 0000 	mov.w	r0, #0
 8008dfa:	f04f 0100 	mov.w	r1, #0
 8008dfe:	00d9      	lsls	r1, r3, #3
 8008e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e04:	00d0      	lsls	r0, r2, #3
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	1912      	adds	r2, r2, r4
 8008e0c:	eb45 0303 	adc.w	r3, r5, r3
 8008e10:	f04f 0000 	mov.w	r0, #0
 8008e14:	f04f 0100 	mov.w	r1, #0
 8008e18:	0299      	lsls	r1, r3, #10
 8008e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008e1e:	0290      	lsls	r0, r2, #10
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4610      	mov	r0, r2
 8008e26:	4619      	mov	r1, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	f7f7 fa26 	bl	8000280 <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4613      	mov	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e3c:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	0c1b      	lsrs	r3, r3, #16
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	3301      	adds	r3, #1
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e54:	60bb      	str	r3, [r7, #8]
      break;
 8008e56:	e002      	b.n	8008e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008e5a:	60bb      	str	r3, [r7, #8]
      break;
 8008e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e6a:	bf00      	nop
 8008e6c:	40023800 	.word	0x40023800
 8008e70:	00f42400 	.word	0x00f42400
 8008e74:	007a1200 	.word	0x007a1200

08008e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e7c:	4b03      	ldr	r3, [pc, #12]	; (8008e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	200000a0 	.word	0x200000a0

08008e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e94:	f7ff fff0 	bl	8008e78 <HAL_RCC_GetHCLKFreq>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	0a9b      	lsrs	r3, r3, #10
 8008ea0:	f003 0307 	and.w	r3, r3, #7
 8008ea4:	4903      	ldr	r1, [pc, #12]	; (8008eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ea6:	5ccb      	ldrb	r3, [r1, r3]
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40023800 	.word	0x40023800
 8008eb4:	08010ab4 	.word	0x08010ab4

08008eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ebc:	f7ff ffdc 	bl	8008e78 <HAL_RCC_GetHCLKFreq>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	0b5b      	lsrs	r3, r3, #13
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	4903      	ldr	r1, [pc, #12]	; (8008edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ece:	5ccb      	ldrb	r3, [r1, r3]
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	08010ab4 	.word	0x08010ab4

08008ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e07b      	b.n	8008fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d108      	bne.n	8008f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f02:	d009      	beq.n	8008f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	61da      	str	r2, [r3, #28]
 8008f0a:	e005      	b.n	8008f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fc f870 	bl	8005018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9c:	ea42 0103 	orr.w	r1, r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	0c1b      	lsrs	r3, r3, #16
 8008fb6:	f003 0104 	and.w	r1, r3, #4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	f003 0210 	and.w	r2, r3, #16
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b088      	sub	sp, #32
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_SPI_Transmit+0x22>
 8009010:	2302      	movs	r3, #2
 8009012:	e126      	b.n	8009262 <HAL_SPI_Transmit+0x270>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800901c:	f7fd ffc8 	bl	8006fb0 <HAL_GetTick>
 8009020:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b01      	cmp	r3, #1
 8009030:	d002      	beq.n	8009038 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009032:	2302      	movs	r3, #2
 8009034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009036:	e10b      	b.n	8009250 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HAL_SPI_Transmit+0x52>
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009048:	e102      	b.n	8009250 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2203      	movs	r2, #3
 800904e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009090:	d10f      	bne.n	80090b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090bc:	2b40      	cmp	r3, #64	; 0x40
 80090be:	d007      	beq.n	80090d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d8:	d14b      	bne.n	8009172 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_SPI_Transmit+0xf6>
 80090e2:	8afb      	ldrh	r3, [r7, #22]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d13e      	bne.n	8009166 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	881a      	ldrh	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	1c9a      	adds	r2, r3, #2
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009102:	b29b      	uxth	r3, r3
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800910c:	e02b      	b.n	8009166 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b02      	cmp	r3, #2
 800911a:	d112      	bne.n	8009142 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	881a      	ldrh	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	1c9a      	adds	r2, r3, #2
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009140:	e011      	b.n	8009166 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009142:	f7fd ff35 	bl	8006fb0 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d803      	bhi.n	800915a <HAL_SPI_Transmit+0x168>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d102      	bne.n	8009160 <HAL_SPI_Transmit+0x16e>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009164:	e074      	b.n	8009250 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1ce      	bne.n	800910e <HAL_SPI_Transmit+0x11c>
 8009170:	e04c      	b.n	800920c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_SPI_Transmit+0x18e>
 800917a:	8afb      	ldrh	r3, [r7, #22]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d140      	bne.n	8009202 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	330c      	adds	r3, #12
 800918a:	7812      	ldrb	r2, [r2, #0]
 800918c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919c:	b29b      	uxth	r3, r3
 800919e:	3b01      	subs	r3, #1
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091a6:	e02c      	b.n	8009202 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d113      	bne.n	80091de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	330c      	adds	r3, #12
 80091c0:	7812      	ldrb	r2, [r2, #0]
 80091c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	86da      	strh	r2, [r3, #54]	; 0x36
 80091dc:	e011      	b.n	8009202 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091de:	f7fd fee7 	bl	8006fb0 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d803      	bhi.n	80091f6 <HAL_SPI_Transmit+0x204>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d102      	bne.n	80091fc <HAL_SPI_Transmit+0x20a>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009200:	e026      	b.n	8009250 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1cd      	bne.n	80091a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f8b3 	bl	800937c <SPI_EndRxTxTransaction>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2220      	movs	r2, #32
 8009220:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	613b      	str	r3, [r7, #16]
 800923e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	77fb      	strb	r3, [r7, #31]
 800924c:	e000      	b.n	8009250 <HAL_SPI_Transmit+0x25e>
  }

error:
 800924e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009260:	7ffb      	ldrb	r3, [r7, #31]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	4613      	mov	r3, r2
 800927a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800927c:	f7fd fe98 	bl	8006fb0 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4413      	add	r3, r2
 800928a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800928c:	f7fd fe90 	bl	8006fb0 <HAL_GetTick>
 8009290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009292:	4b39      	ldr	r3, [pc, #228]	; (8009378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	015b      	lsls	r3, r3, #5
 8009298:	0d1b      	lsrs	r3, r3, #20
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092a2:	e054      	b.n	800934e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092aa:	d050      	beq.n	800934e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092ac:	f7fd fe80 	bl	8006fb0 <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d902      	bls.n	80092c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d13d      	bne.n	800933e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092da:	d111      	bne.n	8009300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092e4:	d004      	beq.n	80092f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ee:	d107      	bne.n	8009300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009308:	d10f      	bne.n	800932a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e017      	b.n	800936e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	3b01      	subs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	bf0c      	ite	eq
 800935e:	2301      	moveq	r3, #1
 8009360:	2300      	movne	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	429a      	cmp	r2, r3
 800936a:	d19b      	bne.n	80092a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3720      	adds	r7, #32
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200000a0 	.word	0x200000a0

0800937c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009388:	4b1b      	ldr	r3, [pc, #108]	; (80093f8 <SPI_EndRxTxTransaction+0x7c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a1b      	ldr	r2, [pc, #108]	; (80093fc <SPI_EndRxTxTransaction+0x80>)
 800938e:	fba2 2303 	umull	r2, r3, r2, r3
 8009392:	0d5b      	lsrs	r3, r3, #21
 8009394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009398:	fb02 f303 	mul.w	r3, r2, r3
 800939c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093a6:	d112      	bne.n	80093ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	2180      	movs	r1, #128	; 0x80
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff ff5a 	bl	800926c <SPI_WaitFlagStateUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d016      	beq.n	80093ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	f043 0220 	orr.w	r2, r3, #32
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e00f      	b.n	80093ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e4:	2b80      	cmp	r3, #128	; 0x80
 80093e6:	d0f2      	beq.n	80093ce <SPI_EndRxTxTransaction+0x52>
 80093e8:	e000      	b.n	80093ec <SPI_EndRxTxTransaction+0x70>
        break;
 80093ea:	bf00      	nop
  }

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	200000a0 	.word	0x200000a0
 80093fc:	165e9f81 	.word	0x165e9f81

08009400 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e038      	b.n	8009488 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7f8 f882 	bl	8001534 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3308      	adds	r3, #8
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f001 ff42 	bl	800b2c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	461a      	mov	r2, r3
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	f001 ffa4 	bl	800b398 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6858      	ldr	r0, [r3, #4]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	f001 ffd1 	bl	800b404 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	6892      	ldr	r2, [r2, #8]
 800946a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	f041 0101 	orr.w	r1, r1, #1
 800947a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e041      	b.n	8009526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d106      	bne.n	80094bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7fd f8aa 	bl	8006610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2202      	movs	r2, #2
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f000 fbb2 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b01      	cmp	r3, #1
 8009542:	d001      	beq.n	8009548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e04e      	b.n	80095e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68da      	ldr	r2, [r3, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f042 0201 	orr.w	r2, r2, #1
 800955e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a23      	ldr	r2, [pc, #140]	; (80095f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d022      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009572:	d01d      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1f      	ldr	r2, [pc, #124]	; (80095f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d018      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <HAL_TIM_Base_Start_IT+0xcc>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d013      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <HAL_TIM_Base_Start_IT+0xd0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00e      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a1b      	ldr	r2, [pc, #108]	; (8009604 <HAL_TIM_Base_Start_IT+0xd4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d009      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a19      	ldr	r2, [pc, #100]	; (8009608 <HAL_TIM_Base_Start_IT+0xd8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d004      	beq.n	80095b0 <HAL_TIM_Base_Start_IT+0x80>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a18      	ldr	r2, [pc, #96]	; (800960c <HAL_TIM_Base_Start_IT+0xdc>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d111      	bne.n	80095d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b06      	cmp	r3, #6
 80095c0:	d010      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0201 	orr.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d2:	e007      	b.n	80095e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0201 	orr.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40010000 	.word	0x40010000
 80095f8:	40000400 	.word	0x40000400
 80095fc:	40000800 	.word	0x40000800
 8009600:	40000c00 	.word	0x40000c00
 8009604:	40010400 	.word	0x40010400
 8009608:	40014000 	.word	0x40014000
 800960c:	40001800 	.word	0x40001800

08009610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e041      	b.n	80096a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f839 	bl	80096ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3304      	adds	r3, #4
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f000 faf2 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d122      	bne.n	800971e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d11b      	bne.n	800971e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f06f 0202 	mvn.w	r2, #2
 80096ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fa78 	bl	8009bfa <HAL_TIM_IC_CaptureCallback>
 800970a:	e005      	b.n	8009718 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fa6a 	bl	8009be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa7b 	bl	8009c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b04      	cmp	r3, #4
 800972a:	d122      	bne.n	8009772 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b04      	cmp	r3, #4
 8009738:	d11b      	bne.n	8009772 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f06f 0204 	mvn.w	r2, #4
 8009742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fa4e 	bl	8009bfa <HAL_TIM_IC_CaptureCallback>
 800975e:	e005      	b.n	800976c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fa40 	bl	8009be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa51 	bl	8009c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f003 0308 	and.w	r3, r3, #8
 800977c:	2b08      	cmp	r3, #8
 800977e:	d122      	bne.n	80097c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b08      	cmp	r3, #8
 800978c:	d11b      	bne.n	80097c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f06f 0208 	mvn.w	r2, #8
 8009796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2204      	movs	r2, #4
 800979c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f003 0303 	and.w	r3, r3, #3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fa24 	bl	8009bfa <HAL_TIM_IC_CaptureCallback>
 80097b2:	e005      	b.n	80097c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa16 	bl	8009be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa27 	bl	8009c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	f003 0310 	and.w	r3, r3, #16
 80097d0:	2b10      	cmp	r3, #16
 80097d2:	d122      	bne.n	800981a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d11b      	bne.n	800981a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f06f 0210 	mvn.w	r2, #16
 80097ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2208      	movs	r2, #8
 80097f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f9fa 	bl	8009bfa <HAL_TIM_IC_CaptureCallback>
 8009806:	e005      	b.n	8009814 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f9ec 	bl	8009be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f9fd 	bl	8009c0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b01      	cmp	r3, #1
 8009826:	d10e      	bne.n	8009846 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b01      	cmp	r3, #1
 8009834:	d107      	bne.n	8009846 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f06f 0201 	mvn.w	r2, #1
 800983e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7fb faf3 	bl	8004e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009850:	2b80      	cmp	r3, #128	; 0x80
 8009852:	d10e      	bne.n	8009872 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985e:	2b80      	cmp	r3, #128	; 0x80
 8009860:	d107      	bne.n	8009872 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800986a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fd53 	bl	800a318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b40      	cmp	r3, #64	; 0x40
 800987e:	d10e      	bne.n	800989e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988a:	2b40      	cmp	r3, #64	; 0x40
 800988c:	d107      	bne.n	800989e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f9c2 	bl	8009c22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d10e      	bne.n	80098ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f003 0320 	and.w	r3, r3, #32
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d107      	bne.n	80098ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f06f 0220 	mvn.w	r2, #32
 80098c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fd1d 	bl	800a304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80098ee:	2302      	movs	r3, #2
 80098f0:	e0ae      	b.n	8009a50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	f200 809f 	bhi.w	8009a40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009902:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	0800993d 	.word	0x0800993d
 800990c:	08009a41 	.word	0x08009a41
 8009910:	08009a41 	.word	0x08009a41
 8009914:	08009a41 	.word	0x08009a41
 8009918:	0800997d 	.word	0x0800997d
 800991c:	08009a41 	.word	0x08009a41
 8009920:	08009a41 	.word	0x08009a41
 8009924:	08009a41 	.word	0x08009a41
 8009928:	080099bf 	.word	0x080099bf
 800992c:	08009a41 	.word	0x08009a41
 8009930:	08009a41 	.word	0x08009a41
 8009934:	08009a41 	.word	0x08009a41
 8009938:	080099ff 	.word	0x080099ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fa18 	bl	8009d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f042 0208 	orr.w	r2, r2, #8
 8009956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0204 	bic.w	r2, r2, #4
 8009966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6999      	ldr	r1, [r3, #24]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	691a      	ldr	r2, [r3, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	619a      	str	r2, [r3, #24]
      break;
 800997a:	e064      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68b9      	ldr	r1, [r7, #8]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fa68 	bl	8009e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6999      	ldr	r1, [r3, #24]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	021a      	lsls	r2, r3, #8
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	619a      	str	r2, [r3, #24]
      break;
 80099bc:	e043      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fabd 	bl	8009f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69da      	ldr	r2, [r3, #28]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0208 	orr.w	r2, r2, #8
 80099d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69da      	ldr	r2, [r3, #28]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0204 	bic.w	r2, r2, #4
 80099e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69d9      	ldr	r1, [r3, #28]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	61da      	str	r2, [r3, #28]
      break;
 80099fc:	e023      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fb11 	bl	800a02c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69da      	ldr	r2, [r3, #28]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69d9      	ldr	r1, [r3, #28]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	021a      	lsls	r2, r3, #8
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	61da      	str	r2, [r3, #28]
      break;
 8009a3e:	e002      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	75fb      	strb	r3, [r7, #23]
      break;
 8009a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIM_ConfigClockSource+0x1c>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e0b4      	b.n	8009bde <HAL_TIM_ConfigClockSource+0x186>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aac:	d03e      	beq.n	8009b2c <HAL_TIM_ConfigClockSource+0xd4>
 8009aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ab2:	f200 8087 	bhi.w	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aba:	f000 8086 	beq.w	8009bca <HAL_TIM_ConfigClockSource+0x172>
 8009abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac2:	d87f      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ac4:	2b70      	cmp	r3, #112	; 0x70
 8009ac6:	d01a      	beq.n	8009afe <HAL_TIM_ConfigClockSource+0xa6>
 8009ac8:	2b70      	cmp	r3, #112	; 0x70
 8009aca:	d87b      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009acc:	2b60      	cmp	r3, #96	; 0x60
 8009ace:	d050      	beq.n	8009b72 <HAL_TIM_ConfigClockSource+0x11a>
 8009ad0:	2b60      	cmp	r3, #96	; 0x60
 8009ad2:	d877      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad4:	2b50      	cmp	r3, #80	; 0x50
 8009ad6:	d03c      	beq.n	8009b52 <HAL_TIM_ConfigClockSource+0xfa>
 8009ad8:	2b50      	cmp	r3, #80	; 0x50
 8009ada:	d873      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009adc:	2b40      	cmp	r3, #64	; 0x40
 8009ade:	d058      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x13a>
 8009ae0:	2b40      	cmp	r3, #64	; 0x40
 8009ae2:	d86f      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae4:	2b30      	cmp	r3, #48	; 0x30
 8009ae6:	d064      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ae8:	2b30      	cmp	r3, #48	; 0x30
 8009aea:	d86b      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d060      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d867      	bhi.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d05c      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	d05a      	beq.n	8009bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8009afc:	e062      	b.n	8009bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	6899      	ldr	r1, [r3, #8]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f000 fb5d 	bl	800a1cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	609a      	str	r2, [r3, #8]
      break;
 8009b2a:	e04f      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	6899      	ldr	r1, [r3, #8]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f000 fb46 	bl	800a1cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b4e:	609a      	str	r2, [r3, #8]
      break;
 8009b50:	e03c      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	6859      	ldr	r1, [r3, #4]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f000 faba 	bl	800a0d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2150      	movs	r1, #80	; 0x50
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fb13 	bl	800a196 <TIM_ITRx_SetConfig>
      break;
 8009b70:	e02c      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6859      	ldr	r1, [r3, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f000 fad9 	bl	800a136 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2160      	movs	r1, #96	; 0x60
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fb03 	bl	800a196 <TIM_ITRx_SetConfig>
      break;
 8009b90:	e01c      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	6859      	ldr	r1, [r3, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f000 fa9a 	bl	800a0d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2140      	movs	r1, #64	; 0x40
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 faf3 	bl	800a196 <TIM_ITRx_SetConfig>
      break;
 8009bb0:	e00c      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f000 faea 	bl	800a196 <TIM_ITRx_SetConfig>
      break;
 8009bc2:	e003      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc8:	e000      	b.n	8009bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c02:	bf00      	nop
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a40      	ldr	r2, [pc, #256]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d013      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c56:	d00f      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3d      	ldr	r2, [pc, #244]	; (8009d50 <TIM_Base_SetConfig+0x118>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00b      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3c      	ldr	r2, [pc, #240]	; (8009d54 <TIM_Base_SetConfig+0x11c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d007      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3b      	ldr	r2, [pc, #236]	; (8009d58 <TIM_Base_SetConfig+0x120>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a3a      	ldr	r2, [pc, #232]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d108      	bne.n	8009c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2f      	ldr	r2, [pc, #188]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d02b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c98:	d027      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2c      	ldr	r2, [pc, #176]	; (8009d50 <TIM_Base_SetConfig+0x118>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d023      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2b      	ldr	r2, [pc, #172]	; (8009d54 <TIM_Base_SetConfig+0x11c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01f      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a2a      	ldr	r2, [pc, #168]	; (8009d58 <TIM_Base_SetConfig+0x120>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d01b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d017      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a28      	ldr	r2, [pc, #160]	; (8009d60 <TIM_Base_SetConfig+0x128>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d013      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a27      	ldr	r2, [pc, #156]	; (8009d64 <TIM_Base_SetConfig+0x12c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00f      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a26      	ldr	r2, [pc, #152]	; (8009d68 <TIM_Base_SetConfig+0x130>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d00b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <TIM_Base_SetConfig+0x134>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d007      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <TIM_Base_SetConfig+0x138>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d003      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a23      	ldr	r2, [pc, #140]	; (8009d74 <TIM_Base_SetConfig+0x13c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d108      	bne.n	8009cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_Base_SetConfig+0xf8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d103      	bne.n	8009d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	615a      	str	r2, [r3, #20]
}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40000400 	.word	0x40000400
 8009d54:	40000800 	.word	0x40000800
 8009d58:	40000c00 	.word	0x40000c00
 8009d5c:	40010400 	.word	0x40010400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	40014400 	.word	0x40014400
 8009d68:	40014800 	.word	0x40014800
 8009d6c:	40001800 	.word	0x40001800
 8009d70:	40001c00 	.word	0x40001c00
 8009d74:	40002000 	.word	0x40002000

08009d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	f023 0201 	bic.w	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f023 0302 	bic.w	r3, r3, #2
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a20      	ldr	r2, [pc, #128]	; (8009e50 <TIM_OC1_SetConfig+0xd8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_OC1_SetConfig+0x64>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <TIM_OC1_SetConfig+0xdc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10c      	bne.n	8009df6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0308 	bic.w	r3, r3, #8
 8009de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0304 	bic.w	r3, r3, #4
 8009df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <TIM_OC1_SetConfig+0xd8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d003      	beq.n	8009e06 <TIM_OC1_SetConfig+0x8e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a14      	ldr	r2, [pc, #80]	; (8009e54 <TIM_OC1_SetConfig+0xdc>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d111      	bne.n	8009e2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	621a      	str	r2, [r3, #32]
}
 8009e44:	bf00      	nop
 8009e46:	371c      	adds	r7, #28
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40010400 	.word	0x40010400

08009e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f023 0210 	bic.w	r2, r3, #16
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f023 0320 	bic.w	r3, r3, #32
 8009ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	011b      	lsls	r3, r3, #4
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <TIM_OC2_SetConfig+0xe4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_OC2_SetConfig+0x68>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <TIM_OC2_SetConfig+0xe8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d10d      	bne.n	8009edc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <TIM_OC2_SetConfig+0xe4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0x94>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <TIM_OC2_SetConfig+0xe8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d113      	bne.n	8009f14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40010400 	.word	0x40010400

08009f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0303 	bic.w	r3, r3, #3
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a21      	ldr	r2, [pc, #132]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d003      	beq.n	8009faa <TIM_OC3_SetConfig+0x66>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a20      	ldr	r2, [pc, #128]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d10d      	bne.n	8009fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a16      	ldr	r2, [pc, #88]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_OC3_SetConfig+0x92>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a15      	ldr	r2, [pc, #84]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d113      	bne.n	8009ffe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	621a      	str	r2, [r3, #32]
}
 800a018:	bf00      	nop
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	40010000 	.word	0x40010000
 800a028:	40010400 	.word	0x40010400

0800a02c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	031b      	lsls	r3, r3, #12
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a12      	ldr	r2, [pc, #72]	; (800a0d0 <TIM_OC4_SetConfig+0xa4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_OC4_SetConfig+0x68>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a11      	ldr	r2, [pc, #68]	; (800a0d4 <TIM_OC4_SetConfig+0xa8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d109      	bne.n	800a0a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	019b      	lsls	r3, r3, #6
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	621a      	str	r2, [r3, #32]
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40010400 	.word	0x40010400

0800a0d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f023 0201 	bic.w	r2, r3, #1
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f023 030a 	bic.w	r3, r3, #10
 800a114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	621a      	str	r2, [r3, #32]
}
 800a12a:	bf00      	nop
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a136:	b480      	push	{r7}
 800a138:	b087      	sub	sp, #28
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f023 0210 	bic.w	r2, r3, #16
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	031b      	lsls	r3, r3, #12
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	4313      	orrs	r3, r2
 800a16a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	621a      	str	r2, [r3, #32]
}
 800a18a:	bf00      	nop
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	f043 0307 	orr.w	r3, r3, #7
 800a1b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	609a      	str	r2, [r3, #8]
}
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	021a      	lsls	r2, r3, #8
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	609a      	str	r2, [r3, #8]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d101      	bne.n	800a224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a220:	2302      	movs	r3, #2
 800a222:	e05a      	b.n	800a2da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a21      	ldr	r2, [pc, #132]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d022      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a270:	d01d      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1d      	ldr	r2, [pc, #116]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d018      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1b      	ldr	r2, [pc, #108]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d013      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a1a      	ldr	r2, [pc, #104]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d00e      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a18      	ldr	r2, [pc, #96]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d009      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a17      	ldr	r2, [pc, #92]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d004      	beq.n	800a2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a15      	ldr	r2, [pc, #84]	; (800a300 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d10c      	bne.n	800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	40010000 	.word	0x40010000
 800a2ec:	40000400 	.word	0x40000400
 800a2f0:	40000800 	.word	0x40000800
 800a2f4:	40000c00 	.word	0x40000c00
 800a2f8:	40010400 	.word	0x40010400
 800a2fc:	40014000 	.word	0x40014000
 800a300:	40001800 	.word	0x40001800

0800a304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e03f      	b.n	800a3be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7fc fd4c 	bl	8006df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2224      	movs	r2, #36	; 0x24
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68da      	ldr	r2, [r3, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a36e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fddf 	bl	800af34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	691a      	ldr	r2, [r3, #16]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	695a      	ldr	r2, [r3, #20]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b08a      	sub	sp, #40	; 0x28
 800a3ca:	af02      	add	r7, sp, #8
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	603b      	str	r3, [r7, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d17c      	bne.n	800a4e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <HAL_UART_Transmit+0x2c>
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e075      	b.n	800a4e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d101      	bne.n	800a404 <HAL_UART_Transmit+0x3e>
 800a400:	2302      	movs	r3, #2
 800a402:	e06e      	b.n	800a4e2 <HAL_UART_Transmit+0x11c>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2221      	movs	r2, #33	; 0x21
 800a416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a41a:	f7fc fdc9 	bl	8006fb0 <HAL_GetTick>
 800a41e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	88fa      	ldrh	r2, [r7, #6]
 800a424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	88fa      	ldrh	r2, [r7, #6]
 800a42a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a434:	d108      	bne.n	800a448 <HAL_UART_Transmit+0x82>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d104      	bne.n	800a448 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	e003      	b.n	800a450 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a458:	e02a      	b.n	800a4b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	2180      	movs	r1, #128	; 0x80
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 fb1f 	bl	800aaa8 <UART_WaitOnFlagUntilTimeout>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e036      	b.n	800a4e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10b      	bne.n	800a492 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	3302      	adds	r3, #2
 800a48e:	61bb      	str	r3, [r7, #24]
 800a490:	e007      	b.n	800a4a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	781a      	ldrb	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1cf      	bne.n	800a45a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2140      	movs	r1, #64	; 0x40
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 faef 	bl	800aaa8 <UART_WaitOnFlagUntilTimeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e006      	b.n	800a4e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e000      	b.n	800a4e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a4e0:	2302      	movs	r3, #2
  }
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b20      	cmp	r3, #32
 800a502:	d11d      	bne.n	800a540 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <HAL_UART_Receive_IT+0x26>
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e016      	b.n	800a542 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <HAL_UART_Receive_IT+0x38>
 800a51e:	2302      	movs	r3, #2
 800a520:	e00f      	b.n	800a542 <HAL_UART_Receive_IT+0x58>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	461a      	mov	r2, r3
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fb24 	bl	800ab84 <UART_Start_Receive_IT>
 800a53c:	4603      	mov	r3, r0
 800a53e:	e000      	b.n	800a542 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a540:	2302      	movs	r3, #2
  }
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b0ba      	sub	sp, #232	; 0xe8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a572:	2300      	movs	r3, #0
 800a574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a578:	2300      	movs	r3, #0
 800a57a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a58a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10f      	bne.n	800a5b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x66>
 800a59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fc07 	bl	800adbe <UART_Receive_IT>
      return;
 800a5b0:	e256      	b.n	800aa60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 80de 	beq.w	800a778 <HAL_UART_IRQHandler+0x22c>
 800a5bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d106      	bne.n	800a5d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80d1 	beq.w	800a778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00b      	beq.n	800a5fa <HAL_UART_IRQHandler+0xae>
 800a5e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d005      	beq.n	800a5fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	f043 0201 	orr.w	r2, r3, #1
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fe:	f003 0304 	and.w	r3, r3, #4
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00b      	beq.n	800a61e <HAL_UART_IRQHandler+0xd2>
 800a606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	f043 0202 	orr.w	r2, r3, #2
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00b      	beq.n	800a642 <HAL_UART_IRQHandler+0xf6>
 800a62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	f043 0204 	orr.w	r2, r3, #4
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a646:	f003 0308 	and.w	r3, r3, #8
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d011      	beq.n	800a672 <HAL_UART_IRQHandler+0x126>
 800a64e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a652:	f003 0320 	and.w	r3, r3, #32
 800a656:	2b00      	cmp	r3, #0
 800a658:	d105      	bne.n	800a666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a65a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	d005      	beq.n	800a672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	f043 0208 	orr.w	r2, r3, #8
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 81ed 	beq.w	800aa56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	d008      	beq.n	800a69a <HAL_UART_IRQHandler+0x14e>
 800a688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fb92 	bl	800adbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a4:	2b40      	cmp	r3, #64	; 0x40
 800a6a6:	bf0c      	ite	eq
 800a6a8:	2301      	moveq	r3, #1
 800a6aa:	2300      	movne	r3, #0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d103      	bne.n	800a6c6 <HAL_UART_IRQHandler+0x17a>
 800a6be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d04f      	beq.n	800a766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fa9a 	bl	800ac00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	2b40      	cmp	r3, #64	; 0x40
 800a6d8:	d141      	bne.n	800a75e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3314      	adds	r3, #20
 800a6e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3314      	adds	r3, #20
 800a702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a70a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a71e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1d9      	bne.n	800a6da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d013      	beq.n	800a756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	4a7d      	ldr	r2, [pc, #500]	; (800a928 <HAL_UART_IRQHandler+0x3dc>)
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fd fb02 	bl	8007d44 <HAL_DMA_Abort_IT>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d016      	beq.n	800a774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a754:	e00e      	b.n	800a774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f990 	bl	800aa7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a75c:	e00a      	b.n	800a774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f98c 	bl	800aa7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a764:	e006      	b.n	800a774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f988 	bl	800aa7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a772:	e170      	b.n	800aa56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a774:	bf00      	nop
    return;
 800a776:	e16e      	b.n	800aa56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	f040 814a 	bne.w	800aa16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a786:	f003 0310 	and.w	r3, r3, #16
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 8143 	beq.w	800aa16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 813c 	beq.w	800aa16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60bb      	str	r3, [r7, #8]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60bb      	str	r3, [r7, #8]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	60bb      	str	r3, [r7, #8]
 800a7b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7be:	2b40      	cmp	r3, #64	; 0x40
 800a7c0:	f040 80b4 	bne.w	800a92c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8140 	beq.w	800aa5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	f080 8139 	bcs.w	800aa5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fa:	f000 8088 	beq.w	800a90e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a81c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	330c      	adds	r3, #12
 800a826:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a82a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a82e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1d9      	bne.n	800a7fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3314      	adds	r3, #20
 800a850:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a85a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a85c:	f023 0301 	bic.w	r3, r3, #1
 800a860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3314      	adds	r3, #20
 800a86a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a86e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a872:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e1      	bne.n	800a84a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3314      	adds	r3, #20
 800a88c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a89c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3314      	adds	r3, #20
 800a8a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e3      	bne.n	800a886 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	330c      	adds	r3, #12
 800a8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d6:	e853 3f00 	ldrex	r3, [r3]
 800a8da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8de:	f023 0310 	bic.w	r3, r3, #16
 800a8e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	330c      	adds	r3, #12
 800a8ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a8f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8f8:	e841 2300 	strex	r3, r2, [r1]
 800a8fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1e3      	bne.n	800a8cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fd f9ab 	bl	8007c64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a916:	b29b      	uxth	r3, r3
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f8b6 	bl	800aa90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a924:	e099      	b.n	800aa5a <HAL_UART_IRQHandler+0x50e>
 800a926:	bf00      	nop
 800a928:	0800acc7 	.word	0x0800acc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a934:	b29b      	uxth	r3, r3
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a940:	b29b      	uxth	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 808b 	beq.w	800aa5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 8086 	beq.w	800aa5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	330c      	adds	r3, #12
 800a958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	e853 3f00 	ldrex	r3, [r3]
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	330c      	adds	r3, #12
 800a972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a976:	647a      	str	r2, [r7, #68]	; 0x44
 800a978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a97c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e3      	bne.n	800a952 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3314      	adds	r3, #20
 800a990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	623b      	str	r3, [r7, #32]
   return(result);
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9ae:	633a      	str	r2, [r7, #48]	; 0x30
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b6:	e841 2300 	strex	r3, r2, [r1]
 800a9ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1e3      	bne.n	800a98a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	330c      	adds	r3, #12
 800a9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	e853 3f00 	ldrex	r3, [r3]
 800a9de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0310 	bic.w	r3, r3, #16
 800a9e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	330c      	adds	r3, #12
 800a9f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9f4:	61fa      	str	r2, [r7, #28]
 800a9f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f8:	69b9      	ldr	r1, [r7, #24]
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	e841 2300 	strex	r3, r2, [r1]
 800aa00:	617b      	str	r3, [r7, #20]
   return(result);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e3      	bne.n	800a9d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f83e 	bl	800aa90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa14:	e023      	b.n	800aa5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d009      	beq.n	800aa36 <HAL_UART_IRQHandler+0x4ea>
 800aa22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f95d 	bl	800acee <UART_Transmit_IT>
    return;
 800aa34:	e014      	b.n	800aa60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <HAL_UART_IRQHandler+0x514>
 800aa42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d008      	beq.n	800aa60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f99d 	bl	800ad8e <UART_EndTransmit_IT>
    return;
 800aa54:	e004      	b.n	800aa60 <HAL_UART_IRQHandler+0x514>
    return;
 800aa56:	bf00      	nop
 800aa58:	e002      	b.n	800aa60 <HAL_UART_IRQHandler+0x514>
      return;
 800aa5a:	bf00      	nop
 800aa5c:	e000      	b.n	800aa60 <HAL_UART_IRQHandler+0x514>
      return;
 800aa5e:	bf00      	nop
  }
}
 800aa60:	37e8      	adds	r7, #232	; 0xe8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop

0800aa68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b090      	sub	sp, #64	; 0x40
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	4613      	mov	r3, r2
 800aab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aab8:	e050      	b.n	800ab5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac0:	d04c      	beq.n	800ab5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d007      	beq.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x30>
 800aac8:	f7fc fa72 	bl	8006fb0 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d241      	bcs.n	800ab5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	330c      	adds	r3, #12
 800aade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	330c      	adds	r3, #12
 800aaf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aaf8:	637a      	str	r2, [r7, #52]	; 0x34
 800aafa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab00:	e841 2300 	strex	r3, r2, [r1]
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e5      	bne.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3314      	adds	r3, #20
 800ab12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f023 0301 	bic.w	r3, r3, #1
 800ab22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3314      	adds	r3, #20
 800ab2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab2c:	623a      	str	r2, [r7, #32]
 800ab2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	6a3a      	ldr	r2, [r7, #32]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e5      	bne.n	800ab0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2220      	movs	r2, #32
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e00f      	b.n	800ab7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	4013      	ands	r3, r2
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	bf0c      	ite	eq
 800ab6c:	2301      	moveq	r3, #1
 800ab6e:	2300      	movne	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d09f      	beq.n	800aaba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3740      	adds	r7, #64	; 0x40
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	88fa      	ldrh	r2, [r7, #6]
 800ab9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	88fa      	ldrh	r2, [r7, #6]
 800aba2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2222      	movs	r2, #34	; 0x22
 800abae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695a      	ldr	r2, [r3, #20]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0201 	orr.w	r2, r2, #1
 800abe0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f042 0220 	orr.w	r2, r2, #32
 800abf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b095      	sub	sp, #84	; 0x54
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	330c      	adds	r3, #12
 800ac0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac12:	e853 3f00 	ldrex	r3, [r3]
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	330c      	adds	r3, #12
 800ac26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac28:	643a      	str	r2, [r7, #64]	; 0x40
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac30:	e841 2300 	strex	r3, r2, [r1]
 800ac34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1e5      	bne.n	800ac08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3314      	adds	r3, #20
 800ac42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	e853 3f00 	ldrex	r3, [r3]
 800ac4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	f023 0301 	bic.w	r3, r3, #1
 800ac52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3314      	adds	r3, #20
 800ac5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac64:	e841 2300 	strex	r3, r2, [r1]
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1e5      	bne.n	800ac3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d119      	bne.n	800acac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f023 0310 	bic.w	r3, r3, #16
 800ac8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	330c      	adds	r3, #12
 800ac96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac98:	61ba      	str	r2, [r7, #24]
 800ac9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6979      	ldr	r1, [r7, #20]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	613b      	str	r3, [r7, #16]
   return(result);
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e5      	bne.n	800ac78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2220      	movs	r2, #32
 800acb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acba:	bf00      	nop
 800acbc:	3754      	adds	r7, #84	; 0x54
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff fecb 	bl	800aa7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ace6:	bf00      	nop
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acee:	b480      	push	{r7}
 800acf0:	b085      	sub	sp, #20
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b21      	cmp	r3, #33	; 0x21
 800ad00:	d13e      	bne.n	800ad80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0a:	d114      	bne.n	800ad36 <UART_Transmit_IT+0x48>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d110      	bne.n	800ad36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	1c9a      	adds	r2, r3, #2
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	621a      	str	r2, [r3, #32]
 800ad34:	e008      	b.n	800ad48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	1c59      	adds	r1, r3, #1
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	6211      	str	r1, [r2, #32]
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4619      	mov	r1, r3
 800ad56:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10f      	bne.n	800ad7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e000      	b.n	800ad82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad80:	2302      	movs	r3, #2
  }
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68da      	ldr	r2, [r3, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ada4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff fe5a 	bl	800aa68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b08c      	sub	sp, #48	; 0x30
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b22      	cmp	r3, #34	; 0x22
 800add0:	f040 80ab 	bne.w	800af2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800addc:	d117      	bne.n	800ae0e <UART_Receive_IT+0x50>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d113      	bne.n	800ae0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae06:	1c9a      	adds	r2, r3, #2
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	629a      	str	r2, [r3, #40]	; 0x28
 800ae0c:	e026      	b.n	800ae5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae20:	d007      	beq.n	800ae32 <UART_Receive_IT+0x74>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <UART_Receive_IT+0x82>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	e008      	b.n	800ae52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d15a      	bne.n	800af26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f022 0220 	bic.w	r2, r2, #32
 800ae7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68da      	ldr	r2, [r3, #12]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	695a      	ldr	r2, [r3, #20]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0201 	bic.w	r2, r2, #1
 800ae9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d135      	bne.n	800af1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	330c      	adds	r3, #12
 800aebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	e853 3f00 	ldrex	r3, [r3]
 800aec4:	613b      	str	r3, [r7, #16]
   return(result);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f023 0310 	bic.w	r3, r3, #16
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	330c      	adds	r3, #12
 800aed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed6:	623a      	str	r2, [r7, #32]
 800aed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeda:	69f9      	ldr	r1, [r7, #28]
 800aedc:	6a3a      	ldr	r2, [r7, #32]
 800aede:	e841 2300 	strex	r3, r2, [r1]
 800aee2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1e5      	bne.n	800aeb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0310 	and.w	r3, r3, #16
 800aef4:	2b10      	cmp	r3, #16
 800aef6:	d10a      	bne.n	800af0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fdbb 	bl	800aa90 <HAL_UARTEx_RxEventCallback>
 800af1a:	e002      	b.n	800af22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7fb fd97 	bl	8006a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	e002      	b.n	800af2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	e000      	b.n	800af2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af2a:	2302      	movs	r3, #2
  }
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3730      	adds	r7, #48	; 0x30
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	b09f      	sub	sp, #124	; 0x7c
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4a:	68d9      	ldr	r1, [r3, #12]
 800af4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	ea40 0301 	orr.w	r3, r0, r1
 800af54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	431a      	orrs	r2, r3
 800af60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	431a      	orrs	r2, r3
 800af66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800af6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af78:	f021 010c 	bic.w	r1, r1, #12
 800af7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af82:	430b      	orrs	r3, r1
 800af84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af92:	6999      	ldr	r1, [r3, #24]
 800af94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	ea40 0301 	orr.w	r3, r0, r1
 800af9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4bc5      	ldr	r3, [pc, #788]	; (800b2b8 <UART_SetConfig+0x384>)
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d004      	beq.n	800afb2 <UART_SetConfig+0x7e>
 800afa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	4bc3      	ldr	r3, [pc, #780]	; (800b2bc <UART_SetConfig+0x388>)
 800afae:	429a      	cmp	r2, r3
 800afb0:	d103      	bne.n	800afba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afb2:	f7fd ff81 	bl	8008eb8 <HAL_RCC_GetPCLK2Freq>
 800afb6:	6778      	str	r0, [r7, #116]	; 0x74
 800afb8:	e002      	b.n	800afc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afba:	f7fd ff69 	bl	8008e90 <HAL_RCC_GetPCLK1Freq>
 800afbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afc8:	f040 80b6 	bne.w	800b138 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afce:	461c      	mov	r4, r3
 800afd0:	f04f 0500 	mov.w	r5, #0
 800afd4:	4622      	mov	r2, r4
 800afd6:	462b      	mov	r3, r5
 800afd8:	1891      	adds	r1, r2, r2
 800afda:	6439      	str	r1, [r7, #64]	; 0x40
 800afdc:	415b      	adcs	r3, r3
 800afde:	647b      	str	r3, [r7, #68]	; 0x44
 800afe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800afe4:	1912      	adds	r2, r2, r4
 800afe6:	eb45 0303 	adc.w	r3, r5, r3
 800afea:	f04f 0000 	mov.w	r0, #0
 800afee:	f04f 0100 	mov.w	r1, #0
 800aff2:	00d9      	lsls	r1, r3, #3
 800aff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aff8:	00d0      	lsls	r0, r2, #3
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	1911      	adds	r1, r2, r4
 800b000:	6639      	str	r1, [r7, #96]	; 0x60
 800b002:	416b      	adcs	r3, r5
 800b004:	667b      	str	r3, [r7, #100]	; 0x64
 800b006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f04f 0300 	mov.w	r3, #0
 800b010:	1891      	adds	r1, r2, r2
 800b012:	63b9      	str	r1, [r7, #56]	; 0x38
 800b014:	415b      	adcs	r3, r3
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b01c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b020:	f7f5 f92e 	bl	8000280 <__aeabi_uldivmod>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4ba5      	ldr	r3, [pc, #660]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b02a:	fba3 2302 	umull	r2, r3, r3, r2
 800b02e:	095b      	lsrs	r3, r3, #5
 800b030:	011e      	lsls	r6, r3, #4
 800b032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b034:	461c      	mov	r4, r3
 800b036:	f04f 0500 	mov.w	r5, #0
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	1891      	adds	r1, r2, r2
 800b040:	6339      	str	r1, [r7, #48]	; 0x30
 800b042:	415b      	adcs	r3, r3
 800b044:	637b      	str	r3, [r7, #52]	; 0x34
 800b046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b04a:	1912      	adds	r2, r2, r4
 800b04c:	eb45 0303 	adc.w	r3, r5, r3
 800b050:	f04f 0000 	mov.w	r0, #0
 800b054:	f04f 0100 	mov.w	r1, #0
 800b058:	00d9      	lsls	r1, r3, #3
 800b05a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b05e:	00d0      	lsls	r0, r2, #3
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	1911      	adds	r1, r2, r4
 800b066:	65b9      	str	r1, [r7, #88]	; 0x58
 800b068:	416b      	adcs	r3, r5
 800b06a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	461a      	mov	r2, r3
 800b072:	f04f 0300 	mov.w	r3, #0
 800b076:	1891      	adds	r1, r2, r2
 800b078:	62b9      	str	r1, [r7, #40]	; 0x28
 800b07a:	415b      	adcs	r3, r3
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b07e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b082:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b086:	f7f5 f8fb 	bl	8000280 <__aeabi_uldivmod>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4b8c      	ldr	r3, [pc, #560]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b090:	fba3 1302 	umull	r1, r3, r3, r2
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	2164      	movs	r1, #100	; 0x64
 800b098:	fb01 f303 	mul.w	r3, r1, r3
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	3332      	adds	r3, #50	; 0x32
 800b0a2:	4a87      	ldr	r2, [pc, #540]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a8:	095b      	lsrs	r3, r3, #5
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0b0:	441e      	add	r6, r3
 800b0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f04f 0100 	mov.w	r1, #0
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	1894      	adds	r4, r2, r2
 800b0c0:	623c      	str	r4, [r7, #32]
 800b0c2:	415b      	adcs	r3, r3
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0ca:	1812      	adds	r2, r2, r0
 800b0cc:	eb41 0303 	adc.w	r3, r1, r3
 800b0d0:	f04f 0400 	mov.w	r4, #0
 800b0d4:	f04f 0500 	mov.w	r5, #0
 800b0d8:	00dd      	lsls	r5, r3, #3
 800b0da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0de:	00d4      	lsls	r4, r2, #3
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	1814      	adds	r4, r2, r0
 800b0e6:	653c      	str	r4, [r7, #80]	; 0x50
 800b0e8:	414b      	adcs	r3, r1
 800b0ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b0ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f04f 0300 	mov.w	r3, #0
 800b0f6:	1891      	adds	r1, r2, r2
 800b0f8:	61b9      	str	r1, [r7, #24]
 800b0fa:	415b      	adcs	r3, r3
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b106:	f7f5 f8bb 	bl	8000280 <__aeabi_uldivmod>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4b6c      	ldr	r3, [pc, #432]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b110:	fba3 1302 	umull	r1, r3, r3, r2
 800b114:	095b      	lsrs	r3, r3, #5
 800b116:	2164      	movs	r1, #100	; 0x64
 800b118:	fb01 f303 	mul.w	r3, r1, r3
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	3332      	adds	r3, #50	; 0x32
 800b122:	4a67      	ldr	r2, [pc, #412]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b124:	fba2 2303 	umull	r2, r3, r2, r3
 800b128:	095b      	lsrs	r3, r3, #5
 800b12a:	f003 0207 	and.w	r2, r3, #7
 800b12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4432      	add	r2, r6
 800b134:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b136:	e0b9      	b.n	800b2ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b13a:	461c      	mov	r4, r3
 800b13c:	f04f 0500 	mov.w	r5, #0
 800b140:	4622      	mov	r2, r4
 800b142:	462b      	mov	r3, r5
 800b144:	1891      	adds	r1, r2, r2
 800b146:	6139      	str	r1, [r7, #16]
 800b148:	415b      	adcs	r3, r3
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b150:	1912      	adds	r2, r2, r4
 800b152:	eb45 0303 	adc.w	r3, r5, r3
 800b156:	f04f 0000 	mov.w	r0, #0
 800b15a:	f04f 0100 	mov.w	r1, #0
 800b15e:	00d9      	lsls	r1, r3, #3
 800b160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b164:	00d0      	lsls	r0, r2, #3
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	eb12 0804 	adds.w	r8, r2, r4
 800b16e:	eb43 0905 	adc.w	r9, r3, r5
 800b172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	4618      	mov	r0, r3
 800b178:	f04f 0100 	mov.w	r1, #0
 800b17c:	f04f 0200 	mov.w	r2, #0
 800b180:	f04f 0300 	mov.w	r3, #0
 800b184:	008b      	lsls	r3, r1, #2
 800b186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b18a:	0082      	lsls	r2, r0, #2
 800b18c:	4640      	mov	r0, r8
 800b18e:	4649      	mov	r1, r9
 800b190:	f7f5 f876 	bl	8000280 <__aeabi_uldivmod>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4b49      	ldr	r3, [pc, #292]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b19a:	fba3 2302 	umull	r2, r3, r3, r2
 800b19e:	095b      	lsrs	r3, r3, #5
 800b1a0:	011e      	lsls	r6, r3, #4
 800b1a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f04f 0100 	mov.w	r1, #0
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	1894      	adds	r4, r2, r2
 800b1b0:	60bc      	str	r4, [r7, #8]
 800b1b2:	415b      	adcs	r3, r3
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1ba:	1812      	adds	r2, r2, r0
 800b1bc:	eb41 0303 	adc.w	r3, r1, r3
 800b1c0:	f04f 0400 	mov.w	r4, #0
 800b1c4:	f04f 0500 	mov.w	r5, #0
 800b1c8:	00dd      	lsls	r5, r3, #3
 800b1ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b1ce:	00d4      	lsls	r4, r2, #3
 800b1d0:	4622      	mov	r2, r4
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	1814      	adds	r4, r2, r0
 800b1d6:	64bc      	str	r4, [r7, #72]	; 0x48
 800b1d8:	414b      	adcs	r3, r1
 800b1da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f04f 0100 	mov.w	r1, #0
 800b1e6:	f04f 0200 	mov.w	r2, #0
 800b1ea:	f04f 0300 	mov.w	r3, #0
 800b1ee:	008b      	lsls	r3, r1, #2
 800b1f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b1f4:	0082      	lsls	r2, r0, #2
 800b1f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b1fa:	f7f5 f841 	bl	8000280 <__aeabi_uldivmod>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4b2f      	ldr	r3, [pc, #188]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b204:	fba3 1302 	umull	r1, r3, r3, r2
 800b208:	095b      	lsrs	r3, r3, #5
 800b20a:	2164      	movs	r1, #100	; 0x64
 800b20c:	fb01 f303 	mul.w	r3, r1, r3
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	3332      	adds	r3, #50	; 0x32
 800b216:	4a2a      	ldr	r2, [pc, #168]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b218:	fba2 2303 	umull	r2, r3, r2, r3
 800b21c:	095b      	lsrs	r3, r3, #5
 800b21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b222:	441e      	add	r6, r3
 800b224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b226:	4618      	mov	r0, r3
 800b228:	f04f 0100 	mov.w	r1, #0
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	1894      	adds	r4, r2, r2
 800b232:	603c      	str	r4, [r7, #0]
 800b234:	415b      	adcs	r3, r3
 800b236:	607b      	str	r3, [r7, #4]
 800b238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b23c:	1812      	adds	r2, r2, r0
 800b23e:	eb41 0303 	adc.w	r3, r1, r3
 800b242:	f04f 0400 	mov.w	r4, #0
 800b246:	f04f 0500 	mov.w	r5, #0
 800b24a:	00dd      	lsls	r5, r3, #3
 800b24c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b250:	00d4      	lsls	r4, r2, #3
 800b252:	4622      	mov	r2, r4
 800b254:	462b      	mov	r3, r5
 800b256:	eb12 0a00 	adds.w	sl, r2, r0
 800b25a:	eb43 0b01 	adc.w	fp, r3, r1
 800b25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4618      	mov	r0, r3
 800b264:	f04f 0100 	mov.w	r1, #0
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	f04f 0300 	mov.w	r3, #0
 800b270:	008b      	lsls	r3, r1, #2
 800b272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b276:	0082      	lsls	r2, r0, #2
 800b278:	4650      	mov	r0, sl
 800b27a:	4659      	mov	r1, fp
 800b27c:	f7f5 f800 	bl	8000280 <__aeabi_uldivmod>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4b0e      	ldr	r3, [pc, #56]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b286:	fba3 1302 	umull	r1, r3, r3, r2
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	2164      	movs	r1, #100	; 0x64
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	011b      	lsls	r3, r3, #4
 800b296:	3332      	adds	r3, #50	; 0x32
 800b298:	4a09      	ldr	r2, [pc, #36]	; (800b2c0 <UART_SetConfig+0x38c>)
 800b29a:	fba2 2303 	umull	r2, r3, r2, r3
 800b29e:	095b      	lsrs	r3, r3, #5
 800b2a0:	f003 020f 	and.w	r2, r3, #15
 800b2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4432      	add	r2, r6
 800b2aa:	609a      	str	r2, [r3, #8]
}
 800b2ac:	bf00      	nop
 800b2ae:	377c      	adds	r7, #124	; 0x7c
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b6:	bf00      	nop
 800b2b8:	40011000 	.word	0x40011000
 800b2bc:	40011400 	.word	0x40011400
 800b2c0:	51eb851f 	.word	0x51eb851f

0800b2c4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	f023 0101 	bic.w	r1, r3, #1
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	2b08      	cmp	r3, #8
 800b2ec:	d102      	bne.n	800b2f4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b2ee:	2340      	movs	r3, #64	; 0x40
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e001      	b.n	800b2f8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b304:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b30a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b310:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b316:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800b31c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800b322:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800b328:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800b32e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800b334:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4313      	orrs	r3, r2
 800b350:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800b352:	4b10      	ldr	r3, [pc, #64]	; (800b394 <FSMC_NORSRAM_Init+0xd0>)
 800b354:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b35c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b364:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	43db      	mvns	r3, r3
 800b374:	ea02 0103 	and.w	r1, r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	4319      	orrs	r1, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	371c      	adds	r7, #28
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	0008fb7f 	.word	0x0008fb7f

0800b398 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	011b      	lsls	r3, r3, #4
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	021b      	lsls	r3, r3, #8
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	041b      	lsls	r3, r3, #16
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	051b      	lsls	r3, r3, #20
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	3b02      	subs	r3, #2
 800b3de:	061b      	lsls	r3, r3, #24
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	3201      	adds	r2, #1
 800b3ec:	4319      	orrs	r1, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
	...

0800b404 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b418:	d11d      	bne.n	800b456 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b422:	4b13      	ldr	r3, [pc, #76]	; (800b470 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b424:	4013      	ands	r3, r2
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	6811      	ldr	r1, [r2, #0]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	6852      	ldr	r2, [r2, #4]
 800b42e:	0112      	lsls	r2, r2, #4
 800b430:	4311      	orrs	r1, r2
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	6892      	ldr	r2, [r2, #8]
 800b436:	0212      	lsls	r2, r2, #8
 800b438:	4311      	orrs	r1, r2
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	6992      	ldr	r2, [r2, #24]
 800b43e:	4311      	orrs	r1, r2
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	68d2      	ldr	r2, [r2, #12]
 800b444:	0412      	lsls	r2, r2, #16
 800b446:	430a      	orrs	r2, r1
 800b448:	ea43 0102 	orr.w	r1, r3, r2
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b454:	e005      	b.n	800b462 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	cff00000 	.word	0xcff00000

0800b474 <__errno>:
 800b474:	4b01      	ldr	r3, [pc, #4]	; (800b47c <__errno+0x8>)
 800b476:	6818      	ldr	r0, [r3, #0]
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	200000ac 	.word	0x200000ac

0800b480 <__libc_init_array>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	4d0d      	ldr	r5, [pc, #52]	; (800b4b8 <__libc_init_array+0x38>)
 800b484:	4c0d      	ldr	r4, [pc, #52]	; (800b4bc <__libc_init_array+0x3c>)
 800b486:	1b64      	subs	r4, r4, r5
 800b488:	10a4      	asrs	r4, r4, #2
 800b48a:	2600      	movs	r6, #0
 800b48c:	42a6      	cmp	r6, r4
 800b48e:	d109      	bne.n	800b4a4 <__libc_init_array+0x24>
 800b490:	4d0b      	ldr	r5, [pc, #44]	; (800b4c0 <__libc_init_array+0x40>)
 800b492:	4c0c      	ldr	r4, [pc, #48]	; (800b4c4 <__libc_init_array+0x44>)
 800b494:	f001 fa64 	bl	800c960 <_init>
 800b498:	1b64      	subs	r4, r4, r5
 800b49a:	10a4      	asrs	r4, r4, #2
 800b49c:	2600      	movs	r6, #0
 800b49e:	42a6      	cmp	r6, r4
 800b4a0:	d105      	bne.n	800b4ae <__libc_init_array+0x2e>
 800b4a2:	bd70      	pop	{r4, r5, r6, pc}
 800b4a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a8:	4798      	blx	r3
 800b4aa:	3601      	adds	r6, #1
 800b4ac:	e7ee      	b.n	800b48c <__libc_init_array+0xc>
 800b4ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4b2:	4798      	blx	r3
 800b4b4:	3601      	adds	r6, #1
 800b4b6:	e7f2      	b.n	800b49e <__libc_init_array+0x1e>
 800b4b8:	08010c18 	.word	0x08010c18
 800b4bc:	08010c18 	.word	0x08010c18
 800b4c0:	08010c18 	.word	0x08010c18
 800b4c4:	08010c1c 	.word	0x08010c1c

0800b4c8 <memset>:
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d100      	bne.n	800b4d2 <memset+0xa>
 800b4d0:	4770      	bx	lr
 800b4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d6:	e7f9      	b.n	800b4cc <memset+0x4>

0800b4d8 <srand>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4b10      	ldr	r3, [pc, #64]	; (800b51c <srand+0x44>)
 800b4dc:	681d      	ldr	r5, [r3, #0]
 800b4de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	b9b3      	cbnz	r3, 800b512 <srand+0x3a>
 800b4e4:	2018      	movs	r0, #24
 800b4e6:	f000 f8f7 	bl	800b6d8 <malloc>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	63a8      	str	r0, [r5, #56]	; 0x38
 800b4ee:	b920      	cbnz	r0, 800b4fa <srand+0x22>
 800b4f0:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <srand+0x48>)
 800b4f2:	480c      	ldr	r0, [pc, #48]	; (800b524 <srand+0x4c>)
 800b4f4:	2142      	movs	r1, #66	; 0x42
 800b4f6:	f000 f8bf 	bl	800b678 <__assert_func>
 800b4fa:	490b      	ldr	r1, [pc, #44]	; (800b528 <srand+0x50>)
 800b4fc:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <srand+0x54>)
 800b4fe:	e9c0 1300 	strd	r1, r3, [r0]
 800b502:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <srand+0x58>)
 800b504:	6083      	str	r3, [r0, #8]
 800b506:	230b      	movs	r3, #11
 800b508:	8183      	strh	r3, [r0, #12]
 800b50a:	2100      	movs	r1, #0
 800b50c:	2001      	movs	r0, #1
 800b50e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b512:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b514:	2200      	movs	r2, #0
 800b516:	611c      	str	r4, [r3, #16]
 800b518:	615a      	str	r2, [r3, #20]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	200000ac 	.word	0x200000ac
 800b520:	08010ac8 	.word	0x08010ac8
 800b524:	08010adf 	.word	0x08010adf
 800b528:	abcd330e 	.word	0xabcd330e
 800b52c:	e66d1234 	.word	0xe66d1234
 800b530:	0005deec 	.word	0x0005deec

0800b534 <rand>:
 800b534:	4b17      	ldr	r3, [pc, #92]	; (800b594 <rand+0x60>)
 800b536:	b510      	push	{r4, lr}
 800b538:	681c      	ldr	r4, [r3, #0]
 800b53a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b53c:	b9b3      	cbnz	r3, 800b56c <rand+0x38>
 800b53e:	2018      	movs	r0, #24
 800b540:	f000 f8ca 	bl	800b6d8 <malloc>
 800b544:	63a0      	str	r0, [r4, #56]	; 0x38
 800b546:	b928      	cbnz	r0, 800b554 <rand+0x20>
 800b548:	4602      	mov	r2, r0
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <rand+0x64>)
 800b54c:	4813      	ldr	r0, [pc, #76]	; (800b59c <rand+0x68>)
 800b54e:	214e      	movs	r1, #78	; 0x4e
 800b550:	f000 f892 	bl	800b678 <__assert_func>
 800b554:	4a12      	ldr	r2, [pc, #72]	; (800b5a0 <rand+0x6c>)
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <rand+0x70>)
 800b558:	e9c0 2300 	strd	r2, r3, [r0]
 800b55c:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <rand+0x74>)
 800b55e:	6083      	str	r3, [r0, #8]
 800b560:	230b      	movs	r3, #11
 800b562:	8183      	strh	r3, [r0, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	2300      	movs	r3, #0
 800b568:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b56c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b56e:	480f      	ldr	r0, [pc, #60]	; (800b5ac <rand+0x78>)
 800b570:	690a      	ldr	r2, [r1, #16]
 800b572:	694b      	ldr	r3, [r1, #20]
 800b574:	4c0e      	ldr	r4, [pc, #56]	; (800b5b0 <rand+0x7c>)
 800b576:	4350      	muls	r0, r2
 800b578:	fb04 0003 	mla	r0, r4, r3, r0
 800b57c:	fba2 3404 	umull	r3, r4, r2, r4
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	4404      	add	r4, r0
 800b584:	f144 0000 	adc.w	r0, r4, #0
 800b588:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800b58c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b590:	bd10      	pop	{r4, pc}
 800b592:	bf00      	nop
 800b594:	200000ac 	.word	0x200000ac
 800b598:	08010ac8 	.word	0x08010ac8
 800b59c:	08010adf 	.word	0x08010adf
 800b5a0:	abcd330e 	.word	0xabcd330e
 800b5a4:	e66d1234 	.word	0xe66d1234
 800b5a8:	0005deec 	.word	0x0005deec
 800b5ac:	5851f42d 	.word	0x5851f42d
 800b5b0:	4c957f2d 	.word	0x4c957f2d

0800b5b4 <sniprintf>:
 800b5b4:	b40c      	push	{r2, r3}
 800b5b6:	b530      	push	{r4, r5, lr}
 800b5b8:	4b17      	ldr	r3, [pc, #92]	; (800b618 <sniprintf+0x64>)
 800b5ba:	1e0c      	subs	r4, r1, #0
 800b5bc:	681d      	ldr	r5, [r3, #0]
 800b5be:	b09d      	sub	sp, #116	; 0x74
 800b5c0:	da08      	bge.n	800b5d4 <sniprintf+0x20>
 800b5c2:	238b      	movs	r3, #139	; 0x8b
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ca:	b01d      	add	sp, #116	; 0x74
 800b5cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5d0:	b002      	add	sp, #8
 800b5d2:	4770      	bx	lr
 800b5d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b5d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b5dc:	bf14      	ite	ne
 800b5de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5e2:	4623      	moveq	r3, r4
 800b5e4:	9304      	str	r3, [sp, #16]
 800b5e6:	9307      	str	r3, [sp, #28]
 800b5e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5ec:	9002      	str	r0, [sp, #8]
 800b5ee:	9006      	str	r0, [sp, #24]
 800b5f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b5f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b5f6:	ab21      	add	r3, sp, #132	; 0x84
 800b5f8:	a902      	add	r1, sp, #8
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	f000 f987 	bl	800b910 <_svfiprintf_r>
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	bfbc      	itt	lt
 800b606:	238b      	movlt	r3, #139	; 0x8b
 800b608:	602b      	strlt	r3, [r5, #0]
 800b60a:	2c00      	cmp	r4, #0
 800b60c:	d0dd      	beq.n	800b5ca <sniprintf+0x16>
 800b60e:	9b02      	ldr	r3, [sp, #8]
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	e7d9      	b.n	800b5ca <sniprintf+0x16>
 800b616:	bf00      	nop
 800b618:	200000ac 	.word	0x200000ac

0800b61c <strcat>:
 800b61c:	b510      	push	{r4, lr}
 800b61e:	4602      	mov	r2, r0
 800b620:	7814      	ldrb	r4, [r2, #0]
 800b622:	4613      	mov	r3, r2
 800b624:	3201      	adds	r2, #1
 800b626:	2c00      	cmp	r4, #0
 800b628:	d1fa      	bne.n	800b620 <strcat+0x4>
 800b62a:	3b01      	subs	r3, #1
 800b62c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b630:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b634:	2a00      	cmp	r2, #0
 800b636:	d1f9      	bne.n	800b62c <strcat+0x10>
 800b638:	bd10      	pop	{r4, pc}
	...

0800b63c <strdup>:
 800b63c:	4b02      	ldr	r3, [pc, #8]	; (800b648 <strdup+0xc>)
 800b63e:	4601      	mov	r1, r0
 800b640:	6818      	ldr	r0, [r3, #0]
 800b642:	f000 b803 	b.w	800b64c <_strdup_r>
 800b646:	bf00      	nop
 800b648:	200000ac 	.word	0x200000ac

0800b64c <_strdup_r>:
 800b64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	460d      	mov	r5, r1
 800b654:	f7f4 fdbc 	bl	80001d0 <strlen>
 800b658:	1c42      	adds	r2, r0, #1
 800b65a:	4611      	mov	r1, r2
 800b65c:	4620      	mov	r0, r4
 800b65e:	9201      	str	r2, [sp, #4]
 800b660:	f000 f8a0 	bl	800b7a4 <_malloc_r>
 800b664:	4604      	mov	r4, r0
 800b666:	b118      	cbz	r0, 800b670 <_strdup_r+0x24>
 800b668:	9a01      	ldr	r2, [sp, #4]
 800b66a:	4629      	mov	r1, r5
 800b66c:	f000 f83c 	bl	800b6e8 <memcpy>
 800b670:	4620      	mov	r0, r4
 800b672:	b003      	add	sp, #12
 800b674:	bd30      	pop	{r4, r5, pc}
	...

0800b678 <__assert_func>:
 800b678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b67a:	4614      	mov	r4, r2
 800b67c:	461a      	mov	r2, r3
 800b67e:	4b09      	ldr	r3, [pc, #36]	; (800b6a4 <__assert_func+0x2c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4605      	mov	r5, r0
 800b684:	68d8      	ldr	r0, [r3, #12]
 800b686:	b14c      	cbz	r4, 800b69c <__assert_func+0x24>
 800b688:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <__assert_func+0x30>)
 800b68a:	9100      	str	r1, [sp, #0]
 800b68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b690:	4906      	ldr	r1, [pc, #24]	; (800b6ac <__assert_func+0x34>)
 800b692:	462b      	mov	r3, r5
 800b694:	f000 f80e 	bl	800b6b4 <fiprintf>
 800b698:	f000 fdf8 	bl	800c28c <abort>
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <__assert_func+0x38>)
 800b69e:	461c      	mov	r4, r3
 800b6a0:	e7f3      	b.n	800b68a <__assert_func+0x12>
 800b6a2:	bf00      	nop
 800b6a4:	200000ac 	.word	0x200000ac
 800b6a8:	08010b3e 	.word	0x08010b3e
 800b6ac:	08010b4b 	.word	0x08010b4b
 800b6b0:	08010b79 	.word	0x08010b79

0800b6b4 <fiprintf>:
 800b6b4:	b40e      	push	{r1, r2, r3}
 800b6b6:	b503      	push	{r0, r1, lr}
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	ab03      	add	r3, sp, #12
 800b6bc:	4805      	ldr	r0, [pc, #20]	; (800b6d4 <fiprintf+0x20>)
 800b6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c2:	6800      	ldr	r0, [r0, #0]
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	f000 fa4d 	bl	800bb64 <_vfiprintf_r>
 800b6ca:	b002      	add	sp, #8
 800b6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6d0:	b003      	add	sp, #12
 800b6d2:	4770      	bx	lr
 800b6d4:	200000ac 	.word	0x200000ac

0800b6d8 <malloc>:
 800b6d8:	4b02      	ldr	r3, [pc, #8]	; (800b6e4 <malloc+0xc>)
 800b6da:	4601      	mov	r1, r0
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	f000 b861 	b.w	800b7a4 <_malloc_r>
 800b6e2:	bf00      	nop
 800b6e4:	200000ac 	.word	0x200000ac

0800b6e8 <memcpy>:
 800b6e8:	440a      	add	r2, r1
 800b6ea:	4291      	cmp	r1, r2
 800b6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6f0:	d100      	bne.n	800b6f4 <memcpy+0xc>
 800b6f2:	4770      	bx	lr
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6fe:	4291      	cmp	r1, r2
 800b700:	d1f9      	bne.n	800b6f6 <memcpy+0xe>
 800b702:	bd10      	pop	{r4, pc}

0800b704 <_free_r>:
 800b704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b706:	2900      	cmp	r1, #0
 800b708:	d048      	beq.n	800b79c <_free_r+0x98>
 800b70a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b70e:	9001      	str	r0, [sp, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	f1a1 0404 	sub.w	r4, r1, #4
 800b716:	bfb8      	it	lt
 800b718:	18e4      	addlt	r4, r4, r3
 800b71a:	f000 fff7 	bl	800c70c <__malloc_lock>
 800b71e:	4a20      	ldr	r2, [pc, #128]	; (800b7a0 <_free_r+0x9c>)
 800b720:	9801      	ldr	r0, [sp, #4]
 800b722:	6813      	ldr	r3, [r2, #0]
 800b724:	4615      	mov	r5, r2
 800b726:	b933      	cbnz	r3, 800b736 <_free_r+0x32>
 800b728:	6063      	str	r3, [r4, #4]
 800b72a:	6014      	str	r4, [r2, #0]
 800b72c:	b003      	add	sp, #12
 800b72e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b732:	f000 bff1 	b.w	800c718 <__malloc_unlock>
 800b736:	42a3      	cmp	r3, r4
 800b738:	d90b      	bls.n	800b752 <_free_r+0x4e>
 800b73a:	6821      	ldr	r1, [r4, #0]
 800b73c:	1862      	adds	r2, r4, r1
 800b73e:	4293      	cmp	r3, r2
 800b740:	bf04      	itt	eq
 800b742:	681a      	ldreq	r2, [r3, #0]
 800b744:	685b      	ldreq	r3, [r3, #4]
 800b746:	6063      	str	r3, [r4, #4]
 800b748:	bf04      	itt	eq
 800b74a:	1852      	addeq	r2, r2, r1
 800b74c:	6022      	streq	r2, [r4, #0]
 800b74e:	602c      	str	r4, [r5, #0]
 800b750:	e7ec      	b.n	800b72c <_free_r+0x28>
 800b752:	461a      	mov	r2, r3
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	b10b      	cbz	r3, 800b75c <_free_r+0x58>
 800b758:	42a3      	cmp	r3, r4
 800b75a:	d9fa      	bls.n	800b752 <_free_r+0x4e>
 800b75c:	6811      	ldr	r1, [r2, #0]
 800b75e:	1855      	adds	r5, r2, r1
 800b760:	42a5      	cmp	r5, r4
 800b762:	d10b      	bne.n	800b77c <_free_r+0x78>
 800b764:	6824      	ldr	r4, [r4, #0]
 800b766:	4421      	add	r1, r4
 800b768:	1854      	adds	r4, r2, r1
 800b76a:	42a3      	cmp	r3, r4
 800b76c:	6011      	str	r1, [r2, #0]
 800b76e:	d1dd      	bne.n	800b72c <_free_r+0x28>
 800b770:	681c      	ldr	r4, [r3, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	6053      	str	r3, [r2, #4]
 800b776:	4421      	add	r1, r4
 800b778:	6011      	str	r1, [r2, #0]
 800b77a:	e7d7      	b.n	800b72c <_free_r+0x28>
 800b77c:	d902      	bls.n	800b784 <_free_r+0x80>
 800b77e:	230c      	movs	r3, #12
 800b780:	6003      	str	r3, [r0, #0]
 800b782:	e7d3      	b.n	800b72c <_free_r+0x28>
 800b784:	6825      	ldr	r5, [r4, #0]
 800b786:	1961      	adds	r1, r4, r5
 800b788:	428b      	cmp	r3, r1
 800b78a:	bf04      	itt	eq
 800b78c:	6819      	ldreq	r1, [r3, #0]
 800b78e:	685b      	ldreq	r3, [r3, #4]
 800b790:	6063      	str	r3, [r4, #4]
 800b792:	bf04      	itt	eq
 800b794:	1949      	addeq	r1, r1, r5
 800b796:	6021      	streq	r1, [r4, #0]
 800b798:	6054      	str	r4, [r2, #4]
 800b79a:	e7c7      	b.n	800b72c <_free_r+0x28>
 800b79c:	b003      	add	sp, #12
 800b79e:	bd30      	pop	{r4, r5, pc}
 800b7a0:	200001ac 	.word	0x200001ac

0800b7a4 <_malloc_r>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	1ccd      	adds	r5, r1, #3
 800b7a8:	f025 0503 	bic.w	r5, r5, #3
 800b7ac:	3508      	adds	r5, #8
 800b7ae:	2d0c      	cmp	r5, #12
 800b7b0:	bf38      	it	cc
 800b7b2:	250c      	movcc	r5, #12
 800b7b4:	2d00      	cmp	r5, #0
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	db01      	blt.n	800b7be <_malloc_r+0x1a>
 800b7ba:	42a9      	cmp	r1, r5
 800b7bc:	d903      	bls.n	800b7c6 <_malloc_r+0x22>
 800b7be:	230c      	movs	r3, #12
 800b7c0:	6033      	str	r3, [r6, #0]
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c6:	f000 ffa1 	bl	800c70c <__malloc_lock>
 800b7ca:	4921      	ldr	r1, [pc, #132]	; (800b850 <_malloc_r+0xac>)
 800b7cc:	680a      	ldr	r2, [r1, #0]
 800b7ce:	4614      	mov	r4, r2
 800b7d0:	b99c      	cbnz	r4, 800b7fa <_malloc_r+0x56>
 800b7d2:	4f20      	ldr	r7, [pc, #128]	; (800b854 <_malloc_r+0xb0>)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	b923      	cbnz	r3, 800b7e2 <_malloc_r+0x3e>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f000 fc86 	bl	800c0ec <_sbrk_r>
 800b7e0:	6038      	str	r0, [r7, #0]
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f000 fc81 	bl	800c0ec <_sbrk_r>
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	d123      	bne.n	800b836 <_malloc_r+0x92>
 800b7ee:	230c      	movs	r3, #12
 800b7f0:	6033      	str	r3, [r6, #0]
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 ff90 	bl	800c718 <__malloc_unlock>
 800b7f8:	e7e3      	b.n	800b7c2 <_malloc_r+0x1e>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	1b5b      	subs	r3, r3, r5
 800b7fe:	d417      	bmi.n	800b830 <_malloc_r+0x8c>
 800b800:	2b0b      	cmp	r3, #11
 800b802:	d903      	bls.n	800b80c <_malloc_r+0x68>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	441c      	add	r4, r3
 800b808:	6025      	str	r5, [r4, #0]
 800b80a:	e004      	b.n	800b816 <_malloc_r+0x72>
 800b80c:	6863      	ldr	r3, [r4, #4]
 800b80e:	42a2      	cmp	r2, r4
 800b810:	bf0c      	ite	eq
 800b812:	600b      	streq	r3, [r1, #0]
 800b814:	6053      	strne	r3, [r2, #4]
 800b816:	4630      	mov	r0, r6
 800b818:	f000 ff7e 	bl	800c718 <__malloc_unlock>
 800b81c:	f104 000b 	add.w	r0, r4, #11
 800b820:	1d23      	adds	r3, r4, #4
 800b822:	f020 0007 	bic.w	r0, r0, #7
 800b826:	1ac2      	subs	r2, r0, r3
 800b828:	d0cc      	beq.n	800b7c4 <_malloc_r+0x20>
 800b82a:	1a1b      	subs	r3, r3, r0
 800b82c:	50a3      	str	r3, [r4, r2]
 800b82e:	e7c9      	b.n	800b7c4 <_malloc_r+0x20>
 800b830:	4622      	mov	r2, r4
 800b832:	6864      	ldr	r4, [r4, #4]
 800b834:	e7cc      	b.n	800b7d0 <_malloc_r+0x2c>
 800b836:	1cc4      	adds	r4, r0, #3
 800b838:	f024 0403 	bic.w	r4, r4, #3
 800b83c:	42a0      	cmp	r0, r4
 800b83e:	d0e3      	beq.n	800b808 <_malloc_r+0x64>
 800b840:	1a21      	subs	r1, r4, r0
 800b842:	4630      	mov	r0, r6
 800b844:	f000 fc52 	bl	800c0ec <_sbrk_r>
 800b848:	3001      	adds	r0, #1
 800b84a:	d1dd      	bne.n	800b808 <_malloc_r+0x64>
 800b84c:	e7cf      	b.n	800b7ee <_malloc_r+0x4a>
 800b84e:	bf00      	nop
 800b850:	200001ac 	.word	0x200001ac
 800b854:	200001b0 	.word	0x200001b0

0800b858 <__ssputs_r>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	688e      	ldr	r6, [r1, #8]
 800b85e:	429e      	cmp	r6, r3
 800b860:	4682      	mov	sl, r0
 800b862:	460c      	mov	r4, r1
 800b864:	4690      	mov	r8, r2
 800b866:	461f      	mov	r7, r3
 800b868:	d838      	bhi.n	800b8dc <__ssputs_r+0x84>
 800b86a:	898a      	ldrh	r2, [r1, #12]
 800b86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b870:	d032      	beq.n	800b8d8 <__ssputs_r+0x80>
 800b872:	6825      	ldr	r5, [r4, #0]
 800b874:	6909      	ldr	r1, [r1, #16]
 800b876:	eba5 0901 	sub.w	r9, r5, r1
 800b87a:	6965      	ldr	r5, [r4, #20]
 800b87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b884:	3301      	adds	r3, #1
 800b886:	444b      	add	r3, r9
 800b888:	106d      	asrs	r5, r5, #1
 800b88a:	429d      	cmp	r5, r3
 800b88c:	bf38      	it	cc
 800b88e:	461d      	movcc	r5, r3
 800b890:	0553      	lsls	r3, r2, #21
 800b892:	d531      	bpl.n	800b8f8 <__ssputs_r+0xa0>
 800b894:	4629      	mov	r1, r5
 800b896:	f7ff ff85 	bl	800b7a4 <_malloc_r>
 800b89a:	4606      	mov	r6, r0
 800b89c:	b950      	cbnz	r0, 800b8b4 <__ssputs_r+0x5c>
 800b89e:	230c      	movs	r3, #12
 800b8a0:	f8ca 3000 	str.w	r3, [sl]
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b4:	6921      	ldr	r1, [r4, #16]
 800b8b6:	464a      	mov	r2, r9
 800b8b8:	f7ff ff16 	bl	800b6e8 <memcpy>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	6126      	str	r6, [r4, #16]
 800b8ca:	6165      	str	r5, [r4, #20]
 800b8cc:	444e      	add	r6, r9
 800b8ce:	eba5 0509 	sub.w	r5, r5, r9
 800b8d2:	6026      	str	r6, [r4, #0]
 800b8d4:	60a5      	str	r5, [r4, #8]
 800b8d6:	463e      	mov	r6, r7
 800b8d8:	42be      	cmp	r6, r7
 800b8da:	d900      	bls.n	800b8de <__ssputs_r+0x86>
 800b8dc:	463e      	mov	r6, r7
 800b8de:	4632      	mov	r2, r6
 800b8e0:	6820      	ldr	r0, [r4, #0]
 800b8e2:	4641      	mov	r1, r8
 800b8e4:	f000 fef8 	bl	800c6d8 <memmove>
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	6822      	ldr	r2, [r4, #0]
 800b8ec:	1b9b      	subs	r3, r3, r6
 800b8ee:	4432      	add	r2, r6
 800b8f0:	60a3      	str	r3, [r4, #8]
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e7db      	b.n	800b8b0 <__ssputs_r+0x58>
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	f000 ff13 	bl	800c724 <_realloc_r>
 800b8fe:	4606      	mov	r6, r0
 800b900:	2800      	cmp	r0, #0
 800b902:	d1e1      	bne.n	800b8c8 <__ssputs_r+0x70>
 800b904:	6921      	ldr	r1, [r4, #16]
 800b906:	4650      	mov	r0, sl
 800b908:	f7ff fefc 	bl	800b704 <_free_r>
 800b90c:	e7c7      	b.n	800b89e <__ssputs_r+0x46>
	...

0800b910 <_svfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	4698      	mov	r8, r3
 800b916:	898b      	ldrh	r3, [r1, #12]
 800b918:	061b      	lsls	r3, r3, #24
 800b91a:	b09d      	sub	sp, #116	; 0x74
 800b91c:	4607      	mov	r7, r0
 800b91e:	460d      	mov	r5, r1
 800b920:	4614      	mov	r4, r2
 800b922:	d50e      	bpl.n	800b942 <_svfiprintf_r+0x32>
 800b924:	690b      	ldr	r3, [r1, #16]
 800b926:	b963      	cbnz	r3, 800b942 <_svfiprintf_r+0x32>
 800b928:	2140      	movs	r1, #64	; 0x40
 800b92a:	f7ff ff3b 	bl	800b7a4 <_malloc_r>
 800b92e:	6028      	str	r0, [r5, #0]
 800b930:	6128      	str	r0, [r5, #16]
 800b932:	b920      	cbnz	r0, 800b93e <_svfiprintf_r+0x2e>
 800b934:	230c      	movs	r3, #12
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	e0d1      	b.n	800bae2 <_svfiprintf_r+0x1d2>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	616b      	str	r3, [r5, #20]
 800b942:	2300      	movs	r3, #0
 800b944:	9309      	str	r3, [sp, #36]	; 0x24
 800b946:	2320      	movs	r3, #32
 800b948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b950:	2330      	movs	r3, #48	; 0x30
 800b952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bafc <_svfiprintf_r+0x1ec>
 800b956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95a:	f04f 0901 	mov.w	r9, #1
 800b95e:	4623      	mov	r3, r4
 800b960:	469a      	mov	sl, r3
 800b962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b966:	b10a      	cbz	r2, 800b96c <_svfiprintf_r+0x5c>
 800b968:	2a25      	cmp	r2, #37	; 0x25
 800b96a:	d1f9      	bne.n	800b960 <_svfiprintf_r+0x50>
 800b96c:	ebba 0b04 	subs.w	fp, sl, r4
 800b970:	d00b      	beq.n	800b98a <_svfiprintf_r+0x7a>
 800b972:	465b      	mov	r3, fp
 800b974:	4622      	mov	r2, r4
 800b976:	4629      	mov	r1, r5
 800b978:	4638      	mov	r0, r7
 800b97a:	f7ff ff6d 	bl	800b858 <__ssputs_r>
 800b97e:	3001      	adds	r0, #1
 800b980:	f000 80aa 	beq.w	800bad8 <_svfiprintf_r+0x1c8>
 800b984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b986:	445a      	add	r2, fp
 800b988:	9209      	str	r2, [sp, #36]	; 0x24
 800b98a:	f89a 3000 	ldrb.w	r3, [sl]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80a2 	beq.w	800bad8 <_svfiprintf_r+0x1c8>
 800b994:	2300      	movs	r3, #0
 800b996:	f04f 32ff 	mov.w	r2, #4294967295
 800b99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b99e:	f10a 0a01 	add.w	sl, sl, #1
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	9307      	str	r3, [sp, #28]
 800b9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9aa:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ac:	4654      	mov	r4, sl
 800b9ae:	2205      	movs	r2, #5
 800b9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b4:	4851      	ldr	r0, [pc, #324]	; (800bafc <_svfiprintf_r+0x1ec>)
 800b9b6:	f7f4 fc13 	bl	80001e0 <memchr>
 800b9ba:	9a04      	ldr	r2, [sp, #16]
 800b9bc:	b9d8      	cbnz	r0, 800b9f6 <_svfiprintf_r+0xe6>
 800b9be:	06d0      	lsls	r0, r2, #27
 800b9c0:	bf44      	itt	mi
 800b9c2:	2320      	movmi	r3, #32
 800b9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c8:	0711      	lsls	r1, r2, #28
 800b9ca:	bf44      	itt	mi
 800b9cc:	232b      	movmi	r3, #43	; 0x2b
 800b9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d8:	d015      	beq.n	800ba06 <_svfiprintf_r+0xf6>
 800b9da:	9a07      	ldr	r2, [sp, #28]
 800b9dc:	4654      	mov	r4, sl
 800b9de:	2000      	movs	r0, #0
 800b9e0:	f04f 0c0a 	mov.w	ip, #10
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ea:	3b30      	subs	r3, #48	; 0x30
 800b9ec:	2b09      	cmp	r3, #9
 800b9ee:	d94e      	bls.n	800ba8e <_svfiprintf_r+0x17e>
 800b9f0:	b1b0      	cbz	r0, 800ba20 <_svfiprintf_r+0x110>
 800b9f2:	9207      	str	r2, [sp, #28]
 800b9f4:	e014      	b.n	800ba20 <_svfiprintf_r+0x110>
 800b9f6:	eba0 0308 	sub.w	r3, r0, r8
 800b9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	46a2      	mov	sl, r4
 800ba04:	e7d2      	b.n	800b9ac <_svfiprintf_r+0x9c>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	1d19      	adds	r1, r3, #4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	9103      	str	r1, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfbb      	ittet	lt
 800ba12:	425b      	neglt	r3, r3
 800ba14:	f042 0202 	orrlt.w	r2, r2, #2
 800ba18:	9307      	strge	r3, [sp, #28]
 800ba1a:	9307      	strlt	r3, [sp, #28]
 800ba1c:	bfb8      	it	lt
 800ba1e:	9204      	strlt	r2, [sp, #16]
 800ba20:	7823      	ldrb	r3, [r4, #0]
 800ba22:	2b2e      	cmp	r3, #46	; 0x2e
 800ba24:	d10c      	bne.n	800ba40 <_svfiprintf_r+0x130>
 800ba26:	7863      	ldrb	r3, [r4, #1]
 800ba28:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2a:	d135      	bne.n	800ba98 <_svfiprintf_r+0x188>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	1d1a      	adds	r2, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	9203      	str	r2, [sp, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfb8      	it	lt
 800ba38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba3c:	3402      	adds	r4, #2
 800ba3e:	9305      	str	r3, [sp, #20]
 800ba40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb0c <_svfiprintf_r+0x1fc>
 800ba44:	7821      	ldrb	r1, [r4, #0]
 800ba46:	2203      	movs	r2, #3
 800ba48:	4650      	mov	r0, sl
 800ba4a:	f7f4 fbc9 	bl	80001e0 <memchr>
 800ba4e:	b140      	cbz	r0, 800ba62 <_svfiprintf_r+0x152>
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	eba0 000a 	sub.w	r0, r0, sl
 800ba56:	fa03 f000 	lsl.w	r0, r3, r0
 800ba5a:	9b04      	ldr	r3, [sp, #16]
 800ba5c:	4303      	orrs	r3, r0
 800ba5e:	3401      	adds	r4, #1
 800ba60:	9304      	str	r3, [sp, #16]
 800ba62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba66:	4826      	ldr	r0, [pc, #152]	; (800bb00 <_svfiprintf_r+0x1f0>)
 800ba68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba6c:	2206      	movs	r2, #6
 800ba6e:	f7f4 fbb7 	bl	80001e0 <memchr>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d038      	beq.n	800bae8 <_svfiprintf_r+0x1d8>
 800ba76:	4b23      	ldr	r3, [pc, #140]	; (800bb04 <_svfiprintf_r+0x1f4>)
 800ba78:	bb1b      	cbnz	r3, 800bac2 <_svfiprintf_r+0x1b2>
 800ba7a:	9b03      	ldr	r3, [sp, #12]
 800ba7c:	3307      	adds	r3, #7
 800ba7e:	f023 0307 	bic.w	r3, r3, #7
 800ba82:	3308      	adds	r3, #8
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba88:	4433      	add	r3, r6
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8c:	e767      	b.n	800b95e <_svfiprintf_r+0x4e>
 800ba8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba92:	460c      	mov	r4, r1
 800ba94:	2001      	movs	r0, #1
 800ba96:	e7a5      	b.n	800b9e4 <_svfiprintf_r+0xd4>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	3401      	adds	r4, #1
 800ba9c:	9305      	str	r3, [sp, #20]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	f04f 0c0a 	mov.w	ip, #10
 800baa4:	4620      	mov	r0, r4
 800baa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baaa:	3a30      	subs	r2, #48	; 0x30
 800baac:	2a09      	cmp	r2, #9
 800baae:	d903      	bls.n	800bab8 <_svfiprintf_r+0x1a8>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0c5      	beq.n	800ba40 <_svfiprintf_r+0x130>
 800bab4:	9105      	str	r1, [sp, #20]
 800bab6:	e7c3      	b.n	800ba40 <_svfiprintf_r+0x130>
 800bab8:	fb0c 2101 	mla	r1, ip, r1, r2
 800babc:	4604      	mov	r4, r0
 800babe:	2301      	movs	r3, #1
 800bac0:	e7f0      	b.n	800baa4 <_svfiprintf_r+0x194>
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	462a      	mov	r2, r5
 800bac8:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <_svfiprintf_r+0x1f8>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	4638      	mov	r0, r7
 800bace:	f3af 8000 	nop.w
 800bad2:	1c42      	adds	r2, r0, #1
 800bad4:	4606      	mov	r6, r0
 800bad6:	d1d6      	bne.n	800ba86 <_svfiprintf_r+0x176>
 800bad8:	89ab      	ldrh	r3, [r5, #12]
 800bada:	065b      	lsls	r3, r3, #25
 800badc:	f53f af2c 	bmi.w	800b938 <_svfiprintf_r+0x28>
 800bae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae2:	b01d      	add	sp, #116	; 0x74
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	ab03      	add	r3, sp, #12
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	462a      	mov	r2, r5
 800baee:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <_svfiprintf_r+0x1f8>)
 800baf0:	a904      	add	r1, sp, #16
 800baf2:	4638      	mov	r0, r7
 800baf4:	f000 f9d4 	bl	800bea0 <_printf_i>
 800baf8:	e7eb      	b.n	800bad2 <_svfiprintf_r+0x1c2>
 800bafa:	bf00      	nop
 800bafc:	08010b7a 	.word	0x08010b7a
 800bb00:	08010b84 	.word	0x08010b84
 800bb04:	00000000 	.word	0x00000000
 800bb08:	0800b859 	.word	0x0800b859
 800bb0c:	08010b80 	.word	0x08010b80

0800bb10 <__sfputc_r>:
 800bb10:	6893      	ldr	r3, [r2, #8]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	b410      	push	{r4}
 800bb18:	6093      	str	r3, [r2, #8]
 800bb1a:	da08      	bge.n	800bb2e <__sfputc_r+0x1e>
 800bb1c:	6994      	ldr	r4, [r2, #24]
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	db01      	blt.n	800bb26 <__sfputc_r+0x16>
 800bb22:	290a      	cmp	r1, #10
 800bb24:	d103      	bne.n	800bb2e <__sfputc_r+0x1e>
 800bb26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb2a:	f000 baef 	b.w	800c10c <__swbuf_r>
 800bb2e:	6813      	ldr	r3, [r2, #0]
 800bb30:	1c58      	adds	r0, r3, #1
 800bb32:	6010      	str	r0, [r2, #0]
 800bb34:	7019      	strb	r1, [r3, #0]
 800bb36:	4608      	mov	r0, r1
 800bb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <__sfputs_r>:
 800bb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb40:	4606      	mov	r6, r0
 800bb42:	460f      	mov	r7, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	18d5      	adds	r5, r2, r3
 800bb48:	42ac      	cmp	r4, r5
 800bb4a:	d101      	bne.n	800bb50 <__sfputs_r+0x12>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e007      	b.n	800bb60 <__sfputs_r+0x22>
 800bb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb54:	463a      	mov	r2, r7
 800bb56:	4630      	mov	r0, r6
 800bb58:	f7ff ffda 	bl	800bb10 <__sfputc_r>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d1f3      	bne.n	800bb48 <__sfputs_r+0xa>
 800bb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb64 <_vfiprintf_r>:
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	460d      	mov	r5, r1
 800bb6a:	b09d      	sub	sp, #116	; 0x74
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	4698      	mov	r8, r3
 800bb70:	4606      	mov	r6, r0
 800bb72:	b118      	cbz	r0, 800bb7c <_vfiprintf_r+0x18>
 800bb74:	6983      	ldr	r3, [r0, #24]
 800bb76:	b90b      	cbnz	r3, 800bb7c <_vfiprintf_r+0x18>
 800bb78:	f000 fcaa 	bl	800c4d0 <__sinit>
 800bb7c:	4b89      	ldr	r3, [pc, #548]	; (800bda4 <_vfiprintf_r+0x240>)
 800bb7e:	429d      	cmp	r5, r3
 800bb80:	d11b      	bne.n	800bbba <_vfiprintf_r+0x56>
 800bb82:	6875      	ldr	r5, [r6, #4]
 800bb84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb86:	07d9      	lsls	r1, r3, #31
 800bb88:	d405      	bmi.n	800bb96 <_vfiprintf_r+0x32>
 800bb8a:	89ab      	ldrh	r3, [r5, #12]
 800bb8c:	059a      	lsls	r2, r3, #22
 800bb8e:	d402      	bmi.n	800bb96 <_vfiprintf_r+0x32>
 800bb90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb92:	f000 fd3b 	bl	800c60c <__retarget_lock_acquire_recursive>
 800bb96:	89ab      	ldrh	r3, [r5, #12]
 800bb98:	071b      	lsls	r3, r3, #28
 800bb9a:	d501      	bpl.n	800bba0 <_vfiprintf_r+0x3c>
 800bb9c:	692b      	ldr	r3, [r5, #16]
 800bb9e:	b9eb      	cbnz	r3, 800bbdc <_vfiprintf_r+0x78>
 800bba0:	4629      	mov	r1, r5
 800bba2:	4630      	mov	r0, r6
 800bba4:	f000 fb04 	bl	800c1b0 <__swsetup_r>
 800bba8:	b1c0      	cbz	r0, 800bbdc <_vfiprintf_r+0x78>
 800bbaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbac:	07dc      	lsls	r4, r3, #31
 800bbae:	d50e      	bpl.n	800bbce <_vfiprintf_r+0x6a>
 800bbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb4:	b01d      	add	sp, #116	; 0x74
 800bbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbba:	4b7b      	ldr	r3, [pc, #492]	; (800bda8 <_vfiprintf_r+0x244>)
 800bbbc:	429d      	cmp	r5, r3
 800bbbe:	d101      	bne.n	800bbc4 <_vfiprintf_r+0x60>
 800bbc0:	68b5      	ldr	r5, [r6, #8]
 800bbc2:	e7df      	b.n	800bb84 <_vfiprintf_r+0x20>
 800bbc4:	4b79      	ldr	r3, [pc, #484]	; (800bdac <_vfiprintf_r+0x248>)
 800bbc6:	429d      	cmp	r5, r3
 800bbc8:	bf08      	it	eq
 800bbca:	68f5      	ldreq	r5, [r6, #12]
 800bbcc:	e7da      	b.n	800bb84 <_vfiprintf_r+0x20>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	0598      	lsls	r0, r3, #22
 800bbd2:	d4ed      	bmi.n	800bbb0 <_vfiprintf_r+0x4c>
 800bbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbd6:	f000 fd1a 	bl	800c60e <__retarget_lock_release_recursive>
 800bbda:	e7e9      	b.n	800bbb0 <_vfiprintf_r+0x4c>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbea:	2330      	movs	r3, #48	; 0x30
 800bbec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdb0 <_vfiprintf_r+0x24c>
 800bbf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbf4:	f04f 0901 	mov.w	r9, #1
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	469a      	mov	sl, r3
 800bbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc00:	b10a      	cbz	r2, 800bc06 <_vfiprintf_r+0xa2>
 800bc02:	2a25      	cmp	r2, #37	; 0x25
 800bc04:	d1f9      	bne.n	800bbfa <_vfiprintf_r+0x96>
 800bc06:	ebba 0b04 	subs.w	fp, sl, r4
 800bc0a:	d00b      	beq.n	800bc24 <_vfiprintf_r+0xc0>
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	4622      	mov	r2, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ff93 	bl	800bb3e <__sfputs_r>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f000 80aa 	beq.w	800bd72 <_vfiprintf_r+0x20e>
 800bc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc20:	445a      	add	r2, fp
 800bc22:	9209      	str	r2, [sp, #36]	; 0x24
 800bc24:	f89a 3000 	ldrb.w	r3, [sl]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 80a2 	beq.w	800bd72 <_vfiprintf_r+0x20e>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc38:	f10a 0a01 	add.w	sl, sl, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	9307      	str	r3, [sp, #28]
 800bc40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc44:	931a      	str	r3, [sp, #104]	; 0x68
 800bc46:	4654      	mov	r4, sl
 800bc48:	2205      	movs	r2, #5
 800bc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4e:	4858      	ldr	r0, [pc, #352]	; (800bdb0 <_vfiprintf_r+0x24c>)
 800bc50:	f7f4 fac6 	bl	80001e0 <memchr>
 800bc54:	9a04      	ldr	r2, [sp, #16]
 800bc56:	b9d8      	cbnz	r0, 800bc90 <_vfiprintf_r+0x12c>
 800bc58:	06d1      	lsls	r1, r2, #27
 800bc5a:	bf44      	itt	mi
 800bc5c:	2320      	movmi	r3, #32
 800bc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc62:	0713      	lsls	r3, r2, #28
 800bc64:	bf44      	itt	mi
 800bc66:	232b      	movmi	r3, #43	; 0x2b
 800bc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc70:	2b2a      	cmp	r3, #42	; 0x2a
 800bc72:	d015      	beq.n	800bca0 <_vfiprintf_r+0x13c>
 800bc74:	9a07      	ldr	r2, [sp, #28]
 800bc76:	4654      	mov	r4, sl
 800bc78:	2000      	movs	r0, #0
 800bc7a:	f04f 0c0a 	mov.w	ip, #10
 800bc7e:	4621      	mov	r1, r4
 800bc80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc84:	3b30      	subs	r3, #48	; 0x30
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d94e      	bls.n	800bd28 <_vfiprintf_r+0x1c4>
 800bc8a:	b1b0      	cbz	r0, 800bcba <_vfiprintf_r+0x156>
 800bc8c:	9207      	str	r2, [sp, #28]
 800bc8e:	e014      	b.n	800bcba <_vfiprintf_r+0x156>
 800bc90:	eba0 0308 	sub.w	r3, r0, r8
 800bc94:	fa09 f303 	lsl.w	r3, r9, r3
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	46a2      	mov	sl, r4
 800bc9e:	e7d2      	b.n	800bc46 <_vfiprintf_r+0xe2>
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	1d19      	adds	r1, r3, #4
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	9103      	str	r1, [sp, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfbb      	ittet	lt
 800bcac:	425b      	neglt	r3, r3
 800bcae:	f042 0202 	orrlt.w	r2, r2, #2
 800bcb2:	9307      	strge	r3, [sp, #28]
 800bcb4:	9307      	strlt	r3, [sp, #28]
 800bcb6:	bfb8      	it	lt
 800bcb8:	9204      	strlt	r2, [sp, #16]
 800bcba:	7823      	ldrb	r3, [r4, #0]
 800bcbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcbe:	d10c      	bne.n	800bcda <_vfiprintf_r+0x176>
 800bcc0:	7863      	ldrb	r3, [r4, #1]
 800bcc2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcc4:	d135      	bne.n	800bd32 <_vfiprintf_r+0x1ce>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	1d1a      	adds	r2, r3, #4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	9203      	str	r2, [sp, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bfb8      	it	lt
 800bcd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcd6:	3402      	adds	r4, #2
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdc0 <_vfiprintf_r+0x25c>
 800bcde:	7821      	ldrb	r1, [r4, #0]
 800bce0:	2203      	movs	r2, #3
 800bce2:	4650      	mov	r0, sl
 800bce4:	f7f4 fa7c 	bl	80001e0 <memchr>
 800bce8:	b140      	cbz	r0, 800bcfc <_vfiprintf_r+0x198>
 800bcea:	2340      	movs	r3, #64	; 0x40
 800bcec:	eba0 000a 	sub.w	r0, r0, sl
 800bcf0:	fa03 f000 	lsl.w	r0, r3, r0
 800bcf4:	9b04      	ldr	r3, [sp, #16]
 800bcf6:	4303      	orrs	r3, r0
 800bcf8:	3401      	adds	r4, #1
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd00:	482c      	ldr	r0, [pc, #176]	; (800bdb4 <_vfiprintf_r+0x250>)
 800bd02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd06:	2206      	movs	r2, #6
 800bd08:	f7f4 fa6a 	bl	80001e0 <memchr>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d03f      	beq.n	800bd90 <_vfiprintf_r+0x22c>
 800bd10:	4b29      	ldr	r3, [pc, #164]	; (800bdb8 <_vfiprintf_r+0x254>)
 800bd12:	bb1b      	cbnz	r3, 800bd5c <_vfiprintf_r+0x1f8>
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	3307      	adds	r3, #7
 800bd18:	f023 0307 	bic.w	r3, r3, #7
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd22:	443b      	add	r3, r7
 800bd24:	9309      	str	r3, [sp, #36]	; 0x24
 800bd26:	e767      	b.n	800bbf8 <_vfiprintf_r+0x94>
 800bd28:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	2001      	movs	r0, #1
 800bd30:	e7a5      	b.n	800bc7e <_vfiprintf_r+0x11a>
 800bd32:	2300      	movs	r3, #0
 800bd34:	3401      	adds	r4, #1
 800bd36:	9305      	str	r3, [sp, #20]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f04f 0c0a 	mov.w	ip, #10
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd44:	3a30      	subs	r2, #48	; 0x30
 800bd46:	2a09      	cmp	r2, #9
 800bd48:	d903      	bls.n	800bd52 <_vfiprintf_r+0x1ee>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0c5      	beq.n	800bcda <_vfiprintf_r+0x176>
 800bd4e:	9105      	str	r1, [sp, #20]
 800bd50:	e7c3      	b.n	800bcda <_vfiprintf_r+0x176>
 800bd52:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd56:	4604      	mov	r4, r0
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e7f0      	b.n	800bd3e <_vfiprintf_r+0x1da>
 800bd5c:	ab03      	add	r3, sp, #12
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	462a      	mov	r2, r5
 800bd62:	4b16      	ldr	r3, [pc, #88]	; (800bdbc <_vfiprintf_r+0x258>)
 800bd64:	a904      	add	r1, sp, #16
 800bd66:	4630      	mov	r0, r6
 800bd68:	f3af 8000 	nop.w
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	1c78      	adds	r0, r7, #1
 800bd70:	d1d6      	bne.n	800bd20 <_vfiprintf_r+0x1bc>
 800bd72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd74:	07d9      	lsls	r1, r3, #31
 800bd76:	d405      	bmi.n	800bd84 <_vfiprintf_r+0x220>
 800bd78:	89ab      	ldrh	r3, [r5, #12]
 800bd7a:	059a      	lsls	r2, r3, #22
 800bd7c:	d402      	bmi.n	800bd84 <_vfiprintf_r+0x220>
 800bd7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd80:	f000 fc45 	bl	800c60e <__retarget_lock_release_recursive>
 800bd84:	89ab      	ldrh	r3, [r5, #12]
 800bd86:	065b      	lsls	r3, r3, #25
 800bd88:	f53f af12 	bmi.w	800bbb0 <_vfiprintf_r+0x4c>
 800bd8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd8e:	e711      	b.n	800bbb4 <_vfiprintf_r+0x50>
 800bd90:	ab03      	add	r3, sp, #12
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	462a      	mov	r2, r5
 800bd96:	4b09      	ldr	r3, [pc, #36]	; (800bdbc <_vfiprintf_r+0x258>)
 800bd98:	a904      	add	r1, sp, #16
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f000 f880 	bl	800bea0 <_printf_i>
 800bda0:	e7e4      	b.n	800bd6c <_vfiprintf_r+0x208>
 800bda2:	bf00      	nop
 800bda4:	08010bd0 	.word	0x08010bd0
 800bda8:	08010bf0 	.word	0x08010bf0
 800bdac:	08010bb0 	.word	0x08010bb0
 800bdb0:	08010b7a 	.word	0x08010b7a
 800bdb4:	08010b84 	.word	0x08010b84
 800bdb8:	00000000 	.word	0x00000000
 800bdbc:	0800bb3f 	.word	0x0800bb3f
 800bdc0:	08010b80 	.word	0x08010b80

0800bdc4 <_printf_common>:
 800bdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc8:	4616      	mov	r6, r2
 800bdca:	4699      	mov	r9, r3
 800bdcc:	688a      	ldr	r2, [r1, #8]
 800bdce:	690b      	ldr	r3, [r1, #16]
 800bdd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	bfb8      	it	lt
 800bdd8:	4613      	movlt	r3, r2
 800bdda:	6033      	str	r3, [r6, #0]
 800bddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bde0:	4607      	mov	r7, r0
 800bde2:	460c      	mov	r4, r1
 800bde4:	b10a      	cbz	r2, 800bdea <_printf_common+0x26>
 800bde6:	3301      	adds	r3, #1
 800bde8:	6033      	str	r3, [r6, #0]
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	0699      	lsls	r1, r3, #26
 800bdee:	bf42      	ittt	mi
 800bdf0:	6833      	ldrmi	r3, [r6, #0]
 800bdf2:	3302      	addmi	r3, #2
 800bdf4:	6033      	strmi	r3, [r6, #0]
 800bdf6:	6825      	ldr	r5, [r4, #0]
 800bdf8:	f015 0506 	ands.w	r5, r5, #6
 800bdfc:	d106      	bne.n	800be0c <_printf_common+0x48>
 800bdfe:	f104 0a19 	add.w	sl, r4, #25
 800be02:	68e3      	ldr	r3, [r4, #12]
 800be04:	6832      	ldr	r2, [r6, #0]
 800be06:	1a9b      	subs	r3, r3, r2
 800be08:	42ab      	cmp	r3, r5
 800be0a:	dc26      	bgt.n	800be5a <_printf_common+0x96>
 800be0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be10:	1e13      	subs	r3, r2, #0
 800be12:	6822      	ldr	r2, [r4, #0]
 800be14:	bf18      	it	ne
 800be16:	2301      	movne	r3, #1
 800be18:	0692      	lsls	r2, r2, #26
 800be1a:	d42b      	bmi.n	800be74 <_printf_common+0xb0>
 800be1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be20:	4649      	mov	r1, r9
 800be22:	4638      	mov	r0, r7
 800be24:	47c0      	blx	r8
 800be26:	3001      	adds	r0, #1
 800be28:	d01e      	beq.n	800be68 <_printf_common+0xa4>
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	68e5      	ldr	r5, [r4, #12]
 800be2e:	6832      	ldr	r2, [r6, #0]
 800be30:	f003 0306 	and.w	r3, r3, #6
 800be34:	2b04      	cmp	r3, #4
 800be36:	bf08      	it	eq
 800be38:	1aad      	subeq	r5, r5, r2
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	6922      	ldr	r2, [r4, #16]
 800be3e:	bf0c      	ite	eq
 800be40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be44:	2500      	movne	r5, #0
 800be46:	4293      	cmp	r3, r2
 800be48:	bfc4      	itt	gt
 800be4a:	1a9b      	subgt	r3, r3, r2
 800be4c:	18ed      	addgt	r5, r5, r3
 800be4e:	2600      	movs	r6, #0
 800be50:	341a      	adds	r4, #26
 800be52:	42b5      	cmp	r5, r6
 800be54:	d11a      	bne.n	800be8c <_printf_common+0xc8>
 800be56:	2000      	movs	r0, #0
 800be58:	e008      	b.n	800be6c <_printf_common+0xa8>
 800be5a:	2301      	movs	r3, #1
 800be5c:	4652      	mov	r2, sl
 800be5e:	4649      	mov	r1, r9
 800be60:	4638      	mov	r0, r7
 800be62:	47c0      	blx	r8
 800be64:	3001      	adds	r0, #1
 800be66:	d103      	bne.n	800be70 <_printf_common+0xac>
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be70:	3501      	adds	r5, #1
 800be72:	e7c6      	b.n	800be02 <_printf_common+0x3e>
 800be74:	18e1      	adds	r1, r4, r3
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	2030      	movs	r0, #48	; 0x30
 800be7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be7e:	4422      	add	r2, r4
 800be80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be88:	3302      	adds	r3, #2
 800be8a:	e7c7      	b.n	800be1c <_printf_common+0x58>
 800be8c:	2301      	movs	r3, #1
 800be8e:	4622      	mov	r2, r4
 800be90:	4649      	mov	r1, r9
 800be92:	4638      	mov	r0, r7
 800be94:	47c0      	blx	r8
 800be96:	3001      	adds	r0, #1
 800be98:	d0e6      	beq.n	800be68 <_printf_common+0xa4>
 800be9a:	3601      	adds	r6, #1
 800be9c:	e7d9      	b.n	800be52 <_printf_common+0x8e>
	...

0800bea0 <_printf_i>:
 800bea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bea4:	460c      	mov	r4, r1
 800bea6:	4691      	mov	r9, r2
 800bea8:	7e27      	ldrb	r7, [r4, #24]
 800beaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800beac:	2f78      	cmp	r7, #120	; 0x78
 800beae:	4680      	mov	r8, r0
 800beb0:	469a      	mov	sl, r3
 800beb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beb6:	d807      	bhi.n	800bec8 <_printf_i+0x28>
 800beb8:	2f62      	cmp	r7, #98	; 0x62
 800beba:	d80a      	bhi.n	800bed2 <_printf_i+0x32>
 800bebc:	2f00      	cmp	r7, #0
 800bebe:	f000 80d8 	beq.w	800c072 <_printf_i+0x1d2>
 800bec2:	2f58      	cmp	r7, #88	; 0x58
 800bec4:	f000 80a3 	beq.w	800c00e <_printf_i+0x16e>
 800bec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800becc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bed0:	e03a      	b.n	800bf48 <_printf_i+0xa8>
 800bed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bed6:	2b15      	cmp	r3, #21
 800bed8:	d8f6      	bhi.n	800bec8 <_printf_i+0x28>
 800beda:	a001      	add	r0, pc, #4	; (adr r0, 800bee0 <_printf_i+0x40>)
 800bedc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bee0:	0800bf39 	.word	0x0800bf39
 800bee4:	0800bf4d 	.word	0x0800bf4d
 800bee8:	0800bec9 	.word	0x0800bec9
 800beec:	0800bec9 	.word	0x0800bec9
 800bef0:	0800bec9 	.word	0x0800bec9
 800bef4:	0800bec9 	.word	0x0800bec9
 800bef8:	0800bf4d 	.word	0x0800bf4d
 800befc:	0800bec9 	.word	0x0800bec9
 800bf00:	0800bec9 	.word	0x0800bec9
 800bf04:	0800bec9 	.word	0x0800bec9
 800bf08:	0800bec9 	.word	0x0800bec9
 800bf0c:	0800c059 	.word	0x0800c059
 800bf10:	0800bf7d 	.word	0x0800bf7d
 800bf14:	0800c03b 	.word	0x0800c03b
 800bf18:	0800bec9 	.word	0x0800bec9
 800bf1c:	0800bec9 	.word	0x0800bec9
 800bf20:	0800c07b 	.word	0x0800c07b
 800bf24:	0800bec9 	.word	0x0800bec9
 800bf28:	0800bf7d 	.word	0x0800bf7d
 800bf2c:	0800bec9 	.word	0x0800bec9
 800bf30:	0800bec9 	.word	0x0800bec9
 800bf34:	0800c043 	.word	0x0800c043
 800bf38:	680b      	ldr	r3, [r1, #0]
 800bf3a:	1d1a      	adds	r2, r3, #4
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	600a      	str	r2, [r1, #0]
 800bf40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e0a3      	b.n	800c094 <_printf_i+0x1f4>
 800bf4c:	6825      	ldr	r5, [r4, #0]
 800bf4e:	6808      	ldr	r0, [r1, #0]
 800bf50:	062e      	lsls	r6, r5, #24
 800bf52:	f100 0304 	add.w	r3, r0, #4
 800bf56:	d50a      	bpl.n	800bf6e <_printf_i+0xce>
 800bf58:	6805      	ldr	r5, [r0, #0]
 800bf5a:	600b      	str	r3, [r1, #0]
 800bf5c:	2d00      	cmp	r5, #0
 800bf5e:	da03      	bge.n	800bf68 <_printf_i+0xc8>
 800bf60:	232d      	movs	r3, #45	; 0x2d
 800bf62:	426d      	negs	r5, r5
 800bf64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf68:	485e      	ldr	r0, [pc, #376]	; (800c0e4 <_printf_i+0x244>)
 800bf6a:	230a      	movs	r3, #10
 800bf6c:	e019      	b.n	800bfa2 <_printf_i+0x102>
 800bf6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf72:	6805      	ldr	r5, [r0, #0]
 800bf74:	600b      	str	r3, [r1, #0]
 800bf76:	bf18      	it	ne
 800bf78:	b22d      	sxthne	r5, r5
 800bf7a:	e7ef      	b.n	800bf5c <_printf_i+0xbc>
 800bf7c:	680b      	ldr	r3, [r1, #0]
 800bf7e:	6825      	ldr	r5, [r4, #0]
 800bf80:	1d18      	adds	r0, r3, #4
 800bf82:	6008      	str	r0, [r1, #0]
 800bf84:	0628      	lsls	r0, r5, #24
 800bf86:	d501      	bpl.n	800bf8c <_printf_i+0xec>
 800bf88:	681d      	ldr	r5, [r3, #0]
 800bf8a:	e002      	b.n	800bf92 <_printf_i+0xf2>
 800bf8c:	0669      	lsls	r1, r5, #25
 800bf8e:	d5fb      	bpl.n	800bf88 <_printf_i+0xe8>
 800bf90:	881d      	ldrh	r5, [r3, #0]
 800bf92:	4854      	ldr	r0, [pc, #336]	; (800c0e4 <_printf_i+0x244>)
 800bf94:	2f6f      	cmp	r7, #111	; 0x6f
 800bf96:	bf0c      	ite	eq
 800bf98:	2308      	moveq	r3, #8
 800bf9a:	230a      	movne	r3, #10
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfa2:	6866      	ldr	r6, [r4, #4]
 800bfa4:	60a6      	str	r6, [r4, #8]
 800bfa6:	2e00      	cmp	r6, #0
 800bfa8:	bfa2      	ittt	ge
 800bfaa:	6821      	ldrge	r1, [r4, #0]
 800bfac:	f021 0104 	bicge.w	r1, r1, #4
 800bfb0:	6021      	strge	r1, [r4, #0]
 800bfb2:	b90d      	cbnz	r5, 800bfb8 <_printf_i+0x118>
 800bfb4:	2e00      	cmp	r6, #0
 800bfb6:	d04d      	beq.n	800c054 <_printf_i+0x1b4>
 800bfb8:	4616      	mov	r6, r2
 800bfba:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfbe:	fb03 5711 	mls	r7, r3, r1, r5
 800bfc2:	5dc7      	ldrb	r7, [r0, r7]
 800bfc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfc8:	462f      	mov	r7, r5
 800bfca:	42bb      	cmp	r3, r7
 800bfcc:	460d      	mov	r5, r1
 800bfce:	d9f4      	bls.n	800bfba <_printf_i+0x11a>
 800bfd0:	2b08      	cmp	r3, #8
 800bfd2:	d10b      	bne.n	800bfec <_printf_i+0x14c>
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	07df      	lsls	r7, r3, #31
 800bfd8:	d508      	bpl.n	800bfec <_printf_i+0x14c>
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	6861      	ldr	r1, [r4, #4]
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	bfde      	ittt	le
 800bfe2:	2330      	movle	r3, #48	; 0x30
 800bfe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfec:	1b92      	subs	r2, r2, r6
 800bfee:	6122      	str	r2, [r4, #16]
 800bff0:	f8cd a000 	str.w	sl, [sp]
 800bff4:	464b      	mov	r3, r9
 800bff6:	aa03      	add	r2, sp, #12
 800bff8:	4621      	mov	r1, r4
 800bffa:	4640      	mov	r0, r8
 800bffc:	f7ff fee2 	bl	800bdc4 <_printf_common>
 800c000:	3001      	adds	r0, #1
 800c002:	d14c      	bne.n	800c09e <_printf_i+0x1fe>
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	b004      	add	sp, #16
 800c00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00e:	4835      	ldr	r0, [pc, #212]	; (800c0e4 <_printf_i+0x244>)
 800c010:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	680e      	ldr	r6, [r1, #0]
 800c018:	061f      	lsls	r7, r3, #24
 800c01a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c01e:	600e      	str	r6, [r1, #0]
 800c020:	d514      	bpl.n	800c04c <_printf_i+0x1ac>
 800c022:	07d9      	lsls	r1, r3, #31
 800c024:	bf44      	itt	mi
 800c026:	f043 0320 	orrmi.w	r3, r3, #32
 800c02a:	6023      	strmi	r3, [r4, #0]
 800c02c:	b91d      	cbnz	r5, 800c036 <_printf_i+0x196>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	f023 0320 	bic.w	r3, r3, #32
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	2310      	movs	r3, #16
 800c038:	e7b0      	b.n	800bf9c <_printf_i+0xfc>
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	f043 0320 	orr.w	r3, r3, #32
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	2378      	movs	r3, #120	; 0x78
 800c044:	4828      	ldr	r0, [pc, #160]	; (800c0e8 <_printf_i+0x248>)
 800c046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c04a:	e7e3      	b.n	800c014 <_printf_i+0x174>
 800c04c:	065e      	lsls	r6, r3, #25
 800c04e:	bf48      	it	mi
 800c050:	b2ad      	uxthmi	r5, r5
 800c052:	e7e6      	b.n	800c022 <_printf_i+0x182>
 800c054:	4616      	mov	r6, r2
 800c056:	e7bb      	b.n	800bfd0 <_printf_i+0x130>
 800c058:	680b      	ldr	r3, [r1, #0]
 800c05a:	6826      	ldr	r6, [r4, #0]
 800c05c:	6960      	ldr	r0, [r4, #20]
 800c05e:	1d1d      	adds	r5, r3, #4
 800c060:	600d      	str	r5, [r1, #0]
 800c062:	0635      	lsls	r5, r6, #24
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	d501      	bpl.n	800c06c <_printf_i+0x1cc>
 800c068:	6018      	str	r0, [r3, #0]
 800c06a:	e002      	b.n	800c072 <_printf_i+0x1d2>
 800c06c:	0671      	lsls	r1, r6, #25
 800c06e:	d5fb      	bpl.n	800c068 <_printf_i+0x1c8>
 800c070:	8018      	strh	r0, [r3, #0]
 800c072:	2300      	movs	r3, #0
 800c074:	6123      	str	r3, [r4, #16]
 800c076:	4616      	mov	r6, r2
 800c078:	e7ba      	b.n	800bff0 <_printf_i+0x150>
 800c07a:	680b      	ldr	r3, [r1, #0]
 800c07c:	1d1a      	adds	r2, r3, #4
 800c07e:	600a      	str	r2, [r1, #0]
 800c080:	681e      	ldr	r6, [r3, #0]
 800c082:	6862      	ldr	r2, [r4, #4]
 800c084:	2100      	movs	r1, #0
 800c086:	4630      	mov	r0, r6
 800c088:	f7f4 f8aa 	bl	80001e0 <memchr>
 800c08c:	b108      	cbz	r0, 800c092 <_printf_i+0x1f2>
 800c08e:	1b80      	subs	r0, r0, r6
 800c090:	6060      	str	r0, [r4, #4]
 800c092:	6863      	ldr	r3, [r4, #4]
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	2300      	movs	r3, #0
 800c098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c09c:	e7a8      	b.n	800bff0 <_printf_i+0x150>
 800c09e:	6923      	ldr	r3, [r4, #16]
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	4640      	mov	r0, r8
 800c0a6:	47d0      	blx	sl
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d0ab      	beq.n	800c004 <_printf_i+0x164>
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	079b      	lsls	r3, r3, #30
 800c0b0:	d413      	bmi.n	800c0da <_printf_i+0x23a>
 800c0b2:	68e0      	ldr	r0, [r4, #12]
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	4298      	cmp	r0, r3
 800c0b8:	bfb8      	it	lt
 800c0ba:	4618      	movlt	r0, r3
 800c0bc:	e7a4      	b.n	800c008 <_printf_i+0x168>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	47d0      	blx	sl
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d09b      	beq.n	800c004 <_printf_i+0x164>
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	68e3      	ldr	r3, [r4, #12]
 800c0d0:	9903      	ldr	r1, [sp, #12]
 800c0d2:	1a5b      	subs	r3, r3, r1
 800c0d4:	42ab      	cmp	r3, r5
 800c0d6:	dcf2      	bgt.n	800c0be <_printf_i+0x21e>
 800c0d8:	e7eb      	b.n	800c0b2 <_printf_i+0x212>
 800c0da:	2500      	movs	r5, #0
 800c0dc:	f104 0619 	add.w	r6, r4, #25
 800c0e0:	e7f5      	b.n	800c0ce <_printf_i+0x22e>
 800c0e2:	bf00      	nop
 800c0e4:	08010b8b 	.word	0x08010b8b
 800c0e8:	08010b9c 	.word	0x08010b9c

0800c0ec <_sbrk_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d06      	ldr	r5, [pc, #24]	; (800c108 <_sbrk_r+0x1c>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	f7fa f9a8 	bl	800644c <_sbrk>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_sbrk_r+0x1a>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_sbrk_r+0x1a>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20002ba4 	.word	0x20002ba4

0800c10c <__swbuf_r>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	460e      	mov	r6, r1
 800c110:	4614      	mov	r4, r2
 800c112:	4605      	mov	r5, r0
 800c114:	b118      	cbz	r0, 800c11e <__swbuf_r+0x12>
 800c116:	6983      	ldr	r3, [r0, #24]
 800c118:	b90b      	cbnz	r3, 800c11e <__swbuf_r+0x12>
 800c11a:	f000 f9d9 	bl	800c4d0 <__sinit>
 800c11e:	4b21      	ldr	r3, [pc, #132]	; (800c1a4 <__swbuf_r+0x98>)
 800c120:	429c      	cmp	r4, r3
 800c122:	d12b      	bne.n	800c17c <__swbuf_r+0x70>
 800c124:	686c      	ldr	r4, [r5, #4]
 800c126:	69a3      	ldr	r3, [r4, #24]
 800c128:	60a3      	str	r3, [r4, #8]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	071a      	lsls	r2, r3, #28
 800c12e:	d52f      	bpl.n	800c190 <__swbuf_r+0x84>
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	b36b      	cbz	r3, 800c190 <__swbuf_r+0x84>
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	6820      	ldr	r0, [r4, #0]
 800c138:	1ac0      	subs	r0, r0, r3
 800c13a:	6963      	ldr	r3, [r4, #20]
 800c13c:	b2f6      	uxtb	r6, r6
 800c13e:	4283      	cmp	r3, r0
 800c140:	4637      	mov	r7, r6
 800c142:	dc04      	bgt.n	800c14e <__swbuf_r+0x42>
 800c144:	4621      	mov	r1, r4
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f92e 	bl	800c3a8 <_fflush_r>
 800c14c:	bb30      	cbnz	r0, 800c19c <__swbuf_r+0x90>
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	3b01      	subs	r3, #1
 800c152:	60a3      	str	r3, [r4, #8]
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	6022      	str	r2, [r4, #0]
 800c15a:	701e      	strb	r6, [r3, #0]
 800c15c:	6963      	ldr	r3, [r4, #20]
 800c15e:	3001      	adds	r0, #1
 800c160:	4283      	cmp	r3, r0
 800c162:	d004      	beq.n	800c16e <__swbuf_r+0x62>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	07db      	lsls	r3, r3, #31
 800c168:	d506      	bpl.n	800c178 <__swbuf_r+0x6c>
 800c16a:	2e0a      	cmp	r6, #10
 800c16c:	d104      	bne.n	800c178 <__swbuf_r+0x6c>
 800c16e:	4621      	mov	r1, r4
 800c170:	4628      	mov	r0, r5
 800c172:	f000 f919 	bl	800c3a8 <_fflush_r>
 800c176:	b988      	cbnz	r0, 800c19c <__swbuf_r+0x90>
 800c178:	4638      	mov	r0, r7
 800c17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c17c:	4b0a      	ldr	r3, [pc, #40]	; (800c1a8 <__swbuf_r+0x9c>)
 800c17e:	429c      	cmp	r4, r3
 800c180:	d101      	bne.n	800c186 <__swbuf_r+0x7a>
 800c182:	68ac      	ldr	r4, [r5, #8]
 800c184:	e7cf      	b.n	800c126 <__swbuf_r+0x1a>
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <__swbuf_r+0xa0>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	bf08      	it	eq
 800c18c:	68ec      	ldreq	r4, [r5, #12]
 800c18e:	e7ca      	b.n	800c126 <__swbuf_r+0x1a>
 800c190:	4621      	mov	r1, r4
 800c192:	4628      	mov	r0, r5
 800c194:	f000 f80c 	bl	800c1b0 <__swsetup_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d0cb      	beq.n	800c134 <__swbuf_r+0x28>
 800c19c:	f04f 37ff 	mov.w	r7, #4294967295
 800c1a0:	e7ea      	b.n	800c178 <__swbuf_r+0x6c>
 800c1a2:	bf00      	nop
 800c1a4:	08010bd0 	.word	0x08010bd0
 800c1a8:	08010bf0 	.word	0x08010bf0
 800c1ac:	08010bb0 	.word	0x08010bb0

0800c1b0 <__swsetup_r>:
 800c1b0:	4b32      	ldr	r3, [pc, #200]	; (800c27c <__swsetup_r+0xcc>)
 800c1b2:	b570      	push	{r4, r5, r6, lr}
 800c1b4:	681d      	ldr	r5, [r3, #0]
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	b125      	cbz	r5, 800c1c6 <__swsetup_r+0x16>
 800c1bc:	69ab      	ldr	r3, [r5, #24]
 800c1be:	b913      	cbnz	r3, 800c1c6 <__swsetup_r+0x16>
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 f985 	bl	800c4d0 <__sinit>
 800c1c6:	4b2e      	ldr	r3, [pc, #184]	; (800c280 <__swsetup_r+0xd0>)
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d10f      	bne.n	800c1ec <__swsetup_r+0x3c>
 800c1cc:	686c      	ldr	r4, [r5, #4]
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1d4:	0719      	lsls	r1, r3, #28
 800c1d6:	d42c      	bmi.n	800c232 <__swsetup_r+0x82>
 800c1d8:	06dd      	lsls	r5, r3, #27
 800c1da:	d411      	bmi.n	800c200 <__swsetup_r+0x50>
 800c1dc:	2309      	movs	r3, #9
 800c1de:	6033      	str	r3, [r6, #0]
 800c1e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ea:	e03e      	b.n	800c26a <__swsetup_r+0xba>
 800c1ec:	4b25      	ldr	r3, [pc, #148]	; (800c284 <__swsetup_r+0xd4>)
 800c1ee:	429c      	cmp	r4, r3
 800c1f0:	d101      	bne.n	800c1f6 <__swsetup_r+0x46>
 800c1f2:	68ac      	ldr	r4, [r5, #8]
 800c1f4:	e7eb      	b.n	800c1ce <__swsetup_r+0x1e>
 800c1f6:	4b24      	ldr	r3, [pc, #144]	; (800c288 <__swsetup_r+0xd8>)
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	bf08      	it	eq
 800c1fc:	68ec      	ldreq	r4, [r5, #12]
 800c1fe:	e7e6      	b.n	800c1ce <__swsetup_r+0x1e>
 800c200:	0758      	lsls	r0, r3, #29
 800c202:	d512      	bpl.n	800c22a <__swsetup_r+0x7a>
 800c204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c206:	b141      	cbz	r1, 800c21a <__swsetup_r+0x6a>
 800c208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c20c:	4299      	cmp	r1, r3
 800c20e:	d002      	beq.n	800c216 <__swsetup_r+0x66>
 800c210:	4630      	mov	r0, r6
 800c212:	f7ff fa77 	bl	800b704 <_free_r>
 800c216:	2300      	movs	r3, #0
 800c218:	6363      	str	r3, [r4, #52]	; 0x34
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	2300      	movs	r3, #0
 800c224:	6063      	str	r3, [r4, #4]
 800c226:	6923      	ldr	r3, [r4, #16]
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f043 0308 	orr.w	r3, r3, #8
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	b94b      	cbnz	r3, 800c24a <__swsetup_r+0x9a>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c240:	d003      	beq.n	800c24a <__swsetup_r+0x9a>
 800c242:	4621      	mov	r1, r4
 800c244:	4630      	mov	r0, r6
 800c246:	f000 fa07 	bl	800c658 <__smakebuf_r>
 800c24a:	89a0      	ldrh	r0, [r4, #12]
 800c24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c250:	f010 0301 	ands.w	r3, r0, #1
 800c254:	d00a      	beq.n	800c26c <__swsetup_r+0xbc>
 800c256:	2300      	movs	r3, #0
 800c258:	60a3      	str	r3, [r4, #8]
 800c25a:	6963      	ldr	r3, [r4, #20]
 800c25c:	425b      	negs	r3, r3
 800c25e:	61a3      	str	r3, [r4, #24]
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	b943      	cbnz	r3, 800c276 <__swsetup_r+0xc6>
 800c264:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c268:	d1ba      	bne.n	800c1e0 <__swsetup_r+0x30>
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	0781      	lsls	r1, r0, #30
 800c26e:	bf58      	it	pl
 800c270:	6963      	ldrpl	r3, [r4, #20]
 800c272:	60a3      	str	r3, [r4, #8]
 800c274:	e7f4      	b.n	800c260 <__swsetup_r+0xb0>
 800c276:	2000      	movs	r0, #0
 800c278:	e7f7      	b.n	800c26a <__swsetup_r+0xba>
 800c27a:	bf00      	nop
 800c27c:	200000ac 	.word	0x200000ac
 800c280:	08010bd0 	.word	0x08010bd0
 800c284:	08010bf0 	.word	0x08010bf0
 800c288:	08010bb0 	.word	0x08010bb0

0800c28c <abort>:
 800c28c:	b508      	push	{r3, lr}
 800c28e:	2006      	movs	r0, #6
 800c290:	f000 fa96 	bl	800c7c0 <raise>
 800c294:	2001      	movs	r0, #1
 800c296:	f7fa f861 	bl	800635c <_exit>
	...

0800c29c <__sflush_r>:
 800c29c:	898a      	ldrh	r2, [r1, #12]
 800c29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	0710      	lsls	r0, r2, #28
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	d458      	bmi.n	800c35c <__sflush_r+0xc0>
 800c2aa:	684b      	ldr	r3, [r1, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dc05      	bgt.n	800c2bc <__sflush_r+0x20>
 800c2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	dc02      	bgt.n	800c2bc <__sflush_r+0x20>
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	d0f9      	beq.n	800c2b6 <__sflush_r+0x1a>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2c8:	682f      	ldr	r7, [r5, #0]
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	d032      	beq.n	800c334 <__sflush_r+0x98>
 800c2ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	075a      	lsls	r2, r3, #29
 800c2d4:	d505      	bpl.n	800c2e2 <__sflush_r+0x46>
 800c2d6:	6863      	ldr	r3, [r4, #4]
 800c2d8:	1ac0      	subs	r0, r0, r3
 800c2da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2dc:	b10b      	cbz	r3, 800c2e2 <__sflush_r+0x46>
 800c2de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2e0:	1ac0      	subs	r0, r0, r3
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2e8:	6a21      	ldr	r1, [r4, #32]
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	47b0      	blx	r6
 800c2ee:	1c43      	adds	r3, r0, #1
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	d106      	bne.n	800c302 <__sflush_r+0x66>
 800c2f4:	6829      	ldr	r1, [r5, #0]
 800c2f6:	291d      	cmp	r1, #29
 800c2f8:	d82c      	bhi.n	800c354 <__sflush_r+0xb8>
 800c2fa:	4a2a      	ldr	r2, [pc, #168]	; (800c3a4 <__sflush_r+0x108>)
 800c2fc:	40ca      	lsrs	r2, r1
 800c2fe:	07d6      	lsls	r6, r2, #31
 800c300:	d528      	bpl.n	800c354 <__sflush_r+0xb8>
 800c302:	2200      	movs	r2, #0
 800c304:	6062      	str	r2, [r4, #4]
 800c306:	04d9      	lsls	r1, r3, #19
 800c308:	6922      	ldr	r2, [r4, #16]
 800c30a:	6022      	str	r2, [r4, #0]
 800c30c:	d504      	bpl.n	800c318 <__sflush_r+0x7c>
 800c30e:	1c42      	adds	r2, r0, #1
 800c310:	d101      	bne.n	800c316 <__sflush_r+0x7a>
 800c312:	682b      	ldr	r3, [r5, #0]
 800c314:	b903      	cbnz	r3, 800c318 <__sflush_r+0x7c>
 800c316:	6560      	str	r0, [r4, #84]	; 0x54
 800c318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c31a:	602f      	str	r7, [r5, #0]
 800c31c:	2900      	cmp	r1, #0
 800c31e:	d0ca      	beq.n	800c2b6 <__sflush_r+0x1a>
 800c320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c324:	4299      	cmp	r1, r3
 800c326:	d002      	beq.n	800c32e <__sflush_r+0x92>
 800c328:	4628      	mov	r0, r5
 800c32a:	f7ff f9eb 	bl	800b704 <_free_r>
 800c32e:	2000      	movs	r0, #0
 800c330:	6360      	str	r0, [r4, #52]	; 0x34
 800c332:	e7c1      	b.n	800c2b8 <__sflush_r+0x1c>
 800c334:	6a21      	ldr	r1, [r4, #32]
 800c336:	2301      	movs	r3, #1
 800c338:	4628      	mov	r0, r5
 800c33a:	47b0      	blx	r6
 800c33c:	1c41      	adds	r1, r0, #1
 800c33e:	d1c7      	bne.n	800c2d0 <__sflush_r+0x34>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0c4      	beq.n	800c2d0 <__sflush_r+0x34>
 800c346:	2b1d      	cmp	r3, #29
 800c348:	d001      	beq.n	800c34e <__sflush_r+0xb2>
 800c34a:	2b16      	cmp	r3, #22
 800c34c:	d101      	bne.n	800c352 <__sflush_r+0xb6>
 800c34e:	602f      	str	r7, [r5, #0]
 800c350:	e7b1      	b.n	800c2b6 <__sflush_r+0x1a>
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c358:	81a3      	strh	r3, [r4, #12]
 800c35a:	e7ad      	b.n	800c2b8 <__sflush_r+0x1c>
 800c35c:	690f      	ldr	r7, [r1, #16]
 800c35e:	2f00      	cmp	r7, #0
 800c360:	d0a9      	beq.n	800c2b6 <__sflush_r+0x1a>
 800c362:	0793      	lsls	r3, r2, #30
 800c364:	680e      	ldr	r6, [r1, #0]
 800c366:	bf08      	it	eq
 800c368:	694b      	ldreq	r3, [r1, #20]
 800c36a:	600f      	str	r7, [r1, #0]
 800c36c:	bf18      	it	ne
 800c36e:	2300      	movne	r3, #0
 800c370:	eba6 0807 	sub.w	r8, r6, r7
 800c374:	608b      	str	r3, [r1, #8]
 800c376:	f1b8 0f00 	cmp.w	r8, #0
 800c37a:	dd9c      	ble.n	800c2b6 <__sflush_r+0x1a>
 800c37c:	6a21      	ldr	r1, [r4, #32]
 800c37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c380:	4643      	mov	r3, r8
 800c382:	463a      	mov	r2, r7
 800c384:	4628      	mov	r0, r5
 800c386:	47b0      	blx	r6
 800c388:	2800      	cmp	r0, #0
 800c38a:	dc06      	bgt.n	800c39a <__sflush_r+0xfe>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e78e      	b.n	800c2b8 <__sflush_r+0x1c>
 800c39a:	4407      	add	r7, r0
 800c39c:	eba8 0800 	sub.w	r8, r8, r0
 800c3a0:	e7e9      	b.n	800c376 <__sflush_r+0xda>
 800c3a2:	bf00      	nop
 800c3a4:	20400001 	.word	0x20400001

0800c3a8 <_fflush_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	690b      	ldr	r3, [r1, #16]
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	b913      	cbnz	r3, 800c3b8 <_fflush_r+0x10>
 800c3b2:	2500      	movs	r5, #0
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	b118      	cbz	r0, 800c3c2 <_fflush_r+0x1a>
 800c3ba:	6983      	ldr	r3, [r0, #24]
 800c3bc:	b90b      	cbnz	r3, 800c3c2 <_fflush_r+0x1a>
 800c3be:	f000 f887 	bl	800c4d0 <__sinit>
 800c3c2:	4b14      	ldr	r3, [pc, #80]	; (800c414 <_fflush_r+0x6c>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d11b      	bne.n	800c400 <_fflush_r+0x58>
 800c3c8:	686c      	ldr	r4, [r5, #4]
 800c3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0ef      	beq.n	800c3b2 <_fflush_r+0xa>
 800c3d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3d4:	07d0      	lsls	r0, r2, #31
 800c3d6:	d404      	bmi.n	800c3e2 <_fflush_r+0x3a>
 800c3d8:	0599      	lsls	r1, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_fflush_r+0x3a>
 800c3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3de:	f000 f915 	bl	800c60c <__retarget_lock_acquire_recursive>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f7ff ff59 	bl	800c29c <__sflush_r>
 800c3ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3ec:	07da      	lsls	r2, r3, #31
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	d4e0      	bmi.n	800c3b4 <_fflush_r+0xc>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	059b      	lsls	r3, r3, #22
 800c3f6:	d4dd      	bmi.n	800c3b4 <_fflush_r+0xc>
 800c3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3fa:	f000 f908 	bl	800c60e <__retarget_lock_release_recursive>
 800c3fe:	e7d9      	b.n	800c3b4 <_fflush_r+0xc>
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <_fflush_r+0x70>)
 800c402:	429c      	cmp	r4, r3
 800c404:	d101      	bne.n	800c40a <_fflush_r+0x62>
 800c406:	68ac      	ldr	r4, [r5, #8]
 800c408:	e7df      	b.n	800c3ca <_fflush_r+0x22>
 800c40a:	4b04      	ldr	r3, [pc, #16]	; (800c41c <_fflush_r+0x74>)
 800c40c:	429c      	cmp	r4, r3
 800c40e:	bf08      	it	eq
 800c410:	68ec      	ldreq	r4, [r5, #12]
 800c412:	e7da      	b.n	800c3ca <_fflush_r+0x22>
 800c414:	08010bd0 	.word	0x08010bd0
 800c418:	08010bf0 	.word	0x08010bf0
 800c41c:	08010bb0 	.word	0x08010bb0

0800c420 <std>:
 800c420:	2300      	movs	r3, #0
 800c422:	b510      	push	{r4, lr}
 800c424:	4604      	mov	r4, r0
 800c426:	e9c0 3300 	strd	r3, r3, [r0]
 800c42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c42e:	6083      	str	r3, [r0, #8]
 800c430:	8181      	strh	r1, [r0, #12]
 800c432:	6643      	str	r3, [r0, #100]	; 0x64
 800c434:	81c2      	strh	r2, [r0, #14]
 800c436:	6183      	str	r3, [r0, #24]
 800c438:	4619      	mov	r1, r3
 800c43a:	2208      	movs	r2, #8
 800c43c:	305c      	adds	r0, #92	; 0x5c
 800c43e:	f7ff f843 	bl	800b4c8 <memset>
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <std+0x38>)
 800c444:	6263      	str	r3, [r4, #36]	; 0x24
 800c446:	4b05      	ldr	r3, [pc, #20]	; (800c45c <std+0x3c>)
 800c448:	62a3      	str	r3, [r4, #40]	; 0x28
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <std+0x40>)
 800c44c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c44e:	4b05      	ldr	r3, [pc, #20]	; (800c464 <std+0x44>)
 800c450:	6224      	str	r4, [r4, #32]
 800c452:	6323      	str	r3, [r4, #48]	; 0x30
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	0800c7f9 	.word	0x0800c7f9
 800c45c:	0800c81b 	.word	0x0800c81b
 800c460:	0800c853 	.word	0x0800c853
 800c464:	0800c877 	.word	0x0800c877

0800c468 <_cleanup_r>:
 800c468:	4901      	ldr	r1, [pc, #4]	; (800c470 <_cleanup_r+0x8>)
 800c46a:	f000 b8af 	b.w	800c5cc <_fwalk_reent>
 800c46e:	bf00      	nop
 800c470:	0800c3a9 	.word	0x0800c3a9

0800c474 <__sfmoreglue>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	1e4a      	subs	r2, r1, #1
 800c478:	2568      	movs	r5, #104	; 0x68
 800c47a:	4355      	muls	r5, r2
 800c47c:	460e      	mov	r6, r1
 800c47e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c482:	f7ff f98f 	bl	800b7a4 <_malloc_r>
 800c486:	4604      	mov	r4, r0
 800c488:	b140      	cbz	r0, 800c49c <__sfmoreglue+0x28>
 800c48a:	2100      	movs	r1, #0
 800c48c:	e9c0 1600 	strd	r1, r6, [r0]
 800c490:	300c      	adds	r0, #12
 800c492:	60a0      	str	r0, [r4, #8]
 800c494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c498:	f7ff f816 	bl	800b4c8 <memset>
 800c49c:	4620      	mov	r0, r4
 800c49e:	bd70      	pop	{r4, r5, r6, pc}

0800c4a0 <__sfp_lock_acquire>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__sfp_lock_acquire+0x8>)
 800c4a2:	f000 b8b3 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	20002ba0 	.word	0x20002ba0

0800c4ac <__sfp_lock_release>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__sfp_lock_release+0x8>)
 800c4ae:	f000 b8ae 	b.w	800c60e <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	20002ba0 	.word	0x20002ba0

0800c4b8 <__sinit_lock_acquire>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__sinit_lock_acquire+0x8>)
 800c4ba:	f000 b8a7 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	20002b9b 	.word	0x20002b9b

0800c4c4 <__sinit_lock_release>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__sinit_lock_release+0x8>)
 800c4c6:	f000 b8a2 	b.w	800c60e <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	20002b9b 	.word	0x20002b9b

0800c4d0 <__sinit>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	f7ff fff0 	bl	800c4b8 <__sinit_lock_acquire>
 800c4d8:	69a3      	ldr	r3, [r4, #24]
 800c4da:	b11b      	cbz	r3, 800c4e4 <__sinit+0x14>
 800c4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e0:	f7ff bff0 	b.w	800c4c4 <__sinit_lock_release>
 800c4e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c4ea:	4b13      	ldr	r3, [pc, #76]	; (800c538 <__sinit+0x68>)
 800c4ec:	4a13      	ldr	r2, [pc, #76]	; (800c53c <__sinit+0x6c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	bf04      	itt	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	61a3      	streq	r3, [r4, #24]
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f820 	bl	800c540 <__sfp>
 800c500:	6060      	str	r0, [r4, #4]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f81c 	bl	800c540 <__sfp>
 800c508:	60a0      	str	r0, [r4, #8]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f818 	bl	800c540 <__sfp>
 800c510:	2200      	movs	r2, #0
 800c512:	60e0      	str	r0, [r4, #12]
 800c514:	2104      	movs	r1, #4
 800c516:	6860      	ldr	r0, [r4, #4]
 800c518:	f7ff ff82 	bl	800c420 <std>
 800c51c:	68a0      	ldr	r0, [r4, #8]
 800c51e:	2201      	movs	r2, #1
 800c520:	2109      	movs	r1, #9
 800c522:	f7ff ff7d 	bl	800c420 <std>
 800c526:	68e0      	ldr	r0, [r4, #12]
 800c528:	2202      	movs	r2, #2
 800c52a:	2112      	movs	r1, #18
 800c52c:	f7ff ff78 	bl	800c420 <std>
 800c530:	2301      	movs	r3, #1
 800c532:	61a3      	str	r3, [r4, #24]
 800c534:	e7d2      	b.n	800c4dc <__sinit+0xc>
 800c536:	bf00      	nop
 800c538:	08010ac4 	.word	0x08010ac4
 800c53c:	0800c469 	.word	0x0800c469

0800c540 <__sfp>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	4607      	mov	r7, r0
 800c544:	f7ff ffac 	bl	800c4a0 <__sfp_lock_acquire>
 800c548:	4b1e      	ldr	r3, [pc, #120]	; (800c5c4 <__sfp+0x84>)
 800c54a:	681e      	ldr	r6, [r3, #0]
 800c54c:	69b3      	ldr	r3, [r6, #24]
 800c54e:	b913      	cbnz	r3, 800c556 <__sfp+0x16>
 800c550:	4630      	mov	r0, r6
 800c552:	f7ff ffbd 	bl	800c4d0 <__sinit>
 800c556:	3648      	adds	r6, #72	; 0x48
 800c558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	d503      	bpl.n	800c568 <__sfp+0x28>
 800c560:	6833      	ldr	r3, [r6, #0]
 800c562:	b30b      	cbz	r3, 800c5a8 <__sfp+0x68>
 800c564:	6836      	ldr	r6, [r6, #0]
 800c566:	e7f7      	b.n	800c558 <__sfp+0x18>
 800c568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c56c:	b9d5      	cbnz	r5, 800c5a4 <__sfp+0x64>
 800c56e:	4b16      	ldr	r3, [pc, #88]	; (800c5c8 <__sfp+0x88>)
 800c570:	60e3      	str	r3, [r4, #12]
 800c572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c576:	6665      	str	r5, [r4, #100]	; 0x64
 800c578:	f000 f847 	bl	800c60a <__retarget_lock_init_recursive>
 800c57c:	f7ff ff96 	bl	800c4ac <__sfp_lock_release>
 800c580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c588:	6025      	str	r5, [r4, #0]
 800c58a:	61a5      	str	r5, [r4, #24]
 800c58c:	2208      	movs	r2, #8
 800c58e:	4629      	mov	r1, r5
 800c590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c594:	f7fe ff98 	bl	800b4c8 <memset>
 800c598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c59c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5a4:	3468      	adds	r4, #104	; 0x68
 800c5a6:	e7d9      	b.n	800c55c <__sfp+0x1c>
 800c5a8:	2104      	movs	r1, #4
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	f7ff ff62 	bl	800c474 <__sfmoreglue>
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	6030      	str	r0, [r6, #0]
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1d5      	bne.n	800c564 <__sfp+0x24>
 800c5b8:	f7ff ff78 	bl	800c4ac <__sfp_lock_release>
 800c5bc:	230c      	movs	r3, #12
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	e7ee      	b.n	800c5a0 <__sfp+0x60>
 800c5c2:	bf00      	nop
 800c5c4:	08010ac4 	.word	0x08010ac4
 800c5c8:	ffff0001 	.word	0xffff0001

0800c5cc <_fwalk_reent>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	4688      	mov	r8, r1
 800c5d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5d8:	2700      	movs	r7, #0
 800c5da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5de:	f1b9 0901 	subs.w	r9, r9, #1
 800c5e2:	d505      	bpl.n	800c5f0 <_fwalk_reent+0x24>
 800c5e4:	6824      	ldr	r4, [r4, #0]
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	d1f7      	bne.n	800c5da <_fwalk_reent+0xe>
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f0:	89ab      	ldrh	r3, [r5, #12]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d907      	bls.n	800c606 <_fwalk_reent+0x3a>
 800c5f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	d003      	beq.n	800c606 <_fwalk_reent+0x3a>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4630      	mov	r0, r6
 800c602:	47c0      	blx	r8
 800c604:	4307      	orrs	r7, r0
 800c606:	3568      	adds	r5, #104	; 0x68
 800c608:	e7e9      	b.n	800c5de <_fwalk_reent+0x12>

0800c60a <__retarget_lock_init_recursive>:
 800c60a:	4770      	bx	lr

0800c60c <__retarget_lock_acquire_recursive>:
 800c60c:	4770      	bx	lr

0800c60e <__retarget_lock_release_recursive>:
 800c60e:	4770      	bx	lr

0800c610 <__swhatbuf_r>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	460e      	mov	r6, r1
 800c614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c618:	2900      	cmp	r1, #0
 800c61a:	b096      	sub	sp, #88	; 0x58
 800c61c:	4614      	mov	r4, r2
 800c61e:	461d      	mov	r5, r3
 800c620:	da07      	bge.n	800c632 <__swhatbuf_r+0x22>
 800c622:	2300      	movs	r3, #0
 800c624:	602b      	str	r3, [r5, #0]
 800c626:	89b3      	ldrh	r3, [r6, #12]
 800c628:	061a      	lsls	r2, r3, #24
 800c62a:	d410      	bmi.n	800c64e <__swhatbuf_r+0x3e>
 800c62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c630:	e00e      	b.n	800c650 <__swhatbuf_r+0x40>
 800c632:	466a      	mov	r2, sp
 800c634:	f000 f946 	bl	800c8c4 <_fstat_r>
 800c638:	2800      	cmp	r0, #0
 800c63a:	dbf2      	blt.n	800c622 <__swhatbuf_r+0x12>
 800c63c:	9a01      	ldr	r2, [sp, #4]
 800c63e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c642:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c646:	425a      	negs	r2, r3
 800c648:	415a      	adcs	r2, r3
 800c64a:	602a      	str	r2, [r5, #0]
 800c64c:	e7ee      	b.n	800c62c <__swhatbuf_r+0x1c>
 800c64e:	2340      	movs	r3, #64	; 0x40
 800c650:	2000      	movs	r0, #0
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	b016      	add	sp, #88	; 0x58
 800c656:	bd70      	pop	{r4, r5, r6, pc}

0800c658 <__smakebuf_r>:
 800c658:	898b      	ldrh	r3, [r1, #12]
 800c65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c65c:	079d      	lsls	r5, r3, #30
 800c65e:	4606      	mov	r6, r0
 800c660:	460c      	mov	r4, r1
 800c662:	d507      	bpl.n	800c674 <__smakebuf_r+0x1c>
 800c664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	2301      	movs	r3, #1
 800c66e:	6163      	str	r3, [r4, #20]
 800c670:	b002      	add	sp, #8
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	ab01      	add	r3, sp, #4
 800c676:	466a      	mov	r2, sp
 800c678:	f7ff ffca 	bl	800c610 <__swhatbuf_r>
 800c67c:	9900      	ldr	r1, [sp, #0]
 800c67e:	4605      	mov	r5, r0
 800c680:	4630      	mov	r0, r6
 800c682:	f7ff f88f 	bl	800b7a4 <_malloc_r>
 800c686:	b948      	cbnz	r0, 800c69c <__smakebuf_r+0x44>
 800c688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68c:	059a      	lsls	r2, r3, #22
 800c68e:	d4ef      	bmi.n	800c670 <__smakebuf_r+0x18>
 800c690:	f023 0303 	bic.w	r3, r3, #3
 800c694:	f043 0302 	orr.w	r3, r3, #2
 800c698:	81a3      	strh	r3, [r4, #12]
 800c69a:	e7e3      	b.n	800c664 <__smakebuf_r+0xc>
 800c69c:	4b0d      	ldr	r3, [pc, #52]	; (800c6d4 <__smakebuf_r+0x7c>)
 800c69e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	6020      	str	r0, [r4, #0]
 800c6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	9b00      	ldr	r3, [sp, #0]
 800c6ac:	6163      	str	r3, [r4, #20]
 800c6ae:	9b01      	ldr	r3, [sp, #4]
 800c6b0:	6120      	str	r0, [r4, #16]
 800c6b2:	b15b      	cbz	r3, 800c6cc <__smakebuf_r+0x74>
 800c6b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f000 f915 	bl	800c8e8 <_isatty_r>
 800c6be:	b128      	cbz	r0, 800c6cc <__smakebuf_r+0x74>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f023 0303 	bic.w	r3, r3, #3
 800c6c6:	f043 0301 	orr.w	r3, r3, #1
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	89a0      	ldrh	r0, [r4, #12]
 800c6ce:	4305      	orrs	r5, r0
 800c6d0:	81a5      	strh	r5, [r4, #12]
 800c6d2:	e7cd      	b.n	800c670 <__smakebuf_r+0x18>
 800c6d4:	0800c469 	.word	0x0800c469

0800c6d8 <memmove>:
 800c6d8:	4288      	cmp	r0, r1
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	eb01 0402 	add.w	r4, r1, r2
 800c6e0:	d902      	bls.n	800c6e8 <memmove+0x10>
 800c6e2:	4284      	cmp	r4, r0
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	d807      	bhi.n	800c6f8 <memmove+0x20>
 800c6e8:	1e43      	subs	r3, r0, #1
 800c6ea:	42a1      	cmp	r1, r4
 800c6ec:	d008      	beq.n	800c700 <memmove+0x28>
 800c6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6f6:	e7f8      	b.n	800c6ea <memmove+0x12>
 800c6f8:	4402      	add	r2, r0
 800c6fa:	4601      	mov	r1, r0
 800c6fc:	428a      	cmp	r2, r1
 800c6fe:	d100      	bne.n	800c702 <memmove+0x2a>
 800c700:	bd10      	pop	{r4, pc}
 800c702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c70a:	e7f7      	b.n	800c6fc <memmove+0x24>

0800c70c <__malloc_lock>:
 800c70c:	4801      	ldr	r0, [pc, #4]	; (800c714 <__malloc_lock+0x8>)
 800c70e:	f7ff bf7d 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c712:	bf00      	nop
 800c714:	20002b9c 	.word	0x20002b9c

0800c718 <__malloc_unlock>:
 800c718:	4801      	ldr	r0, [pc, #4]	; (800c720 <__malloc_unlock+0x8>)
 800c71a:	f7ff bf78 	b.w	800c60e <__retarget_lock_release_recursive>
 800c71e:	bf00      	nop
 800c720:	20002b9c 	.word	0x20002b9c

0800c724 <_realloc_r>:
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c726:	4607      	mov	r7, r0
 800c728:	4614      	mov	r4, r2
 800c72a:	460e      	mov	r6, r1
 800c72c:	b921      	cbnz	r1, 800c738 <_realloc_r+0x14>
 800c72e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c732:	4611      	mov	r1, r2
 800c734:	f7ff b836 	b.w	800b7a4 <_malloc_r>
 800c738:	b922      	cbnz	r2, 800c744 <_realloc_r+0x20>
 800c73a:	f7fe ffe3 	bl	800b704 <_free_r>
 800c73e:	4625      	mov	r5, r4
 800c740:	4628      	mov	r0, r5
 800c742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c744:	f000 f8f2 	bl	800c92c <_malloc_usable_size_r>
 800c748:	42a0      	cmp	r0, r4
 800c74a:	d20f      	bcs.n	800c76c <_realloc_r+0x48>
 800c74c:	4621      	mov	r1, r4
 800c74e:	4638      	mov	r0, r7
 800c750:	f7ff f828 	bl	800b7a4 <_malloc_r>
 800c754:	4605      	mov	r5, r0
 800c756:	2800      	cmp	r0, #0
 800c758:	d0f2      	beq.n	800c740 <_realloc_r+0x1c>
 800c75a:	4631      	mov	r1, r6
 800c75c:	4622      	mov	r2, r4
 800c75e:	f7fe ffc3 	bl	800b6e8 <memcpy>
 800c762:	4631      	mov	r1, r6
 800c764:	4638      	mov	r0, r7
 800c766:	f7fe ffcd 	bl	800b704 <_free_r>
 800c76a:	e7e9      	b.n	800c740 <_realloc_r+0x1c>
 800c76c:	4635      	mov	r5, r6
 800c76e:	e7e7      	b.n	800c740 <_realloc_r+0x1c>

0800c770 <_raise_r>:
 800c770:	291f      	cmp	r1, #31
 800c772:	b538      	push	{r3, r4, r5, lr}
 800c774:	4604      	mov	r4, r0
 800c776:	460d      	mov	r5, r1
 800c778:	d904      	bls.n	800c784 <_raise_r+0x14>
 800c77a:	2316      	movs	r3, #22
 800c77c:	6003      	str	r3, [r0, #0]
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c786:	b112      	cbz	r2, 800c78e <_raise_r+0x1e>
 800c788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c78c:	b94b      	cbnz	r3, 800c7a2 <_raise_r+0x32>
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 f830 	bl	800c7f4 <_getpid_r>
 800c794:	462a      	mov	r2, r5
 800c796:	4601      	mov	r1, r0
 800c798:	4620      	mov	r0, r4
 800c79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c79e:	f000 b817 	b.w	800c7d0 <_kill_r>
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d00a      	beq.n	800c7bc <_raise_r+0x4c>
 800c7a6:	1c59      	adds	r1, r3, #1
 800c7a8:	d103      	bne.n	800c7b2 <_raise_r+0x42>
 800c7aa:	2316      	movs	r3, #22
 800c7ac:	6003      	str	r3, [r0, #0]
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	e7e7      	b.n	800c782 <_raise_r+0x12>
 800c7b2:	2400      	movs	r4, #0
 800c7b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	4798      	blx	r3
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e7e0      	b.n	800c782 <_raise_r+0x12>

0800c7c0 <raise>:
 800c7c0:	4b02      	ldr	r3, [pc, #8]	; (800c7cc <raise+0xc>)
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	f7ff bfd3 	b.w	800c770 <_raise_r>
 800c7ca:	bf00      	nop
 800c7cc:	200000ac 	.word	0x200000ac

0800c7d0 <_kill_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d07      	ldr	r5, [pc, #28]	; (800c7f0 <_kill_r+0x20>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	4611      	mov	r1, r2
 800c7dc:	602b      	str	r3, [r5, #0]
 800c7de:	f7f9 fdad 	bl	800633c <_kill>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	d102      	bne.n	800c7ec <_kill_r+0x1c>
 800c7e6:	682b      	ldr	r3, [r5, #0]
 800c7e8:	b103      	cbz	r3, 800c7ec <_kill_r+0x1c>
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	bd38      	pop	{r3, r4, r5, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20002ba4 	.word	0x20002ba4

0800c7f4 <_getpid_r>:
 800c7f4:	f7f9 bd9a 	b.w	800632c <_getpid>

0800c7f8 <__sread>:
 800c7f8:	b510      	push	{r4, lr}
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c800:	f000 f89c 	bl	800c93c <_read_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	bfab      	itete	ge
 800c808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c80a:	89a3      	ldrhlt	r3, [r4, #12]
 800c80c:	181b      	addge	r3, r3, r0
 800c80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c812:	bfac      	ite	ge
 800c814:	6563      	strge	r3, [r4, #84]	; 0x54
 800c816:	81a3      	strhlt	r3, [r4, #12]
 800c818:	bd10      	pop	{r4, pc}

0800c81a <__swrite>:
 800c81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81e:	461f      	mov	r7, r3
 800c820:	898b      	ldrh	r3, [r1, #12]
 800c822:	05db      	lsls	r3, r3, #23
 800c824:	4605      	mov	r5, r0
 800c826:	460c      	mov	r4, r1
 800c828:	4616      	mov	r6, r2
 800c82a:	d505      	bpl.n	800c838 <__swrite+0x1e>
 800c82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c830:	2302      	movs	r3, #2
 800c832:	2200      	movs	r2, #0
 800c834:	f000 f868 	bl	800c908 <_lseek_r>
 800c838:	89a3      	ldrh	r3, [r4, #12]
 800c83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c842:	81a3      	strh	r3, [r4, #12]
 800c844:	4632      	mov	r2, r6
 800c846:	463b      	mov	r3, r7
 800c848:	4628      	mov	r0, r5
 800c84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c84e:	f000 b817 	b.w	800c880 <_write_r>

0800c852 <__sseek>:
 800c852:	b510      	push	{r4, lr}
 800c854:	460c      	mov	r4, r1
 800c856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c85a:	f000 f855 	bl	800c908 <_lseek_r>
 800c85e:	1c43      	adds	r3, r0, #1
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	bf15      	itete	ne
 800c864:	6560      	strne	r0, [r4, #84]	; 0x54
 800c866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c86e:	81a3      	strheq	r3, [r4, #12]
 800c870:	bf18      	it	ne
 800c872:	81a3      	strhne	r3, [r4, #12]
 800c874:	bd10      	pop	{r4, pc}

0800c876 <__sclose>:
 800c876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87a:	f000 b813 	b.w	800c8a4 <_close_r>
	...

0800c880 <_write_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d07      	ldr	r5, [pc, #28]	; (800c8a0 <_write_r+0x20>)
 800c884:	4604      	mov	r4, r0
 800c886:	4608      	mov	r0, r1
 800c888:	4611      	mov	r1, r2
 800c88a:	2200      	movs	r2, #0
 800c88c:	602a      	str	r2, [r5, #0]
 800c88e:	461a      	mov	r2, r3
 800c890:	f7f9 fd8b 	bl	80063aa <_write>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	d102      	bne.n	800c89e <_write_r+0x1e>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	b103      	cbz	r3, 800c89e <_write_r+0x1e>
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	20002ba4 	.word	0x20002ba4

0800c8a4 <_close_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d06      	ldr	r5, [pc, #24]	; (800c8c0 <_close_r+0x1c>)
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	602b      	str	r3, [r5, #0]
 800c8b0:	f7f9 fd97 	bl	80063e2 <_close>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_close_r+0x1a>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_close_r+0x1a>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20002ba4 	.word	0x20002ba4

0800c8c4 <_fstat_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d07      	ldr	r5, [pc, #28]	; (800c8e4 <_fstat_r+0x20>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	602b      	str	r3, [r5, #0]
 800c8d2:	f7f9 fd92 	bl	80063fa <_fstat>
 800c8d6:	1c43      	adds	r3, r0, #1
 800c8d8:	d102      	bne.n	800c8e0 <_fstat_r+0x1c>
 800c8da:	682b      	ldr	r3, [r5, #0]
 800c8dc:	b103      	cbz	r3, 800c8e0 <_fstat_r+0x1c>
 800c8de:	6023      	str	r3, [r4, #0]
 800c8e0:	bd38      	pop	{r3, r4, r5, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20002ba4 	.word	0x20002ba4

0800c8e8 <_isatty_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4d06      	ldr	r5, [pc, #24]	; (800c904 <_isatty_r+0x1c>)
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	4608      	mov	r0, r1
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	f7f9 fd91 	bl	800641a <_isatty>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d102      	bne.n	800c902 <_isatty_r+0x1a>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	b103      	cbz	r3, 800c902 <_isatty_r+0x1a>
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	20002ba4 	.word	0x20002ba4

0800c908 <_lseek_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d07      	ldr	r5, [pc, #28]	; (800c928 <_lseek_r+0x20>)
 800c90c:	4604      	mov	r4, r0
 800c90e:	4608      	mov	r0, r1
 800c910:	4611      	mov	r1, r2
 800c912:	2200      	movs	r2, #0
 800c914:	602a      	str	r2, [r5, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	f7f9 fd8a 	bl	8006430 <_lseek>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_lseek_r+0x1e>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_lseek_r+0x1e>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	20002ba4 	.word	0x20002ba4

0800c92c <_malloc_usable_size_r>:
 800c92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c930:	1f18      	subs	r0, r3, #4
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfbc      	itt	lt
 800c936:	580b      	ldrlt	r3, [r1, r0]
 800c938:	18c0      	addlt	r0, r0, r3
 800c93a:	4770      	bx	lr

0800c93c <_read_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4d07      	ldr	r5, [pc, #28]	; (800c95c <_read_r+0x20>)
 800c940:	4604      	mov	r4, r0
 800c942:	4608      	mov	r0, r1
 800c944:	4611      	mov	r1, r2
 800c946:	2200      	movs	r2, #0
 800c948:	602a      	str	r2, [r5, #0]
 800c94a:	461a      	mov	r2, r3
 800c94c:	f7f9 fd10 	bl	8006370 <_read>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_read_r+0x1e>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_read_r+0x1e>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	20002ba4 	.word	0x20002ba4

0800c960 <_init>:
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	bf00      	nop
 800c964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c966:	bc08      	pop	{r3}
 800c968:	469e      	mov	lr, r3
 800c96a:	4770      	bx	lr

0800c96c <_fini>:
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96e:	bf00      	nop
 800c970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c972:	bc08      	pop	{r3}
 800c974:	469e      	mov	lr, r3
 800c976:	4770      	bx	lr
