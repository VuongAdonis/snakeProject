
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030dc  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          0000116c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011f4  200011f4  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ea2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003188  00000000  00000000  00034f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  000380e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e70  00000000  00000000  000390c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236c0  00000000  00000000  00039f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c5b  00000000  00000000  0005d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc0a  00000000  00000000  00071253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00140e5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a14  00000000  00000000  00140eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001458c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  001458e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f14 	.word	0x08005f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005f14 	.word	0x08005f14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2108      	movs	r1, #8
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <button_init+0x14>)
 8000572:	f002 fca1 	bl	8002eb8 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40020c00 	.word	0x40020c00

08000580 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <button_Scan+0xc8>)
 800058c:	f002 fc94 	bl	8002eb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	482c      	ldr	r0, [pc, #176]	; (8000648 <button_Scan+0xc8>)
 8000596:	f002 fc8f 	bl	8002eb8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800059a:	230a      	movs	r3, #10
 800059c:	2202      	movs	r2, #2
 800059e:	492b      	ldr	r1, [pc, #172]	; (800064c <button_Scan+0xcc>)
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <button_Scan+0xd0>)
 80005a2:	f003 faa8 	bl	8003af6 <HAL_SPI_Receive>
	  int button_index = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e03f      	b.n	8000636 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db06      	blt.n	80005ca <button_Scan+0x4a>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	dc03      	bgt.n	80005ca <button_Scan+0x4a>
			  button_index = i + 4;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3304      	adds	r3, #4
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e018      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	dd07      	ble.n	80005e0 <button_Scan+0x60>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	dc04      	bgt.n	80005e0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f1c3 0307 	rsb	r3, r3, #7
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e00d      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dd06      	ble.n	80005f4 <button_Scan+0x74>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0b      	cmp	r3, #11
 80005ea:	dc03      	bgt.n	80005f4 <button_Scan+0x74>
			  button_index = i + 4;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e003      	b.n	80005fc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f1c3 0317 	rsb	r3, r3, #23
 80005fa:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <button_Scan+0xcc>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	897b      	ldrh	r3, [r7, #10]
 8000602:	4013      	ands	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <button_Scan+0x96>
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <button_Scan+0xd4>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2100      	movs	r1, #0
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000614:	e009      	b.n	800062a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <button_Scan+0xd4>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061e:	3301      	adds	r3, #1
 8000620:	b299      	uxth	r1, r3
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <button_Scan+0xd4>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800062a:	897b      	ldrh	r3, [r7, #10]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	ddbc      	ble.n	80005b6 <button_Scan+0x36>
	  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020c00 	.word	0x40020c00
 800064c:	200000a4 	.word	0x200000a4
 8000650:	20001140 	.word	0x20001140
 8000654:	200000c8 	.word	0x200000c8

08000658 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <MX_FSMC_Init+0xec>)
 8000686:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800068a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_FSMC_Init+0xec>)
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <MX_FSMC_Init+0xf0>)
 8000690:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_FSMC_Init+0xec>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_FSMC_Init+0xec>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_FSMC_Init+0xec>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_FSMC_Init+0xec>)
 80006a6:	2210      	movs	r2, #16
 80006a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_FSMC_Init+0xec>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_FSMC_Init+0xec>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_FSMC_Init+0xec>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_FSMC_Init+0xec>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_FSMC_Init+0xec>)
 80006c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_FSMC_Init+0xec>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_FSMC_Init+0xec>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_FSMC_Init+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_FSMC_Init+0xec>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_FSMC_Init+0xec>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006ea:	230f      	movs	r3, #15
 80006ec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006ee:	230f      	movs	r3, #15
 80006f0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006f2:	233c      	movs	r3, #60	; 0x3c
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80006fa:	2310      	movs	r3, #16
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80006fe:	2311      	movs	r3, #17
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000702:	2300      	movs	r3, #0
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000706:	2308      	movs	r3, #8
 8000708:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800070a:	230f      	movs	r3, #15
 800070c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800070e:	2309      	movs	r3, #9
 8000710:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000716:	2310      	movs	r3, #16
 8000718:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800071a:	2311      	movs	r3, #17
 800071c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000722:	463a      	mov	r2, r7
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_FSMC_Init+0xec>)
 800072c:	f003 fdc6 	bl	80042bc <HAL_SRAM_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000736:	f000 fe9d 	bl	8001474 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800073a:	bf00      	nop
 800073c:	3738      	adds	r7, #56	; 0x38
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000e8 	.word	0x200000e8
 8000748:	a0000104 	.word	0xa0000104

0800074c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <HAL_FSMC_MspInit+0x88>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d131      	bne.n	80007cc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_FSMC_MspInit+0x88>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6393      	str	r3, [r2, #56]	; 0x38
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800078a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800078e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <HAL_FSMC_MspInit+0x90>)
 80007a6:	f002 f9eb 	bl	8002b80 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007aa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80007ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007bc:	230c      	movs	r3, #12
 80007be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <HAL_FSMC_MspInit+0x94>)
 80007c6:	f002 f9db 	bl	8002b80 <HAL_GPIO_Init>
 80007ca:	e000      	b.n	80007ce <HAL_FSMC_MspInit+0x82>
    return;
 80007cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000a8 	.word	0x200000a8
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007ec:	f7ff ffae 	bl	800074c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4b6f      	ldr	r3, [pc, #444]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a6e      	ldr	r2, [pc, #440]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b68      	ldr	r3, [pc, #416]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a67      	ldr	r2, [pc, #412]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b65      	ldr	r3, [pc, #404]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b61      	ldr	r3, [pc, #388]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a60      	ldr	r2, [pc, #384]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b5e      	ldr	r3, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b5a      	ldr	r3, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a59      	ldr	r2, [pc, #356]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a44      	ldr	r2, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2170      	movs	r1, #112	; 0x70
 80008d6:	483f      	ldr	r0, [pc, #252]	; (80009d4 <MX_GPIO_Init+0x1dc>)
 80008d8:	f002 faee 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	483d      	ldr	r0, [pc, #244]	; (80009d8 <MX_GPIO_Init+0x1e0>)
 80008e4:	f002 fae8 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	483b      	ldr	r0, [pc, #236]	; (80009dc <MX_GPIO_Init+0x1e4>)
 80008ee:	f002 fae3 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	4839      	ldr	r0, [pc, #228]	; (80009e0 <MX_GPIO_Init+0x1e8>)
 80008fa:	f002 fadd 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	4838      	ldr	r0, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x1ec>)
 8000904:	f002 fad8 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000908:	2370      	movs	r3, #112	; 0x70
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x1dc>)
 8000920:	f002 f92e 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4826      	ldr	r0, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x1e0>)
 800093e:	f002 f91f 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000942:	23c0      	movs	r3, #192	; 0xc0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x1e8>)
 8000956:	f002 f913 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800095a:	2330      	movs	r3, #48	; 0x30
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0x1e0>)
 800096e:	f002 f907 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_GPIO_Init+0x1e4>)
 800098a:	f002 f8f9 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800098e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_GPIO_Init+0x1e8>)
 80009a8:	f002 f8ea 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009ac:	2308      	movs	r3, #8
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_GPIO_Init+0x1ec>)
 80009c4:	f002 f8dc 	bl	8002b80 <HAL_GPIO_Init>

}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020c00 	.word	0x40020c00

080009e8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <LCD_WR_REG+0x1c>)
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	8013      	strh	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	600ffffe 	.word	0x600ffffe

08000a08 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <LCD_WR_DATA+0x1c>)
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	8053      	strh	r3, [r2, #2]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	600ffffe 	.word	0x600ffffe

08000a28 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <LCD_RD_DATA+0x20>)
 8000a30:	885b      	ldrh	r3, [r3, #2]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	b29b      	uxth	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	600ffffe 	.word	0x600ffffe

08000a4c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	807b      	strh	r3, [r7, #2]
 8000a66:	4613      	mov	r3, r2
 8000a68:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000a6a:	202a      	movs	r0, #42	; 0x2a
 8000a6c:	f7ff ffbc 	bl	80009e8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffc6 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ffc0 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffba 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffb4 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000aa0:	202b      	movs	r0, #43	; 0x2b
 8000aa2:	f7ff ffa1 	bl	80009e8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ffab 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffa5 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000abe:	883b      	ldrh	r3, [r7, #0]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff9f 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000aca:	883b      	ldrh	r3, [r7, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff99 	bl	8000a08 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ad6:	202c      	movs	r0, #44	; 0x2c
 8000ad8:	f7ff ff86 	bl	80009e8 <LCD_WR_REG>
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}

08000ae4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <lcd_Clear+0x60>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <lcd_Clear+0x60>)
 8000af8:	885b      	ldrh	r3, [r3, #2]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff ffa3 	bl	8000a4c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	81fb      	strh	r3, [r7, #14]
 8000b0a:	e011      	b.n	8000b30 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	81bb      	strh	r3, [r7, #12]
 8000b10:	e006      	b.n	8000b20 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff77 	bl	8000a08 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000b1a:	89bb      	ldrh	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	81bb      	strh	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <lcd_Clear+0x60>)
 8000b22:	885b      	ldrh	r3, [r3, #2]
 8000b24:	89ba      	ldrh	r2, [r7, #12]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d3f3      	bcc.n	8000b12 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	81fb      	strh	r3, [r7, #14]
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <lcd_Clear+0x60>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	89fa      	ldrh	r2, [r7, #14]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d3e8      	bcc.n	8000b0c <lcd_Clear+0x28>
		}
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000138 	.word	0x20000138

08000b48 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4623      	mov	r3, r4
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	883b      	ldrh	r3, [r7, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	88b9      	ldrh	r1, [r7, #4]
 8000b74:	88f8      	ldrh	r0, [r7, #6]
 8000b76:	f7ff ff69 	bl	8000a4c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	81fb      	strh	r3, [r7, #14]
 8000b7e:	e010      	b.n	8000ba2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	81bb      	strh	r3, [r7, #12]
 8000b84:	e006      	b.n	8000b94 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000b86:	8c3b      	ldrh	r3, [r7, #32]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff3d 	bl	8000a08 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000b8e:	89bb      	ldrh	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	81bb      	strh	r3, [r7, #12]
 8000b94:	89ba      	ldrh	r2, [r7, #12]
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d3f4      	bcc.n	8000b86 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	81fb      	strh	r3, [r7, #14]
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	883b      	ldrh	r3, [r7, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3ea      	bcc.n	8000b80 <lcd_Fill+0x38>
		}
	}
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	88b9      	ldrh	r1, [r7, #4]
 8000bcc:	88f8      	ldrh	r0, [r7, #6]
 8000bce:	f7ff ff3d 	bl	8000a4c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff17 	bl	8000a08 <LCD_WR_DATA>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	fb12 f303 	smulbb	r3, r2, r3
 8000c3a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	3b20      	subs	r3, #32
 8000c40:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	88b9      	ldrh	r1, [r7, #4]
 8000c62:	88f8      	ldrh	r0, [r7, #6]
 8000c64:	4622      	mov	r2, r4
 8000c66:	f7ff fef1 	bl	8000a4c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	827b      	strh	r3, [r7, #18]
 8000c6e:	e07a      	b.n	8000d66 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000c70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	d028      	beq.n	8000cca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000c78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d108      	bne.n	8000c92 <lcd_ShowChar+0xae>
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	8a7b      	ldrh	r3, [r7, #18]
 8000c84:	493c      	ldr	r1, [pc, #240]	; (8000d78 <lcd_ShowChar+0x194>)
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	440a      	add	r2, r1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	75fb      	strb	r3, [r7, #23]
 8000c90:	e01b      	b.n	8000cca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c96:	2b18      	cmp	r3, #24
 8000c98:	d10b      	bne.n	8000cb2 <lcd_ShowChar+0xce>
 8000c9a:	78fa      	ldrb	r2, [r7, #3]
 8000c9c:	8a79      	ldrh	r1, [r7, #18]
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <lcd_ShowChar+0x198>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	4403      	add	r3, r0
 8000caa:	440b      	add	r3, r1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	75fb      	strb	r3, [r7, #23]
 8000cb0:	e00b      	b.n	8000cca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cb6:	2b20      	cmp	r3, #32
 8000cb8:	d15a      	bne.n	8000d70 <lcd_ShowChar+0x18c>
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	8a7b      	ldrh	r3, [r7, #18]
 8000cbe:	4930      	ldr	r1, [pc, #192]	; (8000d80 <lcd_ShowChar+0x19c>)
 8000cc0:	0192      	lsls	r2, r2, #6
 8000cc2:	440a      	add	r2, r1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75bb      	strb	r3, [r7, #22]
 8000cce:	e044      	b.n	8000d5a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000cd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d120      	bne.n	8000d1a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000cd8:	7dfa      	ldrb	r2, [r7, #23]
 8000cda:	7dbb      	ldrb	r3, [r7, #22]
 8000cdc:	fa42 f303 	asr.w	r3, r2, r3
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <lcd_ShowChar+0x10e>
 8000ce8:	883b      	ldrh	r3, [r7, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe8c 	bl	8000a08 <LCD_WR_DATA>
 8000cf0:	e003      	b.n	8000cfa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe87 	bl	8000a08 <LCD_WR_DATA>
				m++;
 8000cfa:	7d7b      	ldrb	r3, [r7, #21]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000d00:	7d7b      	ldrb	r3, [r7, #21]
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d08:	fb02 f201 	mul.w	r2, r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11f      	bne.n	8000d54 <lcd_ShowChar+0x170>
				{
					m=0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	757b      	strb	r3, [r7, #21]
					break;
 8000d18:	e022      	b.n	8000d60 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000d1a:	7dfa      	ldrb	r2, [r7, #23]
 8000d1c:	7dbb      	ldrb	r3, [r7, #22]
 8000d1e:	fa42 f303 	asr.w	r3, r2, r3
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <lcd_ShowChar+0x152>
 8000d2a:	883a      	ldrh	r2, [r7, #0]
 8000d2c:	88b9      	ldrh	r1, [r7, #4]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff3f 	bl	8000bb4 <lcd_DrawPoint>
				x++;
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	8a3b      	ldrh	r3, [r7, #16]
 8000d40:	1ad2      	subs	r2, r2, r3
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d105      	bne.n	8000d54 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000d48:	8a3b      	ldrh	r3, [r7, #16]
 8000d4a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	80bb      	strh	r3, [r7, #4]
					break;
 8000d52:	e005      	b.n	8000d60 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000d54:	7dbb      	ldrb	r3, [r7, #22]
 8000d56:	3301      	adds	r3, #1
 8000d58:	75bb      	strb	r3, [r7, #22]
 8000d5a:	7dbb      	ldrb	r3, [r7, #22]
 8000d5c:	2b07      	cmp	r3, #7
 8000d5e:	d9b7      	bls.n	8000cd0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000d60:	8a7b      	ldrh	r3, [r7, #18]
 8000d62:	3301      	adds	r3, #1
 8000d64:	827b      	strh	r3, [r7, #18]
 8000d66:	8a7a      	ldrh	r2, [r7, #18]
 8000d68:	89bb      	ldrh	r3, [r7, #12]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d380      	bcc.n	8000c70 <lcd_ShowChar+0x8c>
 8000d6e:	e000      	b.n	8000d72 <lcd_ShowChar+0x18e>
		else return;
 8000d70:	bf00      	nop
				}
			}
		}
	}
}
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	08005f2c 	.word	0x08005f2c
 8000d7c:	0800651c 	.word	0x0800651c
 8000d80:	080076ec 	.word	0x080076ec

08000d84 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000d98:	e004      	b.n	8000da4 <mypow+0x20>
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	fb02 f303 	mul.w	r3, r2, r3
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	71ba      	strb	r2, [r7, #6]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f5      	bne.n	8000d9a <mypow+0x16>
	return result;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000dde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000de2:	085b      	lsrs	r3, r3, #1
 8000de4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e059      	b.n	8000ea0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000dec:	887c      	ldrh	r4, [r7, #2]
 8000dee:	787a      	ldrb	r2, [r7, #1]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f7ff ffc1 	bl	8000d84 <mypow>
 8000e02:	4603      	mov	r3, r0
 8000e04:	fbb4 f1f3 	udiv	r1, r4, r3
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <lcd_ShowIntNum+0xf8>)
 8000e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	1aca      	subs	r2, r1, r3
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d121      	bne.n	8000e68 <lcd_ShowIntNum+0xac>
 8000e24:	7bfa      	ldrb	r2, [r7, #15]
 8000e26:	787b      	ldrb	r3, [r7, #1]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	da1c      	bge.n	8000e68 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000e2e:	7b3b      	ldrb	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d117      	bne.n	8000e64 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	fb12 f303 	smulbb	r3, r2, r3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4413      	add	r3, r2
 8000e46:	b298      	uxth	r0, r3
 8000e48:	8c3a      	ldrh	r2, [r7, #32]
 8000e4a:	88b9      	ldrh	r1, [r7, #4]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	f7ff fec1 	bl	8000be4 <lcd_ShowChar>
				continue;
 8000e62:	e01a      	b.n	8000e9a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	fb12 f303 	smulbb	r3, r2, r3
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b298      	uxth	r0, r3
 8000e7c:	7b3b      	ldrb	r3, [r7, #12]
 8000e7e:	3330      	adds	r3, #48	; 0x30
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	8c3c      	ldrh	r4, [r7, #32]
 8000e84:	88b9      	ldrh	r1, [r7, #4]
 8000e86:	2300      	movs	r3, #0
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	4623      	mov	r3, r4
 8000e96:	f7ff fea5 	bl	8000be4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	787b      	ldrb	r3, [r7, #1]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d3a1      	bcc.n	8000dec <lcd_ShowIntNum+0x30>
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	cccccccd 	.word	0xcccccccd

08000eb8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <lcd_SetDir+0x44>)
 8000ed4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ed8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <lcd_SetDir+0x44>)
 8000edc:	22f0      	movs	r2, #240	; 0xf0
 8000ede:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000ee0:	e006      	b.n	8000ef0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <lcd_SetDir+0x44>)
 8000ee4:	22f0      	movs	r2, #240	; 0xf0
 8000ee6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <lcd_SetDir+0x44>)
 8000eea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eee:	805a      	strh	r2, [r3, #2]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	20000138 	.word	0x20000138

08000f00 <lcd_init>:


void lcd_init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	48aa      	ldr	r0, [pc, #680]	; (80011b4 <lcd_init+0x2b4>)
 8000f0c:	f001 ffd4 	bl	8002eb8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f14:	f001 fcfe 	bl	8002914 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	48a5      	ldr	r0, [pc, #660]	; (80011b4 <lcd_init+0x2b4>)
 8000f20:	f001 ffca 	bl	8002eb8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f28:	f001 fcf4 	bl	8002914 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff ffc3 	bl	8000eb8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f32:	20d3      	movs	r0, #211	; 0xd3
 8000f34:	f7ff fd58 	bl	80009e8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000f38:	f7ff fd76 	bl	8000a28 <LCD_RD_DATA>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b9d      	ldr	r3, [pc, #628]	; (80011b8 <lcd_init+0x2b8>)
 8000f42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f44:	f7ff fd70 	bl	8000a28 <LCD_RD_DATA>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b9a      	ldr	r3, [pc, #616]	; (80011b8 <lcd_init+0x2b8>)
 8000f4e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f50:	f7ff fd6a 	bl	8000a28 <LCD_RD_DATA>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b97      	ldr	r3, [pc, #604]	; (80011b8 <lcd_init+0x2b8>)
 8000f5a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000f5c:	4b96      	ldr	r3, [pc, #600]	; (80011b8 <lcd_init+0x2b8>)
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b94      	ldr	r3, [pc, #592]	; (80011b8 <lcd_init+0x2b8>)
 8000f66:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000f68:	f7ff fd5e 	bl	8000a28 <LCD_RD_DATA>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b91      	ldr	r3, [pc, #580]	; (80011b8 <lcd_init+0x2b8>)
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b8f      	ldr	r3, [pc, #572]	; (80011b8 <lcd_init+0x2b8>)
 8000f7a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000f7c:	20cf      	movs	r0, #207	; 0xcf
 8000f7e:	f7ff fd33 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fd40 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f88:	20c1      	movs	r0, #193	; 0xc1
 8000f8a:	f7ff fd3d 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000f8e:	2030      	movs	r0, #48	; 0x30
 8000f90:	f7ff fd3a 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000f94:	20ed      	movs	r0, #237	; 0xed
 8000f96:	f7ff fd27 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f7ff fd34 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f7ff fd31 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000fa6:	2012      	movs	r0, #18
 8000fa8:	f7ff fd2e 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000fac:	2081      	movs	r0, #129	; 0x81
 8000fae:	f7ff fd2b 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000fb2:	20e8      	movs	r0, #232	; 0xe8
 8000fb4:	f7ff fd18 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000fb8:	2085      	movs	r0, #133	; 0x85
 8000fba:	f7ff fd25 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000fbe:	2010      	movs	r0, #16
 8000fc0:	f7ff fd22 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000fc4:	207a      	movs	r0, #122	; 0x7a
 8000fc6:	f7ff fd1f 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000fca:	20cb      	movs	r0, #203	; 0xcb
 8000fcc:	f7ff fd0c 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000fd0:	2039      	movs	r0, #57	; 0x39
 8000fd2:	f7ff fd19 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000fd6:	202c      	movs	r0, #44	; 0x2c
 8000fd8:	f7ff fd16 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fd13 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000fe2:	2034      	movs	r0, #52	; 0x34
 8000fe4:	f7ff fd10 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff fd0d 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000fee:	20f7      	movs	r0, #247	; 0xf7
 8000ff0:	f7ff fcfa 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f7ff fd07 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000ffa:	20ea      	movs	r0, #234	; 0xea
 8000ffc:	f7ff fcf4 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fd01 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff fcfe 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800100c:	20c0      	movs	r0, #192	; 0xc0
 800100e:	f7ff fceb 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001012:	201b      	movs	r0, #27
 8001014:	f7ff fcf8 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001018:	20c1      	movs	r0, #193	; 0xc1
 800101a:	f7ff fce5 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fcf2 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001024:	20c5      	movs	r0, #197	; 0xc5
 8001026:	f7ff fcdf 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800102a:	2030      	movs	r0, #48	; 0x30
 800102c:	f7ff fcec 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001030:	2030      	movs	r0, #48	; 0x30
 8001032:	f7ff fce9 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001036:	20c7      	movs	r0, #199	; 0xc7
 8001038:	f7ff fcd6 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800103c:	20b7      	movs	r0, #183	; 0xb7
 800103e:	f7ff fce3 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001042:	2036      	movs	r0, #54	; 0x36
 8001044:	f7ff fcd0 	bl	80009e8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001048:	2008      	movs	r0, #8
 800104a:	f7ff fcdd 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800104e:	203a      	movs	r0, #58	; 0x3a
 8001050:	f7ff fcca 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001054:	2055      	movs	r0, #85	; 0x55
 8001056:	f7ff fcd7 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800105a:	20b1      	movs	r0, #177	; 0xb1
 800105c:	f7ff fcc4 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fcd1 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001066:	201a      	movs	r0, #26
 8001068:	f7ff fcce 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800106c:	20b6      	movs	r0, #182	; 0xb6
 800106e:	f7ff fcbb 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001072:	200a      	movs	r0, #10
 8001074:	f7ff fcc8 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001078:	20a2      	movs	r0, #162	; 0xa2
 800107a:	f7ff fcc5 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800107e:	20f2      	movs	r0, #242	; 0xf2
 8001080:	f7ff fcb2 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff fcbf 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800108a:	2026      	movs	r0, #38	; 0x26
 800108c:	f7ff fcac 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fcb9 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001096:	20e0      	movs	r0, #224	; 0xe0
 8001098:	f7ff fca6 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800109c:	200f      	movs	r0, #15
 800109e:	f7ff fcb3 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80010a2:	202a      	movs	r0, #42	; 0x2a
 80010a4:	f7ff fcb0 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f7ff fcad 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010ae:	2008      	movs	r0, #8
 80010b0:	f7ff fcaa 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80010b4:	200e      	movs	r0, #14
 80010b6:	f7ff fca7 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010ba:	2008      	movs	r0, #8
 80010bc:	f7ff fca4 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80010c0:	2054      	movs	r0, #84	; 0x54
 80010c2:	f7ff fca1 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80010c6:	20a9      	movs	r0, #169	; 0xa9
 80010c8:	f7ff fc9e 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80010cc:	2043      	movs	r0, #67	; 0x43
 80010ce:	f7ff fc9b 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f7ff fc98 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010d8:	200f      	movs	r0, #15
 80010da:	f7ff fc95 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fc92 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fc8f 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fc8c 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fc89 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80010f6:	20e1      	movs	r0, #225	; 0xe1
 80010f8:	f7ff fc76 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fc83 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001102:	2015      	movs	r0, #21
 8001104:	f7ff fc80 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001108:	2017      	movs	r0, #23
 800110a:	f7ff fc7d 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800110e:	2007      	movs	r0, #7
 8001110:	f7ff fc7a 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001114:	2011      	movs	r0, #17
 8001116:	f7ff fc77 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800111a:	2006      	movs	r0, #6
 800111c:	f7ff fc74 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001120:	202b      	movs	r0, #43	; 0x2b
 8001122:	f7ff fc71 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001126:	2056      	movs	r0, #86	; 0x56
 8001128:	f7ff fc6e 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800112c:	203c      	movs	r0, #60	; 0x3c
 800112e:	f7ff fc6b 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001132:	2005      	movs	r0, #5
 8001134:	f7ff fc68 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001138:	2010      	movs	r0, #16
 800113a:	f7ff fc65 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800113e:	200f      	movs	r0, #15
 8001140:	f7ff fc62 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001144:	203f      	movs	r0, #63	; 0x3f
 8001146:	f7ff fc5f 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800114a:	203f      	movs	r0, #63	; 0x3f
 800114c:	f7ff fc5c 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001150:	200f      	movs	r0, #15
 8001152:	f7ff fc59 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001156:	202b      	movs	r0, #43	; 0x2b
 8001158:	f7ff fc46 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fc53 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fc50 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff fc4d 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800116e:	203f      	movs	r0, #63	; 0x3f
 8001170:	f7ff fc4a 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001174:	202a      	movs	r0, #42	; 0x2a
 8001176:	f7ff fc37 	bl	80009e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fc44 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fc41 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff fc3e 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800118c:	20ef      	movs	r0, #239	; 0xef
 800118e:	f7ff fc3b 	bl	8000a08 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001192:	2011      	movs	r0, #17
 8001194:	f7ff fc28 	bl	80009e8 <LCD_WR_REG>
	HAL_Delay(120);
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f001 fbbb 	bl	8002914 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800119e:	2029      	movs	r0, #41	; 0x29
 80011a0:	f7ff fc22 	bl	80009e8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <lcd_init+0x2bc>)
 80011ac:	f001 fe84 	bl	8002eb8 <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020800 	.word	0x40020800
 80011b8:	20000138 	.word	0x20000138
 80011bc:	40020000 	.word	0x40020000

080011c0 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <led7_init+0x14>)
 80011ca:	f001 fe75 	bl	8002eb8 <HAL_GPIO_WritePin>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021800 	.word	0x40021800

080011d8 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80011dc:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <led7_Scan+0x104>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <led7_Scan+0x104>)
 80011e6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80011e8:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <led7_Scan+0x108>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <led7_Scan+0x10c>)
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <led7_Scan+0x104>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <led7_Scan+0x104>)
 8001204:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <led7_Scan+0x108>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d846      	bhi.n	800129c <led7_Scan+0xc4>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <led7_Scan+0x3c>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001225 	.word	0x08001225
 8001218:	08001243 	.word	0x08001243
 800121c:	08001261 	.word	0x08001261
 8001220:	0800127f 	.word	0x0800127f
	case 0:
		spi_buffer |= 0x00b0;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <led7_Scan+0x104>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <led7_Scan+0x104>)
 8001230:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <led7_Scan+0x104>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <led7_Scan+0x104>)
 800123e:	801a      	strh	r2, [r3, #0]
		break;
 8001240:	e02d      	b.n	800129e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <led7_Scan+0x104>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <led7_Scan+0x104>)
 800124e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <led7_Scan+0x104>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	f023 0320 	bic.w	r3, r3, #32
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <led7_Scan+0x104>)
 800125c:	801a      	strh	r2, [r3, #0]
		break;
 800125e:	e01e      	b.n	800129e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <led7_Scan+0x104>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <led7_Scan+0x104>)
 800126c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <led7_Scan+0x104>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	f023 0310 	bic.w	r3, r3, #16
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <led7_Scan+0x104>)
 800127a:	801a      	strh	r2, [r3, #0]
		break;
 800127c:	e00f      	b.n	800129e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <led7_Scan+0x104>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <led7_Scan+0x104>)
 800128a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <led7_Scan+0x104>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <led7_Scan+0x104>)
 8001298:	801a      	strh	r2, [r3, #0]
		break;
 800129a:	e000      	b.n	800129e <led7_Scan+0xc6>
	default:
		break;
 800129c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <led7_Scan+0x108>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	425a      	negs	r2, r3
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	bf58      	it	pl
 80012b0:	4253      	negpl	r3, r2
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <led7_Scan+0x108>)
 80012b6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <led7_Scan+0x110>)
 80012be:	f001 fdfb 	bl	8002eb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80012c2:	2301      	movs	r3, #1
 80012c4:	2202      	movs	r2, #2
 80012c6:	4905      	ldr	r1, [pc, #20]	; (80012dc <led7_Scan+0x104>)
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <led7_Scan+0x114>)
 80012ca:	f002 fad8 	bl	800387e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2140      	movs	r1, #64	; 0x40
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <led7_Scan+0x110>)
 80012d4:	f001 fdf0 	bl	8002eb8 <HAL_GPIO_WritePin>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000004 	.word	0x20000004
 80012e0:	200000ac 	.word	0x200000ac
 80012e4:	20000000 	.word	0x20000000
 80012e8:	40021800 	.word	0x40021800
 80012ec:	20001140 	.word	0x20001140

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f001 fa9c 	bl	8002830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f830 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f7ff fa7c 	bl	80007f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001300:	f001 f9fa 	bl	80026f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001304:	f001 f846 	bl	8002394 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001308:	f7ff f9a6 	bl	8000658 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800130c:	f000 f890 	bl	8001430 <system_init>
  lcd_Clear(WHITE);
 8001310:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001314:	f7ff fbe6 	bl	8000ae4 <lcd_Clear>
//  test_lcd();
  /* USER CODE END 2 */
//  enterIDFunction();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(time(0));
 8001318:	2000      	movs	r0, #0
 800131a:	f003 fe05 	bl	8004f28 <time>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4613      	mov	r3, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fd91 	bl	8004e4c <srand>
  snakeInit();
 800132a:	f000 fe75 	bl	8002018 <snakeInit>
//  lcd_ShowIntNum(100, 50, xFruit, 4, RED, WHITE, 24);
//  lcd_ShowIntNum(150, 50, yFruit, 4, RED, WHITE, 24);
  while (1)
  {
	  while(!flag_timer2);
 800132e:	bf00      	nop
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <main+0x64>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0fb      	beq.n	8001330 <main+0x40>
	  flag_timer2 = 0;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <main+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800133e:	f7ff f91f 	bl	8000580 <button_Scan>
	  if (flagEat== 0)
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <main+0x68>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <main+0x5e>
	  {
		  generateFruit();
 800134a:	f000 ff63 	bl	8002214 <generateFruit>
	  }
	  snakeRun();
 800134e:	f000 fe19 	bl	8001f84 <snakeRun>
	  while(!flag_timer2);
 8001352:	e7ec      	b.n	800132e <main+0x3e>
 8001354:	200000b4 	.word	0x200000b4
 8001358:	200000b0 	.word	0x200000b0

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	; 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fd66 	bl	8004e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <SystemClock_Config+0xcc>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <SystemClock_Config+0xcc>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <SystemClock_Config+0xcc>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <SystemClock_Config+0xd0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <SystemClock_Config+0xd0>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <SystemClock_Config+0xd0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c0:	2310      	movs	r3, #16
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013cc:	2308      	movs	r3, #8
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013d0:	23a8      	movs	r3, #168	; 0xa8
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fd83 	bl	8002eec <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ec:	f000 f842 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001402:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001406:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2105      	movs	r1, #5
 800140e:	4618      	mov	r0, r3
 8001410:	f001 ffe4 	bl	80033dc <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800141a:	f000 f82b 	bl	8001474 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3750      	adds	r7, #80	; 0x50
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2120      	movs	r1, #32
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <system_init+0x40>)
 800143a:	f001 fd3d 	bl	8002eb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <system_init+0x40>)
 8001444:	f001 fd38 	bl	8002eb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2110      	movs	r1, #16
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <system_init+0x40>)
 800144e:	f001 fd33 	bl	8002eb8 <HAL_GPIO_WritePin>
	  timer_init();
 8001452:	f000 ff4f 	bl	80022f4 <timer_init>
	  led7_init();
 8001456:	f7ff feb3 	bl	80011c0 <led7_init>
	  button_init();
 800145a:	f7ff f885 	bl	8000568 <button_init>
	  lcd_init();
 800145e:	f7ff fd4f 	bl	8000f00 <lcd_init>
	  setTimer2(1000);
 8001462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001466:	f000 ff4f 	bl	8002308 <setTimer2>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <goLeft>:
}SNAKE;

SNAKE snakeObject;

void goLeft()
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 8001486:	4b8f      	ldr	r3, [pc, #572]	; (80016c4 <goLeft+0x244>)
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 8115 	bne.w	80016ba <goLeft+0x23a>
	{
		switch (snakeObject.snakeDirectionHead)
 8001490:	4b8c      	ldr	r3, [pc, #560]	; (80016c4 <goLeft+0x244>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8001498:	4b8a      	ldr	r3, [pc, #552]	; (80016c4 <goLeft+0x244>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4798      	blx	r3
			break;
 800149e:	e10d      	b.n	80016bc <goLeft+0x23c>
		default:
			snakeObject.snakeDirectionHead= LEFT;
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <goLeft+0x244>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e0ff      	b.n	80016ac <goLeft+0x22c>
			{
				if (i== 0)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f040 8096 	bne.w	80015e0 <goLeft+0x160>
				{
					tempSnake1= snakeObject.infoSnake[i];
 80014b4:	4a83      	ldr	r2, [pc, #524]	; (80016c4 <goLeft+0x244>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3305      	adds	r3, #5
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	3304      	adds	r3, #4
 80014c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014c8:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x-= snakeWidth;
 80014cc:	4a7d      	ldr	r2, [pc, #500]	; (80016c4 <goLeft+0x244>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3305      	adds	r3, #5
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f1a3 0208 	sub.w	r2, r3, #8
 80014dc:	4979      	ldr	r1, [pc, #484]	; (80016c4 <goLeft+0x244>)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3305      	adds	r3, #5
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y= snakeObject.infoSnake[i].y;
 80014e8:	4a76      	ldr	r2, [pc, #472]	; (80016c4 <goLeft+0x244>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3305      	adds	r3, #5
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	4973      	ldr	r1, [pc, #460]	; (80016c4 <goLeft+0x244>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3305      	adds	r3, #5
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	609a      	str	r2, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001500:	4a70      	ldr	r2, [pc, #448]	; (80016c4 <goLeft+0x244>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3305      	adds	r3, #5
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	b298      	uxth	r0, r3
 800150e:	4a6d      	ldr	r2, [pc, #436]	; (80016c4 <goLeft+0x244>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3305      	adds	r3, #5
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	b299      	uxth	r1, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 800151c:	4a69      	ldr	r2, [pc, #420]	; (80016c4 <goLeft+0x244>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3305      	adds	r3, #5
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001528:	b29b      	uxth	r3, r3
 800152a:	3308      	adds	r3, #8
 800152c:	b29a      	uxth	r2, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 800152e:	4c65      	ldr	r4, [pc, #404]	; (80016c4 <goLeft+0x244>)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3305      	adds	r3, #5
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4423      	add	r3, r4
 8001538:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800153a:	b29b      	uxth	r3, r3
 800153c:	3308      	adds	r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001544:	9400      	str	r4, [sp, #0]
 8001546:	f7ff faff 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <goLeft+0x244>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3305      	adds	r3, #5
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	b298      	uxth	r0, r3
 8001558:	4a5a      	ldr	r2, [pc, #360]	; (80016c4 <goLeft+0x244>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3305      	adds	r3, #5
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y +4, BLUE);
 8001566:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <goLeft+0x244>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3305      	adds	r3, #5
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001572:	b29b      	uxth	r3, r3
 8001574:	3304      	adds	r3, #4
 8001576:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y +4, BLUE);
 8001578:	4c52      	ldr	r4, [pc, #328]	; (80016c4 <goLeft+0x244>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3305      	adds	r3, #5
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4423      	add	r3, r4
 8001582:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001584:	b29b      	uxth	r3, r3
 8001586:	3304      	adds	r3, #4
 8001588:	b29b      	uxth	r3, r3
 800158a:	241f      	movs	r4, #31
 800158c:	9400      	str	r4, [sp, #0]
 800158e:	f7ff fadb 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y + 5,
 8001592:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <goLeft+0x244>)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3305      	adds	r3, #5
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	b298      	uxth	r0, r3
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <goLeft+0x244>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3305      	adds	r3, #5
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3305      	adds	r3, #5
 80015b0:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y + 8, BLUE);
 80015b2:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <goLeft+0x244>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3305      	adds	r3, #5
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y + 5,
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3304      	adds	r3, #4
 80015c2:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y + 8, BLUE);
 80015c4:	4c3f      	ldr	r4, [pc, #252]	; (80016c4 <goLeft+0x244>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3305      	adds	r3, #5
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4423      	add	r3, r4
 80015ce:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y + 5,
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3308      	adds	r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	241f      	movs	r4, #31
 80015d8:	9400      	str	r4, [sp, #0]
 80015da:	f7ff fab5 	bl	8000b48 <lcd_Fill>
 80015de:	e062      	b.n	80016a6 <goLeft+0x226>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <goLeft+0x244>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3305      	adds	r3, #5
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	1d3a      	adds	r2, r7, #4
 80015ec:	3304      	adds	r3, #4
 80015ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 80015f6:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <goLeft+0x244>)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3305      	adds	r3, #5
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	3304      	adds	r3, #4
 8001602:	f107 020c 	add.w	r2, r7, #12
 8001606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	1d3a      	adds	r2, r7, #4
 8001614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001618:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d123      	bne.n	800166a <goLeft+0x1ea>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001622:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <goLeft+0x244>)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3305      	adds	r3, #5
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	b298      	uxth	r0, r3
 8001630:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <goLeft+0x244>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3305      	adds	r3, #5
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <goLeft+0x244>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3305      	adds	r3, #5
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800164a:	b29b      	uxth	r3, r3
 800164c:	3308      	adds	r3, #8
 800164e:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8001650:	4c1c      	ldr	r4, [pc, #112]	; (80016c4 <goLeft+0x244>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3305      	adds	r3, #5
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4423      	add	r3, r4
 800165a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800165c:	b29b      	uxth	r3, r3
 800165e:	3308      	adds	r3, #8
 8001660:	b29b      	uxth	r3, r3
 8001662:	2400      	movs	r4, #0
 8001664:	9400      	str	r4, [sp, #0]
 8001666:	f7ff fa6f 	bl	8000b48 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <goLeft+0x244>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	3b01      	subs	r3, #1
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	429a      	cmp	r2, r3
 8001674:	d117      	bne.n	80016a6 <goLeft+0x226>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <goLeft+0x244>)
 8001678:	331c      	adds	r3, #28
 800167a:	1d3a      	adds	r2, r7, #4
 800167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001680:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	b298      	uxth	r0, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	b299      	uxth	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3308      	adds	r3, #8
 8001692:	b29a      	uxth	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3308      	adds	r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80016a0:	9400      	str	r4, [sp, #0]
 80016a2:	f7ff fa51 	bl	8000b48 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <goLeft+0x244>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	f6ff aefa 	blt.w	80014ac <goLeft+0x2c>
					}
				}
			}
			break;
 80016b8:	e000      	b.n	80016bc <goLeft+0x23c>
		}
	}
 80016ba:	bf00      	nop
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	20000174 	.word	0x20000174

080016c8 <goRight>:

void goRight()
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 80016ce:	4b91      	ldr	r3, [pc, #580]	; (8001914 <goRight+0x24c>)
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8119 	bne.w	800190a <goRight+0x242>
	{
		switch (snakeObject.snakeDirectionHead)
 80016d8:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <goRight+0x24c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d103      	bne.n	80016e8 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <goRight+0x24c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4798      	blx	r3
			break;
 80016e6:	e111      	b.n	800190c <goRight+0x244>
		default:
			snakeObject.snakeDirectionHead= RIGHT;
 80016e8:	4b8a      	ldr	r3, [pc, #552]	; (8001914 <goRight+0x24c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e103      	b.n	80018fc <goRight+0x234>
			{
				if (i== 0)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 809a 	bne.w	8001830 <goRight+0x168>
				{
					tempSnake1= snakeObject.infoSnake[i];
 80016fc:	4a85      	ldr	r2, [pc, #532]	; (8001914 <goRight+0x24c>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3305      	adds	r3, #5
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	3304      	adds	r3, #4
 800170c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001710:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x+= snakeWidth;
 8001714:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <goRight+0x24c>)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3305      	adds	r3, #5
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f103 0208 	add.w	r2, r3, #8
 8001724:	497b      	ldr	r1, [pc, #492]	; (8001914 <goRight+0x24c>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3305      	adds	r3, #5
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y= snakeObject.infoSnake[i].y;
 8001730:	4a78      	ldr	r2, [pc, #480]	; (8001914 <goRight+0x24c>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3305      	adds	r3, #5
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4975      	ldr	r1, [pc, #468]	; (8001914 <goRight+0x24c>)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3305      	adds	r3, #5
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	609a      	str	r2, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001748:	4a72      	ldr	r2, [pc, #456]	; (8001914 <goRight+0x24c>)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3305      	adds	r3, #5
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	b298      	uxth	r0, r3
 8001756:	4a6f      	ldr	r2, [pc, #444]	; (8001914 <goRight+0x24c>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3305      	adds	r3, #5
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	b299      	uxth	r1, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 8001764:	4a6b      	ldr	r2, [pc, #428]	; (8001914 <goRight+0x24c>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3305      	adds	r3, #5
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001770:	b29b      	uxth	r3, r3
 8001772:	3308      	adds	r3, #8
 8001774:	b29a      	uxth	r2, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 8001776:	4c67      	ldr	r4, [pc, #412]	; (8001914 <goRight+0x24c>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3305      	adds	r3, #5
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4423      	add	r3, r4
 8001780:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001782:	b29b      	uxth	r3, r3
 8001784:	3308      	adds	r3, #8
 8001786:	b29b      	uxth	r3, r3
 8001788:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800178c:	9400      	str	r4, [sp, #0]
 800178e:	f7ff f9db 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 8001792:	4a60      	ldr	r2, [pc, #384]	; (8001914 <goRight+0x24c>)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3305      	adds	r3, #5
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3305      	adds	r3, #5
 80017a2:	b298      	uxth	r0, r3
 80017a4:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <goRight+0x24c>)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3305      	adds	r3, #5
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y +4, BLUE);
 80017b2:	4a58      	ldr	r2, [pc, #352]	; (8001914 <goRight+0x24c>)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3305      	adds	r3, #5
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3308      	adds	r3, #8
 80017c2:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y +4, BLUE);
 80017c4:	4c53      	ldr	r4, [pc, #332]	; (8001914 <goRight+0x24c>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3305      	adds	r3, #5
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4423      	add	r3, r4
 80017ce:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3304      	adds	r3, #4
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	241f      	movs	r4, #31
 80017d8:	9400      	str	r4, [sp, #0]
 80017da:	f7ff f9b5 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 80017de:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <goRight+0x24c>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3305      	adds	r3, #5
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3305      	adds	r3, #5
 80017ee:	b298      	uxth	r0, r3
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <goRight+0x24c>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3305      	adds	r3, #5
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3305      	adds	r3, #5
 8001800:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 8, BLUE);
 8001802:	4a44      	ldr	r2, [pc, #272]	; (8001914 <goRight+0x24c>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3305      	adds	r3, #5
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 800180e:	b29b      	uxth	r3, r3
 8001810:	3308      	adds	r3, #8
 8001812:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 8, BLUE);
 8001814:	4c3f      	ldr	r4, [pc, #252]	; (8001914 <goRight+0x24c>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3305      	adds	r3, #5
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4423      	add	r3, r4
 800181e:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8001820:	b29b      	uxth	r3, r3
 8001822:	3308      	adds	r3, #8
 8001824:	b29b      	uxth	r3, r3
 8001826:	241f      	movs	r4, #31
 8001828:	9400      	str	r4, [sp, #0]
 800182a:	f7ff f98d 	bl	8000b48 <lcd_Fill>
 800182e:	e062      	b.n	80018f6 <goRight+0x22e>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 8001830:	4a38      	ldr	r2, [pc, #224]	; (8001914 <goRight+0x24c>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3305      	adds	r3, #5
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	1d3a      	adds	r2, r7, #4
 800183c:	3304      	adds	r3, #4
 800183e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001842:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <goRight+0x24c>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3305      	adds	r3, #5
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	f107 020c 	add.w	r2, r7, #12
 8001856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800185a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	1d3a      	adds	r2, r7, #4
 8001864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001868:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d123      	bne.n	80018ba <goRight+0x1f2>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <goRight+0x24c>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3305      	adds	r3, #5
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	b298      	uxth	r0, r3
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <goRight+0x24c>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3305      	adds	r3, #5
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <goRight+0x24c>)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3305      	adds	r3, #5
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800189a:	b29b      	uxth	r3, r3
 800189c:	3308      	adds	r3, #8
 800189e:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 80018a0:	4c1c      	ldr	r4, [pc, #112]	; (8001914 <goRight+0x24c>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3305      	adds	r3, #5
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4423      	add	r3, r4
 80018aa:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3308      	adds	r3, #8
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2400      	movs	r4, #0
 80018b4:	9400      	str	r4, [sp, #0]
 80018b6:	f7ff f947 	bl	8000b48 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <goRight+0x24c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	3b01      	subs	r3, #1
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d117      	bne.n	80018f6 <goRight+0x22e>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <goRight+0x24c>)
 80018c8:	331c      	adds	r3, #28
 80018ca:	1d3a      	adds	r2, r7, #4
 80018cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d0:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	b298      	uxth	r0, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	b299      	uxth	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3308      	adds	r3, #8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3308      	adds	r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80018f0:	9400      	str	r4, [sp, #0]
 80018f2:	f7ff f929 	bl	8000b48 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <goRight+0x24c>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	429a      	cmp	r2, r3
 8001904:	f6ff aef6 	blt.w	80016f4 <goRight+0x2c>
					}
				}
			}
			break;
 8001908:	e000      	b.n	800190c <goRight+0x244>
		}
	}
 800190a:	bf00      	nop
}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	20000174 	.word	0x20000174

08001918 <goUp>:

void goUp()
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 800191e:	4b8f      	ldr	r3, [pc, #572]	; (8001b5c <goUp+0x244>)
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 8115 	bne.w	8001b52 <goUp+0x23a>
	{
		switch (snakeObject.snakeDirectionHead)
 8001928:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <goUp+0x244>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d103      	bne.n	8001938 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 8001930:	4b8a      	ldr	r3, [pc, #552]	; (8001b5c <goUp+0x244>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4798      	blx	r3
			break;
 8001936:	e10d      	b.n	8001b54 <goUp+0x23c>
		default:
			snakeObject.snakeDirectionHead= UP;
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <goUp+0x244>)
 800193a:	2203      	movs	r2, #3
 800193c:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e0ff      	b.n	8001b44 <goUp+0x22c>
			{
				if (i== 0)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8096 	bne.w	8001a78 <goUp+0x160>
				{
					tempSnake1= snakeObject.infoSnake[i];
 800194c:	4a83      	ldr	r2, [pc, #524]	; (8001b5c <goUp+0x244>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3305      	adds	r3, #5
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	3304      	adds	r3, #4
 800195c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001960:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8001964:	4a7d      	ldr	r2, [pc, #500]	; (8001b5c <goUp+0x244>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3305      	adds	r3, #5
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	497a      	ldr	r1, [pc, #488]	; (8001b5c <goUp+0x244>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3305      	adds	r3, #5
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y-= snakeWidth;
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <goUp+0x244>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3305      	adds	r3, #5
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f1a3 0208 	sub.w	r2, r3, #8
 800198c:	4973      	ldr	r1, [pc, #460]	; (8001b5c <goUp+0x244>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3305      	adds	r3, #5
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	609a      	str	r2, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001998:	4a70      	ldr	r2, [pc, #448]	; (8001b5c <goUp+0x244>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3305      	adds	r3, #5
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	b298      	uxth	r0, r3
 80019a6:	4a6d      	ldr	r2, [pc, #436]	; (8001b5c <goUp+0x244>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3305      	adds	r3, #5
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	b299      	uxth	r1, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 80019b4:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <goUp+0x244>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3305      	adds	r3, #5
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3308      	adds	r3, #8
 80019c4:	b29a      	uxth	r2, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 80019c6:	4c65      	ldr	r4, [pc, #404]	; (8001b5c <goUp+0x244>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3305      	adds	r3, #5
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4423      	add	r3, r4
 80019d0:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3308      	adds	r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80019dc:	9400      	str	r4, [sp, #0]
 80019de:	f7ff f8b3 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80019e2:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <goUp+0x244>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3305      	adds	r3, #5
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b298      	uxth	r0, r3
 80019f0:	4a5a      	ldr	r2, [pc, #360]	; (8001b5c <goUp+0x244>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3305      	adds	r3, #5
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y +4, BLUE);
 80019fe:	4a57      	ldr	r2, [pc, #348]	; (8001b5c <goUp+0x244>)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3305      	adds	r3, #5
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y +4, BLUE);
 8001a10:	4c52      	ldr	r4, [pc, #328]	; (8001b5c <goUp+0x244>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3305      	adds	r3, #5
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4423      	add	r3, r4
 8001a1a:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3304      	adds	r3, #4
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	241f      	movs	r4, #31
 8001a24:	9400      	str	r4, [sp, #0]
 8001a26:	f7ff f88f 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 8001a2a:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <goUp+0x244>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3305      	adds	r3, #5
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3305      	adds	r3, #5
 8001a3a:	b298      	uxth	r0, r3
 8001a3c:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <goUp+0x244>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3305      	adds	r3, #5
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 4, BLUE);
 8001a4a:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <goUp+0x244>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3305      	adds	r3, #5
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3308      	adds	r3, #8
 8001a5a:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 4, BLUE);
 8001a5c:	4c3f      	ldr	r4, [pc, #252]	; (8001b5c <goUp+0x244>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3305      	adds	r3, #5
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4423      	add	r3, r4
 8001a66:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	241f      	movs	r4, #31
 8001a70:	9400      	str	r4, [sp, #0]
 8001a72:	f7ff f869 	bl	8000b48 <lcd_Fill>
 8001a76:	e062      	b.n	8001b3e <goUp+0x226>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 8001a78:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <goUp+0x244>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	1d3a      	adds	r2, r7, #4
 8001a84:	3304      	adds	r3, #4
 8001a86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a8a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <goUp+0x244>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3305      	adds	r3, #5
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	f107 020c 	add.w	r2, r7, #12
 8001a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa2:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	1d3a      	adds	r2, r7, #4
 8001aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab0:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d123      	bne.n	8001b02 <goUp+0x1ea>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001aba:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <goUp+0x244>)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3305      	adds	r3, #5
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	b298      	uxth	r0, r3
 8001ac8:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <goUp+0x244>)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3305      	adds	r3, #5
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8001ad6:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <goUp+0x244>)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3305      	adds	r3, #5
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3308      	adds	r3, #8
 8001ae6:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8001ae8:	4c1c      	ldr	r4, [pc, #112]	; (8001b5c <goUp+0x244>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3305      	adds	r3, #5
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4423      	add	r3, r4
 8001af2:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3308      	adds	r3, #8
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2400      	movs	r4, #0
 8001afc:	9400      	str	r4, [sp, #0]
 8001afe:	f7ff f823 	bl	8000b48 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <goUp+0x244>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	3b01      	subs	r3, #1
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d117      	bne.n	8001b3e <goUp+0x226>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <goUp+0x244>)
 8001b10:	331c      	adds	r3, #28
 8001b12:	1d3a      	adds	r2, r7, #4
 8001b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b18:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	b299      	uxth	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3308      	adds	r3, #8
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3308      	adds	r3, #8
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001b38:	9400      	str	r4, [sp, #0]
 8001b3a:	f7ff f805 	bl	8000b48 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <goUp+0x244>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	f6ff aefa 	blt.w	8001944 <goUp+0x2c>
					}
				}
			}
			break;
 8001b50:	e000      	b.n	8001b54 <goUp+0x23c>
		}
	}
 8001b52:	bf00      	nop
}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	20000174 	.word	0x20000174

08001b60 <goDown>:

void goDown()
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <goDown+0x24c>)
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 8119 	bne.w	8001da2 <goDown+0x242>
	{
		switch (snakeObject.snakeDirectionHead)
 8001b70:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <goDown+0x24c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d103      	bne.n	8001b80 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <goDown+0x24c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4798      	blx	r3
			break;
 8001b7e:	e111      	b.n	8001da4 <goDown+0x244>
		default:
			snakeObject.snakeDirectionHead= DOWN;
 8001b80:	4b8a      	ldr	r3, [pc, #552]	; (8001dac <goDown+0x24c>)
 8001b82:	2202      	movs	r2, #2
 8001b84:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e103      	b.n	8001d94 <goDown+0x234>
			{
				if (i== 0)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 809a 	bne.w	8001cc8 <goDown+0x168>
				{
					tempSnake1= snakeObject.infoSnake[i];
 8001b94:	4a85      	ldr	r2, [pc, #532]	; (8001dac <goDown+0x24c>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3305      	adds	r3, #5
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ba8:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8001bac:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <goDown+0x24c>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3305      	adds	r3, #5
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	497c      	ldr	r1, [pc, #496]	; (8001dac <goDown+0x24c>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3305      	adds	r3, #5
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y+= snakeWidth;
 8001bc4:	4a79      	ldr	r2, [pc, #484]	; (8001dac <goDown+0x24c>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3305      	adds	r3, #5
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f103 0208 	add.w	r2, r3, #8
 8001bd4:	4975      	ldr	r1, [pc, #468]	; (8001dac <goDown+0x24c>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3305      	adds	r3, #5
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	609a      	str	r2, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001be0:	4a72      	ldr	r2, [pc, #456]	; (8001dac <goDown+0x24c>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3305      	adds	r3, #5
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	b298      	uxth	r0, r3
 8001bee:	4a6f      	ldr	r2, [pc, #444]	; (8001dac <goDown+0x24c>)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3305      	adds	r3, #5
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	b299      	uxth	r1, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 8001bfc:	4a6b      	ldr	r2, [pc, #428]	; (8001dac <goDown+0x24c>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3305      	adds	r3, #5
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	b29a      	uxth	r2, r3
						snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 8001c0e:	4c67      	ldr	r4, [pc, #412]	; (8001dac <goDown+0x24c>)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3305      	adds	r3, #5
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4423      	add	r3, r4
 8001c18:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3308      	adds	r3, #8
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001c24:	9400      	str	r4, [sp, #0]
 8001c26:	f7fe ff8f 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y+ 5,
 8001c2a:	4a60      	ldr	r2, [pc, #384]	; (8001dac <goDown+0x24c>)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3305      	adds	r3, #5
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	b298      	uxth	r0, r3
 8001c38:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <goDown+0x24c>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3305      	adds	r3, #5
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3305      	adds	r3, #5
 8001c48:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y +8, BLUE);
 8001c4a:	4a58      	ldr	r2, [pc, #352]	; (8001dac <goDown+0x24c>)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3305      	adds	r3, #5
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y+ 5,
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3304      	adds	r3, #4
 8001c5a:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 4, snakeObject.infoSnake[i].y +8, BLUE);
 8001c5c:	4c53      	ldr	r4, [pc, #332]	; (8001dac <goDown+0x24c>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3305      	adds	r3, #5
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4423      	add	r3, r4
 8001c66:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y+ 5,
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	241f      	movs	r4, #31
 8001c70:	9400      	str	r4, [sp, #0]
 8001c72:	f7fe ff69 	bl	8000b48 <lcd_Fill>
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8001c76:	4a4d      	ldr	r2, [pc, #308]	; (8001dac <goDown+0x24c>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3305      	adds	r3, #5
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3305      	adds	r3, #5
 8001c86:	b298      	uxth	r0, r3
 8001c88:	4a48      	ldr	r2, [pc, #288]	; (8001dac <goDown+0x24c>)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3305      	adds	r3, #5
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3305      	adds	r3, #5
 8001c98:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 8, BLUE);
 8001c9a:	4a44      	ldr	r2, [pc, #272]	; (8001dac <goDown+0x24c>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	685b      	ldr	r3, [r3, #4]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3308      	adds	r3, #8
 8001caa:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 8, BLUE);
 8001cac:	4c3f      	ldr	r4, [pc, #252]	; (8001dac <goDown+0x24c>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3305      	adds	r3, #5
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4423      	add	r3, r4
 8001cb6:	689b      	ldr	r3, [r3, #8]
					lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3308      	adds	r3, #8
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	241f      	movs	r4, #31
 8001cc0:	9400      	str	r4, [sp, #0]
 8001cc2:	f7fe ff41 	bl	8000b48 <lcd_Fill>
 8001cc6:	e062      	b.n	8001d8e <goDown+0x22e>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 8001cc8:	4a38      	ldr	r2, [pc, #224]	; (8001dac <goDown+0x24c>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3305      	adds	r3, #5
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	1d3a      	adds	r2, r7, #4
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cda:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 8001cde:	4a33      	ldr	r2, [pc, #204]	; (8001dac <goDown+0x24c>)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3305      	adds	r3, #5
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	f107 020c 	add.w	r2, r7, #12
 8001cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf2:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	1d3a      	adds	r2, r7, #4
 8001cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d00:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d123      	bne.n	8001d52 <goDown+0x1f2>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001d0a:	4a28      	ldr	r2, [pc, #160]	; (8001dac <goDown+0x24c>)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3305      	adds	r3, #5
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	b298      	uxth	r0, r3
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <goDown+0x24c>)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3305      	adds	r3, #5
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8001d26:	4a21      	ldr	r2, [pc, #132]	; (8001dac <goDown+0x24c>)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3305      	adds	r3, #5
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3308      	adds	r3, #8
 8001d36:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8001d38:	4c1c      	ldr	r4, [pc, #112]	; (8001dac <goDown+0x24c>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3305      	adds	r3, #5
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4423      	add	r3, r4
 8001d42:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3308      	adds	r3, #8
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	9400      	str	r4, [sp, #0]
 8001d4e:	f7fe fefb 	bl	8000b48 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <goDown+0x24c>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	3b01      	subs	r3, #1
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d117      	bne.n	8001d8e <goDown+0x22e>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <goDown+0x24c>)
 8001d60:	331c      	adds	r3, #28
 8001d62:	1d3a      	adds	r2, r7, #4
 8001d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d68:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	b298      	uxth	r0, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	b299      	uxth	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3308      	adds	r3, #8
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3308      	adds	r3, #8
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001d88:	9400      	str	r4, [sp, #0]
 8001d8a:	f7fe fedd 	bl	8000b48 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <goDown+0x24c>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	f6ff aef6 	blt.w	8001b8c <goDown+0x2c>
					}
				}
			}
			break;
 8001da0:	e000      	b.n	8001da4 <goDown+0x244>
		}
	}
 8001da2:	bf00      	nop
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	20000174 	.word	0x20000174

08001db0 <checkHead>:
		}
	}
}

void checkHead()
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(100, 100, snakeObject.infoSnake[0].x, 3, BLACK, WHITE, 24);
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <checkHead+0x174>)
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	2318      	movs	r3, #24
 8001dbe:	9302      	str	r3, [sp, #8]
 8001dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2303      	movs	r3, #3
 8001dcc:	2164      	movs	r1, #100	; 0x64
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	f7fe fff4 	bl	8000dbc <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, snakeObject.infoSnake[0].y, 3, BLACK, WHITE, 24);
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <checkHead+0x174>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	2318      	movs	r3, #24
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2300      	movs	r3, #0
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2303      	movs	r3, #3
 8001dea:	2164      	movs	r1, #100	; 0x64
 8001dec:	2096      	movs	r0, #150	; 0x96
 8001dee:	f7fe ffe5 	bl	8000dbc <lcd_ShowIntNum>
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 232)
 8001df2:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <checkHead+0x174>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f2c0 8091 	blt.w	8001f1e <checkHead+0x16e>
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <checkHead+0x174>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	2be8      	cmp	r3, #232	; 0xe8
 8001e02:	f300 808c 	bgt.w	8001f1e <checkHead+0x16e>
		|| (snakeObject.infoSnake[0].y < 64) || (snakeObject.infoSnake[0].y > 312))
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <checkHead+0x174>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8001e0c:	f340 8087 	ble.w	8001f1e <checkHead+0x16e>
 8001e10:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <checkHead+0x174>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001e18:	f300 8081 	bgt.w	8001f1e <checkHead+0x16e>
	{
		// show gameover
	}
	else
	{
		for (int i= 1; i < snakeObject.snakeLength; i++)
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e016      	b.n	8001e50 <checkHead+0xa0>
		{
			if (snakeObject.infoSnake[0].x== snakeObject.infoSnake[i].x
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <checkHead+0x174>)
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	493f      	ldr	r1, [pc, #252]	; (8001f24 <checkHead+0x174>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3305      	adds	r3, #5
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d109      	bne.n	8001e4a <checkHead+0x9a>
				&& snakeObject.infoSnake[0].y== snakeObject.infoSnake[i].y)
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <checkHead+0x174>)
 8001e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3a:	493a      	ldr	r1, [pc, #232]	; (8001f24 <checkHead+0x174>)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3305      	adds	r3, #5
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d068      	beq.n	8001f1c <checkHead+0x16c>
		for (int i= 1; i < snakeObject.snakeLength; i++)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <checkHead+0x174>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbe3      	blt.n	8001e22 <checkHead+0x72>
			{
				// showGameover
				return;
			}
		}
		lcd_ShowIntNum(100, 200, 14, 3, WHITE, WHITE, 24);
 8001e5a:	2318      	movs	r3, #24
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	220e      	movs	r2, #14
 8001e6e:	21c8      	movs	r1, #200	; 0xc8
 8001e70:	2064      	movs	r0, #100	; 0x64
 8001e72:	f7fe ffa3 	bl	8000dbc <lcd_ShowIntNum>
		if (snakeObject.infoSnake[0].x== xFruit && snakeObject.infoSnake[0].y== yFruit)
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <checkHead+0x174>)
 8001e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <checkHead+0x178>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d14d      	bne.n	8001f1e <checkHead+0x16e>
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <checkHead+0x174>)
 8001e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <checkHead+0x17c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d147      	bne.n	8001f1e <checkHead+0x16e>
		{
			xFruit= INT_MIN;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <checkHead+0x178>)
 8001e90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e94:	601a      	str	r2, [r3, #0]
			yFruit= INT_MIN;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <checkHead+0x17c>)
 8001e98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e9c:	601a      	str	r2, [r3, #0]
			snakeObject.snakeLength+= 1;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <checkHead+0x174>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <checkHead+0x174>)
 8001ea6:	6253      	str	r3, [r2, #36]	; 0x24
			snakeObject.infoSnake[snakeObject.snakeLength-1].x= snakeObject.infoTempSnakeTail.x;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <checkHead+0x174>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	3b01      	subs	r3, #1
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <checkHead+0x174>)
 8001eb0:	69d2      	ldr	r2, [r2, #28]
 8001eb2:	491c      	ldr	r1, [pc, #112]	; (8001f24 <checkHead+0x174>)
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	605a      	str	r2, [r3, #4]
			snakeObject.infoSnake[snakeObject.snakeLength-1 ].y= snakeObject.infoTempSnakeTail.y;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <checkHead+0x174>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <checkHead+0x174>)
 8001ec4:	6a12      	ldr	r2, [r2, #32]
 8001ec6:	4917      	ldr	r1, [pc, #92]	; (8001f24 <checkHead+0x174>)
 8001ec8:	3305      	adds	r3, #5
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	609a      	str	r2, [r3, #8]
			int x= snakeObject.infoSnake[snakeObject.snakeLength-1].x;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <checkHead+0x174>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <checkHead+0x174>)
 8001ed8:	3305      	adds	r3, #5
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60bb      	str	r3, [r7, #8]
			int y= snakeObject.infoSnake[snakeObject.snakeLength-1 ].y;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <checkHead+0x174>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <checkHead+0x174>)
 8001eea:	3305      	adds	r3, #5
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	607b      	str	r3, [r7, #4]
			lcd_Fill(x, y, x+ snakeWidth, y + snakeWidth, BLACK);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	b298      	uxth	r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	b299      	uxth	r1, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3308      	adds	r3, #8
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3308      	adds	r3, #8
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2400      	movs	r4, #0
 8001f0e:	9400      	str	r4, [sp, #0]
 8001f10:	f7fe fe1a 	bl	8000b48 <lcd_Fill>
			flagEat= 0;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <checkHead+0x180>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e000      	b.n	8001f1e <checkHead+0x16e>
				return;
 8001f1c:	bf00      	nop
		}
	}
}
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}
 8001f24:	20000174 	.word	0x20000174
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	20000014 	.word	0x20000014
 8001f30:	200000b0 	.word	0x200000b0

08001f34 <move>:

void move()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <move+0x4c>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d81b      	bhi.n	8001f78 <move+0x44>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <move+0x14>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f69 	.word	0x08001f69
 8001f4c:	08001f71 	.word	0x08001f71
 8001f50:	08001f59 	.word	0x08001f59
 8001f54:	08001f61 	.word	0x08001f61
	{
		case DOWN:
			(*snakeObject.GODOWN)();
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <move+0x4c>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4798      	blx	r3
			break;
 8001f5e:	e00c      	b.n	8001f7a <move+0x46>
		case UP:
			(*snakeObject.GOUP)();
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <move+0x4c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4798      	blx	r3
			break;
 8001f66:	e008      	b.n	8001f7a <move+0x46>
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <move+0x4c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4798      	blx	r3
			break;
 8001f6e:	e004      	b.n	8001f7a <move+0x46>
		case LEFT:
			(*snakeObject.GOLEFT)();
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <move+0x4c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4798      	blx	r3
			break;
 8001f76:	e000      	b.n	8001f7a <move+0x46>
		default:
			break;
 8001f78:	bf00      	nop
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000174 	.word	0x20000174

08001f84 <snakeRun>:

void snakeRun()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	if (button_count[5])
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <snakeRun+0x8c>)
 8001f8a:	895b      	ldrh	r3, [r3, #10]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <snakeRun+0x1a>
	{
		(*snakeObject.GOUP)();
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <snakeRun+0x90>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <snakeRun+0x90>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4798      	blx	r3
				  }
			  }
		  }
	  }
	}
}
 8001f9c:	e035      	b.n	800200a <snakeRun+0x86>
	  if (button_count[13])
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <snakeRun+0x8c>)
 8001fa0:	8b5b      	ldrh	r3, [r3, #26]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <snakeRun+0x30>
		  (*snakeObject.GODOWN)();
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <snakeRun+0x90>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4798      	blx	r3
		  (*snakeObject.CHECKHEAD)();
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <snakeRun+0x90>)
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	4798      	blx	r3
}
 8001fb2:	e02a      	b.n	800200a <snakeRun+0x86>
		  if (button_count[10])
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <snakeRun+0x8c>)
 8001fb6:	8a9b      	ldrh	r3, [r3, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <snakeRun+0x46>
			  (*snakeObject.GORIGHT)();
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <snakeRun+0x90>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4798      	blx	r3
			  (*snakeObject.CHECKHEAD)();
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <snakeRun+0x90>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4798      	blx	r3
}
 8001fc8:	e01f      	b.n	800200a <snakeRun+0x86>
			  if (button_count[8])
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <snakeRun+0x8c>)
 8001fcc:	8a1b      	ldrh	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <snakeRun+0x5c>
				  (*snakeObject.GOLEFT)();
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <snakeRun+0x90>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4798      	blx	r3
				  (*snakeObject.CHECKHEAD)();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <snakeRun+0x90>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	4798      	blx	r3
}
 8001fde:	e014      	b.n	800200a <snakeRun+0x86>
				  if (button_count[9])
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <snakeRun+0x8c>)
 8001fe2:	8a5b      	ldrh	r3, [r3, #18]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <snakeRun+0x7a>
					  snakeObject.stopFlag= !snakeObject.stopFlag;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <snakeRun+0x90>)
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <snakeRun+0x90>)
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ffc:	e005      	b.n	800200a <snakeRun+0x86>
					  (*snakeObject.MOVE)();
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <snakeRun+0x90>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	4798      	blx	r3
					  (*snakeObject.CHECKHEAD)();
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <snakeRun+0x90>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	4798      	blx	r3
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000c8 	.word	0x200000c8
 8002014:	20000174 	.word	0x20000174

08002018 <snakeInit>:

void snakeInit()
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af02      	add	r7, sp, #8
	snakeObject.infoSnake[0].x= 16;
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <snakeInit+0x1e0>)
 8002020:	2210      	movs	r2, #16
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y= rangeValidYLower;
 8002024:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <snakeInit+0x1e0>)
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x= 8;
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <snakeInit+0x1e0>)
 800202c:	2208      	movs	r2, #8
 800202e:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y= rangeValidYLower;
 8002030:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <snakeInit+0x1e0>)
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x= 0;
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <snakeInit+0x1e0>)
 8002038:	2200      	movs	r2, #0
 800203a:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y= rangeValidYLower;
 800203c:	4b6e      	ldr	r3, [pc, #440]	; (80021f8 <snakeInit+0x1e0>)
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i= 3; i < MAX_LENGTH; i++)
 8002042:	2303      	movs	r3, #3
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	e010      	b.n	800206a <snakeInit+0x52>
	{
		snakeObject.infoSnake[i].x= 0;
 8002048:	4a6b      	ldr	r2, [pc, #428]	; (80021f8 <snakeInit+0x1e0>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3305      	adds	r3, #5
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y= 0;
 8002056:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <snakeInit+0x1e0>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3305      	adds	r3, #5
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
	for (int i= 3; i < MAX_LENGTH; i++)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002070:	dbea      	blt.n	8002048 <snakeInit+0x30>
	}
	snakeObject.GODOWN= goDown;
 8002072:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <snakeInit+0x1e0>)
 8002074:	4a61      	ldr	r2, [pc, #388]	; (80021fc <snakeInit+0x1e4>)
 8002076:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT= goLeft;
 8002078:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <snakeInit+0x1e0>)
 800207a:	4a61      	ldr	r2, [pc, #388]	; (8002200 <snakeInit+0x1e8>)
 800207c:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP= goUp;
 800207e:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <snakeInit+0x1e0>)
 8002080:	4a60      	ldr	r2, [pc, #384]	; (8002204 <snakeInit+0x1ec>)
 8002082:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT= goRight;
 8002084:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <snakeInit+0x1e0>)
 8002086:	4a60      	ldr	r2, [pc, #384]	; (8002208 <snakeInit+0x1f0>)
 8002088:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE= move;
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <snakeInit+0x1e0>)
 800208c:	4a5f      	ldr	r2, [pc, #380]	; (800220c <snakeInit+0x1f4>)
 800208e:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD= checkHead;
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <snakeInit+0x1e0>)
 8002092:	4a5f      	ldr	r2, [pc, #380]	; (8002210 <snakeInit+0x1f8>)
 8002094:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength= 3;
 8002096:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <snakeInit+0x1e0>)
 8002098:	2203      	movs	r2, #3
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead= RIGHT;
 800209c:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <snakeInit+0x1e0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
	for (int i= 0; i < 3; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	e09d      	b.n	80021e4 <snakeInit+0x1cc>
	{
		if (i== 0)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d173      	bne.n	8002196 <snakeInit+0x17e>
		{
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80020ae:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <snakeInit+0x1e0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3305      	adds	r3, #5
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	b298      	uxth	r0, r3
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <snakeInit+0x1e0>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3305      	adds	r3, #5
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	b299      	uxth	r1, r3
					snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 80020ca:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <snakeInit+0x1e0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3305      	adds	r3, #5
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3308      	adds	r3, #8
 80020da:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, RED);
 80020dc:	4c46      	ldr	r4, [pc, #280]	; (80021f8 <snakeInit+0x1e0>)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	3305      	adds	r3, #5
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4423      	add	r3, r4
 80020e6:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3308      	adds	r3, #8
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80020f2:	9400      	str	r4, [sp, #0]
 80020f4:	f7fe fd28 	bl	8000b48 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 80020f8:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <snakeInit+0x1e0>)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3305      	adds	r3, #5
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	b29b      	uxth	r3, r3
 8002106:	3305      	adds	r3, #5
 8002108:	b298      	uxth	r0, r3
 800210a:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <snakeInit+0x1e0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3305      	adds	r3, #5
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	b299      	uxth	r1, r3
					snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y +4, BLUE);
 8002118:	4a37      	ldr	r2, [pc, #220]	; (80021f8 <snakeInit+0x1e0>)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3305      	adds	r3, #5
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 8002124:	b29b      	uxth	r3, r3
 8002126:	3308      	adds	r3, #8
 8002128:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y +4, BLUE);
 800212a:	4c33      	ldr	r4, [pc, #204]	; (80021f8 <snakeInit+0x1e0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	3305      	adds	r3, #5
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4423      	add	r3, r4
 8002134:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y,
 8002136:	b29b      	uxth	r3, r3
 8002138:	3304      	adds	r3, #4
 800213a:	b29b      	uxth	r3, r3
 800213c:	241f      	movs	r4, #31
 800213e:	9400      	str	r4, [sp, #0]
 8002140:	f7fe fd02 	bl	8000b48 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8002144:	4a2c      	ldr	r2, [pc, #176]	; (80021f8 <snakeInit+0x1e0>)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3305      	adds	r3, #5
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	b29b      	uxth	r3, r3
 8002152:	3305      	adds	r3, #5
 8002154:	b298      	uxth	r0, r3
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <snakeInit+0x1e0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3305      	adds	r3, #5
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	b29b      	uxth	r3, r3
 8002164:	3305      	adds	r3, #5
 8002166:	b299      	uxth	r1, r3
					snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 8, BLUE);
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <snakeInit+0x1e0>)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	3305      	adds	r3, #5
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8002174:	b29b      	uxth	r3, r3
 8002176:	3308      	adds	r3, #8
 8002178:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[i].x+ 8, snakeObject.infoSnake[i].y + 8, BLUE);
 800217a:	4c1f      	ldr	r4, [pc, #124]	; (80021f8 <snakeInit+0x1e0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3305      	adds	r3, #5
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4423      	add	r3, r4
 8002184:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x+ 5, snakeObject.infoSnake[i].y + 5,
 8002186:	b29b      	uxth	r3, r3
 8002188:	3308      	adds	r3, #8
 800218a:	b29b      	uxth	r3, r3
 800218c:	241f      	movs	r4, #31
 800218e:	9400      	str	r4, [sp, #0]
 8002190:	f7fe fcda 	bl	8000b48 <lcd_Fill>
 8002194:	e023      	b.n	80021de <snakeInit+0x1c6>
		}
		else
		{
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002196:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <snakeInit+0x1e0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3305      	adds	r3, #5
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	b298      	uxth	r0, r3
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <snakeInit+0x1e0>)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3305      	adds	r3, #5
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	b299      	uxth	r1, r3
					snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 80021b2:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <snakeInit+0x1e0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3305      	adds	r3, #5
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3308      	adds	r3, #8
 80021c2:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 80021c4:	4c0c      	ldr	r4, [pc, #48]	; (80021f8 <snakeInit+0x1e0>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3305      	adds	r3, #5
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4423      	add	r3, r4
 80021ce:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3308      	adds	r3, #8
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2400      	movs	r4, #0
 80021d8:	9400      	str	r4, [sp, #0]
 80021da:	f7fe fcb5 	bl	8000b48 <lcd_Fill>
	for (int i= 0; i < 3; i++)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f77f af5e 	ble.w	80020a8 <snakeInit+0x90>
		}
	}
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000174 	.word	0x20000174
 80021fc:	08001b61 	.word	0x08001b61
 8002200:	08001481 	.word	0x08001481
 8002204:	08001919 	.word	0x08001919
 8002208:	080016c9 	.word	0x080016c9
 800220c:	08001f35 	.word	0x08001f35
 8002210:	08001db1 	.word	0x08001db1

08002214 <generateFruit>:

void generateFruit()
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af02      	add	r7, sp, #8
	// srand(time(0));
	xFruit= (rand()%(rangeXGenerate+ 1))*snakeWidth;
 800221a:	f002 fe45 	bl	8004ea8 <rand>
 800221e:	4602      	mov	r2, r0
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <generateFruit+0xc8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	fb92 f1f3 	sdiv	r1, r2, r3
 800222a:	fb03 f301 	mul.w	r3, r3, r1
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <generateFruit+0xcc>)
 8002234:	6013      	str	r3, [r2, #0]
	yFruit= (rand()%(rangeYGenerate+ 1)+ snakeWidth)*snakeWidth;
 8002236:	f002 fe37 	bl	8004ea8 <rand>
 800223a:	4602      	mov	r2, r0
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <generateFruit+0xd0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	fb92 f1f3 	sdiv	r1, r2, r3
 8002246:	fb03 f301 	mul.w	r3, r3, r1
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	3308      	adds	r3, #8
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <generateFruit+0xd4>)
 8002252:	6013      	str	r3, [r2, #0]
	for (int i= 0; i < snakeObject.snakeLength; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	e01f      	b.n	800229a <generateFruit+0x86>
	{
		if (xFruit== snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <generateFruit+0xd8>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3305      	adds	r3, #5
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <generateFruit+0xcc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d112      	bne.n	8002294 <generateFruit+0x80>
 800226e:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <generateFruit+0xd8>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3305      	adds	r3, #5
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <generateFruit+0xd4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d108      	bne.n	8002294 <generateFruit+0x80>
		{
			xFruit= INT_MIN;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <generateFruit+0xcc>)
 8002284:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002288:	601a      	str	r2, [r3, #0]
			yFruit= INT_MIN;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <generateFruit+0xd4>)
 800228c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002290:	601a      	str	r2, [r3, #0]
			return;
 8002292:	e01f      	b.n	80022d4 <generateFruit+0xc0>
	for (int i= 0; i < snakeObject.snakeLength; i++)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3301      	adds	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <generateFruit+0xd8>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbda      	blt.n	800225a <generateFruit+0x46>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit+ snakeWidth, yFruit+ snakeWidth, DARKBLUE);
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <generateFruit+0xcc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b298      	uxth	r0, r3
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <generateFruit+0xd4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b299      	uxth	r1, r3
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <generateFruit+0xcc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3308      	adds	r3, #8
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <generateFruit+0xd4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3308      	adds	r3, #8
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f240 14cf 	movw	r4, #463	; 0x1cf
 80022c8:	9400      	str	r4, [sp, #0]
 80022ca:	f7fe fc3d 	bl	8000b48 <lcd_Fill>
	flagEat= 1;
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <generateFruit+0xdc>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000010 	.word	0x20000010
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000014 	.word	0x20000014
 80022ec:	20000174 	.word	0x20000174
 80022f0:	200000b0 	.word	0x200000b0

080022f4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <timer_init+0x10>)
 80022fa:	f002 f873 	bl	80043e4 <HAL_TIM_Base_Start_IT>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20001198 	.word	0x20001198

08002308 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <setTimer2+0x2c>)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <setTimer2+0x2c>)
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <setTimer2+0x30>)
 800231e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <setTimer2+0x34>)
 8002322:	2200      	movs	r2, #0
 8002324:	801a      	strh	r2, [r3, #0]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200000b8 	.word	0x200000b8
 8002338:	200000b6 	.word	0x200000b6
 800233c:	200000b4 	.word	0x200000b4

08002340 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d116      	bne.n	8002380 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d010      	beq.n	800237c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002364:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002370:	2201      	movs	r2, #1
 8002372:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800237a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 800237c:	f7fe ff2c 	bl	80011d8 <led7_Scan>
	}
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000b6 	.word	0x200000b6
 800238c:	200000b4 	.word	0x200000b4
 8002390:	200000b8 	.word	0x200000b8

08002394 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <MX_SPI1_Init+0x64>)
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <MX_SPI1_Init+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023e0:	220a      	movs	r2, #10
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <MX_SPI1_Init+0x64>)
 80023e6:	f001 f9c1 	bl	800376c <HAL_SPI_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023f0:	f7ff f840 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20001140 	.word	0x20001140
 80023fc:	40013000 	.word	0x40013000

08002400 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_SPI_MspInit+0x84>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12b      	bne.n	800247a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_SPI_MspInit+0x88>)
 800242c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_SPI_MspInit+0x88>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800245a:	2338      	movs	r3, #56	; 0x38
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800246a:	2305      	movs	r3, #5
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <HAL_SPI_MspInit+0x8c>)
 8002476:	f000 fb83 	bl	8002b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40013000 	.word	0x40013000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020400 	.word	0x40020400

08002490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_MspInit+0x4c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_MspInit+0x4c>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_MspInit+0x4c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 f9d2 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM2_IRQHandler+0x10>)
 800253a:	f001 ffc3 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20001198 	.word	0x20001198

08002548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	return 1;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_kill>:

int _kill(int pid, int sig)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002562:	f002 fc41 	bl	8004de8 <__errno>
 8002566:	4603      	mov	r3, r0
 8002568:	2216      	movs	r2, #22
 800256a:	601a      	str	r2, [r3, #0]
	return -1;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_exit>:

void _exit (int status)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffe7 	bl	8002558 <_kill>
	while (1) {}		/* Make sure we hang here */
 800258a:	e7fe      	b.n	800258a <_exit+0x12>

0800258c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	4601      	mov	r1, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf0      	blt.n	800259e <_read+0x12>
	}

return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e009      	b.n	80025ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf1      	blt.n	80025d8 <_write+0x12>
	}
	return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_close>:

int _close(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002626:	605a      	str	r2, [r3, #4]
	return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_isatty>:

int _isatty(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002670:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <_sbrk+0x5c>)
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <_sbrk+0x60>)
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <_sbrk+0x64>)
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <_sbrk+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d207      	bcs.n	80026a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002698:	f002 fba6 	bl	8004de8 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	e009      	b.n	80026bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <_sbrk+0x64>)
 80026b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20020000 	.word	0x20020000
 80026c8:	00000400 	.word	0x00000400
 80026cc:	200000bc 	.word	0x200000bc
 80026d0:	200011f8 	.word	0x200011f8

080026d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <SystemInit+0x20>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <SystemInit+0x20>)
 80026e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	463b      	mov	r3, r7
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <MX_TIM2_Init+0x94>)
 8002716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800271a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_TIM2_Init+0x94>)
 800271e:	f240 3247 	movw	r2, #839	; 0x347
 8002722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <MX_TIM2_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_TIM2_Init+0x94>)
 800272c:	2263      	movs	r2, #99	; 0x63
 800272e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <MX_TIM2_Init+0x94>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_TIM2_Init+0x94>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800273c:	4813      	ldr	r0, [pc, #76]	; (800278c <MX_TIM2_Init+0x94>)
 800273e:	f001 fe01 	bl	8004344 <HAL_TIM_Base_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002748:	f7fe fe94 	bl	8001474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	4619      	mov	r1, r3
 8002758:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_TIM2_Init+0x94>)
 800275a:	f001 ffbb 	bl	80046d4 <HAL_TIM_ConfigClockSource>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002764:	f7fe fe86 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002770:	463b      	mov	r3, r7
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_TIM2_Init+0x94>)
 8002776:	f002 f9d7 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002780:	f7fe fe78 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20001198 	.word	0x20001198

08002790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d115      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_TIM_Base_MspInit+0x48>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_TIM_Base_MspInit+0x48>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_TIM_Base_MspInit+0x48>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	201c      	movs	r0, #28
 80027c4:	f000 f9a5 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027c8:	201c      	movs	r0, #28
 80027ca:	f000 f9be 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027e2:	490e      	ldr	r1, [pc, #56]	; (800281c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e8:	e002      	b.n	80027f0 <LoopCopyDataInit>

080027ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ee:	3304      	adds	r3, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f4:	d3f9      	bcc.n	80027ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027f8:	4c0b      	ldr	r4, [pc, #44]	; (8002828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027fc:	e001      	b.n	8002802 <LoopFillZerobss>

080027fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002800:	3204      	adds	r2, #4

08002802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002804:	d3fb      	bcc.n	80027fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002806:	f7ff ff65 	bl	80026d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280a:	f002 faf3 	bl	8004df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280e:	f7fe fd6f 	bl	80012f0 <main>
  bx  lr    
 8002812:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002820:	08009018 	.word	0x08009018
  ldr r2, =_sbss
 8002824:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002828:	200011f4 	.word	0x200011f4

0800282c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC_IRQHandler>
	...

08002830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <HAL_Init+0x40>)
 800283a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_Init+0x40>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <HAL_Init+0x40>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f94f 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	200f      	movs	r0, #15
 8002860:	f000 f808 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f7ff fe14 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023c00 	.word	0x40023c00

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x54>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x58>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f967 	bl	8002b66 <HAL_SYSTICK_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00e      	b.n	80028c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d80a      	bhi.n	80028be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f000 f92f 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <HAL_InitTick+0x5c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000018 	.word	0x20000018
 80028cc:	20000020 	.word	0x20000020
 80028d0:	2000001c 	.word	0x2000001c

080028d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x20>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x24>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_IncTick+0x24>)
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000020 	.word	0x20000020
 80028f8:	200011e0 	.word	0x200011e0

080028fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_GetTick+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	200011e0 	.word	0x200011e0

08002914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff ffee 	bl	80028fc <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d005      	beq.n	800293a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_Delay+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293a:	bf00      	nop
 800293c:	f7ff ffde 	bl	80028fc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f7      	bhi.n	800293c <HAL_Delay+0x28>
  {
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000020 	.word	0x20000020

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b24:	f7ff ff3e 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6978      	ldr	r0, [r7, #20]
 8002b30:	f7ff ff8e 	bl	8002a50 <NVIC_EncodePriority>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5d 	bl	80029fc <__NVIC_SetPriority>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff31 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ffa2 	bl	8002ab8 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e16b      	b.n	8002e74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 815a 	bne.w	8002e6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d005      	beq.n	8002bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d017      	beq.n	8002c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80b4 	beq.w	8002e6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a5f      	ldr	r2, [pc, #380]	; (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a5b      	ldr	r2, [pc, #364]	; (8002e90 <HAL_GPIO_Init+0x310>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x314>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	; (8002e98 <HAL_GPIO_Init+0x318>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d025      	beq.n	8002da2 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_GPIO_Init+0x31c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x320>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d019      	beq.n	8002d9a <HAL_GPIO_Init+0x21a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x324>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x216>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_GPIO_Init+0x328>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x212>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x32c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x330>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x20a>
 8002d86:	2307      	movs	r3, #7
 8002d88:	e00e      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	; (8002e90 <HAL_GPIO_Init+0x310>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dea:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f ae90 	bls.w	8002b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40021c00 	.word	0x40021c00
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed4:	e003      	b.n	8002ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e264      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d075      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0a:	4ba3      	ldr	r3, [pc, #652]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d00c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d112      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b9d      	ldr	r3, [pc, #628]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	4b99      	ldr	r3, [pc, #612]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05b      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x108>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d157      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e23f      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x74>
 8002f52:	4b91      	ldr	r3, [pc, #580]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a90      	ldr	r2, [pc, #576]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xb0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x98>
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a8a      	ldr	r2, [pc, #552]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a87      	ldr	r2, [pc, #540]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xb0>
 8002f84:	4b84      	ldr	r3, [pc, #528]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a83      	ldr	r2, [pc, #524]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b81      	ldr	r3, [pc, #516]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a80      	ldr	r2, [pc, #512]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff fcaa 	bl	80028fc <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7ff fca6 	bl	80028fc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e204      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xc0>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fc96 	bl	80028fc <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7ff fc92 	bl	80028fc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1f0      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xe8>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003002:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b62      	ldr	r3, [pc, #392]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d11c      	bne.n	8003054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	4b5c      	ldr	r3, [pc, #368]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x152>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1c4      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4952      	ldr	r1, [pc, #328]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	e03a      	b.n	80030ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_OscConfig+0x2b0>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7ff fc4b 	bl	80028fc <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306a:	f7ff fc47 	bl	80028fc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e1a5      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307c:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4940      	ldr	r1, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
 800309c:	e015      	b.n	80030ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_OscConfig+0x2b0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7ff fc2a 	bl	80028fc <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ac:	f7ff fc26 	bl	80028fc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e184      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d030      	beq.n	8003138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_RCC_OscConfig+0x2b4>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7ff fc0a 	bl	80028fc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ec:	f7ff fc06 	bl	80028fc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e164      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x200>
 800310a:	e015      	b.n	8003138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_OscConfig+0x2b4>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7ff fbf3 	bl	80028fc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311a:	f7ff fbef 	bl	80028fc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e14d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a0 	beq.w	8003286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d121      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_RCC_OscConfig+0x2b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <HAL_RCC_OscConfig+0x2b8>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7ff fbb5 	bl	80028fc <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e011      	b.n	80031ba <HAL_RCC_OscConfig+0x2ce>
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	42470000 	.word	0x42470000
 80031a0:	42470e80 	.word	0x42470e80
 80031a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7ff fba8 	bl	80028fc <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e106      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <HAL_RCC_OscConfig+0x4e4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x2f0>
 80031ce:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x32a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x312>
 80031e4:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a7a      	ldr	r2, [pc, #488]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a77      	ldr	r2, [pc, #476]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x32a>
 80031fe:	4b75      	ldr	r3, [pc, #468]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a74      	ldr	r2, [pc, #464]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7ff fb6d 	bl	80028fc <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7ff fb69 	bl	80028fc <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0c5      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x33a>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7ff fb57 	bl	80028fc <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7ff fb53 	bl	80028fc <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0af      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a55      	ldr	r2, [pc, #340]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 809b 	beq.w	80033c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d05c      	beq.n	8003356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d141      	bne.n	8003328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x4ec>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7ff fb27 	bl	80028fc <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b2:	f7ff fb23 	bl	80028fc <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e081      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	4937      	ldr	r1, [pc, #220]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCC_OscConfig+0x4ec>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7ff fafc 	bl	80028fc <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7ff faf8 	bl	80028fc <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e056      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x41c>
 8003326:	e04e      	b.n	80033c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x4ec>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7ff fae5 	bl	80028fc <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7ff fae1 	bl	80028fc <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e03f      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x44a>
 8003354:	e037      	b.n	80033c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e032      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_RCC_OscConfig+0x4e8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d028      	beq.n	80033c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d121      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d11a      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003398:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40007000 	.word	0x40007000
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470060 	.word	0x42470060

080033dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0cc      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d90c      	bls.n	8003418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b65      	ldr	r3, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d044      	beq.n	80034fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d119      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d003      	beq.n	800349a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e067      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 0203 	bic.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4934      	ldr	r1, [pc, #208]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034cc:	f7ff fa16 	bl	80028fc <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d4:	f7ff fa12 	bl	80028fc <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e04f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 020c 	and.w	r2, r3, #12
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d1eb      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d20c      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490a      	ldr	r1, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f976 	bl	8002874 <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023c00 	.word	0x40023c00
 8003598:	40023800 	.word	0x40023800
 800359c:	08008eac 	.word	0x08008eac
 80035a0:	20000018 	.word	0x20000018
 80035a4:	2000001c 	.word	0x2000001c

080035a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	2300      	movs	r3, #0
 80035ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c0:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d00d      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x40>
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	f200 80bd 	bhi.w	800374c <HAL_RCC_GetSysClockFreq+0x1a4>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x34>
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d003      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035da:	e0b7      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b61      	ldr	r3, [pc, #388]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035de:	60bb      	str	r3, [r7, #8]
       break;
 80035e0:	e0b7      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e2:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035e4:	60bb      	str	r3, [r7, #8]
      break;
 80035e6:	e0b4      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e8:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04d      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	461a      	mov	r2, r3
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	ea02 0800 	and.w	r8, r2, r0
 8003616:	ea03 0901 	and.w	r9, r3, r1
 800361a:	4640      	mov	r0, r8
 800361c:	4649      	mov	r1, r9
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	014b      	lsls	r3, r1, #5
 8003628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800362c:	0142      	lsls	r2, r0, #5
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	ebb0 0008 	subs.w	r0, r0, r8
 8003636:	eb61 0109 	sbc.w	r1, r1, r9
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	018b      	lsls	r3, r1, #6
 8003644:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003648:	0182      	lsls	r2, r0, #6
 800364a:	1a12      	subs	r2, r2, r0
 800364c:	eb63 0301 	sbc.w	r3, r3, r1
 8003650:	f04f 0000 	mov.w	r0, #0
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	00d9      	lsls	r1, r3, #3
 800365a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365e:	00d0      	lsls	r0, r2, #3
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	eb12 0208 	adds.w	r2, r2, r8
 8003668:	eb43 0309 	adc.w	r3, r3, r9
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0259      	lsls	r1, r3, #9
 8003676:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800367a:	0250      	lsls	r0, r2, #9
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	f7fc fdf0 	bl	8000270 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e04a      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	461a      	mov	r2, r3
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	ea02 0400 	and.w	r4, r2, r0
 80036b2:	ea03 0501 	and.w	r5, r3, r1
 80036b6:	4620      	mov	r0, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	014b      	lsls	r3, r1, #5
 80036c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036c8:	0142      	lsls	r2, r0, #5
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	1b00      	subs	r0, r0, r4
 80036d0:	eb61 0105 	sbc.w	r1, r1, r5
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	018b      	lsls	r3, r1, #6
 80036de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036e2:	0182      	lsls	r2, r0, #6
 80036e4:	1a12      	subs	r2, r2, r0
 80036e6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	00d9      	lsls	r1, r3, #3
 80036f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f8:	00d0      	lsls	r0, r2, #3
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	1912      	adds	r2, r2, r4
 8003700:	eb45 0303 	adc.w	r3, r5, r3
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	0299      	lsls	r1, r3, #10
 800370e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003712:	0290      	lsls	r0, r2, #10
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	f7fc fda4 	bl	8000270 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4613      	mov	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	3301      	adds	r3, #1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	60bb      	str	r3, [r7, #8]
      break;
 800374a:	e002      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800374e:	60bb      	str	r3, [r7, #8]
      break;
 8003750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003752:	68bb      	ldr	r3, [r7, #8]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	00f42400 	.word	0x00f42400
 8003768:	007a1200 	.word	0x007a1200

0800376c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07b      	b.n	8003876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378e:	d009      	beq.n	80037a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
 8003796:	e005      	b.n	80037a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fe1e 	bl	8002400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	ea42 0103 	orr.w	r1, r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	f003 0104 	and.w	r1, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0210 	and.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b088      	sub	sp, #32
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_SPI_Transmit+0x22>
 800389c:	2302      	movs	r3, #2
 800389e:	e126      	b.n	8003aee <HAL_SPI_Transmit+0x270>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a8:	f7ff f828 	bl	80028fc <HAL_GetTick>
 80038ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c2:	e10b      	b.n	8003adc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x52>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d4:	e102      	b.n	8003adc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2203      	movs	r2, #3
 80038da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	d10f      	bne.n	800393e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d007      	beq.n	800395c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d14b      	bne.n	80039fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Transmit+0xf6>
 800396e:	8afb      	ldrh	r3, [r7, #22]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d13e      	bne.n	80039f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003998:	e02b      	b.n	80039f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d112      	bne.n	80039ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80039cc:	e011      	b.n	80039f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ce:	f7fe ff95 	bl	80028fc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d803      	bhi.n	80039e6 <HAL_SPI_Transmit+0x168>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Transmit+0x16e>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f0:	e074      	b.n	8003adc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ce      	bne.n	800399a <HAL_SPI_Transmit+0x11c>
 80039fc:	e04c      	b.n	8003a98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_Transmit+0x18e>
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d140      	bne.n	8003a8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	7812      	ldrb	r2, [r2, #0]
 8003a18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a32:	e02c      	b.n	8003a8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d113      	bne.n	8003a6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a68:	e011      	b.n	8003a8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6a:	f7fe ff47 	bl	80028fc <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d803      	bhi.n	8003a82 <HAL_SPI_Transmit+0x204>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d102      	bne.n	8003a88 <HAL_SPI_Transmit+0x20a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a8c:	e026      	b.n	8003adc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1cd      	bne.n	8003a34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	6839      	ldr	r1, [r7, #0]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fbcb 	bl	8004238 <SPI_EndRxTxTransaction>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e000      	b.n	8003adc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ada:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b088      	sub	sp, #32
 8003afa:	af02      	add	r7, sp, #8
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d112      	bne.n	8003b3a <HAL_SPI_Receive+0x44>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10e      	bne.n	8003b3a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f8f1 	bl	8003d18 <HAL_SPI_TransmitReceive>
 8003b36:	4603      	mov	r3, r0
 8003b38:	e0ea      	b.n	8003d10 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_SPI_Receive+0x52>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e0e3      	b.n	8003d10 <HAL_SPI_Receive+0x21a>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b50:	f7fe fed4 	bl	80028fc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b66:	e0ca      	b.n	8003cfe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Receive+0x7e>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b78:	e0c1      	b.n	8003cfe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc0:	d10f      	bne.n	8003be2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003be0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d007      	beq.n	8003c00 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d162      	bne.n	8003cce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c08:	e02e      	b.n	8003c68 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d115      	bne.n	8003c44 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f103 020c 	add.w	r2, r3, #12
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c42:	e011      	b.n	8003c68 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c44:	f7fe fe5a 	bl	80028fc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d803      	bhi.n	8003c5c <HAL_SPI_Receive+0x166>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_Receive+0x16c>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c66:	e04a      	b.n	8003cfe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1cb      	bne.n	8003c0a <HAL_SPI_Receive+0x114>
 8003c72:	e031      	b.n	8003cd8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d113      	bne.n	8003caa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	1c9a      	adds	r2, r3, #2
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca8:	e011      	b.n	8003cce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003caa:	f7fe fe27 	bl	80028fc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d803      	bhi.n	8003cc2 <HAL_SPI_Receive+0x1cc>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d102      	bne.n	8003cc8 <HAL_SPI_Receive+0x1d2>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ccc:	e017      	b.n	8003cfe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1cd      	bne.n	8003c74 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	6839      	ldr	r1, [r7, #0]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fa45 	bl	800416c <SPI_EndRxTransaction>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
 8003cfa:	e000      	b.n	8003cfe <HAL_SPI_Receive+0x208>
  }

error :
 8003cfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d26:	2301      	movs	r3, #1
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x26>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e18a      	b.n	8004054 <HAL_SPI_TransmitReceive+0x33c>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d46:	f7fe fdd9 	bl	80028fc <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d00f      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x70>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6e:	d107      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x68>
 8003d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d003      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d86:	e15b      	b.n	8004040 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x82>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x82>
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003da0:	e14e      	b.n	8004040 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d003      	beq.n	8003db6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2205      	movs	r2, #5
 8003db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d007      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e12:	d178      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x10a>
 8003e1c:	8b7b      	ldrh	r3, [r7, #26]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d166      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	881a      	ldrh	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	1c9a      	adds	r2, r3, #2
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e46:	e053      	b.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d11b      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x176>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x176>
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d113      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	881a      	ldrh	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d119      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x1b8>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d014      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ed0:	f7fe fd14 	bl	80028fc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d807      	bhi.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d8>
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d003      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003eee:	e0a7      	b.n	8004040 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1a6      	bne.n	8003e48 <HAL_SPI_TransmitReceive+0x130>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1a1      	bne.n	8003e48 <HAL_SPI_TransmitReceive+0x130>
 8003f04:	e07c      	b.n	8004000 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x1fc>
 8003f0e:	8b7b      	ldrh	r3, [r7, #26]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d16b      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	e057      	b.n	8003fec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11c      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x26c>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x26c>
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d114      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d119      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x2ae>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d014      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fc6:	f7fe fc99 	bl	80028fc <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d803      	bhi.n	8003fde <HAL_SPI_TransmitReceive+0x2c6>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2cc>
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fea:	e029      	b.n	8004040 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1a2      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x224>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d19d      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f917 	bl	8004238 <SPI_EndRxTxTransaction>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800401c:	e010      	b.n	8004040 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	e000      	b.n	8004040 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800403e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004054:	4618      	mov	r0, r3
 8004056:	3730      	adds	r7, #48	; 0x30
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800406c:	f7fe fc46 	bl	80028fc <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	4413      	add	r3, r2
 800407a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800407c:	f7fe fc3e 	bl	80028fc <HAL_GetTick>
 8004080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004082:	4b39      	ldr	r3, [pc, #228]	; (8004168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	015b      	lsls	r3, r3, #5
 8004088:	0d1b      	lsrs	r3, r3, #20
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004092:	e054      	b.n	800413e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d050      	beq.n	800413e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800409c:	f7fe fc2e 	bl	80028fc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d902      	bls.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d13d      	bne.n	800412e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ca:	d111      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d4:	d004      	beq.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040de:	d107      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f8:	d10f      	bne.n	800411a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e017      	b.n	800415e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3b01      	subs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d19b      	bne.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000018 	.word	0x20000018

0800416c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004180:	d111      	bne.n	80041a6 <SPI_EndRxTransaction+0x3a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800418a:	d004      	beq.n	8004196 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d107      	bne.n	80041a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ae:	d12a      	bne.n	8004206 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d012      	beq.n	80041e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff ff49 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02d      	beq.n	800422c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e026      	b.n	800422e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2101      	movs	r1, #1
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff36 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01a      	beq.n	800422c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e013      	b.n	800422e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2200      	movs	r2, #0
 800420e:	2101      	movs	r1, #1
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff ff23 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e000      	b.n	800422e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <SPI_EndRxTxTransaction+0x7c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <SPI_EndRxTxTransaction+0x80>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0d5b      	lsrs	r3, r3, #21
 8004250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004262:	d112      	bne.n	800428a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fef4 	bl	800405c <SPI_WaitFlagStateUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e00f      	b.n	80042aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3b01      	subs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d0f2      	beq.n	800428a <SPI_EndRxTxTransaction+0x52>
 80042a4:	e000      	b.n	80042a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80042a6:	bf00      	nop
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000018 	.word	0x20000018
 80042b8:	165e9f81 	.word	0x165e9f81

080042bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e034      	b.n	800433c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7fc fa7c 	bl	80007e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3308      	adds	r3, #8
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 fca6 	bl	8004c48 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	461a      	mov	r2, r3
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	f000 fcf0 	bl	8004cec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6858      	ldr	r0, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	f000 fd25 	bl	8004d68 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6892      	ldr	r2, [r2, #8]
 8004326:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	f041 0101 	orr.w	r1, r1, #1
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e041      	b.n	80043da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fe fa10 	bl	8002790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fa96 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d001      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e04e      	b.n	800449a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d01d      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_TIM_Base_Start_IT+0xc8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x80>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d111      	bne.n	8004488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b06      	cmp	r3, #6
 8004474:	d010      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	e007      	b.n	8004498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40001800 	.word	0x40001800

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0202 	mvn.w	r2, #2
 80044f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9b5 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9a7 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f9b8 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f98b 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f97d 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f98e 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0208 	mvn.w	r2, #8
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f961 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f953 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f964 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0210 	mvn.w	r2, #16
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2208      	movs	r2, #8
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f937 	bl	8004876 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f929 	bl	8004862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f93a 	bl	800488a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0201 	mvn.w	r2, #1
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd fe7c 	bl	8002340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fae0 	bl	8004c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8ff 	bl	800489e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d10e      	bne.n	80046cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d107      	bne.n	80046cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0220 	mvn.w	r2, #32
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 faaa 	bl	8004c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0b4      	b.n	800485a <HAL_TIM_ConfigClockSource+0x186>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d03e      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0xd4>
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	f200 8087 	bhi.w	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	f000 8086 	beq.w	8004846 <HAL_TIM_ConfigClockSource+0x172>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	d87f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d01a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xa6>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d87b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d050      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x11a>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d877      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d03c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0xfa>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d873      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d058      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x13a>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d86f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d064      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d86b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d060      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d867      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d05a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004778:	e062      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f000 f9ad 	bl	8004ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800479c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]
      break;
 80047a6:	e04f      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f000 f996 	bl	8004ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ca:	609a      	str	r2, [r3, #8]
      break;
 80047cc:	e03c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 f90a 	bl	80049f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2150      	movs	r1, #80	; 0x50
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f963 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e02c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f929 	bl	8004a52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2160      	movs	r1, #96	; 0x60
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f953 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 800480c:	e01c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f8ea 	bl	80049f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f943 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 800482c:	e00c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 f93a 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 800483e:	e003      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e000      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d00f      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3d      	ldr	r2, [pc, #244]	; (80049cc <TIM_Base_SetConfig+0x118>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00b      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <TIM_Base_SetConfig+0x11c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <TIM_Base_SetConfig+0x120>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d108      	bne.n	8004906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02b      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d027      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <TIM_Base_SetConfig+0x118>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d023      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <TIM_Base_SetConfig+0x11c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <TIM_Base_SetConfig+0x120>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01b      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a29      	ldr	r2, [pc, #164]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d017      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <TIM_Base_SetConfig+0x128>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <TIM_Base_SetConfig+0x12c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00f      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <TIM_Base_SetConfig+0x130>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00b      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <TIM_Base_SetConfig+0x134>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a24      	ldr	r2, [pc, #144]	; (80049ec <TIM_Base_SetConfig+0x138>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <TIM_Base_SetConfig+0x13c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d108      	bne.n	8004978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <TIM_Base_SetConfig+0x114>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0c      	ldr	r2, [pc, #48]	; (80049d8 <TIM_Base_SetConfig+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d103      	bne.n	80049b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	615a      	str	r2, [r3, #20]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800
 80049e8:	40001800 	.word	0x40001800
 80049ec:	40001c00 	.word	0x40001c00
 80049f0:	40002000 	.word	0x40002000

080049f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 030a 	bic.w	r3, r3, #10
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b087      	sub	sp, #28
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f023 0210 	bic.w	r2, r3, #16
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	031b      	lsls	r3, r3, #12
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f043 0307 	orr.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e05a      	b.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d01d      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10c      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40001800 	.word	0x40001800

08004c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c60:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <FSMC_NORSRAM_Init+0xa0>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004c72:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004c78:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004c7e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004c84:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004c8a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004c90:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004c96:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004c9c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004ca2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004ca8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004cae:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004cb4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d103      	bne.n	8004ccc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	fff00080 	.word	0xfff00080

08004cec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d06:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d0e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d1a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004d22:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004d2a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d34:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	3b02      	subs	r3, #2
 8004d3c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004d3e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d44:	4313      	orrs	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d80:	d122      	bne.n	8004dc8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d9e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004da6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004dae:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004db4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6979      	ldr	r1, [r7, #20]
 8004dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004dc6:	e005      	b.n	8004dd4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	cff00000 	.word	0xcff00000

08004de8 <__errno>:
 8004de8:	4b01      	ldr	r3, [pc, #4]	; (8004df0 <__errno+0x8>)
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000024 	.word	0x20000024

08004df4 <__libc_init_array>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4d0d      	ldr	r5, [pc, #52]	; (8004e2c <__libc_init_array+0x38>)
 8004df8:	4c0d      	ldr	r4, [pc, #52]	; (8004e30 <__libc_init_array+0x3c>)
 8004dfa:	1b64      	subs	r4, r4, r5
 8004dfc:	10a4      	asrs	r4, r4, #2
 8004dfe:	2600      	movs	r6, #0
 8004e00:	42a6      	cmp	r6, r4
 8004e02:	d109      	bne.n	8004e18 <__libc_init_array+0x24>
 8004e04:	4d0b      	ldr	r5, [pc, #44]	; (8004e34 <__libc_init_array+0x40>)
 8004e06:	4c0c      	ldr	r4, [pc, #48]	; (8004e38 <__libc_init_array+0x44>)
 8004e08:	f001 f884 	bl	8005f14 <_init>
 8004e0c:	1b64      	subs	r4, r4, r5
 8004e0e:	10a4      	asrs	r4, r4, #2
 8004e10:	2600      	movs	r6, #0
 8004e12:	42a6      	cmp	r6, r4
 8004e14:	d105      	bne.n	8004e22 <__libc_init_array+0x2e>
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1c:	4798      	blx	r3
 8004e1e:	3601      	adds	r6, #1
 8004e20:	e7ee      	b.n	8004e00 <__libc_init_array+0xc>
 8004e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e26:	4798      	blx	r3
 8004e28:	3601      	adds	r6, #1
 8004e2a:	e7f2      	b.n	8004e12 <__libc_init_array+0x1e>
 8004e2c:	08009010 	.word	0x08009010
 8004e30:	08009010 	.word	0x08009010
 8004e34:	08009010 	.word	0x08009010
 8004e38:	08009014 	.word	0x08009014

08004e3c <memset>:
 8004e3c:	4402      	add	r2, r0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d100      	bne.n	8004e46 <memset+0xa>
 8004e44:	4770      	bx	lr
 8004e46:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4a:	e7f9      	b.n	8004e40 <memset+0x4>

08004e4c <srand>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <srand+0x44>)
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e54:	4604      	mov	r4, r0
 8004e56:	b9b3      	cbnz	r3, 8004e86 <srand+0x3a>
 8004e58:	2018      	movs	r0, #24
 8004e5a:	f000 f8c1 	bl	8004fe0 <malloc>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	63a8      	str	r0, [r5, #56]	; 0x38
 8004e62:	b920      	cbnz	r0, 8004e6e <srand+0x22>
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <srand+0x48>)
 8004e66:	480c      	ldr	r0, [pc, #48]	; (8004e98 <srand+0x4c>)
 8004e68:	2142      	movs	r1, #66	; 0x42
 8004e6a:	f000 f877 	bl	8004f5c <__assert_func>
 8004e6e:	490b      	ldr	r1, [pc, #44]	; (8004e9c <srand+0x50>)
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <srand+0x54>)
 8004e72:	e9c0 1300 	strd	r1, r3, [r0]
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <srand+0x58>)
 8004e78:	6083      	str	r3, [r0, #8]
 8004e7a:	230b      	movs	r3, #11
 8004e7c:	8183      	strh	r3, [r0, #12]
 8004e7e:	2100      	movs	r1, #0
 8004e80:	2001      	movs	r0, #1
 8004e82:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004e86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e88:	2200      	movs	r2, #0
 8004e8a:	611c      	str	r4, [r3, #16]
 8004e8c:	615a      	str	r2, [r3, #20]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	20000024 	.word	0x20000024
 8004e94:	08008ec0 	.word	0x08008ec0
 8004e98:	08008ed7 	.word	0x08008ed7
 8004e9c:	abcd330e 	.word	0xabcd330e
 8004ea0:	e66d1234 	.word	0xe66d1234
 8004ea4:	0005deec 	.word	0x0005deec

08004ea8 <rand>:
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <rand+0x60>)
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	681c      	ldr	r4, [r3, #0]
 8004eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eb0:	b9b3      	cbnz	r3, 8004ee0 <rand+0x38>
 8004eb2:	2018      	movs	r0, #24
 8004eb4:	f000 f894 	bl	8004fe0 <malloc>
 8004eb8:	63a0      	str	r0, [r4, #56]	; 0x38
 8004eba:	b928      	cbnz	r0, 8004ec8 <rand+0x20>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <rand+0x64>)
 8004ec0:	4813      	ldr	r0, [pc, #76]	; (8004f10 <rand+0x68>)
 8004ec2:	214e      	movs	r1, #78	; 0x4e
 8004ec4:	f000 f84a 	bl	8004f5c <__assert_func>
 8004ec8:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <rand+0x6c>)
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <rand+0x70>)
 8004ecc:	e9c0 2300 	strd	r2, r3, [r0]
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <rand+0x74>)
 8004ed2:	6083      	str	r3, [r0, #8]
 8004ed4:	230b      	movs	r3, #11
 8004ed6:	8183      	strh	r3, [r0, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2300      	movs	r3, #0
 8004edc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004ee0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ee2:	480f      	ldr	r0, [pc, #60]	; (8004f20 <rand+0x78>)
 8004ee4:	690a      	ldr	r2, [r1, #16]
 8004ee6:	694b      	ldr	r3, [r1, #20]
 8004ee8:	4c0e      	ldr	r4, [pc, #56]	; (8004f24 <rand+0x7c>)
 8004eea:	4350      	muls	r0, r2
 8004eec:	fb04 0003 	mla	r0, r4, r3, r0
 8004ef0:	fba2 3404 	umull	r3, r4, r2, r4
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	4404      	add	r4, r0
 8004ef8:	f144 0000 	adc.w	r0, r4, #0
 8004efc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004f00:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	bf00      	nop
 8004f08:	20000024 	.word	0x20000024
 8004f0c:	08008ec0 	.word	0x08008ec0
 8004f10:	08008ed7 	.word	0x08008ed7
 8004f14:	abcd330e 	.word	0xabcd330e
 8004f18:	e66d1234 	.word	0xe66d1234
 8004f1c:	0005deec 	.word	0x0005deec
 8004f20:	5851f42d 	.word	0x5851f42d
 8004f24:	4c957f2d 	.word	0x4c957f2d

08004f28 <time>:
 8004f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <time+0x30>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4669      	mov	r1, sp
 8004f30:	4604      	mov	r4, r0
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	f000 f842 	bl	8004fbc <_gettimeofday_r>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	bfbe      	ittt	lt
 8004f3c:	f04f 32ff 	movlt.w	r2, #4294967295
 8004f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f44:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f4c:	b10c      	cbz	r4, 8004f52 <time+0x2a>
 8004f4e:	e9c4 0100 	strd	r0, r1, [r4]
 8004f52:	b004      	add	sp, #16
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	bf00      	nop
 8004f58:	20000024 	.word	0x20000024

08004f5c <__assert_func>:
 8004f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f5e:	4614      	mov	r4, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <__assert_func+0x2c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4605      	mov	r5, r0
 8004f68:	68d8      	ldr	r0, [r3, #12]
 8004f6a:	b14c      	cbz	r4, 8004f80 <__assert_func+0x24>
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <__assert_func+0x30>)
 8004f6e:	9100      	str	r1, [sp, #0]
 8004f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <__assert_func+0x34>)
 8004f76:	462b      	mov	r3, r5
 8004f78:	f000 f80e 	bl	8004f98 <fiprintf>
 8004f7c:	f000 fca0 	bl	80058c0 <abort>
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <__assert_func+0x38>)
 8004f82:	461c      	mov	r4, r3
 8004f84:	e7f3      	b.n	8004f6e <__assert_func+0x12>
 8004f86:	bf00      	nop
 8004f88:	20000024 	.word	0x20000024
 8004f8c:	08008f36 	.word	0x08008f36
 8004f90:	08008f43 	.word	0x08008f43
 8004f94:	08008f71 	.word	0x08008f71

08004f98 <fiprintf>:
 8004f98:	b40e      	push	{r1, r2, r3}
 8004f9a:	b503      	push	{r0, r1, lr}
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	ab03      	add	r3, sp, #12
 8004fa0:	4805      	ldr	r0, [pc, #20]	; (8004fb8 <fiprintf+0x20>)
 8004fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa6:	6800      	ldr	r0, [r0, #0]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	f000 f8f5 	bl	8005198 <_vfiprintf_r>
 8004fae:	b002      	add	sp, #8
 8004fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb4:	b003      	add	sp, #12
 8004fb6:	4770      	bx	lr
 8004fb8:	20000024 	.word	0x20000024

08004fbc <_gettimeofday_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d07      	ldr	r5, [pc, #28]	; (8004fdc <_gettimeofday_r+0x20>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	602b      	str	r3, [r5, #0]
 8004fca:	f000 ff9b 	bl	8005f04 <_gettimeofday>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d102      	bne.n	8004fd8 <_gettimeofday_r+0x1c>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	b103      	cbz	r3, 8004fd8 <_gettimeofday_r+0x1c>
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	bd38      	pop	{r3, r4, r5, pc}
 8004fda:	bf00      	nop
 8004fdc:	200011e4 	.word	0x200011e4

08004fe0 <malloc>:
 8004fe0:	4b02      	ldr	r3, [pc, #8]	; (8004fec <malloc+0xc>)
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	f000 b853 	b.w	8005090 <_malloc_r>
 8004fea:	bf00      	nop
 8004fec:	20000024 	.word	0x20000024

08004ff0 <_free_r>:
 8004ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d048      	beq.n	8005088 <_free_r+0x98>
 8004ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ffa:	9001      	str	r0, [sp, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8005002:	bfb8      	it	lt
 8005004:	18e4      	addlt	r4, r4, r3
 8005006:	f000 fe81 	bl	8005d0c <__malloc_lock>
 800500a:	4a20      	ldr	r2, [pc, #128]	; (800508c <_free_r+0x9c>)
 800500c:	9801      	ldr	r0, [sp, #4]
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	4615      	mov	r5, r2
 8005012:	b933      	cbnz	r3, 8005022 <_free_r+0x32>
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	6014      	str	r4, [r2, #0]
 8005018:	b003      	add	sp, #12
 800501a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800501e:	f000 be7b 	b.w	8005d18 <__malloc_unlock>
 8005022:	42a3      	cmp	r3, r4
 8005024:	d90b      	bls.n	800503e <_free_r+0x4e>
 8005026:	6821      	ldr	r1, [r4, #0]
 8005028:	1862      	adds	r2, r4, r1
 800502a:	4293      	cmp	r3, r2
 800502c:	bf04      	itt	eq
 800502e:	681a      	ldreq	r2, [r3, #0]
 8005030:	685b      	ldreq	r3, [r3, #4]
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	bf04      	itt	eq
 8005036:	1852      	addeq	r2, r2, r1
 8005038:	6022      	streq	r2, [r4, #0]
 800503a:	602c      	str	r4, [r5, #0]
 800503c:	e7ec      	b.n	8005018 <_free_r+0x28>
 800503e:	461a      	mov	r2, r3
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	b10b      	cbz	r3, 8005048 <_free_r+0x58>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d9fa      	bls.n	800503e <_free_r+0x4e>
 8005048:	6811      	ldr	r1, [r2, #0]
 800504a:	1855      	adds	r5, r2, r1
 800504c:	42a5      	cmp	r5, r4
 800504e:	d10b      	bne.n	8005068 <_free_r+0x78>
 8005050:	6824      	ldr	r4, [r4, #0]
 8005052:	4421      	add	r1, r4
 8005054:	1854      	adds	r4, r2, r1
 8005056:	42a3      	cmp	r3, r4
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	d1dd      	bne.n	8005018 <_free_r+0x28>
 800505c:	681c      	ldr	r4, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	6053      	str	r3, [r2, #4]
 8005062:	4421      	add	r1, r4
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	e7d7      	b.n	8005018 <_free_r+0x28>
 8005068:	d902      	bls.n	8005070 <_free_r+0x80>
 800506a:	230c      	movs	r3, #12
 800506c:	6003      	str	r3, [r0, #0]
 800506e:	e7d3      	b.n	8005018 <_free_r+0x28>
 8005070:	6825      	ldr	r5, [r4, #0]
 8005072:	1961      	adds	r1, r4, r5
 8005074:	428b      	cmp	r3, r1
 8005076:	bf04      	itt	eq
 8005078:	6819      	ldreq	r1, [r3, #0]
 800507a:	685b      	ldreq	r3, [r3, #4]
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	bf04      	itt	eq
 8005080:	1949      	addeq	r1, r1, r5
 8005082:	6021      	streq	r1, [r4, #0]
 8005084:	6054      	str	r4, [r2, #4]
 8005086:	e7c7      	b.n	8005018 <_free_r+0x28>
 8005088:	b003      	add	sp, #12
 800508a:	bd30      	pop	{r4, r5, pc}
 800508c:	200000c0 	.word	0x200000c0

08005090 <_malloc_r>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	1ccd      	adds	r5, r1, #3
 8005094:	f025 0503 	bic.w	r5, r5, #3
 8005098:	3508      	adds	r5, #8
 800509a:	2d0c      	cmp	r5, #12
 800509c:	bf38      	it	cc
 800509e:	250c      	movcc	r5, #12
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	4606      	mov	r6, r0
 80050a4:	db01      	blt.n	80050aa <_malloc_r+0x1a>
 80050a6:	42a9      	cmp	r1, r5
 80050a8:	d903      	bls.n	80050b2 <_malloc_r+0x22>
 80050aa:	230c      	movs	r3, #12
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	2000      	movs	r0, #0
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b2:	f000 fe2b 	bl	8005d0c <__malloc_lock>
 80050b6:	4921      	ldr	r1, [pc, #132]	; (800513c <_malloc_r+0xac>)
 80050b8:	680a      	ldr	r2, [r1, #0]
 80050ba:	4614      	mov	r4, r2
 80050bc:	b99c      	cbnz	r4, 80050e6 <_malloc_r+0x56>
 80050be:	4f20      	ldr	r7, [pc, #128]	; (8005140 <_malloc_r+0xb0>)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b923      	cbnz	r3, 80050ce <_malloc_r+0x3e>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4630      	mov	r0, r6
 80050c8:	f000 fb2a 	bl	8005720 <_sbrk_r>
 80050cc:	6038      	str	r0, [r7, #0]
 80050ce:	4629      	mov	r1, r5
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 fb25 	bl	8005720 <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d123      	bne.n	8005122 <_malloc_r+0x92>
 80050da:	230c      	movs	r3, #12
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 fe1a 	bl	8005d18 <__malloc_unlock>
 80050e4:	e7e3      	b.n	80050ae <_malloc_r+0x1e>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	1b5b      	subs	r3, r3, r5
 80050ea:	d417      	bmi.n	800511c <_malloc_r+0x8c>
 80050ec:	2b0b      	cmp	r3, #11
 80050ee:	d903      	bls.n	80050f8 <_malloc_r+0x68>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	441c      	add	r4, r3
 80050f4:	6025      	str	r5, [r4, #0]
 80050f6:	e004      	b.n	8005102 <_malloc_r+0x72>
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	42a2      	cmp	r2, r4
 80050fc:	bf0c      	ite	eq
 80050fe:	600b      	streq	r3, [r1, #0]
 8005100:	6053      	strne	r3, [r2, #4]
 8005102:	4630      	mov	r0, r6
 8005104:	f000 fe08 	bl	8005d18 <__malloc_unlock>
 8005108:	f104 000b 	add.w	r0, r4, #11
 800510c:	1d23      	adds	r3, r4, #4
 800510e:	f020 0007 	bic.w	r0, r0, #7
 8005112:	1ac2      	subs	r2, r0, r3
 8005114:	d0cc      	beq.n	80050b0 <_malloc_r+0x20>
 8005116:	1a1b      	subs	r3, r3, r0
 8005118:	50a3      	str	r3, [r4, r2]
 800511a:	e7c9      	b.n	80050b0 <_malloc_r+0x20>
 800511c:	4622      	mov	r2, r4
 800511e:	6864      	ldr	r4, [r4, #4]
 8005120:	e7cc      	b.n	80050bc <_malloc_r+0x2c>
 8005122:	1cc4      	adds	r4, r0, #3
 8005124:	f024 0403 	bic.w	r4, r4, #3
 8005128:	42a0      	cmp	r0, r4
 800512a:	d0e3      	beq.n	80050f4 <_malloc_r+0x64>
 800512c:	1a21      	subs	r1, r4, r0
 800512e:	4630      	mov	r0, r6
 8005130:	f000 faf6 	bl	8005720 <_sbrk_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d1dd      	bne.n	80050f4 <_malloc_r+0x64>
 8005138:	e7cf      	b.n	80050da <_malloc_r+0x4a>
 800513a:	bf00      	nop
 800513c:	200000c0 	.word	0x200000c0
 8005140:	200000c4 	.word	0x200000c4

08005144 <__sfputc_r>:
 8005144:	6893      	ldr	r3, [r2, #8]
 8005146:	3b01      	subs	r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	b410      	push	{r4}
 800514c:	6093      	str	r3, [r2, #8]
 800514e:	da08      	bge.n	8005162 <__sfputc_r+0x1e>
 8005150:	6994      	ldr	r4, [r2, #24]
 8005152:	42a3      	cmp	r3, r4
 8005154:	db01      	blt.n	800515a <__sfputc_r+0x16>
 8005156:	290a      	cmp	r1, #10
 8005158:	d103      	bne.n	8005162 <__sfputc_r+0x1e>
 800515a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800515e:	f000 baef 	b.w	8005740 <__swbuf_r>
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	1c58      	adds	r0, r3, #1
 8005166:	6010      	str	r0, [r2, #0]
 8005168:	7019      	strb	r1, [r3, #0]
 800516a:	4608      	mov	r0, r1
 800516c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005170:	4770      	bx	lr

08005172 <__sfputs_r>:
 8005172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	4614      	mov	r4, r2
 800517a:	18d5      	adds	r5, r2, r3
 800517c:	42ac      	cmp	r4, r5
 800517e:	d101      	bne.n	8005184 <__sfputs_r+0x12>
 8005180:	2000      	movs	r0, #0
 8005182:	e007      	b.n	8005194 <__sfputs_r+0x22>
 8005184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005188:	463a      	mov	r2, r7
 800518a:	4630      	mov	r0, r6
 800518c:	f7ff ffda 	bl	8005144 <__sfputc_r>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d1f3      	bne.n	800517c <__sfputs_r+0xa>
 8005194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005198 <_vfiprintf_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	460d      	mov	r5, r1
 800519e:	b09d      	sub	sp, #116	; 0x74
 80051a0:	4614      	mov	r4, r2
 80051a2:	4698      	mov	r8, r3
 80051a4:	4606      	mov	r6, r0
 80051a6:	b118      	cbz	r0, 80051b0 <_vfiprintf_r+0x18>
 80051a8:	6983      	ldr	r3, [r0, #24]
 80051aa:	b90b      	cbnz	r3, 80051b0 <_vfiprintf_r+0x18>
 80051ac:	f000 fcaa 	bl	8005b04 <__sinit>
 80051b0:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <_vfiprintf_r+0x240>)
 80051b2:	429d      	cmp	r5, r3
 80051b4:	d11b      	bne.n	80051ee <_vfiprintf_r+0x56>
 80051b6:	6875      	ldr	r5, [r6, #4]
 80051b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ba:	07d9      	lsls	r1, r3, #31
 80051bc:	d405      	bmi.n	80051ca <_vfiprintf_r+0x32>
 80051be:	89ab      	ldrh	r3, [r5, #12]
 80051c0:	059a      	lsls	r2, r3, #22
 80051c2:	d402      	bmi.n	80051ca <_vfiprintf_r+0x32>
 80051c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051c6:	f000 fd3b 	bl	8005c40 <__retarget_lock_acquire_recursive>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	071b      	lsls	r3, r3, #28
 80051ce:	d501      	bpl.n	80051d4 <_vfiprintf_r+0x3c>
 80051d0:	692b      	ldr	r3, [r5, #16]
 80051d2:	b9eb      	cbnz	r3, 8005210 <_vfiprintf_r+0x78>
 80051d4:	4629      	mov	r1, r5
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 fb04 	bl	80057e4 <__swsetup_r>
 80051dc:	b1c0      	cbz	r0, 8005210 <_vfiprintf_r+0x78>
 80051de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051e0:	07dc      	lsls	r4, r3, #31
 80051e2:	d50e      	bpl.n	8005202 <_vfiprintf_r+0x6a>
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	b01d      	add	sp, #116	; 0x74
 80051ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ee:	4b7b      	ldr	r3, [pc, #492]	; (80053dc <_vfiprintf_r+0x244>)
 80051f0:	429d      	cmp	r5, r3
 80051f2:	d101      	bne.n	80051f8 <_vfiprintf_r+0x60>
 80051f4:	68b5      	ldr	r5, [r6, #8]
 80051f6:	e7df      	b.n	80051b8 <_vfiprintf_r+0x20>
 80051f8:	4b79      	ldr	r3, [pc, #484]	; (80053e0 <_vfiprintf_r+0x248>)
 80051fa:	429d      	cmp	r5, r3
 80051fc:	bf08      	it	eq
 80051fe:	68f5      	ldreq	r5, [r6, #12]
 8005200:	e7da      	b.n	80051b8 <_vfiprintf_r+0x20>
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	0598      	lsls	r0, r3, #22
 8005206:	d4ed      	bmi.n	80051e4 <_vfiprintf_r+0x4c>
 8005208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800520a:	f000 fd1a 	bl	8005c42 <__retarget_lock_release_recursive>
 800520e:	e7e9      	b.n	80051e4 <_vfiprintf_r+0x4c>
 8005210:	2300      	movs	r3, #0
 8005212:	9309      	str	r3, [sp, #36]	; 0x24
 8005214:	2320      	movs	r3, #32
 8005216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800521a:	f8cd 800c 	str.w	r8, [sp, #12]
 800521e:	2330      	movs	r3, #48	; 0x30
 8005220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053e4 <_vfiprintf_r+0x24c>
 8005224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005228:	f04f 0901 	mov.w	r9, #1
 800522c:	4623      	mov	r3, r4
 800522e:	469a      	mov	sl, r3
 8005230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005234:	b10a      	cbz	r2, 800523a <_vfiprintf_r+0xa2>
 8005236:	2a25      	cmp	r2, #37	; 0x25
 8005238:	d1f9      	bne.n	800522e <_vfiprintf_r+0x96>
 800523a:	ebba 0b04 	subs.w	fp, sl, r4
 800523e:	d00b      	beq.n	8005258 <_vfiprintf_r+0xc0>
 8005240:	465b      	mov	r3, fp
 8005242:	4622      	mov	r2, r4
 8005244:	4629      	mov	r1, r5
 8005246:	4630      	mov	r0, r6
 8005248:	f7ff ff93 	bl	8005172 <__sfputs_r>
 800524c:	3001      	adds	r0, #1
 800524e:	f000 80aa 	beq.w	80053a6 <_vfiprintf_r+0x20e>
 8005252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005254:	445a      	add	r2, fp
 8005256:	9209      	str	r2, [sp, #36]	; 0x24
 8005258:	f89a 3000 	ldrb.w	r3, [sl]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80a2 	beq.w	80053a6 <_vfiprintf_r+0x20e>
 8005262:	2300      	movs	r3, #0
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800526c:	f10a 0a01 	add.w	sl, sl, #1
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005278:	931a      	str	r3, [sp, #104]	; 0x68
 800527a:	4654      	mov	r4, sl
 800527c:	2205      	movs	r2, #5
 800527e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005282:	4858      	ldr	r0, [pc, #352]	; (80053e4 <_vfiprintf_r+0x24c>)
 8005284:	f7fa ffa4 	bl	80001d0 <memchr>
 8005288:	9a04      	ldr	r2, [sp, #16]
 800528a:	b9d8      	cbnz	r0, 80052c4 <_vfiprintf_r+0x12c>
 800528c:	06d1      	lsls	r1, r2, #27
 800528e:	bf44      	itt	mi
 8005290:	2320      	movmi	r3, #32
 8005292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005296:	0713      	lsls	r3, r2, #28
 8005298:	bf44      	itt	mi
 800529a:	232b      	movmi	r3, #43	; 0x2b
 800529c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a0:	f89a 3000 	ldrb.w	r3, [sl]
 80052a4:	2b2a      	cmp	r3, #42	; 0x2a
 80052a6:	d015      	beq.n	80052d4 <_vfiprintf_r+0x13c>
 80052a8:	9a07      	ldr	r2, [sp, #28]
 80052aa:	4654      	mov	r4, sl
 80052ac:	2000      	movs	r0, #0
 80052ae:	f04f 0c0a 	mov.w	ip, #10
 80052b2:	4621      	mov	r1, r4
 80052b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b8:	3b30      	subs	r3, #48	; 0x30
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	d94e      	bls.n	800535c <_vfiprintf_r+0x1c4>
 80052be:	b1b0      	cbz	r0, 80052ee <_vfiprintf_r+0x156>
 80052c0:	9207      	str	r2, [sp, #28]
 80052c2:	e014      	b.n	80052ee <_vfiprintf_r+0x156>
 80052c4:	eba0 0308 	sub.w	r3, r0, r8
 80052c8:	fa09 f303 	lsl.w	r3, r9, r3
 80052cc:	4313      	orrs	r3, r2
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	46a2      	mov	sl, r4
 80052d2:	e7d2      	b.n	800527a <_vfiprintf_r+0xe2>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	1d19      	adds	r1, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	9103      	str	r1, [sp, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfbb      	ittet	lt
 80052e0:	425b      	neglt	r3, r3
 80052e2:	f042 0202 	orrlt.w	r2, r2, #2
 80052e6:	9307      	strge	r3, [sp, #28]
 80052e8:	9307      	strlt	r3, [sp, #28]
 80052ea:	bfb8      	it	lt
 80052ec:	9204      	strlt	r2, [sp, #16]
 80052ee:	7823      	ldrb	r3, [r4, #0]
 80052f0:	2b2e      	cmp	r3, #46	; 0x2e
 80052f2:	d10c      	bne.n	800530e <_vfiprintf_r+0x176>
 80052f4:	7863      	ldrb	r3, [r4, #1]
 80052f6:	2b2a      	cmp	r3, #42	; 0x2a
 80052f8:	d135      	bne.n	8005366 <_vfiprintf_r+0x1ce>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	1d1a      	adds	r2, r3, #4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	9203      	str	r2, [sp, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	bfb8      	it	lt
 8005306:	f04f 33ff 	movlt.w	r3, #4294967295
 800530a:	3402      	adds	r4, #2
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053f4 <_vfiprintf_r+0x25c>
 8005312:	7821      	ldrb	r1, [r4, #0]
 8005314:	2203      	movs	r2, #3
 8005316:	4650      	mov	r0, sl
 8005318:	f7fa ff5a 	bl	80001d0 <memchr>
 800531c:	b140      	cbz	r0, 8005330 <_vfiprintf_r+0x198>
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	eba0 000a 	sub.w	r0, r0, sl
 8005324:	fa03 f000 	lsl.w	r0, r3, r0
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	4303      	orrs	r3, r0
 800532c:	3401      	adds	r4, #1
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005334:	482c      	ldr	r0, [pc, #176]	; (80053e8 <_vfiprintf_r+0x250>)
 8005336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800533a:	2206      	movs	r2, #6
 800533c:	f7fa ff48 	bl	80001d0 <memchr>
 8005340:	2800      	cmp	r0, #0
 8005342:	d03f      	beq.n	80053c4 <_vfiprintf_r+0x22c>
 8005344:	4b29      	ldr	r3, [pc, #164]	; (80053ec <_vfiprintf_r+0x254>)
 8005346:	bb1b      	cbnz	r3, 8005390 <_vfiprintf_r+0x1f8>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	3307      	adds	r3, #7
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	3308      	adds	r3, #8
 8005352:	9303      	str	r3, [sp, #12]
 8005354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005356:	443b      	add	r3, r7
 8005358:	9309      	str	r3, [sp, #36]	; 0x24
 800535a:	e767      	b.n	800522c <_vfiprintf_r+0x94>
 800535c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005360:	460c      	mov	r4, r1
 8005362:	2001      	movs	r0, #1
 8005364:	e7a5      	b.n	80052b2 <_vfiprintf_r+0x11a>
 8005366:	2300      	movs	r3, #0
 8005368:	3401      	adds	r4, #1
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	4619      	mov	r1, r3
 800536e:	f04f 0c0a 	mov.w	ip, #10
 8005372:	4620      	mov	r0, r4
 8005374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005378:	3a30      	subs	r2, #48	; 0x30
 800537a:	2a09      	cmp	r2, #9
 800537c:	d903      	bls.n	8005386 <_vfiprintf_r+0x1ee>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0c5      	beq.n	800530e <_vfiprintf_r+0x176>
 8005382:	9105      	str	r1, [sp, #20]
 8005384:	e7c3      	b.n	800530e <_vfiprintf_r+0x176>
 8005386:	fb0c 2101 	mla	r1, ip, r1, r2
 800538a:	4604      	mov	r4, r0
 800538c:	2301      	movs	r3, #1
 800538e:	e7f0      	b.n	8005372 <_vfiprintf_r+0x1da>
 8005390:	ab03      	add	r3, sp, #12
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	462a      	mov	r2, r5
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <_vfiprintf_r+0x258>)
 8005398:	a904      	add	r1, sp, #16
 800539a:	4630      	mov	r0, r6
 800539c:	f3af 8000 	nop.w
 80053a0:	4607      	mov	r7, r0
 80053a2:	1c78      	adds	r0, r7, #1
 80053a4:	d1d6      	bne.n	8005354 <_vfiprintf_r+0x1bc>
 80053a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053a8:	07d9      	lsls	r1, r3, #31
 80053aa:	d405      	bmi.n	80053b8 <_vfiprintf_r+0x220>
 80053ac:	89ab      	ldrh	r3, [r5, #12]
 80053ae:	059a      	lsls	r2, r3, #22
 80053b0:	d402      	bmi.n	80053b8 <_vfiprintf_r+0x220>
 80053b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053b4:	f000 fc45 	bl	8005c42 <__retarget_lock_release_recursive>
 80053b8:	89ab      	ldrh	r3, [r5, #12]
 80053ba:	065b      	lsls	r3, r3, #25
 80053bc:	f53f af12 	bmi.w	80051e4 <_vfiprintf_r+0x4c>
 80053c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053c2:	e711      	b.n	80051e8 <_vfiprintf_r+0x50>
 80053c4:	ab03      	add	r3, sp, #12
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <_vfiprintf_r+0x258>)
 80053cc:	a904      	add	r1, sp, #16
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 f880 	bl	80054d4 <_printf_i>
 80053d4:	e7e4      	b.n	80053a0 <_vfiprintf_r+0x208>
 80053d6:	bf00      	nop
 80053d8:	08008fc8 	.word	0x08008fc8
 80053dc:	08008fe8 	.word	0x08008fe8
 80053e0:	08008fa8 	.word	0x08008fa8
 80053e4:	08008f72 	.word	0x08008f72
 80053e8:	08008f7c 	.word	0x08008f7c
 80053ec:	00000000 	.word	0x00000000
 80053f0:	08005173 	.word	0x08005173
 80053f4:	08008f78 	.word	0x08008f78

080053f8 <_printf_common>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	4699      	mov	r9, r3
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005408:	4293      	cmp	r3, r2
 800540a:	bfb8      	it	lt
 800540c:	4613      	movlt	r3, r2
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005414:	4607      	mov	r7, r0
 8005416:	460c      	mov	r4, r1
 8005418:	b10a      	cbz	r2, 800541e <_printf_common+0x26>
 800541a:	3301      	adds	r3, #1
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0699      	lsls	r1, r3, #26
 8005422:	bf42      	ittt	mi
 8005424:	6833      	ldrmi	r3, [r6, #0]
 8005426:	3302      	addmi	r3, #2
 8005428:	6033      	strmi	r3, [r6, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	f015 0506 	ands.w	r5, r5, #6
 8005430:	d106      	bne.n	8005440 <_printf_common+0x48>
 8005432:	f104 0a19 	add.w	sl, r4, #25
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	6832      	ldr	r2, [r6, #0]
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ab      	cmp	r3, r5
 800543e:	dc26      	bgt.n	800548e <_printf_common+0x96>
 8005440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005444:	1e13      	subs	r3, r2, #0
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	bf18      	it	ne
 800544a:	2301      	movne	r3, #1
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d42b      	bmi.n	80054a8 <_printf_common+0xb0>
 8005450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d01e      	beq.n	800549c <_printf_common+0xa4>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	68e5      	ldr	r5, [r4, #12]
 8005462:	6832      	ldr	r2, [r6, #0]
 8005464:	f003 0306 	and.w	r3, r3, #6
 8005468:	2b04      	cmp	r3, #4
 800546a:	bf08      	it	eq
 800546c:	1aad      	subeq	r5, r5, r2
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	6922      	ldr	r2, [r4, #16]
 8005472:	bf0c      	ite	eq
 8005474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005478:	2500      	movne	r5, #0
 800547a:	4293      	cmp	r3, r2
 800547c:	bfc4      	itt	gt
 800547e:	1a9b      	subgt	r3, r3, r2
 8005480:	18ed      	addgt	r5, r5, r3
 8005482:	2600      	movs	r6, #0
 8005484:	341a      	adds	r4, #26
 8005486:	42b5      	cmp	r5, r6
 8005488:	d11a      	bne.n	80054c0 <_printf_common+0xc8>
 800548a:	2000      	movs	r0, #0
 800548c:	e008      	b.n	80054a0 <_printf_common+0xa8>
 800548e:	2301      	movs	r3, #1
 8005490:	4652      	mov	r2, sl
 8005492:	4649      	mov	r1, r9
 8005494:	4638      	mov	r0, r7
 8005496:	47c0      	blx	r8
 8005498:	3001      	adds	r0, #1
 800549a:	d103      	bne.n	80054a4 <_printf_common+0xac>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a4:	3501      	adds	r5, #1
 80054a6:	e7c6      	b.n	8005436 <_printf_common+0x3e>
 80054a8:	18e1      	adds	r1, r4, r3
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	2030      	movs	r0, #48	; 0x30
 80054ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b2:	4422      	add	r2, r4
 80054b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054bc:	3302      	adds	r3, #2
 80054be:	e7c7      	b.n	8005450 <_printf_common+0x58>
 80054c0:	2301      	movs	r3, #1
 80054c2:	4622      	mov	r2, r4
 80054c4:	4649      	mov	r1, r9
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c0      	blx	r8
 80054ca:	3001      	adds	r0, #1
 80054cc:	d0e6      	beq.n	800549c <_printf_common+0xa4>
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7d9      	b.n	8005486 <_printf_common+0x8e>
	...

080054d4 <_printf_i>:
 80054d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	460c      	mov	r4, r1
 80054da:	4691      	mov	r9, r2
 80054dc:	7e27      	ldrb	r7, [r4, #24]
 80054de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4680      	mov	r8, r0
 80054e4:	469a      	mov	sl, r3
 80054e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ea:	d807      	bhi.n	80054fc <_printf_i+0x28>
 80054ec:	2f62      	cmp	r7, #98	; 0x62
 80054ee:	d80a      	bhi.n	8005506 <_printf_i+0x32>
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	f000 80d8 	beq.w	80056a6 <_printf_i+0x1d2>
 80054f6:	2f58      	cmp	r7, #88	; 0x58
 80054f8:	f000 80a3 	beq.w	8005642 <_printf_i+0x16e>
 80054fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005504:	e03a      	b.n	800557c <_printf_i+0xa8>
 8005506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550a:	2b15      	cmp	r3, #21
 800550c:	d8f6      	bhi.n	80054fc <_printf_i+0x28>
 800550e:	a001      	add	r0, pc, #4	; (adr r0, 8005514 <_printf_i+0x40>)
 8005510:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005514:	0800556d 	.word	0x0800556d
 8005518:	08005581 	.word	0x08005581
 800551c:	080054fd 	.word	0x080054fd
 8005520:	080054fd 	.word	0x080054fd
 8005524:	080054fd 	.word	0x080054fd
 8005528:	080054fd 	.word	0x080054fd
 800552c:	08005581 	.word	0x08005581
 8005530:	080054fd 	.word	0x080054fd
 8005534:	080054fd 	.word	0x080054fd
 8005538:	080054fd 	.word	0x080054fd
 800553c:	080054fd 	.word	0x080054fd
 8005540:	0800568d 	.word	0x0800568d
 8005544:	080055b1 	.word	0x080055b1
 8005548:	0800566f 	.word	0x0800566f
 800554c:	080054fd 	.word	0x080054fd
 8005550:	080054fd 	.word	0x080054fd
 8005554:	080056af 	.word	0x080056af
 8005558:	080054fd 	.word	0x080054fd
 800555c:	080055b1 	.word	0x080055b1
 8005560:	080054fd 	.word	0x080054fd
 8005564:	080054fd 	.word	0x080054fd
 8005568:	08005677 	.word	0x08005677
 800556c:	680b      	ldr	r3, [r1, #0]
 800556e:	1d1a      	adds	r2, r3, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	600a      	str	r2, [r1, #0]
 8005574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800557c:	2301      	movs	r3, #1
 800557e:	e0a3      	b.n	80056c8 <_printf_i+0x1f4>
 8005580:	6825      	ldr	r5, [r4, #0]
 8005582:	6808      	ldr	r0, [r1, #0]
 8005584:	062e      	lsls	r6, r5, #24
 8005586:	f100 0304 	add.w	r3, r0, #4
 800558a:	d50a      	bpl.n	80055a2 <_printf_i+0xce>
 800558c:	6805      	ldr	r5, [r0, #0]
 800558e:	600b      	str	r3, [r1, #0]
 8005590:	2d00      	cmp	r5, #0
 8005592:	da03      	bge.n	800559c <_printf_i+0xc8>
 8005594:	232d      	movs	r3, #45	; 0x2d
 8005596:	426d      	negs	r5, r5
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559c:	485e      	ldr	r0, [pc, #376]	; (8005718 <_printf_i+0x244>)
 800559e:	230a      	movs	r3, #10
 80055a0:	e019      	b.n	80055d6 <_printf_i+0x102>
 80055a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055a6:	6805      	ldr	r5, [r0, #0]
 80055a8:	600b      	str	r3, [r1, #0]
 80055aa:	bf18      	it	ne
 80055ac:	b22d      	sxthne	r5, r5
 80055ae:	e7ef      	b.n	8005590 <_printf_i+0xbc>
 80055b0:	680b      	ldr	r3, [r1, #0]
 80055b2:	6825      	ldr	r5, [r4, #0]
 80055b4:	1d18      	adds	r0, r3, #4
 80055b6:	6008      	str	r0, [r1, #0]
 80055b8:	0628      	lsls	r0, r5, #24
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0xec>
 80055bc:	681d      	ldr	r5, [r3, #0]
 80055be:	e002      	b.n	80055c6 <_printf_i+0xf2>
 80055c0:	0669      	lsls	r1, r5, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0xe8>
 80055c4:	881d      	ldrh	r5, [r3, #0]
 80055c6:	4854      	ldr	r0, [pc, #336]	; (8005718 <_printf_i+0x244>)
 80055c8:	2f6f      	cmp	r7, #111	; 0x6f
 80055ca:	bf0c      	ite	eq
 80055cc:	2308      	moveq	r3, #8
 80055ce:	230a      	movne	r3, #10
 80055d0:	2100      	movs	r1, #0
 80055d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055d6:	6866      	ldr	r6, [r4, #4]
 80055d8:	60a6      	str	r6, [r4, #8]
 80055da:	2e00      	cmp	r6, #0
 80055dc:	bfa2      	ittt	ge
 80055de:	6821      	ldrge	r1, [r4, #0]
 80055e0:	f021 0104 	bicge.w	r1, r1, #4
 80055e4:	6021      	strge	r1, [r4, #0]
 80055e6:	b90d      	cbnz	r5, 80055ec <_printf_i+0x118>
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	d04d      	beq.n	8005688 <_printf_i+0x1b4>
 80055ec:	4616      	mov	r6, r2
 80055ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80055f2:	fb03 5711 	mls	r7, r3, r1, r5
 80055f6:	5dc7      	ldrb	r7, [r0, r7]
 80055f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055fc:	462f      	mov	r7, r5
 80055fe:	42bb      	cmp	r3, r7
 8005600:	460d      	mov	r5, r1
 8005602:	d9f4      	bls.n	80055ee <_printf_i+0x11a>
 8005604:	2b08      	cmp	r3, #8
 8005606:	d10b      	bne.n	8005620 <_printf_i+0x14c>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07df      	lsls	r7, r3, #31
 800560c:	d508      	bpl.n	8005620 <_printf_i+0x14c>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	6861      	ldr	r1, [r4, #4]
 8005612:	4299      	cmp	r1, r3
 8005614:	bfde      	ittt	le
 8005616:	2330      	movle	r3, #48	; 0x30
 8005618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800561c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005620:	1b92      	subs	r2, r2, r6
 8005622:	6122      	str	r2, [r4, #16]
 8005624:	f8cd a000 	str.w	sl, [sp]
 8005628:	464b      	mov	r3, r9
 800562a:	aa03      	add	r2, sp, #12
 800562c:	4621      	mov	r1, r4
 800562e:	4640      	mov	r0, r8
 8005630:	f7ff fee2 	bl	80053f8 <_printf_common>
 8005634:	3001      	adds	r0, #1
 8005636:	d14c      	bne.n	80056d2 <_printf_i+0x1fe>
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	b004      	add	sp, #16
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	4835      	ldr	r0, [pc, #212]	; (8005718 <_printf_i+0x244>)
 8005644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	680e      	ldr	r6, [r1, #0]
 800564c:	061f      	lsls	r7, r3, #24
 800564e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005652:	600e      	str	r6, [r1, #0]
 8005654:	d514      	bpl.n	8005680 <_printf_i+0x1ac>
 8005656:	07d9      	lsls	r1, r3, #31
 8005658:	bf44      	itt	mi
 800565a:	f043 0320 	orrmi.w	r3, r3, #32
 800565e:	6023      	strmi	r3, [r4, #0]
 8005660:	b91d      	cbnz	r5, 800566a <_printf_i+0x196>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f023 0320 	bic.w	r3, r3, #32
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	2310      	movs	r3, #16
 800566c:	e7b0      	b.n	80055d0 <_printf_i+0xfc>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f043 0320 	orr.w	r3, r3, #32
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	2378      	movs	r3, #120	; 0x78
 8005678:	4828      	ldr	r0, [pc, #160]	; (800571c <_printf_i+0x248>)
 800567a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800567e:	e7e3      	b.n	8005648 <_printf_i+0x174>
 8005680:	065e      	lsls	r6, r3, #25
 8005682:	bf48      	it	mi
 8005684:	b2ad      	uxthmi	r5, r5
 8005686:	e7e6      	b.n	8005656 <_printf_i+0x182>
 8005688:	4616      	mov	r6, r2
 800568a:	e7bb      	b.n	8005604 <_printf_i+0x130>
 800568c:	680b      	ldr	r3, [r1, #0]
 800568e:	6826      	ldr	r6, [r4, #0]
 8005690:	6960      	ldr	r0, [r4, #20]
 8005692:	1d1d      	adds	r5, r3, #4
 8005694:	600d      	str	r5, [r1, #0]
 8005696:	0635      	lsls	r5, r6, #24
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	d501      	bpl.n	80056a0 <_printf_i+0x1cc>
 800569c:	6018      	str	r0, [r3, #0]
 800569e:	e002      	b.n	80056a6 <_printf_i+0x1d2>
 80056a0:	0671      	lsls	r1, r6, #25
 80056a2:	d5fb      	bpl.n	800569c <_printf_i+0x1c8>
 80056a4:	8018      	strh	r0, [r3, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	4616      	mov	r6, r2
 80056ac:	e7ba      	b.n	8005624 <_printf_i+0x150>
 80056ae:	680b      	ldr	r3, [r1, #0]
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	600a      	str	r2, [r1, #0]
 80056b4:	681e      	ldr	r6, [r3, #0]
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	2100      	movs	r1, #0
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7fa fd88 	bl	80001d0 <memchr>
 80056c0:	b108      	cbz	r0, 80056c6 <_printf_i+0x1f2>
 80056c2:	1b80      	subs	r0, r0, r6
 80056c4:	6060      	str	r0, [r4, #4]
 80056c6:	6863      	ldr	r3, [r4, #4]
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	2300      	movs	r3, #0
 80056cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d0:	e7a8      	b.n	8005624 <_printf_i+0x150>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	4632      	mov	r2, r6
 80056d6:	4649      	mov	r1, r9
 80056d8:	4640      	mov	r0, r8
 80056da:	47d0      	blx	sl
 80056dc:	3001      	adds	r0, #1
 80056de:	d0ab      	beq.n	8005638 <_printf_i+0x164>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	079b      	lsls	r3, r3, #30
 80056e4:	d413      	bmi.n	800570e <_printf_i+0x23a>
 80056e6:	68e0      	ldr	r0, [r4, #12]
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	4298      	cmp	r0, r3
 80056ec:	bfb8      	it	lt
 80056ee:	4618      	movlt	r0, r3
 80056f0:	e7a4      	b.n	800563c <_printf_i+0x168>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4632      	mov	r2, r6
 80056f6:	4649      	mov	r1, r9
 80056f8:	4640      	mov	r0, r8
 80056fa:	47d0      	blx	sl
 80056fc:	3001      	adds	r0, #1
 80056fe:	d09b      	beq.n	8005638 <_printf_i+0x164>
 8005700:	3501      	adds	r5, #1
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	9903      	ldr	r1, [sp, #12]
 8005706:	1a5b      	subs	r3, r3, r1
 8005708:	42ab      	cmp	r3, r5
 800570a:	dcf2      	bgt.n	80056f2 <_printf_i+0x21e>
 800570c:	e7eb      	b.n	80056e6 <_printf_i+0x212>
 800570e:	2500      	movs	r5, #0
 8005710:	f104 0619 	add.w	r6, r4, #25
 8005714:	e7f5      	b.n	8005702 <_printf_i+0x22e>
 8005716:	bf00      	nop
 8005718:	08008f83 	.word	0x08008f83
 800571c:	08008f94 	.word	0x08008f94

08005720 <_sbrk_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d06      	ldr	r5, [pc, #24]	; (800573c <_sbrk_r+0x1c>)
 8005724:	2300      	movs	r3, #0
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	f7fc ff9c 	bl	8002668 <_sbrk>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_sbrk_r+0x1a>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_sbrk_r+0x1a>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	200011e4 	.word	0x200011e4

08005740 <__swbuf_r>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	460e      	mov	r6, r1
 8005744:	4614      	mov	r4, r2
 8005746:	4605      	mov	r5, r0
 8005748:	b118      	cbz	r0, 8005752 <__swbuf_r+0x12>
 800574a:	6983      	ldr	r3, [r0, #24]
 800574c:	b90b      	cbnz	r3, 8005752 <__swbuf_r+0x12>
 800574e:	f000 f9d9 	bl	8005b04 <__sinit>
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <__swbuf_r+0x98>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d12b      	bne.n	80057b0 <__swbuf_r+0x70>
 8005758:	686c      	ldr	r4, [r5, #4]
 800575a:	69a3      	ldr	r3, [r4, #24]
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	071a      	lsls	r2, r3, #28
 8005762:	d52f      	bpl.n	80057c4 <__swbuf_r+0x84>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	b36b      	cbz	r3, 80057c4 <__swbuf_r+0x84>
 8005768:	6923      	ldr	r3, [r4, #16]
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	1ac0      	subs	r0, r0, r3
 800576e:	6963      	ldr	r3, [r4, #20]
 8005770:	b2f6      	uxtb	r6, r6
 8005772:	4283      	cmp	r3, r0
 8005774:	4637      	mov	r7, r6
 8005776:	dc04      	bgt.n	8005782 <__swbuf_r+0x42>
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f000 f92e 	bl	80059dc <_fflush_r>
 8005780:	bb30      	cbnz	r0, 80057d0 <__swbuf_r+0x90>
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	3b01      	subs	r3, #1
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	6022      	str	r2, [r4, #0]
 800578e:	701e      	strb	r6, [r3, #0]
 8005790:	6963      	ldr	r3, [r4, #20]
 8005792:	3001      	adds	r0, #1
 8005794:	4283      	cmp	r3, r0
 8005796:	d004      	beq.n	80057a2 <__swbuf_r+0x62>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	07db      	lsls	r3, r3, #31
 800579c:	d506      	bpl.n	80057ac <__swbuf_r+0x6c>
 800579e:	2e0a      	cmp	r6, #10
 80057a0:	d104      	bne.n	80057ac <__swbuf_r+0x6c>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f919 	bl	80059dc <_fflush_r>
 80057aa:	b988      	cbnz	r0, 80057d0 <__swbuf_r+0x90>
 80057ac:	4638      	mov	r0, r7
 80057ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <__swbuf_r+0x9c>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d101      	bne.n	80057ba <__swbuf_r+0x7a>
 80057b6:	68ac      	ldr	r4, [r5, #8]
 80057b8:	e7cf      	b.n	800575a <__swbuf_r+0x1a>
 80057ba:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <__swbuf_r+0xa0>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	bf08      	it	eq
 80057c0:	68ec      	ldreq	r4, [r5, #12]
 80057c2:	e7ca      	b.n	800575a <__swbuf_r+0x1a>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 f80c 	bl	80057e4 <__swsetup_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d0cb      	beq.n	8005768 <__swbuf_r+0x28>
 80057d0:	f04f 37ff 	mov.w	r7, #4294967295
 80057d4:	e7ea      	b.n	80057ac <__swbuf_r+0x6c>
 80057d6:	bf00      	nop
 80057d8:	08008fc8 	.word	0x08008fc8
 80057dc:	08008fe8 	.word	0x08008fe8
 80057e0:	08008fa8 	.word	0x08008fa8

080057e4 <__swsetup_r>:
 80057e4:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <__swsetup_r+0xcc>)
 80057e6:	b570      	push	{r4, r5, r6, lr}
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	4606      	mov	r6, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	b125      	cbz	r5, 80057fa <__swsetup_r+0x16>
 80057f0:	69ab      	ldr	r3, [r5, #24]
 80057f2:	b913      	cbnz	r3, 80057fa <__swsetup_r+0x16>
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f985 	bl	8005b04 <__sinit>
 80057fa:	4b2e      	ldr	r3, [pc, #184]	; (80058b4 <__swsetup_r+0xd0>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d10f      	bne.n	8005820 <__swsetup_r+0x3c>
 8005800:	686c      	ldr	r4, [r5, #4]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005808:	0719      	lsls	r1, r3, #28
 800580a:	d42c      	bmi.n	8005866 <__swsetup_r+0x82>
 800580c:	06dd      	lsls	r5, r3, #27
 800580e:	d411      	bmi.n	8005834 <__swsetup_r+0x50>
 8005810:	2309      	movs	r3, #9
 8005812:	6033      	str	r3, [r6, #0]
 8005814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	f04f 30ff 	mov.w	r0, #4294967295
 800581e:	e03e      	b.n	800589e <__swsetup_r+0xba>
 8005820:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <__swsetup_r+0xd4>)
 8005822:	429c      	cmp	r4, r3
 8005824:	d101      	bne.n	800582a <__swsetup_r+0x46>
 8005826:	68ac      	ldr	r4, [r5, #8]
 8005828:	e7eb      	b.n	8005802 <__swsetup_r+0x1e>
 800582a:	4b24      	ldr	r3, [pc, #144]	; (80058bc <__swsetup_r+0xd8>)
 800582c:	429c      	cmp	r4, r3
 800582e:	bf08      	it	eq
 8005830:	68ec      	ldreq	r4, [r5, #12]
 8005832:	e7e6      	b.n	8005802 <__swsetup_r+0x1e>
 8005834:	0758      	lsls	r0, r3, #29
 8005836:	d512      	bpl.n	800585e <__swsetup_r+0x7a>
 8005838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800583a:	b141      	cbz	r1, 800584e <__swsetup_r+0x6a>
 800583c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005840:	4299      	cmp	r1, r3
 8005842:	d002      	beq.n	800584a <__swsetup_r+0x66>
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff fbd3 	bl	8004ff0 <_free_r>
 800584a:	2300      	movs	r3, #0
 800584c:	6363      	str	r3, [r4, #52]	; 0x34
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	2300      	movs	r3, #0
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f043 0308 	orr.w	r3, r3, #8
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	b94b      	cbnz	r3, 800587e <__swsetup_r+0x9a>
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d003      	beq.n	800587e <__swsetup_r+0x9a>
 8005876:	4621      	mov	r1, r4
 8005878:	4630      	mov	r0, r6
 800587a:	f000 fa07 	bl	8005c8c <__smakebuf_r>
 800587e:	89a0      	ldrh	r0, [r4, #12]
 8005880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005884:	f010 0301 	ands.w	r3, r0, #1
 8005888:	d00a      	beq.n	80058a0 <__swsetup_r+0xbc>
 800588a:	2300      	movs	r3, #0
 800588c:	60a3      	str	r3, [r4, #8]
 800588e:	6963      	ldr	r3, [r4, #20]
 8005890:	425b      	negs	r3, r3
 8005892:	61a3      	str	r3, [r4, #24]
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	b943      	cbnz	r3, 80058aa <__swsetup_r+0xc6>
 8005898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800589c:	d1ba      	bne.n	8005814 <__swsetup_r+0x30>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	0781      	lsls	r1, r0, #30
 80058a2:	bf58      	it	pl
 80058a4:	6963      	ldrpl	r3, [r4, #20]
 80058a6:	60a3      	str	r3, [r4, #8]
 80058a8:	e7f4      	b.n	8005894 <__swsetup_r+0xb0>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e7f7      	b.n	800589e <__swsetup_r+0xba>
 80058ae:	bf00      	nop
 80058b0:	20000024 	.word	0x20000024
 80058b4:	08008fc8 	.word	0x08008fc8
 80058b8:	08008fe8 	.word	0x08008fe8
 80058bc:	08008fa8 	.word	0x08008fa8

080058c0 <abort>:
 80058c0:	b508      	push	{r3, lr}
 80058c2:	2006      	movs	r0, #6
 80058c4:	f000 fa56 	bl	8005d74 <raise>
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7fc fe55 	bl	8002578 <_exit>
	...

080058d0 <__sflush_r>:
 80058d0:	898a      	ldrh	r2, [r1, #12]
 80058d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	4605      	mov	r5, r0
 80058d8:	0710      	lsls	r0, r2, #28
 80058da:	460c      	mov	r4, r1
 80058dc:	d458      	bmi.n	8005990 <__sflush_r+0xc0>
 80058de:	684b      	ldr	r3, [r1, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	dc05      	bgt.n	80058f0 <__sflush_r+0x20>
 80058e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	dc02      	bgt.n	80058f0 <__sflush_r+0x20>
 80058ea:	2000      	movs	r0, #0
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058f2:	2e00      	cmp	r6, #0
 80058f4:	d0f9      	beq.n	80058ea <__sflush_r+0x1a>
 80058f6:	2300      	movs	r3, #0
 80058f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058fc:	682f      	ldr	r7, [r5, #0]
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	d032      	beq.n	8005968 <__sflush_r+0x98>
 8005902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	075a      	lsls	r2, r3, #29
 8005908:	d505      	bpl.n	8005916 <__sflush_r+0x46>
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	1ac0      	subs	r0, r0, r3
 800590e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005910:	b10b      	cbz	r3, 8005916 <__sflush_r+0x46>
 8005912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005914:	1ac0      	subs	r0, r0, r3
 8005916:	2300      	movs	r3, #0
 8005918:	4602      	mov	r2, r0
 800591a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800591c:	6a21      	ldr	r1, [r4, #32]
 800591e:	4628      	mov	r0, r5
 8005920:	47b0      	blx	r6
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	d106      	bne.n	8005936 <__sflush_r+0x66>
 8005928:	6829      	ldr	r1, [r5, #0]
 800592a:	291d      	cmp	r1, #29
 800592c:	d82c      	bhi.n	8005988 <__sflush_r+0xb8>
 800592e:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <__sflush_r+0x108>)
 8005930:	40ca      	lsrs	r2, r1
 8005932:	07d6      	lsls	r6, r2, #31
 8005934:	d528      	bpl.n	8005988 <__sflush_r+0xb8>
 8005936:	2200      	movs	r2, #0
 8005938:	6062      	str	r2, [r4, #4]
 800593a:	04d9      	lsls	r1, r3, #19
 800593c:	6922      	ldr	r2, [r4, #16]
 800593e:	6022      	str	r2, [r4, #0]
 8005940:	d504      	bpl.n	800594c <__sflush_r+0x7c>
 8005942:	1c42      	adds	r2, r0, #1
 8005944:	d101      	bne.n	800594a <__sflush_r+0x7a>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	b903      	cbnz	r3, 800594c <__sflush_r+0x7c>
 800594a:	6560      	str	r0, [r4, #84]	; 0x54
 800594c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594e:	602f      	str	r7, [r5, #0]
 8005950:	2900      	cmp	r1, #0
 8005952:	d0ca      	beq.n	80058ea <__sflush_r+0x1a>
 8005954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005958:	4299      	cmp	r1, r3
 800595a:	d002      	beq.n	8005962 <__sflush_r+0x92>
 800595c:	4628      	mov	r0, r5
 800595e:	f7ff fb47 	bl	8004ff0 <_free_r>
 8005962:	2000      	movs	r0, #0
 8005964:	6360      	str	r0, [r4, #52]	; 0x34
 8005966:	e7c1      	b.n	80058ec <__sflush_r+0x1c>
 8005968:	6a21      	ldr	r1, [r4, #32]
 800596a:	2301      	movs	r3, #1
 800596c:	4628      	mov	r0, r5
 800596e:	47b0      	blx	r6
 8005970:	1c41      	adds	r1, r0, #1
 8005972:	d1c7      	bne.n	8005904 <__sflush_r+0x34>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0c4      	beq.n	8005904 <__sflush_r+0x34>
 800597a:	2b1d      	cmp	r3, #29
 800597c:	d001      	beq.n	8005982 <__sflush_r+0xb2>
 800597e:	2b16      	cmp	r3, #22
 8005980:	d101      	bne.n	8005986 <__sflush_r+0xb6>
 8005982:	602f      	str	r7, [r5, #0]
 8005984:	e7b1      	b.n	80058ea <__sflush_r+0x1a>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	e7ad      	b.n	80058ec <__sflush_r+0x1c>
 8005990:	690f      	ldr	r7, [r1, #16]
 8005992:	2f00      	cmp	r7, #0
 8005994:	d0a9      	beq.n	80058ea <__sflush_r+0x1a>
 8005996:	0793      	lsls	r3, r2, #30
 8005998:	680e      	ldr	r6, [r1, #0]
 800599a:	bf08      	it	eq
 800599c:	694b      	ldreq	r3, [r1, #20]
 800599e:	600f      	str	r7, [r1, #0]
 80059a0:	bf18      	it	ne
 80059a2:	2300      	movne	r3, #0
 80059a4:	eba6 0807 	sub.w	r8, r6, r7
 80059a8:	608b      	str	r3, [r1, #8]
 80059aa:	f1b8 0f00 	cmp.w	r8, #0
 80059ae:	dd9c      	ble.n	80058ea <__sflush_r+0x1a>
 80059b0:	6a21      	ldr	r1, [r4, #32]
 80059b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059b4:	4643      	mov	r3, r8
 80059b6:	463a      	mov	r2, r7
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b0      	blx	r6
 80059bc:	2800      	cmp	r0, #0
 80059be:	dc06      	bgt.n	80059ce <__sflush_r+0xfe>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e78e      	b.n	80058ec <__sflush_r+0x1c>
 80059ce:	4407      	add	r7, r0
 80059d0:	eba8 0800 	sub.w	r8, r8, r0
 80059d4:	e7e9      	b.n	80059aa <__sflush_r+0xda>
 80059d6:	bf00      	nop
 80059d8:	20400001 	.word	0x20400001

080059dc <_fflush_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	690b      	ldr	r3, [r1, #16]
 80059e0:	4605      	mov	r5, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b913      	cbnz	r3, 80059ec <_fflush_r+0x10>
 80059e6:	2500      	movs	r5, #0
 80059e8:	4628      	mov	r0, r5
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	b118      	cbz	r0, 80059f6 <_fflush_r+0x1a>
 80059ee:	6983      	ldr	r3, [r0, #24]
 80059f0:	b90b      	cbnz	r3, 80059f6 <_fflush_r+0x1a>
 80059f2:	f000 f887 	bl	8005b04 <__sinit>
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <_fflush_r+0x6c>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d11b      	bne.n	8005a34 <_fflush_r+0x58>
 80059fc:	686c      	ldr	r4, [r5, #4]
 80059fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ef      	beq.n	80059e6 <_fflush_r+0xa>
 8005a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a08:	07d0      	lsls	r0, r2, #31
 8005a0a:	d404      	bmi.n	8005a16 <_fflush_r+0x3a>
 8005a0c:	0599      	lsls	r1, r3, #22
 8005a0e:	d402      	bmi.n	8005a16 <_fflush_r+0x3a>
 8005a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a12:	f000 f915 	bl	8005c40 <__retarget_lock_acquire_recursive>
 8005a16:	4628      	mov	r0, r5
 8005a18:	4621      	mov	r1, r4
 8005a1a:	f7ff ff59 	bl	80058d0 <__sflush_r>
 8005a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a20:	07da      	lsls	r2, r3, #31
 8005a22:	4605      	mov	r5, r0
 8005a24:	d4e0      	bmi.n	80059e8 <_fflush_r+0xc>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	059b      	lsls	r3, r3, #22
 8005a2a:	d4dd      	bmi.n	80059e8 <_fflush_r+0xc>
 8005a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2e:	f000 f908 	bl	8005c42 <__retarget_lock_release_recursive>
 8005a32:	e7d9      	b.n	80059e8 <_fflush_r+0xc>
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <_fflush_r+0x70>)
 8005a36:	429c      	cmp	r4, r3
 8005a38:	d101      	bne.n	8005a3e <_fflush_r+0x62>
 8005a3a:	68ac      	ldr	r4, [r5, #8]
 8005a3c:	e7df      	b.n	80059fe <_fflush_r+0x22>
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <_fflush_r+0x74>)
 8005a40:	429c      	cmp	r4, r3
 8005a42:	bf08      	it	eq
 8005a44:	68ec      	ldreq	r4, [r5, #12]
 8005a46:	e7da      	b.n	80059fe <_fflush_r+0x22>
 8005a48:	08008fc8 	.word	0x08008fc8
 8005a4c:	08008fe8 	.word	0x08008fe8
 8005a50:	08008fa8 	.word	0x08008fa8

08005a54 <std>:
 8005a54:	2300      	movs	r3, #0
 8005a56:	b510      	push	{r4, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a62:	6083      	str	r3, [r0, #8]
 8005a64:	8181      	strh	r1, [r0, #12]
 8005a66:	6643      	str	r3, [r0, #100]	; 0x64
 8005a68:	81c2      	strh	r2, [r0, #14]
 8005a6a:	6183      	str	r3, [r0, #24]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2208      	movs	r2, #8
 8005a70:	305c      	adds	r0, #92	; 0x5c
 8005a72:	f7ff f9e3 	bl	8004e3c <memset>
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <std+0x38>)
 8005a78:	6263      	str	r3, [r4, #36]	; 0x24
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <std+0x3c>)
 8005a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <std+0x40>)
 8005a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <std+0x44>)
 8005a84:	6224      	str	r4, [r4, #32]
 8005a86:	6323      	str	r3, [r4, #48]	; 0x30
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08005dad 	.word	0x08005dad
 8005a90:	08005dcf 	.word	0x08005dcf
 8005a94:	08005e07 	.word	0x08005e07
 8005a98:	08005e2b 	.word	0x08005e2b

08005a9c <_cleanup_r>:
 8005a9c:	4901      	ldr	r1, [pc, #4]	; (8005aa4 <_cleanup_r+0x8>)
 8005a9e:	f000 b8af 	b.w	8005c00 <_fwalk_reent>
 8005aa2:	bf00      	nop
 8005aa4:	080059dd 	.word	0x080059dd

08005aa8 <__sfmoreglue>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	1e4a      	subs	r2, r1, #1
 8005aac:	2568      	movs	r5, #104	; 0x68
 8005aae:	4355      	muls	r5, r2
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ab6:	f7ff faeb 	bl	8005090 <_malloc_r>
 8005aba:	4604      	mov	r4, r0
 8005abc:	b140      	cbz	r0, 8005ad0 <__sfmoreglue+0x28>
 8005abe:	2100      	movs	r1, #0
 8005ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ac4:	300c      	adds	r0, #12
 8005ac6:	60a0      	str	r0, [r4, #8]
 8005ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005acc:	f7ff f9b6 	bl	8004e3c <memset>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}

08005ad4 <__sfp_lock_acquire>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__sfp_lock_acquire+0x8>)
 8005ad6:	f000 b8b3 	b.w	8005c40 <__retarget_lock_acquire_recursive>
 8005ada:	bf00      	nop
 8005adc:	200011f0 	.word	0x200011f0

08005ae0 <__sfp_lock_release>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__sfp_lock_release+0x8>)
 8005ae2:	f000 b8ae 	b.w	8005c42 <__retarget_lock_release_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	200011f0 	.word	0x200011f0

08005aec <__sinit_lock_acquire>:
 8005aec:	4801      	ldr	r0, [pc, #4]	; (8005af4 <__sinit_lock_acquire+0x8>)
 8005aee:	f000 b8a7 	b.w	8005c40 <__retarget_lock_acquire_recursive>
 8005af2:	bf00      	nop
 8005af4:	200011eb 	.word	0x200011eb

08005af8 <__sinit_lock_release>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__sinit_lock_release+0x8>)
 8005afa:	f000 b8a2 	b.w	8005c42 <__retarget_lock_release_recursive>
 8005afe:	bf00      	nop
 8005b00:	200011eb 	.word	0x200011eb

08005b04 <__sinit>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	4604      	mov	r4, r0
 8005b08:	f7ff fff0 	bl	8005aec <__sinit_lock_acquire>
 8005b0c:	69a3      	ldr	r3, [r4, #24]
 8005b0e:	b11b      	cbz	r3, 8005b18 <__sinit+0x14>
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b14:	f7ff bff0 	b.w	8005af8 <__sinit_lock_release>
 8005b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <__sinit+0x68>)
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <__sinit+0x6c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	bf04      	itt	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	61a3      	streq	r3, [r4, #24]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 f820 	bl	8005b74 <__sfp>
 8005b34:	6060      	str	r0, [r4, #4]
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 f81c 	bl	8005b74 <__sfp>
 8005b3c:	60a0      	str	r0, [r4, #8]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f818 	bl	8005b74 <__sfp>
 8005b44:	2200      	movs	r2, #0
 8005b46:	60e0      	str	r0, [r4, #12]
 8005b48:	2104      	movs	r1, #4
 8005b4a:	6860      	ldr	r0, [r4, #4]
 8005b4c:	f7ff ff82 	bl	8005a54 <std>
 8005b50:	68a0      	ldr	r0, [r4, #8]
 8005b52:	2201      	movs	r2, #1
 8005b54:	2109      	movs	r1, #9
 8005b56:	f7ff ff7d 	bl	8005a54 <std>
 8005b5a:	68e0      	ldr	r0, [r4, #12]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	2112      	movs	r1, #18
 8005b60:	f7ff ff78 	bl	8005a54 <std>
 8005b64:	2301      	movs	r3, #1
 8005b66:	61a3      	str	r3, [r4, #24]
 8005b68:	e7d2      	b.n	8005b10 <__sinit+0xc>
 8005b6a:	bf00      	nop
 8005b6c:	08008ebc 	.word	0x08008ebc
 8005b70:	08005a9d 	.word	0x08005a9d

08005b74 <__sfp>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	4607      	mov	r7, r0
 8005b78:	f7ff ffac 	bl	8005ad4 <__sfp_lock_acquire>
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <__sfp+0x84>)
 8005b7e:	681e      	ldr	r6, [r3, #0]
 8005b80:	69b3      	ldr	r3, [r6, #24]
 8005b82:	b913      	cbnz	r3, 8005b8a <__sfp+0x16>
 8005b84:	4630      	mov	r0, r6
 8005b86:	f7ff ffbd 	bl	8005b04 <__sinit>
 8005b8a:	3648      	adds	r6, #72	; 0x48
 8005b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	d503      	bpl.n	8005b9c <__sfp+0x28>
 8005b94:	6833      	ldr	r3, [r6, #0]
 8005b96:	b30b      	cbz	r3, 8005bdc <__sfp+0x68>
 8005b98:	6836      	ldr	r6, [r6, #0]
 8005b9a:	e7f7      	b.n	8005b8c <__sfp+0x18>
 8005b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ba0:	b9d5      	cbnz	r5, 8005bd8 <__sfp+0x64>
 8005ba2:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <__sfp+0x88>)
 8005ba4:	60e3      	str	r3, [r4, #12]
 8005ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005baa:	6665      	str	r5, [r4, #100]	; 0x64
 8005bac:	f000 f847 	bl	8005c3e <__retarget_lock_init_recursive>
 8005bb0:	f7ff ff96 	bl	8005ae0 <__sfp_lock_release>
 8005bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bbc:	6025      	str	r5, [r4, #0]
 8005bbe:	61a5      	str	r5, [r4, #24]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bc8:	f7ff f938 	bl	8004e3c <memset>
 8005bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd8:	3468      	adds	r4, #104	; 0x68
 8005bda:	e7d9      	b.n	8005b90 <__sfp+0x1c>
 8005bdc:	2104      	movs	r1, #4
 8005bde:	4638      	mov	r0, r7
 8005be0:	f7ff ff62 	bl	8005aa8 <__sfmoreglue>
 8005be4:	4604      	mov	r4, r0
 8005be6:	6030      	str	r0, [r6, #0]
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1d5      	bne.n	8005b98 <__sfp+0x24>
 8005bec:	f7ff ff78 	bl	8005ae0 <__sfp_lock_release>
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	e7ee      	b.n	8005bd4 <__sfp+0x60>
 8005bf6:	bf00      	nop
 8005bf8:	08008ebc 	.word	0x08008ebc
 8005bfc:	ffff0001 	.word	0xffff0001

08005c00 <_fwalk_reent>:
 8005c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	4606      	mov	r6, r0
 8005c06:	4688      	mov	r8, r1
 8005c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c0c:	2700      	movs	r7, #0
 8005c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c12:	f1b9 0901 	subs.w	r9, r9, #1
 8005c16:	d505      	bpl.n	8005c24 <_fwalk_reent+0x24>
 8005c18:	6824      	ldr	r4, [r4, #0]
 8005c1a:	2c00      	cmp	r4, #0
 8005c1c:	d1f7      	bne.n	8005c0e <_fwalk_reent+0xe>
 8005c1e:	4638      	mov	r0, r7
 8005c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c24:	89ab      	ldrh	r3, [r5, #12]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d907      	bls.n	8005c3a <_fwalk_reent+0x3a>
 8005c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	d003      	beq.n	8005c3a <_fwalk_reent+0x3a>
 8005c32:	4629      	mov	r1, r5
 8005c34:	4630      	mov	r0, r6
 8005c36:	47c0      	blx	r8
 8005c38:	4307      	orrs	r7, r0
 8005c3a:	3568      	adds	r5, #104	; 0x68
 8005c3c:	e7e9      	b.n	8005c12 <_fwalk_reent+0x12>

08005c3e <__retarget_lock_init_recursive>:
 8005c3e:	4770      	bx	lr

08005c40 <__retarget_lock_acquire_recursive>:
 8005c40:	4770      	bx	lr

08005c42 <__retarget_lock_release_recursive>:
 8005c42:	4770      	bx	lr

08005c44 <__swhatbuf_r>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	460e      	mov	r6, r1
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	b096      	sub	sp, #88	; 0x58
 8005c50:	4614      	mov	r4, r2
 8005c52:	461d      	mov	r5, r3
 8005c54:	da07      	bge.n	8005c66 <__swhatbuf_r+0x22>
 8005c56:	2300      	movs	r3, #0
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	89b3      	ldrh	r3, [r6, #12]
 8005c5c:	061a      	lsls	r2, r3, #24
 8005c5e:	d410      	bmi.n	8005c82 <__swhatbuf_r+0x3e>
 8005c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c64:	e00e      	b.n	8005c84 <__swhatbuf_r+0x40>
 8005c66:	466a      	mov	r2, sp
 8005c68:	f000 f906 	bl	8005e78 <_fstat_r>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	dbf2      	blt.n	8005c56 <__swhatbuf_r+0x12>
 8005c70:	9a01      	ldr	r2, [sp, #4]
 8005c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c7a:	425a      	negs	r2, r3
 8005c7c:	415a      	adcs	r2, r3
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	e7ee      	b.n	8005c60 <__swhatbuf_r+0x1c>
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	2000      	movs	r0, #0
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	b016      	add	sp, #88	; 0x58
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}

08005c8c <__smakebuf_r>:
 8005c8c:	898b      	ldrh	r3, [r1, #12]
 8005c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c90:	079d      	lsls	r5, r3, #30
 8005c92:	4606      	mov	r6, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	d507      	bpl.n	8005ca8 <__smakebuf_r+0x1c>
 8005c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	6163      	str	r3, [r4, #20]
 8005ca4:	b002      	add	sp, #8
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	ab01      	add	r3, sp, #4
 8005caa:	466a      	mov	r2, sp
 8005cac:	f7ff ffca 	bl	8005c44 <__swhatbuf_r>
 8005cb0:	9900      	ldr	r1, [sp, #0]
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff f9eb 	bl	8005090 <_malloc_r>
 8005cba:	b948      	cbnz	r0, 8005cd0 <__smakebuf_r+0x44>
 8005cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc0:	059a      	lsls	r2, r3, #22
 8005cc2:	d4ef      	bmi.n	8005ca4 <__smakebuf_r+0x18>
 8005cc4:	f023 0303 	bic.w	r3, r3, #3
 8005cc8:	f043 0302 	orr.w	r3, r3, #2
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	e7e3      	b.n	8005c98 <__smakebuf_r+0xc>
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <__smakebuf_r+0x7c>)
 8005cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	6020      	str	r0, [r4, #0]
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	6163      	str	r3, [r4, #20]
 8005ce2:	9b01      	ldr	r3, [sp, #4]
 8005ce4:	6120      	str	r0, [r4, #16]
 8005ce6:	b15b      	cbz	r3, 8005d00 <__smakebuf_r+0x74>
 8005ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f8d5 	bl	8005e9c <_isatty_r>
 8005cf2:	b128      	cbz	r0, 8005d00 <__smakebuf_r+0x74>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	89a0      	ldrh	r0, [r4, #12]
 8005d02:	4305      	orrs	r5, r0
 8005d04:	81a5      	strh	r5, [r4, #12]
 8005d06:	e7cd      	b.n	8005ca4 <__smakebuf_r+0x18>
 8005d08:	08005a9d 	.word	0x08005a9d

08005d0c <__malloc_lock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__malloc_lock+0x8>)
 8005d0e:	f7ff bf97 	b.w	8005c40 <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	200011ec 	.word	0x200011ec

08005d18 <__malloc_unlock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_unlock+0x8>)
 8005d1a:	f7ff bf92 	b.w	8005c42 <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	200011ec 	.word	0x200011ec

08005d24 <_raise_r>:
 8005d24:	291f      	cmp	r1, #31
 8005d26:	b538      	push	{r3, r4, r5, lr}
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	d904      	bls.n	8005d38 <_raise_r+0x14>
 8005d2e:	2316      	movs	r3, #22
 8005d30:	6003      	str	r3, [r0, #0]
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d3a:	b112      	cbz	r2, 8005d42 <_raise_r+0x1e>
 8005d3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d40:	b94b      	cbnz	r3, 8005d56 <_raise_r+0x32>
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 f830 	bl	8005da8 <_getpid_r>
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d52:	f000 b817 	b.w	8005d84 <_kill_r>
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d00a      	beq.n	8005d70 <_raise_r+0x4c>
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	d103      	bne.n	8005d66 <_raise_r+0x42>
 8005d5e:	2316      	movs	r3, #22
 8005d60:	6003      	str	r3, [r0, #0]
 8005d62:	2001      	movs	r0, #1
 8005d64:	e7e7      	b.n	8005d36 <_raise_r+0x12>
 8005d66:	2400      	movs	r4, #0
 8005d68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	4798      	blx	r3
 8005d70:	2000      	movs	r0, #0
 8005d72:	e7e0      	b.n	8005d36 <_raise_r+0x12>

08005d74 <raise>:
 8005d74:	4b02      	ldr	r3, [pc, #8]	; (8005d80 <raise+0xc>)
 8005d76:	4601      	mov	r1, r0
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f7ff bfd3 	b.w	8005d24 <_raise_r>
 8005d7e:	bf00      	nop
 8005d80:	20000024 	.word	0x20000024

08005d84 <_kill_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4d07      	ldr	r5, [pc, #28]	; (8005da4 <_kill_r+0x20>)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	f7fc fbe1 	bl	8002558 <_kill>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d102      	bne.n	8005da0 <_kill_r+0x1c>
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	b103      	cbz	r3, 8005da0 <_kill_r+0x1c>
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
 8005da2:	bf00      	nop
 8005da4:	200011e4 	.word	0x200011e4

08005da8 <_getpid_r>:
 8005da8:	f7fc bbce 	b.w	8002548 <_getpid>

08005dac <__sread>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	460c      	mov	r4, r1
 8005db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db4:	f000 f894 	bl	8005ee0 <_read_r>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	bfab      	itete	ge
 8005dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc0:	181b      	addge	r3, r3, r0
 8005dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dc6:	bfac      	ite	ge
 8005dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dca:	81a3      	strhlt	r3, [r4, #12]
 8005dcc:	bd10      	pop	{r4, pc}

08005dce <__swrite>:
 8005dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	898b      	ldrh	r3, [r1, #12]
 8005dd6:	05db      	lsls	r3, r3, #23
 8005dd8:	4605      	mov	r5, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	4616      	mov	r6, r2
 8005dde:	d505      	bpl.n	8005dec <__swrite+0x1e>
 8005de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de4:	2302      	movs	r3, #2
 8005de6:	2200      	movs	r2, #0
 8005de8:	f000 f868 	bl	8005ebc <_lseek_r>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	4632      	mov	r2, r6
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e02:	f000 b817 	b.w	8005e34 <_write_r>

08005e06 <__sseek>:
 8005e06:	b510      	push	{r4, lr}
 8005e08:	460c      	mov	r4, r1
 8005e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0e:	f000 f855 	bl	8005ebc <_lseek_r>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	bf15      	itete	ne
 8005e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e22:	81a3      	strheq	r3, [r4, #12]
 8005e24:	bf18      	it	ne
 8005e26:	81a3      	strhne	r3, [r4, #12]
 8005e28:	bd10      	pop	{r4, pc}

08005e2a <__sclose>:
 8005e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2e:	f000 b813 	b.w	8005e58 <_close_r>
	...

08005e34 <_write_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d07      	ldr	r5, [pc, #28]	; (8005e54 <_write_r+0x20>)
 8005e38:	4604      	mov	r4, r0
 8005e3a:	4608      	mov	r0, r1
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	602a      	str	r2, [r5, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f7fc fbbf 	bl	80025c6 <_write>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_write_r+0x1e>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_write_r+0x1e>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	200011e4 	.word	0x200011e4

08005e58 <_close_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d06      	ldr	r5, [pc, #24]	; (8005e74 <_close_r+0x1c>)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f7fc fbcb 	bl	80025fe <_close>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_close_r+0x1a>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_close_r+0x1a>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	200011e4 	.word	0x200011e4

08005e78 <_fstat_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	; (8005e98 <_fstat_r+0x20>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	f7fc fbc6 	bl	8002616 <_fstat>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d102      	bne.n	8005e94 <_fstat_r+0x1c>
 8005e8e:	682b      	ldr	r3, [r5, #0]
 8005e90:	b103      	cbz	r3, 8005e94 <_fstat_r+0x1c>
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	bd38      	pop	{r3, r4, r5, pc}
 8005e96:	bf00      	nop
 8005e98:	200011e4 	.word	0x200011e4

08005e9c <_isatty_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d06      	ldr	r5, [pc, #24]	; (8005eb8 <_isatty_r+0x1c>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	f7fc fbc5 	bl	8002636 <_isatty>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_isatty_r+0x1a>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_isatty_r+0x1a>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	200011e4 	.word	0x200011e4

08005ebc <_lseek_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d07      	ldr	r5, [pc, #28]	; (8005edc <_lseek_r+0x20>)
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4608      	mov	r0, r1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	602a      	str	r2, [r5, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f7fc fbbe 	bl	800264c <_lseek>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_lseek_r+0x1e>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_lseek_r+0x1e>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	200011e4 	.word	0x200011e4

08005ee0 <_read_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	; (8005f00 <_read_r+0x20>)
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	4611      	mov	r1, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	602a      	str	r2, [r5, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f7fc fb4c 	bl	800258c <_read>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_read_r+0x1e>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_read_r+0x1e>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	200011e4 	.word	0x200011e4

08005f04 <_gettimeofday>:
 8005f04:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <_gettimeofday+0xc>)
 8005f06:	2258      	movs	r2, #88	; 0x58
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0e:	4770      	bx	lr
 8005f10:	200011e4 	.word	0x200011e4

08005f14 <_init>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	bf00      	nop
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr

08005f20 <_fini>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr
