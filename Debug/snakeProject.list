
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004224  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f560  0800f560  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800f560  0800f560  0001f560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f568  0800f568  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f568  0800f568  0001f568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f56c  0800f56c  0001f56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800f570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00002954  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a64  20002a64  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187d1  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004415  00000000  00000000  00038911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  0003cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  0003e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026da8  00000000  00000000  0003f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219c5  00000000  00000000  000663d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d338c  00000000  00000000  00087d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b121  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006158  00000000  00000000  0015b174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b324 	.word	0x0800b324

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800b324 	.word	0x0800b324

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b095      	sub	sp, #84	; 0x54
 8000588:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 800058a:	2000      	movs	r0, #0
 800058c:	f001 fa66 	bl	8001a5c <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8000590:	4bb0      	ldr	r3, [pc, #704]	; (8000854 <setupAdvance+0x2d0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b298      	uxth	r0, r3
 8000596:	4bb0      	ldr	r3, [pc, #704]	; (8000858 <setupAdvance+0x2d4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b299      	uxth	r1, r3
 800059c:	4baf      	ldr	r3, [pc, #700]	; (800085c <setupAdvance+0x2d8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4baf      	ldr	r3, [pc, #700]	; (8000860 <setupAdvance+0x2dc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4cae      	ldr	r4, [pc, #696]	; (8000864 <setupAdvance+0x2e0>)
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	f001 fc60 	bl	8001e70 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2318      	movs	r3, #24
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f248 4330 	movw	r3, #33840	; 0x8430
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	4aa9      	ldr	r2, [pc, #676]	; (8000868 <setupAdvance+0x2e4>)
 80005c4:	2137      	movs	r1, #55	; 0x37
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f001 fe2c 	bl	8002224 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80005cc:	4aa7      	ldr	r2, [pc, #668]	; (800086c <setupAdvance+0x2e8>)
 80005ce:	463b      	mov	r3, r7
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	1dbb      	adds	r3, r7, #6
 80005dc:	222c      	movs	r2, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f009 fc13 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 80005e6:	4ba2      	ldr	r3, [pc, #648]	; (8000870 <setupAdvance+0x2ec>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f8ec 	bl	80027c8 <convert2str>
 80005f0:	4603      	mov	r3, r0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80005f4:	463b      	mov	r3, r7
 80005f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fcaf 	bl	8009f5c <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80005fe:	463a      	mov	r2, r7
 8000600:	2300      	movs	r3, #0
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2318      	movs	r3, #24
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f248 4330 	movw	r3, #33840	; 0x8430
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	2000      	movs	r0, #0
 8000616:	f001 fe69 	bl	80022ec <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800061a:	2300      	movs	r3, #0
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2318      	movs	r3, #24
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	f248 4330 	movw	r3, #33840	; 0x8430
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062c:	4a91      	ldr	r2, [pc, #580]	; (8000874 <setupAdvance+0x2f0>)
 800062e:	2196      	movs	r1, #150	; 0x96
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fe5b 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000636:	2300      	movs	r3, #0
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2318      	movs	r3, #24
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	4a8b      	ldr	r2, [pc, #556]	; (8000878 <setupAdvance+0x2f4>)
 800064a:	21d7      	movs	r1, #215	; 0xd7
 800064c:	2014      	movs	r0, #20
 800064e:	f001 fde9 	bl	8002224 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	23f0      	movs	r3, #240	; 0xf0
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	21d2      	movs	r1, #210	; 0xd2
 800065e:	2096      	movs	r0, #150	; 0x96
 8000660:	f001 faff 	bl	8001c62 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8000664:	4b85      	ldr	r3, [pc, #532]	; (800087c <setupAdvance+0x2f8>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f8ad 	bl	80027c8 <convert2str>
 800066e:	4603      	mov	r3, r0
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8000672:	4b82      	ldr	r3, [pc, #520]	; (800087c <setupAdvance+0x2f8>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2b77      	cmp	r3, #119	; 0x77
 8000678:	d80e      	bhi.n	8000698 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 800067a:	2301      	movs	r3, #1
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2318      	movs	r3, #24
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f248 4330 	movw	r3, #33840	; 0x8430
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800068e:	21d4      	movs	r1, #212	; 0xd4
 8000690:	20a5      	movs	r0, #165	; 0xa5
 8000692:	f001 fdc7 	bl	8002224 <lcd_ShowStr>
 8000696:	e00d      	b.n	80006b4 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8000698:	2301      	movs	r3, #1
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	2318      	movs	r3, #24
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006ac:	21d4      	movs	r1, #212	; 0xd4
 80006ae:	209d      	movs	r0, #157	; 0x9d
 80006b0:	f001 fdb8 	bl	8002224 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80006b4:	4b71      	ldr	r3, [pc, #452]	; (800087c <setupAdvance+0x2f8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b77      	cmp	r3, #119	; 0x77
 80006ba:	d81a      	bhi.n	80006f2 <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80006bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	23dc      	movs	r3, #220	; 0xdc
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	21dc      	movs	r1, #220	; 0xdc
 80006c8:	20cd      	movs	r0, #205	; 0xcd
 80006ca:	f001 fa46 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	23d2      	movs	r3, #210	; 0xd2
 80006d6:	22d7      	movs	r2, #215	; 0xd7
 80006d8:	21dc      	movs	r1, #220	; 0xdc
 80006da:	20cd      	movs	r0, #205	; 0xcd
 80006dc:	f001 fa3d 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	23d2      	movs	r3, #210	; 0xd2
 80006e8:	22d7      	movs	r2, #215	; 0xd7
 80006ea:	21dc      	movs	r1, #220	; 0xdc
 80006ec:	20e1      	movs	r0, #225	; 0xe1
 80006ee:	f001 fa34 	bl	8001b5a <lcd_DrawLine>
	}
	if(TIMING > 30)
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <setupAdvance+0x2f8>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b1e      	cmp	r3, #30
 80006f8:	d91a      	bls.n	8000730 <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	23e6      	movs	r3, #230	; 0xe6
 8000702:	22e1      	movs	r2, #225	; 0xe1
 8000704:	21e6      	movs	r1, #230	; 0xe6
 8000706:	20cd      	movs	r0, #205	; 0xcd
 8000708:	f001 fa27 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 800070c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	23f0      	movs	r3, #240	; 0xf0
 8000714:	22d7      	movs	r2, #215	; 0xd7
 8000716:	21e6      	movs	r1, #230	; 0xe6
 8000718:	20cd      	movs	r0, #205	; 0xcd
 800071a:	f001 fa1e 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	23f0      	movs	r3, #240	; 0xf0
 8000726:	22d7      	movs	r2, #215	; 0xd7
 8000728:	21e6      	movs	r1, #230	; 0xe6
 800072a:	20e1      	movs	r0, #225	; 0xe1
 800072c:	f001 fa15 	bl	8001b5a <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 8000730:	2300      	movs	r3, #0
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2318      	movs	r3, #24
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	f248 4330 	movw	r3, #33840	; 0x8430
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <setupAdvance+0x2fc>)
 8000744:	f240 1109 	movw	r1, #265	; 0x109
 8000748:	2014      	movs	r0, #20
 800074a:	f001 fd6b 	bl	8002224 <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800074e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000758:	22c8      	movs	r2, #200	; 0xc8
 800075a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800075e:	2096      	movs	r0, #150	; 0x96
 8000760:	f001 fa7f 	bl	8001c62 <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <setupAdvance+0x300>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f82d 	bl	80027c8 <convert2str>
 800076e:	4603      	mov	r3, r0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 8000772:	4b44      	ldr	r3, [pc, #272]	; (8000884 <setupAdvance+0x300>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b09      	cmp	r3, #9
 8000778:	d80f      	bhi.n	800079a <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 800077a:	2301      	movs	r3, #1
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2318      	movs	r3, #24
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f248 4330 	movw	r3, #33840	; 0x8430
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800078e:	f240 1109 	movw	r1, #265	; 0x109
 8000792:	20aa      	movs	r0, #170	; 0xaa
 8000794:	f001 fd46 	bl	8002224 <lcd_ShowStr>
 8000798:	e00e      	b.n	80007b8 <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 800079a:	2301      	movs	r3, #1
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	2318      	movs	r3, #24
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ae:	f240 1109 	movw	r1, #265	; 0x109
 80007b2:	20a5      	movs	r0, #165	; 0xa5
 80007b4:	f001 fd36 	bl	8002224 <lcd_ShowStr>
	}

	if(WALL < 30)
 80007b8:	4b32      	ldr	r3, [pc, #200]	; (8000884 <setupAdvance+0x300>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b1d      	cmp	r3, #29
 80007be:	d820      	bhi.n	8000802 <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80007c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007ca:	22e1      	movs	r2, #225	; 0xe1
 80007cc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007d0:	20cd      	movs	r0, #205	; 0xcd
 80007d2:	f001 f9c2 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007e0:	22d7      	movs	r2, #215	; 0xd7
 80007e2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007e6:	20cd      	movs	r0, #205	; 0xcd
 80007e8:	f001 f9b7 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 80007ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007f6:	22d7      	movs	r2, #215	; 0xd7
 80007f8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007fc:	20e1      	movs	r0, #225	; 0xe1
 80007fe:	f001 f9ac 	bl	8001b5a <lcd_DrawLine>
	}
	if(WALL > 0)
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <setupAdvance+0x300>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d020      	beq.n	800084c <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	f44f 718c 	mov.w	r1, #280	; 0x118
 800081a:	20cd      	movs	r0, #205	; 0xcd
 800081c:	f001 f99d 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	f44f 7391 	mov.w	r3, #290	; 0x122
 800082a:	22d7      	movs	r2, #215	; 0xd7
 800082c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000830:	20cd      	movs	r0, #205	; 0xcd
 8000832:	f001 f992 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000840:	22d7      	movs	r2, #215	; 0xd7
 8000842:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000846:	20e1      	movs	r0, #225	; 0xe1
 8000848:	f001 f987 	bl	8001b5a <lcd_DrawLine>
	}
}
 800084c:	bf00      	nop
 800084e:	3744      	adds	r7, #68	; 0x44
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000074 	.word	0x20000074
 8000858:	20000078 	.word	0x20000078
 800085c:	2000007c 	.word	0x2000007c
 8000860:	20000080 	.word	0x20000080
 8000864:	0800e7d0 	.word	0x0800e7d0
 8000868:	0800b33c 	.word	0x0800b33c
 800086c:	0800b36c 	.word	0x0800b36c
 8000870:	200001a4 	.word	0x200001a4
 8000874:	0800b34c 	.word	0x0800b34c
 8000878:	0800b35c 	.word	0x0800b35c
 800087c:	20000000 	.word	0x20000000
 8000880:	0800b364 	.word	0x0800b364
 8000884:	200001a8 	.word	0x200001a8

08000888 <initAdvanceMode>:

void initAdvanceMode()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <initAdvanceMode+0x94>)
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10e      	bne.n	80008b2 <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <initAdvanceMode+0x98>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	331e      	adds	r3, #30
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <initAdvanceMode+0x98>)
 800089e:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <initAdvanceMode+0x98>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	2b78      	cmp	r3, #120	; 0x78
 80008a6:	d902      	bls.n	80008ae <initAdvanceMode+0x26>
		{
			TIMING = 120;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <initAdvanceMode+0x98>)
 80008aa:	2278      	movs	r2, #120	; 0x78
 80008ac:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008ae:	f7ff fe69 	bl	8000584 <setupAdvance>
	}
	if(button_count[7] == 1)
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <initAdvanceMode+0x94>)
 80008b4:	89db      	ldrh	r3, [r3, #14]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10e      	bne.n	80008d8 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <initAdvanceMode+0x98>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	3b1e      	subs	r3, #30
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <initAdvanceMode+0x98>)
 80008c4:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <initAdvanceMode+0x98>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b1d      	cmp	r3, #29
 80008cc:	d802      	bhi.n	80008d4 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <initAdvanceMode+0x98>)
 80008d0:	221e      	movs	r2, #30
 80008d2:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008d4:	f7ff fe56 	bl	8000584 <setupAdvance>
	}
	if(button_count[11] == 1)
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <initAdvanceMode+0x94>)
 80008da:	8adb      	ldrh	r3, [r3, #22]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10e      	bne.n	80008fe <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <initAdvanceMode+0x9c>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	3305      	adds	r3, #5
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <initAdvanceMode+0x9c>)
 80008ea:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <initAdvanceMode+0x9c>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	2b1e      	cmp	r3, #30
 80008f2:	d902      	bls.n	80008fa <initAdvanceMode+0x72>
		{
			WALL = 30;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <initAdvanceMode+0x9c>)
 80008f6:	221e      	movs	r2, #30
 80008f8:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008fa:	f7ff fe43 	bl	8000584 <setupAdvance>
	}
	if(button_count[15] == 1)
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <initAdvanceMode+0x94>)
 8000900:	8bdb      	ldrh	r3, [r3, #30]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d107      	bne.n	8000916 <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <initAdvanceMode+0x9c>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	3b05      	subs	r3, #5
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <initAdvanceMode+0x9c>)
 8000910:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000912:	f7ff fe37 	bl	8000584 <setupAdvance>
	}
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000012c 	.word	0x2000012c
 8000920:	20000000 	.word	0x20000000
 8000924:	200001a8 	.word	0x200001a8

08000928 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <button_init+0x14>)
 8000932:	f006 f9cd 	bl	8006cd0 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020c00 	.word	0x40020c00

08000940 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	482f      	ldr	r0, [pc, #188]	; (8000a08 <button_Scan+0xc8>)
 800094c:	f006 f9c0 	bl	8006cd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	2108      	movs	r1, #8
 8000954:	482c      	ldr	r0, [pc, #176]	; (8000a08 <button_Scan+0xc8>)
 8000956:	f006 f9bb 	bl	8006cd0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800095a:	230a      	movs	r3, #10
 800095c:	2202      	movs	r2, #2
 800095e:	492b      	ldr	r1, [pc, #172]	; (8000a0c <button_Scan+0xcc>)
 8000960:	482b      	ldr	r0, [pc, #172]	; (8000a10 <button_Scan+0xd0>)
 8000962:	f007 f82c 	bl	80079be <HAL_SPI_Receive>
	  int button_index = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	e03f      	b.n	80009f6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db06      	blt.n	800098a <button_Scan+0x4a>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b03      	cmp	r3, #3
 8000980:	dc03      	bgt.n	800098a <button_Scan+0x4a>
			  button_index = i + 4;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3304      	adds	r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e018      	b.n	80009bc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b03      	cmp	r3, #3
 800098e:	dd07      	ble.n	80009a0 <button_Scan+0x60>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b07      	cmp	r3, #7
 8000994:	dc04      	bgt.n	80009a0 <button_Scan+0x60>
			  button_index = 7 - i;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f1c3 0307 	rsb	r3, r3, #7
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e00d      	b.n	80009bc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	dd06      	ble.n	80009b4 <button_Scan+0x74>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0b      	cmp	r3, #11
 80009aa:	dc03      	bgt.n	80009b4 <button_Scan+0x74>
			  button_index = i + 4;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3304      	adds	r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e003      	b.n	80009bc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f1c3 0317 	rsb	r3, r3, #23
 80009ba:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <button_Scan+0xcc>)
 80009be:	881a      	ldrh	r2, [r3, #0]
 80009c0:	897b      	ldrh	r3, [r7, #10]
 80009c2:	4013      	ands	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <button_Scan+0x96>
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <button_Scan+0xd4>)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d4:	e009      	b.n	80009ea <button_Scan+0xaa>
		  else button_count[button_index]++;
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <button_Scan+0xd4>)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	3301      	adds	r3, #1
 80009e0:	b299      	uxth	r1, r3
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <button_Scan+0xd4>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	ddbc      	ble.n	8000976 <button_Scan+0x36>
	  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	2000014c 	.word	0x2000014c
 8000a10:	20002964 	.word	0x20002964
 8000a14:	2000012c 	.word	0x2000012c

08000a18 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	3305      	adds	r3, #5
 8000a26:	b299      	uxth	r1, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <showNotifyExit+0xc0>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f001 fc56 	bl	80022ec <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3314      	adds	r3, #20
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	2310      	movs	r3, #16
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <showNotifyExit+0xc4>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 fc45 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <showNotifyExit+0xc8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3308      	adds	r3, #8
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <showNotifyExit+0xbc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	0fda      	lsrs	r2, r3, #31
 8000a78:	4413      	add	r3, r2
 8000a7a:	105b      	asrs	r3, r3, #1
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3b14      	subs	r3, #20
 8000a80:	b299      	uxth	r1, r3
 8000a82:	2301      	movs	r3, #1
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2310      	movs	r3, #16
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	f248 4330 	movw	r3, #33840	; 0x8430
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <showNotifyExit+0xcc>)
 8000a94:	f001 fbc6 	bl	8002224 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <showNotifyExit+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	b298      	uxth	r0, r3
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <showNotifyExit+0xbc>)
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <showNotifyExit+0xbc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	0fda      	lsrs	r2, r3, #31
 8000aae:	4413      	add	r3, r2
 8000ab0:	105b      	asrs	r3, r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3319      	adds	r3, #25
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2310      	movs	r3, #16
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <showNotifyExit+0xd0>)
 8000aca:	f001 fbab 	bl	8002224 <lcd_ShowStr>
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000004c 	.word	0x2000004c
 8000ad8:	0800b3a0 	.word	0x0800b3a0
 8000adc:	0800b3ac 	.word	0x0800b3ac
 8000ae0:	2000003c 	.word	0x2000003c
 8000ae4:	0800b3b8 	.word	0x0800b3b8
 8000ae8:	0800b3bc 	.word	0x0800b3bc

08000aec <drawArrowExit>:

void drawArrowExit()
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8000af2:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <drawArrowExit+0x168>)
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <drawArrowExit+0x168>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	0fda      	lsrs	r2, r3, #31
 8000afe:	4413      	add	r3, r2
 8000b00:	105b      	asrs	r3, r3, #1
 8000b02:	3b08      	subs	r3, #8
 8000b04:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <drawArrowExit+0x168>)
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4b52      	ldr	r3, [pc, #328]	; (8000c54 <drawArrowExit+0x168>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	0fda      	lsrs	r2, r3, #31
 8000b12:	4413      	add	r3, r2
 8000b14:	105b      	asrs	r3, r3, #1
 8000b16:	331c      	adds	r3, #28
 8000b18:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 8000b1a:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <drawArrowExit+0x16c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d003      	beq.n	8000b2a <drawArrowExit+0x3e>
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	f000 80a2 	beq.w	8000c6c <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8000b28:	e135      	b.n	8000d96 <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	; (8000c5c <drawArrowExit+0x170>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <drawArrowExit+0x174>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	b298      	uxth	r0, r3
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <drawArrowExit+0x168>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3323      	adds	r3, #35	; 0x23
 8000b42:	b299      	uxth	r1, r3
 8000b44:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <drawArrowExit+0x170>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <drawArrowExit+0x174>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <drawArrowExit+0x168>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	3b05      	subs	r3, #5
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f248 4430 	movw	r4, #33840	; 0x8430
 8000b62:	9400      	str	r4, [sp, #0]
 8000b64:	f000 ffac 	bl	8001ac0 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <drawArrowExit+0x170>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3308      	adds	r3, #8
 8000b70:	b298      	uxth	r0, r3
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <drawArrowExit+0x168>)
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <drawArrowExit+0x168>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	0fda      	lsrs	r2, r3, #31
 8000b7e:	4413      	add	r3, r2
 8000b80:	105b      	asrs	r3, r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3b0f      	subs	r3, #15
 8000b86:	b299      	uxth	r1, r3
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	f248 4330 	movw	r3, #33840	; 0x8430
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <drawArrowExit+0x178>)
 8000b9c:	f001 fb42 	bl	8002224 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <drawArrowExit+0x170>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	b298      	uxth	r0, r3
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <drawArrowExit+0x168>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <drawArrowExit+0x168>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	0fda      	lsrs	r2, r3, #31
 8000bb6:	4413      	add	r3, r2
 8000bb8:	105b      	asrs	r3, r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	b299      	uxth	r1, r3
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	f248 4330 	movw	r3, #33840	; 0x8430
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <drawArrowExit+0x17c>)
 8000bd2:	f001 fb27 	bl	8002224 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <drawArrowExit+0x170>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3b0f      	subs	r3, #15
 8000bde:	b298      	uxth	r0, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b299      	uxth	r1, r3
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <drawArrowExit+0x170>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b0a      	subs	r3, #10
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	3b05      	subs	r3, #5
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	9400      	str	r4, [sp, #0]
 8000bfa:	f000 ffae 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <drawArrowExit+0x170>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3b0f      	subs	r3, #15
 8000c06:	b298      	uxth	r0, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <drawArrowExit+0x170>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	3b0a      	subs	r3, #10
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	3305      	adds	r3, #5
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2400      	movs	r4, #0
 8000c20:	9400      	str	r4, [sp, #0]
 8000c22:	f000 ff9a 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <drawArrowExit+0x170>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b0a      	subs	r3, #10
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b05      	subs	r3, #5
 8000c36:	b299      	uxth	r1, r3
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <drawArrowExit+0x170>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3b0a      	subs	r3, #10
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3305      	adds	r3, #5
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	9400      	str	r4, [sp, #0]
 8000c4e:	f000 ff84 	bl	8001b5a <lcd_DrawLine>
		break;
 8000c52:	e0a0      	b.n	8000d96 <drawArrowExit+0x2aa>
 8000c54:	2000004c 	.word	0x2000004c
 8000c58:	20000060 	.word	0x20000060
 8000c5c:	2000003c 	.word	0x2000003c
 8000c60:	20000038 	.word	0x20000038
 8000c64:	0800b3b8 	.word	0x0800b3b8
 8000c68:	0800b3bc 	.word	0x0800b3bc
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000c6c:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <drawArrowExit+0x2b4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <drawArrowExit+0x2b8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4413      	add	r3, r2
 8000c7a:	b298      	uxth	r0, r3
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <drawArrowExit+0x2bc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	3323      	adds	r3, #35	; 0x23
 8000c84:	b299      	uxth	r1, r3
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <drawArrowExit+0x2b4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <drawArrowExit+0x2b8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <drawArrowExit+0x2bc>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3b05      	subs	r3, #5
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	f248 4430 	movw	r4, #33840	; 0x8430
 8000ca4:	9400      	str	r4, [sp, #0]
 8000ca6:	f000 ff0b 	bl	8001ac0 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <drawArrowExit+0x2b4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	0fda      	lsrs	r2, r3, #31
 8000cc0:	4413      	add	r3, r2
 8000cc2:	105b      	asrs	r3, r3, #1
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	3b0f      	subs	r3, #15
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	2310      	movs	r3, #16
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	f248 4330 	movw	r3, #33840	; 0x8430
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4a34      	ldr	r2, [pc, #208]	; (8000dac <drawArrowExit+0x2c0>)
 8000cdc:	f001 faa2 	bl	8002224 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <drawArrowExit+0x2b4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	b298      	uxth	r0, r3
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <drawArrowExit+0x2bc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	0fda      	lsrs	r2, r3, #31
 8000cf6:	4413      	add	r3, r2
 8000cf8:	105b      	asrs	r3, r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3314      	adds	r3, #20
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	2301      	movs	r3, #1
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	2310      	movs	r3, #16
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	f248 4330 	movw	r3, #33840	; 0x8430
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <drawArrowExit+0x2c4>)
 8000d14:	f001 fa86 	bl	8002224 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3b0f      	subs	r3, #15
 8000d20:	b298      	uxth	r0, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b0a      	subs	r3, #10
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	3b05      	subs	r3, #5
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2400      	movs	r4, #0
 8000d3a:	9400      	str	r4, [sp, #0]
 8000d3c:	f000 ff0d 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b0f      	subs	r3, #15
 8000d48:	b298      	uxth	r0, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b0a      	subs	r3, #10
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3305      	adds	r3, #5
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2400      	movs	r4, #0
 8000d62:	9400      	str	r4, [sp, #0]
 8000d64:	f000 fef9 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3b0a      	subs	r3, #10
 8000d70:	b298      	uxth	r0, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b05      	subs	r3, #5
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <drawArrowExit+0x2b4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3b0a      	subs	r3, #10
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3305      	adds	r3, #5
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	9400      	str	r4, [sp, #0]
 8000d90:	f000 fee3 	bl	8001b5a <lcd_DrawLine>
		break;
 8000d94:	bf00      	nop
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000003c 	.word	0x2000003c
 8000da4:	20000038 	.word	0x20000038
 8000da8:	2000004c 	.word	0x2000004c
 8000dac:	0800b3b8 	.word	0x0800b3b8
 8000db0:	0800b3bc 	.word	0x0800b3bc

08000db4 <gameExitUI>:

void gameExitUI()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	showWallnotify();
 8000db8:	f000 f91e 	bl	8000ff8 <showWallnotify>
	showNotifyExit();
 8000dbc:	f7ff fe2c 	bl	8000a18 <showNotifyExit>
	drawArrowExit();
 8000dc0:	f7ff fe94 	bl	8000aec <drawArrowExit>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <askToExit>:

void askToExit()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <askToExit+0x74>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b0a      	cmp	r3, #10
 8000dd2:	d131      	bne.n	8000e38 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <askToExit+0x78>)
 8000dd6:	88db      	ldrh	r3, [r3, #6]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10c      	bne.n	8000df6 <askToExit+0x2e>
		{
			flagExit = 1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <askToExit+0x7c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <askToExit+0x80>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d023      	beq.n	8000e32 <askToExit+0x6a>
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d104      	bne.n	8000df8 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <askToExit+0x80>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
				break;
 8000df4:	e000      	b.n	8000df8 <askToExit+0x30>
			}
		}
 8000df6:	bf00      	nop
		if(button_count[7] == 1)
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <askToExit+0x78>)
 8000dfa:	89db      	ldrh	r3, [r3, #14]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10d      	bne.n	8000e1c <askToExit+0x54>
		{
			flagExit = 1;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <askToExit+0x7c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <askToExit+0x80>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d002      	beq.n	8000e14 <askToExit+0x4c>
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d011      	beq.n	8000e36 <askToExit+0x6e>
 8000e12:	e004      	b.n	8000e1e <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <askToExit+0x80>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	601a      	str	r2, [r3, #0]
				break;
 8000e1a:	e000      	b.n	8000e1e <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 8000e1c:	bf00      	nop
		if(flagExit == 1)
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <askToExit+0x7c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <askToExit+0x70>
		{
			gameExitUI();
 8000e26:	f7ff ffc5 	bl	8000db4 <gameExitUI>
			flagExit = 0;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <askToExit+0x7c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e002      	b.n	8000e38 <askToExit+0x70>
				return;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <askToExit+0x70>
				return;
 8000e36:	bf00      	nop
		}
	}
}
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001b8 	.word	0x200001b8
 8000e40:	2000012c 	.word	0x2000012c
 8000e44:	200001c8 	.word	0x200001c8
 8000e48:	20000060 	.word	0x20000060

08000e4c <initExit>:

void initExit()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	gameExitUI();
 8000e50:	f7ff ffb0 	bl	8000db4 <gameExitUI>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	; (8000f48 <MX_FSMC_Init+0xf0>)
 8000e90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000eea:	230f      	movs	r3, #15
 8000eec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000ef2:	233c      	movs	r3, #60	; 0x3c
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000efa:	2310      	movs	r3, #16
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000efe:	2311      	movs	r3, #17
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000f06:	2308      	movs	r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000f16:	2310      	movs	r3, #16
 8000f18:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000f1a:	2311      	movs	r3, #17
 8000f1c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000f22:	463a      	mov	r2, r7
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_FSMC_Init+0xec>)
 8000f2c:	f007 f92a 	bl	8008184 <HAL_SRAM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000f36:	f001 fc41 	bl	80027bc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000150 	.word	0x20000150
 8000f48:	a0000104 	.word	0xa0000104

08000f4c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_FSMC_MspInit+0x88>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d131      	bne.n	8000fcc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_FSMC_MspInit+0x88>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_FSMC_MspInit+0x8c>)
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f8a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000f8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_FSMC_MspInit+0x90>)
 8000fa6:	f005 fcf7 	bl	8006998 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000faa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000fae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <HAL_FSMC_MspInit+0x94>)
 8000fc6:	f005 fce7 	bl	8006998 <HAL_GPIO_Init>
 8000fca:	e000      	b.n	8000fce <HAL_FSMC_MspInit+0x82>
    return;
 8000fcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001a0 	.word	0x200001a0
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fec:	f7ff ffae 	bl	8000f4c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <showWallnotify>:
#include "button.h"
#include "picture.h"
#include "uart.h"

void showWallnotify()
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <showWallnotify+0xe8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b298      	uxth	r0, r3
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <showWallnotify+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b299      	uxth	r1, r3
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <showWallnotify+0xe8>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	b29c      	uxth	r4, r3
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <showWallnotify+0xec>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <showWallnotify+0xf0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	f248 4230 	movw	r2, #33840	; 0x8430
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4622      	mov	r2, r4
 8001028:	f000 fd4a 	bl	8001ac0 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <showWallnotify+0xe8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b298      	uxth	r0, r3
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <showWallnotify+0xec>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b299      	uxth	r1, r3
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <showWallnotify+0xe8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	b29c      	uxth	r4, r3
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <showWallnotify+0xec>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <showWallnotify+0xf0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	2200      	movs	r2, #0
 8001050:	9200      	str	r2, [sp, #0]
 8001052:	4622      	mov	r2, r4
 8001054:	f000 fd34 	bl	8001ac0 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <showWallnotify+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b298      	uxth	r0, r3
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <showWallnotify+0xec>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b299      	uxth	r1, r3
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <showWallnotify+0xe8>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <showWallnotify+0xf0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <showWallnotify+0xec>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	b29b      	uxth	r3, r3
 800107a:	2400      	movs	r4, #0
 800107c:	9400      	str	r4, [sp, #0]
 800107e:	f000 fd1f 	bl	8001ac0 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <showWallnotify+0xe8>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <showWallnotify+0xf0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b298      	uxth	r0, r3
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <showWallnotify+0xec>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	b299      	uxth	r1, r3
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <showWallnotify+0xe8>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <showWallnotify+0xec>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2400      	movs	r4, #0
 80010a6:	9400      	str	r4, [sp, #0]
 80010a8:	f000 fd0a 	bl	8001ac0 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <showWallnotify+0xe8>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <showWallnotify+0xec>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <showWallnotify+0xf0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b299      	uxth	r1, r3
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <showWallnotify+0xe8>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <showWallnotify+0xec>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2400      	movs	r4, #0
 80010d0:	9400      	str	r4, [sp, #0]
 80010d2:	f000 fcf5 	bl	8001ac0 <lcd_Fill>

}
 80010d6:	bf00      	nop
 80010d8:	3704      	adds	r7, #4
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000003c 	.word	0x2000003c
 80010e4:	2000004c 	.word	0x2000004c
 80010e8:	20000038 	.word	0x20000038

080010ec <showNotifyOver>:

void showNotifyOver(uint16_t overVal)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	char str1[50] = "";
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	222e      	movs	r2, #46	; 0x2e
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f008 fe82 	bl	8009e0c <memset>
	char* str2;
	switch(overVal)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d816      	bhi.n	800113c <showNotifyOver+0x50>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <showNotifyOver+0x28>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	08001125 	.word	0x08001125
 8001118:	0800112b 	.word	0x0800112b
 800111c:	08001131 	.word	0x08001131
 8001120:	08001137 	.word	0x08001137
	{
	case 0:
		str2 = " HIT WALL ";
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <showNotifyOver+0xf4>)
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001128:	e008      	b.n	800113c <showNotifyOver+0x50>
	case 1:
		str2 = " TIME OUT ";
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <showNotifyOver+0xf8>)
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800112e:	e005      	b.n	800113c <showNotifyOver+0x50>
	case 2:
		str2 = " EAT BODY ";
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <showNotifyOver+0xfc>)
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001134:	e002      	b.n	800113c <showNotifyOver+0x50>
	case 3:
		str2 = " OUT OF RANGE ";
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <showNotifyOver+0x100>)
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800113a:	bf00      	nop
	}
	strcat(str1, str2);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001142:	4618      	mov	r0, r3
 8001144:	f008 ff0a 	bl	8009f5c <strcat>
	lcd_StrCenter(0, overWallY[0] + 10, str1, WHITE, BLACK, 16, 0);
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <showNotifyOver+0x104>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	330a      	adds	r3, #10
 8001150:	b299      	uxth	r1, r3
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	2300      	movs	r3, #0
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2310      	movs	r3, #16
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	2300      	movs	r3, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001166:	2000      	movs	r0, #0
 8001168:	f001 f8c0 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <showNotifyOver+0x108>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	3308      	adds	r3, #8
 8001174:	b298      	uxth	r0, r3
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <showNotifyOver+0x104>)
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <showNotifyOver+0x104>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	0fda      	lsrs	r2, r3, #31
 8001182:	4413      	add	r3, r2
 8001184:	105b      	asrs	r3, r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	3b0f      	subs	r3, #15
 800118a:	b299      	uxth	r1, r3
 800118c:	2301      	movs	r3, #1
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2310      	movs	r3, #16
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f248 4330 	movw	r3, #33840	; 0x8430
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <showNotifyOver+0x10c>)
 800119e:	f001 f841 	bl	8002224 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <showNotifyOver+0x108>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3308      	adds	r3, #8
 80011aa:	b298      	uxth	r0, r3
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <showNotifyOver+0x104>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <showNotifyOver+0x104>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	0fda      	lsrs	r2, r3, #31
 80011b8:	4413      	add	r3, r2
 80011ba:	105b      	asrs	r3, r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3314      	adds	r3, #20
 80011c0:	b299      	uxth	r1, r3
 80011c2:	2301      	movs	r3, #1
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2310      	movs	r3, #16
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f248 4330 	movw	r3, #33840	; 0x8430
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <showNotifyOver+0x110>)
 80011d4:	f001 f826 	bl	8002224 <lcd_ShowStr>
}
 80011d8:	bf00      	nop
 80011da:	3740      	adds	r7, #64	; 0x40
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800b3c0 	.word	0x0800b3c0
 80011e4:	0800b3cc 	.word	0x0800b3cc
 80011e8:	0800b3d8 	.word	0x0800b3d8
 80011ec:	0800b3e4 	.word	0x0800b3e4
 80011f0:	2000004c 	.word	0x2000004c
 80011f4:	2000003c 	.word	0x2000003c
 80011f8:	0800b3f4 	.word	0x0800b3f4
 80011fc:	0800b400 	.word	0x0800b400

08001200 <eraseFull>:

void eraseFull()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <eraseFull+0x4c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <eraseFull+0x50>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	4413      	add	r3, r2
 8001214:	b298      	uxth	r0, r3
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <eraseFull+0x54>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3319      	adds	r3, #25
 800121e:	b299      	uxth	r1, r3
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <eraseFull+0x4c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <eraseFull+0x50>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <eraseFull+0x54>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	b29b      	uxth	r3, r3
 8001236:	3b05      	subs	r3, #5
 8001238:	b29b      	uxth	r3, r3
 800123a:	f248 4430 	movw	r4, #33840	; 0x8430
 800123e:	9400      	str	r4, [sp, #0]
 8001240:	f000 fc3e 	bl	8001ac0 <lcd_Fill>

}
 8001244:	bf00      	nop
 8001246:	3704      	adds	r7, #4
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	2000003c 	.word	0x2000003c
 8001250:	20000038 	.word	0x20000038
 8001254:	2000004c 	.word	0x2000004c

08001258 <drawArrowOver>:

void drawArrowOver()
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b087      	sub	sp, #28
 800125c:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800125e:	4b87      	ldr	r3, [pc, #540]	; (800147c <drawArrowOver+0x224>)
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b86      	ldr	r3, [pc, #536]	; (800147c <drawArrowOver+0x224>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	0fda      	lsrs	r2, r3, #31
 800126a:	4413      	add	r3, r2
 800126c:	105b      	asrs	r3, r3, #1
 800126e:	3b08      	subs	r3, #8
 8001270:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <drawArrowOver+0x224>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <drawArrowOver+0x224>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	0fda      	lsrs	r2, r3, #31
 800127e:	4413      	add	r3, r2
 8001280:	105b      	asrs	r3, r3, #1
 8001282:	331c      	adds	r3, #28
 8001284:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 8001286:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <drawArrowOver+0x228>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <drawArrowOver+0x3c>
 800128e:	2b01      	cmp	r3, #1
 8001290:	d078      	beq.n	8001384 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8001292:	e0ef      	b.n	8001474 <drawArrowOver+0x21c>
		eraseFull();
 8001294:	f7ff ffb4 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 8001298:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <drawArrowOver+0x22c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3308      	adds	r3, #8
 80012a0:	b298      	uxth	r0, r3
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <drawArrowOver+0x224>)
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	4b75      	ldr	r3, [pc, #468]	; (800147c <drawArrowOver+0x224>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	0fda      	lsrs	r2, r3, #31
 80012ae:	4413      	add	r3, r2
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3b0f      	subs	r3, #15
 80012b6:	b299      	uxth	r1, r3
 80012b8:	2301      	movs	r3, #1
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2310      	movs	r3, #16
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f248 4330 	movw	r3, #33840	; 0x8430
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ca:	4a6f      	ldr	r2, [pc, #444]	; (8001488 <drawArrowOver+0x230>)
 80012cc:	f000 ffaa 	bl	8002224 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <drawArrowOver+0x22c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3308      	adds	r3, #8
 80012d8:	b298      	uxth	r0, r3
 80012da:	4b68      	ldr	r3, [pc, #416]	; (800147c <drawArrowOver+0x224>)
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <drawArrowOver+0x224>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	0fda      	lsrs	r2, r3, #31
 80012e6:	4413      	add	r3, r2
 80012e8:	105b      	asrs	r3, r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3314      	adds	r3, #20
 80012ee:	b299      	uxth	r1, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2310      	movs	r3, #16
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	f248 4330 	movw	r3, #33840	; 0x8430
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	4a62      	ldr	r2, [pc, #392]	; (800148c <drawArrowOver+0x234>)
 8001302:	f000 ff8f 	bl	8002224 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <drawArrowOver+0x22c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b0f      	subs	r3, #15
 800130e:	b298      	uxth	r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	b299      	uxth	r1, r3
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <drawArrowOver+0x22c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b0a      	subs	r3, #10
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3b05      	subs	r3, #5
 8001324:	b29b      	uxth	r3, r3
 8001326:	2400      	movs	r4, #0
 8001328:	9400      	str	r4, [sp, #0]
 800132a:	f000 fc16 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800132e:	4b55      	ldr	r3, [pc, #340]	; (8001484 <drawArrowOver+0x22c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b0f      	subs	r3, #15
 8001336:	b298      	uxth	r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b299      	uxth	r1, r3
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <drawArrowOver+0x22c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b0a      	subs	r3, #10
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	b29b      	uxth	r3, r3
 800134a:	3305      	adds	r3, #5
 800134c:	b29b      	uxth	r3, r3
 800134e:	2400      	movs	r4, #0
 8001350:	9400      	str	r4, [sp, #0]
 8001352:	f000 fc02 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <drawArrowOver+0x22c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	3b0a      	subs	r3, #10
 800135e:	b298      	uxth	r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	b29b      	uxth	r3, r3
 8001364:	3b05      	subs	r3, #5
 8001366:	b299      	uxth	r1, r3
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <drawArrowOver+0x22c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b0a      	subs	r3, #10
 8001370:	b29a      	uxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b29b      	uxth	r3, r3
 8001376:	3305      	adds	r3, #5
 8001378:	b29b      	uxth	r3, r3
 800137a:	2400      	movs	r4, #0
 800137c:	9400      	str	r4, [sp, #0]
 800137e:	f000 fbec 	bl	8001b5a <lcd_DrawLine>
		break;
 8001382:	e077      	b.n	8001474 <drawArrowOver+0x21c>
		eraseFull();
 8001384:	f7ff ff3c 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <drawArrowOver+0x22c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	3308      	adds	r3, #8
 8001390:	b298      	uxth	r0, r3
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <drawArrowOver+0x224>)
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	4b39      	ldr	r3, [pc, #228]	; (800147c <drawArrowOver+0x224>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	0fda      	lsrs	r2, r3, #31
 800139e:	4413      	add	r3, r2
 80013a0:	105b      	asrs	r3, r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b0f      	subs	r3, #15
 80013a6:	b299      	uxth	r1, r3
 80013a8:	2301      	movs	r3, #1
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2310      	movs	r3, #16
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	f248 4330 	movw	r3, #33840	; 0x8430
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	4a33      	ldr	r2, [pc, #204]	; (8001488 <drawArrowOver+0x230>)
 80013ba:	f000 ff33 	bl	8002224 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <drawArrowOver+0x22c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3308      	adds	r3, #8
 80013c6:	b298      	uxth	r0, r3
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <drawArrowOver+0x224>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <drawArrowOver+0x224>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	0fda      	lsrs	r2, r3, #31
 80013d4:	4413      	add	r3, r2
 80013d6:	105b      	asrs	r3, r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3314      	adds	r3, #20
 80013dc:	b299      	uxth	r1, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2310      	movs	r3, #16
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f248 4330 	movw	r3, #33840	; 0x8430
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <drawArrowOver+0x234>)
 80013f2:	f000 ff17 	bl	8002224 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <drawArrowOver+0x22c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b0f      	subs	r3, #15
 80013fe:	b298      	uxth	r0, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b299      	uxth	r1, r3
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <drawArrowOver+0x22c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	b29b      	uxth	r3, r3
 800140a:	3b0a      	subs	r3, #10
 800140c:	b29a      	uxth	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b05      	subs	r3, #5
 8001414:	b29b      	uxth	r3, r3
 8001416:	2400      	movs	r4, #0
 8001418:	9400      	str	r4, [sp, #0]
 800141a:	f000 fb9e 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <drawArrowOver+0x22c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b0f      	subs	r3, #15
 8001426:	b298      	uxth	r0, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b299      	uxth	r1, r3
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <drawArrowOver+0x22c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	b29b      	uxth	r3, r3
 8001432:	3b0a      	subs	r3, #10
 8001434:	b29a      	uxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	3305      	adds	r3, #5
 800143c:	b29b      	uxth	r3, r3
 800143e:	2400      	movs	r4, #0
 8001440:	9400      	str	r4, [sp, #0]
 8001442:	f000 fb8a 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <drawArrowOver+0x22c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b0a      	subs	r3, #10
 800144e:	b298      	uxth	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b05      	subs	r3, #5
 8001456:	b299      	uxth	r1, r3
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <drawArrowOver+0x22c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	b29b      	uxth	r3, r3
 800145e:	3b0a      	subs	r3, #10
 8001460:	b29a      	uxth	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	3305      	adds	r3, #5
 8001468:	b29b      	uxth	r3, r3
 800146a:	2400      	movs	r4, #0
 800146c:	9400      	str	r4, [sp, #0]
 800146e:	f000 fb74 	bl	8001b5a <lcd_DrawLine>
		break;
 8001472:	bf00      	nop
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	2000004c 	.word	0x2000004c
 8001480:	200001ac 	.word	0x200001ac
 8001484:	2000003c 	.word	0x2000003c
 8001488:	0800b3f4 	.word	0x0800b3f4
 800148c:	0800b400 	.word	0x0800b400

08001490 <gameOverUI>:

void gameOverUI(uint16_t overVal)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	showWallnotify();
 800149a:	f7ff fdad 	bl	8000ff8 <showWallnotify>
	showNotifyOver(overVal);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe23 	bl	80010ec <showNotifyOver>
	drawArrowOver();
 80014a6:	f7ff fed7 	bl	8001258 <drawArrowOver>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <pickOver>:

void pickOver(uint16_t overVal)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	if(button_count[3] == 1)
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <pickOver+0x78>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10c      	bne.n	80014e0 <pickOver+0x2c>
	{
		flagOver = 1;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <pickOver+0x7c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <pickOver+0x80>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d025      	beq.n	8001520 <pickOver+0x6c>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <pickOver+0x2e>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <pickOver+0x80>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
			break;
 80014de:	e000      	b.n	80014e2 <pickOver+0x2e>
		}
	}
 80014e0:	bf00      	nop
	if(button_count[7] == 1)
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <pickOver+0x78>)
 80014e4:	89db      	ldrh	r3, [r3, #14]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10d      	bne.n	8001506 <pickOver+0x52>
	{
		flagOver = 1;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <pickOver+0x7c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <pickOver+0x80>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <pickOver+0x4a>
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d013      	beq.n	8001524 <pickOver+0x70>
 80014fc:	e004      	b.n	8001508 <pickOver+0x54>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <pickOver+0x80>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
			break;
 8001504:	e000      	b.n	8001508 <pickOver+0x54>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 8001506:	bf00      	nop
	if(flagOver == 1)
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <pickOver+0x7c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10a      	bne.n	8001526 <pickOver+0x72>
	{
		gameOverUI(overVal);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffbc 	bl	8001490 <gameOverUI>
		flagOver = 0;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <pickOver+0x7c>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e002      	b.n	8001526 <pickOver+0x72>
			return;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <pickOver+0x72>
			return;
 8001524:	bf00      	nop
	}
}
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000012c 	.word	0x2000012c
 8001530:	200001c0 	.word	0x200001c0
 8001534:	200001ac 	.word	0x200001ac

08001538 <initOverMode>:

void initOverMode(uint16_t overVal)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b0a6      	sub	sp, #152	; 0x98
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	TOTALSCORE = TOTALSCORE + SCORE;
 8001542:	4b6b      	ldr	r3, [pc, #428]	; (80016f0 <initOverMode+0x1b8>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <initOverMode+0x1bc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a69      	ldr	r2, [pc, #420]	; (80016f4 <initOverMode+0x1bc>)
 8001550:	6013      	str	r3, [r2, #0]
	TOTALTIMEPLAY = TOTALTIMEPLAY + TOTALTIME;
 8001552:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <initOverMode+0x1c0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <initOverMode+0x1c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	4a67      	ldr	r2, [pc, #412]	; (80016fc <initOverMode+0x1c4>)
 8001560:	6013      	str	r3, [r2, #0]
	TOTALPLAY = TOTALPLAY + 1;
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <initOverMode+0x1c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a65      	ldr	r2, [pc, #404]	; (8001700 <initOverMode+0x1c8>)
 800156a:	6013      	str	r3, [r2, #0]

	char str1[70] = "GAME_FINISH#";
 800156c:	4b65      	ldr	r3, [pc, #404]	; (8001704 <initOverMode+0x1cc>)
 800156e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	c407      	stmia	r4!, {r0, r1, r2}
 8001576:	7023      	strb	r3, [r4, #0]
 8001578:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800157c:	2239      	movs	r2, #57	; 0x39
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fc43 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 8001586:	4b60      	ldr	r3, [pc, #384]	; (8001708 <initOverMode+0x1d0>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f001 f91c 	bl	80027c8 <convert2str>
 8001590:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	strcat(str1, str2);
 8001594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001598:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800159c:	4618      	mov	r0, r3
 800159e:	f008 fcdd 	bl	8009f5c <strcat>
	char str3[50] = "has finished game, performance value: ";
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <initOverMode+0x1d4>)
 80015a4:	f107 040c 	add.w	r4, r7, #12
 80015a8:	461d      	mov	r5, r3
 80015aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015b6:	6020      	str	r0, [r4, #0]
 80015b8:	3404      	adds	r4, #4
 80015ba:	8021      	strh	r1, [r4, #0]
 80015bc:	3402      	adds	r4, #2
 80015be:	0c0b      	lsrs	r3, r1, #16
 80015c0:	7023      	strb	r3, [r4, #0]
 80015c2:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	f8c3 2007 	str.w	r2, [r3, #7]
	char *str4 = convert2str(SCORE);
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <initOverMode+0x1b8>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 f8f7 	bl	80027c8 <convert2str>
 80015da:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	strcat(str3, str4);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80015e6:	4618      	mov	r0, r3
 80015e8:	f008 fcb8 	bl	8009f5c <strcat>
	strcat(str1, str3);
 80015ec:	f107 020c 	add.w	r2, r7, #12
 80015f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f008 fcb0 	bl	8009f5c <strcat>
	strcat(str1, "#");
 80015fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fde5 	bl	80001d0 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800160e:	4413      	add	r3, r2
 8001610:	493f      	ldr	r1, [pc, #252]	; (8001710 <initOverMode+0x1d8>)
 8001612:	461a      	mov	r2, r3
 8001614:	460b      	mov	r3, r1
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	8013      	strh	r3, [r2, #0]

	char *str5 = convert2str(TOTALSCORE/TOTALPLAY);
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <initOverMode+0x1bc>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <initOverMode+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f8cd 	bl	80027c8 <convert2str>
 800162e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	strcat(str1, str5);
 8001632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001636:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800163a:	4618      	mov	r0, r3
 800163c:	f008 fc8e 	bl	8009f5c <strcat>
	strcat(str1, "#");
 8001640:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fdc3 	bl	80001d0 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001652:	4413      	add	r3, r2
 8001654:	492e      	ldr	r1, [pc, #184]	; (8001710 <initOverMode+0x1d8>)
 8001656:	461a      	mov	r2, r3
 8001658:	460b      	mov	r3, r1
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	8013      	strh	r3, [r2, #0]

	char *str6 = convert2str(TOTALTIMEPLAY/TOTALPLAY);
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <initOverMode+0x1c4>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <initOverMode+0x1c8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	b29b      	uxth	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f001 f8ab 	bl	80027c8 <convert2str>
 8001672:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	strcat(str1, str6);
 8001676:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800167a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800167e:	4618      	mov	r0, r3
 8001680:	f008 fc6c 	bl	8009f5c <strcat>
	strcat(str1, "#");
 8001684:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fda1 	bl	80001d0 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001696:	4413      	add	r3, r2
 8001698:	491d      	ldr	r1, [pc, #116]	; (8001710 <initOverMode+0x1d8>)
 800169a:	461a      	mov	r2, r3
 800169c:	460b      	mov	r3, r1
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 80016a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fd92 	bl	80001d0 <strlen>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fd84 	bl	80061c4 <uart_EspSendBytes>

	statusGame = OVERMODE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <initOverMode+0x1dc>)
 80016be:	2207      	movs	r2, #7
 80016c0:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <initOverMode+0x1b8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	801a      	strh	r2, [r3, #0]
	TOTALTIME = 0;
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <initOverMode+0x1c0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <initOverMode+0x1e0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <initOverMode+0x1e4>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
	pickOver(overVal);
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fee9 	bl	80014b4 <pickOver>
	OVERMESSAGE = overVal;
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <initOverMode+0x1e8>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	8013      	strh	r3, [r2, #0]

}
 80016e8:	bf00      	nop
 80016ea:	3798      	adds	r7, #152	; 0x98
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	200001a6 	.word	0x200001a6
 80016f4:	200001d4 	.word	0x200001d4
 80016f8:	200001d0 	.word	0x200001d0
 80016fc:	200001d8 	.word	0x200001d8
 8001700:	200001dc 	.word	0x200001dc
 8001704:	0800b40c 	.word	0x0800b40c
 8001708:	200001a4 	.word	0x200001a4
 800170c:	0800b454 	.word	0x0800b454
 8001710:	0800b408 	.word	0x0800b408
 8001714:	200001b8 	.word	0x200001b8
 8001718:	200001ac 	.word	0x200001ac
 800171c:	200001c0 	.word	0x200001c0
 8001720:	200001ce 	.word	0x200001ce

08001724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	4b81      	ldr	r3, [pc, #516]	; (8001944 <MX_GPIO_Init+0x220>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a80      	ldr	r2, [pc, #512]	; (8001944 <MX_GPIO_Init+0x220>)
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <MX_GPIO_Init+0x220>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <MX_GPIO_Init+0x220>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a79      	ldr	r2, [pc, #484]	; (8001944 <MX_GPIO_Init+0x220>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b77      	ldr	r3, [pc, #476]	; (8001944 <MX_GPIO_Init+0x220>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <MX_GPIO_Init+0x220>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a72      	ldr	r2, [pc, #456]	; (8001944 <MX_GPIO_Init+0x220>)
 800177c:	f043 0320 	orr.w	r3, r3, #32
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <MX_GPIO_Init+0x220>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <MX_GPIO_Init+0x220>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a6b      	ldr	r2, [pc, #428]	; (8001944 <MX_GPIO_Init+0x220>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b69      	ldr	r3, [pc, #420]	; (8001944 <MX_GPIO_Init+0x220>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <MX_GPIO_Init+0x220>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a64      	ldr	r2, [pc, #400]	; (8001944 <MX_GPIO_Init+0x220>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b62      	ldr	r3, [pc, #392]	; (8001944 <MX_GPIO_Init+0x220>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <MX_GPIO_Init+0x220>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a5d      	ldr	r2, [pc, #372]	; (8001944 <MX_GPIO_Init+0x220>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <MX_GPIO_Init+0x220>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <MX_GPIO_Init+0x220>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a56      	ldr	r2, [pc, #344]	; (8001944 <MX_GPIO_Init+0x220>)
 80017ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b54      	ldr	r3, [pc, #336]	; (8001944 <MX_GPIO_Init+0x220>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <MX_GPIO_Init+0x220>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <MX_GPIO_Init+0x220>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <MX_GPIO_Init+0x220>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2170      	movs	r1, #112	; 0x70
 800181e:	484a      	ldr	r0, [pc, #296]	; (8001948 <MX_GPIO_Init+0x224>)
 8001820:	f005 fa56 	bl	8006cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	4848      	ldr	r0, [pc, #288]	; (800194c <MX_GPIO_Init+0x228>)
 800182c:	f005 fa50 	bl	8006cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ESP12_BUSY_Pin|ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001836:	4846      	ldr	r0, [pc, #280]	; (8001950 <MX_GPIO_Init+0x22c>)
 8001838:	f005 fa4a 	bl	8006cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	4844      	ldr	r0, [pc, #272]	; (8001954 <MX_GPIO_Init+0x230>)
 8001842:	f005 fa45 	bl	8006cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184c:	4842      	ldr	r0, [pc, #264]	; (8001958 <MX_GPIO_Init+0x234>)
 800184e:	f005 fa3f 	bl	8006cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2108      	movs	r1, #8
 8001856:	4841      	ldr	r0, [pc, #260]	; (800195c <MX_GPIO_Init+0x238>)
 8001858:	f005 fa3a 	bl	8006cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800185c:	2370      	movs	r3, #112	; 0x70
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4835      	ldr	r0, [pc, #212]	; (8001948 <MX_GPIO_Init+0x224>)
 8001874:	f005 f890 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	482e      	ldr	r0, [pc, #184]	; (800194c <MX_GPIO_Init+0x228>)
 8001892:	f005 f881 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin|ESP12_PWR_Pin;
 8001896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4828      	ldr	r0, [pc, #160]	; (8001950 <MX_GPIO_Init+0x22c>)
 80018b0:	f005 f872 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4824      	ldr	r0, [pc, #144]	; (8001958 <MX_GPIO_Init+0x234>)
 80018c8:	f005 f866 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80018cc:	2330      	movs	r3, #48	; 0x30
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	481b      	ldr	r0, [pc, #108]	; (800194c <MX_GPIO_Init+0x228>)
 80018e0:	f005 f85a 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80018e4:	2340      	movs	r3, #64	; 0x40
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <MX_GPIO_Init+0x230>)
 80018fc:	f005 f84c 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <MX_GPIO_Init+0x234>)
 800191a:	f005 f83d 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800191e:	2308      	movs	r3, #8
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <MX_GPIO_Init+0x238>)
 8001936:	f005 f82f 	bl	8006998 <HAL_GPIO_Init>

}
 800193a:	bf00      	nop
 800193c:	3738      	adds	r7, #56	; 0x38
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40021000 	.word	0x40021000
 800194c:	40020800 	.word	0x40020800
 8001950:	40021400 	.word	0x40021400
 8001954:	40021800 	.word	0x40021800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020c00 	.word	0x40020c00

08001960 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <LCD_WR_REG+0x1c>)
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	8013      	strh	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	600ffffe 	.word	0x600ffffe

08001980 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <LCD_WR_DATA+0x1c>)
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	8053      	strh	r3, [r2, #2]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	600ffffe 	.word	0x600ffffe

080019a0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <LCD_RD_DATA+0x20>)
 80019a8:	885b      	ldrh	r3, [r3, #2]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	b29b      	uxth	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	600ffffe 	.word	0x600ffffe

080019c4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4604      	mov	r4, r0
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	80fb      	strh	r3, [r7, #6]
 80019d6:	4603      	mov	r3, r0
 80019d8:	80bb      	strh	r3, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]
 80019de:	4613      	mov	r3, r2
 80019e0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80019e2:	202a      	movs	r0, #42	; 0x2a
 80019e4:	f7ff ffbc 	bl	8001960 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ffc6 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffc0 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffba 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffb4 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a18:	202b      	movs	r0, #43	; 0x2b
 8001a1a:	f7ff ffa1 	bl	8001960 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffab 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ffa5 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff9f 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a42:	883b      	ldrh	r3, [r7, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff99 	bl	8001980 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a4e:	202c      	movs	r0, #44	; 0x2c
 8001a50:	f7ff ff86 	bl	8001960 <LCD_WR_REG>
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <lcd_Clear+0x60>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <lcd_Clear+0x60>)
 8001a70:	885b      	ldrh	r3, [r3, #2]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ffa3 	bl	80019c4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	81fb      	strh	r3, [r7, #14]
 8001a82:	e011      	b.n	8001aa8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	81bb      	strh	r3, [r7, #12]
 8001a88:	e006      	b.n	8001a98 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff77 	bl	8001980 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	3301      	adds	r3, #1
 8001a96:	81bb      	strh	r3, [r7, #12]
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <lcd_Clear+0x60>)
 8001a9a:	885b      	ldrh	r3, [r3, #2]
 8001a9c:	89ba      	ldrh	r2, [r7, #12]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3f3      	bcc.n	8001a8a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	81fb      	strh	r3, [r7, #14]
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <lcd_Clear+0x60>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	89fa      	ldrh	r2, [r7, #14]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3e8      	bcc.n	8001a84 <lcd_Clear+0x28>
		}
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200001e0 	.word	0x200001e0

08001ac0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80bb      	strh	r3, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	807b      	strh	r3, [r7, #2]
 8001ada:	4613      	mov	r3, r2
 8001adc:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	883b      	ldrh	r3, [r7, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	88b9      	ldrh	r1, [r7, #4]
 8001aec:	88f8      	ldrh	r0, [r7, #6]
 8001aee:	f7ff ff69 	bl	80019c4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	81fb      	strh	r3, [r7, #14]
 8001af6:	e010      	b.n	8001b1a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	81bb      	strh	r3, [r7, #12]
 8001afc:	e006      	b.n	8001b0c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001afe:	8c3b      	ldrh	r3, [r7, #32]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff3d 	bl	8001980 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001b06:	89bb      	ldrh	r3, [r7, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	81bb      	strh	r3, [r7, #12]
 8001b0c:	89ba      	ldrh	r2, [r7, #12]
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3f4      	bcc.n	8001afe <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001b14:	89fb      	ldrh	r3, [r7, #14]
 8001b16:	3301      	adds	r3, #1
 8001b18:	81fb      	strh	r3, [r7, #14]
 8001b1a:	89fa      	ldrh	r2, [r7, #14]
 8001b1c:	883b      	ldrh	r3, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3ea      	bcc.n	8001af8 <lcd_Fill+0x38>
		}
	}
}
 8001b22:	bf00      	nop
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
 8001b36:	460b      	mov	r3, r1
 8001b38:	80bb      	strh	r3, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	88b9      	ldrh	r1, [r7, #4]
 8001b44:	88f8      	ldrh	r0, [r7, #6]
 8001b46:	f7ff ff3d 	bl	80019c4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff17 	bl	8001980 <LCD_WR_DATA>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b08d      	sub	sp, #52	; 0x34
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4604      	mov	r4, r0
 8001b62:	4608      	mov	r0, r1
 8001b64:	4611      	mov	r1, r2
 8001b66:	461a      	mov	r2, r3
 8001b68:	4623      	mov	r3, r4
 8001b6a:	80fb      	strh	r3, [r7, #6]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80bb      	strh	r3, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001b88:	883a      	ldrh	r2, [r7, #0]
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	dd02      	ble.n	8001ba4 <lcd_DrawLine+0x4a>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00b      	b.n	8001bbc <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <lcd_DrawLine+0x56>
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e005      	b.n	8001bbc <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	425b      	negs	r3, r3
 8001bba:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dd02      	ble.n	8001bc8 <lcd_DrawLine+0x6e>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e00b      	b.n	8001be0 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <lcd_DrawLine+0x7a>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e005      	b.n	8001be0 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	425b      	negs	r3, r3
 8001bde:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dd02      	ble.n	8001bee <lcd_DrawLine+0x94>
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	e001      	b.n	8001bf2 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001bf6:	e02b      	b.n	8001c50 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	b291      	uxth	r1, r2
 8001c00:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff91 	bl	8001b2c <lcd_DrawPoint>
		xerr+=delta_x;
 8001c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	4413      	add	r3, r2
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	4413      	add	r3, r2
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dd07      	ble.n	8001c32 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dd07      	ble.n	8001c4a <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dacf      	bge.n	8001bf8 <lcd_DrawLine+0x9e>
		}
	}
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3734      	adds	r7, #52	; 0x34
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}

08001c62 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001c62:	b590      	push	{r4, r7, lr}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	4604      	mov	r4, r0
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4623      	mov	r3, r4
 8001c72:	80fb      	strh	r3, [r7, #6]
 8001c74:	4603      	mov	r3, r0
 8001c76:	80bb      	strh	r3, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001c80:	88bc      	ldrh	r4, [r7, #4]
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	88b9      	ldrh	r1, [r7, #4]
 8001c86:	88f8      	ldrh	r0, [r7, #6]
 8001c88:	8b3b      	ldrh	r3, [r7, #24]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	f7ff ff64 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001c92:	883c      	ldrh	r4, [r7, #0]
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	88b9      	ldrh	r1, [r7, #4]
 8001c98:	88f8      	ldrh	r0, [r7, #6]
 8001c9a:	8b3b      	ldrh	r3, [r7, #24]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	f7ff ff5b 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001ca4:	883c      	ldrh	r4, [r7, #0]
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	8839      	ldrh	r1, [r7, #0]
 8001caa:	88f8      	ldrh	r0, [r7, #6]
 8001cac:	8b3b      	ldrh	r3, [r7, #24]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	f7ff ff52 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001cb6:	883c      	ldrh	r4, [r7, #0]
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	88b9      	ldrh	r1, [r7, #4]
 8001cbc:	8878      	ldrh	r0, [r7, #2]
 8001cbe:	8b3b      	ldrh	r3, [r7, #24]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	f7ff ff49 	bl	8001b5a <lcd_DrawLine>
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	80fb      	strh	r3, [r7, #6]
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80bb      	strh	r3, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	4613      	mov	r3, r2
 8001cec:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001cf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	fb12 f303 	smulbb	r3, r2, r3
 8001d26:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	3b20      	subs	r3, #32
 8001d2c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4413      	add	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29c      	uxth	r4, r3
 8001d3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	88b9      	ldrh	r1, [r7, #4]
 8001d4e:	88f8      	ldrh	r0, [r7, #6]
 8001d50:	4622      	mov	r2, r4
 8001d52:	f7ff fe37 	bl	80019c4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	827b      	strh	r3, [r7, #18]
 8001d5a:	e07a      	b.n	8001e52 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001d5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d028      	beq.n	8001db6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001d64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d108      	bne.n	8001d7e <lcd_ShowChar+0xae>
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	8a7b      	ldrh	r3, [r7, #18]
 8001d70:	493c      	ldr	r1, [pc, #240]	; (8001e64 <lcd_ShowChar+0x194>)
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	440a      	add	r2, r1
 8001d76:	4413      	add	r3, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	75fb      	strb	r3, [r7, #23]
 8001d7c:	e01b      	b.n	8001db6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d82:	2b18      	cmp	r3, #24
 8001d84:	d10b      	bne.n	8001d9e <lcd_ShowChar+0xce>
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	8a79      	ldrh	r1, [r7, #18]
 8001d8a:	4837      	ldr	r0, [pc, #220]	; (8001e68 <lcd_ShowChar+0x198>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4403      	add	r3, r0
 8001d96:	440b      	add	r3, r1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	75fb      	strb	r3, [r7, #23]
 8001d9c:	e00b      	b.n	8001db6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d15a      	bne.n	8001e5c <lcd_ShowChar+0x18c>
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	8a7b      	ldrh	r3, [r7, #18]
 8001daa:	4930      	ldr	r1, [pc, #192]	; (8001e6c <lcd_ShowChar+0x19c>)
 8001dac:	0192      	lsls	r2, r2, #6
 8001dae:	440a      	add	r2, r1
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	75bb      	strb	r3, [r7, #22]
 8001dba:	e044      	b.n	8001e46 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001dbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d120      	bne.n	8001e06 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001dc4:	7dfa      	ldrb	r2, [r7, #23]
 8001dc6:	7dbb      	ldrb	r3, [r7, #22]
 8001dc8:	fa42 f303 	asr.w	r3, r2, r3
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <lcd_ShowChar+0x10e>
 8001dd4:	883b      	ldrh	r3, [r7, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fdd2 	bl	8001980 <LCD_WR_DATA>
 8001ddc:	e003      	b.n	8001de6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001dde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fdcd 	bl	8001980 <LCD_WR_DATA>
				m++;
 8001de6:	7d7b      	ldrb	r3, [r7, #21]
 8001de8:	3301      	adds	r3, #1
 8001dea:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001dec:	7d7b      	ldrb	r3, [r7, #21]
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001df4:	fb01 f202 	mul.w	r2, r1, r2
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11f      	bne.n	8001e40 <lcd_ShowChar+0x170>
				{
					m=0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	757b      	strb	r3, [r7, #21]
					break;
 8001e04:	e022      	b.n	8001e4c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001e06:	7dfa      	ldrb	r2, [r7, #23]
 8001e08:	7dbb      	ldrb	r3, [r7, #22]
 8001e0a:	fa42 f303 	asr.w	r3, r2, r3
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <lcd_ShowChar+0x152>
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	88b9      	ldrh	r1, [r7, #4]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fe85 	bl	8001b2c <lcd_DrawPoint>
				x++;
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	3301      	adds	r3, #1
 8001e26:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001e28:	88fa      	ldrh	r2, [r7, #6]
 8001e2a:	8a3b      	ldrh	r3, [r7, #16]
 8001e2c:	1ad2      	subs	r2, r2, r3
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d105      	bne.n	8001e40 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001e34:	8a3b      	ldrh	r3, [r7, #16]
 8001e36:	80fb      	strh	r3, [r7, #6]
					y++;
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	80bb      	strh	r3, [r7, #4]
					break;
 8001e3e:	e005      	b.n	8001e4c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001e40:	7dbb      	ldrb	r3, [r7, #22]
 8001e42:	3301      	adds	r3, #1
 8001e44:	75bb      	strb	r3, [r7, #22]
 8001e46:	7dbb      	ldrb	r3, [r7, #22]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	d9b7      	bls.n	8001dbc <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001e4c:	8a7b      	ldrh	r3, [r7, #18]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	827b      	strh	r3, [r7, #18]
 8001e52:	8a7a      	ldrh	r2, [r7, #18]
 8001e54:	89bb      	ldrh	r3, [r7, #12]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d380      	bcc.n	8001d5c <lcd_ShowChar+0x8c>
 8001e5a:	e000      	b.n	8001e5e <lcd_ShowChar+0x18e>
		else return;
 8001e5c:	bf00      	nop
				}
			}
		}
	}
}
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}
 8001e64:	0800b850 	.word	0x0800b850
 8001e68:	0800be40 	.word	0x0800be40
 8001e6c:	0800d010 	.word	0x0800d010

08001e70 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	4603      	mov	r3, r0
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29c      	uxth	r4, r3
 8001e9e:	88ba      	ldrh	r2, [r7, #4]
 8001ea0:	883b      	ldrh	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	88b9      	ldrh	r1, [r7, #4]
 8001eac:	88f8      	ldrh	r0, [r7, #6]
 8001eae:	4622      	mov	r2, r4
 8001eb0:	f7ff fd88 	bl	80019c4 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	82fb      	strh	r3, [r7, #22]
 8001eb8:	e027      	b.n	8001f0a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	82bb      	strh	r3, [r7, #20]
 8001ebe:	e01d      	b.n	8001efc <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fd48 	bl	8001980 <LCD_WR_DATA>
			k++;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001ef6:	8abb      	ldrh	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	82bb      	strh	r3, [r7, #20]
 8001efc:	8aba      	ldrh	r2, [r7, #20]
 8001efe:	883b      	ldrh	r3, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d3dd      	bcc.n	8001ec0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001f04:	8afb      	ldrh	r3, [r7, #22]
 8001f06:	3301      	adds	r3, #1
 8001f08:	82fb      	strh	r3, [r7, #22]
 8001f0a:	8afa      	ldrh	r2, [r7, #22]
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3d3      	bcc.n	8001eba <lcd_ShowPicture+0x4a>
		}
	}
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}

08001f1c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <lcd_SetDir+0x44>)
 8001f38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f3c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <lcd_SetDir+0x44>)
 8001f40:	22f0      	movs	r2, #240	; 0xf0
 8001f42:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001f44:	e006      	b.n	8001f54 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <lcd_SetDir+0x44>)
 8001f48:	22f0      	movs	r2, #240	; 0xf0
 8001f4a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <lcd_SetDir+0x44>)
 8001f4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f52:	805a      	strh	r2, [r3, #2]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200001e0 	.word	0x200001e0

08001f64 <lcd_init>:


void lcd_init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6e:	48aa      	ldr	r0, [pc, #680]	; (8002218 <lcd_init+0x2b4>)
 8001f70:	f004 feae 	bl	8006cd0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f004 fb46 	bl	8006608 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f82:	48a5      	ldr	r0, [pc, #660]	; (8002218 <lcd_init+0x2b4>)
 8001f84:	f004 fea4 	bl	8006cd0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8c:	f004 fb3c 	bl	8006608 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ffc3 	bl	8001f1c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001f96:	20d3      	movs	r0, #211	; 0xd3
 8001f98:	f7ff fce2 	bl	8001960 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f9c:	f7ff fd00 	bl	80019a0 <LCD_RD_DATA>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b9d      	ldr	r3, [pc, #628]	; (800221c <lcd_init+0x2b8>)
 8001fa6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001fa8:	f7ff fcfa 	bl	80019a0 <LCD_RD_DATA>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b9a      	ldr	r3, [pc, #616]	; (800221c <lcd_init+0x2b8>)
 8001fb2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001fb4:	f7ff fcf4 	bl	80019a0 <LCD_RD_DATA>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b97      	ldr	r3, [pc, #604]	; (800221c <lcd_init+0x2b8>)
 8001fbe:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001fc0:	4b96      	ldr	r3, [pc, #600]	; (800221c <lcd_init+0x2b8>)
 8001fc2:	889b      	ldrh	r3, [r3, #4]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b94      	ldr	r3, [pc, #592]	; (800221c <lcd_init+0x2b8>)
 8001fca:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001fcc:	f7ff fce8 	bl	80019a0 <LCD_RD_DATA>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b91      	ldr	r3, [pc, #580]	; (800221c <lcd_init+0x2b8>)
 8001fd6:	889b      	ldrh	r3, [r3, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <lcd_init+0x2b8>)
 8001fde:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001fe0:	20cf      	movs	r0, #207	; 0xcf
 8001fe2:	f7ff fcbd 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fcca 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001fec:	20c1      	movs	r0, #193	; 0xc1
 8001fee:	f7ff fcc7 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001ff2:	2030      	movs	r0, #48	; 0x30
 8001ff4:	f7ff fcc4 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001ff8:	20ed      	movs	r0, #237	; 0xed
 8001ffa:	f7ff fcb1 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001ffe:	2064      	movs	r0, #100	; 0x64
 8002000:	f7ff fcbe 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002004:	2003      	movs	r0, #3
 8002006:	f7ff fcbb 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800200a:	2012      	movs	r0, #18
 800200c:	f7ff fcb8 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002010:	2081      	movs	r0, #129	; 0x81
 8002012:	f7ff fcb5 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002016:	20e8      	movs	r0, #232	; 0xe8
 8002018:	f7ff fca2 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800201c:	2085      	movs	r0, #133	; 0x85
 800201e:	f7ff fcaf 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002022:	2010      	movs	r0, #16
 8002024:	f7ff fcac 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002028:	207a      	movs	r0, #122	; 0x7a
 800202a:	f7ff fca9 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800202e:	20cb      	movs	r0, #203	; 0xcb
 8002030:	f7ff fc96 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002034:	2039      	movs	r0, #57	; 0x39
 8002036:	f7ff fca3 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800203a:	202c      	movs	r0, #44	; 0x2c
 800203c:	f7ff fca0 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fc9d 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002046:	2034      	movs	r0, #52	; 0x34
 8002048:	f7ff fc9a 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800204c:	2002      	movs	r0, #2
 800204e:	f7ff fc97 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002052:	20f7      	movs	r0, #247	; 0xf7
 8002054:	f7ff fc84 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002058:	2020      	movs	r0, #32
 800205a:	f7ff fc91 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800205e:	20ea      	movs	r0, #234	; 0xea
 8002060:	f7ff fc7e 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fc8b 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff fc88 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002070:	20c0      	movs	r0, #192	; 0xc0
 8002072:	f7ff fc75 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002076:	201b      	movs	r0, #27
 8002078:	f7ff fc82 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800207c:	20c1      	movs	r0, #193	; 0xc1
 800207e:	f7ff fc6f 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002082:	2001      	movs	r0, #1
 8002084:	f7ff fc7c 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002088:	20c5      	movs	r0, #197	; 0xc5
 800208a:	f7ff fc69 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800208e:	2030      	movs	r0, #48	; 0x30
 8002090:	f7ff fc76 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002094:	2030      	movs	r0, #48	; 0x30
 8002096:	f7ff fc73 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800209a:	20c7      	movs	r0, #199	; 0xc7
 800209c:	f7ff fc60 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80020a0:	20b7      	movs	r0, #183	; 0xb7
 80020a2:	f7ff fc6d 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80020a6:	2036      	movs	r0, #54	; 0x36
 80020a8:	f7ff fc5a 	bl	8001960 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80020ac:	2008      	movs	r0, #8
 80020ae:	f7ff fc67 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80020b2:	203a      	movs	r0, #58	; 0x3a
 80020b4:	f7ff fc54 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80020b8:	2055      	movs	r0, #85	; 0x55
 80020ba:	f7ff fc61 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80020be:	20b1      	movs	r0, #177	; 0xb1
 80020c0:	f7ff fc4e 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fc5b 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80020ca:	201a      	movs	r0, #26
 80020cc:	f7ff fc58 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80020d0:	20b6      	movs	r0, #182	; 0xb6
 80020d2:	f7ff fc45 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80020d6:	200a      	movs	r0, #10
 80020d8:	f7ff fc52 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80020dc:	20a2      	movs	r0, #162	; 0xa2
 80020de:	f7ff fc4f 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80020e2:	20f2      	movs	r0, #242	; 0xf2
 80020e4:	f7ff fc3c 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fc49 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80020ee:	2026      	movs	r0, #38	; 0x26
 80020f0:	f7ff fc36 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7ff fc43 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80020fa:	20e0      	movs	r0, #224	; 0xe0
 80020fc:	f7ff fc30 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002100:	200f      	movs	r0, #15
 8002102:	f7ff fc3d 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002106:	202a      	movs	r0, #42	; 0x2a
 8002108:	f7ff fc3a 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800210c:	2028      	movs	r0, #40	; 0x28
 800210e:	f7ff fc37 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002112:	2008      	movs	r0, #8
 8002114:	f7ff fc34 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002118:	200e      	movs	r0, #14
 800211a:	f7ff fc31 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800211e:	2008      	movs	r0, #8
 8002120:	f7ff fc2e 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002124:	2054      	movs	r0, #84	; 0x54
 8002126:	f7ff fc2b 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800212a:	20a9      	movs	r0, #169	; 0xa9
 800212c:	f7ff fc28 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002130:	2043      	movs	r0, #67	; 0x43
 8002132:	f7ff fc25 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002136:	200a      	movs	r0, #10
 8002138:	f7ff fc22 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800213c:	200f      	movs	r0, #15
 800213e:	f7ff fc1f 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fc1c 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fc19 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff fc16 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff fc13 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800215a:	20e1      	movs	r0, #225	; 0xe1
 800215c:	f7ff fc00 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fc0d 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002166:	2015      	movs	r0, #21
 8002168:	f7ff fc0a 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800216c:	2017      	movs	r0, #23
 800216e:	f7ff fc07 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002172:	2007      	movs	r0, #7
 8002174:	f7ff fc04 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002178:	2011      	movs	r0, #17
 800217a:	f7ff fc01 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800217e:	2006      	movs	r0, #6
 8002180:	f7ff fbfe 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002184:	202b      	movs	r0, #43	; 0x2b
 8002186:	f7ff fbfb 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800218a:	2056      	movs	r0, #86	; 0x56
 800218c:	f7ff fbf8 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002190:	203c      	movs	r0, #60	; 0x3c
 8002192:	f7ff fbf5 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002196:	2005      	movs	r0, #5
 8002198:	f7ff fbf2 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800219c:	2010      	movs	r0, #16
 800219e:	f7ff fbef 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f7ff fbec 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80021a8:	203f      	movs	r0, #63	; 0x3f
 80021aa:	f7ff fbe9 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80021ae:	203f      	movs	r0, #63	; 0x3f
 80021b0:	f7ff fbe6 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80021b4:	200f      	movs	r0, #15
 80021b6:	f7ff fbe3 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80021ba:	202b      	movs	r0, #43	; 0x2b
 80021bc:	f7ff fbd0 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff fbdd 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fbda 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff fbd7 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80021d2:	203f      	movs	r0, #63	; 0x3f
 80021d4:	f7ff fbd4 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80021d8:	202a      	movs	r0, #42	; 0x2a
 80021da:	f7ff fbc1 	bl	8001960 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff fbce 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff fbcb 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fbc8 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80021f0:	20ef      	movs	r0, #239	; 0xef
 80021f2:	f7ff fbc5 	bl	8001980 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80021f6:	2011      	movs	r0, #17
 80021f8:	f7ff fbb2 	bl	8001960 <LCD_WR_REG>
	HAL_Delay(120);
 80021fc:	2078      	movs	r0, #120	; 0x78
 80021fe:	f004 fa03 	bl	8006608 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002202:	2029      	movs	r0, #41	; 0x29
 8002204:	f7ff fbac 	bl	8001960 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220e:	4804      	ldr	r0, [pc, #16]	; (8002220 <lcd_init+0x2bc>)
 8002210:	f004 fd5e 	bl	8006cd0 <HAL_GPIO_WritePin>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020800 	.word	0x40020800
 800221c:	200001e0 	.word	0x200001e0
 8002220:	40020000 	.word	0x40020000

08002224 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af04      	add	r7, sp, #16
 800222a:	60ba      	str	r2, [r7, #8]
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	81fb      	strh	r3, [r7, #14]
 8002232:	460b      	mov	r3, r1
 8002234:	81bb      	strh	r3, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800223a:	89fb      	ldrh	r3, [r7, #14]
 800223c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002242:	e048      	b.n	80022d6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d145      	bne.n	80022d6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800224a:	89fa      	ldrh	r2, [r7, #14]
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <lcd_ShowStr+0xc4>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	1acb      	subs	r3, r1, r3
 800225c:	429a      	cmp	r2, r3
 800225e:	dc3f      	bgt.n	80022e0 <lcd_ShowStr+0xbc>
 8002260:	89ba      	ldrh	r2, [r7, #12]
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <lcd_ShowStr+0xc4>)
 8002264:	885b      	ldrh	r3, [r3, #2]
 8002266:	4619      	mov	r1, r3
 8002268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800226c:	1acb      	subs	r3, r1, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	dc36      	bgt.n	80022e0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d902      	bls.n	8002280 <lcd_ShowStr+0x5c>
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
 800227e:	e02a      	b.n	80022d6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b0d      	cmp	r3, #13
 8002286:	d10b      	bne.n	80022a0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002288:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800228c:	b29a      	uxth	r2, r3
 800228e:	89bb      	ldrh	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002294:	8abb      	ldrh	r3, [r7, #20]
 8002296:	81fb      	strh	r3, [r7, #14]
					str++;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3301      	adds	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	e017      	b.n	80022d0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	88fc      	ldrh	r4, [r7, #6]
 80022a6:	89b9      	ldrh	r1, [r7, #12]
 80022a8:	89f8      	ldrh	r0, [r7, #14]
 80022aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4623      	mov	r3, r4
 80022bc:	f7ff fd08 	bl	8001cd0 <lcd_ShowChar>
					x+=sizey/2;
 80022c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	4413      	add	r3, r2
 80022ce:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3301      	adds	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1b2      	bne.n	8002244 <lcd_ShowStr+0x20>
 80022de:	e000      	b.n	80022e2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80022e0:	bf00      	nop
			}
		}
	}
}
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	200001e0 	.word	0x200001e0

080022ec <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af04      	add	r7, sp, #16
 80022f2:	60ba      	str	r2, [r7, #8]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	81fb      	strh	r3, [r7, #14]
 80022fa:	460b      	mov	r3, r1
 80022fc:	81bb      	strh	r3, [r7, #12]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002302:	68b8      	ldr	r0, [r7, #8]
 8002304:	f7fd ff64 	bl	80001d0 <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <lcd_StrCenter+0x60>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	8afb      	ldrh	r3, [r7, #22]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	0fda      	lsrs	r2, r3, #31
 800231a:	4413      	add	r3, r2
 800231c:	105b      	asrs	r3, r3, #1
 800231e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002320:	89fa      	ldrh	r2, [r7, #14]
 8002322:	8abb      	ldrh	r3, [r7, #20]
 8002324:	4413      	add	r3, r2
 8002326:	b298      	uxth	r0, r3
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	89b9      	ldrh	r1, [r7, #12]
 800232c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	8c3b      	ldrh	r3, [r7, #32]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f7ff ff70 	bl	8002224 <lcd_ShowStr>
}
 8002344:	bf00      	nop
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200001e0 	.word	0x200001e0

08002350 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002354:	2201      	movs	r2, #1
 8002356:	2140      	movs	r1, #64	; 0x40
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <led7_init+0x14>)
 800235a:	f004 fcb9 	bl	8006cd0 <HAL_GPIO_WritePin>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40021800 	.word	0x40021800

08002368 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800236c:	4b3f      	ldr	r3, [pc, #252]	; (800246c <led7_Scan+0x104>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <led7_Scan+0x104>)
 8002376:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002378:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <led7_Scan+0x108>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <led7_Scan+0x10c>)
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	b21a      	sxth	r2, r3
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <led7_Scan+0x104>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b21b      	sxth	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b21b      	sxth	r3, r3
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <led7_Scan+0x104>)
 8002394:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <led7_Scan+0x108>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d846      	bhi.n	800242c <led7_Scan+0xc4>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <led7_Scan+0x3c>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023d3 	.word	0x080023d3
 80023ac:	080023f1 	.word	0x080023f1
 80023b0:	0800240f 	.word	0x0800240f
	case 0:
		spi_buffer |= 0x00b0;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <led7_Scan+0x104>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b2b      	ldr	r3, [pc, #172]	; (800246c <led7_Scan+0x104>)
 80023c0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <led7_Scan+0x104>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <led7_Scan+0x104>)
 80023ce:	801a      	strh	r2, [r3, #0]
		break;
 80023d0:	e02d      	b.n	800242e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <led7_Scan+0x104>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80023da:	b29a      	uxth	r2, r3
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <led7_Scan+0x104>)
 80023de:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <led7_Scan+0x104>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f023 0320 	bic.w	r3, r3, #32
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <led7_Scan+0x104>)
 80023ec:	801a      	strh	r2, [r3, #0]
		break;
 80023ee:	e01e      	b.n	800242e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <led7_Scan+0x104>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <led7_Scan+0x104>)
 80023fc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80023fe:	4b1b      	ldr	r3, [pc, #108]	; (800246c <led7_Scan+0x104>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f023 0310 	bic.w	r3, r3, #16
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <led7_Scan+0x104>)
 800240a:	801a      	strh	r2, [r3, #0]
		break;
 800240c:	e00f      	b.n	800242e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <led7_Scan+0x104>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <led7_Scan+0x104>)
 800241a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <led7_Scan+0x104>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <led7_Scan+0x104>)
 8002428:	801a      	strh	r2, [r3, #0]
		break;
 800242a:	e000      	b.n	800242e <led7_Scan+0xc6>
	default:
		break;
 800242c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <led7_Scan+0x108>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	425a      	negs	r2, r3
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	bf58      	it	pl
 8002440:	4253      	negpl	r3, r2
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <led7_Scan+0x108>)
 8002446:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2140      	movs	r1, #64	; 0x40
 800244c:	480a      	ldr	r0, [pc, #40]	; (8002478 <led7_Scan+0x110>)
 800244e:	f004 fc3f 	bl	8006cd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002452:	2301      	movs	r3, #1
 8002454:	2202      	movs	r2, #2
 8002456:	4905      	ldr	r1, [pc, #20]	; (800246c <led7_Scan+0x104>)
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <led7_Scan+0x114>)
 800245a:	f005 f974 	bl	8007746 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800245e:	2201      	movs	r2, #1
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <led7_Scan+0x110>)
 8002464:	f004 fc34 	bl	8006cd0 <HAL_GPIO_WritePin>
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000092 	.word	0x20000092
 8002470:	200001e6 	.word	0x200001e6
 8002474:	20000084 	.word	0x20000084
 8002478:	40021800 	.word	0x40021800
 800247c:	20002964 	.word	0x20002964

08002480 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0e      	blt.n	80024b2 <led7_SetDigit+0x32>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b09      	cmp	r3, #9
 8002498:	dc0b      	bgt.n	80024b2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <led7_SetDigit+0x40>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <led7_SetDigit+0x44>)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	460a      	mov	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
	}
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000088 	.word	0x20000088
 80024c4:	20000084 	.word	0x20000084

080024c8 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <led7_SetColon+0x20>
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <led7_SetColon+0x3c>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	f023 0308 	bic.w	r3, r3, #8
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <led7_SetColon+0x3c>)
 80024e4:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80024e6:	e006      	b.n	80024f6 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <led7_SetColon+0x3c>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f043 0308 	orr.w	r3, r3, #8
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <led7_SetColon+0x3c>)
 80024f4:	801a      	strh	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000092 	.word	0x20000092

08002508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800250c:	f004 f80a 	bl	8006524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002510:	f000 f8a2 	bl	8002658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002514:	f7ff f906 	bl	8001724 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002518:	f003 fc4a 	bl	8005db0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800251c:	f002 f9ae 	bl	800487c <MX_SPI1_Init>
  MX_FSMC_Init();
 8002520:	f7fe fc9a 	bl	8000e58 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8002524:	f003 ff5a 	bl	80063dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002528:	f000 f900 	bl	800272c <system_init>
  lcd_Clear(WHITE);
 800252c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002530:	f7ff fa94 	bl	8001a5c <lcd_Clear>
  test_lcd();
 8002534:	f000 f924 	bl	8002780 <test_lcd>
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {

    // lcd_Clear(WHITE);
	   if (flagForButton)
 8002538:	4b3c      	ldr	r3, [pc, #240]	; (800262c <main+0x124>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <main+0x46>
	   {
		   flagForButton= 0;
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <main+0x124>)
 8002542:	2200      	movs	r2, #0
 8002544:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 8002546:	f7fe f9fb 	bl	8000940 <button_Scan>
//		   test_Esp();
//		  lightProcess();
		   beginStartGame();
 800254a:	f002 fd5f 	bl	800500c <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <main+0x128>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d007      	beq.n	8002566 <main+0x5e>
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <main+0x128>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <main+0x5e>
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <main+0x128>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d126      	bne.n	80025b4 <main+0xac>
	   {
		   generateFruit();
 8002566:	f001 fc15 	bl	8003d94 <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <main+0x128>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d108      	bne.n	8002584 <main+0x7c>
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <main+0x12c>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <main+0x7c>
		   {
			   generateWall();
 800257a:	f001 fd2f 	bl	8003fdc <generateWall>
			   flagForGenerateWall = 0;
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <main+0x12c>)
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <main+0x130>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <main+0x8e>
		   {
			   flagForSnakeRun= 0;
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <main+0x130>)
 800258e:	2200      	movs	r2, #0
 8002590:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 8002592:	f001 fad3 	bl	8003b3c <snakeRun>
		   }
		   if(flagForUart == 1)
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <main+0x134>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d110      	bne.n	80025c0 <main+0xb8>
		   {
//			   uartSendPlay();
			   TOTALTIME = TOTALTIME + 1;
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <main+0x138>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <main+0x138>)
 80025a8:	801a      	strh	r2, [r3, #0]
			   setTimerUart(1000);
 80025aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ae:	f002 f889 	bl	80046c4 <setTimerUart>
		   if(flagForUart == 1)
 80025b2:	e005      	b.n	80025c0 <main+0xb8>
		   }
	  }else{
		  setTimerUart(0);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f002 f885 	bl	80046c4 <setTimerUart>
		  flagForSnakeRun = 0;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <main+0x130>)
 80025bc:	2200      	movs	r2, #0
 80025be:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <main+0x128>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d104      	bne.n	80025d2 <main+0xca>
	  {
		  pickOver(OVERMESSAGE);
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <main+0x13c>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ff71 	bl	80014b4 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <main+0x128>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d101      	bne.n	80025de <main+0xd6>
	  {
		  pickStop();
 80025da:	f003 fa65 	bl	8005aa8 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <main+0x128>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b0a      	cmp	r3, #10
 80025e4:	d101      	bne.n	80025ea <main+0xe2>
	  {
		  askToExit();
 80025e6:	f7fe fbef 	bl	8000dc8 <askToExit>
	  }
	  if(flagForTiming == 1)
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <main+0x140>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d10b      	bne.n	800260a <main+0x102>
	  {
		  flagForTiming = 0;
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <main+0x140>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <main+0x128>)
 80025fa:	2207      	movs	r2, #7
 80025fc:	601a      	str	r2, [r3, #0]
		  initOverMode(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f7fe ff9a 	bl	8001538 <initOverMode>
		  arrowMode = NORMALMODE;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <main+0x144>)
 8002606:	2203      	movs	r2, #3
 8002608:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <main+0x148>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d192      	bne.n	8002538 <main+0x30>
	  {
		  TIMING--;
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <main+0x14c>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <main+0x14c>)
 800261c:	801a      	strh	r2, [r3, #0]
		  showTiming();
 800261e:	f003 fd4f 	bl	80060c0 <showTiming>
		  setTimerDeTime(1000);
 8002622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002626:	f002 f815 	bl	8004654 <setTimerDeTime>
	   if (flagForButton)
 800262a:	e785      	b.n	8002538 <main+0x30>
 800262c:	20002938 	.word	0x20002938
 8002630:	200001b8 	.word	0x200001b8
 8002634:	20002956 	.word	0x20002956
 8002638:	2000293e 	.word	0x2000293e
 800263c:	2000295c 	.word	0x2000295c
 8002640:	200001d0 	.word	0x200001d0
 8002644:	200001ce 	.word	0x200001ce
 8002648:	20002944 	.word	0x20002944
 800264c:	20000014 	.word	0x20000014
 8002650:	20002950 	.word	0x20002950
 8002654:	20000000 	.word	0x20000000

08002658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b094      	sub	sp, #80	; 0x50
 800265c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	2230      	movs	r2, #48	; 0x30
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f007 fbd0 	bl	8009e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <SystemClock_Config+0xcc>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <SystemClock_Config+0xcc>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	; 0x40
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <SystemClock_Config+0xcc>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <SystemClock_Config+0xd0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a21      	ldr	r2, [pc, #132]	; (8002728 <SystemClock_Config+0xd0>)
 80026a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <SystemClock_Config+0xd0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026b4:	2302      	movs	r3, #2
 80026b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026b8:	2301      	movs	r3, #1
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026bc:	2310      	movs	r3, #16
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c0:	2302      	movs	r3, #2
 80026c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026c8:	2308      	movs	r3, #8
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026cc:	23a8      	movs	r3, #168	; 0xa8
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026d4:	2304      	movs	r3, #4
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fb11 	bl	8006d04 <HAL_RCC_OscConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026e8:	f000 f868 	bl	80027bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ec:	230f      	movs	r3, #15
 80026ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f0:	2302      	movs	r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80026fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2105      	movs	r1, #5
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fd72 	bl	80071f4 <HAL_RCC_ClockConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002716:	f000 f851 	bl	80027bc <Error_Handler>
  }
}
 800271a:	bf00      	nop
 800271c:	3750      	adds	r7, #80	; 0x50
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000

0800272c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2120      	movs	r1, #32
 8002734:	4811      	ldr	r0, [pc, #68]	; (800277c <system_init+0x50>)
 8002736:	f004 facb 	bl	8006cd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2140      	movs	r1, #64	; 0x40
 800273e:	480f      	ldr	r0, [pc, #60]	; (800277c <system_init+0x50>)
 8002740:	f004 fac6 	bl	8006cd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2110      	movs	r1, #16
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <system_init+0x50>)
 800274a:	f004 fac1 	bl	8006cd0 <HAL_GPIO_WritePin>
	  timer_init();
 800274e:	f001 ff3b 	bl	80045c8 <timer_init>
	  led7_init();
 8002752:	f7ff fdfd 	bl	8002350 <led7_init>
	  button_init();
 8002756:	f7fe f8e7 	bl	8000928 <button_init>
	  lcd_init();
 800275a:	f7ff fc03 	bl	8001f64 <lcd_init>
	  uart_init_esp();
 800275e:	f003 fd1b 	bl	8006198 <uart_init_esp>
	  setTimerButton(50);
 8002762:	2032      	movs	r0, #50	; 0x32
 8002764:	f001 ffca 	bl	80046fc <setTimerButton>
	  setTimerSnakeRun(300);
 8002768:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800276c:	f001 ff36 	bl	80045dc <setTimerSnakeRun>
	  setTimerGenerateWall(2000);
 8002770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002774:	f001 ff8a 	bl	800468c <setTimerGenerateWall>
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000

08002780 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 8002786:	231f      	movs	r3, #31
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	231d      	movs	r3, #29
 800278c:	221d      	movs	r2, #29
 800278e:	2113      	movs	r1, #19
 8002790:	2013      	movs	r0, #19
 8002792:	f7ff f995 	bl	8001ac0 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 8002796:	2301      	movs	r3, #1
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	2310      	movs	r3, #16
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	231f      	movs	r3, #31
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <test_lcd+0x38>)
 80027a8:	2164      	movs	r1, #100	; 0x64
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff fd9e 	bl	80022ec <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	0800b488 	.word	0x0800b488

080027bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c0:	b672      	cpsid	i
}
 80027c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <Error_Handler+0x8>
	...

080027c8 <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b090      	sub	sp, #64	; 0x40
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	f107 000c 	add.w	r0, r7, #12
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <convert2str+0x2c>)
 80027da:	2132      	movs	r1, #50	; 0x32
 80027dc:	f007 fb8a 	bl	8009ef4 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	4618      	mov	r0, r3
 80027e6:	f007 fbc9 	bl	8009f7c <strdup>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3740      	adds	r7, #64	; 0x40
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	0800b498 	.word	0x0800b498

080027f8 <lcdDrawWall>:

void lcdDrawWall()
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <lcdDrawWall+0x3c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b298      	uxth	r0, r3
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <lcdDrawWall+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b299      	uxth	r1, r3
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <lcdDrawWall+0x3c>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b29c      	uxth	r4, r3
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <lcdDrawWall+0x40>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <lcdDrawWall+0x44>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2200      	movs	r2, #0
 8002822:	9200      	str	r2, [sp, #0]
 8002824:	4622      	mov	r2, r4
 8002826:	f7ff f94b 	bl	8001ac0 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 800282a:	bf00      	nop
 800282c:	3704      	adds	r7, #4
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	bf00      	nop
 8002834:	20000018 	.word	0x20000018
 8002838:	20000028 	.word	0x20000028
 800283c:	20000038 	.word	0x20000038

08002840 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b0a3      	sub	sp, #140	; 0x8c
 8002844:	af04      	add	r7, sp, #16
 8002846:	4603      	mov	r3, r0
 8002848:	460a      	mov	r2, r1
 800284a:	80fb      	strh	r3, [r7, #6]
 800284c:	4613      	mov	r3, r2
 800284e:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002850:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002854:	f7ff f902 	bl	8001a5c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002858:	4b45      	ldr	r3, [pc, #276]	; (8002970 <setUpLcdNormalPlay+0x130>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <setUpLcdNormalPlay+0x134>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	211f      	movs	r1, #31
 8002866:	9100      	str	r1, [sp, #0]
 8002868:	2100      	movs	r1, #0
 800286a:	2000      	movs	r0, #0
 800286c:	f7ff f928 	bl	8001ac0 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 8002870:	2301      	movs	r3, #1
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	2310      	movs	r3, #16
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	231f      	movs	r3, #31
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002880:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <setUpLcdNormalPlay+0x138>)
 8002882:	2105      	movs	r1, #5
 8002884:	2000      	movs	r0, #0
 8002886:	f7ff fccd 	bl	8002224 <lcd_ShowStr>

	char str1[50] = "ID: ";
 800288a:	4a3c      	ldr	r2, [pc, #240]	; (800297c <setUpLcdNormalPlay+0x13c>)
 800288c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002890:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002894:	6018      	str	r0, [r3, #0]
 8002896:	3304      	adds	r3, #4
 8002898:	7019      	strb	r1, [r3, #0]
 800289a:	f107 0341 	add.w	r3, r7, #65	; 0x41
 800289e:	222d      	movs	r2, #45	; 0x2d
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f007 fab2 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <setUpLcdNormalPlay+0x140>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff8b 	bl	80027c8 <convert2str>
 80028b2:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 80028b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80028ba:	4618      	mov	r0, r3
 80028bc:	f007 fb4e 	bl	8009f5c <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <setUpLcdNormalPlay+0x144>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b298      	uxth	r0, r3
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <setUpLcdNormalPlay+0x148>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b299      	uxth	r1, r3
 80028cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028d0:	2301      	movs	r3, #1
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	2310      	movs	r3, #16
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028e2:	f7ff fc9f 	bl	8002224 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 80028e6:	4a29      	ldr	r2, [pc, #164]	; (800298c <setUpLcdNormalPlay+0x14c>)
 80028e8:	f107 0308 	add.w	r3, r7, #8
 80028ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	222a      	movs	r2, #42	; 0x2a
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f007 fa85 	bl	8009e0c <memset>
	char *str4 = convert2str(SCORE);
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <setUpLcdNormalPlay+0x150>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff5e 	bl	80027c8 <convert2str>
 800290c:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002914:	4618      	mov	r0, r3
 8002916:	f007 fb21 	bl	8009f5c <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <setUpLcdNormalPlay+0x154>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b298      	uxth	r0, r3
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <setUpLcdNormalPlay+0x158>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	3305      	adds	r3, #5
 8002928:	b299      	uxth	r1, r3
 800292a:	f107 0208 	add.w	r2, r7, #8
 800292e:	2300      	movs	r3, #0
 8002930:	9302      	str	r3, [sp, #8]
 8002932:	2310      	movs	r3, #16
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	231f      	movs	r3, #31
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800293e:	f7ff fc71 	bl	8002224 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <setUpLcdNormalPlay+0x15c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b298      	uxth	r0, r3
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <setUpLcdNormalPlay+0x160>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b299      	uxth	r1, r3
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <setUpLcdNormalPlay+0x164>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <setUpLcdNormalPlay+0x168>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	4c14      	ldr	r4, [pc, #80]	; (80029ac <setUpLcdNormalPlay+0x16c>)
 800295c:	9400      	str	r4, [sp, #0]
 800295e:	f7ff fa87 	bl	8001e70 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002962:	f7ff ff49 	bl	80027f8 <lcdDrawWall>
}
 8002966:	bf00      	nop
 8002968:	377c      	adds	r7, #124	; 0x7c
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	20000018 	.word	0x20000018
 8002974:	20000028 	.word	0x20000028
 8002978:	0800b49c 	.word	0x0800b49c
 800297c:	0800b4ac 	.word	0x0800b4ac
 8002980:	200001a4 	.word	0x200001a4
 8002984:	20000064 	.word	0x20000064
 8002988:	20000068 	.word	0x20000068
 800298c:	0800b4e0 	.word	0x0800b4e0
 8002990:	200001a6 	.word	0x200001a6
 8002994:	2000006c 	.word	0x2000006c
 8002998:	20000070 	.word	0x20000070
 800299c:	20000074 	.word	0x20000074
 80029a0:	20000078 	.word	0x20000078
 80029a4:	2000007c 	.word	0x2000007c
 80029a8:	20000080 	.word	0x20000080
 80029ac:	0800e7d0 	.word	0x0800e7d0

080029b0 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b0a3      	sub	sp, #140	; 0x8c
 80029b4:	af04      	add	r7, sp, #16
 80029b6:	4603      	mov	r3, r0
 80029b8:	460a      	mov	r2, r1
 80029ba:	80fb      	strh	r3, [r7, #6]
 80029bc:	4613      	mov	r3, r2
 80029be:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80029c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029c4:	f7ff f84a 	bl	8001a5c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80029c8:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <setUpLcdTimingPlay+0x130>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <setUpLcdTimingPlay+0x134>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	211f      	movs	r1, #31
 80029d6:	9100      	str	r1, [sp, #0]
 80029d8:	2100      	movs	r1, #0
 80029da:	2000      	movs	r0, #0
 80029dc:	f7ff f870 	bl	8001ac0 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 80029e0:	2301      	movs	r3, #1
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	2310      	movs	r3, #16
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	231f      	movs	r3, #31
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029f0:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <setUpLcdTimingPlay+0x138>)
 80029f2:	2105      	movs	r1, #5
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff fc15 	bl	8002224 <lcd_ShowStr>

	char str1[50] = "ID: ";
 80029fa:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <setUpLcdTimingPlay+0x13c>)
 80029fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a04:	6018      	str	r0, [r3, #0]
 8002a06:	3304      	adds	r3, #4
 8002a08:	7019      	strb	r1, [r3, #0]
 8002a0a:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002a0e:	222d      	movs	r2, #45	; 0x2d
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f007 f9fa 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <setUpLcdTimingPlay+0x140>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fed3 	bl	80027c8 <convert2str>
 8002a22:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002a24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a28:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f007 fa96 	bl	8009f5c <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <setUpLcdTimingPlay+0x144>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b298      	uxth	r0, r3
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <setUpLcdTimingPlay+0x148>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b299      	uxth	r1, r3
 8002a3c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a40:	2301      	movs	r3, #1
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	2310      	movs	r3, #16
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a52:	f7ff fbe7 	bl	8002224 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002a56:	4a29      	ldr	r2, [pc, #164]	; (8002afc <setUpLcdTimingPlay+0x14c>)
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a60:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	222a      	movs	r2, #42	; 0x2a
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 f9cd 	bl	8009e0c <memset>
	char *str4 = convert2str(0);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff fea8 	bl	80027c8 <convert2str>
 8002a78:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a80:	4618      	mov	r0, r3
 8002a82:	f007 fa6b 	bl	8009f5c <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <setUpLcdTimingPlay+0x150>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b298      	uxth	r0, r3
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <setUpLcdTimingPlay+0x154>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3305      	adds	r3, #5
 8002a94:	b299      	uxth	r1, r3
 8002a96:	f107 0208 	add.w	r2, r7, #8
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aac:	f7ff fbba 	bl	8002224 <lcd_ShowStr>

	showTiming();
 8002ab0:	f003 fb06 	bl	80060c0 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <setUpLcdTimingPlay+0x158>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b298      	uxth	r0, r3
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <setUpLcdTimingPlay+0x15c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <setUpLcdTimingPlay+0x160>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <setUpLcdTimingPlay+0x164>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4c12      	ldr	r4, [pc, #72]	; (8002b18 <setUpLcdTimingPlay+0x168>)
 8002ace:	9400      	str	r4, [sp, #0]
 8002ad0:	f7ff f9ce 	bl	8001e70 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002ad4:	f7ff fe90 	bl	80027f8 <lcdDrawWall>
}
 8002ad8:	bf00      	nop
 8002ada:	377c      	adds	r7, #124	; 0x7c
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	20000028 	.word	0x20000028
 8002ae8:	0800b514 	.word	0x0800b514
 8002aec:	0800b4ac 	.word	0x0800b4ac
 8002af0:	200001a4 	.word	0x200001a4
 8002af4:	20000064 	.word	0x20000064
 8002af8:	20000068 	.word	0x20000068
 8002afc:	0800b4e0 	.word	0x0800b4e0
 8002b00:	2000006c 	.word	0x2000006c
 8002b04:	20000070 	.word	0x20000070
 8002b08:	20000074 	.word	0x20000074
 8002b0c:	20000078 	.word	0x20000078
 8002b10:	2000007c 	.word	0x2000007c
 8002b14:	20000080 	.word	0x20000080
 8002b18:	0800e7d0 	.word	0x0800e7d0

08002b1c <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b0a3      	sub	sp, #140	; 0x8c
 8002b20:	af04      	add	r7, sp, #16
 8002b22:	4603      	mov	r3, r0
 8002b24:	460a      	mov	r2, r1
 8002b26:	80fb      	strh	r3, [r7, #6]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002b2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b30:	f7fe ff94 	bl	8001a5c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002b34:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <setUpLcdAdvancePlay+0x130>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <setUpLcdAdvancePlay+0x134>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	211f      	movs	r1, #31
 8002b42:	9100      	str	r1, [sp, #0]
 8002b44:	2100      	movs	r1, #0
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe ffba 	bl	8001ac0 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	9302      	str	r3, [sp, #8]
 8002b50:	2310      	movs	r3, #16
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	231f      	movs	r3, #31
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	; (8002c54 <setUpLcdAdvancePlay+0x138>)
 8002b5e:	2105      	movs	r1, #5
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7ff fb5f 	bl	8002224 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002b66:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <setUpLcdAdvancePlay+0x13c>)
 8002b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b70:	6018      	str	r0, [r3, #0]
 8002b72:	3304      	adds	r3, #4
 8002b74:	7019      	strb	r1, [r3, #0]
 8002b76:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002b7a:	222d      	movs	r2, #45	; 0x2d
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f007 f944 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <setUpLcdAdvancePlay+0x140>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fe1d 	bl	80027c8 <convert2str>
 8002b8e:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b94:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002b96:	4618      	mov	r0, r3
 8002b98:	f007 f9e0 	bl	8009f5c <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <setUpLcdAdvancePlay+0x144>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b298      	uxth	r0, r3
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <setUpLcdAdvancePlay+0x148>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b299      	uxth	r1, r3
 8002ba8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002bac:	2301      	movs	r3, #1
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bbe:	f7ff fb31 	bl	8002224 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <setUpLcdAdvancePlay+0x14c>)
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	222a      	movs	r2, #42	; 0x2a
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f007 f917 	bl	8009e0c <memset>
	char *str4 = convert2str(0);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7ff fdf2 	bl	80027c8 <convert2str>
 8002be4:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002bec:	4618      	mov	r0, r3
 8002bee:	f007 f9b5 	bl	8009f5c <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <setUpLcdAdvancePlay+0x150>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b298      	uxth	r0, r3
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <setUpLcdAdvancePlay+0x154>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3305      	adds	r3, #5
 8002c00:	b299      	uxth	r1, r3
 8002c02:	f107 0208 	add.w	r2, r7, #8
 8002c06:	2301      	movs	r3, #1
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c18:	f7ff fb04 	bl	8002224 <lcd_ShowStr>

	showTiming();
 8002c1c:	f003 fa50 	bl	80060c0 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <setUpLcdAdvancePlay+0x158>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b298      	uxth	r0, r3
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <setUpLcdAdvancePlay+0x15c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <setUpLcdAdvancePlay+0x160>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <setUpLcdAdvancePlay+0x164>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4c12      	ldr	r4, [pc, #72]	; (8002c84 <setUpLcdAdvancePlay+0x168>)
 8002c3a:	9400      	str	r4, [sp, #0]
 8002c3c:	f7ff f918 	bl	8001e70 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002c40:	f7ff fdda 	bl	80027f8 <lcdDrawWall>
}
 8002c44:	bf00      	nop
 8002c46:	377c      	adds	r7, #124	; 0x7c
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	20000018 	.word	0x20000018
 8002c50:	20000028 	.word	0x20000028
 8002c54:	0800b524 	.word	0x0800b524
 8002c58:	0800b4ac 	.word	0x0800b4ac
 8002c5c:	200001a4 	.word	0x200001a4
 8002c60:	20000064 	.word	0x20000064
 8002c64:	20000068 	.word	0x20000068
 8002c68:	0800b4e0 	.word	0x0800b4e0
 8002c6c:	2000006c 	.word	0x2000006c
 8002c70:	20000070 	.word	0x20000070
 8002c74:	20000074 	.word	0x20000074
 8002c78:	20000078 	.word	0x20000078
 8002c7c:	2000007c 	.word	0x2000007c
 8002c80:	20000080 	.word	0x20000080
 8002c84:	0800e7d0 	.word	0x0800e7d0

08002c88 <printScore>:

void printScore()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b094      	sub	sp, #80	; 0x50
 8002c8c:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <printScore+0xd8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d12a      	bne.n	8002cec <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 8002c96:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <printScore+0xdc>)
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	222a      	movs	r2, #42	; 0x2a
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f007 f8ae 	bl	8009e0c <memset>
		char *str4 = convert2str(SCORE);
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <printScore+0xe0>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fd87 	bl	80027c8 <convert2str>
 8002cba:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f007 f94b 	bl	8009f5c <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <printScore+0xe4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b298      	uxth	r0, r3
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <printScore+0xe8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3305      	adds	r3, #5
 8002cd4:	b299      	uxth	r1, r3
 8002cd6:	1d3a      	adds	r2, r7, #4
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9302      	str	r3, [sp, #8]
 8002cdc:	2310      	movs	r3, #16
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	231f      	movs	r3, #31
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ce8:	f7ff fa9c 	bl	8002224 <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <printScore+0xd8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d003      	beq.n	8002cfc <printScore+0x74>
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <printScore+0xd8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d12c      	bne.n	8002d56 <printScore+0xce>
	{
		char str3[50] = "SCORE: ";
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <printScore+0xdc>)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d04:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	222a      	movs	r2, #42	; 0x2a
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f007 f87b 	bl	8009e0c <memset>
		char *str4 = convert2str(SCORE);
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <printScore+0xe0>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fd54 	bl	80027c8 <convert2str>
 8002d20:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d26:	4618      	mov	r0, r3
 8002d28:	f007 f918 	bl	8009f5c <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <printScore+0xe4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b298      	uxth	r0, r3
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <printScore+0xe8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3305      	adds	r3, #5
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	1d3a      	adds	r2, r7, #4
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9302      	str	r3, [sp, #8]
 8002d42:	2310      	movs	r3, #16
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	231f      	movs	r3, #31
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d4e:	f7ff fa69 	bl	8002224 <lcd_ShowStr>

		showTiming();
 8002d52:	f003 f9b5 	bl	80060c0 <showTiming>
	}
}
 8002d56:	bf00      	nop
 8002d58:	3740      	adds	r7, #64	; 0x40
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200001b8 	.word	0x200001b8
 8002d64:	0800b4e0 	.word	0x0800b4e0
 8002d68:	200001a6 	.word	0x200001a6
 8002d6c:	2000006c 	.word	0x2000006c
 8002d70:	20000070 	.word	0x20000070

08002d74 <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 8002d7a:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <drawHeadSnake+0x244>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	f200 8114 	bhi.w	8002fac <drawHeadSnake+0x238>
 8002d84:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <drawHeadSnake+0x18>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002f25 	.word	0x08002f25
 8002d90:	08002ea5 	.word	0x08002ea5
 8002d94:	08002e1d 	.word	0x08002e1d
 8002d98:	08002d9d 	.word	0x08002d9d
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002d9c:	4b86      	ldr	r3, [pc, #536]	; (8002fb8 <drawHeadSnake+0x244>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	b298      	uxth	r0, r3
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <drawHeadSnake+0x244>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002da8:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <drawHeadSnake+0x244>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3309      	adds	r3, #9
 8002db0:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002db2:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <drawHeadSnake+0x244>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3309      	adds	r3, #9
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002dc0:	9400      	str	r4, [sp, #0]
 8002dc2:	f7fe fe7d 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002dc6:	4b7c      	ldr	r3, [pc, #496]	; (8002fb8 <drawHeadSnake+0x244>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	b298      	uxth	r0, r3
 8002dcc:	4b7a      	ldr	r3, [pc, #488]	; (8002fb8 <drawHeadSnake+0x244>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002dd2:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <drawHeadSnake+0x244>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3304      	adds	r3, #4
 8002dda:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002ddc:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <drawHeadSnake+0x244>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3304      	adds	r3, #4
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2400      	movs	r4, #0
 8002de8:	9400      	str	r4, [sp, #0]
 8002dea:	f7fe fe69 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002dee:	4b72      	ldr	r3, [pc, #456]	; (8002fb8 <drawHeadSnake+0x244>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3305      	adds	r3, #5
 8002df6:	b298      	uxth	r0, r3
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <drawHeadSnake+0x244>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002dfe:	4b6e      	ldr	r3, [pc, #440]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3309      	adds	r3, #9
 8002e06:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002e08:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3304      	adds	r3, #4
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2400      	movs	r4, #0
 8002e14:	9400      	str	r4, [sp, #0]
 8002e16:	f7fe fe53 	bl	8001ac0 <lcd_Fill>
		break;
 8002e1a:	e0c8      	b.n	8002fae <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	b298      	uxth	r0, r3
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002e28:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3309      	adds	r3, #9
 8002e30:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002e32:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3309      	adds	r3, #9
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002e40:	9400      	str	r4, [sp, #0]
 8002e42:	f7fe fe3d 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002e46:	4b5c      	ldr	r3, [pc, #368]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	b298      	uxth	r0, r3
 8002e4c:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3305      	adds	r3, #5
 8002e54:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e56:	4b58      	ldr	r3, [pc, #352]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e60:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3309      	adds	r3, #9
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2400      	movs	r4, #0
 8002e6c:	9400      	str	r4, [sp, #0]
 8002e6e:	f7fe fe27 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002e72:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3305      	adds	r3, #5
 8002e7a:	b298      	uxth	r0, r3
 8002e7c:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3305      	adds	r3, #5
 8002e84:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3309      	adds	r3, #9
 8002e8e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <drawHeadSnake+0x244>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3309      	adds	r3, #9
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	9400      	str	r4, [sp, #0]
 8002e9e:	f7fe fe0f 	bl	8001ac0 <lcd_Fill>
		break;
 8002ea2:	e084      	b.n	8002fae <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ea4:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <drawHeadSnake+0x244>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	b298      	uxth	r0, r3
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <drawHeadSnake+0x244>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002eb0:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <drawHeadSnake+0x244>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3309      	adds	r3, #9
 8002eb8:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002eba:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <drawHeadSnake+0x244>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3309      	adds	r3, #9
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002ec8:	9400      	str	r4, [sp, #0]
 8002eca:	f7fe fdf9 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ece:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <drawHeadSnake+0x244>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	b298      	uxth	r0, r3
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <drawHeadSnake+0x244>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <drawHeadSnake+0x244>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <drawHeadSnake+0x244>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3304      	adds	r3, #4
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2400      	movs	r4, #0
 8002ef0:	9400      	str	r4, [sp, #0]
 8002ef2:	f7fe fde5 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <drawHeadSnake+0x244>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	b298      	uxth	r0, r3
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <drawHeadSnake+0x244>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3305      	adds	r3, #5
 8002f04:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002f06:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3309      	adds	r3, #9
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2400      	movs	r4, #0
 8002f1c:	9400      	str	r4, [sp, #0]
 8002f1e:	f7fe fdcf 	bl	8001ac0 <lcd_Fill>
		break;
 8002f22:	e044      	b.n	8002fae <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	b298      	uxth	r0, r3
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3309      	adds	r3, #9
 8002f38:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3309      	adds	r3, #9
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002f48:	9400      	str	r4, [sp, #0]
 8002f4a:	f7fe fdb9 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3305      	adds	r3, #5
 8002f56:	b298      	uxth	r0, r3
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3309      	adds	r3, #9
 8002f66:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3304      	adds	r3, #4
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2400      	movs	r4, #0
 8002f74:	9400      	str	r4, [sp, #0]
 8002f76:	f7fe fda3 	bl	8001ac0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3305      	adds	r3, #5
 8002f82:	b298      	uxth	r0, r3
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3305      	adds	r3, #5
 8002f8c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3309      	adds	r3, #9
 8002f96:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <drawHeadSnake+0x244>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3309      	adds	r3, #9
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2400      	movs	r4, #0
 8002fa4:	9400      	str	r4, [sp, #0]
 8002fa6:	f7fe fd8b 	bl	8001ac0 <lcd_Fill>
		break;
 8002faa:	e000      	b.n	8002fae <drawHeadSnake+0x23a>
	default:
		break;
 8002fac:	bf00      	nop
	}
}
 8002fae:	bf00      	nop
 8002fb0:	3704      	adds	r7, #4
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200001f0 	.word	0x200001f0

08002fbc <goLeft>:

void goLeft()
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8002fc2:	4b58      	ldr	r3, [pc, #352]	; (8003124 <goLeft+0x168>)
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 80a7 	bne.w	800311a <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002fcc:	4b55      	ldr	r3, [pc, #340]	; (8003124 <goLeft+0x168>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <goLeft+0x168>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4798      	blx	r3
			break;
 8002fda:	e09f      	b.n	800311c <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 8002fdc:	4b51      	ldr	r3, [pc, #324]	; (8003124 <goLeft+0x168>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e091      	b.n	800310c <goLeft+0x150>
			{
				if (i == 0)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d128      	bne.n	8003040 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8002fee:	4a4d      	ldr	r2, [pc, #308]	; (8003124 <goLeft+0x168>)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3305      	adds	r3, #5
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f107 020c 	add.w	r2, r7, #12
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003002:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 8003006:	4a47      	ldr	r2, [pc, #284]	; (8003124 <goLeft+0x168>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3305      	adds	r3, #5
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f1a3 020a 	sub.w	r2, r3, #10
 8003016:	4943      	ldr	r1, [pc, #268]	; (8003124 <goLeft+0x168>)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3305      	adds	r3, #5
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8003022:	4a40      	ldr	r2, [pc, #256]	; (8003124 <goLeft+0x168>)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3305      	adds	r3, #5
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	493d      	ldr	r1, [pc, #244]	; (8003124 <goLeft+0x168>)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3305      	adds	r3, #5
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800303a:	f7ff fe9b 	bl	8002d74 <drawHeadSnake>
 800303e:	e062      	b.n	8003106 <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003040:	4a38      	ldr	r2, [pc, #224]	; (8003124 <goLeft+0x168>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3305      	adds	r3, #5
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	1d3a      	adds	r2, r7, #4
 800304c:	3304      	adds	r3, #4
 800304e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003052:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003056:	4a33      	ldr	r2, [pc, #204]	; (8003124 <goLeft+0x168>)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3305      	adds	r3, #5
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	f107 020c 	add.w	r2, r7, #12
 8003066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800306a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	1d3a      	adds	r2, r7, #4
 8003074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003078:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d123      	bne.n	80030ca <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003082:	4a28      	ldr	r2, [pc, #160]	; (8003124 <goLeft+0x168>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3305      	adds	r3, #5
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b298      	uxth	r0, r3
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <goLeft+0x168>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3305      	adds	r3, #5
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <goLeft+0x168>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3305      	adds	r3, #5
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3309      	adds	r3, #9
 80030ae:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80030b0:	4c1c      	ldr	r4, [pc, #112]	; (8003124 <goLeft+0x168>)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3305      	adds	r3, #5
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4423      	add	r3, r4
 80030ba:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3309      	adds	r3, #9
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2400      	movs	r4, #0
 80030c4:	9400      	str	r4, [sp, #0]
 80030c6:	f7fe fcfb 	bl	8001ac0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <goLeft+0x168>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	3b01      	subs	r3, #1
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d117      	bne.n	8003106 <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <goLeft+0x168>)
 80030d8:	331c      	adds	r3, #28
 80030da:	1d3a      	adds	r2, r7, #4
 80030dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030e0:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	b298      	uxth	r0, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	b299      	uxth	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3309      	adds	r3, #9
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3309      	adds	r3, #9
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003100:	9400      	str	r4, [sp, #0]
 8003102:	f7fe fcdd 	bl	8001ac0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <goLeft+0x168>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	f6ff af68 	blt.w	8002fe8 <goLeft+0x2c>
					}
				}
			}
			break;
 8003118:	e000      	b.n	800311c <goLeft+0x160>
		}
	}
 800311a:	bf00      	nop
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}
 8003124:	200001f0 	.word	0x200001f0

08003128 <goRight>:

void goRight()
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <goRight+0x168>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 80a7 	bne.w	8003286 <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003138:	4b55      	ldr	r3, [pc, #340]	; (8003290 <goRight+0x168>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d103      	bne.n	8003148 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <goRight+0x168>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4798      	blx	r3
			break;
 8003146:	e09f      	b.n	8003288 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 8003148:	4b51      	ldr	r3, [pc, #324]	; (8003290 <goRight+0x168>)
 800314a:	2200      	movs	r2, #0
 800314c:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e091      	b.n	8003278 <goRight+0x150>
			{
				if (i == 0)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d128      	bne.n	80031ac <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800315a:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <goRight+0x168>)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3305      	adds	r3, #5
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	f107 020c 	add.w	r2, r7, #12
 8003168:	3304      	adds	r3, #4
 800316a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800316e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 8003172:	4a47      	ldr	r2, [pc, #284]	; (8003290 <goRight+0x168>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3305      	adds	r3, #5
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f103 020a 	add.w	r2, r3, #10
 8003182:	4943      	ldr	r1, [pc, #268]	; (8003290 <goRight+0x168>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3305      	adds	r3, #5
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 800318e:	4a40      	ldr	r2, [pc, #256]	; (8003290 <goRight+0x168>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3305      	adds	r3, #5
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	493d      	ldr	r1, [pc, #244]	; (8003290 <goRight+0x168>)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3305      	adds	r3, #5
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80031a6:	f7ff fde5 	bl	8002d74 <drawHeadSnake>
 80031aa:	e062      	b.n	8003272 <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80031ac:	4a38      	ldr	r2, [pc, #224]	; (8003290 <goRight+0x168>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3305      	adds	r3, #5
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	1d3a      	adds	r2, r7, #4
 80031b8:	3304      	adds	r3, #4
 80031ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031be:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 80031c2:	4a33      	ldr	r2, [pc, #204]	; (8003290 <goRight+0x168>)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3305      	adds	r3, #5
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	f107 020c 	add.w	r2, r7, #12
 80031d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031d6:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031e4:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d123      	bne.n	8003236 <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80031ee:	4a28      	ldr	r2, [pc, #160]	; (8003290 <goRight+0x168>)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3305      	adds	r3, #5
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b298      	uxth	r0, r3
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <goRight+0x168>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3305      	adds	r3, #5
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <goRight+0x168>)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3305      	adds	r3, #5
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003216:	b29b      	uxth	r3, r3
 8003218:	3309      	adds	r3, #9
 800321a:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800321c:	4c1c      	ldr	r4, [pc, #112]	; (8003290 <goRight+0x168>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3305      	adds	r3, #5
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4423      	add	r3, r4
 8003226:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003228:	b29b      	uxth	r3, r3
 800322a:	3309      	adds	r3, #9
 800322c:	b29b      	uxth	r3, r3
 800322e:	2400      	movs	r4, #0
 8003230:	9400      	str	r4, [sp, #0]
 8003232:	f7fe fc45 	bl	8001ac0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <goRight+0x168>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	3b01      	subs	r3, #1
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	429a      	cmp	r2, r3
 8003240:	d117      	bne.n	8003272 <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <goRight+0x168>)
 8003244:	331c      	adds	r3, #28
 8003246:	1d3a      	adds	r2, r7, #4
 8003248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800324c:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	b298      	uxth	r0, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	b299      	uxth	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	b29b      	uxth	r3, r3
 800325c:	3309      	adds	r3, #9
 800325e:	b29a      	uxth	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	b29b      	uxth	r3, r3
 8003264:	3309      	adds	r3, #9
 8003266:	b29b      	uxth	r3, r3
 8003268:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800326c:	9400      	str	r4, [sp, #0]
 800326e:	f7fe fc27 	bl	8001ac0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <goRight+0x168>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	429a      	cmp	r2, r3
 8003280:	f6ff af68 	blt.w	8003154 <goRight+0x2c>
					}
				}
			}
			break;
 8003284:	e000      	b.n	8003288 <goRight+0x160>
		}
	}
 8003286:	bf00      	nop
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}
 8003290:	200001f0 	.word	0x200001f0

08003294 <goUp>:

void goUp()
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <goUp+0x168>)
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80a7 	bne.w	80033f2 <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <goUp+0x168>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d103      	bne.n	80032b4 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <goUp+0x168>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4798      	blx	r3
			break;
 80032b2:	e09f      	b.n	80033f4 <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 80032b4:	4b51      	ldr	r3, [pc, #324]	; (80033fc <goUp+0x168>)
 80032b6:	2203      	movs	r2, #3
 80032b8:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e091      	b.n	80033e4 <goUp+0x150>
			{
				if (i == 0)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d128      	bne.n	8003318 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 80032c6:	4a4d      	ldr	r2, [pc, #308]	; (80033fc <goUp+0x168>)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3305      	adds	r3, #5
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	f107 020c 	add.w	r2, r7, #12
 80032d4:	3304      	adds	r3, #4
 80032d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032da:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 80032de:	4a47      	ldr	r2, [pc, #284]	; (80033fc <goUp+0x168>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3305      	adds	r3, #5
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4944      	ldr	r1, [pc, #272]	; (80033fc <goUp+0x168>)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3305      	adds	r3, #5
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 80032f6:	4a41      	ldr	r2, [pc, #260]	; (80033fc <goUp+0x168>)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3305      	adds	r3, #5
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f1a3 020a 	sub.w	r2, r3, #10
 8003306:	493d      	ldr	r1, [pc, #244]	; (80033fc <goUp+0x168>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3305      	adds	r3, #5
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003312:	f7ff fd2f 	bl	8002d74 <drawHeadSnake>
 8003316:	e062      	b.n	80033de <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003318:	4a38      	ldr	r2, [pc, #224]	; (80033fc <goUp+0x168>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3305      	adds	r3, #5
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	1d3a      	adds	r2, r7, #4
 8003324:	3304      	adds	r3, #4
 8003326:	e893 0003 	ldmia.w	r3, {r0, r1}
 800332a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800332e:	4a33      	ldr	r2, [pc, #204]	; (80033fc <goUp+0x168>)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3305      	adds	r3, #5
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	f107 020c 	add.w	r2, r7, #12
 800333e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003342:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	1d3a      	adds	r2, r7, #4
 800334c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003350:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d123      	bne.n	80033a2 <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800335a:	4a28      	ldr	r2, [pc, #160]	; (80033fc <goUp+0x168>)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3305      	adds	r3, #5
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	b298      	uxth	r0, r3
 8003368:	4a24      	ldr	r2, [pc, #144]	; (80033fc <goUp+0x168>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3305      	adds	r3, #5
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <goUp+0x168>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3305      	adds	r3, #5
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003382:	b29b      	uxth	r3, r3
 8003384:	3309      	adds	r3, #9
 8003386:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003388:	4c1c      	ldr	r4, [pc, #112]	; (80033fc <goUp+0x168>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3305      	adds	r3, #5
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4423      	add	r3, r4
 8003392:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003394:	b29b      	uxth	r3, r3
 8003396:	3309      	adds	r3, #9
 8003398:	b29b      	uxth	r3, r3
 800339a:	2400      	movs	r4, #0
 800339c:	9400      	str	r4, [sp, #0]
 800339e:	f7fe fb8f 	bl	8001ac0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <goUp+0x168>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	3b01      	subs	r3, #1
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d117      	bne.n	80033de <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <goUp+0x168>)
 80033b0:	331c      	adds	r3, #28
 80033b2:	1d3a      	adds	r2, r7, #4
 80033b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033b8:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	b298      	uxth	r0, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	b299      	uxth	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3309      	adds	r3, #9
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3309      	adds	r3, #9
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80033d8:	9400      	str	r4, [sp, #0]
 80033da:	f7fe fb71 	bl	8001ac0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <goUp+0x168>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f6ff af68 	blt.w	80032c0 <goUp+0x2c>
					}
				}
			}
			break;
 80033f0:	e000      	b.n	80033f4 <goUp+0x160>
		}
	}
 80033f2:	bf00      	nop
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	200001f0 	.word	0x200001f0

08003400 <goDown>:

void goDown()
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003406:	4b58      	ldr	r3, [pc, #352]	; (8003568 <goDown+0x168>)
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 80a7 	bne.w	800355e <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003410:	4b55      	ldr	r3, [pc, #340]	; (8003568 <goDown+0x168>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d103      	bne.n	8003420 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <goDown+0x168>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4798      	blx	r3
			break;
 800341e:	e09f      	b.n	8003560 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 8003420:	4b51      	ldr	r3, [pc, #324]	; (8003568 <goDown+0x168>)
 8003422:	2202      	movs	r2, #2
 8003424:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e091      	b.n	8003550 <goDown+0x150>
			{
				if (i == 0)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d128      	bne.n	8003484 <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003432:	4a4d      	ldr	r2, [pc, #308]	; (8003568 <goDown+0x168>)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3305      	adds	r3, #5
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	f107 020c 	add.w	r2, r7, #12
 8003440:	3304      	adds	r3, #4
 8003442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003446:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 800344a:	4a47      	ldr	r2, [pc, #284]	; (8003568 <goDown+0x168>)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3305      	adds	r3, #5
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4944      	ldr	r1, [pc, #272]	; (8003568 <goDown+0x168>)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3305      	adds	r3, #5
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 8003462:	4a41      	ldr	r2, [pc, #260]	; (8003568 <goDown+0x168>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3305      	adds	r3, #5
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f103 020a 	add.w	r2, r3, #10
 8003472:	493d      	ldr	r1, [pc, #244]	; (8003568 <goDown+0x168>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3305      	adds	r3, #5
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800347e:	f7ff fc79 	bl	8002d74 <drawHeadSnake>
 8003482:	e062      	b.n	800354a <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003484:	4a38      	ldr	r2, [pc, #224]	; (8003568 <goDown+0x168>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3305      	adds	r3, #5
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	1d3a      	adds	r2, r7, #4
 8003490:	3304      	adds	r3, #4
 8003492:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003496:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800349a:	4a33      	ldr	r2, [pc, #204]	; (8003568 <goDown+0x168>)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3305      	adds	r3, #5
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	f107 020c 	add.w	r2, r7, #12
 80034aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ae:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	1d3a      	adds	r2, r7, #4
 80034b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034bc:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d123      	bne.n	800350e <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <goDown+0x168>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3305      	adds	r3, #5
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	b298      	uxth	r0, r3
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <goDown+0x168>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3305      	adds	r3, #5
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80034e2:	4a21      	ldr	r2, [pc, #132]	; (8003568 <goDown+0x168>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3305      	adds	r3, #5
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3309      	adds	r3, #9
 80034f2:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80034f4:	4c1c      	ldr	r4, [pc, #112]	; (8003568 <goDown+0x168>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3305      	adds	r3, #5
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4423      	add	r3, r4
 80034fe:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003500:	b29b      	uxth	r3, r3
 8003502:	3309      	adds	r3, #9
 8003504:	b29b      	uxth	r3, r3
 8003506:	2400      	movs	r4, #0
 8003508:	9400      	str	r4, [sp, #0]
 800350a:	f7fe fad9 	bl	8001ac0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <goDown+0x168>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	3b01      	subs	r3, #1
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	429a      	cmp	r2, r3
 8003518:	d117      	bne.n	800354a <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <goDown+0x168>)
 800351c:	331c      	adds	r3, #28
 800351e:	1d3a      	adds	r2, r7, #4
 8003520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003524:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b298      	uxth	r0, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	b299      	uxth	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	b29b      	uxth	r3, r3
 8003534:	3309      	adds	r3, #9
 8003536:	b29a      	uxth	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	b29b      	uxth	r3, r3
 800353c:	3309      	adds	r3, #9
 800353e:	b29b      	uxth	r3, r3
 8003540:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003544:	9400      	str	r4, [sp, #0]
 8003546:	f7fe fabb 	bl	8001ac0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <goDown+0x168>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	f6ff af68 	blt.w	800342c <goDown+0x2c>
					}
				}
			}
			break;
 800355c:	e000      	b.n	8003560 <goDown+0x160>
		}
	}
 800355e:	bf00      	nop
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}
 8003568:	200001f0 	.word	0x200001f0

0800356c <resumeGame>:

void resumeGame()
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b087      	sub	sp, #28
 8003570:	af02      	add	r7, sp, #8
	uartSendContinuePlay();
 8003572:	f002 fe6d 	bl	8006250 <uartSendContinuePlay>
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 8003576:	4b75      	ldr	r3, [pc, #468]	; (800374c <resumeGame+0x1e0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b74      	ldr	r3, [pc, #464]	; (8003750 <resumeGame+0x1e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	4413      	add	r3, r2
 8003584:	b299      	uxth	r1, r3
 8003586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003590:	22f0      	movs	r2, #240	; 0xf0
 8003592:	2000      	movs	r0, #0
 8003594:	f7fe fa94 	bl	8001ac0 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e02c      	b.n	80035f8 <resumeGame+0x8c>
	{
		if (i == 0)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <resumeGame+0x3e>
			drawHeadSnake();
 80035a4:	f7ff fbe6 	bl	8002d74 <drawHeadSnake>
 80035a8:	e023      	b.n	80035f2 <resumeGame+0x86>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80035aa:	4a6a      	ldr	r2, [pc, #424]	; (8003754 <resumeGame+0x1e8>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3305      	adds	r3, #5
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b298      	uxth	r0, r3
 80035b8:	4a66      	ldr	r2, [pc, #408]	; (8003754 <resumeGame+0x1e8>)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3305      	adds	r3, #5
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80035c6:	4a63      	ldr	r2, [pc, #396]	; (8003754 <resumeGame+0x1e8>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3305      	adds	r3, #5
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3309      	adds	r3, #9
 80035d6:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80035d8:	4c5e      	ldr	r4, [pc, #376]	; (8003754 <resumeGame+0x1e8>)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3305      	adds	r3, #5
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4423      	add	r3, r4
 80035e2:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3309      	adds	r3, #9
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2400      	movs	r4, #0
 80035ec:	9400      	str	r4, [sp, #0]
 80035ee:	f7fe fa67 	bl	8001ac0 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	4b56      	ldr	r3, [pc, #344]	; (8003754 <resumeGame+0x1e8>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	429a      	cmp	r2, r3
 8003600:	dbcd      	blt.n	800359e <resumeGame+0x32>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	e07e      	b.n	8003706 <resumeGame+0x19a>
	{
		int X = wallObject.infoWall[i].x;
 8003608:	4953      	ldr	r1, [pc, #332]	; (8003758 <resumeGame+0x1ec>)
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 800361a:	494f      	ldr	r1, [pc, #316]	; (8003758 <resumeGame+0x1ec>)
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	b298      	uxth	r0, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b299      	uxth	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	b29b      	uxth	r3, r3
 800363a:	3309      	adds	r3, #9
 800363c:	b29a      	uxth	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	3309      	adds	r3, #9
 8003644:	b29b      	uxth	r3, r3
 8003646:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800364a:	9400      	str	r4, [sp, #0]
 800364c:	f7fe fa38 	bl	8001ac0 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 8003650:	4941      	ldr	r1, [pc, #260]	; (8003758 <resumeGame+0x1ec>)
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3308      	adds	r3, #8
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d126      	bne.n	80036b4 <resumeGame+0x148>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	b298      	uxth	r0, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	330a      	adds	r3, #10
 8003670:	b299      	uxth	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	b29b      	uxth	r3, r3
 8003676:	3309      	adds	r3, #9
 8003678:	b29a      	uxth	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	3313      	adds	r3, #19
 8003680:	b29b      	uxth	r3, r3
 8003682:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003686:	9400      	str	r4, [sp, #0]
 8003688:	f7fe fa1a 	bl	8001ac0 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	b298      	uxth	r0, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b0a      	subs	r3, #10
 8003696:	b299      	uxth	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	b29b      	uxth	r3, r3
 800369c:	3309      	adds	r3, #9
 800369e:	b29a      	uxth	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80036ac:	9400      	str	r4, [sp, #0]
 80036ae:	f7fe fa07 	bl	8001ac0 <lcd_Fill>
 80036b2:	e025      	b.n	8003700 <resumeGame+0x194>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	330a      	adds	r3, #10
 80036ba:	b298      	uxth	r0, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b299      	uxth	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3313      	adds	r3, #19
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3309      	adds	r3, #9
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80036d4:	9400      	str	r4, [sp, #0]
 80036d6:	f7fe f9f3 	bl	8001ac0 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b0a      	subs	r3, #10
 80036e0:	b298      	uxth	r0, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b299      	uxth	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3309      	adds	r3, #9
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80036fa:	9400      	str	r4, [sp, #0]
 80036fc:	f7fe f9e0 	bl	8001ac0 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <resumeGame+0x1ec>)
 8003708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	f6ff af78 	blt.w	8003608 <resumeGame+0x9c>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <resumeGame+0x1f0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b298      	uxth	r0, r3
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <resumeGame+0x1f4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b299      	uxth	r1, r3
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <resumeGame+0x1f0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	3309      	adds	r3, #9
 800372c:	b29a      	uxth	r2, r3
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <resumeGame+0x1f4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	3309      	adds	r3, #9
 8003736:	b29b      	uxth	r3, r3
 8003738:	f240 14cf 	movw	r4, #463	; 0x1cf
 800373c:	9400      	str	r4, [sp, #0]
 800373e:	f7fe f9bf 	bl	8001ac0 <lcd_Fill>
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	bf00      	nop
 800374c:	20000028 	.word	0x20000028
 8003750:	20000038 	.word	0x20000038
 8003754:	200001f0 	.word	0x200001f0
 8003758:	200011bc 	.word	0x200011bc
 800375c:	20000094 	.word	0x20000094
 8003760:	20000098 	.word	0x20000098

08003764 <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <checkOutOfValidRange+0x38>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	db0c      	blt.n	800378a <checkOutOfValidRange+0x26>
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <checkOutOfValidRange+0x38>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2be6      	cmp	r3, #230	; 0xe6
 8003776:	dc08      	bgt.n	800378a <checkOutOfValidRange+0x26>
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <checkOutOfValidRange+0x38>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	2b45      	cmp	r3, #69	; 0x45
 800377e:	dd04      	ble.n	800378a <checkOutOfValidRange+0x26>
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <checkOutOfValidRange+0x38>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003788:	dd01      	ble.n	800378e <checkOutOfValidRange+0x2a>
		return 1;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <checkOutOfValidRange+0x2c>
	return 0;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200001f0 	.word	0x200001f0

080037a0 <checkEatBody>:

int checkEatBody()
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 80037a6:	2301      	movs	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	e018      	b.n	80037de <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <checkEatBody+0x58>)
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4911      	ldr	r1, [pc, #68]	; (80037f8 <checkEatBody+0x58>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3305      	adds	r3, #5
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d10b      	bne.n	80037d8 <checkEatBody+0x38>
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <checkEatBody+0x58>)
 80037c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c4:	490c      	ldr	r1, [pc, #48]	; (80037f8 <checkEatBody+0x58>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3305      	adds	r3, #5
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d101      	bne.n	80037d8 <checkEatBody+0x38>
			return 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e008      	b.n	80037ea <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3301      	adds	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <checkEatBody+0x58>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dbe1      	blt.n	80037ac <checkEatBody+0xc>
	return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	200001f0 	.word	0x200001f0

080037fc <checkEatFruit>:

int checkEatFruit()
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <checkEatFruit+0x2c>)
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <checkEatFruit+0x30>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <checkEatFruit+0x20>
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <checkEatFruit+0x2c>)
 800380e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <checkEatFruit+0x34>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d101      	bne.n	800381c <checkEatFruit+0x20>
		return 1;
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <checkEatFruit+0x22>
	return 0;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	200001f0 	.word	0x200001f0
 800382c:	20000094 	.word	0x20000094
 8003830:	20000098 	.word	0x20000098

08003834 <checkHitWall>:

int checkHitWall()
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e079      	b.n	8003934 <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 8003840:	4944      	ldr	r1, [pc, #272]	; (8003954 <checkHitWall+0x120>)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3308      	adds	r3, #8
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d136      	bne.n	80038c4 <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003856:	4b40      	ldr	r3, [pc, #256]	; (8003958 <checkHitWall+0x124>)
 8003858:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800385a:	483e      	ldr	r0, [pc, #248]	; (8003954 <checkHitWall+0x120>)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	3304      	adds	r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3b0a      	subs	r3, #10
 800386e:	4299      	cmp	r1, r3
 8003870:	d01a      	beq.n	80038a8 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <checkHitWall+0x124>)
 8003874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003876:	4837      	ldr	r0, [pc, #220]	; (8003954 <checkHitWall+0x120>)
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4403      	add	r3, r0
 8003884:	3304      	adds	r3, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 800388a:	4299      	cmp	r1, r3
 800388c:	d00c      	beq.n	80038a8 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 800388e:	4b32      	ldr	r3, [pc, #200]	; (8003958 <checkHitWall+0x124>)
 8003890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003892:	4830      	ldr	r0, [pc, #192]	; (8003954 <checkHitWall+0x120>)
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4403      	add	r3, r0
 80038a0:	3304      	adds	r3, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 80038a4:	4299      	cmp	r1, r3
 80038a6:	d142      	bne.n	800392e <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <checkHitWall+0x124>)
 80038aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ac:	4829      	ldr	r0, [pc, #164]	; (8003954 <checkHitWall+0x120>)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4403      	add	r3, r0
 80038ba:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 80038bc:	4299      	cmp	r1, r3
 80038be:	d136      	bne.n	800392e <checkHitWall+0xfa>
			{
				return 1;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e041      	b.n	8003948 <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <checkHitWall+0x124>)
 80038c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c8:	4822      	ldr	r0, [pc, #136]	; (8003954 <checkHitWall+0x120>)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4403      	add	r3, r0
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330a      	adds	r3, #10
 80038da:	4299      	cmp	r1, r3
 80038dc:	d018      	beq.n	8003910 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <checkHitWall+0x124>)
 80038e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e2:	481c      	ldr	r0, [pc, #112]	; (8003954 <checkHitWall+0x120>)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4403      	add	r3, r0
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 80038f4:	4299      	cmp	r1, r3
 80038f6:	d00b      	beq.n	8003910 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <checkHitWall+0x124>)
 80038fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038fc:	4815      	ldr	r0, [pc, #84]	; (8003954 <checkHitWall+0x120>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 800390c:	4299      	cmp	r1, r3
 800390e:	d10e      	bne.n	800392e <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <checkHitWall+0x124>)
 8003912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003914:	480f      	ldr	r0, [pc, #60]	; (8003954 <checkHitWall+0x120>)
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4403      	add	r3, r0
 8003922:	3304      	adds	r3, #4
 8003924:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8003926:	4299      	cmp	r1, r3
 8003928:	d101      	bne.n	800392e <checkHitWall+0xfa>
			{
				return 1;
 800392a:	2301      	movs	r3, #1
 800392c:	e00c      	b.n	8003948 <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3301      	adds	r3, #1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <checkHitWall+0x120>)
 8003936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393a:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	f6ff af7d 	blt.w	8003840 <checkHitWall+0xc>
			}
		}
	}
	return 0;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	200011bc 	.word	0x200011bc
 8003958:	200001f0 	.word	0x200001f0

0800395c <checkHead>:
void checkHead()
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b085      	sub	sp, #20
 8003960:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 8003962:	f7ff feff 	bl	8003764 <checkOutOfValidRange>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(3);
 800396c:	2003      	movs	r0, #3
 800396e:	f7fd fde3 	bl	8001538 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003972:	e065      	b.n	8003a40 <checkHead+0xe4>
	}
	if (checkEatBody())
 8003974:	f7ff ff14 	bl	80037a0 <checkEatBody>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(2);
 800397e:	2002      	movs	r0, #2
 8003980:	f7fd fdda 	bl	8001538 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003984:	e05c      	b.n	8003a40 <checkHead+0xe4>
	}
	if (checkHitWall())
 8003986:	f7ff ff55 	bl	8003834 <checkHitWall>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <checkHead+0x3c>
	{
		// showGameover
		initOverMode(0);
 8003990:	2000      	movs	r0, #0
 8003992:	f7fd fdd1 	bl	8001538 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003996:	e053      	b.n	8003a40 <checkHead+0xe4>
	}
	if (checkEatFruit())
 8003998:	f7ff ff30 	bl	80037fc <checkEatFruit>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04e      	beq.n	8003a40 <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <checkHead+0xec>)
 80039a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039a8:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 80039aa:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <checkHead+0xf0>)
 80039ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039b0:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <checkHead+0xf4>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	3301      	adds	r3, #1
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <checkHead+0xf4>)
 80039ba:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <checkHead+0xf4>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	3b01      	subs	r3, #1
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <checkHead+0xf4>)
 80039c4:	69d2      	ldr	r2, [r2, #28]
 80039c6:	4922      	ldr	r1, [pc, #136]	; (8003a50 <checkHead+0xf4>)
 80039c8:	3305      	adds	r3, #5
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <checkHead+0xf4>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	3b01      	subs	r3, #1
 80039d6:	4a1e      	ldr	r2, [pc, #120]	; (8003a50 <checkHead+0xf4>)
 80039d8:	6a12      	ldr	r2, [r2, #32]
 80039da:	491d      	ldr	r1, [pc, #116]	; (8003a50 <checkHead+0xf4>)
 80039dc:	3305      	adds	r3, #5
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <checkHead+0xf4>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	3b01      	subs	r3, #1
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <checkHead+0xf4>)
 80039ec:	3305      	adds	r3, #5
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <checkHead+0xf4>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	3b01      	subs	r3, #1
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <checkHead+0xf4>)
 80039fe:	3305      	adds	r3, #5
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	b298      	uxth	r0, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b299      	uxth	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3309      	adds	r3, #9
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3309      	adds	r3, #9
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2400      	movs	r4, #0
 8003a22:	9400      	str	r4, [sp, #0]
 8003a24:	f7fe f84c 	bl	8001ac0 <lcd_Fill>
		flagEat = 1;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <checkHead+0xf8>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

		SCORE++;
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <checkHead+0xfc>)
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <checkHead+0xfc>)
 8003a38:	801a      	strh	r2, [r3, #0]
		printScore();
 8003a3a:	f7ff f925 	bl	8002c88 <printScore>
		return;
 8003a3e:	bf00      	nop
	}
}
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000094 	.word	0x20000094
 8003a4c:	20000098 	.word	0x20000098
 8003a50:	200001f0 	.word	0x200001f0
 8003a54:	2000009c 	.word	0x2000009c
 8003a58:	200001a6 	.word	0x200001a6

08003a5c <move>:

void move()
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <move+0x4c>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d81b      	bhi.n	8003aa0 <move+0x44>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <move+0x14>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a91 	.word	0x08003a91
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003a81 	.word	0x08003a81
 8003a7c:	08003a89 	.word	0x08003a89
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <move+0x4c>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4798      	blx	r3
		break;
 8003a86:	e00c      	b.n	8003aa2 <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <move+0x4c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4798      	blx	r3
		break;
 8003a8e:	e008      	b.n	8003aa2 <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <move+0x4c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4798      	blx	r3
		break;
 8003a96:	e004      	b.n	8003aa2 <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <move+0x4c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4798      	blx	r3
		break;
 8003a9e:	e000      	b.n	8003aa2 <move+0x46>
	default:
		break;
 8003aa0:	bf00      	nop
	}
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200001f0 	.word	0x200001f0

08003aac <wallInit>:

void wallInit()
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	e01f      	b.n	8003af8 <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 8003ab8:	491f      	ldr	r1, [pc, #124]	; (8003b38 <wallInit+0x8c>)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 8003aca:	491b      	ldr	r1, [pc, #108]	; (8003b38 <wallInit+0x8c>)
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 8003ade:	4916      	ldr	r1, [pc, #88]	; (8003b38 <wallInit+0x8c>)
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3308      	adds	r3, #8
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3301      	adds	r3, #1
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003afe:	dbdb      	blt.n	8003ab8 <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <wallInit+0x8c>)
 8003b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
	wallObject.vertical = 1;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <wallInit+0x8c>)
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	461a      	mov	r2, r3
 8003b16:	2301      	movs	r3, #1
 8003b18:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	wallObject.stopGenerateWallFlag = 0;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <wallInit+0x8c>)
 8003b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b22:	461a      	mov	r2, r3
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c2 3778 	str.w	r3, [r2, #1912]	; 0x778
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	200011bc 	.word	0x200011bc

08003b3c <snakeRun>:

void snakeRun()
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af02      	add	r7, sp, #8
	if (button_count[5])
 8003b42:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <snakeRun+0x100>)
 8003b44:	895b      	ldrh	r3, [r3, #10]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <snakeRun+0x1c>
	{
		(*snakeObject.GOUP)();
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <snakeRun+0x104>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <snakeRun+0x104>)
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8003b56:	e06e      	b.n	8003c36 <snakeRun+0xfa>
		if (button_count[13])
 8003b58:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <snakeRun+0x100>)
 8003b5a:	8b5b      	ldrh	r3, [r3, #26]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d006      	beq.n	8003b6e <snakeRun+0x32>
			(*snakeObject.GODOWN)();
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <snakeRun+0x104>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <snakeRun+0x104>)
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4798      	blx	r3
}
 8003b6c:	e063      	b.n	8003c36 <snakeRun+0xfa>
			if (button_count[10])
 8003b6e:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <snakeRun+0x100>)
 8003b70:	8a9b      	ldrh	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <snakeRun+0x48>
				(*snakeObject.GORIGHT)();
 8003b76:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <snakeRun+0x104>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4798      	blx	r3
				(*snakeObject.CHECKHEAD)();
 8003b7c:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <snakeRun+0x104>)
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4798      	blx	r3
}
 8003b82:	e058      	b.n	8003c36 <snakeRun+0xfa>
				if (button_count[8])
 8003b84:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <snakeRun+0x100>)
 8003b86:	8a1b      	ldrh	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d006      	beq.n	8003b9a <snakeRun+0x5e>
					(*snakeObject.GOLEFT)();
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <snakeRun+0x104>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <snakeRun+0x104>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4798      	blx	r3
}
 8003b98:	e04d      	b.n	8003c36 <snakeRun+0xfa>
					if (button_count[9])
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <snakeRun+0x100>)
 8003b9c:	8a5b      	ldrh	r3, [r3, #18]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d022      	beq.n	8003be8 <snakeRun+0xac>
						snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <snakeRun+0x104>)
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <snakeRun+0x104>)
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
						wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 8003bb6:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <snakeRun+0x108>)
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbc:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <snakeRun+0x108>)
 8003bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd2:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
						snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <snakeRun+0x104>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 ffa8 	bl	8005b30 <initStopGame>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <snakeRun+0x104>)
 8003be4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003be6:	e026      	b.n	8003c36 <snakeRun+0xfa>
						if (button_count[12])
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <snakeRun+0x100>)
 8003bea:	8b1b      	ldrh	r3, [r3, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01c      	beq.n	8003c2a <snakeRun+0xee>
							lcd_Clear(WHITE);
 8003bf0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003bf4:	f7fd ff32 	bl	8001a5c <lcd_Clear>
							xFruit = INT_MIN;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <snakeRun+0x10c>)
 8003bfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bfe:	601a      	str	r2, [r3, #0]
							yFruit = INT_MIN;
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <snakeRun+0x110>)
 8003c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c06:	601a      	str	r2, [r3, #0]
							snakeInit();
 8003c08:	f000 f824 	bl	8003c54 <snakeInit>
							wallInit();
 8003c0c:	f7ff ff4e 	bl	8003aac <wallInit>
							lcd_Fill(0, 0, 240, 70, RED);
 8003c10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2346      	movs	r3, #70	; 0x46
 8003c18:	22f0      	movs	r2, #240	; 0xf0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f7fd ff4f 	bl	8001ac0 <lcd_Fill>
							flagEat = 1;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <snakeRun+0x114>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
}
 8003c28:	e005      	b.n	8003c36 <snakeRun+0xfa>
							(*snakeObject.MOVE)();
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <snakeRun+0x104>)
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <snakeRun+0x104>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4798      	blx	r3
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	2000012c 	.word	0x2000012c
 8003c40:	200001f0 	.word	0x200001f0
 8003c44:	200011bc 	.word	0x200011bc
 8003c48:	20000094 	.word	0x20000094
 8003c4c:	20000098 	.word	0x20000098
 8003c50:	2000009c 	.word	0x2000009c

08003c54 <snakeInit>:

void snakeInit()
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af02      	add	r7, sp, #8
	srand(rst);
 8003c5a:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <snakeInit+0x11c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f006 f8dc 	bl	8009e1c <srand>
	rst++;
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <snakeInit+0x11c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <snakeInit+0x11c>)
 8003c6c:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <snakeInit+0x120>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 8003c74:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <snakeInit+0x124>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <snakeInit+0x124>)
 8003c7c:	2214      	movs	r2, #20
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 8003c80:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <snakeInit+0x124>)
 8003c82:	2246      	movs	r2, #70	; 0x46
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <snakeInit+0x124>)
 8003c88:	220a      	movs	r2, #10
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8003c8c:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <snakeInit+0x124>)
 8003c8e:	2246      	movs	r2, #70	; 0x46
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 8003c92:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <snakeInit+0x124>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <snakeInit+0x124>)
 8003c9a:	2246      	movs	r2, #70	; 0x46
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	e010      	b.n	8003cc6 <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 8003ca4:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <snakeInit+0x124>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3305      	adds	r3, #5
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 8003cb2:	4a31      	ldr	r2, [pc, #196]	; (8003d78 <snakeInit+0x124>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3305      	adds	r3, #5
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ccc:	dbea      	blt.n	8003ca4 <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <snakeInit+0x124>)
 8003cd0:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <snakeInit+0x128>)
 8003cd2:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <snakeInit+0x124>)
 8003cd6:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <snakeInit+0x12c>)
 8003cd8:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 8003cda:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <snakeInit+0x124>)
 8003cdc:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <snakeInit+0x130>)
 8003cde:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <snakeInit+0x124>)
 8003ce2:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <snakeInit+0x134>)
 8003ce4:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <snakeInit+0x124>)
 8003ce8:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <snakeInit+0x138>)
 8003cea:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <snakeInit+0x124>)
 8003cee:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <snakeInit+0x13c>)
 8003cf0:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <snakeInit+0x124>)
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <snakeInit+0x124>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	e02c      	b.n	8003d5e <snakeInit+0x10a>
	{
		if (i == 0)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <snakeInit+0xbc>
			drawHeadSnake();
 8003d0a:	f7ff f833 	bl	8002d74 <drawHeadSnake>
 8003d0e:	e023      	b.n	8003d58 <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <snakeInit+0x124>)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3305      	adds	r3, #5
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b298      	uxth	r0, r3
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <snakeInit+0x124>)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	3305      	adds	r3, #5
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <snakeInit+0x124>)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	3305      	adds	r3, #5
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3309      	adds	r3, #9
 8003d3c:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003d3e:	4c0e      	ldr	r4, [pc, #56]	; (8003d78 <snakeInit+0x124>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	3305      	adds	r3, #5
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4423      	add	r3, r4
 8003d48:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3309      	adds	r3, #9
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2400      	movs	r4, #0
 8003d52:	9400      	str	r4, [sp, #0]
 8003d54:	f7fd feb4 	bl	8001ac0 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	ddcf      	ble.n	8003d04 <snakeInit+0xb0>
	}
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200001ec 	.word	0x200001ec
 8003d74:	2000009c 	.word	0x2000009c
 8003d78:	200001f0 	.word	0x200001f0
 8003d7c:	08003401 	.word	0x08003401
 8003d80:	08002fbd 	.word	0x08002fbd
 8003d84:	08003295 	.word	0x08003295
 8003d88:	08003129 	.word	0x08003129
 8003d8c:	08003a5d 	.word	0x08003a5d
 8003d90:	0800395d 	.word	0x0800395d

08003d94 <generateFruit>:

void generateFruit()
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 8003d9a:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <generateFruit+0x22c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	f040 8109 	bne.w	8003fb6 <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 8003da8:	f006 f866 	bl	8009e78 <rand>
 8003dac:	4601      	mov	r1, r0
 8003dae:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <generateFruit+0x230>)
 8003db0:	fb83 2301 	smull	r2, r3, r3, r1
 8003db4:	109a      	asrs	r2, r3, #2
 8003db6:	17cb      	asrs	r3, r1, #31
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	1aca      	subs	r2, r1, r3
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b7e      	ldr	r3, [pc, #504]	; (8003fc8 <generateFruit+0x234>)
 8003dd0:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 8003dd2:	f006 f851 	bl	8009e78 <rand>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	4b7c      	ldr	r3, [pc, #496]	; (8003fcc <generateFruit+0x238>)
 8003dda:	fb83 2301 	smull	r2, r3, r3, r1
 8003dde:	10da      	asrs	r2, r3, #3
 8003de0:	17cb      	asrs	r3, r1, #31
 8003de2:	1ad2      	subs	r2, r2, r3
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	1aca      	subs	r2, r1, r3
 8003df0:	3207      	adds	r2, #7
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b74      	ldr	r3, [pc, #464]	; (8003fd0 <generateFruit+0x23c>)
 8003dfe:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	e021      	b.n	8003e4a <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 8003e06:	4a73      	ldr	r2, [pc, #460]	; (8003fd4 <generateFruit+0x240>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	3305      	adds	r3, #5
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <generateFruit+0x234>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d114      	bne.n	8003e44 <generateFruit+0xb0>
 8003e1a:	4a6e      	ldr	r2, [pc, #440]	; (8003fd4 <generateFruit+0x240>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3305      	adds	r3, #5
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <generateFruit+0x23c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10a      	bne.n	8003e44 <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 8003e2e:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <generateFruit+0x234>)
 8003e30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e34:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 8003e36:	4b66      	ldr	r3, [pc, #408]	; (8003fd0 <generateFruit+0x23c>)
 8003e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e3c:	601a      	str	r2, [r3, #0]
					remind = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
					break;
 8003e42:	e007      	b.n	8003e54 <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <generateFruit+0x240>)
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	dbd8      	blt.n	8003e06 <generateFruit+0x72>
				}
			}
			if (remind)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 80a9 	bne.w	8003fae <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e07f      	b.n	8003f62 <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 8003e62:	495d      	ldr	r1, [pc, #372]	; (8003fd8 <generateFruit+0x244>)
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3308      	adds	r3, #8
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d139      	bne.n	8003eec <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 8003e78:	4957      	ldr	r1, [pc, #348]	; (8003fd8 <generateFruit+0x244>)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3304      	adds	r3, #4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <generateFruit+0x23c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d01d      	beq.n	8003ece <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003e92:	4951      	ldr	r1, [pc, #324]	; (8003fd8 <generateFruit+0x244>)
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f103 020a 	add.w	r2, r3, #10
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <generateFruit+0x23c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d00e      	beq.n	8003ece <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003eb0:	4949      	ldr	r1, [pc, #292]	; (8003fd8 <generateFruit+0x244>)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1a3 020a 	sub.w	r2, r3, #10
 8003ec6:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <generateFruit+0x23c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d146      	bne.n	8003f5c <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 8003ece:	4942      	ldr	r1, [pc, #264]	; (8003fd8 <generateFruit+0x244>)
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <generateFruit+0x234>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d13a      	bne.n	8003f5c <generateFruit+0x1c8>
					{
						remind = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
						break;
 8003eea:	e043      	b.n	8003f74 <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 8003eec:	493a      	ldr	r1, [pc, #232]	; (8003fd8 <generateFruit+0x244>)
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <generateFruit+0x234>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d01b      	beq.n	8003f3c <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003f04:	4934      	ldr	r1, [pc, #208]	; (8003fd8 <generateFruit+0x244>)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f103 020a 	add.w	r2, r3, #10
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <generateFruit+0x234>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d00d      	beq.n	8003f3c <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003f20:	492d      	ldr	r1, [pc, #180]	; (8003fd8 <generateFruit+0x244>)
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1a3 020a 	sub.w	r2, r3, #10
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <generateFruit+0x234>)
 8003f36:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d10f      	bne.n	8003f5c <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8003f3c:	4926      	ldr	r1, [pc, #152]	; (8003fd8 <generateFruit+0x244>)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <generateFruit+0x23c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d102      	bne.n	8003f5c <generateFruit+0x1c8>
					{
						remind = 1;
 8003f56:	2301      	movs	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
						break;
 8003f5a:	e00b      	b.n	8003f74 <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <generateFruit+0x244>)
 8003f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f68:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	f6ff af77 	blt.w	8003e62 <generateFruit+0xce>
					}
				}
			}
			if (remind)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11b      	bne.n	8003fb2 <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <generateFruit+0x234>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b298      	uxth	r0, r3
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <generateFruit+0x23c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b299      	uxth	r1, r3
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <generateFruit+0x234>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3309      	adds	r3, #9
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <generateFruit+0x23c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3309      	adds	r3, #9
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003f9e:	9400      	str	r4, [sp, #0]
 8003fa0:	f7fd fd8e 	bl	8001ac0 <lcd_Fill>
			flagEat = 0;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <generateFruit+0x22c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
			break;
 8003faa:	bf00      	nop
		}
	}
}
 8003fac:	e003      	b.n	8003fb6 <generateFruit+0x222>
				continue;
 8003fae:	bf00      	nop
 8003fb0:	e6f8      	b.n	8003da4 <generateFruit+0x10>
				continue;
 8003fb2:	bf00      	nop
		{
 8003fb4:	e6f6      	b.n	8003da4 <generateFruit+0x10>
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000009c 	.word	0x2000009c
 8003fc4:	2aaaaaab 	.word	0x2aaaaaab
 8003fc8:	20000094 	.word	0x20000094
 8003fcc:	51eb851f 	.word	0x51eb851f
 8003fd0:	20000098 	.word	0x20000098
 8003fd4:	200001f0 	.word	0x200001f0
 8003fd8:	200011bc 	.word	0x200011bc

08003fdc <generateWall>:

void generateWall()
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b08d      	sub	sp, #52	; 0x34
 8003fe0:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 8003fe2:	4b9c      	ldr	r3, [pc, #624]	; (8004254 <generateWall+0x278>)
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003fec:	4a9a      	ldr	r2, [pc, #616]	; (8004258 <generateWall+0x27c>)
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f280 82de 	bge.w	80045b2 <generateWall+0x5d6>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 8003ff6:	4b97      	ldr	r3, [pc, #604]	; (8004254 <generateWall+0x278>)
 8003ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffc:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 82d7 	bne.w	80045b4 <generateWall+0x5d8>
	{
		while (1)
		{
			int remind = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 800400a:	f005 ff35 	bl	8009e78 <rand>
 800400e:	4602      	mov	r2, r0
 8004010:	4b92      	ldr	r3, [pc, #584]	; (800425c <generateWall+0x280>)
 8004012:	fb83 1302 	smull	r1, r3, r3, r2
 8004016:	1099      	asrs	r1, r3, #2
 8004018:	17d3      	asrs	r3, r2, #31
 800401a:	1acb      	subs	r3, r1, r3
 800401c:	2116      	movs	r1, #22
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 8004030:	f005 ff22 	bl	8009e78 <rand>
 8004034:	4601      	mov	r1, r0
 8004036:	4b8a      	ldr	r3, [pc, #552]	; (8004260 <generateWall+0x284>)
 8004038:	fb83 2301 	smull	r2, r3, r3, r1
 800403c:	440b      	add	r3, r1
 800403e:	111a      	asrs	r2, r3, #4
 8004040:	17cb      	asrs	r3, r1, #31
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	1aca      	subs	r2, r1, r3
 8004050:	3208      	adds	r2, #8
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	e0e8      	b.n	8004234 <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 8004062:	497c      	ldr	r1, [pc, #496]	; (8004254 <generateWall+0x278>)
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 8004074:	4977      	ldr	r1, [pc, #476]	; (8004254 <generateWall+0x278>)
 8004076:	6a3a      	ldr	r2, [r7, #32]
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3304      	adds	r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 8004088:	4b72      	ldr	r3, [pc, #456]	; (8004254 <generateWall+0x278>)
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004092:	2b01      	cmp	r3, #1
 8004094:	d166      	bne.n	8004164 <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 8004096:	496f      	ldr	r1, [pc, #444]	; (8004254 <generateWall+0x278>)
 8004098:	6a3a      	ldr	r2, [r7, #32]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3308      	adds	r3, #8
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d120      	bne.n	80040ee <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b14      	subs	r3, #20
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d013      	beq.n	80040de <generateWall+0x102>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3314      	adds	r3, #20
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d00e      	beq.n	80040de <generateWall+0x102>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b0a      	subs	r3, #10
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d009      	beq.n	80040de <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d004      	beq.n	80040de <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	f040 80a8 	bne.w	800422e <generateWall+0x252>
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	f040 80a3 	bne.w	800422e <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80040ec:	e0ab      	b.n	8004246 <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b0a      	subs	r3, #10
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d008      	beq.n	800410a <generateWall+0x12e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	330a      	adds	r3, #10
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d003      	beq.n	800410a <generateWall+0x12e>
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	429a      	cmp	r2, r3
 8004108:	d103      	bne.n	8004112 <generateWall+0x136>
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	429a      	cmp	r2, r3
 8004110:	d025      	beq.n	800415e <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	429a      	cmp	r2, r3
 800411a:	d008      	beq.n	800412e <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	330a      	adds	r3, #10
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	429a      	cmp	r2, r3
 8004124:	d003      	beq.n	800412e <generateWall+0x152>
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	429a      	cmp	r2, r3
 800412c:	d104      	bne.n	8004138 <generateWall+0x15c>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3b0a      	subs	r3, #10
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	429a      	cmp	r2, r3
 8004136:	d012      	beq.n	800415e <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d008      	beq.n	8004154 <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	330a      	adds	r3, #10
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	429a      	cmp	r2, r3
 800414a:	d003      	beq.n	8004154 <generateWall+0x178>
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	429a      	cmp	r2, r3
 8004152:	d16c      	bne.n	800422e <generateWall+0x252>
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	330a      	adds	r3, #10
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	d167      	bne.n	800422e <generateWall+0x252>
						{
							remind = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	e064      	b.n	800422e <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 8004164:	493b      	ldr	r1, [pc, #236]	; (8004254 <generateWall+0x278>)
 8004166:	6a3a      	ldr	r2, [r7, #32]
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	3308      	adds	r3, #8
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d13a      	bne.n	80041f0 <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3b0a      	subs	r3, #10
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	429a      	cmp	r2, r3
 8004182:	d008      	beq.n	8004196 <generateWall+0x1ba>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	330a      	adds	r3, #10
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	429a      	cmp	r2, r3
 800418c:	d003      	beq.n	8004196 <generateWall+0x1ba>
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	429a      	cmp	r2, r3
 8004194:	d103      	bne.n	800419e <generateWall+0x1c2>
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	429a      	cmp	r2, r3
 800419c:	d025      	beq.n	80041ea <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d008      	beq.n	80041ba <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	330a      	adds	r3, #10
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d003      	beq.n	80041ba <generateWall+0x1de>
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d104      	bne.n	80041c4 <generateWall+0x1e8>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b0a      	subs	r3, #10
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d012      	beq.n	80041ea <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d008      	beq.n	80041e0 <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	330a      	adds	r3, #10
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d003      	beq.n	80041e0 <generateWall+0x204>
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d126      	bne.n	800422e <generateWall+0x252>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	330a      	adds	r3, #10
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d121      	bne.n	800422e <generateWall+0x252>
						{
							remind = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80041ee:	e02a      	b.n	8004246 <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3b14      	subs	r3, #20
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d012      	beq.n	8004220 <generateWall+0x244>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3314      	adds	r3, #20
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	429a      	cmp	r2, r3
 8004202:	d00d      	beq.n	8004220 <generateWall+0x244>
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	330a      	adds	r3, #10
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	429a      	cmp	r2, r3
 800420c:	d008      	beq.n	8004220 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d003      	beq.n	8004220 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d106      	bne.n	800422e <generateWall+0x252>
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	d102      	bne.n	800422e <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 8004228:	2301      	movs	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 800422c:	e00b      	b.n	8004246 <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	3301      	adds	r3, #1
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <generateWall+0x278>)
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 800423e:	6a3a      	ldr	r2, [r7, #32]
 8004240:	429a      	cmp	r2, r3
 8004242:	f6ff af0e 	blt.w	8004062 <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 81a8 	bne.w	800459e <generateWall+0x5c2>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e049      	b.n	80042e8 <generateWall+0x30c>
 8004254:	200011bc 	.word	0x200011bc
 8004258:	200001a8 	.word	0x200001a8
 800425c:	2e8ba2e9 	.word	0x2e8ba2e9
 8004260:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 8004264:	4a60      	ldr	r2, [pc, #384]	; (80043e8 <generateWall+0x40c>)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3305      	adds	r3, #5
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 8004272:	4a5d      	ldr	r2, [pc, #372]	; (80043e8 <generateWall+0x40c>)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3305      	adds	r3, #5
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 8004280:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <generateWall+0x410>)
 8004282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004286:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800428a:	2b01      	cmp	r3, #1
 800428c:	d114      	bne.n	80042b8 <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d125      	bne.n	80042e2 <generateWall+0x306>
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d009      	beq.n	80042b2 <generateWall+0x2d6>
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3b0a      	subs	r3, #10
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d004      	beq.n	80042b2 <generateWall+0x2d6>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	330a      	adds	r3, #10
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d117      	bne.n	80042e2 <generateWall+0x306>
					{
						remind = 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80042b6:	e01c      	b.n	80042f2 <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d110      	bne.n	80042e2 <generateWall+0x306>
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d009      	beq.n	80042dc <generateWall+0x300>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	3b0a      	subs	r3, #10
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d004      	beq.n	80042dc <generateWall+0x300>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	330a      	adds	r3, #10
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d102      	bne.n	80042e2 <generateWall+0x306>
					{
						remind = 1;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80042e0:	e007      	b.n	80042f2 <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <generateWall+0x40c>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbb8      	blt.n	8004264 <generateWall+0x288>
					}
				}
			}
			if (remind)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 8154 	bne.w	80045a2 <generateWall+0x5c6>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <generateWall+0x40c>)
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d842      	bhi.n	8004388 <generateWall+0x3ac>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <generateWall+0x32c>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800436d 	.word	0x0800436d
 800430c:	08004351 	.word	0x08004351
 8004310:	08004335 	.word	0x08004335
 8004314:	08004319 	.word	0x08004319
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 8004318:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <generateWall+0x40c>)
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d134      	bne.n	800438c <generateWall+0x3b0>
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <generateWall+0x40c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	3b0a      	subs	r3, #10
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	429a      	cmp	r2, r3
 800432c:	d12e      	bne.n	800438c <generateWall+0x3b0>
					remind = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004332:	e02b      	b.n	800438c <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 8004334:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <generateWall+0x40c>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	429a      	cmp	r2, r3
 800433c:	d128      	bne.n	8004390 <generateWall+0x3b4>
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <generateWall+0x40c>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	330a      	adds	r3, #10
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d122      	bne.n	8004390 <generateWall+0x3b4>
					remind = 1;
 800434a:	2301      	movs	r3, #1
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800434e:	e01f      	b.n	8004390 <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <generateWall+0x40c>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	3b0a      	subs	r3, #10
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	429a      	cmp	r2, r3
 800435a:	d11b      	bne.n	8004394 <generateWall+0x3b8>
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <generateWall+0x40c>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d116      	bne.n	8004394 <generateWall+0x3b8>
					remind = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800436a:	e013      	b.n	8004394 <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <generateWall+0x40c>)
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	330a      	adds	r3, #10
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	d10f      	bne.n	8004398 <generateWall+0x3bc>
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <generateWall+0x40c>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	429a      	cmp	r2, r3
 8004380:	d10a      	bne.n	8004398 <generateWall+0x3bc>
					remind= 1;
 8004382:	2301      	movs	r3, #1
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004386:	e007      	b.n	8004398 <generateWall+0x3bc>
				default:
					break;
 8004388:	bf00      	nop
 800438a:	e006      	b.n	800439a <generateWall+0x3be>
				break;
 800438c:	bf00      	nop
 800438e:	e004      	b.n	800439a <generateWall+0x3be>
				break;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <generateWall+0x3be>
				break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <generateWall+0x3be>
				break;
 8004398:	bf00      	nop
			}
			if (remind)
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8102 	bne.w	80045a6 <generateWall+0x5ca>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <generateWall+0x410>)
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d123      	bne.n	80043f8 <generateWall+0x41c>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <generateWall+0x414>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d139      	bne.n	800442e <generateWall+0x452>
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <generateWall+0x418>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	f000 80f2 	beq.w	80045aa <generateWall+0x5ce>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f1a3 020a 	sub.w	r2, r3, #10
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <generateWall+0x418>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f000 80ea 	beq.w	80045aa <generateWall+0x5ce>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f103 020a 	add.w	r2, r3, #10
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <generateWall+0x418>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d124      	bne.n	800442e <generateWall+0x452>
					continue;
 80043e4:	e0e1      	b.n	80045aa <generateWall+0x5ce>
 80043e6:	bf00      	nop
 80043e8:	200001f0 	.word	0x200001f0
 80043ec:	200011bc 	.word	0x200011bc
 80043f0:	20000094 	.word	0x20000094
 80043f4:	20000098 	.word	0x20000098
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 80043f8:	4b70      	ldr	r3, [pc, #448]	; (80045bc <generateWall+0x5e0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d115      	bne.n	800442e <generateWall+0x452>
 8004402:	4b6f      	ldr	r3, [pc, #444]	; (80045c0 <generateWall+0x5e4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	429a      	cmp	r2, r3
 800440a:	f000 80d0 	beq.w	80045ae <generateWall+0x5d2>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f1a3 020a 	sub.w	r2, r3, #10
 8004414:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <generateWall+0x5e4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	f000 80c8 	beq.w	80045ae <generateWall+0x5d2>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f103 020a 	add.w	r2, r3, #10
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <generateWall+0x5e4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	f000 80c0 	beq.w	80045ae <generateWall+0x5d2>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <generateWall+0x5e8>)
 8004430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004434:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004438:	4962      	ldr	r1, [pc, #392]	; (80045c4 <generateWall+0x5e8>)
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 8004448:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <generateWall+0x5e8>)
 800444a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444e:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004452:	495c      	ldr	r1, [pc, #368]	; (80045c4 <generateWall+0x5e8>)
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3304      	adds	r3, #4
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	b298      	uxth	r0, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	b299      	uxth	r1, r3
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	b29b      	uxth	r3, r3
 8004470:	3309      	adds	r3, #9
 8004472:	b29a      	uxth	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b29b      	uxth	r3, r3
 8004478:	3309      	adds	r3, #9
 800447a:	b29b      	uxth	r3, r3
 800447c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004480:	9400      	str	r4, [sp, #0]
 8004482:	f7fd fb1d 	bl	8001ac0 <lcd_Fill>
			if (wallObject.vertical == 1)
 8004486:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <generateWall+0x5e8>)
 8004488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448c:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004490:	2b01      	cmp	r3, #1
 8004492:	d134      	bne.n	80044fe <generateWall+0x522>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	b298      	uxth	r0, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	b29b      	uxth	r3, r3
 800449c:	330a      	adds	r3, #10
 800449e:	b299      	uxth	r1, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3309      	adds	r3, #9
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3313      	adds	r3, #19
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80044b4:	9400      	str	r4, [sp, #0]
 80044b6:	f7fd fb03 	bl	8001ac0 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	b298      	uxth	r0, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b0a      	subs	r3, #10
 80044c4:	b299      	uxth	r1, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3309      	adds	r3, #9
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80044da:	9400      	str	r4, [sp, #0]
 80044dc:	f7fd faf0 	bl	8001ac0 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 80044e0:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <generateWall+0x5e8>)
 80044e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e6:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80044ea:	4936      	ldr	r1, [pc, #216]	; (80045c4 <generateWall+0x5e8>)
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	3308      	adds	r3, #8
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e033      	b.n	8004566 <generateWall+0x58a>
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	b29b      	uxth	r3, r3
 8004502:	330a      	adds	r3, #10
 8004504:	b298      	uxth	r0, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	b299      	uxth	r1, r3
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	b29b      	uxth	r3, r3
 800450e:	3313      	adds	r3, #19
 8004510:	b29a      	uxth	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	b29b      	uxth	r3, r3
 8004516:	3309      	adds	r3, #9
 8004518:	b29b      	uxth	r3, r3
 800451a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800451e:	9400      	str	r4, [sp, #0]
 8004520:	f7fd face 	bl	8001ac0 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b0a      	subs	r3, #10
 800452a:	b298      	uxth	r0, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	b299      	uxth	r1, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	b29b      	uxth	r3, r3
 800453c:	3309      	adds	r3, #9
 800453e:	b29b      	uxth	r3, r3
 8004540:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004544:	9400      	str	r4, [sp, #0]
 8004546:	f7fd fabb 	bl	8001ac0 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <generateWall+0x5e8>)
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004554:	491b      	ldr	r1, [pc, #108]	; (80045c4 <generateWall+0x5e8>)
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3308      	adds	r3, #8
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <generateWall+0x5e8>)
 8004568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456c:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004570:	3301      	adds	r3, #1
 8004572:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <generateWall+0x5e8>)
 8004574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004578:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			wallObject.vertical = !wallObject.vertical;
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <generateWall+0x5e8>)
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <generateWall+0x5e8>)
 8004594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004598:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
			break;
 800459c:	e00a      	b.n	80045b4 <generateWall+0x5d8>
				continue;
 800459e:	bf00      	nop
 80045a0:	e531      	b.n	8004006 <generateWall+0x2a>
				continue;
 80045a2:	bf00      	nop
 80045a4:	e52f      	b.n	8004006 <generateWall+0x2a>
				continue;
 80045a6:	bf00      	nop
 80045a8:	e52d      	b.n	8004006 <generateWall+0x2a>
					continue;
 80045aa:	bf00      	nop
 80045ac:	e52b      	b.n	8004006 <generateWall+0x2a>
					continue;
 80045ae:	bf00      	nop
		{
 80045b0:	e529      	b.n	8004006 <generateWall+0x2a>
		return;
 80045b2:	bf00      	nop
		}
	}
}
 80045b4:	372c      	adds	r7, #44	; 0x2c
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000098 	.word	0x20000098
 80045c0:	20000094 	.word	0x20000094
 80045c4:	200011bc 	.word	0x200011bc

080045c8 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <timer_init+0x10>)
 80045ce:	f003 fe71 	bl	80082b4 <HAL_TIM_Base_Start_IT>
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200029c0 	.word	0x200029c0

080045dc <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <setTimerSnakeRun+0x2c>)
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <setTimerSnakeRun+0x2c>)
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <setTimerSnakeRun+0x30>)
 80045f2:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <setTimerSnakeRun+0x34>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	801a      	strh	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20002942 	.word	0x20002942
 800460c:	20002940 	.word	0x20002940
 8004610:	2000293e 	.word	0x2000293e

08004614 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <setTimerTiming+0x34>)
 800462a:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <setTimerTiming+0x34>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a06      	ldr	r2, [pc, #24]	; (800464c <setTimerTiming+0x38>)
 8004632:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <setTimerTiming+0x3c>)
 8004636:	2200      	movs	r2, #0
 8004638:	801a      	strh	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2000294c 	.word	0x2000294c
 800464c:	20002948 	.word	0x20002948
 8004650:	20002944 	.word	0x20002944

08004654 <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <setTimerDeTime+0x2c>)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <setTimerDeTime+0x2c>)
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <setTimerDeTime+0x30>)
 800466a:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <setTimerDeTime+0x34>)
 800466e:	2200      	movs	r2, #0
 8004670:	801a      	strh	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20002954 	.word	0x20002954
 8004684:	20002952 	.word	0x20002952
 8004688:	20002950 	.word	0x20002950

0800468c <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <setTimerGenerateWall+0x2c>)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <setTimerGenerateWall+0x2c>)
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <setTimerGenerateWall+0x30>)
 80046a2:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <setTimerGenerateWall+0x34>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	801a      	strh	r2, [r3, #0]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	2000295a 	.word	0x2000295a
 80046bc:	20002958 	.word	0x20002958
 80046c0:	20002956 	.word	0x20002956

080046c4 <setTimerUart>:

void setTimerUart(uint16_t duration)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	80fb      	strh	r3, [r7, #6]
	timerForUart_MUL= duration/ TIMER_CYCLE_2;
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <setTimerUart+0x2c>)
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	8013      	strh	r3, [r2, #0]
	timerForUart= timerForUart_MUL;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <setTimerUart+0x2c>)
 80046d6:	881a      	ldrh	r2, [r3, #0]
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <setTimerUart+0x30>)
 80046da:	801a      	strh	r2, [r3, #0]
	flagForUart= 0;
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <setTimerUart+0x34>)
 80046de:	2200      	movs	r2, #0
 80046e0:	801a      	strh	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20002960 	.word	0x20002960
 80046f4:	2000295e 	.word	0x2000295e
 80046f8:	2000295c 	.word	0x2000295c

080046fc <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <setTimerButton+0x2c>)
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <setTimerButton+0x2c>)
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <setTimerButton+0x30>)
 8004712:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <setTimerButton+0x34>)
 8004716:	2200      	movs	r2, #0
 8004718:	801a      	strh	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	2000293c 	.word	0x2000293c
 800472c:	2000293a 	.word	0x2000293a
 8004730:	20002938 	.word	0x20002938

08004734 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d176      	bne.n	8004834 <HAL_TIM_PeriodElapsedCallback+0x100>
		if(timerForSnakeRun > 0)
 8004746:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timerForSnakeRun--;
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004758:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flagForSnakeRun = 1;
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004764:	2201      	movs	r2, #1
 8004766:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 8004768:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800476a:	881a      	ldrh	r2, [r3, #0]
 800476c:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800476e:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timerForButton--;
 8004778:	4b33      	ldr	r3, [pc, #204]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	4b31      	ldr	r3, [pc, #196]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004782:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 8004784:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flagForButton= 1;
 800478c:	4b2f      	ldr	r3, [pc, #188]	; (800484c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800478e:	2201      	movs	r2, #1
 8004790:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004794:	881a      	ldrh	r2, [r3, #0]
 8004796:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004798:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			timerForTiming--;
 80047a2:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80047aa:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				flagForTiming = 1;
 80047b4:	4b28      	ldr	r3, [pc, #160]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_PeriodElapsedCallback+0xa8>
		{
			timerForDeTime--;
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	4b24      	ldr	r3, [pc, #144]	; (800485c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80047cc:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 80047ce:	4b23      	ldr	r3, [pc, #140]	; (800485c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				flagForDeTime = 1;
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80047d8:	2201      	movs	r2, #1
 80047da:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d010      	beq.n	8004806 <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			timerForGenerateWall--;
 80047e4:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80047ee:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <HAL_TIM_PeriodElapsedCallback+0xd2>
			{
				flagForGenerateWall= 1;
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 80047fe:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004804:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForUart > 0)
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_TIM_PeriodElapsedCallback+0xfc>
		{
			timerForUart--;
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004818:	801a      	strh	r2, [r3, #0]
			if (timerForUart <= 0)
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_PeriodElapsedCallback+0xfc>
			{
				flagForUart= 1;
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004824:	2201      	movs	r2, #1
 8004826:	801a      	strh	r2, [r3, #0]
				timerForUart= timerForUart_MUL;
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800482e:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8004830:	f7fd fd9a 	bl	8002368 <led7_Scan>
	}
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20002940 	.word	0x20002940
 8004840:	2000293e 	.word	0x2000293e
 8004844:	20002942 	.word	0x20002942
 8004848:	2000293a 	.word	0x2000293a
 800484c:	20002938 	.word	0x20002938
 8004850:	2000293c 	.word	0x2000293c
 8004854:	20002948 	.word	0x20002948
 8004858:	20002944 	.word	0x20002944
 800485c:	20002952 	.word	0x20002952
 8004860:	20002950 	.word	0x20002950
 8004864:	20002958 	.word	0x20002958
 8004868:	20002956 	.word	0x20002956
 800486c:	2000295a 	.word	0x2000295a
 8004870:	2000295e 	.word	0x2000295e
 8004874:	2000295c 	.word	0x2000295c
 8004878:	20002960 	.word	0x20002960

0800487c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <MX_SPI1_Init+0x64>)
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <MX_SPI1_Init+0x68>)
 8004884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004886:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <MX_SPI1_Init+0x64>)
 8004888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800488c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <MX_SPI1_Init+0x64>)
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004894:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <MX_SPI1_Init+0x64>)
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <MX_SPI1_Init+0x64>)
 800489c:	2200      	movs	r2, #0
 800489e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048bc:	2200      	movs	r2, #0
 80048be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048c8:	220a      	movs	r2, #10
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048cc:	4804      	ldr	r0, [pc, #16]	; (80048e0 <MX_SPI1_Init+0x64>)
 80048ce:	f002 feb1 	bl	8007634 <HAL_SPI_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80048d8:	f7fd ff70 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20002964 	.word	0x20002964
 80048e4:	40013000 	.word	0x40013000

080048e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a19      	ldr	r2, [pc, #100]	; (800496c <HAL_SPI_MspInit+0x84>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d12b      	bne.n	8004962 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_SPI_MspInit+0x88>)
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <HAL_SPI_MspInit+0x88>)
 8004914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004918:	6453      	str	r3, [r2, #68]	; 0x44
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <HAL_SPI_MspInit+0x88>)
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_SPI_MspInit+0x88>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	4a10      	ldr	r2, [pc, #64]	; (8004970 <HAL_SPI_MspInit+0x88>)
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	6313      	str	r3, [r2, #48]	; 0x30
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <HAL_SPI_MspInit+0x88>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004942:	2338      	movs	r3, #56	; 0x38
 8004944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004946:	2302      	movs	r3, #2
 8004948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494e:	2303      	movs	r3, #3
 8004950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004952:	2305      	movs	r3, #5
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	4805      	ldr	r0, [pc, #20]	; (8004974 <HAL_SPI_MspInit+0x8c>)
 800495e:	f002 f81b 	bl	8006998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004962:	bf00      	nop
 8004964:	3728      	adds	r7, #40	; 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40013000 	.word	0x40013000
 8004970:	40023800 	.word	0x40023800
 8004974:	40020400 	.word	0x40020400

08004978 <startUI>:
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"
#include "uart.h"

void startUI(){
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b093      	sub	sp, #76	; 0x4c
 800497c:	af04      	add	r7, sp, #16
	char str1[50] = "";
 800497e:	2300      	movs	r3, #0
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	222e      	movs	r2, #46	; 0x2e
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f005 fa3f 	bl	8009e0c <memset>

	lcd_Clear(BLACK);
 800498e:	2000      	movs	r0, #0
 8004990:	f7fd f864 	bl	8001a5c <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8004994:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <startUI+0xe8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b298      	uxth	r0, r3
 800499a:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <startUI+0xec>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	b299      	uxth	r1, r3
 80049a0:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <startUI+0xf0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <startUI+0xf4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	4c30      	ldr	r4, [pc, #192]	; (8004a70 <startUI+0xf8>)
 80049ae:	9400      	str	r4, [sp, #0]
 80049b0:	f7fd fa5e 	bl	8001e70 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80049b4:	2300      	movs	r3, #0
 80049b6:	9302      	str	r3, [sp, #8]
 80049b8:	2318      	movs	r3, #24
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	f248 4330 	movw	r3, #33840	; 0x8430
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <startUI+0xfc>)
 80049c8:	2137      	movs	r1, #55	; 0x37
 80049ca:	203c      	movs	r0, #60	; 0x3c
 80049cc:	f7fd fc2a 	bl	8002224 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 80049d0:	2300      	movs	r3, #0
 80049d2:	9302      	str	r3, [sp, #8]
 80049d4:	2318      	movs	r3, #24
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	f248 4330 	movw	r3, #33840	; 0x8430
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e2:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <startUI+0x100>)
 80049e4:	2164      	movs	r1, #100	; 0x64
 80049e6:	2028      	movs	r0, #40	; 0x28
 80049e8:	f7fd fc1c 	bl	8002224 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80049ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	23b4      	movs	r3, #180	; 0xb4
 80049f4:	22b4      	movs	r2, #180	; 0xb4
 80049f6:	2196      	movs	r1, #150	; 0x96
 80049f8:	203c      	movs	r0, #60	; 0x3c
 80049fa:	f7fd f932 	bl	8001c62 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <startUI+0x104>)
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd fee0 	bl	80027c8 <convert2str>
 8004a08:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f005 faa4 	bl	8009f5c <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8004a14:	463a      	mov	r2, r7
 8004a16:	2301      	movs	r3, #1
 8004a18:	9302      	str	r3, [sp, #8]
 8004a1a:	2318      	movs	r3, #24
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a28:	2198      	movs	r1, #152	; 0x98
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fd fc5e 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8004a30:	2300      	movs	r3, #0
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	2318      	movs	r3, #24
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	f248 4330 	movw	r3, #33840	; 0x8430
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a42:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <startUI+0x108>)
 8004a44:	21e6      	movs	r1, #230	; 0xe6
 8004a46:	2050      	movs	r0, #80	; 0x50
 8004a48:	f7fd fbec 	bl	8002224 <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2100      	movs	r1, #0
 8004a52:	2000      	movs	r0, #0
 8004a54:	f001 fb12 	bl	800607c <show7seg>
}
 8004a58:	bf00      	nop
 8004a5a:	373c      	adds	r7, #60	; 0x3c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd90      	pop	{r4, r7, pc}
 8004a60:	20000074 	.word	0x20000074
 8004a64:	20000078 	.word	0x20000078
 8004a68:	2000007c 	.word	0x2000007c
 8004a6c:	20000080 	.word	0x20000080
 8004a70:	0800e7d0 	.word	0x0800e7d0
 8004a74:	0800b534 	.word	0x0800b534
 8004a78:	0800b544 	.word	0x0800b544
 8004a7c:	200001a4 	.word	0x200001a4
 8004a80:	0800b554 	.word	0x0800b554

08004a84 <eraseArrow>:

void eraseArrow()
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f240 134b 	movw	r3, #331	; 0x14b
 8004a92:	22dd      	movs	r2, #221	; 0xdd
 8004a94:	21be      	movs	r1, #190	; 0xbe
 8004a96:	20b4      	movs	r0, #180	; 0xb4
 8004a98:	f7fd f812 	bl	8001ac0 <lcd_Fill>
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <drawArrow>:

void drawArrow()
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 8004aaa:	f7ff ffeb 	bl	8004a84 <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 8004aae:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <drawArrow+0x98>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	b298      	uxth	r0, r3
 8004ab4:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <drawArrow+0x9c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b299      	uxth	r1, r3
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <drawArrow+0xa0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <drawArrow+0xa4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004aca:	9400      	str	r4, [sp, #0]
 8004acc:	f7fd f845 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <drawArrow+0xa0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	b298      	uxth	r0, r3
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <drawArrow+0xa4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b299      	uxth	r1, r3
 8004adc:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <drawArrow+0x98>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	b29c      	uxth	r4, r3
 8004ae2:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <drawArrow+0xa4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <drawArrow+0x9c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004afa:	9200      	str	r2, [sp, #0]
 8004afc:	4622      	mov	r2, r4
 8004afe:	f7fd f82c 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <drawArrow+0x98>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b298      	uxth	r0, r3
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <drawArrow+0x9c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	b299      	uxth	r1, r3
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <drawArrow+0x98>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29c      	uxth	r4, r3
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <drawArrow+0xa4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <drawArrow+0x9c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b2c:	9200      	str	r2, [sp, #0]
 8004b2e:	4622      	mov	r2, r4
 8004b30:	f7fd f813 	bl	8001b5a <lcd_DrawLine>
}
 8004b34:	bf00      	nop
 8004b36:	3704      	adds	r7, #4
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	20000008 	.word	0x20000008
 8004b40:	20000010 	.word	0x20000010
 8004b44:	20000004 	.word	0x20000004
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <arrowInPickMode>:

void arrowInPickMode()
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8004b52:	4b99      	ldr	r3, [pc, #612]	; (8004db8 <arrowInPickMode+0x26c>)
 8004b54:	88db      	ldrh	r3, [r3, #6]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d117      	bne.n	8004b8a <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 8004b5a:	4b98      	ldr	r3, [pc, #608]	; (8004dbc <arrowInPickMode+0x270>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8004b60:	4b97      	ldr	r3, [pc, #604]	; (8004dc0 <arrowInPickMode+0x274>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d009      	beq.n	8004b7c <arrowInPickMode+0x30>
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	dc11      	bgt.n	8004b90 <arrowInPickMode+0x44>
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d00e      	beq.n	8004b8e <arrowInPickMode+0x42>
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d10d      	bne.n	8004b90 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 8004b74:	4b92      	ldr	r3, [pc, #584]	; (8004dc0 <arrowInPickMode+0x274>)
 8004b76:	2203      	movs	r2, #3
 8004b78:	601a      	str	r2, [r3, #0]
			break;
 8004b7a:	e009      	b.n	8004b90 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8004b7c:	4b90      	ldr	r3, [pc, #576]	; (8004dc0 <arrowInPickMode+0x274>)
 8004b7e:	2204      	movs	r2, #4
 8004b80:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 8004b82:	4b90      	ldr	r3, [pc, #576]	; (8004dc4 <arrowInPickMode+0x278>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
			break;
 8004b88:	e002      	b.n	8004b90 <arrowInPickMode+0x44>
		}

	}
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <arrowInPickMode+0x44>
			break;
 8004b8e:	bf00      	nop
	if(button_count[7] == 1)
 8004b90:	4b89      	ldr	r3, [pc, #548]	; (8004db8 <arrowInPickMode+0x26c>)
 8004b92:	89db      	ldrh	r3, [r3, #14]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d118      	bne.n	8004bca <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 8004b98:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <arrowInPickMode+0x270>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 8004b9e:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <arrowInPickMode+0x274>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d013      	beq.n	8004bce <arrowInPickMode+0x82>
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	dc12      	bgt.n	8004bd0 <arrowInPickMode+0x84>
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d002      	beq.n	8004bb4 <arrowInPickMode+0x68>
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d007      	beq.n	8004bc2 <arrowInPickMode+0x76>
 8004bb2:	e00d      	b.n	8004bd0 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 8004bb4:	4b82      	ldr	r3, [pc, #520]	; (8004dc0 <arrowInPickMode+0x274>)
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 8004bba:	4b82      	ldr	r3, [pc, #520]	; (8004dc4 <arrowInPickMode+0x278>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
			break;
 8004bc0:	e006      	b.n	8004bd0 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <arrowInPickMode+0x274>)
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	601a      	str	r2, [r3, #0]
			break;
 8004bc8:	e002      	b.n	8004bd0 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <arrowInPickMode+0x84>
			break;
 8004bce:	bf00      	nop
	if(flagChange == 1)
 8004bd0:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <arrowInPickMode+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 814d 	bne.w	8004e74 <arrowInPickMode+0x328>
	{
		switch (arrowMode)
 8004bda:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <arrowInPickMode+0x274>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	f000 80fc 	beq.w	8004ddc <arrowInPickMode+0x290>
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	f300 8142 	bgt.w	8004e6e <arrowInPickMode+0x322>
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d002      	beq.n	8004bf4 <arrowInPickMode+0xa8>
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d04f      	beq.n	8004c92 <arrowInPickMode+0x146>
 8004bf2:	e13c      	b.n	8004e6e <arrowInPickMode+0x322>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 8004bf4:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <arrowInPickMode+0x27c>)
 8004bf6:	22d2      	movs	r2, #210	; 0xd2
 8004bf8:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 8004bfa:	4b74      	ldr	r3, [pc, #464]	; (8004dcc <arrowInPickMode+0x280>)
 8004bfc:	22be      	movs	r2, #190	; 0xbe
 8004bfe:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004c08:	22f0      	movs	r2, #240	; 0xf0
 8004c0a:	21b4      	movs	r1, #180	; 0xb4
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fc ff57 	bl	8001ac0 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004c12:	2300      	movs	r3, #0
 8004c14:	9302      	str	r3, [sp, #8]
 8004c16:	2318      	movs	r3, #24
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c24:	4a6a      	ldr	r2, [pc, #424]	; (8004dd0 <arrowInPickMode+0x284>)
 8004c26:	21c8      	movs	r1, #200	; 0xc8
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7fd fafb 	bl	8002224 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	2318      	movs	r3, #24
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f248 4330 	movw	r3, #33840	; 0x8430
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c40:	4a64      	ldr	r2, [pc, #400]	; (8004dd4 <arrowInPickMode+0x288>)
 8004c42:	21fa      	movs	r1, #250	; 0xfa
 8004c44:	200a      	movs	r0, #10
 8004c46:	f7fd faed 	bl	8002224 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004c54:	2282      	movs	r2, #130	; 0x82
 8004c56:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004c5a:	206e      	movs	r0, #110	; 0x6e
 8004c5c:	f7fc ff7d 	bl	8001b5a <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004c6a:	2278      	movs	r2, #120	; 0x78
 8004c6c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004c70:	206e      	movs	r0, #110	; 0x6e
 8004c72:	f7fc ff72 	bl	8001b5a <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004c80:	2282      	movs	r2, #130	; 0x82
 8004c82:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004c86:	2078      	movs	r0, #120	; 0x78
 8004c88:	f7fc ff67 	bl	8001b5a <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8004c8c:	f7ff ff0a 	bl	8004aa4 <drawArrow>
			break;
 8004c90:	e0ed      	b.n	8004e6e <arrowInPickMode+0x322>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004c9a:	22f0      	movs	r2, #240	; 0xf0
 8004c9c:	21b4      	movs	r1, #180	; 0xb4
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fc ff0e 	bl	8001ac0 <lcd_Fill>
			if(flagUpDOwn == 0)
 8004ca4:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <arrowInPickMode+0x278>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13d      	bne.n	8004d28 <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 8004cac:	4b46      	ldr	r3, [pc, #280]	; (8004dc8 <arrowInPickMode+0x27c>)
 8004cae:	22d2      	movs	r2, #210	; 0xd2
 8004cb0:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 8004cb2:	4b46      	ldr	r3, [pc, #280]	; (8004dcc <arrowInPickMode+0x280>)
 8004cb4:	22be      	movs	r2, #190	; 0xbe
 8004cb6:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9302      	str	r3, [sp, #8]
 8004cbc:	2318      	movs	r3, #24
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	f248 4330 	movw	r3, #33840	; 0x8430
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004cca:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <arrowInPickMode+0x288>)
 8004ccc:	21c8      	movs	r1, #200	; 0xc8
 8004cce:	200a      	movs	r0, #10
 8004cd0:	f7fd faa8 	bl	8002224 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	2318      	movs	r3, #24
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	f248 4330 	movw	r3, #33840	; 0x8430
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ce6:	4a3c      	ldr	r2, [pc, #240]	; (8004dd8 <arrowInPickMode+0x28c>)
 8004ce8:	21fa      	movs	r1, #250	; 0xfa
 8004cea:	200a      	movs	r0, #10
 8004cec:	f7fd fa9a 	bl	8002224 <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	23be      	movs	r3, #190	; 0xbe
 8004cf8:	2282      	movs	r2, #130	; 0x82
 8004cfa:	21be      	movs	r1, #190	; 0xbe
 8004cfc:	206e      	movs	r0, #110	; 0x6e
 8004cfe:	f7fc ff2c 	bl	8001b5a <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	23b4      	movs	r3, #180	; 0xb4
 8004d0a:	2278      	movs	r2, #120	; 0x78
 8004d0c:	21be      	movs	r1, #190	; 0xbe
 8004d0e:	206e      	movs	r0, #110	; 0x6e
 8004d10:	f7fc ff23 	bl	8001b5a <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	23be      	movs	r3, #190	; 0xbe
 8004d1c:	2282      	movs	r2, #130	; 0x82
 8004d1e:	21b4      	movs	r1, #180	; 0xb4
 8004d20:	2078      	movs	r0, #120	; 0x78
 8004d22:	f7fc ff1a 	bl	8001b5a <lcd_DrawLine>
 8004d26:	e043      	b.n	8004db0 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 8004d28:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <arrowInPickMode+0x27c>)
 8004d2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d2e:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8004d30:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <arrowInPickMode+0x280>)
 8004d32:	22f0      	movs	r2, #240	; 0xf0
 8004d34:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8004d36:	2300      	movs	r3, #0
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	2318      	movs	r3, #24
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d48:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <arrowInPickMode+0x284>)
 8004d4a:	21c8      	movs	r1, #200	; 0xc8
 8004d4c:	200a      	movs	r0, #10
 8004d4e:	f7fd fa69 	bl	8002224 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8004d52:	2300      	movs	r3, #0
 8004d54:	9302      	str	r3, [sp, #8]
 8004d56:	2318      	movs	r3, #24
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	f248 4330 	movw	r3, #33840	; 0x8430
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <arrowInPickMode+0x288>)
 8004d66:	21fa      	movs	r1, #250	; 0xfa
 8004d68:	200a      	movs	r0, #10
 8004d6a:	f7fd fa5b 	bl	8002224 <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d78:	2282      	movs	r2, #130	; 0x82
 8004d7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004d7e:	206e      	movs	r0, #110	; 0x6e
 8004d80:	f7fc feeb 	bl	8001b5a <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004d8e:	2278      	movs	r2, #120	; 0x78
 8004d90:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004d94:	206e      	movs	r0, #110	; 0x6e
 8004d96:	f7fc fee0 	bl	8001b5a <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004da4:	2282      	movs	r2, #130	; 0x82
 8004da6:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004daa:	2078      	movs	r0, #120	; 0x78
 8004dac:	f7fc fed5 	bl	8001b5a <lcd_DrawLine>
			}

			drawArrow();
 8004db0:	f7ff fe78 	bl	8004aa4 <drawArrow>
			break;
 8004db4:	e05b      	b.n	8004e6e <arrowInPickMode+0x322>
 8004db6:	bf00      	nop
 8004db8:	2000012c 	.word	0x2000012c
 8004dbc:	200001b4 	.word	0x200001b4
 8004dc0:	20000014 	.word	0x20000014
 8004dc4:	200001b0 	.word	0x200001b0
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	20000010 	.word	0x20000010
 8004dd0:	0800b55c 	.word	0x0800b55c
 8004dd4:	0800b56c 	.word	0x0800b56c
 8004dd8:	0800b57c 	.word	0x0800b57c
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <arrowInPickMode+0x330>)
 8004dde:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004de2:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <arrowInPickMode+0x334>)
 8004de6:	22f0      	movs	r2, #240	; 0xf0
 8004de8:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004df2:	22f0      	movs	r2, #240	; 0xf0
 8004df4:	21b4      	movs	r1, #180	; 0xb4
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7fc fe62 	bl	8001ac0 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	2318      	movs	r3, #24
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <arrowInPickMode+0x338>)
 8004e10:	21c8      	movs	r1, #200	; 0xc8
 8004e12:	200a      	movs	r0, #10
 8004e14:	f7fd fa06 	bl	8002224 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	2318      	movs	r3, #24
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <arrowInPickMode+0x33c>)
 8004e2c:	21fa      	movs	r1, #250	; 0xfa
 8004e2e:	200a      	movs	r0, #10
 8004e30:	f7fd f9f8 	bl	8002224 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 8004e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	23be      	movs	r3, #190	; 0xbe
 8004e3c:	2282      	movs	r2, #130	; 0x82
 8004e3e:	21be      	movs	r1, #190	; 0xbe
 8004e40:	206e      	movs	r0, #110	; 0x6e
 8004e42:	f7fc fe8a 	bl	8001b5a <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 8004e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	23b4      	movs	r3, #180	; 0xb4
 8004e4e:	2278      	movs	r2, #120	; 0x78
 8004e50:	21be      	movs	r1, #190	; 0xbe
 8004e52:	206e      	movs	r0, #110	; 0x6e
 8004e54:	f7fc fe81 	bl	8001b5a <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 8004e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	23be      	movs	r3, #190	; 0xbe
 8004e60:	2282      	movs	r2, #130	; 0x82
 8004e62:	21b4      	movs	r1, #180	; 0xb4
 8004e64:	2078      	movs	r0, #120	; 0x78
 8004e66:	f7fc fe78 	bl	8001b5a <lcd_DrawLine>

			// draw arrow
			drawArrow();
 8004e6a:	f7ff fe1b 	bl	8004aa4 <drawArrow>
		}
		flagChange = 0;
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <arrowInPickMode+0x340>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
	}
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	20000010 	.word	0x20000010
 8004e84:	0800b56c 	.word	0x0800b56c
 8004e88:	0800b57c 	.word	0x0800b57c
 8004e8c:	200001b4 	.word	0x200001b4

08004e90 <pickMode>:

void pickMode(uint16_t id){
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b095      	sub	sp, #84	; 0x54
 8004e94:	af04      	add	r7, sp, #16
 8004e96:	4603      	mov	r3, r0
 8004e98:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fc fdde 	bl	8001a5c <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8004ea0:	4b4e      	ldr	r3, [pc, #312]	; (8004fdc <pickMode+0x14c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b298      	uxth	r0, r3
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <pickMode+0x150>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	b299      	uxth	r1, r3
 8004eac:	4b4d      	ldr	r3, [pc, #308]	; (8004fe4 <pickMode+0x154>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <pickMode+0x158>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4c4c      	ldr	r4, [pc, #304]	; (8004fec <pickMode+0x15c>)
 8004eba:	9400      	str	r4, [sp, #0]
 8004ebc:	f7fc ffd8 	bl	8001e70 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	2318      	movs	r3, #24
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	f248 4330 	movw	r3, #33840	; 0x8430
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ed2:	4a47      	ldr	r2, [pc, #284]	; (8004ff0 <pickMode+0x160>)
 8004ed4:	2137      	movs	r1, #55	; 0x37
 8004ed6:	203c      	movs	r0, #60	; 0x3c
 8004ed8:	f7fd f9a4 	bl	8002224 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8004edc:	4a45      	ldr	r2, [pc, #276]	; (8004ff4 <pickMode+0x164>)
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee6:	6018      	str	r0, [r3, #0]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	8019      	strh	r1, [r3, #0]
 8004eec:	f107 030e 	add.w	r3, r7, #14
 8004ef0:	222c      	movs	r2, #44	; 0x2c
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f004 ff89 	bl	8009e0c <memset>
	char *str2 = convert2str(id);
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fd fc63 	bl	80027c8 <convert2str>
 8004f02:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f005 f826 	bl	8009f5c <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8004f10:	f107 0208 	add.w	r2, r7, #8
 8004f14:	2300      	movs	r3, #0
 8004f16:	9302      	str	r3, [sp, #8]
 8004f18:	2318      	movs	r3, #24
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	f248 4330 	movw	r3, #33840	; 0x8430
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f26:	2164      	movs	r1, #100	; 0x64
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f7fd f9df 	bl	80022ec <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	2318      	movs	r3, #24
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f248 4330 	movw	r3, #33840	; 0x8430
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <pickMode+0x168>)
 8004f42:	2196      	movs	r1, #150	; 0x96
 8004f44:	2000      	movs	r0, #0
 8004f46:	f7fd f9d1 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9302      	str	r3, [sp, #8]
 8004f4e:	2318      	movs	r3, #24
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	f248 4330 	movw	r3, #33840	; 0x8430
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f5c:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <pickMode+0x16c>)
 8004f5e:	21c8      	movs	r1, #200	; 0xc8
 8004f60:	200a      	movs	r0, #10
 8004f62:	f7fd f95f 	bl	8002224 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8004f66:	2300      	movs	r3, #0
 8004f68:	9302      	str	r3, [sp, #8]
 8004f6a:	2318      	movs	r3, #24
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	f248 4330 	movw	r3, #33840	; 0x8430
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f78:	4a21      	ldr	r2, [pc, #132]	; (8005000 <pickMode+0x170>)
 8004f7a:	21fa      	movs	r1, #250	; 0xfa
 8004f7c:	200a      	movs	r0, #10
 8004f7e:	f7fd f951 	bl	8002224 <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <pickMode+0x174>)
 8004f84:	22d2      	movs	r2, #210	; 0xd2
 8004f86:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 8004f88:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <pickMode+0x178>)
 8004f8a:	22be      	movs	r2, #190	; 0xbe
 8004f8c:	601a      	str	r2, [r3, #0]
	drawArrow();
 8004f8e:	f7ff fd89 	bl	8004aa4 <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8004f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f9c:	2282      	movs	r2, #130	; 0x82
 8004f9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004fa2:	206e      	movs	r0, #110	; 0x6e
 8004fa4:	f7fc fdd9 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8004fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	f44f 739b 	mov.w	r3, #310	; 0x136
 8004fb2:	2278      	movs	r2, #120	; 0x78
 8004fb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004fb8:	206e      	movs	r0, #110	; 0x6e
 8004fba:	f7fc fdce 	bl	8001b5a <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8004fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004fc8:	2282      	movs	r2, #130	; 0x82
 8004fca:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004fce:	2078      	movs	r0, #120	; 0x78
 8004fd0:	f7fc fdc3 	bl	8001b5a <lcd_DrawLine>

}
 8004fd4:	bf00      	nop
 8004fd6:	3744      	adds	r7, #68	; 0x44
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd90      	pop	{r4, r7, pc}
 8004fdc:	20000074 	.word	0x20000074
 8004fe0:	20000078 	.word	0x20000078
 8004fe4:	2000007c 	.word	0x2000007c
 8004fe8:	20000080 	.word	0x20000080
 8004fec:	0800e7d0 	.word	0x0800e7d0
 8004ff0:	0800b534 	.word	0x0800b534
 8004ff4:	0800b594 	.word	0x0800b594
 8004ff8:	0800b58c 	.word	0x0800b58c
 8004ffc:	0800b55c 	.word	0x0800b55c
 8005000:	0800b56c 	.word	0x0800b56c
 8005004:	2000000c 	.word	0x2000000c
 8005008:	20000010 	.word	0x20000010

0800500c <beginStartGame>:

void beginStartGame()
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b094      	sub	sp, #80	; 0x50
 8005010:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8005012:	4b9d      	ldr	r3, [pc, #628]	; (8005288 <beginStartGame+0x27c>)
 8005014:	8b9b      	ldrh	r3, [r3, #28]
 8005016:	2b01      	cmp	r3, #1
 8005018:	f040 81bc 	bne.w	8005394 <beginStartGame+0x388>
	{
		switch (statusGame) {
 800501c:	4b9b      	ldr	r3, [pc, #620]	; (800528c <beginStartGame+0x280>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b0a      	cmp	r3, #10
 8005022:	f200 81b9 	bhi.w	8005398 <beginStartGame+0x38c>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <beginStartGame+0x20>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005059 	.word	0x08005059
 8005030:	0800507f 	.word	0x0800507f
 8005034:	08005097 	.word	0x08005097
 8005038:	08005399 	.word	0x08005399
 800503c:	08005399 	.word	0x08005399
 8005040:	08005399 	.word	0x08005399
 8005044:	080052b5 	.word	0x080052b5
 8005048:	08005199 	.word	0x08005199
 800504c:	0800510b 	.word	0x0800510b
 8005050:	08005149 	.word	0x08005149
 8005054:	08005329 	.word	0x08005329
			case INIT:
				statusGame = STARTMODE;
 8005058:	4b8c      	ldr	r3, [pc, #560]	; (800528c <beginStartGame+0x280>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
				ID = 0;
 800505e:	4b8c      	ldr	r3, [pc, #560]	; (8005290 <beginStartGame+0x284>)
 8005060:	2200      	movs	r2, #0
 8005062:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8005064:	4b8b      	ldr	r3, [pc, #556]	; (8005294 <beginStartGame+0x288>)
 8005066:	2200      	movs	r2, #0
 8005068:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 800506a:	4b8b      	ldr	r3, [pc, #556]	; (8005298 <beginStartGame+0x28c>)
 800506c:	2203      	movs	r2, #3
 800506e:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8005070:	4b8a      	ldr	r3, [pc, #552]	; (800529c <beginStartGame+0x290>)
 8005072:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005076:	801a      	strh	r2, [r3, #0]
				startUI();
 8005078:	f7ff fc7e 	bl	8004978 <startUI>
				break;
 800507c:	e191      	b.n	80053a2 <beginStartGame+0x396>
			case STARTMODE:
				TOTALTIME = 0;
 800507e:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <beginStartGame+0x294>)
 8005080:	2200      	movs	r2, #0
 8005082:	801a      	strh	r2, [r3, #0]
				statusGame = PICKMODE;
 8005084:	4b81      	ldr	r3, [pc, #516]	; (800528c <beginStartGame+0x280>)
 8005086:	2202      	movs	r2, #2
 8005088:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 800508a:	4b81      	ldr	r3, [pc, #516]	; (8005290 <beginStartGame+0x284>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fefe 	bl	8004e90 <pickMode>
				break;
 8005094:	e185      	b.n	80053a2 <beginStartGame+0x396>
			case PICKMODE:
				switch (arrowMode)
 8005096:	4b80      	ldr	r3, [pc, #512]	; (8005298 <beginStartGame+0x28c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d028      	beq.n	80050f0 <beginStartGame+0xe4>
 800509e:	2b05      	cmp	r3, #5
 80050a0:	f300 817c 	bgt.w	800539c <beginStartGame+0x390>
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d002      	beq.n	80050ae <beginStartGame+0xa2>
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d015      	beq.n	80050d8 <beginStartGame+0xcc>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 80050ac:	e176      	b.n	800539c <beginStartGame+0x390>
					oldStatusGame = NORMALMODE;
 80050ae:	4b7d      	ldr	r3, [pc, #500]	; (80052a4 <beginStartGame+0x298>)
 80050b0:	2203      	movs	r2, #3
 80050b2:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 80050b4:	4b75      	ldr	r3, [pc, #468]	; (800528c <beginStartGame+0x280>)
 80050b6:	2203      	movs	r2, #3
 80050b8:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 80050ba:	4b75      	ldr	r3, [pc, #468]	; (8005290 <beginStartGame+0x284>)
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	; (8005294 <beginStartGame+0x288>)
 80050c0:	8812      	ldrh	r2, [r2, #0]
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fd fbbb 	bl	8002840 <setUpLcdNormalPlay>
					setTimerUart(1000);
 80050ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050ce:	f7ff faf9 	bl	80046c4 <setTimerUart>
					snakeInit();
 80050d2:	f7fe fdbf 	bl	8003c54 <snakeInit>
					break;
 80050d6:	e017      	b.n	8005108 <beginStartGame+0xfc>
					oldStatusGame = TIMINGMODE;
 80050d8:	4b72      	ldr	r3, [pc, #456]	; (80052a4 <beginStartGame+0x298>)
 80050da:	2204      	movs	r2, #4
 80050dc:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 80050de:	4b6f      	ldr	r3, [pc, #444]	; (800529c <beginStartGame+0x290>)
 80050e0:	221e      	movs	r2, #30
 80050e2:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 80050e4:	4b69      	ldr	r3, [pc, #420]	; (800528c <beginStartGame+0x280>)
 80050e6:	2208      	movs	r2, #8
 80050e8:	601a      	str	r2, [r3, #0]
					setupTiming();
 80050ea:	f000 fed3 	bl	8005e94 <setupTiming>
					break;
 80050ee:	e00b      	b.n	8005108 <beginStartGame+0xfc>
					oldStatusGame = ADVANCEMODE;
 80050f0:	4b6c      	ldr	r3, [pc, #432]	; (80052a4 <beginStartGame+0x298>)
 80050f2:	2205      	movs	r2, #5
 80050f4:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 80050f6:	4b69      	ldr	r3, [pc, #420]	; (800529c <beginStartGame+0x290>)
 80050f8:	221e      	movs	r2, #30
 80050fa:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 80050fc:	4b63      	ldr	r3, [pc, #396]	; (800528c <beginStartGame+0x280>)
 80050fe:	2209      	movs	r2, #9
 8005100:	601a      	str	r2, [r3, #0]
					setupAdvance();
 8005102:	f7fb fa3f 	bl	8000584 <setupAdvance>
					break;
 8005106:	bf00      	nop
				break;
 8005108:	e148      	b.n	800539c <beginStartGame+0x390>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 800510a:	4b64      	ldr	r3, [pc, #400]	; (800529c <beginStartGame+0x290>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fa80 	bl	8004614 <setTimerTiming>
				setTimerDeTime(1000);
 8005114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005118:	f7ff fa9c 	bl	8004654 <setTimerDeTime>
				oldTiming = TIMING;
 800511c:	4b5f      	ldr	r3, [pc, #380]	; (800529c <beginStartGame+0x290>)
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	4b61      	ldr	r3, [pc, #388]	; (80052a8 <beginStartGame+0x29c>)
 8005122:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <beginStartGame+0x280>)
 8005126:	2204      	movs	r2, #4
 8005128:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 800512a:	4b59      	ldr	r3, [pc, #356]	; (8005290 <beginStartGame+0x284>)
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	4a5b      	ldr	r2, [pc, #364]	; (800529c <beginStartGame+0x290>)
 8005130:	8812      	ldrh	r2, [r2, #0]
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f7fd fc3b 	bl	80029b0 <setUpLcdTimingPlay>
				setTimerUart(1000);
 800513a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800513e:	f7ff fac1 	bl	80046c4 <setTimerUart>
				snakeInit();
 8005142:	f7fe fd87 	bl	8003c54 <snakeInit>
				break;
 8005146:	e12c      	b.n	80053a2 <beginStartGame+0x396>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 8005148:	4b54      	ldr	r3, [pc, #336]	; (800529c <beginStartGame+0x290>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fa61 	bl	8004614 <setTimerTiming>
				setTimerDeTime(1000);
 8005152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005156:	f7ff fa7d 	bl	8004654 <setTimerDeTime>
				setTimerGenerateWall(2000);
 800515a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800515e:	f7ff fa95 	bl	800468c <setTimerGenerateWall>
				flagForGenerateWall = 0;
 8005162:	4b52      	ldr	r3, [pc, #328]	; (80052ac <beginStartGame+0x2a0>)
 8005164:	2200      	movs	r2, #0
 8005166:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 8005168:	4b4c      	ldr	r3, [pc, #304]	; (800529c <beginStartGame+0x290>)
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	4b4e      	ldr	r3, [pc, #312]	; (80052a8 <beginStartGame+0x29c>)
 800516e:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <beginStartGame+0x280>)
 8005172:	2205      	movs	r2, #5
 8005174:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 8005176:	4b46      	ldr	r3, [pc, #280]	; (8005290 <beginStartGame+0x284>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	4a48      	ldr	r2, [pc, #288]	; (800529c <beginStartGame+0x290>)
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f7fd fccb 	bl	8002b1c <setUpLcdAdvancePlay>
				setTimerUart(1000);
 8005186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800518a:	f7ff fa9b 	bl	80046c4 <setTimerUart>
				wallInit();
 800518e:	f7fe fc8d 	bl	8003aac <wallInit>
				snakeInit();
 8005192:	f7fe fd5f 	bl	8003c54 <snakeInit>
				break;
 8005196:	e104      	b.n	80053a2 <beginStartGame+0x396>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 8005198:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <beginStartGame+0x2a4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d15f      	bne.n	8005260 <beginStartGame+0x254>
				{
					statusGame = oldStatusGame;
 80051a0:	4b40      	ldr	r3, [pc, #256]	; (80052a4 <beginStartGame+0x298>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a39      	ldr	r2, [pc, #228]	; (800528c <beginStartGame+0x280>)
 80051a6:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 80051a8:	4b3a      	ldr	r3, [pc, #232]	; (8005294 <beginStartGame+0x288>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 80051ae:	4b37      	ldr	r3, [pc, #220]	; (800528c <beginStartGame+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d030      	beq.n	8005218 <beginStartGame+0x20c>
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	f300 80f2 	bgt.w	80053a0 <beginStartGame+0x394>
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d002      	beq.n	80051c6 <beginStartGame+0x1ba>
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d00e      	beq.n	80051e2 <beginStartGame+0x1d6>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 80051c4:	e0ec      	b.n	80053a0 <beginStartGame+0x394>
						oldStatusGame = NORMALMODE;
 80051c6:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <beginStartGame+0x298>)
 80051c8:	2203      	movs	r2, #3
 80051ca:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 80051cc:	4b30      	ldr	r3, [pc, #192]	; (8005290 <beginStartGame+0x284>)
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	4a30      	ldr	r2, [pc, #192]	; (8005294 <beginStartGame+0x288>)
 80051d2:	8812      	ldrh	r2, [r2, #0]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fb32 	bl	8002840 <setUpLcdNormalPlay>
						snakeInit();
 80051dc:	f7fe fd3a 	bl	8003c54 <snakeInit>
						break;
 80051e0:	e051      	b.n	8005286 <beginStartGame+0x27a>
						oldStatusGame = TIMINGMODE;
 80051e2:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <beginStartGame+0x298>)
 80051e4:	2204      	movs	r2, #4
 80051e6:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 80051e8:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <beginStartGame+0x29c>)
 80051ea:	881a      	ldrh	r2, [r3, #0]
 80051ec:	4b2b      	ldr	r3, [pc, #172]	; (800529c <beginStartGame+0x290>)
 80051ee:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 80051f0:	4b2a      	ldr	r3, [pc, #168]	; (800529c <beginStartGame+0x290>)
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fa0d 	bl	8004614 <setTimerTiming>
						setTimerDeTime(1000);
 80051fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051fe:	f7ff fa29 	bl	8004654 <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <beginStartGame+0x284>)
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	4a25      	ldr	r2, [pc, #148]	; (800529c <beginStartGame+0x290>)
 8005208:	8812      	ldrh	r2, [r2, #0]
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7fd fbcf 	bl	80029b0 <setUpLcdTimingPlay>
						snakeInit();
 8005212:	f7fe fd1f 	bl	8003c54 <snakeInit>
						break;
 8005216:	e036      	b.n	8005286 <beginStartGame+0x27a>
						oldStatusGame = ADVANCEMODE;
 8005218:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <beginStartGame+0x298>)
 800521a:	2205      	movs	r2, #5
 800521c:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <beginStartGame+0x29c>)
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <beginStartGame+0x290>)
 8005224:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005226:	4b1d      	ldr	r3, [pc, #116]	; (800529c <beginStartGame+0x290>)
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff f9f2 	bl	8004614 <setTimerTiming>
						setTimerDeTime(1000);
 8005230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005234:	f7ff fa0e 	bl	8004654 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005238:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800523c:	f7ff fa26 	bl	800468c <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <beginStartGame+0x2a0>)
 8005242:	2200      	movs	r2, #0
 8005244:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <beginStartGame+0x284>)
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	4a14      	ldr	r2, [pc, #80]	; (800529c <beginStartGame+0x290>)
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd fc63 	bl	8002b1c <setUpLcdAdvancePlay>
						snakeInit();
 8005256:	f7fe fcfd 	bl	8003c54 <snakeInit>
						wallInit();
 800525a:	f7fe fc27 	bl	8003aac <wallInit>
						break;
 800525e:	e012      	b.n	8005286 <beginStartGame+0x27a>
					statusGame = STARTMODE;
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <beginStartGame+0x280>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <beginStartGame+0x284>)
 8005268:	2200      	movs	r2, #0
 800526a:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <beginStartGame+0x288>)
 800526e:	2200      	movs	r2, #0
 8005270:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <beginStartGame+0x28c>)
 8005274:	2203      	movs	r2, #3
 8005276:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <beginStartGame+0x290>)
 800527a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800527e:	801a      	strh	r2, [r3, #0]
					startUI();
 8005280:	f7ff fb7a 	bl	8004978 <startUI>
				break;
 8005284:	e08c      	b.n	80053a0 <beginStartGame+0x394>
 8005286:	e08b      	b.n	80053a0 <beginStartGame+0x394>
 8005288:	2000012c 	.word	0x2000012c
 800528c:	200001b8 	.word	0x200001b8
 8005290:	200001a4 	.word	0x200001a4
 8005294:	200001a6 	.word	0x200001a6
 8005298:	20000014 	.word	0x20000014
 800529c:	20000000 	.word	0x20000000
 80052a0:	200001d0 	.word	0x200001d0
 80052a4:	200001bc 	.word	0x200001bc
 80052a8:	200001cc 	.word	0x200001cc
 80052ac:	20002956 	.word	0x20002956
 80052b0:	200001ac 	.word	0x200001ac
			case STOPMODE:
				if(arrowStopMode == RESUME)
 80052b4:	4baf      	ldr	r3, [pc, #700]	; (8005574 <beginStartGame+0x568>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d122      	bne.n	8005302 <beginStartGame+0x2f6>
				{
					statusGame = oldStatusGame;
 80052bc:	4bae      	ldr	r3, [pc, #696]	; (8005578 <beginStartGame+0x56c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4aae      	ldr	r2, [pc, #696]	; (800557c <beginStartGame+0x570>)
 80052c2:	6013      	str	r3, [r2, #0]
					setTimerUart(1000);
 80052c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052c8:	f7ff f9fc 	bl	80046c4 <setTimerUart>
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80052cc:	4bab      	ldr	r3, [pc, #684]	; (800557c <beginStartGame+0x570>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d003      	beq.n	80052dc <beginStartGame+0x2d0>
 80052d4:	4ba9      	ldr	r3, [pc, #676]	; (800557c <beginStartGame+0x570>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b05      	cmp	r3, #5
 80052da:	d10f      	bne.n	80052fc <beginStartGame+0x2f0>
					{
						setTimerTiming(TIMING);
 80052dc:	4ba8      	ldr	r3, [pc, #672]	; (8005580 <beginStartGame+0x574>)
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff f997 	bl	8004614 <setTimerTiming>
						setTimerDeTime(1000);
 80052e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052ea:	f7ff f9b3 	bl	8004654 <setTimerDeTime>
						setTimerGenerateWall(2000);
 80052ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80052f2:	f7ff f9cb 	bl	800468c <setTimerGenerateWall>
						flagForGenerateWall = 0;
 80052f6:	4ba3      	ldr	r3, [pc, #652]	; (8005584 <beginStartGame+0x578>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 80052fc:	f7fe f936 	bl	800356c <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8005300:	e04f      	b.n	80053a2 <beginStartGame+0x396>
					statusGame = STARTMODE;
 8005302:	4b9e      	ldr	r3, [pc, #632]	; (800557c <beginStartGame+0x570>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005308:	4b9f      	ldr	r3, [pc, #636]	; (8005588 <beginStartGame+0x57c>)
 800530a:	2200      	movs	r2, #0
 800530c:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 800530e:	4b9f      	ldr	r3, [pc, #636]	; (800558c <beginStartGame+0x580>)
 8005310:	2200      	movs	r2, #0
 8005312:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005314:	4b9e      	ldr	r3, [pc, #632]	; (8005590 <beginStartGame+0x584>)
 8005316:	2203      	movs	r2, #3
 8005318:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 800531a:	4b99      	ldr	r3, [pc, #612]	; (8005580 <beginStartGame+0x574>)
 800531c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005320:	801a      	strh	r2, [r3, #0]
					startUI();
 8005322:	f7ff fb29 	bl	8004978 <startUI>
				break;
 8005326:	e03c      	b.n	80053a2 <beginStartGame+0x396>
			case EXITMODE:
				if(arrowExitMode == YES)
 8005328:	4b9a      	ldr	r3, [pc, #616]	; (8005594 <beginStartGame+0x588>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d112      	bne.n	8005356 <beginStartGame+0x34a>
				{
					statusGame = STARTMODE;
 8005330:	4b92      	ldr	r3, [pc, #584]	; (800557c <beginStartGame+0x570>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005336:	4b94      	ldr	r3, [pc, #592]	; (8005588 <beginStartGame+0x57c>)
 8005338:	2200      	movs	r2, #0
 800533a:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 800533c:	4b93      	ldr	r3, [pc, #588]	; (800558c <beginStartGame+0x580>)
 800533e:	2200      	movs	r2, #0
 8005340:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8005342:	4b93      	ldr	r3, [pc, #588]	; (8005590 <beginStartGame+0x584>)
 8005344:	2203      	movs	r2, #3
 8005346:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005348:	4b8d      	ldr	r3, [pc, #564]	; (8005580 <beginStartGame+0x574>)
 800534a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800534e:	801a      	strh	r2, [r3, #0]
					startUI();
 8005350:	f7ff fb12 	bl	8004978 <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 8005354:	e020      	b.n	8005398 <beginStartGame+0x38c>
					statusGame = oldStatusGame;
 8005356:	4b88      	ldr	r3, [pc, #544]	; (8005578 <beginStartGame+0x56c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a88      	ldr	r2, [pc, #544]	; (800557c <beginStartGame+0x570>)
 800535c:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 800535e:	4b87      	ldr	r3, [pc, #540]	; (800557c <beginStartGame+0x570>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d003      	beq.n	800536e <beginStartGame+0x362>
 8005366:	4b85      	ldr	r3, [pc, #532]	; (800557c <beginStartGame+0x570>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b05      	cmp	r3, #5
 800536c:	d10f      	bne.n	800538e <beginStartGame+0x382>
						setTimerTiming(TIMING);
 800536e:	4b84      	ldr	r3, [pc, #528]	; (8005580 <beginStartGame+0x574>)
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff f94e 	bl	8004614 <setTimerTiming>
						setTimerDeTime(1000);
 8005378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800537c:	f7ff f96a 	bl	8004654 <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005380:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005384:	f7ff f982 	bl	800468c <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005388:	4b7e      	ldr	r3, [pc, #504]	; (8005584 <beginStartGame+0x578>)
 800538a:	2200      	movs	r2, #0
 800538c:	801a      	strh	r2, [r3, #0]
					resumeGame();
 800538e:	f7fe f8ed 	bl	800356c <resumeGame>
				break;
 8005392:	e001      	b.n	8005398 <beginStartGame+0x38c>
		}
	}
 8005394:	bf00      	nop
 8005396:	e004      	b.n	80053a2 <beginStartGame+0x396>
				break;
 8005398:	bf00      	nop
 800539a:	e002      	b.n	80053a2 <beginStartGame+0x396>
				break;
 800539c:	bf00      	nop
 800539e:	e000      	b.n	80053a2 <beginStartGame+0x396>
				break;
 80053a0:	bf00      	nop
	if(statusGame == STARTMODE){
 80053a2:	4b76      	ldr	r3, [pc, #472]	; (800557c <beginStartGame+0x570>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 815f 	bne.w	800566a <beginStartGame+0x65e>
		char str1[50] = "";
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	f107 0308 	add.w	r3, r7, #8
 80053b4:	222e      	movs	r2, #46	; 0x2e
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f004 fd27 	bl	8009e0c <memset>
		char *str2;
		uint16_t val;
		val = ID;
 80053be:	4b72      	ldr	r3, [pc, #456]	; (8005588 <beginStartGame+0x57c>)
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80053c8:	e14b      	b.n	8005662 <beginStartGame+0x656>
		{
			if(button_count[i] == 1)
 80053ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053cc:	4a72      	ldr	r2, [pc, #456]	; (8005598 <beginStartGame+0x58c>)
 80053ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	f040 8142 	bne.w	800565c <beginStartGame+0x650>
			{
				button_count[i] == 0;
				switch (i)
 80053d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053da:	2b0d      	cmp	r3, #13
 80053dc:	f200 811a 	bhi.w	8005614 <beginStartGame+0x608>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <beginStartGame+0x3dc>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	08005421 	.word	0x08005421
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	08005479 	.word	0x08005479
 80053f4:	0800565b 	.word	0x0800565b
 80053f8:	080054a5 	.word	0x080054a5
 80053fc:	080054cd 	.word	0x080054cd
 8005400:	080054f5 	.word	0x080054f5
 8005404:	0800565b 	.word	0x0800565b
 8005408:	0800551d 	.word	0x0800551d
 800540c:	08005549 	.word	0x08005549
 8005410:	0800559d 	.word	0x0800559d
 8005414:	0800565b 	.word	0x0800565b
 8005418:	080055c9 	.word	0x080055c9
 800541c:	080055f3 	.word	0x080055f3
				{
					case 0:
						val = val*10 + i+1;
 8005420:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005422:	461a      	mov	r2, r3
 8005424:	0092      	lsls	r2, r2, #2
 8005426:	4413      	add	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800542e:	4413      	add	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	3301      	adds	r3, #1
 8005434:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005436:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005438:	4618      	mov	r0, r3
 800543a:	f7fd f9c5 	bl	80027c8 <convert2str>
 800543e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005444:	4618      	mov	r0, r3
 8005446:	f004 fd89 	bl	8009f5c <strcat>
						break;
 800544a:	e0e3      	b.n	8005614 <beginStartGame+0x608>
					case 1:
						val = val*10 + i+1;
 800544c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800544e:	461a      	mov	r2, r3
 8005450:	0092      	lsls	r2, r2, #2
 8005452:	4413      	add	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800545a:	4413      	add	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	3301      	adds	r3, #1
 8005460:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005462:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005464:	4618      	mov	r0, r3
 8005466:	f7fd f9af 	bl	80027c8 <convert2str>
 800546a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800546c:	1d3b      	adds	r3, r7, #4
 800546e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005470:	4618      	mov	r0, r3
 8005472:	f004 fd73 	bl	8009f5c <strcat>
						break;
 8005476:	e0cd      	b.n	8005614 <beginStartGame+0x608>
					case 2:
						val = val*10 + i+1;
 8005478:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800547a:	461a      	mov	r2, r3
 800547c:	0092      	lsls	r2, r2, #2
 800547e:	4413      	add	r3, r2
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005486:	4413      	add	r3, r2
 8005488:	b29b      	uxth	r3, r3
 800548a:	3301      	adds	r3, #1
 800548c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800548e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005490:	4618      	mov	r0, r3
 8005492:	f7fd f999 	bl	80027c8 <convert2str>
 8005496:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005498:	1d3b      	adds	r3, r7, #4
 800549a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800549c:	4618      	mov	r0, r3
 800549e:	f004 fd5d 	bl	8009f5c <strcat>
						break;
 80054a2:	e0b7      	b.n	8005614 <beginStartGame+0x608>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 80054a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054a6:	461a      	mov	r2, r3
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054b2:	4413      	add	r3, r2
 80054b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80054b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fd f985 	bl	80027c8 <convert2str>
 80054be:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054c4:	4618      	mov	r0, r3
 80054c6:	f004 fd49 	bl	8009f5c <strcat>
						break;
 80054ca:	e0a3      	b.n	8005614 <beginStartGame+0x608>
					case 5:
						val = val*10 + i;
 80054cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054ce:	461a      	mov	r2, r3
 80054d0:	0092      	lsls	r2, r2, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054da:	4413      	add	r3, r2
 80054dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80054de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fd f971 	bl	80027c8 <convert2str>
 80054e6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ec:	4618      	mov	r0, r3
 80054ee:	f004 fd35 	bl	8009f5c <strcat>
						break;
 80054f2:	e08f      	b.n	8005614 <beginStartGame+0x608>
					case 6:
						val = val*10 + i;
 80054f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054f6:	461a      	mov	r2, r3
 80054f8:	0092      	lsls	r2, r2, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005502:	4413      	add	r3, r2
 8005504:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005508:	4618      	mov	r0, r3
 800550a:	f7fd f95d 	bl	80027c8 <convert2str>
 800550e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005514:	4618      	mov	r0, r3
 8005516:	f004 fd21 	bl	8009f5c <strcat>
						break;
 800551a:	e07b      	b.n	8005614 <beginStartGame+0x608>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 800551c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800551e:	461a      	mov	r2, r3
 8005520:	0092      	lsls	r2, r2, #2
 8005522:	4413      	add	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800552a:	4413      	add	r3, r2
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005532:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd f947 	bl	80027c8 <convert2str>
 800553a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005540:	4618      	mov	r0, r3
 8005542:	f004 fd0b 	bl	8009f5c <strcat>
						break;
 8005546:	e065      	b.n	8005614 <beginStartGame+0x608>
					case 9:
						val = val*10 + i-1;
 8005548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800554a:	461a      	mov	r2, r3
 800554c:	0092      	lsls	r2, r2, #2
 800554e:	4413      	add	r3, r2
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005556:	4413      	add	r3, r2
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800555e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd f931 	bl	80027c8 <convert2str>
 8005566:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800556c:	4618      	mov	r0, r3
 800556e:	f004 fcf5 	bl	8009f5c <strcat>
						break;
 8005572:	e04f      	b.n	8005614 <beginStartGame+0x608>
 8005574:	2000005c 	.word	0x2000005c
 8005578:	200001bc 	.word	0x200001bc
 800557c:	200001b8 	.word	0x200001b8
 8005580:	20000000 	.word	0x20000000
 8005584:	20002956 	.word	0x20002956
 8005588:	200001a4 	.word	0x200001a4
 800558c:	200001a6 	.word	0x200001a6
 8005590:	20000014 	.word	0x20000014
 8005594:	20000060 	.word	0x20000060
 8005598:	2000012c 	.word	0x2000012c
					case 10:
						val = val*10 + i-1;
 800559c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800559e:	461a      	mov	r2, r3
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055aa:	4413      	add	r3, r2
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80055b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fd f907 	bl	80027c8 <convert2str>
 80055ba:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055c0:	4618      	mov	r0, r3
 80055c2:	f004 fccb 	bl	8009f5c <strcat>
						break;
 80055c6:	e025      	b.n	8005614 <beginStartGame+0x608>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 80055c8:	4b40      	ldr	r3, [pc, #256]	; (80056cc <beginStartGame+0x6c0>)
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 80055d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055d2:	4a3f      	ldr	r2, [pc, #252]	; (80056d0 <beginStartGame+0x6c4>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80055dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd f8f2 	bl	80027c8 <convert2str>
 80055e4:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ea:	4618      	mov	r0, r3
 80055ec:	f004 fcb6 	bl	8009f5c <strcat>
						break;
 80055f0:	e010      	b.n	8005614 <beginStartGame+0x608>
					case 13:
						val = val*10;
 80055f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055f4:	461a      	mov	r2, r3
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80055fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd f8e1 	bl	80027c8 <convert2str>
 8005606:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800560c:	4618      	mov	r0, r3
 800560e:	f004 fca5 	bl	8009f5c <strcat>
						break;
 8005612:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	23b4      	movs	r3, #180	; 0xb4
 800561a:	22b4      	movs	r2, #180	; 0xb4
 800561c:	2196      	movs	r1, #150	; 0x96
 800561e:	203c      	movs	r0, #60	; 0x3c
 8005620:	f7fc fa4e 	bl	8001ac0 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8005624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	23b4      	movs	r3, #180	; 0xb4
 800562c:	22b4      	movs	r2, #180	; 0xb4
 800562e:	2196      	movs	r1, #150	; 0x96
 8005630:	203c      	movs	r0, #60	; 0x3c
 8005632:	f7fc fb16 	bl	8001c62 <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8005636:	1d3a      	adds	r2, r7, #4
 8005638:	2301      	movs	r3, #1
 800563a:	9302      	str	r3, [sp, #8]
 800563c:	2318      	movs	r3, #24
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800564a:	2198      	movs	r1, #152	; 0x98
 800564c:	2000      	movs	r0, #0
 800564e:	f7fc fe4d 	bl	80022ec <lcd_StrCenter>

				ID = val;
 8005652:	4a20      	ldr	r2, [pc, #128]	; (80056d4 <beginStartGame+0x6c8>)
 8005654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005656:	8013      	strh	r3, [r2, #0]
 8005658:	e000      	b.n	800565c <beginStartGame+0x650>
						continue;
 800565a:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 800565c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800565e:	3301      	adds	r3, #1
 8005660:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005664:	2b0d      	cmp	r3, #13
 8005666:	f67f aeb0 	bls.w	80053ca <beginStartGame+0x3be>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 800566a:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <beginStartGame+0x6cc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b08      	cmp	r3, #8
 8005670:	d101      	bne.n	8005676 <beginStartGame+0x66a>
	{
		initTimingMode();
 8005672:	f000 fd63 	bl	800613c <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <beginStartGame+0x6cc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b09      	cmp	r3, #9
 800567c:	d101      	bne.n	8005682 <beginStartGame+0x676>
	{
		initAdvanceMode();
 800567e:	f7fb f903 	bl	8000888 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <beginStartGame+0x6cc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d00e      	beq.n	80056a8 <beginStartGame+0x69c>
	{
		if(statusGame == PICKMODE)
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <beginStartGame+0x6cc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d101      	bne.n	8005696 <beginStartGame+0x68a>
		{
			arrowInPickMode();
 8005692:	f7ff fa5b 	bl	8004b4c <arrowInPickMode>
		}
		if(button_count[12] == 1)
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <beginStartGame+0x6d0>)
 8005698:	8b1b      	ldrh	r3, [r3, #24]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d104      	bne.n	80056a8 <beginStartGame+0x69c>
		{
			statusGame = EXITMODE;
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <beginStartGame+0x6cc>)
 80056a0:	220a      	movs	r2, #10
 80056a2:	601a      	str	r2, [r3, #0]
			initExit();
 80056a4:	f7fb fbd2 	bl	8000e4c <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <beginStartGame+0x6cc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d009      	beq.n	80056c4 <beginStartGame+0x6b8>
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <beginStartGame+0x6cc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d005      	beq.n	80056c4 <beginStartGame+0x6b8>
	{
		setTimerDeTime(0);
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7fe ffcb 	bl	8004654 <setTimerDeTime>
		setTimerGenerateWall(0);
 80056be:	2000      	movs	r0, #0
 80056c0:	f7fe ffe4 	bl	800468c <setTimerGenerateWall>
	}
}
 80056c4:	bf00      	nop
 80056c6:	3740      	adds	r7, #64	; 0x40
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	0800b5c8 	.word	0x0800b5c8
 80056d0:	cccccccd 	.word	0xcccccccd
 80056d4:	200001a4 	.word	0x200001a4
 80056d8:	200001b8 	.word	0x200001b8
 80056dc:	2000012c 	.word	0x2000012c

080056e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_MspInit+0x4c>)
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	4a0f      	ldr	r2, [pc, #60]	; (800572c <HAL_MspInit+0x4c>)
 80056f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056f4:	6453      	str	r3, [r2, #68]	; 0x44
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <HAL_MspInit+0x4c>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_MspInit+0x4c>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a08      	ldr	r2, [pc, #32]	; (800572c <HAL_MspInit+0x4c>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_MspInit+0x4c>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800

08005730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005734:	e7fe      	b.n	8005734 <NMI_Handler+0x4>

08005736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005736:	b480      	push	{r7}
 8005738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800573a:	e7fe      	b.n	800573a <HardFault_Handler+0x4>

0800573c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005740:	e7fe      	b.n	8005740 <MemManage_Handler+0x4>

08005742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005746:	e7fe      	b.n	8005746 <BusFault_Handler+0x4>

08005748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800574c:	e7fe      	b.n	800574c <UsageFault_Handler+0x4>

0800574e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800574e:	b480      	push	{r7}
 8005750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005752:	bf00      	nop
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800577c:	f000 ff24 	bl	80065c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005780:	bf00      	nop
 8005782:	bd80      	pop	{r7, pc}

08005784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005788:	4802      	ldr	r0, [pc, #8]	; (8005794 <TIM2_IRQHandler+0x10>)
 800578a:	f002 fe03 	bl	8008394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800578e:	bf00      	nop
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200029c0 	.word	0x200029c0

08005798 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800579c:	4802      	ldr	r0, [pc, #8]	; (80057a8 <USART2_IRQHandler+0x10>)
 800579e:	f003 facb 	bl	8008d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20002a0c 	.word	0x20002a0c

080057ac <showNotifyStop>:
#include "software_timer.h"
#include "uart.h"
#include "game_over.h"

void showNotifyStop()
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 80057b2:	4b25      	ldr	r3, [pc, #148]	; (8005848 <showNotifyStop+0x9c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	330a      	adds	r3, #10
 80057ba:	b299      	uxth	r1, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	9302      	str	r3, [sp, #8]
 80057c0:	2310      	movs	r3, #16
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	2300      	movs	r3, #0
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057cc:	4a1f      	ldr	r2, [pc, #124]	; (800584c <showNotifyStop+0xa0>)
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7fc fd8c 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 80057d4:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <showNotifyStop+0xa4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3308      	adds	r3, #8
 80057dc:	b298      	uxth	r0, r3
 80057de:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <showNotifyStop+0x9c>)
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	4b19      	ldr	r3, [pc, #100]	; (8005848 <showNotifyStop+0x9c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4413      	add	r3, r2
 80057e8:	0fda      	lsrs	r2, r3, #31
 80057ea:	4413      	add	r3, r2
 80057ec:	105b      	asrs	r3, r3, #1
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b14      	subs	r3, #20
 80057f2:	b299      	uxth	r1, r3
 80057f4:	2301      	movs	r3, #1
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	2310      	movs	r3, #16
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	f248 4330 	movw	r3, #33840	; 0x8430
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2300      	movs	r3, #0
 8005804:	4a13      	ldr	r2, [pc, #76]	; (8005854 <showNotifyStop+0xa8>)
 8005806:	f7fc fd0d 	bl	8002224 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <showNotifyStop+0xa4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	3308      	adds	r3, #8
 8005812:	b298      	uxth	r0, r3
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <showNotifyStop+0x9c>)
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <showNotifyStop+0x9c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4413      	add	r3, r2
 800581e:	0fda      	lsrs	r2, r3, #31
 8005820:	4413      	add	r3, r2
 8005822:	105b      	asrs	r3, r3, #1
 8005824:	b29b      	uxth	r3, r3
 8005826:	330f      	adds	r3, #15
 8005828:	b299      	uxth	r1, r3
 800582a:	2301      	movs	r3, #1
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	2310      	movs	r3, #16
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	f248 4330 	movw	r3, #33840	; 0x8430
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	4a07      	ldr	r2, [pc, #28]	; (8005858 <showNotifyStop+0xac>)
 800583c:	f7fc fcf2 	bl	8002224 <lcd_ShowStr>
}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	2000004c 	.word	0x2000004c
 800584c:	0800b5cc 	.word	0x0800b5cc
 8005850:	2000003c 	.word	0x2000003c
 8005854:	0800b5dc 	.word	0x0800b5dc
 8005858:	0800b5e4 	.word	0x0800b5e4

0800585c <drawArrowStop>:


void drawArrowStop()
{
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b087      	sub	sp, #28
 8005860:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8005862:	4b87      	ldr	r3, [pc, #540]	; (8005a80 <drawArrowStop+0x224>)
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	4b86      	ldr	r3, [pc, #536]	; (8005a80 <drawArrowStop+0x224>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4413      	add	r3, r2
 800586c:	0fda      	lsrs	r2, r3, #31
 800586e:	4413      	add	r3, r2
 8005870:	105b      	asrs	r3, r3, #1
 8005872:	3b08      	subs	r3, #8
 8005874:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8005876:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <drawArrowStop+0x224>)
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	4b81      	ldr	r3, [pc, #516]	; (8005a80 <drawArrowStop+0x224>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4413      	add	r3, r2
 8005880:	0fda      	lsrs	r2, r3, #31
 8005882:	4413      	add	r3, r2
 8005884:	105b      	asrs	r3, r3, #1
 8005886:	331c      	adds	r3, #28
 8005888:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 800588a:	4b7e      	ldr	r3, [pc, #504]	; (8005a84 <drawArrowStop+0x228>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d07a      	beq.n	8005988 <drawArrowStop+0x12c>
 8005892:	2b02      	cmp	r3, #2
 8005894:	f040 80f0 	bne.w	8005a78 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8005898:	f7fb fcb2 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 800589c:	4b7a      	ldr	r3, [pc, #488]	; (8005a88 <drawArrowStop+0x22c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3308      	adds	r3, #8
 80058a4:	b298      	uxth	r0, r3
 80058a6:	4b76      	ldr	r3, [pc, #472]	; (8005a80 <drawArrowStop+0x224>)
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	4b75      	ldr	r3, [pc, #468]	; (8005a80 <drawArrowStop+0x224>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4413      	add	r3, r2
 80058b0:	0fda      	lsrs	r2, r3, #31
 80058b2:	4413      	add	r3, r2
 80058b4:	105b      	asrs	r3, r3, #1
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b14      	subs	r3, #20
 80058ba:	b299      	uxth	r1, r3
 80058bc:	2301      	movs	r3, #1
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	2310      	movs	r3, #16
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	f248 4330 	movw	r3, #33840	; 0x8430
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80058ce:	4a6f      	ldr	r2, [pc, #444]	; (8005a8c <drawArrowStop+0x230>)
 80058d0:	f7fc fca8 	bl	8002224 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80058d4:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <drawArrowStop+0x22c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3308      	adds	r3, #8
 80058dc:	b298      	uxth	r0, r3
 80058de:	4b68      	ldr	r3, [pc, #416]	; (8005a80 <drawArrowStop+0x224>)
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <drawArrowStop+0x224>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	0fda      	lsrs	r2, r3, #31
 80058ea:	4413      	add	r3, r2
 80058ec:	105b      	asrs	r3, r3, #1
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	330f      	adds	r3, #15
 80058f2:	b299      	uxth	r1, r3
 80058f4:	2301      	movs	r3, #1
 80058f6:	9302      	str	r3, [sp, #8]
 80058f8:	2310      	movs	r3, #16
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	f248 4330 	movw	r3, #33840	; 0x8430
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	4a62      	ldr	r2, [pc, #392]	; (8005a90 <drawArrowStop+0x234>)
 8005906:	f7fc fc8d 	bl	8002224 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 800590a:	4b5f      	ldr	r3, [pc, #380]	; (8005a88 <drawArrowStop+0x22c>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b0f      	subs	r3, #15
 8005912:	b298      	uxth	r0, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	b299      	uxth	r1, r3
 8005918:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <drawArrowStop+0x22c>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b0a      	subs	r3, #10
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b05      	subs	r3, #5
 8005928:	b29b      	uxth	r3, r3
 800592a:	2400      	movs	r4, #0
 800592c:	9400      	str	r4, [sp, #0]
 800592e:	f7fc f914 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8005932:	4b55      	ldr	r3, [pc, #340]	; (8005a88 <drawArrowStop+0x22c>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b0f      	subs	r3, #15
 800593a:	b298      	uxth	r0, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	b299      	uxth	r1, r3
 8005940:	4b51      	ldr	r3, [pc, #324]	; (8005a88 <drawArrowStop+0x22c>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b0a      	subs	r3, #10
 8005948:	b29a      	uxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	b29b      	uxth	r3, r3
 800594e:	3305      	adds	r3, #5
 8005950:	b29b      	uxth	r3, r3
 8005952:	2400      	movs	r4, #0
 8005954:	9400      	str	r4, [sp, #0]
 8005956:	f7fc f900 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800595a:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <drawArrowStop+0x22c>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b0a      	subs	r3, #10
 8005962:	b298      	uxth	r0, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b05      	subs	r3, #5
 800596a:	b299      	uxth	r1, r3
 800596c:	4b46      	ldr	r3, [pc, #280]	; (8005a88 <drawArrowStop+0x22c>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b0a      	subs	r3, #10
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	b29b      	uxth	r3, r3
 800597a:	3305      	adds	r3, #5
 800597c:	b29b      	uxth	r3, r3
 800597e:	2400      	movs	r4, #0
 8005980:	9400      	str	r4, [sp, #0]
 8005982:	f7fc f8ea 	bl	8001b5a <lcd_DrawLine>
		break;
 8005986:	e077      	b.n	8005a78 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 8005988:	f7fb fc3a 	bl	8001200 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <drawArrowStop+0x22c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	3308      	adds	r3, #8
 8005994:	b298      	uxth	r0, r3
 8005996:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <drawArrowStop+0x224>)
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <drawArrowStop+0x224>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4413      	add	r3, r2
 80059a0:	0fda      	lsrs	r2, r3, #31
 80059a2:	4413      	add	r3, r2
 80059a4:	105b      	asrs	r3, r3, #1
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b14      	subs	r3, #20
 80059aa:	b299      	uxth	r1, r3
 80059ac:	2301      	movs	r3, #1
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	2310      	movs	r3, #16
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	f248 4330 	movw	r3, #33840	; 0x8430
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <drawArrowStop+0x230>)
 80059be:	f7fc fc31 	bl	8002224 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 80059c2:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <drawArrowStop+0x22c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3308      	adds	r3, #8
 80059ca:	b298      	uxth	r0, r3
 80059cc:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <drawArrowStop+0x224>)
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <drawArrowStop+0x224>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4413      	add	r3, r2
 80059d6:	0fda      	lsrs	r2, r3, #31
 80059d8:	4413      	add	r3, r2
 80059da:	105b      	asrs	r3, r3, #1
 80059dc:	b29b      	uxth	r3, r3
 80059de:	330f      	adds	r3, #15
 80059e0:	b299      	uxth	r1, r3
 80059e2:	2301      	movs	r3, #1
 80059e4:	9302      	str	r3, [sp, #8]
 80059e6:	2310      	movs	r3, #16
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	f248 4330 	movw	r3, #33840	; 0x8430
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80059f4:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <drawArrowStop+0x234>)
 80059f6:	f7fc fc15 	bl	8002224 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 80059fa:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <drawArrowStop+0x22c>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b0f      	subs	r3, #15
 8005a02:	b298      	uxth	r0, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	b299      	uxth	r1, r3
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <drawArrowStop+0x22c>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b0a      	subs	r3, #10
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b05      	subs	r3, #5
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2400      	movs	r4, #0
 8005a1c:	9400      	str	r4, [sp, #0]
 8005a1e:	f7fc f89c 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <drawArrowStop+0x22c>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b0f      	subs	r3, #15
 8005a2a:	b298      	uxth	r0, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	b299      	uxth	r1, r3
 8005a30:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <drawArrowStop+0x22c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b0a      	subs	r3, #10
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3305      	adds	r3, #5
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2400      	movs	r4, #0
 8005a44:	9400      	str	r4, [sp, #0]
 8005a46:	f7fc f888 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <drawArrowStop+0x22c>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b0a      	subs	r3, #10
 8005a52:	b298      	uxth	r0, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b05      	subs	r3, #5
 8005a5a:	b299      	uxth	r1, r3
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <drawArrowStop+0x22c>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b0a      	subs	r3, #10
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3305      	adds	r3, #5
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2400      	movs	r4, #0
 8005a70:	9400      	str	r4, [sp, #0]
 8005a72:	f7fc f872 	bl	8001b5a <lcd_DrawLine>
		break;
 8005a76:	bf00      	nop
	}
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}
 8005a80:	2000004c 	.word	0x2000004c
 8005a84:	2000005c 	.word	0x2000005c
 8005a88:	2000003c 	.word	0x2000003c
 8005a8c:	0800b5dc 	.word	0x0800b5dc
 8005a90:	0800b5e4 	.word	0x0800b5e4

08005a94 <gameStopUI>:

void gameStopUI()
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
	showWallnotify();
 8005a98:	f7fb faae 	bl	8000ff8 <showWallnotify>
	showNotifyStop();
 8005a9c:	f7ff fe86 	bl	80057ac <showNotifyStop>
	drawArrowStop();
 8005aa0:	f7ff fedc 	bl	800585c <drawArrowStop>
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <pickStop>:

void pickStop()
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 8005aac:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <pickStop+0x78>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b06      	cmp	r3, #6
 8005ab2:	d133      	bne.n	8005b1c <pickStop+0x74>
	{
		if(button_count[3] == 1)
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <pickStop+0x7c>)
 8005ab6:	88db      	ldrh	r3, [r3, #6]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d10f      	bne.n	8005adc <pickStop+0x34>
		{
			flagStop = 1;
 8005abc:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <pickStop+0x80>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <pickStop+0x84>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d002      	beq.n	8005ad0 <pickStop+0x28>
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d107      	bne.n	8005ade <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 8005ace:	e025      	b.n	8005b1c <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 8005ad0:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <pickStop+0x84>)
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8005ad6:	f7ff ffdd 	bl	8005a94 <gameStopUI>
				break;
 8005ada:	e000      	b.n	8005ade <pickStop+0x36>
			}
		}
 8005adc:	bf00      	nop
		if(button_count[7] == 1)
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <pickStop+0x7c>)
 8005ae0:	89db      	ldrh	r3, [r3, #14]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d10e      	bne.n	8005b04 <pickStop+0x5c>
		{
			flagStop = 1;
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <pickStop+0x80>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <pickStop+0x84>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d012      	beq.n	8005b1a <pickStop+0x72>
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d106      	bne.n	8005b06 <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <pickStop+0x84>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8005afe:	f7ff ffc9 	bl	8005a94 <gameStopUI>
				break;
 8005b02:	e000      	b.n	8005b06 <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 8005b04:	bf00      	nop
		if(flagStop == 1)
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <pickStop+0x80>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d106      	bne.n	8005b1c <pickStop+0x74>
		{
			gameStopUI();
 8005b0e:	f7ff ffc1 	bl	8005a94 <gameStopUI>
			flagStop = 0;
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <pickStop+0x80>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e000      	b.n	8005b1c <pickStop+0x74>
				return;
 8005b1a:	bf00      	nop
		}
	}
}
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200001b8 	.word	0x200001b8
 8005b24:	2000012c 	.word	0x2000012c
 8005b28:	200001c4 	.word	0x200001c4
 8005b2c:	2000005c 	.word	0x2000005c

08005b30 <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b097      	sub	sp, #92	; 0x5c
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d14d      	bne.n	8005bdc <initStopGame+0xac>
	{
		char str1[60] = "GAME_PLAY#";
 8005b40:	4a29      	ldr	r2, [pc, #164]	; (8005be8 <initStopGame+0xb8>)
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b48:	c303      	stmia	r3!, {r0, r1}
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	0c12      	lsrs	r2, r2, #16
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	f107 0313 	add.w	r3, r7, #19
 8005b56:	2231      	movs	r2, #49	; 0x31
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f004 f956 	bl	8009e0c <memset>
		char *str2 = convert2str(ID);
 8005b60:	4b22      	ldr	r3, [pc, #136]	; (8005bec <initStopGame+0xbc>)
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fc fe2f 	bl	80027c8 <convert2str>
 8005b6a:	6578      	str	r0, [r7, #84]	; 0x54
		strcat(str1, str2);
 8005b6c:	f107 0308 	add.w	r3, r7, #8
 8005b70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 f9f2 	bl	8009f5c <strcat>
		char str3[15] = "has stop game#";
 8005b78:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <initStopGame+0xc0>)
 8005b7a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8005b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b80:	c407      	stmia	r4!, {r0, r1, r2}
 8005b82:	8023      	strh	r3, [r4, #0]
 8005b84:	3402      	adds	r4, #2
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	7023      	strb	r3, [r4, #0]
		strcat(str1, str3);
 8005b8a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 f9e1 	bl	8009f5c <strcat>
		uart_EspSendBytes(str1, strlen(str1));
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fa fb16 	bl	80001d0 <strlen>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f107 0308 	add.w	r3, r7, #8
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fb08 	bl	80061c4 <uart_EspSendBytes>

		statusGame = STOPMODE;
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <initStopGame+0xc4>)
 8005bb6:	2206      	movs	r2, #6
 8005bb8:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 8005bba:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <initStopGame+0xc8>)
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fe fd27 	bl	8004614 <setTimerTiming>
		setTimerUart(0);
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fe fd7c 	bl	80046c4 <setTimerUart>
		setTimerGenerateWall(0);
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f7fe fd5d 	bl	800468c <setTimerGenerateWall>
		flagStop = 1;
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <initStopGame+0xcc>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
		pickStop();
 8005bd8:	f7ff ff66 	bl	8005aa8 <pickStop>
	}
	return 0;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	375c      	adds	r7, #92	; 0x5c
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd90      	pop	{r4, r7, pc}
 8005be6:	bf00      	nop
 8005be8:	0800b5ec 	.word	0x0800b5ec
 8005bec:	200001a4 	.word	0x200001a4
 8005bf0:	0800b628 	.word	0x0800b628
 8005bf4:	200001b8 	.word	0x200001b8
 8005bf8:	2000005c 	.word	0x2000005c
 8005bfc:	200001c4 	.word	0x200001c4

08005c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	return 1;
 8005c04:	2301      	movs	r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <_kill>:

int _kill(int pid, int sig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005c1a:	f004 f8cd 	bl	8009db8 <__errno>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2216      	movs	r2, #22
 8005c22:	601a      	str	r2, [r3, #0]
	return -1;
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_exit>:

void _exit (int status)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005c38:	f04f 31ff 	mov.w	r1, #4294967295
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ffe7 	bl	8005c10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005c42:	e7fe      	b.n	8005c42 <_exit+0x12>

08005c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e00a      	b.n	8005c6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c56:	f3af 8000 	nop.w
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	60ba      	str	r2, [r7, #8]
 8005c62:	b2ca      	uxtb	r2, r1
 8005c64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	dbf0      	blt.n	8005c56 <_read+0x12>
	}

return len;
 8005c74:	687b      	ldr	r3, [r7, #4]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e009      	b.n	8005ca4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	60ba      	str	r2, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	dbf1      	blt.n	8005c90 <_write+0x12>
	}
	return len;
 8005cac:	687b      	ldr	r3, [r7, #4]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <_close>:

int _close(int file)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cde:	605a      	str	r2, [r3, #4]
	return 0;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <_isatty>:

int _isatty(int file)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8005cf6:	2301      	movs	r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d28:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <_sbrk+0x5c>)
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <_sbrk+0x60>)
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <_sbrk+0x64>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <_sbrk+0x64>)
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <_sbrk+0x68>)
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <_sbrk+0x64>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d207      	bcs.n	8005d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d50:	f004 f832 	bl	8009db8 <__errno>
 8005d54:	4603      	mov	r3, r0
 8005d56:	220c      	movs	r2, #12
 8005d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5e:	e009      	b.n	8005d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <_sbrk+0x64>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <_sbrk+0x64>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <_sbrk+0x64>)
 8005d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20020000 	.word	0x20020000
 8005d80:	00000400 	.word	0x00000400
 8005d84:	200029bc 	.word	0x200029bc
 8005d88:	20002a68 	.word	0x20002a68

08005d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <SystemInit+0x20>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	4a05      	ldr	r2, [pc, #20]	; (8005dac <SystemInit+0x20>)
 8005d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005dd6:	f240 3247 	movw	r2, #839	; 0x347
 8005dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005de2:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005de4:	2263      	movs	r2, #99	; 0x63
 8005de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005de8:	4b16      	ldr	r3, [pc, #88]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005df6:	f002 fa0d 	bl	8008214 <HAL_TIM_Base_Init>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005e00:	f7fc fcdc 	bl	80027bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e0a:	f107 0308 	add.w	r3, r7, #8
 8005e0e:	4619      	mov	r1, r3
 8005e10:	480c      	ldr	r0, [pc, #48]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005e12:	f002 fbc7 	bl	80085a4 <HAL_TIM_ConfigClockSource>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005e1c:	f7fc fcce 	bl	80027bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e20:	2300      	movs	r3, #0
 8005e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e28:	463b      	mov	r3, r7
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4805      	ldr	r0, [pc, #20]	; (8005e44 <MX_TIM2_Init+0x94>)
 8005e2e:	f002 fde3 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005e38:	f7fc fcc0 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200029c0 	.word	0x200029c0

08005e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d115      	bne.n	8005e86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <HAL_TIM_Base_MspInit+0x48>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	4a0b      	ldr	r2, [pc, #44]	; (8005e90 <HAL_TIM_Base_MspInit+0x48>)
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6413      	str	r3, [r2, #64]	; 0x40
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_TIM_Base_MspInit+0x48>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	201c      	movs	r0, #28
 8005e7c:	f000 fcc3 	bl	8006806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005e80:	201c      	movs	r0, #28
 8005e82:	f000 fcdc 	bl	800683e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b095      	sub	sp, #84	; 0x54
 8005e98:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f7fb fdde 	bl	8001a5c <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005ea0:	4b6b      	ldr	r3, [pc, #428]	; (8006050 <setupTiming+0x1bc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	b298      	uxth	r0, r3
 8005ea6:	4b6b      	ldr	r3, [pc, #428]	; (8006054 <setupTiming+0x1c0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	b299      	uxth	r1, r3
 8005eac:	4b6a      	ldr	r3, [pc, #424]	; (8006058 <setupTiming+0x1c4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	; (800605c <setupTiming+0x1c8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	4c69      	ldr	r4, [pc, #420]	; (8006060 <setupTiming+0x1cc>)
 8005eba:	9400      	str	r4, [sp, #0]
 8005ebc:	f7fb ffd8 	bl	8001e70 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9302      	str	r3, [sp, #8]
 8005ec4:	2318      	movs	r3, #24
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	f248 4330 	movw	r3, #33840	; 0x8430
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ed2:	4a64      	ldr	r2, [pc, #400]	; (8006064 <setupTiming+0x1d0>)
 8005ed4:	2137      	movs	r1, #55	; 0x37
 8005ed6:	203c      	movs	r0, #60	; 0x3c
 8005ed8:	f7fc f9a4 	bl	8002224 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8005edc:	4a62      	ldr	r2, [pc, #392]	; (8006068 <setupTiming+0x1d4>)
 8005ede:	1d3b      	adds	r3, r7, #4
 8005ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ee4:	6018      	str	r0, [r3, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	8019      	strh	r1, [r3, #0]
 8005eea:	f107 030a 	add.w	r3, r7, #10
 8005eee:	222c      	movs	r2, #44	; 0x2c
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f003 ff8a 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 8005ef8:	4b5c      	ldr	r3, [pc, #368]	; (800606c <setupTiming+0x1d8>)
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fc fc63 	bl	80027c8 <convert2str>
 8005f02:	4603      	mov	r3, r0
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f004 f826 	bl	8009f5c <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8005f10:	1d3a      	adds	r2, r7, #4
 8005f12:	2300      	movs	r3, #0
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	2318      	movs	r3, #24
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	f248 4330 	movw	r3, #33840	; 0x8430
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f24:	2164      	movs	r1, #100	; 0x64
 8005f26:	2000      	movs	r0, #0
 8005f28:	f7fc f9e0 	bl	80022ec <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9302      	str	r3, [sp, #8]
 8005f30:	2318      	movs	r3, #24
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	f248 4330 	movw	r3, #33840	; 0x8430
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f3e:	4a4c      	ldr	r2, [pc, #304]	; (8006070 <setupTiming+0x1dc>)
 8005f40:	2196      	movs	r1, #150	; 0x96
 8005f42:	2000      	movs	r0, #0
 8005f44:	f7fc f9d2 	bl	80022ec <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9302      	str	r3, [sp, #8]
 8005f4c:	2318      	movs	r3, #24
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	f248 4330 	movw	r3, #33840	; 0x8430
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f5a:	4a46      	ldr	r2, [pc, #280]	; (8006074 <setupTiming+0x1e0>)
 8005f5c:	21d2      	movs	r1, #210	; 0xd2
 8005f5e:	2014      	movs	r0, #20
 8005f60:	f7fc f960 	bl	8002224 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8005f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	23f0      	movs	r3, #240	; 0xf0
 8005f6c:	22c8      	movs	r2, #200	; 0xc8
 8005f6e:	21d2      	movs	r1, #210	; 0xd2
 8005f70:	2096      	movs	r0, #150	; 0x96
 8005f72:	f7fb fe76 	bl	8001c62 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8005f76:	4b40      	ldr	r3, [pc, #256]	; (8006078 <setupTiming+0x1e4>)
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fc fc24 	bl	80027c8 <convert2str>
 8005f80:	4603      	mov	r3, r0
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8005f84:	4b3c      	ldr	r3, [pc, #240]	; (8006078 <setupTiming+0x1e4>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	2b77      	cmp	r3, #119	; 0x77
 8005f8a:	d80e      	bhi.n	8005faa <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	9302      	str	r3, [sp, #8]
 8005f90:	2318      	movs	r3, #24
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	f248 4330 	movw	r3, #33840	; 0x8430
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa0:	21d4      	movs	r1, #212	; 0xd4
 8005fa2:	20a5      	movs	r0, #165	; 0xa5
 8005fa4:	f7fc f93e 	bl	8002224 <lcd_ShowStr>
 8005fa8:	e00d      	b.n	8005fc6 <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8005faa:	2301      	movs	r3, #1
 8005fac:	9302      	str	r3, [sp, #8]
 8005fae:	2318      	movs	r3, #24
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	f248 4330 	movw	r3, #33840	; 0x8430
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fbe:	21d4      	movs	r1, #212	; 0xd4
 8005fc0:	209d      	movs	r0, #157	; 0x9d
 8005fc2:	f7fc f92f 	bl	8002224 <lcd_ShowStr>
	}

	if(TIMING < 120)
 8005fc6:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <setupTiming+0x1e4>)
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	2b77      	cmp	r3, #119	; 0x77
 8005fcc:	d81a      	bhi.n	8006004 <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 8005fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	23c8      	movs	r3, #200	; 0xc8
 8005fd6:	22b9      	movs	r2, #185	; 0xb9
 8005fd8:	21c8      	movs	r1, #200	; 0xc8
 8005fda:	20a5      	movs	r0, #165	; 0xa5
 8005fdc:	f7fb fdbd 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 8005fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	23c8      	movs	r3, #200	; 0xc8
 8005fe8:	22a5      	movs	r2, #165	; 0xa5
 8005fea:	21b4      	movs	r1, #180	; 0xb4
 8005fec:	20af      	movs	r0, #175	; 0xaf
 8005fee:	f7fb fdb4 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 8005ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	23b4      	movs	r3, #180	; 0xb4
 8005ffa:	22af      	movs	r2, #175	; 0xaf
 8005ffc:	21c8      	movs	r1, #200	; 0xc8
 8005ffe:	20b9      	movs	r0, #185	; 0xb9
 8006000:	f7fb fdab 	bl	8001b5a <lcd_DrawLine>
	}
	if(TIMING > 30)
 8006004:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <setupTiming+0x1e4>)
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	2b1e      	cmp	r3, #30
 800600a:	d91c      	bls.n	8006046 <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 800600c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	23fa      	movs	r3, #250	; 0xfa
 8006014:	22b9      	movs	r2, #185	; 0xb9
 8006016:	21fa      	movs	r1, #250	; 0xfa
 8006018:	20a5      	movs	r0, #165	; 0xa5
 800601a:	f7fb fd9e 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 800601e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006028:	22af      	movs	r2, #175	; 0xaf
 800602a:	21fa      	movs	r1, #250	; 0xfa
 800602c:	20a5      	movs	r0, #165	; 0xa5
 800602e:	f7fb fd94 	bl	8001b5a <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 8006032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800603c:	22af      	movs	r2, #175	; 0xaf
 800603e:	21fa      	movs	r1, #250	; 0xfa
 8006040:	20b9      	movs	r0, #185	; 0xb9
 8006042:	f7fb fd8a 	bl	8001b5a <lcd_DrawLine>
	}
}
 8006046:	bf00      	nop
 8006048:	3744      	adds	r7, #68	; 0x44
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	20000074 	.word	0x20000074
 8006054:	20000078 	.word	0x20000078
 8006058:	2000007c 	.word	0x2000007c
 800605c:	20000080 	.word	0x20000080
 8006060:	0800e7d0 	.word	0x0800e7d0
 8006064:	0800b638 	.word	0x0800b638
 8006068:	0800b660 	.word	0x0800b660
 800606c:	200001a4 	.word	0x200001a4
 8006070:	0800b648 	.word	0x0800b648
 8006074:	0800b658 	.word	0x0800b658
 8006078:	20000000 	.word	0x20000000

0800607c <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7fc f9f6 	bl	8002480 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2101      	movs	r1, #1
 8006098:	68b8      	ldr	r0, [r7, #8]
 800609a:	f7fc f9f1 	bl	8002480 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 800609e:	2200      	movs	r2, #0
 80060a0:	2102      	movs	r1, #2
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fc f9ec 	bl	8002480 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 80060a8:	2200      	movs	r2, #0
 80060aa:	2103      	movs	r1, #3
 80060ac:	6838      	ldr	r0, [r7, #0]
 80060ae:	f7fc f9e7 	bl	8002480 <led7_SetDigit>
	led7_SetColon(1);
 80060b2:	2001      	movs	r0, #1
 80060b4:	f7fc fa08 	bl	80024c8 <led7_SetColon>
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <showTiming>:

void showTiming()
{
 80060c0:	b5b0      	push	{r4, r5, r7, lr}
 80060c2:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <showTiming+0x6c>)
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <showTiming+0x70>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	099b      	lsrs	r3, r3, #6
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4618      	mov	r0, r3
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <showTiming+0x6c>)
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	4a16      	ldr	r2, [pc, #88]	; (8006134 <showTiming+0x74>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	461c      	mov	r4, r3
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <showTiming+0x6c>)
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <showTiming+0x74>)
 80060ea:	fba3 1302 	umull	r1, r3, r3, r2
 80060ee:	0959      	lsrs	r1, r3, #5
 80060f0:	460b      	mov	r3, r1
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	1a5b      	subs	r3, r3, r1
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <showTiming+0x78>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	08db      	lsrs	r3, r3, #3
 8006104:	b29b      	uxth	r3, r3
 8006106:	461d      	mov	r5, r3
 8006108:	4b08      	ldr	r3, [pc, #32]	; (800612c <showTiming+0x6c>)
 800610a:	881a      	ldrh	r2, [r3, #0]
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <showTiming+0x78>)
 800610e:	fba3 1302 	umull	r1, r3, r3, r2
 8006112:	08d9      	lsrs	r1, r3, #3
 8006114:	460b      	mov	r3, r1
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	462a      	mov	r2, r5
 8006122:	4621      	mov	r1, r4
 8006124:	f7ff ffaa 	bl	800607c <show7seg>
}
 8006128:	bf00      	nop
 800612a:	bdb0      	pop	{r4, r5, r7, pc}
 800612c:	20000000 	.word	0x20000000
 8006130:	1b4e81b5 	.word	0x1b4e81b5
 8006134:	88888889 	.word	0x88888889
 8006138:	cccccccd 	.word	0xcccccccd

0800613c <initTimingMode>:

void initTimingMode()
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <initTimingMode+0x54>)
 8006142:	88db      	ldrh	r3, [r3, #6]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10e      	bne.n	8006166 <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8006148:	4b12      	ldr	r3, [pc, #72]	; (8006194 <initTimingMode+0x58>)
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	331e      	adds	r3, #30
 800614e:	b29a      	uxth	r2, r3
 8006150:	4b10      	ldr	r3, [pc, #64]	; (8006194 <initTimingMode+0x58>)
 8006152:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <initTimingMode+0x58>)
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	2b78      	cmp	r3, #120	; 0x78
 800615a:	d902      	bls.n	8006162 <initTimingMode+0x26>
		{
			TIMING = 120;
 800615c:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <initTimingMode+0x58>)
 800615e:	2278      	movs	r2, #120	; 0x78
 8006160:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8006162:	f7ff fe97 	bl	8005e94 <setupTiming>
	}
	if(button_count[7] == 1)
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <initTimingMode+0x54>)
 8006168:	89db      	ldrh	r3, [r3, #14]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10e      	bne.n	800618c <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <initTimingMode+0x58>)
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	3b1e      	subs	r3, #30
 8006174:	b29a      	uxth	r2, r3
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <initTimingMode+0x58>)
 8006178:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <initTimingMode+0x58>)
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	2b1d      	cmp	r3, #29
 8006180:	d802      	bhi.n	8006188 <initTimingMode+0x4c>
		{
			TIMING = 30;
 8006182:	4b04      	ldr	r3, [pc, #16]	; (8006194 <initTimingMode+0x58>)
 8006184:	221e      	movs	r2, #30
 8006186:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8006188:	f7ff fe84 	bl	8005e94 <setupTiming>
	}
}
 800618c:	bf00      	nop
 800618e:	bd80      	pop	{r7, pc}
 8006190:	2000012c 	.word	0x2000012c
 8006194:	20000000 	.word	0x20000000

08006198 <uart_init_esp>:
//    uart_Rs232SendString(".");
//    sprintf((void*)msg,"%ld",num%100);
//    uart_Rs232SendString(msg);
//}

void uart_init_esp(){
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800619c:	2201      	movs	r2, #1
 800619e:	4906      	ldr	r1, [pc, #24]	; (80061b8 <uart_init_esp+0x20>)
 80061a0:	4806      	ldr	r0, [pc, #24]	; (80061bc <uart_init_esp+0x24>)
 80061a2:	f002 fd98 	bl	8008cd6 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 80061a6:	2201      	movs	r2, #1
 80061a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <uart_init_esp+0x28>)
 80061ae:	f000 fd8f 	bl	8006cd0 <HAL_GPIO_WritePin>
}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20002a08 	.word	0x20002a08
 80061bc:	20002a0c 	.word	0x20002a0c
 80061c0:	40021400 	.word	0x40021400

080061c4 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	230a      	movs	r3, #10
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4803      	ldr	r0, [pc, #12]	; (80061e4 <uart_EspSendBytes+0x20>)
 80061d8:	f002 fceb 	bl	8008bb2 <HAL_UART_Transmit>
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20002a0c 	.word	0x20002a0c

080061e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a11      	ldr	r2, [pc, #68]	; (800623c <HAL_UART_RxCpltCallback+0x54>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d11b      	bne.n	8006232 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_UART_RxCpltCallback+0x58>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b4f      	cmp	r3, #79	; 0x4f
 8006200:	d103      	bne.n	800620a <HAL_UART_RxCpltCallback+0x22>
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_UART_RxCpltCallback+0x5c>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e00e      	b.n	8006228 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'a') light_status = 0;
 800620a:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <HAL_UART_RxCpltCallback+0x58>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b61      	cmp	r3, #97	; 0x61
 8006210:	d103      	bne.n	800621a <HAL_UART_RxCpltCallback+0x32>
 8006212:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <HAL_UART_RxCpltCallback+0x60>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	e006      	b.n	8006228 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'A') light_status = 1;
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <HAL_UART_RxCpltCallback+0x58>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b41      	cmp	r3, #65	; 0x41
 8006220:	d102      	bne.n	8006228 <HAL_UART_RxCpltCallback+0x40>
 8006222:	4b09      	ldr	r3, [pc, #36]	; (8006248 <HAL_UART_RxCpltCallback+0x60>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006228:	2201      	movs	r2, #1
 800622a:	4905      	ldr	r1, [pc, #20]	; (8006240 <HAL_UART_RxCpltCallback+0x58>)
 800622c:	4807      	ldr	r0, [pc, #28]	; (800624c <HAL_UART_RxCpltCallback+0x64>)
 800622e:	f002 fd52 	bl	8008cd6 <HAL_UART_Receive_IT>
	}
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40004400 	.word	0x40004400
 8006240:	20002a08 	.word	0x20002a08
 8006244:	20002a09 	.word	0x20002a09
 8006248:	200001e8 	.word	0x200001e8
 800624c:	20002a0c 	.word	0x20002a0c

08006250 <uartSendContinuePlay>:
	strcat(str1, "#");
	uart_EspSendBytes(str1, strlen(str1));
}

void uartSendContinuePlay()
{
 8006250:	b5b0      	push	{r4, r5, r7, lr}
 8006252:	b0c0      	sub	sp, #256	; 0x100
 8006254:	af00      	add	r7, sp, #0
	char str1[70] = "GAME_PLAY#";
 8006256:	4a59      	ldr	r2, [pc, #356]	; (80063bc <uartSendContinuePlay+0x16c>)
 8006258:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800625c:	ca07      	ldmia	r2, {r0, r1, r2}
 800625e:	c303      	stmia	r3!, {r0, r1}
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	3302      	adds	r3, #2
 8006264:	0c12      	lsrs	r2, r2, #16
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	f107 03b3 	add.w	r3, r7, #179	; 0xb3
 800626c:	223b      	movs	r2, #59	; 0x3b
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f003 fdcb 	bl	8009e0c <memset>
	char *str2 = convert2str(ID);
 8006276:	4b52      	ldr	r3, [pc, #328]	; (80063c0 <uartSendContinuePlay+0x170>)
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7fc faa4 	bl	80027c8 <convert2str>
 8006280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	strcat(str1, str2);
 8006284:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006288:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800628c:	4618      	mov	r0, r3
 800628e:	f003 fe65 	bl	8009f5c <strcat>

	char str3[60] = "is continue playing game, time: ";
 8006292:	4b4c      	ldr	r3, [pc, #304]	; (80063c4 <uartSendContinuePlay+0x174>)
 8006294:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8006298:	461d      	mov	r5, r3
 800629a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800629c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	7023      	strb	r3, [r4, #0]
 80062a6:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	609a      	str	r2, [r3, #8]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	615a      	str	r2, [r3, #20]
 80062b8:	f8c3 2017 	str.w	r2, [r3, #23]
	char *str4 = convert2str(TOTALTIME);
 80062bc:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <uartSendContinuePlay+0x178>)
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fc fa81 	bl	80027c8 <convert2str>
 80062c6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	strcat(str3, str4);
 80062ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062ce:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80062d2:	4618      	mov	r0, r3
 80062d4:	f003 fe42 	bl	8009f5c <strcat>

	char str5[50] = ", score: ";
 80062d8:	4a3c      	ldr	r2, [pc, #240]	; (80063cc <uartSendContinuePlay+0x17c>)
 80062da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062de:	ca07      	ldmia	r2, {r0, r1, r2}
 80062e0:	c303      	stmia	r3!, {r0, r1}
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80062e8:	2228      	movs	r2, #40	; 0x28
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f003 fd8d 	bl	8009e0c <memset>
	char *str6 = convert2str(SCORE);
 80062f2:	4b37      	ldr	r3, [pc, #220]	; (80063d0 <uartSendContinuePlay+0x180>)
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fc fa66 	bl	80027c8 <convert2str>
 80062fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	strcat(str5, str6);
 8006300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006304:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8006308:	4618      	mov	r0, r3
 800630a:	f003 fe27 	bl	8009f5c <strcat>

	char str7[50] = ", performance: ";
 800630e:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <uartSendContinuePlay+0x184>)
 8006310:	1d3c      	adds	r4, r7, #4
 8006312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	2222      	movs	r2, #34	; 0x22
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f003 fd73 	bl	8009e0c <memset>
	char *str8 = convert2str(SCORE/TOTALTIME);
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <uartSendContinuePlay+0x180>)
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <uartSendContinuePlay+0x178>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	b29b      	uxth	r3, r3
 8006334:	4618      	mov	r0, r3
 8006336:	f7fc fa47 	bl	80027c8 <convert2str>
 800633a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	strcat(str7, str8);
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8006344:	4618      	mov	r0, r3
 8006346:	f003 fe09 	bl	8009f5c <strcat>

	strcat(str1, str3);
 800634a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800634e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006352:	4611      	mov	r1, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f003 fe01 	bl	8009f5c <strcat>
	strcat(str1, str5);
 800635a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800635e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f003 fdf9 	bl	8009f5c <strcat>
	strcat(str1, str7);
 800636a:	1d3a      	adds	r2, r7, #4
 800636c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f003 fdf2 	bl	8009f5c <strcat>
	strcat(str1, "#");
 8006378:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800637c:	4618      	mov	r0, r3
 800637e:	f7f9 ff27 	bl	80001d0 <strlen>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800638a:	4413      	add	r3, r2
 800638c:	4912      	ldr	r1, [pc, #72]	; (80063d8 <uartSendContinuePlay+0x188>)
 800638e:	461a      	mov	r2, r3
 8006390:	460b      	mov	r3, r1
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8006396:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800639a:	4618      	mov	r0, r3
 800639c:	f7f9 ff18 	bl	80001d0 <strlen>
 80063a0:	4603      	mov	r3, r0
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff ff0a 	bl	80061c4 <uart_EspSendBytes>
}
 80063b0:	bf00      	nop
 80063b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	0800b698 	.word	0x0800b698
 80063c0:	200001a4 	.word	0x200001a4
 80063c4:	0800b73c 	.word	0x0800b73c
 80063c8:	200001d0 	.word	0x200001d0
 80063cc:	0800b778 	.word	0x0800b778
 80063d0:	200001a6 	.word	0x200001a6
 80063d4:	0800b7ac 	.word	0x0800b7ac
 80063d8:	0800b694 	.word	0x0800b694

080063dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 80063e2:	4a12      	ldr	r2, [pc, #72]	; (800642c <MX_USART2_UART_Init+0x50>)
 80063e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 80063e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 8006402:	220c      	movs	r2, #12
 8006404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006406:	4b08      	ldr	r3, [pc, #32]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 800640e:	2200      	movs	r2, #0
 8006410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006412:	4805      	ldr	r0, [pc, #20]	; (8006428 <MX_USART2_UART_Init+0x4c>)
 8006414:	f002 fb80 	bl	8008b18 <HAL_UART_Init>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800641e:	f7fc f9cd 	bl	80027bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20002a0c 	.word	0x20002a0c
 800642c:	40004400 	.word	0x40004400

08006430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <HAL_UART_MspInit+0x94>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d133      	bne.n	80064ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006452:	2300      	movs	r3, #0
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <HAL_UART_MspInit+0x98>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_UART_MspInit+0x98>)
 800645c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006460:	6413      	str	r3, [r2, #64]	; 0x40
 8006462:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <HAL_UART_MspInit+0x98>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <HAL_UART_MspInit+0x98>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <HAL_UART_MspInit+0x98>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6313      	str	r3, [r2, #48]	; 0x30
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <HAL_UART_MspInit+0x98>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800648a:	230c      	movs	r3, #12
 800648c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648e:	2302      	movs	r3, #2
 8006490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006496:	2303      	movs	r3, #3
 8006498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800649a:	2307      	movs	r3, #7
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	4619      	mov	r1, r3
 80064a4:	4809      	ldr	r0, [pc, #36]	; (80064cc <HAL_UART_MspInit+0x9c>)
 80064a6:	f000 fa77 	bl	8006998 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80064aa:	2200      	movs	r2, #0
 80064ac:	2100      	movs	r1, #0
 80064ae:	2026      	movs	r0, #38	; 0x26
 80064b0:	f000 f9a9 	bl	8006806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064b4:	2026      	movs	r0, #38	; 0x26
 80064b6:	f000 f9c2 	bl	800683e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80064ba:	bf00      	nop
 80064bc:	3728      	adds	r7, #40	; 0x28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40004400 	.word	0x40004400
 80064c8:	40023800 	.word	0x40023800
 80064cc:	40020000 	.word	0x40020000

080064d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80064d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064d4:	480d      	ldr	r0, [pc, #52]	; (800650c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80064d6:	490e      	ldr	r1, [pc, #56]	; (8006510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80064d8:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064dc:	e002      	b.n	80064e4 <LoopCopyDataInit>

080064de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064e2:	3304      	adds	r3, #4

080064e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064e8:	d3f9      	bcc.n	80064de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064ea:	4a0b      	ldr	r2, [pc, #44]	; (8006518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064ec:	4c0b      	ldr	r4, [pc, #44]	; (800651c <LoopFillZerobss+0x26>)
  movs r3, #0
 80064ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064f0:	e001      	b.n	80064f6 <LoopFillZerobss>

080064f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064f4:	3204      	adds	r2, #4

080064f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064f8:	d3fb      	bcc.n	80064f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064fa:	f7ff fc47 	bl	8005d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064fe:	f003 fc61 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006502:	f7fc f801 	bl	8002508 <main>
  bx  lr    
 8006506:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800650c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006510:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8006514:	0800f570 	.word	0x0800f570
  ldr r2, =_sbss
 8006518:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800651c:	20002a64 	.word	0x20002a64

08006520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006520:	e7fe      	b.n	8006520 <ADC_IRQHandler>
	...

08006524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <HAL_Init+0x40>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <HAL_Init+0x40>)
 800652e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <HAL_Init+0x40>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_Init+0x40>)
 800653a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800653e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_Init+0x40>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a07      	ldr	r2, [pc, #28]	; (8006564 <HAL_Init+0x40>)
 8006546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800654c:	2003      	movs	r0, #3
 800654e:	f000 f94f 	bl	80067f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006552:	200f      	movs	r0, #15
 8006554:	f000 f808 	bl	8006568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006558:	f7ff f8c2 	bl	80056e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40023c00 	.word	0x40023c00

08006568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006570:	4b12      	ldr	r3, [pc, #72]	; (80065bc <HAL_InitTick+0x54>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_InitTick+0x58>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800657e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006582:	fbb2 f3f3 	udiv	r3, r2, r3
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f967 	bl	800685a <HAL_SYSTICK_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e00e      	b.n	80065b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b0f      	cmp	r3, #15
 800659a:	d80a      	bhi.n	80065b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800659c:	2200      	movs	r2, #0
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	f000 f92f 	bl	8006806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065a8:	4a06      	ldr	r2, [pc, #24]	; (80065c4 <HAL_InitTick+0x5c>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e000      	b.n	80065b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	200000a0 	.word	0x200000a0
 80065c0:	200000a8 	.word	0x200000a8
 80065c4:	200000a4 	.word	0x200000a4

080065c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <HAL_IncTick+0x20>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <HAL_IncTick+0x24>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4413      	add	r3, r2
 80065d8:	4a04      	ldr	r2, [pc, #16]	; (80065ec <HAL_IncTick+0x24>)
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	200000a8 	.word	0x200000a8
 80065ec:	20002a50 	.word	0x20002a50

080065f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return uwTick;
 80065f4:	4b03      	ldr	r3, [pc, #12]	; (8006604 <HAL_GetTick+0x14>)
 80065f6:	681b      	ldr	r3, [r3, #0]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20002a50 	.word	0x20002a50

08006608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006610:	f7ff ffee 	bl	80065f0 <HAL_GetTick>
 8006614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d005      	beq.n	800662e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <HAL_Delay+0x44>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800662e:	bf00      	nop
 8006630:	f7ff ffde 	bl	80065f0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	429a      	cmp	r2, r3
 800663e:	d8f7      	bhi.n	8006630 <HAL_Delay+0x28>
  {
  }
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200000a8 	.word	0x200000a8

08006650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006660:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <__NVIC_SetPriorityGrouping+0x44>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800666c:	4013      	ands	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800667c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006682:	4a04      	ldr	r2, [pc, #16]	; (8006694 <__NVIC_SetPriorityGrouping+0x44>)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	60d3      	str	r3, [r2, #12]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	e000ed00 	.word	0xe000ed00

08006698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <__NVIC_GetPriorityGrouping+0x18>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 0307 	and.w	r3, r3, #7
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	e000ed00 	.word	0xe000ed00

080066b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	db0b      	blt.n	80066de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	f003 021f 	and.w	r2, r3, #31
 80066cc:	4907      	ldr	r1, [pc, #28]	; (80066ec <__NVIC_EnableIRQ+0x38>)
 80066ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2001      	movs	r0, #1
 80066d6:	fa00 f202 	lsl.w	r2, r0, r2
 80066da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	e000e100 	.word	0xe000e100

080066f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006700:	2b00      	cmp	r3, #0
 8006702:	db0a      	blt.n	800671a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	490c      	ldr	r1, [pc, #48]	; (800673c <__NVIC_SetPriority+0x4c>)
 800670a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670e:	0112      	lsls	r2, r2, #4
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	440b      	add	r3, r1
 8006714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006718:	e00a      	b.n	8006730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4908      	ldr	r1, [pc, #32]	; (8006740 <__NVIC_SetPriority+0x50>)
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	3b04      	subs	r3, #4
 8006728:	0112      	lsls	r2, r2, #4
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	440b      	add	r3, r1
 800672e:	761a      	strb	r2, [r3, #24]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	e000e100 	.word	0xe000e100
 8006740:	e000ed00 	.word	0xe000ed00

08006744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006744:	b480      	push	{r7}
 8006746:	b089      	sub	sp, #36	; 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f1c3 0307 	rsb	r3, r3, #7
 800675e:	2b04      	cmp	r3, #4
 8006760:	bf28      	it	cs
 8006762:	2304      	movcs	r3, #4
 8006764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	3304      	adds	r3, #4
 800676a:	2b06      	cmp	r3, #6
 800676c:	d902      	bls.n	8006774 <NVIC_EncodePriority+0x30>
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3b03      	subs	r3, #3
 8006772:	e000      	b.n	8006776 <NVIC_EncodePriority+0x32>
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	401a      	ands	r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800678c:	f04f 31ff 	mov.w	r1, #4294967295
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	fa01 f303 	lsl.w	r3, r1, r3
 8006796:	43d9      	mvns	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800679c:	4313      	orrs	r3, r2
         );
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3724      	adds	r7, #36	; 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067bc:	d301      	bcc.n	80067c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067be:	2301      	movs	r3, #1
 80067c0:	e00f      	b.n	80067e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <SysTick_Config+0x40>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067ca:	210f      	movs	r1, #15
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	f7ff ff8e 	bl	80066f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <SysTick_Config+0x40>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067da:	4b04      	ldr	r3, [pc, #16]	; (80067ec <SysTick_Config+0x40>)
 80067dc:	2207      	movs	r2, #7
 80067de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	e000e010 	.word	0xe000e010

080067f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff29 	bl	8006650 <__NVIC_SetPriorityGrouping>
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	4603      	mov	r3, r0
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006818:	f7ff ff3e 	bl	8006698 <__NVIC_GetPriorityGrouping>
 800681c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	6978      	ldr	r0, [r7, #20]
 8006824:	f7ff ff8e 	bl	8006744 <NVIC_EncodePriority>
 8006828:	4602      	mov	r2, r0
 800682a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ff5d 	bl	80066f0 <__NVIC_SetPriority>
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	4603      	mov	r3, r0
 8006846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff ff31 	bl	80066b4 <__NVIC_EnableIRQ>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ffa2 	bl	80067ac <SysTick_Config>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006880:	f7ff feb6 	bl	80065f0 <HAL_GetTick>
 8006884:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d008      	beq.n	80068a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e052      	b.n	800694a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0216 	bic.w	r2, r2, #22
 80068b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <HAL_DMA_Abort+0x62>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0208 	bic.w	r2, r2, #8
 80068e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068f4:	e013      	b.n	800691e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068f6:	f7ff fe7b 	bl	80065f0 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b05      	cmp	r3, #5
 8006902:	d90c      	bls.n	800691e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2203      	movs	r2, #3
 800690e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e015      	b.n	800694a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	223f      	movs	r2, #63	; 0x3f
 8006932:	409a      	lsls	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d004      	beq.n	8006970 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2280      	movs	r2, #128	; 0x80
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e00c      	b.n	800698a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2205      	movs	r2, #5
 8006974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e16b      	b.n	8006c8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069b4:	2201      	movs	r2, #1
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4013      	ands	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	f040 815a 	bne.w	8006c86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d005      	beq.n	80069ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d130      	bne.n	8006a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	2203      	movs	r2, #3
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	43db      	mvns	r3, r3
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	4013      	ands	r3, r2
 8006a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a20:	2201      	movs	r2, #1
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 0201 	and.w	r2, r3, #1
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d017      	beq.n	8006a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	2203      	movs	r2, #3
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d123      	bne.n	8006adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	08da      	lsrs	r2, r3, #3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3208      	adds	r2, #8
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	220f      	movs	r2, #15
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	08da      	lsrs	r2, r3, #3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3208      	adds	r2, #8
 8006ad6:	69b9      	ldr	r1, [r7, #24]
 8006ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f003 0203 	and.w	r2, r3, #3
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80b4 	beq.w	8006c86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	4b60      	ldr	r3, [pc, #384]	; (8006ca4 <HAL_GPIO_Init+0x30c>)
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	4a5f      	ldr	r2, [pc, #380]	; (8006ca4 <HAL_GPIO_Init+0x30c>)
 8006b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b2e:	4b5d      	ldr	r3, [pc, #372]	; (8006ca4 <HAL_GPIO_Init+0x30c>)
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b3a:	4a5b      	ldr	r2, [pc, #364]	; (8006ca8 <HAL_GPIO_Init+0x310>)
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	3302      	adds	r3, #2
 8006b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	220f      	movs	r2, #15
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a52      	ldr	r2, [pc, #328]	; (8006cac <HAL_GPIO_Init+0x314>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d02b      	beq.n	8006bbe <HAL_GPIO_Init+0x226>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a51      	ldr	r2, [pc, #324]	; (8006cb0 <HAL_GPIO_Init+0x318>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d025      	beq.n	8006bba <HAL_GPIO_Init+0x222>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a50      	ldr	r2, [pc, #320]	; (8006cb4 <HAL_GPIO_Init+0x31c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01f      	beq.n	8006bb6 <HAL_GPIO_Init+0x21e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4f      	ldr	r2, [pc, #316]	; (8006cb8 <HAL_GPIO_Init+0x320>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d019      	beq.n	8006bb2 <HAL_GPIO_Init+0x21a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a4e      	ldr	r2, [pc, #312]	; (8006cbc <HAL_GPIO_Init+0x324>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_GPIO_Init+0x216>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a4d      	ldr	r2, [pc, #308]	; (8006cc0 <HAL_GPIO_Init+0x328>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00d      	beq.n	8006baa <HAL_GPIO_Init+0x212>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a4c      	ldr	r2, [pc, #304]	; (8006cc4 <HAL_GPIO_Init+0x32c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <HAL_GPIO_Init+0x20e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a4b      	ldr	r2, [pc, #300]	; (8006cc8 <HAL_GPIO_Init+0x330>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <HAL_GPIO_Init+0x20a>
 8006b9e:	2307      	movs	r3, #7
 8006ba0:	e00e      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	e00c      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006ba6:	2306      	movs	r3, #6
 8006ba8:	e00a      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006baa:	2305      	movs	r3, #5
 8006bac:	e008      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006bae:	2304      	movs	r3, #4
 8006bb0:	e006      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e004      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e002      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <HAL_GPIO_Init+0x228>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	f002 0203 	and.w	r2, r2, #3
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	4093      	lsls	r3, r2
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bd0:	4935      	ldr	r1, [pc, #212]	; (8006ca8 <HAL_GPIO_Init+0x310>)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	089b      	lsrs	r3, r3, #2
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bde:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	43db      	mvns	r3, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4013      	ands	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c02:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c08:	4b30      	ldr	r3, [pc, #192]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c2c:	4a27      	ldr	r2, [pc, #156]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c56:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c80:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2b0f      	cmp	r3, #15
 8006c90:	f67f ae90 	bls.w	80069b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3724      	adds	r7, #36	; 0x24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40013800 	.word	0x40013800
 8006cac:	40020000 	.word	0x40020000
 8006cb0:	40020400 	.word	0x40020400
 8006cb4:	40020800 	.word	0x40020800
 8006cb8:	40020c00 	.word	0x40020c00
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40021400 	.word	0x40021400
 8006cc4:	40021800 	.word	0x40021800
 8006cc8:	40021c00 	.word	0x40021c00
 8006ccc:	40013c00 	.word	0x40013c00

08006cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	807b      	strh	r3, [r7, #2]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ce0:	787b      	ldrb	r3, [r7, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006cec:	e003      	b.n	8006cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cee:	887b      	ldrh	r3, [r7, #2]
 8006cf0:	041a      	lsls	r2, r3, #16
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	619a      	str	r2, [r3, #24]
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e267      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d075      	beq.n	8006e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d22:	4b88      	ldr	r3, [pc, #544]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d00c      	beq.n	8006d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d2e:	4b85      	ldr	r3, [pc, #532]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d112      	bne.n	8006d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d3a:	4b82      	ldr	r3, [pc, #520]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d46:	d10b      	bne.n	8006d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d48:	4b7e      	ldr	r3, [pc, #504]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05b      	beq.n	8006e0c <HAL_RCC_OscConfig+0x108>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d157      	bne.n	8006e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e242      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d68:	d106      	bne.n	8006d78 <HAL_RCC_OscConfig+0x74>
 8006d6a:	4b76      	ldr	r3, [pc, #472]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a75      	ldr	r2, [pc, #468]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e01d      	b.n	8006db4 <HAL_RCC_OscConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x98>
 8006d82:	4b70      	ldr	r3, [pc, #448]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a6f      	ldr	r2, [pc, #444]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	4b6d      	ldr	r3, [pc, #436]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a6c      	ldr	r2, [pc, #432]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e00b      	b.n	8006db4 <HAL_RCC_OscConfig+0xb0>
 8006d9c:	4b69      	ldr	r3, [pc, #420]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a68      	ldr	r2, [pc, #416]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	4b66      	ldr	r3, [pc, #408]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a65      	ldr	r2, [pc, #404]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d013      	beq.n	8006de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dbc:	f7ff fc18 	bl	80065f0 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc4:	f7ff fc14 	bl	80065f0 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b64      	cmp	r3, #100	; 0x64
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e207      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd6:	4b5b      	ldr	r3, [pc, #364]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0f0      	beq.n	8006dc4 <HAL_RCC_OscConfig+0xc0>
 8006de2:	e014      	b.n	8006e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7ff fc04 	bl	80065f0 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dec:	f7ff fc00 	bl	80065f0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b64      	cmp	r3, #100	; 0x64
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e1f3      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfe:	4b51      	ldr	r3, [pc, #324]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0xe8>
 8006e0a:	e000      	b.n	8006e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d063      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e1a:	4b4a      	ldr	r3, [pc, #296]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e26:	4b47      	ldr	r3, [pc, #284]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d11c      	bne.n	8006e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e32:	4b44      	ldr	r3, [pc, #272]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d116      	bne.n	8006e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e3e:	4b41      	ldr	r3, [pc, #260]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_RCC_OscConfig+0x152>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d001      	beq.n	8006e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e1c7      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e56:	4b3b      	ldr	r3, [pc, #236]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4937      	ldr	r1, [pc, #220]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6a:	e03a      	b.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d020      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e74:	4b34      	ldr	r3, [pc, #208]	; (8006f48 <HAL_RCC_OscConfig+0x244>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7ff fbb9 	bl	80065f0 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e82:	f7ff fbb5 	bl	80065f0 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e1a8      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e94:	4b2b      	ldr	r3, [pc, #172]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea0:	4b28      	ldr	r3, [pc, #160]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4925      	ldr	r1, [pc, #148]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	600b      	str	r3, [r1, #0]
 8006eb4:	e015      	b.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb6:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <HAL_RCC_OscConfig+0x244>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7ff fb98 	bl	80065f0 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec4:	f7ff fb94 	bl	80065f0 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e187      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed6:	4b1b      	ldr	r3, [pc, #108]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d036      	beq.n	8006f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d016      	beq.n	8006f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_RCC_OscConfig+0x248>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efc:	f7ff fb78 	bl	80065f0 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f04:	f7ff fb74 	bl	80065f0 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e167      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <HAL_RCC_OscConfig+0x240>)
 8006f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0f0      	beq.n	8006f04 <HAL_RCC_OscConfig+0x200>
 8006f22:	e01b      	b.n	8006f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_OscConfig+0x248>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2a:	f7ff fb61 	bl	80065f0 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f30:	e00e      	b.n	8006f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f32:	f7ff fb5d 	bl	80065f0 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d907      	bls.n	8006f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e150      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
 8006f44:	40023800 	.word	0x40023800
 8006f48:	42470000 	.word	0x42470000
 8006f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f50:	4b88      	ldr	r3, [pc, #544]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1ea      	bne.n	8006f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8097 	beq.w	8007098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f6e:	4b81      	ldr	r3, [pc, #516]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10f      	bne.n	8006f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	4b7d      	ldr	r3, [pc, #500]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	4a7c      	ldr	r2, [pc, #496]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6413      	str	r3, [r2, #64]	; 0x40
 8006f8a:	4b7a      	ldr	r3, [pc, #488]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9a:	4b77      	ldr	r3, [pc, #476]	; (8007178 <HAL_RCC_OscConfig+0x474>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d118      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fa6:	4b74      	ldr	r3, [pc, #464]	; (8007178 <HAL_RCC_OscConfig+0x474>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a73      	ldr	r2, [pc, #460]	; (8007178 <HAL_RCC_OscConfig+0x474>)
 8006fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb2:	f7ff fb1d 	bl	80065f0 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fba:	f7ff fb19 	bl	80065f0 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e10c      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fcc:	4b6a      	ldr	r3, [pc, #424]	; (8007178 <HAL_RCC_OscConfig+0x474>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d106      	bne.n	8006fee <HAL_RCC_OscConfig+0x2ea>
 8006fe0:	4b64      	ldr	r3, [pc, #400]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	4a63      	ldr	r2, [pc, #396]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	6713      	str	r3, [r2, #112]	; 0x70
 8006fec:	e01c      	b.n	8007028 <HAL_RCC_OscConfig+0x324>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCC_OscConfig+0x30c>
 8006ff6:	4b5f      	ldr	r3, [pc, #380]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	4a5e      	ldr	r2, [pc, #376]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	f043 0304 	orr.w	r3, r3, #4
 8007000:	6713      	str	r3, [r2, #112]	; 0x70
 8007002:	4b5c      	ldr	r3, [pc, #368]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	4a5b      	ldr	r2, [pc, #364]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	6713      	str	r3, [r2, #112]	; 0x70
 800700e:	e00b      	b.n	8007028 <HAL_RCC_OscConfig+0x324>
 8007010:	4b58      	ldr	r3, [pc, #352]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	4a57      	ldr	r2, [pc, #348]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	6713      	str	r3, [r2, #112]	; 0x70
 800701c:	4b55      	ldr	r3, [pc, #340]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a54      	ldr	r2, [pc, #336]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007022:	f023 0304 	bic.w	r3, r3, #4
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d015      	beq.n	800705c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007030:	f7ff fade 	bl	80065f0 <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007036:	e00a      	b.n	800704e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007038:	f7ff fada 	bl	80065f0 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	; 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e0cb      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704e:	4b49      	ldr	r3, [pc, #292]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0ee      	beq.n	8007038 <HAL_RCC_OscConfig+0x334>
 800705a:	e014      	b.n	8007086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705c:	f7ff fac8 	bl	80065f0 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007062:	e00a      	b.n	800707a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007064:	f7ff fac4 	bl	80065f0 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e0b5      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800707a:	4b3e      	ldr	r3, [pc, #248]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1ee      	bne.n	8007064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d105      	bne.n	8007098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800708c:	4b39      	ldr	r3, [pc, #228]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	4a38      	ldr	r2, [pc, #224]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80a1 	beq.w	80071e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070a2:	4b34      	ldr	r3, [pc, #208]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 030c 	and.w	r3, r3, #12
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d05c      	beq.n	8007168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d141      	bne.n	800713a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b6:	4b31      	ldr	r3, [pc, #196]	; (800717c <HAL_RCC_OscConfig+0x478>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070bc:	f7ff fa98 	bl	80065f0 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c4:	f7ff fa94 	bl	80065f0 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e087      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d6:	4b27      	ldr	r3, [pc, #156]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	3b01      	subs	r3, #1
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	491b      	ldr	r1, [pc, #108]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <HAL_RCC_OscConfig+0x478>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007112:	f7ff fa6d 	bl	80065f0 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800711a:	f7ff fa69 	bl	80065f0 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e05c      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712c:	4b11      	ldr	r3, [pc, #68]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x416>
 8007138:	e054      	b.n	80071e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <HAL_RCC_OscConfig+0x478>)
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007140:	f7ff fa56 	bl	80065f0 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007148:	f7ff fa52 	bl	80065f0 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e045      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_RCC_OscConfig+0x470>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x444>
 8007166:	e03d      	b.n	80071e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d107      	bne.n	8007180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e038      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
 8007174:	40023800 	.word	0x40023800
 8007178:	40007000 	.word	0x40007000
 800717c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007180:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <HAL_RCC_OscConfig+0x4ec>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d028      	beq.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007198:	429a      	cmp	r2, r3
 800719a:	d121      	bne.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d11a      	bne.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d111      	bne.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	3b01      	subs	r3, #1
 80071ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d107      	bne.n	80071e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071dc:	429a      	cmp	r2, r3
 80071de:	d001      	beq.n	80071e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40023800 	.word	0x40023800

080071f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e0cc      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007208:	4b68      	ldr	r3, [pc, #416]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d90c      	bls.n	8007230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007216:	4b65      	ldr	r3, [pc, #404]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721e:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d001      	beq.n	8007230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0b8      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d020      	beq.n	800727e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007248:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007260:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4a52      	ldr	r2, [pc, #328]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800726a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800726c:	4b50      	ldr	r3, [pc, #320]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	494d      	ldr	r1, [pc, #308]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d044      	beq.n	8007314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d107      	bne.n	80072a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007292:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d119      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e07f      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d003      	beq.n	80072b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d107      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b2:	4b3f      	ldr	r3, [pc, #252]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e06f      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c2:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e067      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072d2:	4b37      	ldr	r3, [pc, #220]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f023 0203 	bic.w	r2, r3, #3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4934      	ldr	r1, [pc, #208]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072e4:	f7ff f984 	bl	80065f0 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ea:	e00a      	b.n	8007302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072ec:	f7ff f980 	bl	80065f0 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e04f      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007302:	4b2b      	ldr	r3, [pc, #172]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 020c 	and.w	r2, r3, #12
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	429a      	cmp	r2, r3
 8007312:	d1eb      	bne.n	80072ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d20c      	bcs.n	800733c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007322:	4b22      	ldr	r3, [pc, #136]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800732a:	4b20      	ldr	r3, [pc, #128]	; (80073ac <HAL_RCC_ClockConfig+0x1b8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d001      	beq.n	800733c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e032      	b.n	80073a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007348:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4916      	ldr	r1, [pc, #88]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007356:	4313      	orrs	r3, r2
 8007358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007366:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	490e      	ldr	r1, [pc, #56]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007376:	4313      	orrs	r3, r2
 8007378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800737a:	f000 f821 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 800737e:	4602      	mov	r2, r0
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	490a      	ldr	r1, [pc, #40]	; (80073b4 <HAL_RCC_ClockConfig+0x1c0>)
 800738c:	5ccb      	ldrb	r3, [r1, r3]
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007396:	4b09      	ldr	r3, [pc, #36]	; (80073bc <HAL_RCC_ClockConfig+0x1c8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff f8e4 	bl	8006568 <HAL_InitTick>

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40023c00 	.word	0x40023c00
 80073b0:	40023800 	.word	0x40023800
 80073b4:	0800f400 	.word	0x0800f400
 80073b8:	200000a0 	.word	0x200000a0
 80073bc:	200000a4 	.word	0x200000a4

080073c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c4:	b094      	sub	sp, #80	; 0x50
 80073c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	647b      	str	r3, [r7, #68]	; 0x44
 80073cc:	2300      	movs	r3, #0
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d0:	2300      	movs	r3, #0
 80073d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073d8:	4b79      	ldr	r3, [pc, #484]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 030c 	and.w	r3, r3, #12
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d00d      	beq.n	8007400 <HAL_RCC_GetSysClockFreq+0x40>
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	f200 80e1 	bhi.w	80075ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_RCC_GetSysClockFreq+0x34>
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d003      	beq.n	80073fa <HAL_RCC_GetSysClockFreq+0x3a>
 80073f2:	e0db      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073f4:	4b73      	ldr	r3, [pc, #460]	; (80075c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80073f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80073f8:	e0db      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073fa:	4b73      	ldr	r3, [pc, #460]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80073fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073fe:	e0d8      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007400:	4b6f      	ldr	r3, [pc, #444]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007408:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800740a:	4b6d      	ldr	r3, [pc, #436]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d063      	beq.n	80074de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007416:	4b6a      	ldr	r3, [pc, #424]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	099b      	lsrs	r3, r3, #6
 800741c:	2200      	movs	r2, #0
 800741e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007420:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
 800742e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	f04f 0000 	mov.w	r0, #0
 800743a:	f04f 0100 	mov.w	r1, #0
 800743e:	0159      	lsls	r1, r3, #5
 8007440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007444:	0150      	lsls	r0, r2, #5
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4621      	mov	r1, r4
 800744c:	1a51      	subs	r1, r2, r1
 800744e:	6139      	str	r1, [r7, #16]
 8007450:	4629      	mov	r1, r5
 8007452:	eb63 0301 	sbc.w	r3, r3, r1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007464:	4659      	mov	r1, fp
 8007466:	018b      	lsls	r3, r1, #6
 8007468:	4651      	mov	r1, sl
 800746a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800746e:	4651      	mov	r1, sl
 8007470:	018a      	lsls	r2, r1, #6
 8007472:	4651      	mov	r1, sl
 8007474:	ebb2 0801 	subs.w	r8, r2, r1
 8007478:	4659      	mov	r1, fp
 800747a:	eb63 0901 	sbc.w	r9, r3, r1
 800747e:	f04f 0200 	mov.w	r2, #0
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800748a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007492:	4690      	mov	r8, r2
 8007494:	4699      	mov	r9, r3
 8007496:	4623      	mov	r3, r4
 8007498:	eb18 0303 	adds.w	r3, r8, r3
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	462b      	mov	r3, r5
 80074a0:	eb49 0303 	adc.w	r3, r9, r3
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074b2:	4629      	mov	r1, r5
 80074b4:	024b      	lsls	r3, r1, #9
 80074b6:	4621      	mov	r1, r4
 80074b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074bc:	4621      	mov	r1, r4
 80074be:	024a      	lsls	r2, r1, #9
 80074c0:	4610      	mov	r0, r2
 80074c2:	4619      	mov	r1, r3
 80074c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c6:	2200      	movs	r2, #0
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074d0:	f7f8 fed6 	bl	8000280 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4613      	mov	r3, r2
 80074da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074dc:	e058      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074de:	4b38      	ldr	r3, [pc, #224]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	099b      	lsrs	r3, r3, #6
 80074e4:	2200      	movs	r2, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	4611      	mov	r1, r2
 80074ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074ee:	623b      	str	r3, [r7, #32]
 80074f0:	2300      	movs	r3, #0
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
 80074f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	f04f 0000 	mov.w	r0, #0
 8007500:	f04f 0100 	mov.w	r1, #0
 8007504:	0159      	lsls	r1, r3, #5
 8007506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800750a:	0150      	lsls	r0, r2, #5
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4641      	mov	r1, r8
 8007512:	ebb2 0a01 	subs.w	sl, r2, r1
 8007516:	4649      	mov	r1, r9
 8007518:	eb63 0b01 	sbc.w	fp, r3, r1
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800752c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007530:	ebb2 040a 	subs.w	r4, r2, sl
 8007534:	eb63 050b 	sbc.w	r5, r3, fp
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	00eb      	lsls	r3, r5, #3
 8007542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007546:	00e2      	lsls	r2, r4, #3
 8007548:	4614      	mov	r4, r2
 800754a:	461d      	mov	r5, r3
 800754c:	4643      	mov	r3, r8
 800754e:	18e3      	adds	r3, r4, r3
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	464b      	mov	r3, r9
 8007554:	eb45 0303 	adc.w	r3, r5, r3
 8007558:	607b      	str	r3, [r7, #4]
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007566:	4629      	mov	r1, r5
 8007568:	028b      	lsls	r3, r1, #10
 800756a:	4621      	mov	r1, r4
 800756c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007570:	4621      	mov	r1, r4
 8007572:	028a      	lsls	r2, r1, #10
 8007574:	4610      	mov	r0, r2
 8007576:	4619      	mov	r1, r3
 8007578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800757a:	2200      	movs	r2, #0
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	61fa      	str	r2, [r7, #28]
 8007580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007584:	f7f8 fe7c 	bl	8000280 <__aeabi_uldivmod>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4613      	mov	r3, r2
 800758e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	3301      	adds	r3, #1
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80075a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075aa:	e002      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80075ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3750      	adds	r7, #80	; 0x50
 80075b8:	46bd      	mov	sp, r7
 80075ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075be:	bf00      	nop
 80075c0:	40023800 	.word	0x40023800
 80075c4:	00f42400 	.word	0x00f42400
 80075c8:	007a1200 	.word	0x007a1200

080075cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d0:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80075d2:	681b      	ldr	r3, [r3, #0]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	200000a0 	.word	0x200000a0

080075e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075e8:	f7ff fff0 	bl	80075cc <HAL_RCC_GetHCLKFreq>
 80075ec:	4602      	mov	r2, r0
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	0a9b      	lsrs	r3, r3, #10
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	4903      	ldr	r1, [pc, #12]	; (8007608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075fa:	5ccb      	ldrb	r3, [r1, r3]
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007600:	4618      	mov	r0, r3
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40023800 	.word	0x40023800
 8007608:	0800f410 	.word	0x0800f410

0800760c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007610:	f7ff ffdc 	bl	80075cc <HAL_RCC_GetHCLKFreq>
 8007614:	4602      	mov	r2, r0
 8007616:	4b05      	ldr	r3, [pc, #20]	; (800762c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	0b5b      	lsrs	r3, r3, #13
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	4903      	ldr	r1, [pc, #12]	; (8007630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007622:	5ccb      	ldrb	r3, [r1, r3]
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40023800 	.word	0x40023800
 8007630:	0800f410 	.word	0x0800f410

08007634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e07b      	b.n	800773e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007656:	d009      	beq.n	800766c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	61da      	str	r2, [r3, #28]
 800765e:	e005      	b.n	800766c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fd f92e 	bl	80048e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	ea42 0103 	orr.w	r1, r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	f003 0104 	and.w	r1, r3, #4
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	f003 0210 	and.w	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800772c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b088      	sub	sp, #32
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_SPI_Transmit+0x22>
 8007764:	2302      	movs	r3, #2
 8007766:	e126      	b.n	80079b6 <HAL_SPI_Transmit+0x270>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007770:	f7fe ff3e 	bl	80065f0 <HAL_GetTick>
 8007774:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b01      	cmp	r3, #1
 8007784:	d002      	beq.n	800778c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007786:	2302      	movs	r3, #2
 8007788:	77fb      	strb	r3, [r7, #31]
    goto error;
 800778a:	e10b      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_SPI_Transmit+0x52>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800779c:	e102      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2203      	movs	r2, #3
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e4:	d10f      	bne.n	8007806 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007804:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d007      	beq.n	8007824 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800782c:	d14b      	bne.n	80078c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_SPI_Transmit+0xf6>
 8007836:	8afb      	ldrh	r3, [r7, #22]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d13e      	bne.n	80078ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	881a      	ldrh	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	1c9a      	adds	r2, r3, #2
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007860:	e02b      	b.n	80078ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d112      	bne.n	8007896 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007874:	881a      	ldrh	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	1c9a      	adds	r2, r3, #2
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	86da      	strh	r2, [r3, #54]	; 0x36
 8007894:	e011      	b.n	80078ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007896:	f7fe feab 	bl	80065f0 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d803      	bhi.n	80078ae <HAL_SPI_Transmit+0x168>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d102      	bne.n	80078b4 <HAL_SPI_Transmit+0x16e>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078b8:	e074      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1ce      	bne.n	8007862 <HAL_SPI_Transmit+0x11c>
 80078c4:	e04c      	b.n	8007960 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_SPI_Transmit+0x18e>
 80078ce:	8afb      	ldrh	r3, [r7, #22]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d140      	bne.n	8007956 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	7812      	ldrb	r2, [r2, #0]
 80078e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078fa:	e02c      	b.n	8007956 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b02      	cmp	r3, #2
 8007908:	d113      	bne.n	8007932 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007930:	e011      	b.n	8007956 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007932:	f7fe fe5d 	bl	80065f0 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d803      	bhi.n	800794a <HAL_SPI_Transmit+0x204>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d102      	bne.n	8007950 <HAL_SPI_Transmit+0x20a>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007954:	e026      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1cd      	bne.n	80078fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fbcb 	bl	8008100 <SPI_EndRxTxTransaction>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e000      	b.n	80079a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80079a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b088      	sub	sp, #32
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	603b      	str	r3, [r7, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079da:	d112      	bne.n	8007a02 <HAL_SPI_Receive+0x44>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10e      	bne.n	8007a02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2204      	movs	r2, #4
 80079e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	4613      	mov	r3, r2
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f8f1 	bl	8007be0 <HAL_SPI_TransmitReceive>
 80079fe:	4603      	mov	r3, r0
 8007a00:	e0ea      	b.n	8007bd8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_SPI_Receive+0x52>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e0e3      	b.n	8007bd8 <HAL_SPI_Receive+0x21a>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a18:	f7fe fdea 	bl	80065f0 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d002      	beq.n	8007a30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a2e:	e0ca      	b.n	8007bc6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_SPI_Receive+0x7e>
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a40:	e0c1      	b.n	8007bc6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2204      	movs	r2, #4
 8007a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	88fa      	ldrh	r2, [r7, #6]
 8007a60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a88:	d10f      	bne.n	8007aaa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007aa8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d007      	beq.n	8007ac8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ac6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d162      	bne.n	8007b96 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ad0:	e02e      	b.n	8007b30 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d115      	bne.n	8007b0c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f103 020c 	add.w	r2, r3, #12
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b0a:	e011      	b.n	8007b30 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b0c:	f7fe fd70 	bl	80065f0 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d803      	bhi.n	8007b24 <HAL_SPI_Receive+0x166>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d102      	bne.n	8007b2a <HAL_SPI_Receive+0x16c>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b2e:	e04a      	b.n	8007bc6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1cb      	bne.n	8007ad2 <HAL_SPI_Receive+0x114>
 8007b3a:	e031      	b.n	8007ba0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d113      	bne.n	8007b72 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	b292      	uxth	r2, r2
 8007b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	1c9a      	adds	r2, r3, #2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b70:	e011      	b.n	8007b96 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b72:	f7fe fd3d 	bl	80065f0 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d803      	bhi.n	8007b8a <HAL_SPI_Receive+0x1cc>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d102      	bne.n	8007b90 <HAL_SPI_Receive+0x1d2>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b94:	e017      	b.n	8007bc6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1cd      	bne.n	8007b3c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fa45 	bl	8008034 <SPI_EndRxTransaction>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	75fb      	strb	r3, [r7, #23]
 8007bc2:	e000      	b.n	8007bc6 <HAL_SPI_Receive+0x208>
  }

error :
 8007bc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	; 0x30
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_SPI_TransmitReceive+0x26>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e18a      	b.n	8007f1c <HAL_SPI_TransmitReceive+0x33c>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c0e:	f7fe fcef 	bl	80065f0 <HAL_GetTick>
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c24:	887b      	ldrh	r3, [r7, #2]
 8007c26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d00f      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x70>
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c36:	d107      	bne.n	8007c48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <HAL_SPI_TransmitReceive+0x68>
 8007c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d003      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c4e:	e15b      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x82>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x82>
 8007c5c:	887b      	ldrh	r3, [r7, #2]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c68:	e14e      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d003      	beq.n	8007c7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2205      	movs	r2, #5
 8007c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	887a      	ldrh	r2, [r7, #2]
 8007c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	887a      	ldrh	r2, [r7, #2]
 8007c94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	887a      	ldrh	r2, [r7, #2]
 8007ca0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	887a      	ldrh	r2, [r7, #2]
 8007ca6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d007      	beq.n	8007cd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cda:	d178      	bne.n	8007dce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_SPI_TransmitReceive+0x10a>
 8007ce4:	8b7b      	ldrh	r3, [r7, #26]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d166      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	881a      	ldrh	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d0e:	e053      	b.n	8007db8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d11b      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x176>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d016      	beq.n	8007d56 <HAL_SPI_TransmitReceive+0x176>
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d113      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	881a      	ldrh	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	1c9a      	adds	r2, r3, #2
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d119      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x1b8>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d014      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	1c9a      	adds	r2, r3, #2
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d94:	2301      	movs	r3, #1
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d98:	f7fe fc2a 	bl	80065f0 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d807      	bhi.n	8007db8 <HAL_SPI_TransmitReceive+0x1d8>
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d003      	beq.n	8007db8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007db6:	e0a7      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1a6      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x130>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1a1      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x130>
 8007dcc:	e07c      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_SPI_TransmitReceive+0x1fc>
 8007dd6:	8b7b      	ldrh	r3, [r7, #26]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d16b      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e02:	e057      	b.n	8007eb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d11c      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x26c>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d017      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x26c>
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d114      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d119      	bne.n	8007e8e <HAL_SPI_TransmitReceive+0x2ae>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d014      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e8e:	f7fe fbaf 	bl	80065f0 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d803      	bhi.n	8007ea6 <HAL_SPI_TransmitReceive+0x2c6>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d102      	bne.n	8007eac <HAL_SPI_TransmitReceive+0x2cc>
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d103      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007eb2:	e029      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1a2      	bne.n	8007e04 <HAL_SPI_TransmitReceive+0x224>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d19d      	bne.n	8007e04 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f917 	bl	8008100 <SPI_EndRxTxTransaction>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d006      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ee4:	e010      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	e000      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3730      	adds	r7, #48	; 0x30
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f34:	f7fe fb5c 	bl	80065f0 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	4413      	add	r3, r2
 8007f42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f44:	f7fe fb54 	bl	80065f0 <HAL_GetTick>
 8007f48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f4a:	4b39      	ldr	r3, [pc, #228]	; (8008030 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	015b      	lsls	r3, r3, #5
 8007f50:	0d1b      	lsrs	r3, r3, #20
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	fb02 f303 	mul.w	r3, r2, r3
 8007f58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f5a:	e054      	b.n	8008006 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d050      	beq.n	8008006 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f64:	f7fe fb44 	bl	80065f0 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d902      	bls.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d13d      	bne.n	8007ff6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f92:	d111      	bne.n	8007fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f9c:	d004      	beq.n	8007fa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa6:	d107      	bne.n	8007fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc0:	d10f      	bne.n	8007fe2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e017      	b.n	8008026 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	3b01      	subs	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	4013      	ands	r3, r2
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	429a      	cmp	r2, r3
 8008014:	bf0c      	ite	eq
 8008016:	2301      	moveq	r3, #1
 8008018:	2300      	movne	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	429a      	cmp	r2, r3
 8008022:	d19b      	bne.n	8007f5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	200000a0 	.word	0x200000a0

08008034 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af02      	add	r7, sp, #8
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008048:	d111      	bne.n	800806e <SPI_EndRxTransaction+0x3a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008052:	d004      	beq.n	800805e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800805c:	d107      	bne.n	800806e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008076:	d12a      	bne.n	80080ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008080:	d012      	beq.n	80080a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2200      	movs	r2, #0
 800808a:	2180      	movs	r1, #128	; 0x80
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff ff49 	bl	8007f24 <SPI_WaitFlagStateUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02d      	beq.n	80080f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e026      	b.n	80080f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	2101      	movs	r1, #1
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff ff36 	bl	8007f24 <SPI_WaitFlagStateUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01a      	beq.n	80080f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c2:	f043 0220 	orr.w	r2, r3, #32
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e013      	b.n	80080f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2200      	movs	r2, #0
 80080d6:	2101      	movs	r1, #1
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff ff23 	bl	8007f24 <SPI_WaitFlagStateUntilTimeout>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e8:	f043 0220 	orr.w	r2, r3, #32
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e000      	b.n	80080f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800810c:	4b1b      	ldr	r3, [pc, #108]	; (800817c <SPI_EndRxTxTransaction+0x7c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <SPI_EndRxTxTransaction+0x80>)
 8008112:	fba2 2303 	umull	r2, r3, r2, r3
 8008116:	0d5b      	lsrs	r3, r3, #21
 8008118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800811c:	fb02 f303 	mul.w	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800812a:	d112      	bne.n	8008152 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	2180      	movs	r1, #128	; 0x80
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fef4 	bl	8007f24 <SPI_WaitFlagStateUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d016      	beq.n	8008170 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	f043 0220 	orr.w	r2, r3, #32
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e00f      	b.n	8008172 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	3b01      	subs	r3, #1
 800815c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d0f2      	beq.n	8008152 <SPI_EndRxTxTransaction+0x52>
 800816c:	e000      	b.n	8008170 <SPI_EndRxTxTransaction+0x70>
        break;
 800816e:	bf00      	nop
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	200000a0 	.word	0x200000a0
 8008180:	165e9f81 	.word	0x165e9f81

08008184 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e038      	b.n	800820c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7f8 ff18 	bl	8000fe4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3308      	adds	r3, #8
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f001 fd22 	bl	8009c08 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	461a      	mov	r2, r3
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	f001 fd84 	bl	8009cdc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6858      	ldr	r0, [r3, #4]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	f001 fdb1 	bl	8009d48 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	6892      	ldr	r2, [r2, #8]
 80081ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	6892      	ldr	r2, [r2, #8]
 80081fa:	f041 0101 	orr.w	r1, r1, #1
 80081fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e041      	b.n	80082aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fd fe04 	bl	8005e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f000 fa96 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d001      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e04e      	b.n	800836a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a23      	ldr	r2, [pc, #140]	; (8008378 <HAL_TIM_Base_Start_IT+0xc4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d022      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f6:	d01d      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1f      	ldr	r2, [pc, #124]	; (800837c <HAL_TIM_Base_Start_IT+0xc8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d018      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1e      	ldr	r2, [pc, #120]	; (8008380 <HAL_TIM_Base_Start_IT+0xcc>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d013      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a1c      	ldr	r2, [pc, #112]	; (8008384 <HAL_TIM_Base_Start_IT+0xd0>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00e      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a1b      	ldr	r2, [pc, #108]	; (8008388 <HAL_TIM_Base_Start_IT+0xd4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d009      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a19      	ldr	r2, [pc, #100]	; (800838c <HAL_TIM_Base_Start_IT+0xd8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d004      	beq.n	8008334 <HAL_TIM_Base_Start_IT+0x80>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a18      	ldr	r2, [pc, #96]	; (8008390 <HAL_TIM_Base_Start_IT+0xdc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d111      	bne.n	8008358 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b06      	cmp	r3, #6
 8008344:	d010      	beq.n	8008368 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0201 	orr.w	r2, r2, #1
 8008354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008356:	e007      	b.n	8008368 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	40010000 	.word	0x40010000
 800837c:	40000400 	.word	0x40000400
 8008380:	40000800 	.word	0x40000800
 8008384:	40000c00 	.word	0x40000c00
 8008388:	40010400 	.word	0x40010400
 800838c:	40014000 	.word	0x40014000
 8008390:	40001800 	.word	0x40001800

08008394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d122      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d11b      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0202 	mvn.w	r2, #2
 80083c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f9b5 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 80083dc:	e005      	b.n	80083ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f9a7 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f9b8 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d122      	bne.n	8008444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b04      	cmp	r3, #4
 800840a:	d11b      	bne.n	8008444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0204 	mvn.w	r2, #4
 8008414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2202      	movs	r2, #2
 800841a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f98b 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f97d 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f98e 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b08      	cmp	r3, #8
 8008450:	d122      	bne.n	8008498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b08      	cmp	r3, #8
 800845e:	d11b      	bne.n	8008498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0208 	mvn.w	r2, #8
 8008468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2204      	movs	r2, #4
 800846e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f961 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 8008484:	e005      	b.n	8008492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f953 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f964 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b10      	cmp	r3, #16
 80084a4:	d122      	bne.n	80084ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d11b      	bne.n	80084ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0210 	mvn.w	r2, #16
 80084bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2208      	movs	r2, #8
 80084c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f937 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f929 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f93a 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10e      	bne.n	8008518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0201 	mvn.w	r2, #1
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fc f90e 	bl	8004734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d10e      	bne.n	8008544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008530:	2b80      	cmp	r3, #128	; 0x80
 8008532:	d107      	bne.n	8008544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800853c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fae0 	bl	8008b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	d10e      	bne.n	8008570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855c:	2b40      	cmp	r3, #64	; 0x40
 800855e:	d107      	bne.n	8008570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f8ff 	bl	800876e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b20      	cmp	r3, #32
 800857c:	d10e      	bne.n	800859c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b20      	cmp	r3, #32
 800858a:	d107      	bne.n	800859c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f06f 0220 	mvn.w	r2, #32
 8008594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 faaa 	bl	8008af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_TIM_ConfigClockSource+0x1c>
 80085bc:	2302      	movs	r3, #2
 80085be:	e0b4      	b.n	800872a <HAL_TIM_ConfigClockSource+0x186>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f8:	d03e      	beq.n	8008678 <HAL_TIM_ConfigClockSource+0xd4>
 80085fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fe:	f200 8087 	bhi.w	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008606:	f000 8086 	beq.w	8008716 <HAL_TIM_ConfigClockSource+0x172>
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860e:	d87f      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008610:	2b70      	cmp	r3, #112	; 0x70
 8008612:	d01a      	beq.n	800864a <HAL_TIM_ConfigClockSource+0xa6>
 8008614:	2b70      	cmp	r3, #112	; 0x70
 8008616:	d87b      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008618:	2b60      	cmp	r3, #96	; 0x60
 800861a:	d050      	beq.n	80086be <HAL_TIM_ConfigClockSource+0x11a>
 800861c:	2b60      	cmp	r3, #96	; 0x60
 800861e:	d877      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008620:	2b50      	cmp	r3, #80	; 0x50
 8008622:	d03c      	beq.n	800869e <HAL_TIM_ConfigClockSource+0xfa>
 8008624:	2b50      	cmp	r3, #80	; 0x50
 8008626:	d873      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d058      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x13a>
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d86f      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008630:	2b30      	cmp	r3, #48	; 0x30
 8008632:	d064      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d86b      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008638:	2b20      	cmp	r3, #32
 800863a:	d060      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d867      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d05c      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 8008644:	2b10      	cmp	r3, #16
 8008646:	d05a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 8008648:	e062      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	6899      	ldr	r1, [r3, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f000 f9ad 	bl	80089b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800866c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	609a      	str	r2, [r3, #8]
      break;
 8008676:	e04f      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	6899      	ldr	r1, [r3, #8]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f000 f996 	bl	80089b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800869a:	609a      	str	r2, [r3, #8]
      break;
 800869c:	e03c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6859      	ldr	r1, [r3, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	461a      	mov	r2, r3
 80086ac:	f000 f90a 	bl	80088c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2150      	movs	r1, #80	; 0x50
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f963 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80086bc:	e02c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6859      	ldr	r1, [r3, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f000 f929 	bl	8008922 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2160      	movs	r1, #96	; 0x60
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f953 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80086dc:	e01c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6859      	ldr	r1, [r3, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f000 f8ea 	bl	80088c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2140      	movs	r1, #64	; 0x40
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f943 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80086fc:	e00c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f000 f93a 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 800870e:	e003      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e000      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a40      	ldr	r2, [pc, #256]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3d      	ldr	r2, [pc, #244]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3c      	ldr	r2, [pc, #240]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3b      	ldr	r2, [pc, #236]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3a      	ldr	r2, [pc, #232]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2f      	ldr	r2, [pc, #188]	; (8008898 <TIM_Base_SetConfig+0x114>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d02b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d027      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2c      	ldr	r2, [pc, #176]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d023      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2b      	ldr	r2, [pc, #172]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a29      	ldr	r2, [pc, #164]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d017      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a28      	ldr	r2, [pc, #160]	; (80088ac <TIM_Base_SetConfig+0x128>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d013      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <TIM_Base_SetConfig+0x130>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <TIM_Base_SetConfig+0x134>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <TIM_Base_SetConfig+0x138>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a23      	ldr	r2, [pc, #140]	; (80088c0 <TIM_Base_SetConfig+0x13c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d108      	bne.n	8008848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d103      	bne.n	8008884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	615a      	str	r2, [r3, #20]
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40010400 	.word	0x40010400
 80088ac:	40014000 	.word	0x40014000
 80088b0:	40014400 	.word	0x40014400
 80088b4:	40014800 	.word	0x40014800
 80088b8:	40001800 	.word	0x40001800
 80088bc:	40001c00 	.word	0x40001c00
 80088c0:	40002000 	.word	0x40002000

080088c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0201 	bic.w	r2, r3, #1
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 030a 	bic.w	r3, r3, #10
 8008900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008922:	b480      	push	{r7}
 8008924:	b087      	sub	sp, #28
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0210 	bic.w	r2, r3, #16
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800894c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	031b      	lsls	r3, r3, #12
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	f043 0307 	orr.w	r3, r3, #7
 80089a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	431a      	orrs	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4313      	orrs	r3, r2
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	609a      	str	r2, [r3, #8]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e05a      	b.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d022      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5c:	d01d      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1d      	ldr	r2, [pc, #116]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d018      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1b      	ldr	r2, [pc, #108]	; (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1a      	ldr	r2, [pc, #104]	; (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00e      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a18      	ldr	r2, [pc, #96]	; (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a17      	ldr	r2, [pc, #92]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a15      	ldr	r2, [pc, #84]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d10c      	bne.n	8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40010000 	.word	0x40010000
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40000c00 	.word	0x40000c00
 8008ae4:	40010400 	.word	0x40010400
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40001800 	.word	0x40001800

08008af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e03f      	b.n	8008baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fd fc76 	bl	8006430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2224      	movs	r2, #36	; 0x24
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fddf 	bl	8009720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695a      	ldr	r2, [r3, #20]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b08a      	sub	sp, #40	; 0x28
 8008bb6:	af02      	add	r7, sp, #8
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	603b      	str	r3, [r7, #0]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	d17c      	bne.n	8008ccc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <HAL_UART_Transmit+0x2c>
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e075      	b.n	8008cce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_UART_Transmit+0x3e>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e06e      	b.n	8008cce <HAL_UART_Transmit+0x11c>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2221      	movs	r2, #33	; 0x21
 8008c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c06:	f7fd fcf3 	bl	80065f0 <HAL_GetTick>
 8008c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	88fa      	ldrh	r2, [r7, #6]
 8008c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	88fa      	ldrh	r2, [r7, #6]
 8008c16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c20:	d108      	bne.n	8008c34 <HAL_UART_Transmit+0x82>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	61bb      	str	r3, [r7, #24]
 8008c32:	e003      	b.n	8008c3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c44:	e02a      	b.n	8008c9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2180      	movs	r1, #128	; 0x80
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fb1f 	bl	8009294 <UART_WaitOnFlagUntilTimeout>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e036      	b.n	8008cce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10b      	bne.n	8008c7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	3302      	adds	r3, #2
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	e007      	b.n	8008c8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	781a      	ldrb	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1cf      	bne.n	8008c46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2200      	movs	r2, #0
 8008cae:	2140      	movs	r1, #64	; 0x40
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 faef 	bl	8009294 <UART_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e006      	b.n	8008cce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e000      	b.n	8008cce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
  }
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d11d      	bne.n	8008d2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_UART_Receive_IT+0x26>
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e016      	b.n	8008d2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Receive_IT+0x38>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e00f      	b.n	8008d2e <HAL_UART_Receive_IT+0x58>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fb24 	bl	8009370 <UART_Start_Receive_IT>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	e000      	b.n	8008d2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d2c:	2302      	movs	r3, #2
  }
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b0ba      	sub	sp, #232	; 0xe8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10f      	bne.n	8008d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <HAL_UART_IRQHandler+0x66>
 8008d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fc07 	bl	80095aa <UART_Receive_IT>
      return;
 8008d9c:	e256      	b.n	800924c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 80de 	beq.w	8008f64 <HAL_UART_IRQHandler+0x22c>
 8008da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80d1 	beq.w	8008f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <HAL_UART_IRQHandler+0xae>
 8008dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	f043 0201 	orr.w	r2, r3, #1
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dea:	f003 0304 	and.w	r3, r3, #4
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <HAL_UART_IRQHandler+0xd2>
 8008df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f043 0202 	orr.w	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <HAL_UART_IRQHandler+0xf6>
 8008e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f043 0204 	orr.w	r2, r3, #4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d011      	beq.n	8008e5e <HAL_UART_IRQHandler+0x126>
 8008e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d105      	bne.n	8008e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	f043 0208 	orr.w	r2, r3, #8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 81ed 	beq.w	8009242 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <HAL_UART_IRQHandler+0x14e>
 8008e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e78:	f003 0320 	and.w	r3, r3, #32
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fb92 	bl	80095aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	bf0c      	ite	eq
 8008e94:	2301      	moveq	r3, #1
 8008e96:	2300      	movne	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d103      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x17a>
 8008eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d04f      	beq.n	8008f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa9a 	bl	80093ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d141      	bne.n	8008f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3314      	adds	r3, #20
 8008ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3314      	adds	r3, #20
 8008eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1d9      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d013      	beq.n	8008f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1e:	4a7d      	ldr	r2, [pc, #500]	; (8009114 <HAL_UART_IRQHandler+0x3dc>)
 8008f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fd fd13 	bl	8006952 <HAL_DMA_Abort_IT>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d016      	beq.n	8008f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	e00e      	b.n	8008f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f990 	bl	8009268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f48:	e00a      	b.n	8008f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f98c 	bl	8009268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f50:	e006      	b.n	8008f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f988 	bl	8009268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f5e:	e170      	b.n	8009242 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f60:	bf00      	nop
    return;
 8008f62:	e16e      	b.n	8009242 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	f040 814a 	bne.w	8009202 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f72:	f003 0310 	and.w	r3, r3, #16
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8143 	beq.w	8009202 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 813c 	beq.w	8009202 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	60bb      	str	r3, [r7, #8]
 8008f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b40      	cmp	r3, #64	; 0x40
 8008fac:	f040 80b4 	bne.w	8009118 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8140 	beq.w	8009246 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	f080 8139 	bcs.w	8009246 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe6:	f000 8088 	beq.w	80090fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	330c      	adds	r3, #12
 8008ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	330c      	adds	r3, #12
 8009012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800901a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800902e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1d9      	bne.n	8008fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3314      	adds	r3, #20
 800903c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3314      	adds	r3, #20
 8009056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800905a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800905e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800906c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e1      	bne.n	8009036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3314      	adds	r3, #20
 8009078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3314      	adds	r3, #20
 8009092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800909c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e3      	bne.n	8009072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	330c      	adds	r3, #12
 80090be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ca:	f023 0310 	bic.w	r3, r3, #16
 80090ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	330c      	adds	r3, #12
 80090d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80090de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e3      	bne.n	80090b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fbbc 	bl	8006872 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009102:	b29b      	uxth	r3, r3
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	b29b      	uxth	r3, r3
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f8b6 	bl	800927c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009110:	e099      	b.n	8009246 <HAL_UART_IRQHandler+0x50e>
 8009112:	bf00      	nop
 8009114:	080094b3 	.word	0x080094b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009120:	b29b      	uxth	r3, r3
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800912c:	b29b      	uxth	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 808b 	beq.w	800924a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8086 	beq.w	800924a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	330c      	adds	r3, #12
 8009144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	330c      	adds	r3, #12
 800915e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009162:	647a      	str	r2, [r7, #68]	; 0x44
 8009164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e3      	bne.n	800913e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3314      	adds	r3, #20
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	623b      	str	r3, [r7, #32]
   return(result);
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3314      	adds	r3, #20
 8009196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800919a:	633a      	str	r2, [r7, #48]	; 0x30
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e3      	bne.n	8009176 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0310 	bic.w	r3, r3, #16
 80091d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330c      	adds	r3, #12
 80091dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091e0:	61fa      	str	r2, [r7, #28]
 80091e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	69b9      	ldr	r1, [r7, #24]
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	617b      	str	r3, [r7, #20]
   return(result);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e3      	bne.n	80091bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f83e 	bl	800927c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009200:	e023      	b.n	800924a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <HAL_UART_IRQHandler+0x4ea>
 800920e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f95d 	bl	80094da <UART_Transmit_IT>
    return;
 8009220:	e014      	b.n	800924c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00e      	beq.n	800924c <HAL_UART_IRQHandler+0x514>
 800922e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d008      	beq.n	800924c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f99d 	bl	800957a <UART_EndTransmit_IT>
    return;
 8009240:	e004      	b.n	800924c <HAL_UART_IRQHandler+0x514>
    return;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_UART_IRQHandler+0x514>
      return;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_UART_IRQHandler+0x514>
      return;
 800924a:	bf00      	nop
  }
}
 800924c:	37e8      	adds	r7, #232	; 0xe8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b090      	sub	sp, #64	; 0x40
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a4:	e050      	b.n	8009348 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ac:	d04c      	beq.n	8009348 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d007      	beq.n	80092c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092b4:	f7fd f99c 	bl	80065f0 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d241      	bcs.n	8009348 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	330c      	adds	r3, #12
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092e4:	637a      	str	r2, [r7, #52]	; 0x34
 80092e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e5      	bne.n	80092c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3314      	adds	r3, #20
 80092fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	613b      	str	r3, [r7, #16]
   return(result);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3314      	adds	r3, #20
 8009316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009318:	623a      	str	r2, [r7, #32]
 800931a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	69f9      	ldr	r1, [r7, #28]
 800931e:	6a3a      	ldr	r2, [r7, #32]
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	61bb      	str	r3, [r7, #24]
   return(result);
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e5      	bne.n	80092f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2220      	movs	r2, #32
 8009338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e00f      	b.n	8009368 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4013      	ands	r3, r2
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	bf0c      	ite	eq
 8009358:	2301      	moveq	r3, #1
 800935a:	2300      	movne	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	429a      	cmp	r2, r3
 8009364:	d09f      	beq.n	80092a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3740      	adds	r7, #64	; 0x40
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	88fa      	ldrh	r2, [r7, #6]
 800938e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2222      	movs	r2, #34	; 0x22
 800939a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	695a      	ldr	r2, [r3, #20]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0201 	orr.w	r2, r2, #1
 80093cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0220 	orr.w	r2, r2, #32
 80093dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b095      	sub	sp, #84	; 0x54
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	330c      	adds	r3, #12
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800940a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	330c      	adds	r3, #12
 8009412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009414:	643a      	str	r2, [r7, #64]	; 0x40
 8009416:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800941a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e5      	bne.n	80093f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3314      	adds	r3, #20
 800942e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	61fb      	str	r3, [r7, #28]
   return(result);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f023 0301 	bic.w	r3, r3, #1
 800943e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3314      	adds	r3, #20
 8009446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800944e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009460:	2b01      	cmp	r3, #1
 8009462:	d119      	bne.n	8009498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	330c      	adds	r3, #12
 800946a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	60bb      	str	r3, [r7, #8]
   return(result);
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f023 0310 	bic.w	r3, r3, #16
 800947a:	647b      	str	r3, [r7, #68]	; 0x44
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	330c      	adds	r3, #12
 8009482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009484:	61ba      	str	r2, [r7, #24]
 8009486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	6979      	ldr	r1, [r7, #20]
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	e841 2300 	strex	r3, r2, [r1]
 8009490:	613b      	str	r3, [r7, #16]
   return(result);
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1e5      	bne.n	8009464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094a6:	bf00      	nop
 80094a8:	3754      	adds	r7, #84	; 0x54
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fecb 	bl	8009268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094da:	b480      	push	{r7}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b21      	cmp	r3, #33	; 0x21
 80094ec:	d13e      	bne.n	800956c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f6:	d114      	bne.n	8009522 <UART_Transmit_IT+0x48>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d110      	bne.n	8009522 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	1c9a      	adds	r2, r3, #2
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	621a      	str	r2, [r3, #32]
 8009520:	e008      	b.n	8009534 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	1c59      	adds	r1, r3, #1
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6211      	str	r1, [r2, #32]
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009538:	b29b      	uxth	r3, r3
 800953a:	3b01      	subs	r3, #1
 800953c:	b29b      	uxth	r3, r3
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	4619      	mov	r1, r3
 8009542:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10f      	bne.n	8009568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	e000      	b.n	800956e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800956c:	2302      	movs	r3, #2
  }
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b082      	sub	sp, #8
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2220      	movs	r2, #32
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff fe5a 	bl	8009254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b08c      	sub	sp, #48	; 0x30
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b22      	cmp	r3, #34	; 0x22
 80095bc:	f040 80ab 	bne.w	8009716 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c8:	d117      	bne.n	80095fa <UART_Receive_IT+0x50>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d113      	bne.n	80095fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	1c9a      	adds	r2, r3, #2
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	629a      	str	r2, [r3, #40]	; 0x28
 80095f8:	e026      	b.n	8009648 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009600:	2300      	movs	r3, #0
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960c:	d007      	beq.n	800961e <UART_Receive_IT+0x74>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <UART_Receive_IT+0x82>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	b2da      	uxtb	r2, r3
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	e008      	b.n	800963e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009638:	b2da      	uxtb	r2, r3
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29b      	uxth	r3, r3
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4619      	mov	r1, r3
 8009656:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009658:	2b00      	cmp	r3, #0
 800965a:	d15a      	bne.n	8009712 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0220 	bic.w	r2, r2, #32
 800966a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800967a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695a      	ldr	r2, [r3, #20]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0201 	bic.w	r2, r2, #1
 800968a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	2b01      	cmp	r3, #1
 800969a:	d135      	bne.n	8009708 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	330c      	adds	r3, #12
 80096a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	613b      	str	r3, [r7, #16]
   return(result);
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f023 0310 	bic.w	r3, r3, #16
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c2:	623a      	str	r2, [r7, #32]
 80096c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	69f9      	ldr	r1, [r7, #28]
 80096c8:	6a3a      	ldr	r2, [r7, #32]
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e5      	bne.n	80096a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d10a      	bne.n	80096fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff fdbb 	bl	800927c <HAL_UARTEx_RxEventCallback>
 8009706:	e002      	b.n	800970e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7fc fd6d 	bl	80061e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	e002      	b.n	8009718 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	e000      	b.n	8009718 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009716:	2302      	movs	r3, #2
  }
}
 8009718:	4618      	mov	r0, r3
 800971a:	3730      	adds	r7, #48	; 0x30
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009724:	b0c0      	sub	sp, #256	; 0x100
 8009726:	af00      	add	r7, sp, #0
 8009728:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800973c:	68d9      	ldr	r1, [r3, #12]
 800973e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	ea40 0301 	orr.w	r3, r0, r1
 8009748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800974a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	431a      	orrs	r2, r3
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	431a      	orrs	r2, r3
 8009760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009778:	f021 010c 	bic.w	r1, r1, #12
 800977c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009786:	430b      	orrs	r3, r1
 8009788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800978a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800979a:	6999      	ldr	r1, [r3, #24]
 800979c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	ea40 0301 	orr.w	r3, r0, r1
 80097a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4b8f      	ldr	r3, [pc, #572]	; (80099ec <UART_SetConfig+0x2cc>)
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d005      	beq.n	80097c0 <UART_SetConfig+0xa0>
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4b8d      	ldr	r3, [pc, #564]	; (80099f0 <UART_SetConfig+0x2d0>)
 80097bc:	429a      	cmp	r2, r3
 80097be:	d104      	bne.n	80097ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097c0:	f7fd ff24 	bl	800760c <HAL_RCC_GetPCLK2Freq>
 80097c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80097c8:	e003      	b.n	80097d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097ca:	f7fd ff0b 	bl	80075e4 <HAL_RCC_GetPCLK1Freq>
 80097ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097dc:	f040 810c 	bne.w	80099f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80097ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80097f2:	4622      	mov	r2, r4
 80097f4:	462b      	mov	r3, r5
 80097f6:	1891      	adds	r1, r2, r2
 80097f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80097fa:	415b      	adcs	r3, r3
 80097fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009802:	4621      	mov	r1, r4
 8009804:	eb12 0801 	adds.w	r8, r2, r1
 8009808:	4629      	mov	r1, r5
 800980a:	eb43 0901 	adc.w	r9, r3, r1
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800981a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800981e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009822:	4690      	mov	r8, r2
 8009824:	4699      	mov	r9, r3
 8009826:	4623      	mov	r3, r4
 8009828:	eb18 0303 	adds.w	r3, r8, r3
 800982c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009830:	462b      	mov	r3, r5
 8009832:	eb49 0303 	adc.w	r3, r9, r3
 8009836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009846:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800984a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800984e:	460b      	mov	r3, r1
 8009850:	18db      	adds	r3, r3, r3
 8009852:	653b      	str	r3, [r7, #80]	; 0x50
 8009854:	4613      	mov	r3, r2
 8009856:	eb42 0303 	adc.w	r3, r2, r3
 800985a:	657b      	str	r3, [r7, #84]	; 0x54
 800985c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009864:	f7f6 fd0c 	bl	8000280 <__aeabi_uldivmod>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4b61      	ldr	r3, [pc, #388]	; (80099f4 <UART_SetConfig+0x2d4>)
 800986e:	fba3 2302 	umull	r2, r3, r3, r2
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	011c      	lsls	r4, r3, #4
 8009876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800987a:	2200      	movs	r2, #0
 800987c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009880:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009888:	4642      	mov	r2, r8
 800988a:	464b      	mov	r3, r9
 800988c:	1891      	adds	r1, r2, r2
 800988e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009890:	415b      	adcs	r3, r3
 8009892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009898:	4641      	mov	r1, r8
 800989a:	eb12 0a01 	adds.w	sl, r2, r1
 800989e:	4649      	mov	r1, r9
 80098a0:	eb43 0b01 	adc.w	fp, r3, r1
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098b8:	4692      	mov	sl, r2
 80098ba:	469b      	mov	fp, r3
 80098bc:	4643      	mov	r3, r8
 80098be:	eb1a 0303 	adds.w	r3, sl, r3
 80098c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098c6:	464b      	mov	r3, r9
 80098c8:	eb4b 0303 	adc.w	r3, fp, r3
 80098cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098e4:	460b      	mov	r3, r1
 80098e6:	18db      	adds	r3, r3, r3
 80098e8:	643b      	str	r3, [r7, #64]	; 0x40
 80098ea:	4613      	mov	r3, r2
 80098ec:	eb42 0303 	adc.w	r3, r2, r3
 80098f0:	647b      	str	r3, [r7, #68]	; 0x44
 80098f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80098f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80098fa:	f7f6 fcc1 	bl	8000280 <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4611      	mov	r1, r2
 8009904:	4b3b      	ldr	r3, [pc, #236]	; (80099f4 <UART_SetConfig+0x2d4>)
 8009906:	fba3 2301 	umull	r2, r3, r3, r1
 800990a:	095b      	lsrs	r3, r3, #5
 800990c:	2264      	movs	r2, #100	; 0x64
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	1acb      	subs	r3, r1, r3
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800991a:	4b36      	ldr	r3, [pc, #216]	; (80099f4 <UART_SetConfig+0x2d4>)
 800991c:	fba3 2302 	umull	r2, r3, r3, r2
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009928:	441c      	add	r4, r3
 800992a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800992e:	2200      	movs	r2, #0
 8009930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009934:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800993c:	4642      	mov	r2, r8
 800993e:	464b      	mov	r3, r9
 8009940:	1891      	adds	r1, r2, r2
 8009942:	63b9      	str	r1, [r7, #56]	; 0x38
 8009944:	415b      	adcs	r3, r3
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800994c:	4641      	mov	r1, r8
 800994e:	1851      	adds	r1, r2, r1
 8009950:	6339      	str	r1, [r7, #48]	; 0x30
 8009952:	4649      	mov	r1, r9
 8009954:	414b      	adcs	r3, r1
 8009956:	637b      	str	r3, [r7, #52]	; 0x34
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	f04f 0300 	mov.w	r3, #0
 8009960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009964:	4659      	mov	r1, fp
 8009966:	00cb      	lsls	r3, r1, #3
 8009968:	4651      	mov	r1, sl
 800996a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800996e:	4651      	mov	r1, sl
 8009970:	00ca      	lsls	r2, r1, #3
 8009972:	4610      	mov	r0, r2
 8009974:	4619      	mov	r1, r3
 8009976:	4603      	mov	r3, r0
 8009978:	4642      	mov	r2, r8
 800997a:	189b      	adds	r3, r3, r2
 800997c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009980:	464b      	mov	r3, r9
 8009982:	460a      	mov	r2, r1
 8009984:	eb42 0303 	adc.w	r3, r2, r3
 8009988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800998c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009998:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800999c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099a0:	460b      	mov	r3, r1
 80099a2:	18db      	adds	r3, r3, r3
 80099a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80099a6:	4613      	mov	r3, r2
 80099a8:	eb42 0303 	adc.w	r3, r2, r3
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099b6:	f7f6 fc63 	bl	8000280 <__aeabi_uldivmod>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <UART_SetConfig+0x2d4>)
 80099c0:	fba3 1302 	umull	r1, r3, r3, r2
 80099c4:	095b      	lsrs	r3, r3, #5
 80099c6:	2164      	movs	r1, #100	; 0x64
 80099c8:	fb01 f303 	mul.w	r3, r1, r3
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	3332      	adds	r3, #50	; 0x32
 80099d2:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <UART_SetConfig+0x2d4>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	f003 0207 	and.w	r2, r3, #7
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4422      	add	r2, r4
 80099e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099e8:	e105      	b.n	8009bf6 <UART_SetConfig+0x4d6>
 80099ea:	bf00      	nop
 80099ec:	40011000 	.word	0x40011000
 80099f0:	40011400 	.word	0x40011400
 80099f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a0a:	4642      	mov	r2, r8
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	1891      	adds	r1, r2, r2
 8009a10:	6239      	str	r1, [r7, #32]
 8009a12:	415b      	adcs	r3, r3
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
 8009a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	1854      	adds	r4, r2, r1
 8009a1e:	4649      	mov	r1, r9
 8009a20:	eb43 0501 	adc.w	r5, r3, r1
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	00eb      	lsls	r3, r5, #3
 8009a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a32:	00e2      	lsls	r2, r4, #3
 8009a34:	4614      	mov	r4, r2
 8009a36:	461d      	mov	r5, r3
 8009a38:	4643      	mov	r3, r8
 8009a3a:	18e3      	adds	r3, r4, r3
 8009a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a40:	464b      	mov	r3, r9
 8009a42:	eb45 0303 	adc.w	r3, r5, r3
 8009a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	f04f 0300 	mov.w	r3, #0
 8009a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a66:	4629      	mov	r1, r5
 8009a68:	008b      	lsls	r3, r1, #2
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a70:	4621      	mov	r1, r4
 8009a72:	008a      	lsls	r2, r1, #2
 8009a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a78:	f7f6 fc02 	bl	8000280 <__aeabi_uldivmod>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4b60      	ldr	r3, [pc, #384]	; (8009c04 <UART_SetConfig+0x4e4>)
 8009a82:	fba3 2302 	umull	r2, r3, r3, r2
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	011c      	lsls	r4, r3, #4
 8009a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	1891      	adds	r1, r2, r2
 8009aa2:	61b9      	str	r1, [r7, #24]
 8009aa4:	415b      	adcs	r3, r3
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009aac:	4641      	mov	r1, r8
 8009aae:	1851      	adds	r1, r2, r1
 8009ab0:	6139      	str	r1, [r7, #16]
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	414b      	adcs	r3, r1
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	f04f 0300 	mov.w	r3, #0
 8009ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ac4:	4659      	mov	r1, fp
 8009ac6:	00cb      	lsls	r3, r1, #3
 8009ac8:	4651      	mov	r1, sl
 8009aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ace:	4651      	mov	r1, sl
 8009ad0:	00ca      	lsls	r2, r1, #3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4642      	mov	r2, r8
 8009ada:	189b      	adds	r3, r3, r2
 8009adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	460a      	mov	r2, r1
 8009ae4:	eb42 0303 	adc.w	r3, r2, r3
 8009ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009af6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	f04f 0300 	mov.w	r3, #0
 8009b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b04:	4649      	mov	r1, r9
 8009b06:	008b      	lsls	r3, r1, #2
 8009b08:	4641      	mov	r1, r8
 8009b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b0e:	4641      	mov	r1, r8
 8009b10:	008a      	lsls	r2, r1, #2
 8009b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b16:	f7f6 fbb3 	bl	8000280 <__aeabi_uldivmod>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4b39      	ldr	r3, [pc, #228]	; (8009c04 <UART_SetConfig+0x4e4>)
 8009b20:	fba3 1302 	umull	r1, r3, r3, r2
 8009b24:	095b      	lsrs	r3, r3, #5
 8009b26:	2164      	movs	r1, #100	; 0x64
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	3332      	adds	r3, #50	; 0x32
 8009b32:	4a34      	ldr	r2, [pc, #208]	; (8009c04 <UART_SetConfig+0x4e4>)
 8009b34:	fba2 2303 	umull	r2, r3, r2, r3
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b3e:	441c      	add	r4, r3
 8009b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b44:	2200      	movs	r2, #0
 8009b46:	673b      	str	r3, [r7, #112]	; 0x70
 8009b48:	677a      	str	r2, [r7, #116]	; 0x74
 8009b4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b4e:	4642      	mov	r2, r8
 8009b50:	464b      	mov	r3, r9
 8009b52:	1891      	adds	r1, r2, r2
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	415b      	adcs	r3, r3
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b5e:	4641      	mov	r1, r8
 8009b60:	1851      	adds	r1, r2, r1
 8009b62:	6039      	str	r1, [r7, #0]
 8009b64:	4649      	mov	r1, r9
 8009b66:	414b      	adcs	r3, r1
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	f04f 0300 	mov.w	r3, #0
 8009b72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b76:	4659      	mov	r1, fp
 8009b78:	00cb      	lsls	r3, r1, #3
 8009b7a:	4651      	mov	r1, sl
 8009b7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b80:	4651      	mov	r1, sl
 8009b82:	00ca      	lsls	r2, r1, #3
 8009b84:	4610      	mov	r0, r2
 8009b86:	4619      	mov	r1, r3
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	189b      	adds	r3, r3, r2
 8009b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b90:	464b      	mov	r3, r9
 8009b92:	460a      	mov	r2, r1
 8009b94:	eb42 0303 	adc.w	r3, r2, r3
 8009b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ba4:	667a      	str	r2, [r7, #100]	; 0x64
 8009ba6:	f04f 0200 	mov.w	r2, #0
 8009baa:	f04f 0300 	mov.w	r3, #0
 8009bae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	008b      	lsls	r3, r1, #2
 8009bb6:	4641      	mov	r1, r8
 8009bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	008a      	lsls	r2, r1, #2
 8009bc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bc4:	f7f6 fb5c 	bl	8000280 <__aeabi_uldivmod>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <UART_SetConfig+0x4e4>)
 8009bce:	fba3 1302 	umull	r1, r3, r3, r2
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	2164      	movs	r1, #100	; 0x64
 8009bd6:	fb01 f303 	mul.w	r3, r1, r3
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	3332      	adds	r3, #50	; 0x32
 8009be0:	4a08      	ldr	r2, [pc, #32]	; (8009c04 <UART_SetConfig+0x4e4>)
 8009be2:	fba2 2303 	umull	r2, r3, r2, r3
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	f003 020f 	and.w	r2, r3, #15
 8009bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4422      	add	r2, r4
 8009bf4:	609a      	str	r2, [r3, #8]
}
 8009bf6:	bf00      	nop
 8009bf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c02:	bf00      	nop
 8009c04:	51eb851f 	.word	0x51eb851f

08009c08 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	f023 0101 	bic.w	r1, r3, #1
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d102      	bne.n	8009c38 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009c32:	2340      	movs	r3, #64	; 0x40
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	e001      	b.n	8009c3c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009c48:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009c4e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009c54:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009c5a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009c60:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009c66:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009c6c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009c72:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009c78:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009c96:	4b10      	ldr	r3, [pc, #64]	; (8009cd8 <FSMC_NORSRAM_Init+0xd0>)
 8009c98:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ca0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009ca8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	43db      	mvns	r3, r3
 8009cb8:	ea02 0103 	and.w	r1, r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	4319      	orrs	r1, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	0008fb7f 	.word	0x0008fb7f

08009cdc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	431a      	orrs	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	021b      	lsls	r3, r3, #8
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	431a      	orrs	r2, r3
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	051b      	lsls	r3, r3, #20
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	3b02      	subs	r3, #2
 8009d22:	061b      	lsls	r3, r3, #24
 8009d24:	431a      	orrs	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	3201      	adds	r2, #1
 8009d30:	4319      	orrs	r1, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d5c:	d11d      	bne.n	8009d9a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d66:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	6811      	ldr	r1, [r2, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	6852      	ldr	r2, [r2, #4]
 8009d72:	0112      	lsls	r2, r2, #4
 8009d74:	4311      	orrs	r1, r2
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	6892      	ldr	r2, [r2, #8]
 8009d7a:	0212      	lsls	r2, r2, #8
 8009d7c:	4311      	orrs	r1, r2
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	6992      	ldr	r2, [r2, #24]
 8009d82:	4311      	orrs	r1, r2
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	68d2      	ldr	r2, [r2, #12]
 8009d88:	0412      	lsls	r2, r2, #16
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	ea43 0102 	orr.w	r1, r3, r2
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009d98:	e005      	b.n	8009da6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	cff00000 	.word	0xcff00000

08009db8 <__errno>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	; (8009dc0 <__errno+0x8>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	200000ac 	.word	0x200000ac

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4d0d      	ldr	r5, [pc, #52]	; (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	; (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1b64      	subs	r4, r4, r5
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2600      	movs	r6, #0
 8009dd0:	42a6      	cmp	r6, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4d0b      	ldr	r5, [pc, #44]	; (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	; (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f001 faa4 	bl	800b324 <_init>
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2600      	movs	r6, #0
 8009de2:	42a6      	cmp	r6, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dec:	4798      	blx	r3
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df6:	4798      	blx	r3
 8009df8:	3601      	adds	r6, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	0800f568 	.word	0x0800f568
 8009e00:	0800f568 	.word	0x0800f568
 8009e04:	0800f568 	.word	0x0800f568
 8009e08:	0800f56c 	.word	0x0800f56c

08009e0c <memset>:
 8009e0c:	4402      	add	r2, r0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d100      	bne.n	8009e16 <memset+0xa>
 8009e14:	4770      	bx	lr
 8009e16:	f803 1b01 	strb.w	r1, [r3], #1
 8009e1a:	e7f9      	b.n	8009e10 <memset+0x4>

08009e1c <srand>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <srand+0x44>)
 8009e20:	681d      	ldr	r5, [r3, #0]
 8009e22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e24:	4604      	mov	r4, r0
 8009e26:	b9b3      	cbnz	r3, 8009e56 <srand+0x3a>
 8009e28:	2018      	movs	r0, #24
 8009e2a:	f000 f8f5 	bl	800a018 <malloc>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	63a8      	str	r0, [r5, #56]	; 0x38
 8009e32:	b920      	cbnz	r0, 8009e3e <srand+0x22>
 8009e34:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <srand+0x48>)
 8009e36:	480c      	ldr	r0, [pc, #48]	; (8009e68 <srand+0x4c>)
 8009e38:	2142      	movs	r1, #66	; 0x42
 8009e3a:	f000 f8bd 	bl	8009fb8 <__assert_func>
 8009e3e:	490b      	ldr	r1, [pc, #44]	; (8009e6c <srand+0x50>)
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <srand+0x54>)
 8009e42:	e9c0 1300 	strd	r1, r3, [r0]
 8009e46:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <srand+0x58>)
 8009e48:	6083      	str	r3, [r0, #8]
 8009e4a:	230b      	movs	r3, #11
 8009e4c:	8183      	strh	r3, [r0, #12]
 8009e4e:	2100      	movs	r1, #0
 8009e50:	2001      	movs	r0, #1
 8009e52:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009e56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e58:	2200      	movs	r2, #0
 8009e5a:	611c      	str	r4, [r3, #16]
 8009e5c:	615a      	str	r2, [r3, #20]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	200000ac 	.word	0x200000ac
 8009e64:	0800f41c 	.word	0x0800f41c
 8009e68:	0800f433 	.word	0x0800f433
 8009e6c:	abcd330e 	.word	0xabcd330e
 8009e70:	e66d1234 	.word	0xe66d1234
 8009e74:	0005deec 	.word	0x0005deec

08009e78 <rand>:
 8009e78:	4b16      	ldr	r3, [pc, #88]	; (8009ed4 <rand+0x5c>)
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	681c      	ldr	r4, [r3, #0]
 8009e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e80:	b9b3      	cbnz	r3, 8009eb0 <rand+0x38>
 8009e82:	2018      	movs	r0, #24
 8009e84:	f000 f8c8 	bl	800a018 <malloc>
 8009e88:	63a0      	str	r0, [r4, #56]	; 0x38
 8009e8a:	b928      	cbnz	r0, 8009e98 <rand+0x20>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <rand+0x60>)
 8009e90:	4812      	ldr	r0, [pc, #72]	; (8009edc <rand+0x64>)
 8009e92:	214e      	movs	r1, #78	; 0x4e
 8009e94:	f000 f890 	bl	8009fb8 <__assert_func>
 8009e98:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <rand+0x68>)
 8009e9a:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <rand+0x6c>)
 8009e9c:	e9c0 2300 	strd	r2, r3, [r0]
 8009ea0:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <rand+0x70>)
 8009ea2:	6083      	str	r3, [r0, #8]
 8009ea4:	230b      	movs	r3, #11
 8009ea6:	8183      	strh	r3, [r0, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009eb0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009eb2:	4a0e      	ldr	r2, [pc, #56]	; (8009eec <rand+0x74>)
 8009eb4:	6920      	ldr	r0, [r4, #16]
 8009eb6:	6963      	ldr	r3, [r4, #20]
 8009eb8:	490d      	ldr	r1, [pc, #52]	; (8009ef0 <rand+0x78>)
 8009eba:	4342      	muls	r2, r0
 8009ebc:	fb01 2203 	mla	r2, r1, r3, r2
 8009ec0:	fba0 0101 	umull	r0, r1, r0, r1
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	eb42 0001 	adc.w	r0, r2, r1
 8009eca:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009ece:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009ed2:	bd10      	pop	{r4, pc}
 8009ed4:	200000ac 	.word	0x200000ac
 8009ed8:	0800f41c 	.word	0x0800f41c
 8009edc:	0800f433 	.word	0x0800f433
 8009ee0:	abcd330e 	.word	0xabcd330e
 8009ee4:	e66d1234 	.word	0xe66d1234
 8009ee8:	0005deec 	.word	0x0005deec
 8009eec:	5851f42d 	.word	0x5851f42d
 8009ef0:	4c957f2d 	.word	0x4c957f2d

08009ef4 <sniprintf>:
 8009ef4:	b40c      	push	{r2, r3}
 8009ef6:	b530      	push	{r4, r5, lr}
 8009ef8:	4b17      	ldr	r3, [pc, #92]	; (8009f58 <sniprintf+0x64>)
 8009efa:	1e0c      	subs	r4, r1, #0
 8009efc:	681d      	ldr	r5, [r3, #0]
 8009efe:	b09d      	sub	sp, #116	; 0x74
 8009f00:	da08      	bge.n	8009f14 <sniprintf+0x20>
 8009f02:	238b      	movs	r3, #139	; 0x8b
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0a:	b01d      	add	sp, #116	; 0x74
 8009f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f10:	b002      	add	sp, #8
 8009f12:	4770      	bx	lr
 8009f14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f1c:	bf14      	ite	ne
 8009f1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f22:	4623      	moveq	r3, r4
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	9307      	str	r3, [sp, #28]
 8009f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f2c:	9002      	str	r0, [sp, #8]
 8009f2e:	9006      	str	r0, [sp, #24]
 8009f30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f36:	ab21      	add	r3, sp, #132	; 0x84
 8009f38:	a902      	add	r1, sp, #8
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	f000 f9bd 	bl	800a2bc <_svfiprintf_r>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	bfbc      	itt	lt
 8009f46:	238b      	movlt	r3, #139	; 0x8b
 8009f48:	602b      	strlt	r3, [r5, #0]
 8009f4a:	2c00      	cmp	r4, #0
 8009f4c:	d0dd      	beq.n	8009f0a <sniprintf+0x16>
 8009f4e:	9b02      	ldr	r3, [sp, #8]
 8009f50:	2200      	movs	r2, #0
 8009f52:	701a      	strb	r2, [r3, #0]
 8009f54:	e7d9      	b.n	8009f0a <sniprintf+0x16>
 8009f56:	bf00      	nop
 8009f58:	200000ac 	.word	0x200000ac

08009f5c <strcat>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	4602      	mov	r2, r0
 8009f60:	7814      	ldrb	r4, [r2, #0]
 8009f62:	4613      	mov	r3, r2
 8009f64:	3201      	adds	r2, #1
 8009f66:	2c00      	cmp	r4, #0
 8009f68:	d1fa      	bne.n	8009f60 <strcat+0x4>
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	d1f9      	bne.n	8009f6c <strcat+0x10>
 8009f78:	bd10      	pop	{r4, pc}
	...

08009f7c <strdup>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <strdup+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f000 b803 	b.w	8009f8c <_strdup_r>
 8009f86:	bf00      	nop
 8009f88:	200000ac 	.word	0x200000ac

08009f8c <_strdup_r>:
 8009f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	460d      	mov	r5, r1
 8009f94:	f7f6 f91c 	bl	80001d0 <strlen>
 8009f98:	1c42      	adds	r2, r0, #1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	9201      	str	r2, [sp, #4]
 8009fa0:	f000 f8bc 	bl	800a11c <_malloc_r>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	b118      	cbz	r0, 8009fb0 <_strdup_r+0x24>
 8009fa8:	9a01      	ldr	r2, [sp, #4]
 8009faa:	4629      	mov	r1, r5
 8009fac:	f000 f83c 	bl	800a028 <memcpy>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	b003      	add	sp, #12
 8009fb4:	bd30      	pop	{r4, r5, pc}
	...

08009fb8 <__assert_func>:
 8009fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fba:	4614      	mov	r4, r2
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <__assert_func+0x2c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	68d8      	ldr	r0, [r3, #12]
 8009fc6:	b14c      	cbz	r4, 8009fdc <__assert_func+0x24>
 8009fc8:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <__assert_func+0x30>)
 8009fca:	9100      	str	r1, [sp, #0]
 8009fcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fd0:	4906      	ldr	r1, [pc, #24]	; (8009fec <__assert_func+0x34>)
 8009fd2:	462b      	mov	r3, r5
 8009fd4:	f000 f80e 	bl	8009ff4 <fiprintf>
 8009fd8:	f000 fe2e 	bl	800ac38 <abort>
 8009fdc:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <__assert_func+0x38>)
 8009fde:	461c      	mov	r4, r3
 8009fe0:	e7f3      	b.n	8009fca <__assert_func+0x12>
 8009fe2:	bf00      	nop
 8009fe4:	200000ac 	.word	0x200000ac
 8009fe8:	0800f48e 	.word	0x0800f48e
 8009fec:	0800f49b 	.word	0x0800f49b
 8009ff0:	0800f4c9 	.word	0x0800f4c9

08009ff4 <fiprintf>:
 8009ff4:	b40e      	push	{r1, r2, r3}
 8009ff6:	b503      	push	{r0, r1, lr}
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	ab03      	add	r3, sp, #12
 8009ffc:	4805      	ldr	r0, [pc, #20]	; (800a014 <fiprintf+0x20>)
 8009ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a002:	6800      	ldr	r0, [r0, #0]
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	f000 fa83 	bl	800a510 <_vfiprintf_r>
 800a00a:	b002      	add	sp, #8
 800a00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a010:	b003      	add	sp, #12
 800a012:	4770      	bx	lr
 800a014:	200000ac 	.word	0x200000ac

0800a018 <malloc>:
 800a018:	4b02      	ldr	r3, [pc, #8]	; (800a024 <malloc+0xc>)
 800a01a:	4601      	mov	r1, r0
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	f000 b87d 	b.w	800a11c <_malloc_r>
 800a022:	bf00      	nop
 800a024:	200000ac 	.word	0x200000ac

0800a028 <memcpy>:
 800a028:	440a      	add	r2, r1
 800a02a:	4291      	cmp	r1, r2
 800a02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a030:	d100      	bne.n	800a034 <memcpy+0xc>
 800a032:	4770      	bx	lr
 800a034:	b510      	push	{r4, lr}
 800a036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a03e:	4291      	cmp	r1, r2
 800a040:	d1f9      	bne.n	800a036 <memcpy+0xe>
 800a042:	bd10      	pop	{r4, pc}

0800a044 <_free_r>:
 800a044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a046:	2900      	cmp	r1, #0
 800a048:	d044      	beq.n	800a0d4 <_free_r+0x90>
 800a04a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a04e:	9001      	str	r0, [sp, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f1a1 0404 	sub.w	r4, r1, #4
 800a056:	bfb8      	it	lt
 800a058:	18e4      	addlt	r4, r4, r3
 800a05a:	f001 f82f 	bl	800b0bc <__malloc_lock>
 800a05e:	4a1e      	ldr	r2, [pc, #120]	; (800a0d8 <_free_r+0x94>)
 800a060:	9801      	ldr	r0, [sp, #4]
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	b933      	cbnz	r3, 800a074 <_free_r+0x30>
 800a066:	6063      	str	r3, [r4, #4]
 800a068:	6014      	str	r4, [r2, #0]
 800a06a:	b003      	add	sp, #12
 800a06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a070:	f001 b82a 	b.w	800b0c8 <__malloc_unlock>
 800a074:	42a3      	cmp	r3, r4
 800a076:	d908      	bls.n	800a08a <_free_r+0x46>
 800a078:	6825      	ldr	r5, [r4, #0]
 800a07a:	1961      	adds	r1, r4, r5
 800a07c:	428b      	cmp	r3, r1
 800a07e:	bf01      	itttt	eq
 800a080:	6819      	ldreq	r1, [r3, #0]
 800a082:	685b      	ldreq	r3, [r3, #4]
 800a084:	1949      	addeq	r1, r1, r5
 800a086:	6021      	streq	r1, [r4, #0]
 800a088:	e7ed      	b.n	800a066 <_free_r+0x22>
 800a08a:	461a      	mov	r2, r3
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	b10b      	cbz	r3, 800a094 <_free_r+0x50>
 800a090:	42a3      	cmp	r3, r4
 800a092:	d9fa      	bls.n	800a08a <_free_r+0x46>
 800a094:	6811      	ldr	r1, [r2, #0]
 800a096:	1855      	adds	r5, r2, r1
 800a098:	42a5      	cmp	r5, r4
 800a09a:	d10b      	bne.n	800a0b4 <_free_r+0x70>
 800a09c:	6824      	ldr	r4, [r4, #0]
 800a09e:	4421      	add	r1, r4
 800a0a0:	1854      	adds	r4, r2, r1
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	d1e0      	bne.n	800a06a <_free_r+0x26>
 800a0a8:	681c      	ldr	r4, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	6053      	str	r3, [r2, #4]
 800a0ae:	4421      	add	r1, r4
 800a0b0:	6011      	str	r1, [r2, #0]
 800a0b2:	e7da      	b.n	800a06a <_free_r+0x26>
 800a0b4:	d902      	bls.n	800a0bc <_free_r+0x78>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	e7d6      	b.n	800a06a <_free_r+0x26>
 800a0bc:	6825      	ldr	r5, [r4, #0]
 800a0be:	1961      	adds	r1, r4, r5
 800a0c0:	428b      	cmp	r3, r1
 800a0c2:	bf04      	itt	eq
 800a0c4:	6819      	ldreq	r1, [r3, #0]
 800a0c6:	685b      	ldreq	r3, [r3, #4]
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	bf04      	itt	eq
 800a0cc:	1949      	addeq	r1, r1, r5
 800a0ce:	6021      	streq	r1, [r4, #0]
 800a0d0:	6054      	str	r4, [r2, #4]
 800a0d2:	e7ca      	b.n	800a06a <_free_r+0x26>
 800a0d4:	b003      	add	sp, #12
 800a0d6:	bd30      	pop	{r4, r5, pc}
 800a0d8:	20002a54 	.word	0x20002a54

0800a0dc <sbrk_aligned>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	4e0e      	ldr	r6, [pc, #56]	; (800a118 <sbrk_aligned+0x3c>)
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	6831      	ldr	r1, [r6, #0]
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	b911      	cbnz	r1, 800a0ee <sbrk_aligned+0x12>
 800a0e8:	f000 fcd6 	bl	800aa98 <_sbrk_r>
 800a0ec:	6030      	str	r0, [r6, #0]
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 fcd1 	bl	800aa98 <_sbrk_r>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d00a      	beq.n	800a110 <sbrk_aligned+0x34>
 800a0fa:	1cc4      	adds	r4, r0, #3
 800a0fc:	f024 0403 	bic.w	r4, r4, #3
 800a100:	42a0      	cmp	r0, r4
 800a102:	d007      	beq.n	800a114 <sbrk_aligned+0x38>
 800a104:	1a21      	subs	r1, r4, r0
 800a106:	4628      	mov	r0, r5
 800a108:	f000 fcc6 	bl	800aa98 <_sbrk_r>
 800a10c:	3001      	adds	r0, #1
 800a10e:	d101      	bne.n	800a114 <sbrk_aligned+0x38>
 800a110:	f04f 34ff 	mov.w	r4, #4294967295
 800a114:	4620      	mov	r0, r4
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	20002a58 	.word	0x20002a58

0800a11c <_malloc_r>:
 800a11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a120:	1ccd      	adds	r5, r1, #3
 800a122:	f025 0503 	bic.w	r5, r5, #3
 800a126:	3508      	adds	r5, #8
 800a128:	2d0c      	cmp	r5, #12
 800a12a:	bf38      	it	cc
 800a12c:	250c      	movcc	r5, #12
 800a12e:	2d00      	cmp	r5, #0
 800a130:	4607      	mov	r7, r0
 800a132:	db01      	blt.n	800a138 <_malloc_r+0x1c>
 800a134:	42a9      	cmp	r1, r5
 800a136:	d905      	bls.n	800a144 <_malloc_r+0x28>
 800a138:	230c      	movs	r3, #12
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	2600      	movs	r6, #0
 800a13e:	4630      	mov	r0, r6
 800a140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a144:	4e2e      	ldr	r6, [pc, #184]	; (800a200 <_malloc_r+0xe4>)
 800a146:	f000 ffb9 	bl	800b0bc <__malloc_lock>
 800a14a:	6833      	ldr	r3, [r6, #0]
 800a14c:	461c      	mov	r4, r3
 800a14e:	bb34      	cbnz	r4, 800a19e <_malloc_r+0x82>
 800a150:	4629      	mov	r1, r5
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ffc2 	bl	800a0dc <sbrk_aligned>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	4604      	mov	r4, r0
 800a15c:	d14d      	bne.n	800a1fa <_malloc_r+0xde>
 800a15e:	6834      	ldr	r4, [r6, #0]
 800a160:	4626      	mov	r6, r4
 800a162:	2e00      	cmp	r6, #0
 800a164:	d140      	bne.n	800a1e8 <_malloc_r+0xcc>
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	4631      	mov	r1, r6
 800a16a:	4638      	mov	r0, r7
 800a16c:	eb04 0803 	add.w	r8, r4, r3
 800a170:	f000 fc92 	bl	800aa98 <_sbrk_r>
 800a174:	4580      	cmp	r8, r0
 800a176:	d13a      	bne.n	800a1ee <_malloc_r+0xd2>
 800a178:	6821      	ldr	r1, [r4, #0]
 800a17a:	3503      	adds	r5, #3
 800a17c:	1a6d      	subs	r5, r5, r1
 800a17e:	f025 0503 	bic.w	r5, r5, #3
 800a182:	3508      	adds	r5, #8
 800a184:	2d0c      	cmp	r5, #12
 800a186:	bf38      	it	cc
 800a188:	250c      	movcc	r5, #12
 800a18a:	4629      	mov	r1, r5
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff ffa5 	bl	800a0dc <sbrk_aligned>
 800a192:	3001      	adds	r0, #1
 800a194:	d02b      	beq.n	800a1ee <_malloc_r+0xd2>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	442b      	add	r3, r5
 800a19a:	6023      	str	r3, [r4, #0]
 800a19c:	e00e      	b.n	800a1bc <_malloc_r+0xa0>
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	1b52      	subs	r2, r2, r5
 800a1a2:	d41e      	bmi.n	800a1e2 <_malloc_r+0xc6>
 800a1a4:	2a0b      	cmp	r2, #11
 800a1a6:	d916      	bls.n	800a1d6 <_malloc_r+0xba>
 800a1a8:	1961      	adds	r1, r4, r5
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	6025      	str	r5, [r4, #0]
 800a1ae:	bf18      	it	ne
 800a1b0:	6059      	strne	r1, [r3, #4]
 800a1b2:	6863      	ldr	r3, [r4, #4]
 800a1b4:	bf08      	it	eq
 800a1b6:	6031      	streq	r1, [r6, #0]
 800a1b8:	5162      	str	r2, [r4, r5]
 800a1ba:	604b      	str	r3, [r1, #4]
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f104 060b 	add.w	r6, r4, #11
 800a1c2:	f000 ff81 	bl	800b0c8 <__malloc_unlock>
 800a1c6:	f026 0607 	bic.w	r6, r6, #7
 800a1ca:	1d23      	adds	r3, r4, #4
 800a1cc:	1af2      	subs	r2, r6, r3
 800a1ce:	d0b6      	beq.n	800a13e <_malloc_r+0x22>
 800a1d0:	1b9b      	subs	r3, r3, r6
 800a1d2:	50a3      	str	r3, [r4, r2]
 800a1d4:	e7b3      	b.n	800a13e <_malloc_r+0x22>
 800a1d6:	6862      	ldr	r2, [r4, #4]
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	bf0c      	ite	eq
 800a1dc:	6032      	streq	r2, [r6, #0]
 800a1de:	605a      	strne	r2, [r3, #4]
 800a1e0:	e7ec      	b.n	800a1bc <_malloc_r+0xa0>
 800a1e2:	4623      	mov	r3, r4
 800a1e4:	6864      	ldr	r4, [r4, #4]
 800a1e6:	e7b2      	b.n	800a14e <_malloc_r+0x32>
 800a1e8:	4634      	mov	r4, r6
 800a1ea:	6876      	ldr	r6, [r6, #4]
 800a1ec:	e7b9      	b.n	800a162 <_malloc_r+0x46>
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	603b      	str	r3, [r7, #0]
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f000 ff68 	bl	800b0c8 <__malloc_unlock>
 800a1f8:	e7a1      	b.n	800a13e <_malloc_r+0x22>
 800a1fa:	6025      	str	r5, [r4, #0]
 800a1fc:	e7de      	b.n	800a1bc <_malloc_r+0xa0>
 800a1fe:	bf00      	nop
 800a200:	20002a54 	.word	0x20002a54

0800a204 <__ssputs_r>:
 800a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	688e      	ldr	r6, [r1, #8]
 800a20a:	429e      	cmp	r6, r3
 800a20c:	4682      	mov	sl, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	4690      	mov	r8, r2
 800a212:	461f      	mov	r7, r3
 800a214:	d838      	bhi.n	800a288 <__ssputs_r+0x84>
 800a216:	898a      	ldrh	r2, [r1, #12]
 800a218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a21c:	d032      	beq.n	800a284 <__ssputs_r+0x80>
 800a21e:	6825      	ldr	r5, [r4, #0]
 800a220:	6909      	ldr	r1, [r1, #16]
 800a222:	eba5 0901 	sub.w	r9, r5, r1
 800a226:	6965      	ldr	r5, [r4, #20]
 800a228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a22c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a230:	3301      	adds	r3, #1
 800a232:	444b      	add	r3, r9
 800a234:	106d      	asrs	r5, r5, #1
 800a236:	429d      	cmp	r5, r3
 800a238:	bf38      	it	cc
 800a23a:	461d      	movcc	r5, r3
 800a23c:	0553      	lsls	r3, r2, #21
 800a23e:	d531      	bpl.n	800a2a4 <__ssputs_r+0xa0>
 800a240:	4629      	mov	r1, r5
 800a242:	f7ff ff6b 	bl	800a11c <_malloc_r>
 800a246:	4606      	mov	r6, r0
 800a248:	b950      	cbnz	r0, 800a260 <__ssputs_r+0x5c>
 800a24a:	230c      	movs	r3, #12
 800a24c:	f8ca 3000 	str.w	r3, [sl]
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a260:	6921      	ldr	r1, [r4, #16]
 800a262:	464a      	mov	r2, r9
 800a264:	f7ff fee0 	bl	800a028 <memcpy>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	6126      	str	r6, [r4, #16]
 800a276:	6165      	str	r5, [r4, #20]
 800a278:	444e      	add	r6, r9
 800a27a:	eba5 0509 	sub.w	r5, r5, r9
 800a27e:	6026      	str	r6, [r4, #0]
 800a280:	60a5      	str	r5, [r4, #8]
 800a282:	463e      	mov	r6, r7
 800a284:	42be      	cmp	r6, r7
 800a286:	d900      	bls.n	800a28a <__ssputs_r+0x86>
 800a288:	463e      	mov	r6, r7
 800a28a:	6820      	ldr	r0, [r4, #0]
 800a28c:	4632      	mov	r2, r6
 800a28e:	4641      	mov	r1, r8
 800a290:	f000 fefa 	bl	800b088 <memmove>
 800a294:	68a3      	ldr	r3, [r4, #8]
 800a296:	1b9b      	subs	r3, r3, r6
 800a298:	60a3      	str	r3, [r4, #8]
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	4433      	add	r3, r6
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	e7db      	b.n	800a25c <__ssputs_r+0x58>
 800a2a4:	462a      	mov	r2, r5
 800a2a6:	f000 ff15 	bl	800b0d4 <_realloc_r>
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d1e1      	bne.n	800a274 <__ssputs_r+0x70>
 800a2b0:	6921      	ldr	r1, [r4, #16]
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	f7ff fec6 	bl	800a044 <_free_r>
 800a2b8:	e7c7      	b.n	800a24a <__ssputs_r+0x46>
	...

0800a2bc <_svfiprintf_r>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	4698      	mov	r8, r3
 800a2c2:	898b      	ldrh	r3, [r1, #12]
 800a2c4:	061b      	lsls	r3, r3, #24
 800a2c6:	b09d      	sub	sp, #116	; 0x74
 800a2c8:	4607      	mov	r7, r0
 800a2ca:	460d      	mov	r5, r1
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	d50e      	bpl.n	800a2ee <_svfiprintf_r+0x32>
 800a2d0:	690b      	ldr	r3, [r1, #16]
 800a2d2:	b963      	cbnz	r3, 800a2ee <_svfiprintf_r+0x32>
 800a2d4:	2140      	movs	r1, #64	; 0x40
 800a2d6:	f7ff ff21 	bl	800a11c <_malloc_r>
 800a2da:	6028      	str	r0, [r5, #0]
 800a2dc:	6128      	str	r0, [r5, #16]
 800a2de:	b920      	cbnz	r0, 800a2ea <_svfiprintf_r+0x2e>
 800a2e0:	230c      	movs	r3, #12
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	e0d1      	b.n	800a48e <_svfiprintf_r+0x1d2>
 800a2ea:	2340      	movs	r3, #64	; 0x40
 800a2ec:	616b      	str	r3, [r5, #20]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f2:	2320      	movs	r3, #32
 800a2f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2fc:	2330      	movs	r3, #48	; 0x30
 800a2fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4a8 <_svfiprintf_r+0x1ec>
 800a302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a306:	f04f 0901 	mov.w	r9, #1
 800a30a:	4623      	mov	r3, r4
 800a30c:	469a      	mov	sl, r3
 800a30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a312:	b10a      	cbz	r2, 800a318 <_svfiprintf_r+0x5c>
 800a314:	2a25      	cmp	r2, #37	; 0x25
 800a316:	d1f9      	bne.n	800a30c <_svfiprintf_r+0x50>
 800a318:	ebba 0b04 	subs.w	fp, sl, r4
 800a31c:	d00b      	beq.n	800a336 <_svfiprintf_r+0x7a>
 800a31e:	465b      	mov	r3, fp
 800a320:	4622      	mov	r2, r4
 800a322:	4629      	mov	r1, r5
 800a324:	4638      	mov	r0, r7
 800a326:	f7ff ff6d 	bl	800a204 <__ssputs_r>
 800a32a:	3001      	adds	r0, #1
 800a32c:	f000 80aa 	beq.w	800a484 <_svfiprintf_r+0x1c8>
 800a330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a332:	445a      	add	r2, fp
 800a334:	9209      	str	r2, [sp, #36]	; 0x24
 800a336:	f89a 3000 	ldrb.w	r3, [sl]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 80a2 	beq.w	800a484 <_svfiprintf_r+0x1c8>
 800a340:	2300      	movs	r3, #0
 800a342:	f04f 32ff 	mov.w	r2, #4294967295
 800a346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a34a:	f10a 0a01 	add.w	sl, sl, #1
 800a34e:	9304      	str	r3, [sp, #16]
 800a350:	9307      	str	r3, [sp, #28]
 800a352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a356:	931a      	str	r3, [sp, #104]	; 0x68
 800a358:	4654      	mov	r4, sl
 800a35a:	2205      	movs	r2, #5
 800a35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a360:	4851      	ldr	r0, [pc, #324]	; (800a4a8 <_svfiprintf_r+0x1ec>)
 800a362:	f7f5 ff3d 	bl	80001e0 <memchr>
 800a366:	9a04      	ldr	r2, [sp, #16]
 800a368:	b9d8      	cbnz	r0, 800a3a2 <_svfiprintf_r+0xe6>
 800a36a:	06d0      	lsls	r0, r2, #27
 800a36c:	bf44      	itt	mi
 800a36e:	2320      	movmi	r3, #32
 800a370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a374:	0711      	lsls	r1, r2, #28
 800a376:	bf44      	itt	mi
 800a378:	232b      	movmi	r3, #43	; 0x2b
 800a37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a37e:	f89a 3000 	ldrb.w	r3, [sl]
 800a382:	2b2a      	cmp	r3, #42	; 0x2a
 800a384:	d015      	beq.n	800a3b2 <_svfiprintf_r+0xf6>
 800a386:	9a07      	ldr	r2, [sp, #28]
 800a388:	4654      	mov	r4, sl
 800a38a:	2000      	movs	r0, #0
 800a38c:	f04f 0c0a 	mov.w	ip, #10
 800a390:	4621      	mov	r1, r4
 800a392:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a396:	3b30      	subs	r3, #48	; 0x30
 800a398:	2b09      	cmp	r3, #9
 800a39a:	d94e      	bls.n	800a43a <_svfiprintf_r+0x17e>
 800a39c:	b1b0      	cbz	r0, 800a3cc <_svfiprintf_r+0x110>
 800a39e:	9207      	str	r2, [sp, #28]
 800a3a0:	e014      	b.n	800a3cc <_svfiprintf_r+0x110>
 800a3a2:	eba0 0308 	sub.w	r3, r0, r8
 800a3a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	46a2      	mov	sl, r4
 800a3b0:	e7d2      	b.n	800a358 <_svfiprintf_r+0x9c>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	1d19      	adds	r1, r3, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	9103      	str	r1, [sp, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	bfbb      	ittet	lt
 800a3be:	425b      	neglt	r3, r3
 800a3c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c4:	9307      	strge	r3, [sp, #28]
 800a3c6:	9307      	strlt	r3, [sp, #28]
 800a3c8:	bfb8      	it	lt
 800a3ca:	9204      	strlt	r2, [sp, #16]
 800a3cc:	7823      	ldrb	r3, [r4, #0]
 800a3ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a3d0:	d10c      	bne.n	800a3ec <_svfiprintf_r+0x130>
 800a3d2:	7863      	ldrb	r3, [r4, #1]
 800a3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d6:	d135      	bne.n	800a444 <_svfiprintf_r+0x188>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	1d1a      	adds	r2, r3, #4
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	9203      	str	r2, [sp, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	bfb8      	it	lt
 800a3e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3e8:	3402      	adds	r4, #2
 800a3ea:	9305      	str	r3, [sp, #20]
 800a3ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4b8 <_svfiprintf_r+0x1fc>
 800a3f0:	7821      	ldrb	r1, [r4, #0]
 800a3f2:	2203      	movs	r2, #3
 800a3f4:	4650      	mov	r0, sl
 800a3f6:	f7f5 fef3 	bl	80001e0 <memchr>
 800a3fa:	b140      	cbz	r0, 800a40e <_svfiprintf_r+0x152>
 800a3fc:	2340      	movs	r3, #64	; 0x40
 800a3fe:	eba0 000a 	sub.w	r0, r0, sl
 800a402:	fa03 f000 	lsl.w	r0, r3, r0
 800a406:	9b04      	ldr	r3, [sp, #16]
 800a408:	4303      	orrs	r3, r0
 800a40a:	3401      	adds	r4, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a412:	4826      	ldr	r0, [pc, #152]	; (800a4ac <_svfiprintf_r+0x1f0>)
 800a414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a418:	2206      	movs	r2, #6
 800a41a:	f7f5 fee1 	bl	80001e0 <memchr>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d038      	beq.n	800a494 <_svfiprintf_r+0x1d8>
 800a422:	4b23      	ldr	r3, [pc, #140]	; (800a4b0 <_svfiprintf_r+0x1f4>)
 800a424:	bb1b      	cbnz	r3, 800a46e <_svfiprintf_r+0x1b2>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	3307      	adds	r3, #7
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	3308      	adds	r3, #8
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a434:	4433      	add	r3, r6
 800a436:	9309      	str	r3, [sp, #36]	; 0x24
 800a438:	e767      	b.n	800a30a <_svfiprintf_r+0x4e>
 800a43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a43e:	460c      	mov	r4, r1
 800a440:	2001      	movs	r0, #1
 800a442:	e7a5      	b.n	800a390 <_svfiprintf_r+0xd4>
 800a444:	2300      	movs	r3, #0
 800a446:	3401      	adds	r4, #1
 800a448:	9305      	str	r3, [sp, #20]
 800a44a:	4619      	mov	r1, r3
 800a44c:	f04f 0c0a 	mov.w	ip, #10
 800a450:	4620      	mov	r0, r4
 800a452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a456:	3a30      	subs	r2, #48	; 0x30
 800a458:	2a09      	cmp	r2, #9
 800a45a:	d903      	bls.n	800a464 <_svfiprintf_r+0x1a8>
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0c5      	beq.n	800a3ec <_svfiprintf_r+0x130>
 800a460:	9105      	str	r1, [sp, #20]
 800a462:	e7c3      	b.n	800a3ec <_svfiprintf_r+0x130>
 800a464:	fb0c 2101 	mla	r1, ip, r1, r2
 800a468:	4604      	mov	r4, r0
 800a46a:	2301      	movs	r3, #1
 800a46c:	e7f0      	b.n	800a450 <_svfiprintf_r+0x194>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4b0f      	ldr	r3, [pc, #60]	; (800a4b4 <_svfiprintf_r+0x1f8>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	4638      	mov	r0, r7
 800a47a:	f3af 8000 	nop.w
 800a47e:	1c42      	adds	r2, r0, #1
 800a480:	4606      	mov	r6, r0
 800a482:	d1d6      	bne.n	800a432 <_svfiprintf_r+0x176>
 800a484:	89ab      	ldrh	r3, [r5, #12]
 800a486:	065b      	lsls	r3, r3, #25
 800a488:	f53f af2c 	bmi.w	800a2e4 <_svfiprintf_r+0x28>
 800a48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a48e:	b01d      	add	sp, #116	; 0x74
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	ab03      	add	r3, sp, #12
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	462a      	mov	r2, r5
 800a49a:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <_svfiprintf_r+0x1f8>)
 800a49c:	a904      	add	r1, sp, #16
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f000 f9d4 	bl	800a84c <_printf_i>
 800a4a4:	e7eb      	b.n	800a47e <_svfiprintf_r+0x1c2>
 800a4a6:	bf00      	nop
 800a4a8:	0800f4ca 	.word	0x0800f4ca
 800a4ac:	0800f4d4 	.word	0x0800f4d4
 800a4b0:	00000000 	.word	0x00000000
 800a4b4:	0800a205 	.word	0x0800a205
 800a4b8:	0800f4d0 	.word	0x0800f4d0

0800a4bc <__sfputc_r>:
 800a4bc:	6893      	ldr	r3, [r2, #8]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	b410      	push	{r4}
 800a4c4:	6093      	str	r3, [r2, #8]
 800a4c6:	da08      	bge.n	800a4da <__sfputc_r+0x1e>
 800a4c8:	6994      	ldr	r4, [r2, #24]
 800a4ca:	42a3      	cmp	r3, r4
 800a4cc:	db01      	blt.n	800a4d2 <__sfputc_r+0x16>
 800a4ce:	290a      	cmp	r1, #10
 800a4d0:	d103      	bne.n	800a4da <__sfputc_r+0x1e>
 800a4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d6:	f000 baef 	b.w	800aab8 <__swbuf_r>
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	1c58      	adds	r0, r3, #1
 800a4de:	6010      	str	r0, [r2, #0]
 800a4e0:	7019      	strb	r1, [r3, #0]
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <__sfputs_r>:
 800a4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	18d5      	adds	r5, r2, r3
 800a4f4:	42ac      	cmp	r4, r5
 800a4f6:	d101      	bne.n	800a4fc <__sfputs_r+0x12>
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e007      	b.n	800a50c <__sfputs_r+0x22>
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	463a      	mov	r2, r7
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff ffda 	bl	800a4bc <__sfputc_r>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d1f3      	bne.n	800a4f4 <__sfputs_r+0xa>
 800a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a510 <_vfiprintf_r>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	460d      	mov	r5, r1
 800a516:	b09d      	sub	sp, #116	; 0x74
 800a518:	4614      	mov	r4, r2
 800a51a:	4698      	mov	r8, r3
 800a51c:	4606      	mov	r6, r0
 800a51e:	b118      	cbz	r0, 800a528 <_vfiprintf_r+0x18>
 800a520:	6983      	ldr	r3, [r0, #24]
 800a522:	b90b      	cbnz	r3, 800a528 <_vfiprintf_r+0x18>
 800a524:	f000 fcaa 	bl	800ae7c <__sinit>
 800a528:	4b89      	ldr	r3, [pc, #548]	; (800a750 <_vfiprintf_r+0x240>)
 800a52a:	429d      	cmp	r5, r3
 800a52c:	d11b      	bne.n	800a566 <_vfiprintf_r+0x56>
 800a52e:	6875      	ldr	r5, [r6, #4]
 800a530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a532:	07d9      	lsls	r1, r3, #31
 800a534:	d405      	bmi.n	800a542 <_vfiprintf_r+0x32>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	059a      	lsls	r2, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_vfiprintf_r+0x32>
 800a53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a53e:	f000 fd3b 	bl	800afb8 <__retarget_lock_acquire_recursive>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	071b      	lsls	r3, r3, #28
 800a546:	d501      	bpl.n	800a54c <_vfiprintf_r+0x3c>
 800a548:	692b      	ldr	r3, [r5, #16]
 800a54a:	b9eb      	cbnz	r3, 800a588 <_vfiprintf_r+0x78>
 800a54c:	4629      	mov	r1, r5
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 fb04 	bl	800ab5c <__swsetup_r>
 800a554:	b1c0      	cbz	r0, 800a588 <_vfiprintf_r+0x78>
 800a556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a558:	07dc      	lsls	r4, r3, #31
 800a55a:	d50e      	bpl.n	800a57a <_vfiprintf_r+0x6a>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b01d      	add	sp, #116	; 0x74
 800a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a566:	4b7b      	ldr	r3, [pc, #492]	; (800a754 <_vfiprintf_r+0x244>)
 800a568:	429d      	cmp	r5, r3
 800a56a:	d101      	bne.n	800a570 <_vfiprintf_r+0x60>
 800a56c:	68b5      	ldr	r5, [r6, #8]
 800a56e:	e7df      	b.n	800a530 <_vfiprintf_r+0x20>
 800a570:	4b79      	ldr	r3, [pc, #484]	; (800a758 <_vfiprintf_r+0x248>)
 800a572:	429d      	cmp	r5, r3
 800a574:	bf08      	it	eq
 800a576:	68f5      	ldreq	r5, [r6, #12]
 800a578:	e7da      	b.n	800a530 <_vfiprintf_r+0x20>
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	0598      	lsls	r0, r3, #22
 800a57e:	d4ed      	bmi.n	800a55c <_vfiprintf_r+0x4c>
 800a580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a582:	f000 fd1a 	bl	800afba <__retarget_lock_release_recursive>
 800a586:	e7e9      	b.n	800a55c <_vfiprintf_r+0x4c>
 800a588:	2300      	movs	r3, #0
 800a58a:	9309      	str	r3, [sp, #36]	; 0x24
 800a58c:	2320      	movs	r3, #32
 800a58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a592:	f8cd 800c 	str.w	r8, [sp, #12]
 800a596:	2330      	movs	r3, #48	; 0x30
 800a598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a75c <_vfiprintf_r+0x24c>
 800a59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5a0:	f04f 0901 	mov.w	r9, #1
 800a5a4:	4623      	mov	r3, r4
 800a5a6:	469a      	mov	sl, r3
 800a5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ac:	b10a      	cbz	r2, 800a5b2 <_vfiprintf_r+0xa2>
 800a5ae:	2a25      	cmp	r2, #37	; 0x25
 800a5b0:	d1f9      	bne.n	800a5a6 <_vfiprintf_r+0x96>
 800a5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b6:	d00b      	beq.n	800a5d0 <_vfiprintf_r+0xc0>
 800a5b8:	465b      	mov	r3, fp
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	4629      	mov	r1, r5
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff ff93 	bl	800a4ea <__sfputs_r>
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	f000 80aa 	beq.w	800a71e <_vfiprintf_r+0x20e>
 800a5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5cc:	445a      	add	r2, fp
 800a5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 80a2 	beq.w	800a71e <_vfiprintf_r+0x20e>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e4:	f10a 0a01 	add.w	sl, sl, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	9307      	str	r3, [sp, #28]
 800a5ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a5f2:	4654      	mov	r4, sl
 800a5f4:	2205      	movs	r2, #5
 800a5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fa:	4858      	ldr	r0, [pc, #352]	; (800a75c <_vfiprintf_r+0x24c>)
 800a5fc:	f7f5 fdf0 	bl	80001e0 <memchr>
 800a600:	9a04      	ldr	r2, [sp, #16]
 800a602:	b9d8      	cbnz	r0, 800a63c <_vfiprintf_r+0x12c>
 800a604:	06d1      	lsls	r1, r2, #27
 800a606:	bf44      	itt	mi
 800a608:	2320      	movmi	r3, #32
 800a60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a60e:	0713      	lsls	r3, r2, #28
 800a610:	bf44      	itt	mi
 800a612:	232b      	movmi	r3, #43	; 0x2b
 800a614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a618:	f89a 3000 	ldrb.w	r3, [sl]
 800a61c:	2b2a      	cmp	r3, #42	; 0x2a
 800a61e:	d015      	beq.n	800a64c <_vfiprintf_r+0x13c>
 800a620:	9a07      	ldr	r2, [sp, #28]
 800a622:	4654      	mov	r4, sl
 800a624:	2000      	movs	r0, #0
 800a626:	f04f 0c0a 	mov.w	ip, #10
 800a62a:	4621      	mov	r1, r4
 800a62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a630:	3b30      	subs	r3, #48	; 0x30
 800a632:	2b09      	cmp	r3, #9
 800a634:	d94e      	bls.n	800a6d4 <_vfiprintf_r+0x1c4>
 800a636:	b1b0      	cbz	r0, 800a666 <_vfiprintf_r+0x156>
 800a638:	9207      	str	r2, [sp, #28]
 800a63a:	e014      	b.n	800a666 <_vfiprintf_r+0x156>
 800a63c:	eba0 0308 	sub.w	r3, r0, r8
 800a640:	fa09 f303 	lsl.w	r3, r9, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	46a2      	mov	sl, r4
 800a64a:	e7d2      	b.n	800a5f2 <_vfiprintf_r+0xe2>
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	1d19      	adds	r1, r3, #4
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	9103      	str	r1, [sp, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfbb      	ittet	lt
 800a658:	425b      	neglt	r3, r3
 800a65a:	f042 0202 	orrlt.w	r2, r2, #2
 800a65e:	9307      	strge	r3, [sp, #28]
 800a660:	9307      	strlt	r3, [sp, #28]
 800a662:	bfb8      	it	lt
 800a664:	9204      	strlt	r2, [sp, #16]
 800a666:	7823      	ldrb	r3, [r4, #0]
 800a668:	2b2e      	cmp	r3, #46	; 0x2e
 800a66a:	d10c      	bne.n	800a686 <_vfiprintf_r+0x176>
 800a66c:	7863      	ldrb	r3, [r4, #1]
 800a66e:	2b2a      	cmp	r3, #42	; 0x2a
 800a670:	d135      	bne.n	800a6de <_vfiprintf_r+0x1ce>
 800a672:	9b03      	ldr	r3, [sp, #12]
 800a674:	1d1a      	adds	r2, r3, #4
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	9203      	str	r2, [sp, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	bfb8      	it	lt
 800a67e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a682:	3402      	adds	r4, #2
 800a684:	9305      	str	r3, [sp, #20]
 800a686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a76c <_vfiprintf_r+0x25c>
 800a68a:	7821      	ldrb	r1, [r4, #0]
 800a68c:	2203      	movs	r2, #3
 800a68e:	4650      	mov	r0, sl
 800a690:	f7f5 fda6 	bl	80001e0 <memchr>
 800a694:	b140      	cbz	r0, 800a6a8 <_vfiprintf_r+0x198>
 800a696:	2340      	movs	r3, #64	; 0x40
 800a698:	eba0 000a 	sub.w	r0, r0, sl
 800a69c:	fa03 f000 	lsl.w	r0, r3, r0
 800a6a0:	9b04      	ldr	r3, [sp, #16]
 800a6a2:	4303      	orrs	r3, r0
 800a6a4:	3401      	adds	r4, #1
 800a6a6:	9304      	str	r3, [sp, #16]
 800a6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ac:	482c      	ldr	r0, [pc, #176]	; (800a760 <_vfiprintf_r+0x250>)
 800a6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6b2:	2206      	movs	r2, #6
 800a6b4:	f7f5 fd94 	bl	80001e0 <memchr>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d03f      	beq.n	800a73c <_vfiprintf_r+0x22c>
 800a6bc:	4b29      	ldr	r3, [pc, #164]	; (800a764 <_vfiprintf_r+0x254>)
 800a6be:	bb1b      	cbnz	r3, 800a708 <_vfiprintf_r+0x1f8>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	3307      	adds	r3, #7
 800a6c4:	f023 0307 	bic.w	r3, r3, #7
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ce:	443b      	add	r3, r7
 800a6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d2:	e767      	b.n	800a5a4 <_vfiprintf_r+0x94>
 800a6d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6d8:	460c      	mov	r4, r1
 800a6da:	2001      	movs	r0, #1
 800a6dc:	e7a5      	b.n	800a62a <_vfiprintf_r+0x11a>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	3401      	adds	r4, #1
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f04f 0c0a 	mov.w	ip, #10
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f0:	3a30      	subs	r2, #48	; 0x30
 800a6f2:	2a09      	cmp	r2, #9
 800a6f4:	d903      	bls.n	800a6fe <_vfiprintf_r+0x1ee>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0c5      	beq.n	800a686 <_vfiprintf_r+0x176>
 800a6fa:	9105      	str	r1, [sp, #20]
 800a6fc:	e7c3      	b.n	800a686 <_vfiprintf_r+0x176>
 800a6fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a702:	4604      	mov	r4, r0
 800a704:	2301      	movs	r3, #1
 800a706:	e7f0      	b.n	800a6ea <_vfiprintf_r+0x1da>
 800a708:	ab03      	add	r3, sp, #12
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	462a      	mov	r2, r5
 800a70e:	4b16      	ldr	r3, [pc, #88]	; (800a768 <_vfiprintf_r+0x258>)
 800a710:	a904      	add	r1, sp, #16
 800a712:	4630      	mov	r0, r6
 800a714:	f3af 8000 	nop.w
 800a718:	4607      	mov	r7, r0
 800a71a:	1c78      	adds	r0, r7, #1
 800a71c:	d1d6      	bne.n	800a6cc <_vfiprintf_r+0x1bc>
 800a71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a720:	07d9      	lsls	r1, r3, #31
 800a722:	d405      	bmi.n	800a730 <_vfiprintf_r+0x220>
 800a724:	89ab      	ldrh	r3, [r5, #12]
 800a726:	059a      	lsls	r2, r3, #22
 800a728:	d402      	bmi.n	800a730 <_vfiprintf_r+0x220>
 800a72a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72c:	f000 fc45 	bl	800afba <__retarget_lock_release_recursive>
 800a730:	89ab      	ldrh	r3, [r5, #12]
 800a732:	065b      	lsls	r3, r3, #25
 800a734:	f53f af12 	bmi.w	800a55c <_vfiprintf_r+0x4c>
 800a738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a73a:	e711      	b.n	800a560 <_vfiprintf_r+0x50>
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	462a      	mov	r2, r5
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <_vfiprintf_r+0x258>)
 800a744:	a904      	add	r1, sp, #16
 800a746:	4630      	mov	r0, r6
 800a748:	f000 f880 	bl	800a84c <_printf_i>
 800a74c:	e7e4      	b.n	800a718 <_vfiprintf_r+0x208>
 800a74e:	bf00      	nop
 800a750:	0800f520 	.word	0x0800f520
 800a754:	0800f540 	.word	0x0800f540
 800a758:	0800f500 	.word	0x0800f500
 800a75c:	0800f4ca 	.word	0x0800f4ca
 800a760:	0800f4d4 	.word	0x0800f4d4
 800a764:	00000000 	.word	0x00000000
 800a768:	0800a4eb 	.word	0x0800a4eb
 800a76c:	0800f4d0 	.word	0x0800f4d0

0800a770 <_printf_common>:
 800a770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	4616      	mov	r6, r2
 800a776:	4699      	mov	r9, r3
 800a778:	688a      	ldr	r2, [r1, #8]
 800a77a:	690b      	ldr	r3, [r1, #16]
 800a77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a780:	4293      	cmp	r3, r2
 800a782:	bfb8      	it	lt
 800a784:	4613      	movlt	r3, r2
 800a786:	6033      	str	r3, [r6, #0]
 800a788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a78c:	4607      	mov	r7, r0
 800a78e:	460c      	mov	r4, r1
 800a790:	b10a      	cbz	r2, 800a796 <_printf_common+0x26>
 800a792:	3301      	adds	r3, #1
 800a794:	6033      	str	r3, [r6, #0]
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	0699      	lsls	r1, r3, #26
 800a79a:	bf42      	ittt	mi
 800a79c:	6833      	ldrmi	r3, [r6, #0]
 800a79e:	3302      	addmi	r3, #2
 800a7a0:	6033      	strmi	r3, [r6, #0]
 800a7a2:	6825      	ldr	r5, [r4, #0]
 800a7a4:	f015 0506 	ands.w	r5, r5, #6
 800a7a8:	d106      	bne.n	800a7b8 <_printf_common+0x48>
 800a7aa:	f104 0a19 	add.w	sl, r4, #25
 800a7ae:	68e3      	ldr	r3, [r4, #12]
 800a7b0:	6832      	ldr	r2, [r6, #0]
 800a7b2:	1a9b      	subs	r3, r3, r2
 800a7b4:	42ab      	cmp	r3, r5
 800a7b6:	dc26      	bgt.n	800a806 <_printf_common+0x96>
 800a7b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7bc:	1e13      	subs	r3, r2, #0
 800a7be:	6822      	ldr	r2, [r4, #0]
 800a7c0:	bf18      	it	ne
 800a7c2:	2301      	movne	r3, #1
 800a7c4:	0692      	lsls	r2, r2, #26
 800a7c6:	d42b      	bmi.n	800a820 <_printf_common+0xb0>
 800a7c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c0      	blx	r8
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d01e      	beq.n	800a814 <_printf_common+0xa4>
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	68e5      	ldr	r5, [r4, #12]
 800a7da:	6832      	ldr	r2, [r6, #0]
 800a7dc:	f003 0306 	and.w	r3, r3, #6
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	bf08      	it	eq
 800a7e4:	1aad      	subeq	r5, r5, r2
 800a7e6:	68a3      	ldr	r3, [r4, #8]
 800a7e8:	6922      	ldr	r2, [r4, #16]
 800a7ea:	bf0c      	ite	eq
 800a7ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f0:	2500      	movne	r5, #0
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	bfc4      	itt	gt
 800a7f6:	1a9b      	subgt	r3, r3, r2
 800a7f8:	18ed      	addgt	r5, r5, r3
 800a7fa:	2600      	movs	r6, #0
 800a7fc:	341a      	adds	r4, #26
 800a7fe:	42b5      	cmp	r5, r6
 800a800:	d11a      	bne.n	800a838 <_printf_common+0xc8>
 800a802:	2000      	movs	r0, #0
 800a804:	e008      	b.n	800a818 <_printf_common+0xa8>
 800a806:	2301      	movs	r3, #1
 800a808:	4652      	mov	r2, sl
 800a80a:	4649      	mov	r1, r9
 800a80c:	4638      	mov	r0, r7
 800a80e:	47c0      	blx	r8
 800a810:	3001      	adds	r0, #1
 800a812:	d103      	bne.n	800a81c <_printf_common+0xac>
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81c:	3501      	adds	r5, #1
 800a81e:	e7c6      	b.n	800a7ae <_printf_common+0x3e>
 800a820:	18e1      	adds	r1, r4, r3
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	2030      	movs	r0, #48	; 0x30
 800a826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a82a:	4422      	add	r2, r4
 800a82c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a834:	3302      	adds	r3, #2
 800a836:	e7c7      	b.n	800a7c8 <_printf_common+0x58>
 800a838:	2301      	movs	r3, #1
 800a83a:	4622      	mov	r2, r4
 800a83c:	4649      	mov	r1, r9
 800a83e:	4638      	mov	r0, r7
 800a840:	47c0      	blx	r8
 800a842:	3001      	adds	r0, #1
 800a844:	d0e6      	beq.n	800a814 <_printf_common+0xa4>
 800a846:	3601      	adds	r6, #1
 800a848:	e7d9      	b.n	800a7fe <_printf_common+0x8e>
	...

0800a84c <_printf_i>:
 800a84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a850:	7e0f      	ldrb	r7, [r1, #24]
 800a852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a854:	2f78      	cmp	r7, #120	; 0x78
 800a856:	4691      	mov	r9, r2
 800a858:	4680      	mov	r8, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	469a      	mov	sl, r3
 800a85e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a862:	d807      	bhi.n	800a874 <_printf_i+0x28>
 800a864:	2f62      	cmp	r7, #98	; 0x62
 800a866:	d80a      	bhi.n	800a87e <_printf_i+0x32>
 800a868:	2f00      	cmp	r7, #0
 800a86a:	f000 80d8 	beq.w	800aa1e <_printf_i+0x1d2>
 800a86e:	2f58      	cmp	r7, #88	; 0x58
 800a870:	f000 80a3 	beq.w	800a9ba <_printf_i+0x16e>
 800a874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a87c:	e03a      	b.n	800a8f4 <_printf_i+0xa8>
 800a87e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a882:	2b15      	cmp	r3, #21
 800a884:	d8f6      	bhi.n	800a874 <_printf_i+0x28>
 800a886:	a101      	add	r1, pc, #4	; (adr r1, 800a88c <_printf_i+0x40>)
 800a888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a88c:	0800a8e5 	.word	0x0800a8e5
 800a890:	0800a8f9 	.word	0x0800a8f9
 800a894:	0800a875 	.word	0x0800a875
 800a898:	0800a875 	.word	0x0800a875
 800a89c:	0800a875 	.word	0x0800a875
 800a8a0:	0800a875 	.word	0x0800a875
 800a8a4:	0800a8f9 	.word	0x0800a8f9
 800a8a8:	0800a875 	.word	0x0800a875
 800a8ac:	0800a875 	.word	0x0800a875
 800a8b0:	0800a875 	.word	0x0800a875
 800a8b4:	0800a875 	.word	0x0800a875
 800a8b8:	0800aa05 	.word	0x0800aa05
 800a8bc:	0800a929 	.word	0x0800a929
 800a8c0:	0800a9e7 	.word	0x0800a9e7
 800a8c4:	0800a875 	.word	0x0800a875
 800a8c8:	0800a875 	.word	0x0800a875
 800a8cc:	0800aa27 	.word	0x0800aa27
 800a8d0:	0800a875 	.word	0x0800a875
 800a8d4:	0800a929 	.word	0x0800a929
 800a8d8:	0800a875 	.word	0x0800a875
 800a8dc:	0800a875 	.word	0x0800a875
 800a8e0:	0800a9ef 	.word	0x0800a9ef
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	1d1a      	adds	r2, r3, #4
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	602a      	str	r2, [r5, #0]
 800a8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0a3      	b.n	800aa40 <_printf_i+0x1f4>
 800a8f8:	6820      	ldr	r0, [r4, #0]
 800a8fa:	6829      	ldr	r1, [r5, #0]
 800a8fc:	0606      	lsls	r6, r0, #24
 800a8fe:	f101 0304 	add.w	r3, r1, #4
 800a902:	d50a      	bpl.n	800a91a <_printf_i+0xce>
 800a904:	680e      	ldr	r6, [r1, #0]
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	2e00      	cmp	r6, #0
 800a90a:	da03      	bge.n	800a914 <_printf_i+0xc8>
 800a90c:	232d      	movs	r3, #45	; 0x2d
 800a90e:	4276      	negs	r6, r6
 800a910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a914:	485e      	ldr	r0, [pc, #376]	; (800aa90 <_printf_i+0x244>)
 800a916:	230a      	movs	r3, #10
 800a918:	e019      	b.n	800a94e <_printf_i+0x102>
 800a91a:	680e      	ldr	r6, [r1, #0]
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a922:	bf18      	it	ne
 800a924:	b236      	sxthne	r6, r6
 800a926:	e7ef      	b.n	800a908 <_printf_i+0xbc>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	6820      	ldr	r0, [r4, #0]
 800a92c:	1d19      	adds	r1, r3, #4
 800a92e:	6029      	str	r1, [r5, #0]
 800a930:	0601      	lsls	r1, r0, #24
 800a932:	d501      	bpl.n	800a938 <_printf_i+0xec>
 800a934:	681e      	ldr	r6, [r3, #0]
 800a936:	e002      	b.n	800a93e <_printf_i+0xf2>
 800a938:	0646      	lsls	r6, r0, #25
 800a93a:	d5fb      	bpl.n	800a934 <_printf_i+0xe8>
 800a93c:	881e      	ldrh	r6, [r3, #0]
 800a93e:	4854      	ldr	r0, [pc, #336]	; (800aa90 <_printf_i+0x244>)
 800a940:	2f6f      	cmp	r7, #111	; 0x6f
 800a942:	bf0c      	ite	eq
 800a944:	2308      	moveq	r3, #8
 800a946:	230a      	movne	r3, #10
 800a948:	2100      	movs	r1, #0
 800a94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a94e:	6865      	ldr	r5, [r4, #4]
 800a950:	60a5      	str	r5, [r4, #8]
 800a952:	2d00      	cmp	r5, #0
 800a954:	bfa2      	ittt	ge
 800a956:	6821      	ldrge	r1, [r4, #0]
 800a958:	f021 0104 	bicge.w	r1, r1, #4
 800a95c:	6021      	strge	r1, [r4, #0]
 800a95e:	b90e      	cbnz	r6, 800a964 <_printf_i+0x118>
 800a960:	2d00      	cmp	r5, #0
 800a962:	d04d      	beq.n	800aa00 <_printf_i+0x1b4>
 800a964:	4615      	mov	r5, r2
 800a966:	fbb6 f1f3 	udiv	r1, r6, r3
 800a96a:	fb03 6711 	mls	r7, r3, r1, r6
 800a96e:	5dc7      	ldrb	r7, [r0, r7]
 800a970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a974:	4637      	mov	r7, r6
 800a976:	42bb      	cmp	r3, r7
 800a978:	460e      	mov	r6, r1
 800a97a:	d9f4      	bls.n	800a966 <_printf_i+0x11a>
 800a97c:	2b08      	cmp	r3, #8
 800a97e:	d10b      	bne.n	800a998 <_printf_i+0x14c>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	07de      	lsls	r6, r3, #31
 800a984:	d508      	bpl.n	800a998 <_printf_i+0x14c>
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	6861      	ldr	r1, [r4, #4]
 800a98a:	4299      	cmp	r1, r3
 800a98c:	bfde      	ittt	le
 800a98e:	2330      	movle	r3, #48	; 0x30
 800a990:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a994:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a998:	1b52      	subs	r2, r2, r5
 800a99a:	6122      	str	r2, [r4, #16]
 800a99c:	f8cd a000 	str.w	sl, [sp]
 800a9a0:	464b      	mov	r3, r9
 800a9a2:	aa03      	add	r2, sp, #12
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7ff fee2 	bl	800a770 <_printf_common>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d14c      	bne.n	800aa4a <_printf_i+0x1fe>
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	b004      	add	sp, #16
 800a9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ba:	4835      	ldr	r0, [pc, #212]	; (800aa90 <_printf_i+0x244>)
 800a9bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9c0:	6829      	ldr	r1, [r5, #0]
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9c8:	6029      	str	r1, [r5, #0]
 800a9ca:	061d      	lsls	r5, r3, #24
 800a9cc:	d514      	bpl.n	800a9f8 <_printf_i+0x1ac>
 800a9ce:	07df      	lsls	r7, r3, #31
 800a9d0:	bf44      	itt	mi
 800a9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800a9d6:	6023      	strmi	r3, [r4, #0]
 800a9d8:	b91e      	cbnz	r6, 800a9e2 <_printf_i+0x196>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	f023 0320 	bic.w	r3, r3, #32
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	2310      	movs	r3, #16
 800a9e4:	e7b0      	b.n	800a948 <_printf_i+0xfc>
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	f043 0320 	orr.w	r3, r3, #32
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	2378      	movs	r3, #120	; 0x78
 800a9f0:	4828      	ldr	r0, [pc, #160]	; (800aa94 <_printf_i+0x248>)
 800a9f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9f6:	e7e3      	b.n	800a9c0 <_printf_i+0x174>
 800a9f8:	0659      	lsls	r1, r3, #25
 800a9fa:	bf48      	it	mi
 800a9fc:	b2b6      	uxthmi	r6, r6
 800a9fe:	e7e6      	b.n	800a9ce <_printf_i+0x182>
 800aa00:	4615      	mov	r5, r2
 800aa02:	e7bb      	b.n	800a97c <_printf_i+0x130>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	6826      	ldr	r6, [r4, #0]
 800aa08:	6961      	ldr	r1, [r4, #20]
 800aa0a:	1d18      	adds	r0, r3, #4
 800aa0c:	6028      	str	r0, [r5, #0]
 800aa0e:	0635      	lsls	r5, r6, #24
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	d501      	bpl.n	800aa18 <_printf_i+0x1cc>
 800aa14:	6019      	str	r1, [r3, #0]
 800aa16:	e002      	b.n	800aa1e <_printf_i+0x1d2>
 800aa18:	0670      	lsls	r0, r6, #25
 800aa1a:	d5fb      	bpl.n	800aa14 <_printf_i+0x1c8>
 800aa1c:	8019      	strh	r1, [r3, #0]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6123      	str	r3, [r4, #16]
 800aa22:	4615      	mov	r5, r2
 800aa24:	e7ba      	b.n	800a99c <_printf_i+0x150>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	1d1a      	adds	r2, r3, #4
 800aa2a:	602a      	str	r2, [r5, #0]
 800aa2c:	681d      	ldr	r5, [r3, #0]
 800aa2e:	6862      	ldr	r2, [r4, #4]
 800aa30:	2100      	movs	r1, #0
 800aa32:	4628      	mov	r0, r5
 800aa34:	f7f5 fbd4 	bl	80001e0 <memchr>
 800aa38:	b108      	cbz	r0, 800aa3e <_printf_i+0x1f2>
 800aa3a:	1b40      	subs	r0, r0, r5
 800aa3c:	6060      	str	r0, [r4, #4]
 800aa3e:	6863      	ldr	r3, [r4, #4]
 800aa40:	6123      	str	r3, [r4, #16]
 800aa42:	2300      	movs	r3, #0
 800aa44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa48:	e7a8      	b.n	800a99c <_printf_i+0x150>
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4649      	mov	r1, r9
 800aa50:	4640      	mov	r0, r8
 800aa52:	47d0      	blx	sl
 800aa54:	3001      	adds	r0, #1
 800aa56:	d0ab      	beq.n	800a9b0 <_printf_i+0x164>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	079b      	lsls	r3, r3, #30
 800aa5c:	d413      	bmi.n	800aa86 <_printf_i+0x23a>
 800aa5e:	68e0      	ldr	r0, [r4, #12]
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	4298      	cmp	r0, r3
 800aa64:	bfb8      	it	lt
 800aa66:	4618      	movlt	r0, r3
 800aa68:	e7a4      	b.n	800a9b4 <_printf_i+0x168>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4640      	mov	r0, r8
 800aa72:	47d0      	blx	sl
 800aa74:	3001      	adds	r0, #1
 800aa76:	d09b      	beq.n	800a9b0 <_printf_i+0x164>
 800aa78:	3501      	adds	r5, #1
 800aa7a:	68e3      	ldr	r3, [r4, #12]
 800aa7c:	9903      	ldr	r1, [sp, #12]
 800aa7e:	1a5b      	subs	r3, r3, r1
 800aa80:	42ab      	cmp	r3, r5
 800aa82:	dcf2      	bgt.n	800aa6a <_printf_i+0x21e>
 800aa84:	e7eb      	b.n	800aa5e <_printf_i+0x212>
 800aa86:	2500      	movs	r5, #0
 800aa88:	f104 0619 	add.w	r6, r4, #25
 800aa8c:	e7f5      	b.n	800aa7a <_printf_i+0x22e>
 800aa8e:	bf00      	nop
 800aa90:	0800f4db 	.word	0x0800f4db
 800aa94:	0800f4ec 	.word	0x0800f4ec

0800aa98 <_sbrk_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4d06      	ldr	r5, [pc, #24]	; (800aab4 <_sbrk_r+0x1c>)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	f7fb f93c 	bl	8005d20 <_sbrk>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_sbrk_r+0x1a>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_sbrk_r+0x1a>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20002a60 	.word	0x20002a60

0800aab8 <__swbuf_r>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	460e      	mov	r6, r1
 800aabc:	4614      	mov	r4, r2
 800aabe:	4605      	mov	r5, r0
 800aac0:	b118      	cbz	r0, 800aaca <__swbuf_r+0x12>
 800aac2:	6983      	ldr	r3, [r0, #24]
 800aac4:	b90b      	cbnz	r3, 800aaca <__swbuf_r+0x12>
 800aac6:	f000 f9d9 	bl	800ae7c <__sinit>
 800aaca:	4b21      	ldr	r3, [pc, #132]	; (800ab50 <__swbuf_r+0x98>)
 800aacc:	429c      	cmp	r4, r3
 800aace:	d12b      	bne.n	800ab28 <__swbuf_r+0x70>
 800aad0:	686c      	ldr	r4, [r5, #4]
 800aad2:	69a3      	ldr	r3, [r4, #24]
 800aad4:	60a3      	str	r3, [r4, #8]
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	071a      	lsls	r2, r3, #28
 800aada:	d52f      	bpl.n	800ab3c <__swbuf_r+0x84>
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	b36b      	cbz	r3, 800ab3c <__swbuf_r+0x84>
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	1ac0      	subs	r0, r0, r3
 800aae6:	6963      	ldr	r3, [r4, #20]
 800aae8:	b2f6      	uxtb	r6, r6
 800aaea:	4283      	cmp	r3, r0
 800aaec:	4637      	mov	r7, r6
 800aaee:	dc04      	bgt.n	800aafa <__swbuf_r+0x42>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f92e 	bl	800ad54 <_fflush_r>
 800aaf8:	bb30      	cbnz	r0, 800ab48 <__swbuf_r+0x90>
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	60a3      	str	r3, [r4, #8]
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	6022      	str	r2, [r4, #0]
 800ab06:	701e      	strb	r6, [r3, #0]
 800ab08:	6963      	ldr	r3, [r4, #20]
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	4283      	cmp	r3, r0
 800ab0e:	d004      	beq.n	800ab1a <__swbuf_r+0x62>
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	07db      	lsls	r3, r3, #31
 800ab14:	d506      	bpl.n	800ab24 <__swbuf_r+0x6c>
 800ab16:	2e0a      	cmp	r6, #10
 800ab18:	d104      	bne.n	800ab24 <__swbuf_r+0x6c>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 f919 	bl	800ad54 <_fflush_r>
 800ab22:	b988      	cbnz	r0, 800ab48 <__swbuf_r+0x90>
 800ab24:	4638      	mov	r0, r7
 800ab26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <__swbuf_r+0x9c>)
 800ab2a:	429c      	cmp	r4, r3
 800ab2c:	d101      	bne.n	800ab32 <__swbuf_r+0x7a>
 800ab2e:	68ac      	ldr	r4, [r5, #8]
 800ab30:	e7cf      	b.n	800aad2 <__swbuf_r+0x1a>
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <__swbuf_r+0xa0>)
 800ab34:	429c      	cmp	r4, r3
 800ab36:	bf08      	it	eq
 800ab38:	68ec      	ldreq	r4, [r5, #12]
 800ab3a:	e7ca      	b.n	800aad2 <__swbuf_r+0x1a>
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 f80c 	bl	800ab5c <__swsetup_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d0cb      	beq.n	800aae0 <__swbuf_r+0x28>
 800ab48:	f04f 37ff 	mov.w	r7, #4294967295
 800ab4c:	e7ea      	b.n	800ab24 <__swbuf_r+0x6c>
 800ab4e:	bf00      	nop
 800ab50:	0800f520 	.word	0x0800f520
 800ab54:	0800f540 	.word	0x0800f540
 800ab58:	0800f500 	.word	0x0800f500

0800ab5c <__swsetup_r>:
 800ab5c:	4b32      	ldr	r3, [pc, #200]	; (800ac28 <__swsetup_r+0xcc>)
 800ab5e:	b570      	push	{r4, r5, r6, lr}
 800ab60:	681d      	ldr	r5, [r3, #0]
 800ab62:	4606      	mov	r6, r0
 800ab64:	460c      	mov	r4, r1
 800ab66:	b125      	cbz	r5, 800ab72 <__swsetup_r+0x16>
 800ab68:	69ab      	ldr	r3, [r5, #24]
 800ab6a:	b913      	cbnz	r3, 800ab72 <__swsetup_r+0x16>
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f000 f985 	bl	800ae7c <__sinit>
 800ab72:	4b2e      	ldr	r3, [pc, #184]	; (800ac2c <__swsetup_r+0xd0>)
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d10f      	bne.n	800ab98 <__swsetup_r+0x3c>
 800ab78:	686c      	ldr	r4, [r5, #4]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab80:	0719      	lsls	r1, r3, #28
 800ab82:	d42c      	bmi.n	800abde <__swsetup_r+0x82>
 800ab84:	06dd      	lsls	r5, r3, #27
 800ab86:	d411      	bmi.n	800abac <__swsetup_r+0x50>
 800ab88:	2309      	movs	r3, #9
 800ab8a:	6033      	str	r3, [r6, #0]
 800ab8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	f04f 30ff 	mov.w	r0, #4294967295
 800ab96:	e03e      	b.n	800ac16 <__swsetup_r+0xba>
 800ab98:	4b25      	ldr	r3, [pc, #148]	; (800ac30 <__swsetup_r+0xd4>)
 800ab9a:	429c      	cmp	r4, r3
 800ab9c:	d101      	bne.n	800aba2 <__swsetup_r+0x46>
 800ab9e:	68ac      	ldr	r4, [r5, #8]
 800aba0:	e7eb      	b.n	800ab7a <__swsetup_r+0x1e>
 800aba2:	4b24      	ldr	r3, [pc, #144]	; (800ac34 <__swsetup_r+0xd8>)
 800aba4:	429c      	cmp	r4, r3
 800aba6:	bf08      	it	eq
 800aba8:	68ec      	ldreq	r4, [r5, #12]
 800abaa:	e7e6      	b.n	800ab7a <__swsetup_r+0x1e>
 800abac:	0758      	lsls	r0, r3, #29
 800abae:	d512      	bpl.n	800abd6 <__swsetup_r+0x7a>
 800abb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abb2:	b141      	cbz	r1, 800abc6 <__swsetup_r+0x6a>
 800abb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb8:	4299      	cmp	r1, r3
 800abba:	d002      	beq.n	800abc2 <__swsetup_r+0x66>
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7ff fa41 	bl	800a044 <_free_r>
 800abc2:	2300      	movs	r3, #0
 800abc4:	6363      	str	r3, [r4, #52]	; 0x34
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	2300      	movs	r3, #0
 800abd0:	6063      	str	r3, [r4, #4]
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	f043 0308 	orr.w	r3, r3, #8
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	b94b      	cbnz	r3, 800abf6 <__swsetup_r+0x9a>
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abec:	d003      	beq.n	800abf6 <__swsetup_r+0x9a>
 800abee:	4621      	mov	r1, r4
 800abf0:	4630      	mov	r0, r6
 800abf2:	f000 fa09 	bl	800b008 <__smakebuf_r>
 800abf6:	89a0      	ldrh	r0, [r4, #12]
 800abf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abfc:	f010 0301 	ands.w	r3, r0, #1
 800ac00:	d00a      	beq.n	800ac18 <__swsetup_r+0xbc>
 800ac02:	2300      	movs	r3, #0
 800ac04:	60a3      	str	r3, [r4, #8]
 800ac06:	6963      	ldr	r3, [r4, #20]
 800ac08:	425b      	negs	r3, r3
 800ac0a:	61a3      	str	r3, [r4, #24]
 800ac0c:	6923      	ldr	r3, [r4, #16]
 800ac0e:	b943      	cbnz	r3, 800ac22 <__swsetup_r+0xc6>
 800ac10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac14:	d1ba      	bne.n	800ab8c <__swsetup_r+0x30>
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	0781      	lsls	r1, r0, #30
 800ac1a:	bf58      	it	pl
 800ac1c:	6963      	ldrpl	r3, [r4, #20]
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	e7f4      	b.n	800ac0c <__swsetup_r+0xb0>
 800ac22:	2000      	movs	r0, #0
 800ac24:	e7f7      	b.n	800ac16 <__swsetup_r+0xba>
 800ac26:	bf00      	nop
 800ac28:	200000ac 	.word	0x200000ac
 800ac2c:	0800f520 	.word	0x0800f520
 800ac30:	0800f540 	.word	0x0800f540
 800ac34:	0800f500 	.word	0x0800f500

0800ac38 <abort>:
 800ac38:	b508      	push	{r3, lr}
 800ac3a:	2006      	movs	r0, #6
 800ac3c:	f000 faa2 	bl	800b184 <raise>
 800ac40:	2001      	movs	r0, #1
 800ac42:	f7fa fff5 	bl	8005c30 <_exit>
	...

0800ac48 <__sflush_r>:
 800ac48:	898a      	ldrh	r2, [r1, #12]
 800ac4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4e:	4605      	mov	r5, r0
 800ac50:	0710      	lsls	r0, r2, #28
 800ac52:	460c      	mov	r4, r1
 800ac54:	d458      	bmi.n	800ad08 <__sflush_r+0xc0>
 800ac56:	684b      	ldr	r3, [r1, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	dc05      	bgt.n	800ac68 <__sflush_r+0x20>
 800ac5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dc02      	bgt.n	800ac68 <__sflush_r+0x20>
 800ac62:	2000      	movs	r0, #0
 800ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	d0f9      	beq.n	800ac62 <__sflush_r+0x1a>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac74:	682f      	ldr	r7, [r5, #0]
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	d032      	beq.n	800ace0 <__sflush_r+0x98>
 800ac7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	075a      	lsls	r2, r3, #29
 800ac80:	d505      	bpl.n	800ac8e <__sflush_r+0x46>
 800ac82:	6863      	ldr	r3, [r4, #4]
 800ac84:	1ac0      	subs	r0, r0, r3
 800ac86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac88:	b10b      	cbz	r3, 800ac8e <__sflush_r+0x46>
 800ac8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac8c:	1ac0      	subs	r0, r0, r3
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4602      	mov	r2, r0
 800ac92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac94:	6a21      	ldr	r1, [r4, #32]
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b0      	blx	r6
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	d106      	bne.n	800acae <__sflush_r+0x66>
 800aca0:	6829      	ldr	r1, [r5, #0]
 800aca2:	291d      	cmp	r1, #29
 800aca4:	d82c      	bhi.n	800ad00 <__sflush_r+0xb8>
 800aca6:	4a2a      	ldr	r2, [pc, #168]	; (800ad50 <__sflush_r+0x108>)
 800aca8:	40ca      	lsrs	r2, r1
 800acaa:	07d6      	lsls	r6, r2, #31
 800acac:	d528      	bpl.n	800ad00 <__sflush_r+0xb8>
 800acae:	2200      	movs	r2, #0
 800acb0:	6062      	str	r2, [r4, #4]
 800acb2:	04d9      	lsls	r1, r3, #19
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	6022      	str	r2, [r4, #0]
 800acb8:	d504      	bpl.n	800acc4 <__sflush_r+0x7c>
 800acba:	1c42      	adds	r2, r0, #1
 800acbc:	d101      	bne.n	800acc2 <__sflush_r+0x7a>
 800acbe:	682b      	ldr	r3, [r5, #0]
 800acc0:	b903      	cbnz	r3, 800acc4 <__sflush_r+0x7c>
 800acc2:	6560      	str	r0, [r4, #84]	; 0x54
 800acc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acc6:	602f      	str	r7, [r5, #0]
 800acc8:	2900      	cmp	r1, #0
 800acca:	d0ca      	beq.n	800ac62 <__sflush_r+0x1a>
 800accc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd0:	4299      	cmp	r1, r3
 800acd2:	d002      	beq.n	800acda <__sflush_r+0x92>
 800acd4:	4628      	mov	r0, r5
 800acd6:	f7ff f9b5 	bl	800a044 <_free_r>
 800acda:	2000      	movs	r0, #0
 800acdc:	6360      	str	r0, [r4, #52]	; 0x34
 800acde:	e7c1      	b.n	800ac64 <__sflush_r+0x1c>
 800ace0:	6a21      	ldr	r1, [r4, #32]
 800ace2:	2301      	movs	r3, #1
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b0      	blx	r6
 800ace8:	1c41      	adds	r1, r0, #1
 800acea:	d1c7      	bne.n	800ac7c <__sflush_r+0x34>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0c4      	beq.n	800ac7c <__sflush_r+0x34>
 800acf2:	2b1d      	cmp	r3, #29
 800acf4:	d001      	beq.n	800acfa <__sflush_r+0xb2>
 800acf6:	2b16      	cmp	r3, #22
 800acf8:	d101      	bne.n	800acfe <__sflush_r+0xb6>
 800acfa:	602f      	str	r7, [r5, #0]
 800acfc:	e7b1      	b.n	800ac62 <__sflush_r+0x1a>
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	e7ad      	b.n	800ac64 <__sflush_r+0x1c>
 800ad08:	690f      	ldr	r7, [r1, #16]
 800ad0a:	2f00      	cmp	r7, #0
 800ad0c:	d0a9      	beq.n	800ac62 <__sflush_r+0x1a>
 800ad0e:	0793      	lsls	r3, r2, #30
 800ad10:	680e      	ldr	r6, [r1, #0]
 800ad12:	bf08      	it	eq
 800ad14:	694b      	ldreq	r3, [r1, #20]
 800ad16:	600f      	str	r7, [r1, #0]
 800ad18:	bf18      	it	ne
 800ad1a:	2300      	movne	r3, #0
 800ad1c:	eba6 0807 	sub.w	r8, r6, r7
 800ad20:	608b      	str	r3, [r1, #8]
 800ad22:	f1b8 0f00 	cmp.w	r8, #0
 800ad26:	dd9c      	ble.n	800ac62 <__sflush_r+0x1a>
 800ad28:	6a21      	ldr	r1, [r4, #32]
 800ad2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad2c:	4643      	mov	r3, r8
 800ad2e:	463a      	mov	r2, r7
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b0      	blx	r6
 800ad34:	2800      	cmp	r0, #0
 800ad36:	dc06      	bgt.n	800ad46 <__sflush_r+0xfe>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	e78e      	b.n	800ac64 <__sflush_r+0x1c>
 800ad46:	4407      	add	r7, r0
 800ad48:	eba8 0800 	sub.w	r8, r8, r0
 800ad4c:	e7e9      	b.n	800ad22 <__sflush_r+0xda>
 800ad4e:	bf00      	nop
 800ad50:	20400001 	.word	0x20400001

0800ad54 <_fflush_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	690b      	ldr	r3, [r1, #16]
 800ad58:	4605      	mov	r5, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	b913      	cbnz	r3, 800ad64 <_fflush_r+0x10>
 800ad5e:	2500      	movs	r5, #0
 800ad60:	4628      	mov	r0, r5
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	b118      	cbz	r0, 800ad6e <_fflush_r+0x1a>
 800ad66:	6983      	ldr	r3, [r0, #24]
 800ad68:	b90b      	cbnz	r3, 800ad6e <_fflush_r+0x1a>
 800ad6a:	f000 f887 	bl	800ae7c <__sinit>
 800ad6e:	4b14      	ldr	r3, [pc, #80]	; (800adc0 <_fflush_r+0x6c>)
 800ad70:	429c      	cmp	r4, r3
 800ad72:	d11b      	bne.n	800adac <_fflush_r+0x58>
 800ad74:	686c      	ldr	r4, [r5, #4]
 800ad76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0ef      	beq.n	800ad5e <_fflush_r+0xa>
 800ad7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad80:	07d0      	lsls	r0, r2, #31
 800ad82:	d404      	bmi.n	800ad8e <_fflush_r+0x3a>
 800ad84:	0599      	lsls	r1, r3, #22
 800ad86:	d402      	bmi.n	800ad8e <_fflush_r+0x3a>
 800ad88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad8a:	f000 f915 	bl	800afb8 <__retarget_lock_acquire_recursive>
 800ad8e:	4628      	mov	r0, r5
 800ad90:	4621      	mov	r1, r4
 800ad92:	f7ff ff59 	bl	800ac48 <__sflush_r>
 800ad96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad98:	07da      	lsls	r2, r3, #31
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	d4e0      	bmi.n	800ad60 <_fflush_r+0xc>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	059b      	lsls	r3, r3, #22
 800ada2:	d4dd      	bmi.n	800ad60 <_fflush_r+0xc>
 800ada4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ada6:	f000 f908 	bl	800afba <__retarget_lock_release_recursive>
 800adaa:	e7d9      	b.n	800ad60 <_fflush_r+0xc>
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <_fflush_r+0x70>)
 800adae:	429c      	cmp	r4, r3
 800adb0:	d101      	bne.n	800adb6 <_fflush_r+0x62>
 800adb2:	68ac      	ldr	r4, [r5, #8]
 800adb4:	e7df      	b.n	800ad76 <_fflush_r+0x22>
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <_fflush_r+0x74>)
 800adb8:	429c      	cmp	r4, r3
 800adba:	bf08      	it	eq
 800adbc:	68ec      	ldreq	r4, [r5, #12]
 800adbe:	e7da      	b.n	800ad76 <_fflush_r+0x22>
 800adc0:	0800f520 	.word	0x0800f520
 800adc4:	0800f540 	.word	0x0800f540
 800adc8:	0800f500 	.word	0x0800f500

0800adcc <std>:
 800adcc:	2300      	movs	r3, #0
 800adce:	b510      	push	{r4, lr}
 800add0:	4604      	mov	r4, r0
 800add2:	e9c0 3300 	strd	r3, r3, [r0]
 800add6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adda:	6083      	str	r3, [r0, #8]
 800addc:	8181      	strh	r1, [r0, #12]
 800adde:	6643      	str	r3, [r0, #100]	; 0x64
 800ade0:	81c2      	strh	r2, [r0, #14]
 800ade2:	6183      	str	r3, [r0, #24]
 800ade4:	4619      	mov	r1, r3
 800ade6:	2208      	movs	r2, #8
 800ade8:	305c      	adds	r0, #92	; 0x5c
 800adea:	f7ff f80f 	bl	8009e0c <memset>
 800adee:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <std+0x38>)
 800adf0:	6263      	str	r3, [r4, #36]	; 0x24
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <std+0x3c>)
 800adf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800adf6:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <std+0x40>)
 800adf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adfa:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <std+0x44>)
 800adfc:	6224      	str	r4, [r4, #32]
 800adfe:	6323      	str	r3, [r4, #48]	; 0x30
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	bf00      	nop
 800ae04:	0800b1bd 	.word	0x0800b1bd
 800ae08:	0800b1df 	.word	0x0800b1df
 800ae0c:	0800b217 	.word	0x0800b217
 800ae10:	0800b23b 	.word	0x0800b23b

0800ae14 <_cleanup_r>:
 800ae14:	4901      	ldr	r1, [pc, #4]	; (800ae1c <_cleanup_r+0x8>)
 800ae16:	f000 b8af 	b.w	800af78 <_fwalk_reent>
 800ae1a:	bf00      	nop
 800ae1c:	0800ad55 	.word	0x0800ad55

0800ae20 <__sfmoreglue>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	2268      	movs	r2, #104	; 0x68
 800ae24:	1e4d      	subs	r5, r1, #1
 800ae26:	4355      	muls	r5, r2
 800ae28:	460e      	mov	r6, r1
 800ae2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae2e:	f7ff f975 	bl	800a11c <_malloc_r>
 800ae32:	4604      	mov	r4, r0
 800ae34:	b140      	cbz	r0, 800ae48 <__sfmoreglue+0x28>
 800ae36:	2100      	movs	r1, #0
 800ae38:	e9c0 1600 	strd	r1, r6, [r0]
 800ae3c:	300c      	adds	r0, #12
 800ae3e:	60a0      	str	r0, [r4, #8]
 800ae40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae44:	f7fe ffe2 	bl	8009e0c <memset>
 800ae48:	4620      	mov	r0, r4
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}

0800ae4c <__sfp_lock_acquire>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sfp_lock_acquire+0x8>)
 800ae4e:	f000 b8b3 	b.w	800afb8 <__retarget_lock_acquire_recursive>
 800ae52:	bf00      	nop
 800ae54:	20002a5d 	.word	0x20002a5d

0800ae58 <__sfp_lock_release>:
 800ae58:	4801      	ldr	r0, [pc, #4]	; (800ae60 <__sfp_lock_release+0x8>)
 800ae5a:	f000 b8ae 	b.w	800afba <__retarget_lock_release_recursive>
 800ae5e:	bf00      	nop
 800ae60:	20002a5d 	.word	0x20002a5d

0800ae64 <__sinit_lock_acquire>:
 800ae64:	4801      	ldr	r0, [pc, #4]	; (800ae6c <__sinit_lock_acquire+0x8>)
 800ae66:	f000 b8a7 	b.w	800afb8 <__retarget_lock_acquire_recursive>
 800ae6a:	bf00      	nop
 800ae6c:	20002a5e 	.word	0x20002a5e

0800ae70 <__sinit_lock_release>:
 800ae70:	4801      	ldr	r0, [pc, #4]	; (800ae78 <__sinit_lock_release+0x8>)
 800ae72:	f000 b8a2 	b.w	800afba <__retarget_lock_release_recursive>
 800ae76:	bf00      	nop
 800ae78:	20002a5e 	.word	0x20002a5e

0800ae7c <__sinit>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	4604      	mov	r4, r0
 800ae80:	f7ff fff0 	bl	800ae64 <__sinit_lock_acquire>
 800ae84:	69a3      	ldr	r3, [r4, #24]
 800ae86:	b11b      	cbz	r3, 800ae90 <__sinit+0x14>
 800ae88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae8c:	f7ff bff0 	b.w	800ae70 <__sinit_lock_release>
 800ae90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae94:	6523      	str	r3, [r4, #80]	; 0x50
 800ae96:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <__sinit+0x68>)
 800ae98:	4a13      	ldr	r2, [pc, #76]	; (800aee8 <__sinit+0x6c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae9e:	42a3      	cmp	r3, r4
 800aea0:	bf04      	itt	eq
 800aea2:	2301      	moveq	r3, #1
 800aea4:	61a3      	streq	r3, [r4, #24]
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 f820 	bl	800aeec <__sfp>
 800aeac:	6060      	str	r0, [r4, #4]
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 f81c 	bl	800aeec <__sfp>
 800aeb4:	60a0      	str	r0, [r4, #8]
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 f818 	bl	800aeec <__sfp>
 800aebc:	2200      	movs	r2, #0
 800aebe:	60e0      	str	r0, [r4, #12]
 800aec0:	2104      	movs	r1, #4
 800aec2:	6860      	ldr	r0, [r4, #4]
 800aec4:	f7ff ff82 	bl	800adcc <std>
 800aec8:	68a0      	ldr	r0, [r4, #8]
 800aeca:	2201      	movs	r2, #1
 800aecc:	2109      	movs	r1, #9
 800aece:	f7ff ff7d 	bl	800adcc <std>
 800aed2:	68e0      	ldr	r0, [r4, #12]
 800aed4:	2202      	movs	r2, #2
 800aed6:	2112      	movs	r1, #18
 800aed8:	f7ff ff78 	bl	800adcc <std>
 800aedc:	2301      	movs	r3, #1
 800aede:	61a3      	str	r3, [r4, #24]
 800aee0:	e7d2      	b.n	800ae88 <__sinit+0xc>
 800aee2:	bf00      	nop
 800aee4:	0800f418 	.word	0x0800f418
 800aee8:	0800ae15 	.word	0x0800ae15

0800aeec <__sfp>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	4607      	mov	r7, r0
 800aef0:	f7ff ffac 	bl	800ae4c <__sfp_lock_acquire>
 800aef4:	4b1e      	ldr	r3, [pc, #120]	; (800af70 <__sfp+0x84>)
 800aef6:	681e      	ldr	r6, [r3, #0]
 800aef8:	69b3      	ldr	r3, [r6, #24]
 800aefa:	b913      	cbnz	r3, 800af02 <__sfp+0x16>
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff ffbd 	bl	800ae7c <__sinit>
 800af02:	3648      	adds	r6, #72	; 0x48
 800af04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af08:	3b01      	subs	r3, #1
 800af0a:	d503      	bpl.n	800af14 <__sfp+0x28>
 800af0c:	6833      	ldr	r3, [r6, #0]
 800af0e:	b30b      	cbz	r3, 800af54 <__sfp+0x68>
 800af10:	6836      	ldr	r6, [r6, #0]
 800af12:	e7f7      	b.n	800af04 <__sfp+0x18>
 800af14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af18:	b9d5      	cbnz	r5, 800af50 <__sfp+0x64>
 800af1a:	4b16      	ldr	r3, [pc, #88]	; (800af74 <__sfp+0x88>)
 800af1c:	60e3      	str	r3, [r4, #12]
 800af1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af22:	6665      	str	r5, [r4, #100]	; 0x64
 800af24:	f000 f847 	bl	800afb6 <__retarget_lock_init_recursive>
 800af28:	f7ff ff96 	bl	800ae58 <__sfp_lock_release>
 800af2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af34:	6025      	str	r5, [r4, #0]
 800af36:	61a5      	str	r5, [r4, #24]
 800af38:	2208      	movs	r2, #8
 800af3a:	4629      	mov	r1, r5
 800af3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af40:	f7fe ff64 	bl	8009e0c <memset>
 800af44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af4c:	4620      	mov	r0, r4
 800af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af50:	3468      	adds	r4, #104	; 0x68
 800af52:	e7d9      	b.n	800af08 <__sfp+0x1c>
 800af54:	2104      	movs	r1, #4
 800af56:	4638      	mov	r0, r7
 800af58:	f7ff ff62 	bl	800ae20 <__sfmoreglue>
 800af5c:	4604      	mov	r4, r0
 800af5e:	6030      	str	r0, [r6, #0]
 800af60:	2800      	cmp	r0, #0
 800af62:	d1d5      	bne.n	800af10 <__sfp+0x24>
 800af64:	f7ff ff78 	bl	800ae58 <__sfp_lock_release>
 800af68:	230c      	movs	r3, #12
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	e7ee      	b.n	800af4c <__sfp+0x60>
 800af6e:	bf00      	nop
 800af70:	0800f418 	.word	0x0800f418
 800af74:	ffff0001 	.word	0xffff0001

0800af78 <_fwalk_reent>:
 800af78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af7c:	4606      	mov	r6, r0
 800af7e:	4688      	mov	r8, r1
 800af80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af84:	2700      	movs	r7, #0
 800af86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af8a:	f1b9 0901 	subs.w	r9, r9, #1
 800af8e:	d505      	bpl.n	800af9c <_fwalk_reent+0x24>
 800af90:	6824      	ldr	r4, [r4, #0]
 800af92:	2c00      	cmp	r4, #0
 800af94:	d1f7      	bne.n	800af86 <_fwalk_reent+0xe>
 800af96:	4638      	mov	r0, r7
 800af98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af9c:	89ab      	ldrh	r3, [r5, #12]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d907      	bls.n	800afb2 <_fwalk_reent+0x3a>
 800afa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afa6:	3301      	adds	r3, #1
 800afa8:	d003      	beq.n	800afb2 <_fwalk_reent+0x3a>
 800afaa:	4629      	mov	r1, r5
 800afac:	4630      	mov	r0, r6
 800afae:	47c0      	blx	r8
 800afb0:	4307      	orrs	r7, r0
 800afb2:	3568      	adds	r5, #104	; 0x68
 800afb4:	e7e9      	b.n	800af8a <_fwalk_reent+0x12>

0800afb6 <__retarget_lock_init_recursive>:
 800afb6:	4770      	bx	lr

0800afb8 <__retarget_lock_acquire_recursive>:
 800afb8:	4770      	bx	lr

0800afba <__retarget_lock_release_recursive>:
 800afba:	4770      	bx	lr

0800afbc <__swhatbuf_r>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	460e      	mov	r6, r1
 800afc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc4:	2900      	cmp	r1, #0
 800afc6:	b096      	sub	sp, #88	; 0x58
 800afc8:	4614      	mov	r4, r2
 800afca:	461d      	mov	r5, r3
 800afcc:	da08      	bge.n	800afe0 <__swhatbuf_r+0x24>
 800afce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	061a      	lsls	r2, r3, #24
 800afd8:	d410      	bmi.n	800affc <__swhatbuf_r+0x40>
 800afda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afde:	e00e      	b.n	800affe <__swhatbuf_r+0x42>
 800afe0:	466a      	mov	r2, sp
 800afe2:	f000 f951 	bl	800b288 <_fstat_r>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	dbf1      	blt.n	800afce <__swhatbuf_r+0x12>
 800afea:	9a01      	ldr	r2, [sp, #4]
 800afec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aff0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aff4:	425a      	negs	r2, r3
 800aff6:	415a      	adcs	r2, r3
 800aff8:	602a      	str	r2, [r5, #0]
 800affa:	e7ee      	b.n	800afda <__swhatbuf_r+0x1e>
 800affc:	2340      	movs	r3, #64	; 0x40
 800affe:	2000      	movs	r0, #0
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	b016      	add	sp, #88	; 0x58
 800b004:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b008 <__smakebuf_r>:
 800b008:	898b      	ldrh	r3, [r1, #12]
 800b00a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b00c:	079d      	lsls	r5, r3, #30
 800b00e:	4606      	mov	r6, r0
 800b010:	460c      	mov	r4, r1
 800b012:	d507      	bpl.n	800b024 <__smakebuf_r+0x1c>
 800b014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	2301      	movs	r3, #1
 800b01e:	6163      	str	r3, [r4, #20]
 800b020:	b002      	add	sp, #8
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	ab01      	add	r3, sp, #4
 800b026:	466a      	mov	r2, sp
 800b028:	f7ff ffc8 	bl	800afbc <__swhatbuf_r>
 800b02c:	9900      	ldr	r1, [sp, #0]
 800b02e:	4605      	mov	r5, r0
 800b030:	4630      	mov	r0, r6
 800b032:	f7ff f873 	bl	800a11c <_malloc_r>
 800b036:	b948      	cbnz	r0, 800b04c <__smakebuf_r+0x44>
 800b038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03c:	059a      	lsls	r2, r3, #22
 800b03e:	d4ef      	bmi.n	800b020 <__smakebuf_r+0x18>
 800b040:	f023 0303 	bic.w	r3, r3, #3
 800b044:	f043 0302 	orr.w	r3, r3, #2
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	e7e3      	b.n	800b014 <__smakebuf_r+0xc>
 800b04c:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <__smakebuf_r+0x7c>)
 800b04e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	6020      	str	r0, [r4, #0]
 800b054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	9b00      	ldr	r3, [sp, #0]
 800b05c:	6163      	str	r3, [r4, #20]
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	6120      	str	r0, [r4, #16]
 800b062:	b15b      	cbz	r3, 800b07c <__smakebuf_r+0x74>
 800b064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b068:	4630      	mov	r0, r6
 800b06a:	f000 f91f 	bl	800b2ac <_isatty_r>
 800b06e:	b128      	cbz	r0, 800b07c <__smakebuf_r+0x74>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f023 0303 	bic.w	r3, r3, #3
 800b076:	f043 0301 	orr.w	r3, r3, #1
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	89a0      	ldrh	r0, [r4, #12]
 800b07e:	4305      	orrs	r5, r0
 800b080:	81a5      	strh	r5, [r4, #12]
 800b082:	e7cd      	b.n	800b020 <__smakebuf_r+0x18>
 800b084:	0800ae15 	.word	0x0800ae15

0800b088 <memmove>:
 800b088:	4288      	cmp	r0, r1
 800b08a:	b510      	push	{r4, lr}
 800b08c:	eb01 0402 	add.w	r4, r1, r2
 800b090:	d902      	bls.n	800b098 <memmove+0x10>
 800b092:	4284      	cmp	r4, r0
 800b094:	4623      	mov	r3, r4
 800b096:	d807      	bhi.n	800b0a8 <memmove+0x20>
 800b098:	1e43      	subs	r3, r0, #1
 800b09a:	42a1      	cmp	r1, r4
 800b09c:	d008      	beq.n	800b0b0 <memmove+0x28>
 800b09e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0a6:	e7f8      	b.n	800b09a <memmove+0x12>
 800b0a8:	4402      	add	r2, r0
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	428a      	cmp	r2, r1
 800b0ae:	d100      	bne.n	800b0b2 <memmove+0x2a>
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ba:	e7f7      	b.n	800b0ac <memmove+0x24>

0800b0bc <__malloc_lock>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	; (800b0c4 <__malloc_lock+0x8>)
 800b0be:	f7ff bf7b 	b.w	800afb8 <__retarget_lock_acquire_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20002a5c 	.word	0x20002a5c

0800b0c8 <__malloc_unlock>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__malloc_unlock+0x8>)
 800b0ca:	f7ff bf76 	b.w	800afba <__retarget_lock_release_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20002a5c 	.word	0x20002a5c

0800b0d4 <_realloc_r>:
 800b0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d8:	4680      	mov	r8, r0
 800b0da:	4614      	mov	r4, r2
 800b0dc:	460e      	mov	r6, r1
 800b0de:	b921      	cbnz	r1, 800b0ea <_realloc_r+0x16>
 800b0e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	f7ff b819 	b.w	800a11c <_malloc_r>
 800b0ea:	b92a      	cbnz	r2, 800b0f8 <_realloc_r+0x24>
 800b0ec:	f7fe ffaa 	bl	800a044 <_free_r>
 800b0f0:	4625      	mov	r5, r4
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f8:	f000 f8fa 	bl	800b2f0 <_malloc_usable_size_r>
 800b0fc:	4284      	cmp	r4, r0
 800b0fe:	4607      	mov	r7, r0
 800b100:	d802      	bhi.n	800b108 <_realloc_r+0x34>
 800b102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b106:	d812      	bhi.n	800b12e <_realloc_r+0x5a>
 800b108:	4621      	mov	r1, r4
 800b10a:	4640      	mov	r0, r8
 800b10c:	f7ff f806 	bl	800a11c <_malloc_r>
 800b110:	4605      	mov	r5, r0
 800b112:	2800      	cmp	r0, #0
 800b114:	d0ed      	beq.n	800b0f2 <_realloc_r+0x1e>
 800b116:	42bc      	cmp	r4, r7
 800b118:	4622      	mov	r2, r4
 800b11a:	4631      	mov	r1, r6
 800b11c:	bf28      	it	cs
 800b11e:	463a      	movcs	r2, r7
 800b120:	f7fe ff82 	bl	800a028 <memcpy>
 800b124:	4631      	mov	r1, r6
 800b126:	4640      	mov	r0, r8
 800b128:	f7fe ff8c 	bl	800a044 <_free_r>
 800b12c:	e7e1      	b.n	800b0f2 <_realloc_r+0x1e>
 800b12e:	4635      	mov	r5, r6
 800b130:	e7df      	b.n	800b0f2 <_realloc_r+0x1e>

0800b132 <_raise_r>:
 800b132:	291f      	cmp	r1, #31
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4604      	mov	r4, r0
 800b138:	460d      	mov	r5, r1
 800b13a:	d904      	bls.n	800b146 <_raise_r+0x14>
 800b13c:	2316      	movs	r3, #22
 800b13e:	6003      	str	r3, [r0, #0]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	bd38      	pop	{r3, r4, r5, pc}
 800b146:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b148:	b112      	cbz	r2, 800b150 <_raise_r+0x1e>
 800b14a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b14e:	b94b      	cbnz	r3, 800b164 <_raise_r+0x32>
 800b150:	4620      	mov	r0, r4
 800b152:	f000 f831 	bl	800b1b8 <_getpid_r>
 800b156:	462a      	mov	r2, r5
 800b158:	4601      	mov	r1, r0
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b160:	f000 b818 	b.w	800b194 <_kill_r>
 800b164:	2b01      	cmp	r3, #1
 800b166:	d00a      	beq.n	800b17e <_raise_r+0x4c>
 800b168:	1c59      	adds	r1, r3, #1
 800b16a:	d103      	bne.n	800b174 <_raise_r+0x42>
 800b16c:	2316      	movs	r3, #22
 800b16e:	6003      	str	r3, [r0, #0]
 800b170:	2001      	movs	r0, #1
 800b172:	e7e7      	b.n	800b144 <_raise_r+0x12>
 800b174:	2400      	movs	r4, #0
 800b176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b17a:	4628      	mov	r0, r5
 800b17c:	4798      	blx	r3
 800b17e:	2000      	movs	r0, #0
 800b180:	e7e0      	b.n	800b144 <_raise_r+0x12>
	...

0800b184 <raise>:
 800b184:	4b02      	ldr	r3, [pc, #8]	; (800b190 <raise+0xc>)
 800b186:	4601      	mov	r1, r0
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	f7ff bfd2 	b.w	800b132 <_raise_r>
 800b18e:	bf00      	nop
 800b190:	200000ac 	.word	0x200000ac

0800b194 <_kill_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_kill_r+0x20>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	4611      	mov	r1, r2
 800b1a0:	602b      	str	r3, [r5, #0]
 800b1a2:	f7fa fd35 	bl	8005c10 <_kill>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	d102      	bne.n	800b1b0 <_kill_r+0x1c>
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	b103      	cbz	r3, 800b1b0 <_kill_r+0x1c>
 800b1ae:	6023      	str	r3, [r4, #0]
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20002a60 	.word	0x20002a60

0800b1b8 <_getpid_r>:
 800b1b8:	f7fa bd22 	b.w	8005c00 <_getpid>

0800b1bc <__sread>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	460c      	mov	r4, r1
 800b1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c4:	f000 f89c 	bl	800b300 <_read_r>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	bfab      	itete	ge
 800b1cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b1d0:	181b      	addge	r3, r3, r0
 800b1d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1d6:	bfac      	ite	ge
 800b1d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1da:	81a3      	strhlt	r3, [r4, #12]
 800b1dc:	bd10      	pop	{r4, pc}

0800b1de <__swrite>:
 800b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e2:	461f      	mov	r7, r3
 800b1e4:	898b      	ldrh	r3, [r1, #12]
 800b1e6:	05db      	lsls	r3, r3, #23
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	d505      	bpl.n	800b1fc <__swrite+0x1e>
 800b1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f000 f868 	bl	800b2cc <_lseek_r>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	4632      	mov	r2, r6
 800b20a:	463b      	mov	r3, r7
 800b20c:	4628      	mov	r0, r5
 800b20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b212:	f000 b817 	b.w	800b244 <_write_r>

0800b216 <__sseek>:
 800b216:	b510      	push	{r4, lr}
 800b218:	460c      	mov	r4, r1
 800b21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21e:	f000 f855 	bl	800b2cc <_lseek_r>
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	bf15      	itete	ne
 800b228:	6560      	strne	r0, [r4, #84]	; 0x54
 800b22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b232:	81a3      	strheq	r3, [r4, #12]
 800b234:	bf18      	it	ne
 800b236:	81a3      	strhne	r3, [r4, #12]
 800b238:	bd10      	pop	{r4, pc}

0800b23a <__sclose>:
 800b23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23e:	f000 b813 	b.w	800b268 <_close_r>
	...

0800b244 <_write_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	; (800b264 <_write_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7fa fd13 	bl	8005c7e <_write>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_write_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_write_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20002a60 	.word	0x20002a60

0800b268 <_close_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d06      	ldr	r5, [pc, #24]	; (800b284 <_close_r+0x1c>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	602b      	str	r3, [r5, #0]
 800b274:	f7fa fd1f 	bl	8005cb6 <_close>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_close_r+0x1a>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_close_r+0x1a>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20002a60 	.word	0x20002a60

0800b288 <_fstat_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d07      	ldr	r5, [pc, #28]	; (800b2a8 <_fstat_r+0x20>)
 800b28c:	2300      	movs	r3, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f7fa fd1a 	bl	8005cce <_fstat>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d102      	bne.n	800b2a4 <_fstat_r+0x1c>
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	b103      	cbz	r3, 800b2a4 <_fstat_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20002a60 	.word	0x20002a60

0800b2ac <_isatty_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d06      	ldr	r5, [pc, #24]	; (800b2c8 <_isatty_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7fa fd19 	bl	8005cee <_isatty>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_isatty_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_isatty_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20002a60 	.word	0x20002a60

0800b2cc <_lseek_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	; (800b2ec <_lseek_r+0x20>)
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	602a      	str	r2, [r5, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f7fa fd12 	bl	8005d04 <_lseek>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_lseek_r+0x1e>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_lseek_r+0x1e>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	20002a60 	.word	0x20002a60

0800b2f0 <_malloc_usable_size_r>:
 800b2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f4:	1f18      	subs	r0, r3, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfbc      	itt	lt
 800b2fa:	580b      	ldrlt	r3, [r1, r0]
 800b2fc:	18c0      	addlt	r0, r0, r3
 800b2fe:	4770      	bx	lr

0800b300 <_read_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	4d07      	ldr	r5, [pc, #28]	; (800b320 <_read_r+0x20>)
 800b304:	4604      	mov	r4, r0
 800b306:	4608      	mov	r0, r1
 800b308:	4611      	mov	r1, r2
 800b30a:	2200      	movs	r2, #0
 800b30c:	602a      	str	r2, [r5, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	f7fa fc98 	bl	8005c44 <_read>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_read_r+0x1e>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_read_r+0x1e>
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	20002a60 	.word	0x20002a60

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
