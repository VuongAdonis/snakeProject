
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d50  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f08  08009f08  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f10  08009f10  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f10  08009f10  00019f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08009f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00005f30  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000600c  2000600c  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c75  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f6f  00000000  00000000  00030d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  00034cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bce  00000000  00000000  00035ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001637b  00000000  00000000  000586b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4fe  00000000  00000000  0006ea31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bf2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004370  00000000  00000000  0013bf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061a0 	.word	0x080061a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	080061a0 	.word	0x080061a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <button_init+0x14>)
 800058e:	f003 f969 	bl	8003864 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	482f      	ldr	r0, [pc, #188]	; (8000664 <button_Scan+0xc8>)
 80005a8:	f003 f95c 	bl	8003864 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	482c      	ldr	r0, [pc, #176]	; (8000664 <button_Scan+0xc8>)
 80005b2:	f003 f957 	bl	8003864 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005b6:	230a      	movs	r3, #10
 80005b8:	2202      	movs	r2, #2
 80005ba:	492b      	ldr	r1, [pc, #172]	; (8000668 <button_Scan+0xcc>)
 80005bc:	482b      	ldr	r0, [pc, #172]	; (800066c <button_Scan+0xd0>)
 80005be:	f003 ff94 	bl	80044ea <HAL_SPI_Receive>
	  int button_index = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e03f      	b.n	8000652 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db06      	blt.n	80005e6 <button_Scan+0x4a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	dc03      	bgt.n	80005e6 <button_Scan+0x4a>
			  button_index = i + 4;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3304      	adds	r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e018      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	dd07      	ble.n	80005fc <button_Scan+0x60>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	dc04      	bgt.n	80005fc <button_Scan+0x60>
			  button_index = 7 - i;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e00d      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	dd06      	ble.n	8000610 <button_Scan+0x74>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0b      	cmp	r3, #11
 8000606:	dc03      	bgt.n	8000610 <button_Scan+0x74>
			  button_index = i + 4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e003      	b.n	8000618 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f1c3 0317 	rsb	r3, r3, #23
 8000616:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <button_Scan+0xcc>)
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	4013      	ands	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <button_Scan+0x96>
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2100      	movs	r1, #0
 800062c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000630:	e009      	b.n	8000646 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063a:	3301      	adds	r3, #1
 800063c:	b299      	uxth	r1, r3
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <button_Scan+0xd4>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	ddbc      	ble.n	80005d2 <button_Scan+0x36>
	  }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020c00 	.word	0x40020c00
 8000668:	20000118 	.word	0x20000118
 800066c:	20005f54 	.word	0x20005f54
 8000670:	200000f8 	.word	0x200000f8

08000674 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	; 0x38
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]
 800069e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_FSMC_Init+0xec>)
 80006a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80006a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_FSMC_Init+0xec>)
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <MX_FSMC_Init+0xf0>)
 80006ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <MX_FSMC_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_FSMC_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_FSMC_Init+0xec>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_FSMC_Init+0xec>)
 80006c2:	2210      	movs	r2, #16
 80006c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_FSMC_Init+0xec>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_FSMC_Init+0xec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_FSMC_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_FSMC_Init+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_FSMC_Init+0xec>)
 80006e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_FSMC_Init+0xec>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_FSMC_Init+0xec>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_FSMC_Init+0xec>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_FSMC_Init+0xec>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_FSMC_Init+0xec>)
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000706:	230f      	movs	r3, #15
 8000708:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800070a:	230f      	movs	r3, #15
 800070c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800070e:	233c      	movs	r3, #60	; 0x3c
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000716:	2310      	movs	r3, #16
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800071a:	2311      	movs	r3, #17
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800071e:	2300      	movs	r3, #0
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000722:	2308      	movs	r3, #8
 8000724:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000726:	230f      	movs	r3, #15
 8000728:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800072a:	2309      	movs	r3, #9
 800072c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000732:	2310      	movs	r3, #16
 8000734:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000736:	2311      	movs	r3, #17
 8000738:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800073e:	463a      	mov	r2, r7
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_FSMC_Init+0xec>)
 8000748:	f004 fab2 	bl	8004cb0 <HAL_SRAM_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000752:	f001 f8e5 	bl	8001920 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000756:	bf00      	nop
 8000758:	3738      	adds	r7, #56	; 0x38
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000011c 	.word	0x2000011c
 8000764:	a0000104 	.word	0xa0000104

08000768 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_FSMC_MspInit+0x88>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d131      	bne.n	80007e8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_FSMC_MspInit+0x88>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_FSMC_MspInit+0x8c>)
 8000790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <HAL_FSMC_MspInit+0x8c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6393      	str	r3, [r2, #56]	; 0x38
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_FSMC_MspInit+0x8c>)
 800079c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80007a6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80007aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007b8:	230c      	movs	r3, #12
 80007ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <HAL_FSMC_MspInit+0x90>)
 80007c2:	f002 feb3 	bl	800352c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007c6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80007ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007d8:	230c      	movs	r3, #12
 80007da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_FSMC_MspInit+0x94>)
 80007e2:	f002 fea3 	bl	800352c <HAL_GPIO_Init>
 80007e6:	e000      	b.n	80007ea <HAL_FSMC_MspInit+0x82>
    return;
 80007e8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000016c 	.word	0x2000016c
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000808:	f7ff ffae 	bl	8000768 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b6f      	ldr	r3, [pc, #444]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a6e      	ldr	r2, [pc, #440]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b6c      	ldr	r3, [pc, #432]	; (80009ec <MX_GPIO_Init+0x1d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b68      	ldr	r3, [pc, #416]	; (80009ec <MX_GPIO_Init+0x1d8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a67      	ldr	r2, [pc, #412]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b65      	ldr	r3, [pc, #404]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b61      	ldr	r3, [pc, #388]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a60      	ldr	r2, [pc, #384]	; (80009ec <MX_GPIO_Init+0x1d8>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a59      	ldr	r2, [pc, #356]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b57      	ldr	r3, [pc, #348]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b53      	ldr	r3, [pc, #332]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a52      	ldr	r2, [pc, #328]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b50      	ldr	r3, [pc, #320]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b4c      	ldr	r3, [pc, #304]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a4b      	ldr	r2, [pc, #300]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b49      	ldr	r3, [pc, #292]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b45      	ldr	r3, [pc, #276]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a44      	ldr	r2, [pc, #272]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b42      	ldr	r3, [pc, #264]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2170      	movs	r1, #112	; 0x70
 80008f2:	483f      	ldr	r0, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x1dc>)
 80008f4:	f002 ffb6 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <MX_GPIO_Init+0x1e0>)
 8000900:	f002 ffb0 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	483b      	ldr	r0, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 800090a:	f002 ffab 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000914:	4839      	ldr	r0, [pc, #228]	; (80009fc <MX_GPIO_Init+0x1e8>)
 8000916:	f002 ffa5 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2108      	movs	r1, #8
 800091e:	4838      	ldr	r0, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 8000920:	f002 ffa0 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000924:	2370      	movs	r3, #112	; 0x70
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	482d      	ldr	r0, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x1dc>)
 800093c:	f002 fdf6 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x1e0>)
 800095a:	f002 fde7 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_GPIO_Init+0x1e8>)
 8000972:	f002 fddb 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000976:	2330      	movs	r3, #48	; 0x30
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x1e0>)
 800098a:	f002 fdcf 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80009a6:	f002 fdc1 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <MX_GPIO_Init+0x1e8>)
 80009c4:	f002 fdb2 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009c8:	2308      	movs	r3, #8
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 80009e0:	f002 fda4 	bl	800352c <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LCD_WR_REG+0x1c>)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	8013      	strh	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	600ffffe 	.word	0x600ffffe

08000a24 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <LCD_WR_DATA+0x1c>)
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	8053      	strh	r3, [r2, #2]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	600ffffe 	.word	0x600ffffe

08000a44 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <LCD_RD_DATA+0x20>)
 8000a4c:	885b      	ldrh	r3, [r3, #2]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	b29b      	uxth	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	600ffffe 	.word	0x600ffffe

08000a68 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	80fb      	strh	r3, [r7, #6]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80bb      	strh	r3, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	807b      	strh	r3, [r7, #2]
 8000a82:	4613      	mov	r3, r2
 8000a84:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000a86:	202a      	movs	r0, #42	; 0x2a
 8000a88:	f7ff ffbc 	bl	8000a04 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffc6 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffc0 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffba 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffb4 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000abc:	202b      	movs	r0, #43	; 0x2b
 8000abe:	f7ff ffa1 	bl	8000a04 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffab 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffa5 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ada:	883b      	ldrh	r3, [r7, #0]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff9f 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ae6:	883b      	ldrh	r3, [r7, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff99 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000af2:	202c      	movs	r0, #44	; 0x2c
 8000af4:	f7ff ff86 	bl	8000a04 <LCD_WR_REG>
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}

08000b00 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <lcd_Clear+0x60>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <lcd_Clear+0x60>)
 8000b14:	885b      	ldrh	r3, [r3, #2]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ffa3 	bl	8000a68 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	81fb      	strh	r3, [r7, #14]
 8000b26:	e011      	b.n	8000b4c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
 8000b2c:	e006      	b.n	8000b3c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff77 	bl	8000a24 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	81bb      	strh	r3, [r7, #12]
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <lcd_Clear+0x60>)
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	89ba      	ldrh	r2, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3f3      	bcc.n	8000b2e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	81fb      	strh	r3, [r7, #14]
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <lcd_Clear+0x60>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	89fa      	ldrh	r2, [r7, #14]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3e8      	bcc.n	8000b28 <lcd_Clear+0x28>
		}
	}
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000180 	.word	0x20000180

08000b64 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4623      	mov	r3, r4
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	4603      	mov	r3, r0
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	807b      	strh	r3, [r7, #2]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	883b      	ldrh	r3, [r7, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	88b9      	ldrh	r1, [r7, #4]
 8000b90:	88f8      	ldrh	r0, [r7, #6]
 8000b92:	f7ff ff69 	bl	8000a68 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e010      	b.n	8000bbe <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	81bb      	strh	r3, [r7, #12]
 8000ba0:	e006      	b.n	8000bb0 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000ba2:	8c3b      	ldrh	r3, [r7, #32]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff3d 	bl	8000a24 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	81bb      	strh	r3, [r7, #12]
 8000bb0:	89ba      	ldrh	r2, [r7, #12]
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f4      	bcc.n	8000ba2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000bb8:	89fb      	ldrh	r3, [r7, #14]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	89fa      	ldrh	r2, [r7, #14]
 8000bc0:	883b      	ldrh	r3, [r7, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3ea      	bcc.n	8000b9c <lcd_Fill+0x38>
		}
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}

08000bd0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	88b9      	ldrh	r1, [r7, #4]
 8000be8:	88f8      	ldrh	r0, [r7, #6]
 8000bea:	f7ff ff3d 	bl	8000a68 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff17 	bl	8000a24 <LCD_WR_DATA>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000bfe:	b590      	push	{r4, r7, lr}
 8000c00:	b08d      	sub	sp, #52	; 0x34
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4604      	mov	r4, r0
 8000c06:	4608      	mov	r0, r1
 8000c08:	4611      	mov	r1, r2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	80fb      	strh	r3, [r7, #6]
 8000c10:	4603      	mov	r3, r0
 8000c12:	80bb      	strh	r3, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8000c2c:	883a      	ldrh	r2, [r7, #0]
 8000c2e:	88bb      	ldrh	r3, [r7, #4]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dd02      	ble.n	8000c48 <lcd_DrawLine+0x4a>
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e00b      	b.n	8000c60 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <lcd_DrawLine+0x56>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e005      	b.n	8000c60 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dd02      	ble.n	8000c6c <lcd_DrawLine+0x6e>
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e00b      	b.n	8000c84 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <lcd_DrawLine+0x7a>
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	e005      	b.n	8000c84 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	425b      	negs	r3, r3
 8000c82:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8000c84:	6a3a      	ldr	r2, [r7, #32]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dd02      	ble.n	8000c92 <lcd_DrawLine+0x94>
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	e001      	b.n	8000c96 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000c9a:	e02b      	b.n	8000cf4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	b291      	uxth	r1, r2
 8000ca4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff91 	bl	8000bd0 <lcd_DrawPoint>
		xerr+=delta_x;
 8000cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8000cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	4413      	add	r3, r2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dd07      	ble.n	8000cd6 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8000cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dd07      	ble.n	8000cee <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8000cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8000cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dacf      	bge.n	8000c9c <lcd_DrawLine+0x9e>
		}
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3734      	adds	r7, #52	; 0x34
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}

08000d06 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8000d06:	b590      	push	{r4, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af02      	add	r7, sp, #8
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	4611      	mov	r1, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	4623      	mov	r3, r4
 8000d16:	80fb      	strh	r3, [r7, #6]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80bb      	strh	r3, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8000d24:	88bc      	ldrh	r4, [r7, #4]
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	88b9      	ldrh	r1, [r7, #4]
 8000d2a:	88f8      	ldrh	r0, [r7, #6]
 8000d2c:	8b3b      	ldrh	r3, [r7, #24]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4623      	mov	r3, r4
 8000d32:	f7ff ff64 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8000d36:	883c      	ldrh	r4, [r7, #0]
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	88b9      	ldrh	r1, [r7, #4]
 8000d3c:	88f8      	ldrh	r0, [r7, #6]
 8000d3e:	8b3b      	ldrh	r3, [r7, #24]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4623      	mov	r3, r4
 8000d44:	f7ff ff5b 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8000d48:	883c      	ldrh	r4, [r7, #0]
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	8839      	ldrh	r1, [r7, #0]
 8000d4e:	88f8      	ldrh	r0, [r7, #6]
 8000d50:	8b3b      	ldrh	r3, [r7, #24]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	4623      	mov	r3, r4
 8000d56:	f7ff ff52 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8000d5a:	883c      	ldrh	r4, [r7, #0]
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	88b9      	ldrh	r1, [r7, #4]
 8000d60:	8878      	ldrh	r0, [r7, #2]
 8000d62:	8b3b      	ldrh	r3, [r7, #24]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4623      	mov	r3, r4
 8000d68:	f7ff ff49 	bl	8000bfe <lcd_DrawLine>
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70fb      	strb	r3, [r7, #3]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d9e:	085b      	lsrs	r3, r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bf14      	ite	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	2300      	moveq	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	fb12 f303 	smulbb	r3, r2, r3
 8000dca:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	3b20      	subs	r3, #32
 8000dd0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b29c      	uxth	r4, r3
 8000de0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	88b9      	ldrh	r1, [r7, #4]
 8000df2:	88f8      	ldrh	r0, [r7, #6]
 8000df4:	4622      	mov	r2, r4
 8000df6:	f7ff fe37 	bl	8000a68 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	827b      	strh	r3, [r7, #18]
 8000dfe:	e07a      	b.n	8000ef6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e04:	2b0c      	cmp	r3, #12
 8000e06:	d028      	beq.n	8000e5a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000e08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d108      	bne.n	8000e22 <lcd_ShowChar+0xae>
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	8a7b      	ldrh	r3, [r7, #18]
 8000e14:	493c      	ldr	r1, [pc, #240]	; (8000f08 <lcd_ShowChar+0x194>)
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	440a      	add	r2, r1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e01b      	b.n	8000e5a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e26:	2b18      	cmp	r3, #24
 8000e28:	d10b      	bne.n	8000e42 <lcd_ShowChar+0xce>
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	8a79      	ldrh	r1, [r7, #18]
 8000e2e:	4837      	ldr	r0, [pc, #220]	; (8000f0c <lcd_ShowChar+0x198>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4403      	add	r3, r0
 8000e3a:	440b      	add	r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	75fb      	strb	r3, [r7, #23]
 8000e40:	e00b      	b.n	8000e5a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e46:	2b20      	cmp	r3, #32
 8000e48:	d15a      	bne.n	8000f00 <lcd_ShowChar+0x18c>
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	8a7b      	ldrh	r3, [r7, #18]
 8000e4e:	4930      	ldr	r1, [pc, #192]	; (8000f10 <lcd_ShowChar+0x19c>)
 8000e50:	0192      	lsls	r2, r2, #6
 8000e52:	440a      	add	r2, r1
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75bb      	strb	r3, [r7, #22]
 8000e5e:	e044      	b.n	8000eea <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d120      	bne.n	8000eaa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e68:	7dfa      	ldrb	r2, [r7, #23]
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	fa42 f303 	asr.w	r3, r2, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <lcd_ShowChar+0x10e>
 8000e78:	883b      	ldrh	r3, [r7, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fdd2 	bl	8000a24 <LCD_WR_DATA>
 8000e80:	e003      	b.n	8000e8a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fdcd 	bl	8000a24 <LCD_WR_DATA>
				m++;
 8000e8a:	7d7b      	ldrb	r3, [r7, #21]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e98:	fb01 f202 	mul.w	r2, r1, r2
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11f      	bne.n	8000ee4 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	757b      	strb	r3, [r7, #21]
					break;
 8000ea8:	e022      	b.n	8000ef0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000eaa:	7dfa      	ldrb	r2, [r7, #23]
 8000eac:	7dbb      	ldrb	r3, [r7, #22]
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <lcd_ShowChar+0x152>
 8000eba:	883a      	ldrh	r2, [r7, #0]
 8000ebc:	88b9      	ldrh	r1, [r7, #4]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe85 	bl	8000bd0 <lcd_DrawPoint>
				x++;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	8a3b      	ldrh	r3, [r7, #16]
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d105      	bne.n	8000ee4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ed8:	8a3b      	ldrh	r3, [r7, #16]
 8000eda:	80fb      	strh	r3, [r7, #6]
					y++;
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	80bb      	strh	r3, [r7, #4]
					break;
 8000ee2:	e005      	b.n	8000ef0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ee4:	7dbb      	ldrb	r3, [r7, #22]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	75bb      	strb	r3, [r7, #22]
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d9b7      	bls.n	8000e60 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	827b      	strh	r3, [r7, #18]
 8000ef6:	8a7a      	ldrh	r2, [r7, #18]
 8000ef8:	89bb      	ldrh	r3, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d380      	bcc.n	8000e00 <lcd_ShowChar+0x8c>
 8000efe:	e000      	b.n	8000f02 <lcd_ShowChar+0x18e>
		else return;
 8000f00:	bf00      	nop
				}
			}
		}
	}
}
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	08006314 	.word	0x08006314
 8000f0c:	08006904 	.word	0x08006904
 8000f10:	08007ad4 	.word	0x08007ad4

08000f14 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4611      	mov	r1, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	4623      	mov	r3, r4
 8000f24:	80fb      	strh	r3, [r7, #6]
 8000f26:	4603      	mov	r3, r0
 8000f28:	80bb      	strh	r3, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	b29c      	uxth	r4, r3
 8000f42:	88ba      	ldrh	r2, [r7, #4]
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	88b9      	ldrh	r1, [r7, #4]
 8000f50:	88f8      	ldrh	r0, [r7, #6]
 8000f52:	4622      	mov	r2, r4
 8000f54:	f7ff fd88 	bl	8000a68 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	82fb      	strh	r3, [r7, #22]
 8000f5c:	e027      	b.n	8000fae <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	82bb      	strh	r3, [r7, #20]
 8000f62:	e01d      	b.n	8000fa0 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3301      	adds	r3, #1
 8000f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd48 	bl	8000a24 <LCD_WR_DATA>
			k++;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	3301      	adds	r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000f9a:	8abb      	ldrh	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	8aba      	ldrh	r2, [r7, #20]
 8000fa2:	883b      	ldrh	r3, [r7, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3dd      	bcc.n	8000f64 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000fa8:	8afb      	ldrh	r3, [r7, #22]
 8000faa:	3301      	adds	r3, #1
 8000fac:	82fb      	strh	r3, [r7, #22]
 8000fae:	8afa      	ldrh	r2, [r7, #22]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3d3      	bcc.n	8000f5e <lcd_ShowPicture+0x4a>
		}
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}

08000fc0 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <lcd_SetDir+0x44>)
 8000fdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fe0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <lcd_SetDir+0x44>)
 8000fe4:	22f0      	movs	r2, #240	; 0xf0
 8000fe6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000fe8:	e006      	b.n	8000ff8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <lcd_SetDir+0x44>)
 8000fec:	22f0      	movs	r2, #240	; 0xf0
 8000fee:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <lcd_SetDir+0x44>)
 8000ff2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ff6:	805a      	strh	r2, [r3, #2]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000180 	.word	0x20000180

08001008 <lcd_init>:


void lcd_init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001012:	48aa      	ldr	r0, [pc, #680]	; (80012bc <lcd_init+0x2b4>)
 8001014:	f002 fc26 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f002 f950 	bl	80032c0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	48a5      	ldr	r0, [pc, #660]	; (80012bc <lcd_init+0x2b4>)
 8001028:	f002 fc1c 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800102c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001030:	f002 f946 	bl	80032c0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ffc3 	bl	8000fc0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800103a:	20d3      	movs	r0, #211	; 0xd3
 800103c:	f7ff fce2 	bl	8000a04 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001040:	f7ff fd00 	bl	8000a44 <LCD_RD_DATA>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b9d      	ldr	r3, [pc, #628]	; (80012c0 <lcd_init+0x2b8>)
 800104a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800104c:	f7ff fcfa 	bl	8000a44 <LCD_RD_DATA>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <lcd_init+0x2b8>)
 8001056:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001058:	f7ff fcf4 	bl	8000a44 <LCD_RD_DATA>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b97      	ldr	r3, [pc, #604]	; (80012c0 <lcd_init+0x2b8>)
 8001062:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001064:	4b96      	ldr	r3, [pc, #600]	; (80012c0 <lcd_init+0x2b8>)
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b94      	ldr	r3, [pc, #592]	; (80012c0 <lcd_init+0x2b8>)
 800106e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001070:	f7ff fce8 	bl	8000a44 <LCD_RD_DATA>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b91      	ldr	r3, [pc, #580]	; (80012c0 <lcd_init+0x2b8>)
 800107a:	889b      	ldrh	r3, [r3, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <lcd_init+0x2b8>)
 8001082:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001084:	20cf      	movs	r0, #207	; 0xcf
 8001086:	f7ff fcbd 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff fcca 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001090:	20c1      	movs	r0, #193	; 0xc1
 8001092:	f7ff fcc7 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001096:	2030      	movs	r0, #48	; 0x30
 8001098:	f7ff fcc4 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800109c:	20ed      	movs	r0, #237	; 0xed
 800109e:	f7ff fcb1 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80010a2:	2064      	movs	r0, #100	; 0x64
 80010a4:	f7ff fcbe 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff fcbb 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80010ae:	2012      	movs	r0, #18
 80010b0:	f7ff fcb8 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80010b4:	2081      	movs	r0, #129	; 0x81
 80010b6:	f7ff fcb5 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80010ba:	20e8      	movs	r0, #232	; 0xe8
 80010bc:	f7ff fca2 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80010c0:	2085      	movs	r0, #133	; 0x85
 80010c2:	f7ff fcaf 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010c6:	2010      	movs	r0, #16
 80010c8:	f7ff fcac 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80010cc:	207a      	movs	r0, #122	; 0x7a
 80010ce:	f7ff fca9 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80010d2:	20cb      	movs	r0, #203	; 0xcb
 80010d4:	f7ff fc96 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80010d8:	2039      	movs	r0, #57	; 0x39
 80010da:	f7ff fca3 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80010de:	202c      	movs	r0, #44	; 0x2c
 80010e0:	f7ff fca0 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fc9d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80010ea:	2034      	movs	r0, #52	; 0x34
 80010ec:	f7ff fc9a 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f7ff fc97 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80010f6:	20f7      	movs	r0, #247	; 0xf7
 80010f8:	f7ff fc84 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80010fc:	2020      	movs	r0, #32
 80010fe:	f7ff fc91 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001102:	20ea      	movs	r0, #234	; 0xea
 8001104:	f7ff fc7e 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fc8b 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fc88 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001114:	20c0      	movs	r0, #192	; 0xc0
 8001116:	f7ff fc75 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800111a:	201b      	movs	r0, #27
 800111c:	f7ff fc82 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001120:	20c1      	movs	r0, #193	; 0xc1
 8001122:	f7ff fc6f 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fc7c 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800112c:	20c5      	movs	r0, #197	; 0xc5
 800112e:	f7ff fc69 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001132:	2030      	movs	r0, #48	; 0x30
 8001134:	f7ff fc76 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001138:	2030      	movs	r0, #48	; 0x30
 800113a:	f7ff fc73 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800113e:	20c7      	movs	r0, #199	; 0xc7
 8001140:	f7ff fc60 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001144:	20b7      	movs	r0, #183	; 0xb7
 8001146:	f7ff fc6d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800114a:	2036      	movs	r0, #54	; 0x36
 800114c:	f7ff fc5a 	bl	8000a04 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001150:	2008      	movs	r0, #8
 8001152:	f7ff fc67 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001156:	203a      	movs	r0, #58	; 0x3a
 8001158:	f7ff fc54 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800115c:	2055      	movs	r0, #85	; 0x55
 800115e:	f7ff fc61 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001162:	20b1      	movs	r0, #177	; 0xb1
 8001164:	f7ff fc4e 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fc5b 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800116e:	201a      	movs	r0, #26
 8001170:	f7ff fc58 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001174:	20b6      	movs	r0, #182	; 0xb6
 8001176:	f7ff fc45 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800117a:	200a      	movs	r0, #10
 800117c:	f7ff fc52 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001180:	20a2      	movs	r0, #162	; 0xa2
 8001182:	f7ff fc4f 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001186:	20f2      	movs	r0, #242	; 0xf2
 8001188:	f7ff fc3c 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fc49 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001192:	2026      	movs	r0, #38	; 0x26
 8001194:	f7ff fc36 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fc43 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800119e:	20e0      	movs	r0, #224	; 0xe0
 80011a0:	f7ff fc30 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fc3d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80011aa:	202a      	movs	r0, #42	; 0x2a
 80011ac:	f7ff fc3a 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80011b0:	2028      	movs	r0, #40	; 0x28
 80011b2:	f7ff fc37 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011b6:	2008      	movs	r0, #8
 80011b8:	f7ff fc34 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80011bc:	200e      	movs	r0, #14
 80011be:	f7ff fc31 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011c2:	2008      	movs	r0, #8
 80011c4:	f7ff fc2e 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80011c8:	2054      	movs	r0, #84	; 0x54
 80011ca:	f7ff fc2b 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80011ce:	20a9      	movs	r0, #169	; 0xa9
 80011d0:	f7ff fc28 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80011d4:	2043      	movs	r0, #67	; 0x43
 80011d6:	f7ff fc25 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80011da:	200a      	movs	r0, #10
 80011dc:	f7ff fc22 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011e0:	200f      	movs	r0, #15
 80011e2:	f7ff fc1f 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fc1c 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fc19 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fc16 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fc13 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80011fe:	20e1      	movs	r0, #225	; 0xe1
 8001200:	f7ff fc00 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fc0d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800120a:	2015      	movs	r0, #21
 800120c:	f7ff fc0a 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001210:	2017      	movs	r0, #23
 8001212:	f7ff fc07 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001216:	2007      	movs	r0, #7
 8001218:	f7ff fc04 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800121c:	2011      	movs	r0, #17
 800121e:	f7ff fc01 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001222:	2006      	movs	r0, #6
 8001224:	f7ff fbfe 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001228:	202b      	movs	r0, #43	; 0x2b
 800122a:	f7ff fbfb 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800122e:	2056      	movs	r0, #86	; 0x56
 8001230:	f7ff fbf8 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001234:	203c      	movs	r0, #60	; 0x3c
 8001236:	f7ff fbf5 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800123a:	2005      	movs	r0, #5
 800123c:	f7ff fbf2 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001240:	2010      	movs	r0, #16
 8001242:	f7ff fbef 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001246:	200f      	movs	r0, #15
 8001248:	f7ff fbec 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800124c:	203f      	movs	r0, #63	; 0x3f
 800124e:	f7ff fbe9 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001252:	203f      	movs	r0, #63	; 0x3f
 8001254:	f7ff fbe6 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001258:	200f      	movs	r0, #15
 800125a:	f7ff fbe3 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800125e:	202b      	movs	r0, #43	; 0x2b
 8001260:	f7ff fbd0 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fbdd 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fbda 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fbd7 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001276:	203f      	movs	r0, #63	; 0x3f
 8001278:	f7ff fbd4 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800127c:	202a      	movs	r0, #42	; 0x2a
 800127e:	f7ff fbc1 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fbce 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fbcb 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fbc8 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001294:	20ef      	movs	r0, #239	; 0xef
 8001296:	f7ff fbc5 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800129a:	2011      	movs	r0, #17
 800129c:	f7ff fbb2 	bl	8000a04 <LCD_WR_REG>
	HAL_Delay(120);
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f002 f80d 	bl	80032c0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80012a6:	2029      	movs	r0, #41	; 0x29
 80012a8:	f7ff fbac 	bl	8000a04 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <lcd_init+0x2bc>)
 80012b4:	f002 fad6 	bl	8003864 <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40020800 	.word	0x40020800
 80012c0:	20000180 	.word	0x20000180
 80012c4:	40020000 	.word	0x40020000

080012c8 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b298      	uxth	r0, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	8b3a      	ldrh	r2, [r7, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc6d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b298      	uxth	r0, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b29a      	uxth	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	8b3a      	ldrh	r2, [r7, #24]
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc5d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b298      	uxth	r0, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b29a      	uxth	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	8b3a      	ldrh	r2, [r7, #24]
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc4d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b298      	uxth	r0, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	b29a      	uxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	8b3a      	ldrh	r2, [r7, #24]
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc3d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	b29a      	uxth	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b298      	uxth	r0, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fc2d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	b29a      	uxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b298      	uxth	r0, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	8b3a      	ldrh	r2, [r7, #24]
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc1d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	b29a      	uxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	b298      	uxth	r0, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	8b3a      	ldrh	r2, [r7, #24]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc0d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b298      	uxth	r0, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	8b3a      	ldrh	r2, [r7, #24]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbfd 	bl	8000bd0 <lcd_DrawPoint>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b08a      	sub	sp, #40	; 0x28
 80013e2:	af02      	add	r7, sp, #8
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4613      	mov	r3, r2
 80013ec:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	f1c3 0303 	rsb	r3, r3, #3
 80013fe:	613b      	str	r3, [r7, #16]


	if (fill)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	2b00      	cmp	r3, #0
 8001404:	d04f      	beq.n	80014a6 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001406:	e029      	b.n	800145c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e00a      	b.n	8001424 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff ff55 	bl	80012c8 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	429a      	cmp	r2, r3
 800142a:	ddf0      	ble.n	800140e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da06      	bge.n	8001440 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4413      	add	r3, r2
 800143a:	3306      	adds	r3, #6
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	e00a      	b.n	8001456 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	009a      	lsls	r2, r3, #2
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4413      	add	r3, r2
 800144c:	330a      	adds	r3, #10
 800144e:	613b      	str	r3, [r7, #16]
				y--;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3b01      	subs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	429a      	cmp	r2, r3
 8001462:	ddd1      	ble.n	8001408 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001464:	e023      	b.n	80014ae <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff ff29 	bl	80012c8 <_draw_circle_8>
			if (d < 0) {
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da06      	bge.n	800148a <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	009a      	lsls	r2, r3, #2
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4413      	add	r3, r2
 8001484:	3306      	adds	r3, #6
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e00a      	b.n	80014a0 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	009a      	lsls	r2, r3, #2
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	330a      	adds	r3, #10
 8001498:	613b      	str	r3, [r7, #16]
				y--;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	3b01      	subs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
			x++;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dddb      	ble.n	8001466 <lcd_DrawCircle+0x88>
}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af04      	add	r7, sp, #16
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	81fb      	strh	r3, [r7, #14]
 80014c6:	460b      	mov	r3, r1
 80014c8:	81bb      	strh	r3, [r7, #12]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80014d6:	e048      	b.n	800156a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d145      	bne.n	800156a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014de:	89fa      	ldrh	r2, [r7, #14]
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <lcd_ShowStr+0xc4>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	1acb      	subs	r3, r1, r3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dc3f      	bgt.n	8001574 <lcd_ShowStr+0xbc>
 80014f4:	89ba      	ldrh	r2, [r7, #12]
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <lcd_ShowStr+0xc4>)
 80014f8:	885b      	ldrh	r3, [r3, #2]
 80014fa:	4619      	mov	r1, r3
 80014fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	429a      	cmp	r2, r3
 8001504:	dc36      	bgt.n	8001574 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b80      	cmp	r3, #128	; 0x80
 800150c:	d902      	bls.n	8001514 <lcd_ShowStr+0x5c>
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
 8001512:	e02a      	b.n	800156a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b0d      	cmp	r3, #13
 800151a:	d10b      	bne.n	8001534 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800151c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001520:	b29a      	uxth	r2, r3
 8001522:	89bb      	ldrh	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001528:	8abb      	ldrh	r3, [r7, #20]
 800152a:	81fb      	strh	r3, [r7, #14]
					str++;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	e017      	b.n	8001564 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	88fc      	ldrh	r4, [r7, #6]
 800153a:	89b9      	ldrh	r1, [r7, #12]
 800153c:	89f8      	ldrh	r0, [r7, #14]
 800153e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	f7ff fc10 	bl	8000d74 <lcd_ShowChar>
					x+=sizey/2;
 8001554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	b29a      	uxth	r2, r3
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4413      	add	r3, r2
 8001562:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1b2      	bne.n	80014d8 <lcd_ShowStr+0x20>
 8001572:	e000      	b.n	8001576 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001574:	bf00      	nop
			}
		}
	}
}
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000180 	.word	0x20000180

08001580 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af04      	add	r7, sp, #16
 8001586:	60ba      	str	r2, [r7, #8]
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	81fb      	strh	r3, [r7, #14]
 800158e:	460b      	mov	r3, r1
 8001590:	81bb      	strh	r3, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001596:	68b8      	ldr	r0, [r7, #8]
 8001598:	f7fe fe1a 	bl	80001d0 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <lcd_StrCenter+0x60>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	8afb      	ldrh	r3, [r7, #22]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	0fda      	lsrs	r2, r3, #31
 80015ae:	4413      	add	r3, r2
 80015b0:	105b      	asrs	r3, r3, #1
 80015b2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	8abb      	ldrh	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	b298      	uxth	r0, r3
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	89b9      	ldrh	r1, [r7, #12]
 80015c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	8c3b      	ldrh	r3, [r7, #32]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f7ff ff70 	bl	80014b8 <lcd_ShowStr>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000180 	.word	0x20000180

080015e4 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <led7_init+0x14>)
 80015ee:	f002 f939 	bl	8003864 <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021800 	.word	0x40021800

080015fc <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001600:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <led7_Scan+0x104>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <led7_Scan+0x104>)
 800160a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <led7_Scan+0x108>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <led7_Scan+0x10c>)
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <led7_Scan+0x104>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <led7_Scan+0x104>)
 8001628:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <led7_Scan+0x108>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d846      	bhi.n	80016c0 <led7_Scan+0xc4>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <led7_Scan+0x3c>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001649 	.word	0x08001649
 800163c:	08001667 	.word	0x08001667
 8001640:	08001685 	.word	0x08001685
 8001644:	080016a3 	.word	0x080016a3
	case 0:
		spi_buffer |= 0x00b0;
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <led7_Scan+0x104>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <led7_Scan+0x104>)
 8001654:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <led7_Scan+0x104>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <led7_Scan+0x104>)
 8001662:	801a      	strh	r2, [r3, #0]
		break;
 8001664:	e02d      	b.n	80016c2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <led7_Scan+0x104>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <led7_Scan+0x104>)
 8001672:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <led7_Scan+0x104>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f023 0320 	bic.w	r3, r3, #32
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <led7_Scan+0x104>)
 8001680:	801a      	strh	r2, [r3, #0]
		break;
 8001682:	e01e      	b.n	80016c2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <led7_Scan+0x104>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <led7_Scan+0x104>)
 8001690:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <led7_Scan+0x104>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	f023 0310 	bic.w	r3, r3, #16
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <led7_Scan+0x104>)
 800169e:	801a      	strh	r2, [r3, #0]
		break;
 80016a0:	e00f      	b.n	80016c2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <led7_Scan+0x104>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <led7_Scan+0x104>)
 80016ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <led7_Scan+0x104>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <led7_Scan+0x104>)
 80016bc:	801a      	strh	r2, [r3, #0]
		break;
 80016be:	e000      	b.n	80016c2 <led7_Scan+0xc6>
	default:
		break;
 80016c0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <led7_Scan+0x108>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	425a      	negs	r2, r3
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	bf58      	it	pl
 80016d4:	4253      	negpl	r3, r2
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <led7_Scan+0x108>)
 80016da:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <led7_Scan+0x110>)
 80016e2:	f002 f8bf 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016e6:	2301      	movs	r3, #1
 80016e8:	2202      	movs	r2, #2
 80016ea:	4905      	ldr	r1, [pc, #20]	; (8001700 <led7_Scan+0x104>)
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <led7_Scan+0x114>)
 80016ee:	f002 fdc0 	bl	8004272 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2140      	movs	r1, #64	; 0x40
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <led7_Scan+0x110>)
 80016f8:	f002 f8b4 	bl	8003864 <HAL_GPIO_WritePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000068 	.word	0x20000068
 8001704:	20000186 	.word	0x20000186
 8001708:	20000064 	.word	0x20000064
 800170c:	40021800 	.word	0x40021800
 8001710:	20005f54 	.word	0x20005f54

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001718:	f001 fd60 	bl	80031dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171c:	f000 f82c 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001720:	f7ff f878 	bl	8000814 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001724:	f001 fcbe 	bl	80030a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001728:	f000 fe88 	bl	800243c <MX_SPI1_Init>
  MX_FSMC_Init();
 800172c:	f7fe ffa2 	bl	8000674 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001730:	f000 f88c 	bl	800184c <system_init>
  lcd_Clear(WHITE);
 8001734:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001738:	f7ff f9e2 	bl	8000b00 <lcd_Clear>
  test_lcd();
 800173c:	f000 f8a6 	bl	800188c <test_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  gameOverUI();
  while (1)
  {
	  while(!flag_timer2);
 8001740:	bf00      	nop
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <main+0x5c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0fb      	beq.n	8001742 <main+0x2e>
	  flag_timer2 = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <main+0x5c>)
 800174c:	2200      	movs	r2, #0
 800174e:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001750:	f7fe ff24 	bl	800059c <button_Scan>
	  beginStartGame();
 8001754:	f001 f9ae 	bl	8002ab4 <beginStartGame>
	  if(statusGame == NORMALMODE || statusGame == TIMINGMODE)
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <main+0x60>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d003      	beq.n	8001768 <main+0x54>
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <main+0x60>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d1eb      	bne.n	8001740 <main+0x2c>
	  {
		  runSnake();
 8001768:	f000 fdec 	bl	8002344 <runSnake>
	  while(!flag_timer2);
 800176c:	e7e8      	b.n	8001740 <main+0x2c>
 800176e:	bf00      	nop
 8001770:	20005f4c 	.word	0x20005f4c
 8001774:	2000017c 	.word	0x2000017c

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b094      	sub	sp, #80	; 0x50
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2230      	movs	r2, #48	; 0x30
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f004 f852 	bl	8005830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <SystemClock_Config+0xcc>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a27      	ldr	r2, [pc, #156]	; (8001844 <SystemClock_Config+0xcc>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <SystemClock_Config+0xcc>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <SystemClock_Config+0xd0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <SystemClock_Config+0xd0>)
 80017c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <SystemClock_Config+0xd0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d8:	2301      	movs	r3, #1
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017dc:	2310      	movs	r3, #16
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e0:	2302      	movs	r3, #2
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017e8:	2308      	movs	r3, #8
 80017ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017ec:	23a8      	movs	r3, #168	; 0xa8
 80017ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017f4:	2304      	movs	r3, #4
 80017f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 f84b 	bl	8003898 <HAL_RCC_OscConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001808:	f000 f88a 	bl	8001920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	230f      	movs	r3, #15
 800180e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001810:	2302      	movs	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800181c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800181e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2105      	movs	r1, #5
 800182a:	4618      	mov	r0, r3
 800182c:	f002 faac 	bl	8003d88 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001836:	f000 f873 	bl	8001920 <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	3750      	adds	r7, #80	; 0x50
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000

0800184c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2120      	movs	r1, #32
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <system_init+0x3c>)
 8001856:	f002 f805 	bl	8003864 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2140      	movs	r1, #64	; 0x40
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <system_init+0x3c>)
 8001860:	f002 f800 	bl	8003864 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	4807      	ldr	r0, [pc, #28]	; (8001888 <system_init+0x3c>)
 800186a:	f001 fffb 	bl	8003864 <HAL_GPIO_WritePin>
	  timer_init();
 800186e:	f000 fd95 	bl	800239c <timer_init>
	  led7_init();
 8001872:	f7ff feb7 	bl	80015e4 <led7_init>
	  button_init();
 8001876:	f7fe fe85 	bl	8000584 <button_init>
	  lcd_init();
 800187a:	f7ff fbc5 	bl	8001008 <lcd_init>
	  setTimer2(200);
 800187e:	20c8      	movs	r0, #200	; 0xc8
 8001880:	f000 fd96 	bl	80023b0 <setTimer2>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 20, BLUE);
 8001892:	231f      	movs	r3, #31
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2314      	movs	r3, #20
 8001898:	22f0      	movs	r2, #240	; 0xf0
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff f961 	bl	8000b64 <lcd_Fill>
	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 80018a2:	2301      	movs	r3, #1
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2310      	movs	r3, #16
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	231f      	movs	r3, #31
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <test_lcd+0x88>)
 80018b4:	2102      	movs	r1, #2
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fe62 	bl	8001580 <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
 80018bc:	2300      	movs	r3, #0
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2318      	movs	r3, #24
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <test_lcd+0x8c>)
 80018d0:	211e      	movs	r1, #30
 80018d2:	2014      	movs	r0, #20
 80018d4:	f7ff fdf0 	bl	80014b8 <lcd_ShowStr>
	lcd_DrawCircle(60, 120, GREEN, 40, 1);
 80018d8:	2301      	movs	r3, #1
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2328      	movs	r3, #40	; 0x28
 80018de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80018e2:	2178      	movs	r1, #120	; 0x78
 80018e4:	203c      	movs	r0, #60	; 0x3c
 80018e6:	f7ff fd7a 	bl	80013de <lcd_DrawCircle>
	lcd_DrawCircle(160, 120, BRED, 40, 0);
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2328      	movs	r3, #40	; 0x28
 80018f0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80018f4:	2178      	movs	r1, #120	; 0x78
 80018f6:	20a0      	movs	r0, #160	; 0xa0
 80018f8:	f7ff fd71 	bl	80013de <lcd_DrawCircle>
	lcd_ShowPicture(80, 210, 39, 40, gImage_BKWHITEBG);
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <test_lcd+0x90>)
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2328      	movs	r3, #40	; 0x28
 8001902:	2227      	movs	r2, #39	; 0x27
 8001904:	21d2      	movs	r1, #210	; 0xd2
 8001906:	2050      	movs	r0, #80	; 0x50
 8001908:	f7ff fb04 	bl	8000f14 <lcd_ShowPicture>
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	080061b8 	.word	0x080061b8
 8001918:	080061c8 	.word	0x080061c8
 800191c:	08009294 	.word	0x08009294

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>
	...

0800192c <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b090      	sub	sp, #64	; 0x40
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f107 000c 	add.w	r0, r7, #12
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <convert2str+0x2c>)
 800193e:	2132      	movs	r1, #50	; 0x32
 8001940:	f003 ff7e 	bl	8005840 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4618      	mov	r0, r3
 800194a:	f003 ffbd 	bl	80058c8 <strdup>
 800194e:	4603      	mov	r3, r0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3740      	adds	r7, #64	; 0x40
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	080061d8 	.word	0x080061d8

0800195c <lcdDrawWall>:

void lcdDrawWall()
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <lcdDrawWall+0xb8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b298      	uxth	r0, r3
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <lcdDrawWall+0xbc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b299      	uxth	r1, r3
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <lcdDrawWall+0xb8>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	b29c      	uxth	r4, r3
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <lcdDrawWall+0xbc>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <lcdDrawWall+0xc0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	4622      	mov	r2, r4
 800198a:	f7ff f8eb 	bl	8000b64 <lcd_Fill>
	// LEFT
//	lcd_DrawRectangle(0, 70, wall_size, 320, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[2] + wallSize, wallY[2], BLACK);
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <lcdDrawWall+0xb8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b298      	uxth	r0, r3
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <lcdDrawWall+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b299      	uxth	r1, r3
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <lcdDrawWall+0xb8>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <lcdDrawWall+0xc0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <lcdDrawWall+0xbc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2400      	movs	r4, #0
 80019b2:	9400      	str	r4, [sp, #0]
 80019b4:	f7ff f8d6 	bl	8000b64 <lcd_Fill>
	// RIGHT
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <lcdDrawWall+0xb8>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <lcdDrawWall+0xc0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b298      	uxth	r0, r3
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <lcdDrawWall+0xbc>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	b299      	uxth	r1, r3
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <lcdDrawWall+0xb8>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <lcdDrawWall+0xbc>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2400      	movs	r4, #0
 80019dc:	9400      	str	r4, [sp, #0]
 80019de:	f7ff f8c1 	bl	8000b64 <lcd_Fill>
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <lcdDrawWall+0xb8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	b298      	uxth	r0, r3
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <lcdDrawWall+0xbc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <lcdDrawWall+0xc0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b299      	uxth	r1, r3
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <lcdDrawWall+0xb8>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <lcdDrawWall+0xbc>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2400      	movs	r4, #0
 8001a06:	9400      	str	r4, [sp, #0]
 8001a08:	f7ff f8ac 	bl	8000b64 <lcd_Fill>
}
 8001a0c:	bf00      	nop
 8001a0e:	3704      	adds	r7, #4
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	20000018 	.word	0x20000018
 8001a18:	20000028 	.word	0x20000028
 8001a1c:	20000038 	.word	0x20000038

08001a20 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b0a3      	sub	sp, #140	; 0x8c
 8001a24:	af04      	add	r7, sp, #16
 8001a26:	4603      	mov	r3, r0
 8001a28:	460a      	mov	r2, r1
 8001a2a:	80fb      	strh	r3, [r7, #6]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8001a30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a34:	f7ff f864 	bl	8000b00 <lcd_Clear>
	lcd_Fill(0, 0, 240, 60, BLUE);
 8001a38:	231f      	movs	r3, #31
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	233c      	movs	r3, #60	; 0x3c
 8001a3e:	22f0      	movs	r2, #240	; 0xf0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff f88e 	bl	8000b64 <lcd_Fill>
//	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
	char str1[50] = "ID: ";
 8001a48:	4a39      	ldr	r2, [pc, #228]	; (8001b30 <setUpLcdNormalPlay+0x110>)
 8001a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a52:	6018      	str	r0, [r3, #0]
 8001a54:	3304      	adds	r3, #4
 8001a56:	7019      	strb	r1, [r3, #0]
 8001a58:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8001a5c:	222d      	movs	r2, #45	; 0x2d
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fee5 	bl	8005830 <memset>
	char *str2 = convert2str(ID);
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <setUpLcdNormalPlay+0x114>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff5e 	bl	800192c <convert2str>
 8001a70:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 8001a72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 ff15 	bl	80058a8 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 24, 1);
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <setUpLcdNormalPlay+0x118>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b298      	uxth	r0, r3
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <setUpLcdNormalPlay+0x11c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a8e:	2301      	movs	r3, #1
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	2318      	movs	r3, #24
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aa0:	f7ff fd0a 	bl	80014b8 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8001aa4:	4a26      	ldr	r2, [pc, #152]	; (8001b40 <setUpLcdNormalPlay+0x120>)
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aae:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	222a      	movs	r2, #42	; 0x2a
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 feb8 	bl	8005830 <memset>
	char *str4 = convert2str(SCORE);
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <setUpLcdNormalPlay+0x124>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <convert2str>
 8001aca:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fee8 	bl	80058a8 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 24, 1);
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <setUpLcdNormalPlay+0x128>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b298      	uxth	r0, r3
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <setUpLcdNormalPlay+0x12c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3305      	adds	r3, #5
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	f107 0208 	add.w	r2, r7, #8
 8001aec:	2301      	movs	r3, #1
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	2318      	movs	r3, #24
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001afe:	f7ff fcdb 	bl	80014b8 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <setUpLcdNormalPlay+0x130>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b298      	uxth	r0, r3
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <setUpLcdNormalPlay+0x134>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <setUpLcdNormalPlay+0x138>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <setUpLcdNormalPlay+0x13c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4c11      	ldr	r4, [pc, #68]	; (8001b60 <setUpLcdNormalPlay+0x140>)
 8001b1c:	9400      	str	r4, [sp, #0]
 8001b1e:	f7ff f9f9 	bl	8000f14 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8001b22:	f7ff ff1b 	bl	800195c <lcdDrawWall>
}
 8001b26:	bf00      	nop
 8001b28:	377c      	adds	r7, #124	; 0x7c
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	080061dc 	.word	0x080061dc
 8001b34:	20000170 	.word	0x20000170
 8001b38:	2000003c 	.word	0x2000003c
 8001b3c:	20000040 	.word	0x20000040
 8001b40:	08006210 	.word	0x08006210
 8001b44:	20000172 	.word	0x20000172
 8001b48:	2000004c 	.word	0x2000004c
 8001b4c:	20000050 	.word	0x20000050
 8001b50:	20000054 	.word	0x20000054
 8001b54:	20000058 	.word	0x20000058
 8001b58:	2000005c 	.word	0x2000005c
 8001b5c:	20000060 	.word	0x20000060
 8001b60:	08009294 	.word	0x08009294

08001b64 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b0b1      	sub	sp, #196	; 0xc4
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	80fb      	strh	r3, [r7, #6]
 8001b70:	4613      	mov	r3, r2
 8001b72:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8001b74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b78:	f7fe ffc2 	bl	8000b00 <lcd_Clear>
	lcd_Fill(0, 0, 240, 60, BLUE);
 8001b7c:	231f      	movs	r3, #31
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	233c      	movs	r3, #60	; 0x3c
 8001b82:	22f0      	movs	r2, #240	; 0xf0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7fe ffec 	bl	8000b64 <lcd_Fill>
//	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
	char str1[50] = "ID: ";
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <setUpLcdTimingPlay+0x17c>)
 8001b8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b96:	6018      	str	r0, [r3, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	7019      	strb	r1, [r3, #0]
 8001b9c:	f107 0375 	add.w	r3, r7, #117	; 0x75
 8001ba0:	222d      	movs	r2, #45	; 0x2d
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fe43 	bl	8005830 <memset>
	char *str2 = convert2str(ID);
 8001baa:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <setUpLcdTimingPlay+0x180>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff febc 	bl	800192c <convert2str>
 8001bb4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	strcat(str1, str2);
 8001bb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bbc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fe71 	bl	80058a8 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <setUpLcdTimingPlay+0x184>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b298      	uxth	r0, r3
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <setUpLcdTimingPlay+0x188>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	2310      	movs	r3, #16
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001be8:	f7ff fc66 	bl	80014b8 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8001bec:	4a40      	ldr	r2, [pc, #256]	; (8001cf0 <setUpLcdTimingPlay+0x18c>)
 8001bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bfe:	222a      	movs	r2, #42	; 0x2a
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fe14 	bl	8005830 <memset>
	char *str4 = convert2str(0);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff fe8f 	bl	800192c <convert2str>
 8001c0e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	strcat(str3, str4);
 8001c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fe44 	bl	80058a8 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <setUpLcdTimingPlay+0x190>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b298      	uxth	r0, r3
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <setUpLcdTimingPlay+0x194>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b299      	uxth	r1, r3
 8001c2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c30:	2301      	movs	r3, #1
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2310      	movs	r3, #16
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c42:	f7ff fc39 	bl	80014b8 <lcd_ShowStr>

	char str5[50] = "TIMING: ";
 8001c46:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <setUpLcdTimingPlay+0x198>)
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4e:	c303      	stmia	r3!, {r0, r1}
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	f107 0311 	add.w	r3, r7, #17
 8001c56:	2229      	movs	r2, #41	; 0x29
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fde8 	bl	8005830 <memset>
	char *str6;
	if(timing != NOTIMING)
 8001c60:	88bb      	ldrh	r3, [r7, #4]
 8001c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d006      	beq.n	8001c78 <setUpLcdTimingPlay+0x114>
	{
		str6 = convert2str(timing);
 8001c6a:	88bb      	ldrh	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe5d 	bl	800192c <convert2str>
 8001c72:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8001c76:	e002      	b.n	8001c7e <setUpLcdTimingPlay+0x11a>
	}else{
		str6 = "--";
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <setUpLcdTimingPlay+0x19c>)
 8001c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	}

	strcat(str5, str6);
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fe0e 	bl	80058a8 <strcat>
	lcd_ShowStr(timingX, timingY, str5, RED, WHITE, 16, 1);
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <setUpLcdTimingPlay+0x1a0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b298      	uxth	r0, r3
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <setUpLcdTimingPlay+0x1a4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b299      	uxth	r1, r3
 8001c98:	f107 0208 	add.w	r2, r7, #8
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cae:	f7ff fc03 	bl	80014b8 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <setUpLcdTimingPlay+0x1a8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b298      	uxth	r0, r3
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <setUpLcdTimingPlay+0x1ac>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <setUpLcdTimingPlay+0x1b0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <setUpLcdTimingPlay+0x1b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4c14      	ldr	r4, [pc, #80]	; (8001d1c <setUpLcdTimingPlay+0x1b8>)
 8001ccc:	9400      	str	r4, [sp, #0]
 8001cce:	f7ff f921 	bl	8000f14 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8001cd2:	f7ff fe43 	bl	800195c <lcdDrawWall>
}
 8001cd6:	bf00      	nop
 8001cd8:	37b4      	adds	r7, #180	; 0xb4
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	080061dc 	.word	0x080061dc
 8001ce4:	20000170 	.word	0x20000170
 8001ce8:	2000003c 	.word	0x2000003c
 8001cec:	20000040 	.word	0x20000040
 8001cf0:	08006210 	.word	0x08006210
 8001cf4:	2000004c 	.word	0x2000004c
 8001cf8:	20000050 	.word	0x20000050
 8001cfc:	08006248 	.word	0x08006248
 8001d00:	08006244 	.word	0x08006244
 8001d04:	20000044 	.word	0x20000044
 8001d08:	20000048 	.word	0x20000048
 8001d0c:	20000054 	.word	0x20000054
 8001d10:	20000058 	.word	0x20000058
 8001d14:	2000005c 	.word	0x2000005c
 8001d18:	20000060 	.word	0x20000060
 8001d1c:	08009294 	.word	0x08009294

08001d20 <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0b1      	sub	sp, #196	; 0xc4
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8001d30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d34:	f7fe fee4 	bl	8000b00 <lcd_Clear>
	lcd_Fill(0, 0, 240, 60, BLUE);
 8001d38:	231f      	movs	r3, #31
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	233c      	movs	r3, #60	; 0x3c
 8001d3e:	22f0      	movs	r2, #240	; 0xf0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7fe ff0e 	bl	8000b64 <lcd_Fill>
//	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
	char str1[50] = "ID: ";
 8001d48:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <setUpLcdAdvancePlay+0x17c>)
 8001d4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d52:	6018      	str	r0, [r3, #0]
 8001d54:	3304      	adds	r3, #4
 8001d56:	7019      	strb	r1, [r3, #0]
 8001d58:	f107 0375 	add.w	r3, r7, #117	; 0x75
 8001d5c:	222d      	movs	r2, #45	; 0x2d
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fd65 	bl	8005830 <memset>
	char *str2 = convert2str(ID);
 8001d66:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <setUpLcdAdvancePlay+0x180>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fdde 	bl	800192c <convert2str>
 8001d70:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	strcat(str1, str2);
 8001d74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d78:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fd93 	bl	80058a8 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <setUpLcdAdvancePlay+0x184>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b298      	uxth	r0, r3
 8001d88:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <setUpLcdAdvancePlay+0x188>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001d92:	2301      	movs	r3, #1
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2310      	movs	r3, #16
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001da4:	f7ff fb88 	bl	80014b8 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8001da8:	4a40      	ldr	r2, [pc, #256]	; (8001eac <setUpLcdAdvancePlay+0x18c>)
 8001daa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001db6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dba:	222a      	movs	r2, #42	; 0x2a
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fd36 	bl	8005830 <memset>
	char *str4 = convert2str(0);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fdb1 	bl	800192c <convert2str>
 8001dca:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	strcat(str3, str4);
 8001dce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 fd66 	bl	80058a8 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <setUpLcdAdvancePlay+0x190>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b298      	uxth	r0, r3
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <setUpLcdAdvancePlay+0x194>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b299      	uxth	r1, r3
 8001de8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001dec:	2301      	movs	r3, #1
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2310      	movs	r3, #16
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001dfe:	f7ff fb5b 	bl	80014b8 <lcd_ShowStr>

	char str5[50] = "TIMING: ";
 8001e02:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <setUpLcdAdvancePlay+0x198>)
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0a:	c303      	stmia	r3!, {r0, r1}
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	f107 0311 	add.w	r3, r7, #17
 8001e12:	2229      	movs	r2, #41	; 0x29
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fd0a 	bl	8005830 <memset>
	char *str6;
	if(timing != NOTIMING)
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d006      	beq.n	8001e34 <setUpLcdAdvancePlay+0x114>
	{
		str6 = convert2str(timing);
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fd7f 	bl	800192c <convert2str>
 8001e2e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8001e32:	e002      	b.n	8001e3a <setUpLcdAdvancePlay+0x11a>
	}else{
		str6 = "--";
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <setUpLcdAdvancePlay+0x19c>)
 8001e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	}

	strcat(str5, str6);
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fd30 	bl	80058a8 <strcat>
	lcd_ShowStr(timingX, timingY, str5, RED, WHITE, 16, 1);
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <setUpLcdAdvancePlay+0x1a0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b298      	uxth	r0, r3
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <setUpLcdAdvancePlay+0x1a4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b299      	uxth	r1, r3
 8001e54:	f107 0208 	add.w	r2, r7, #8
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e6a:	f7ff fb25 	bl	80014b8 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <setUpLcdAdvancePlay+0x1a8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b298      	uxth	r0, r3
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <setUpLcdAdvancePlay+0x1ac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <setUpLcdAdvancePlay+0x1b0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <setUpLcdAdvancePlay+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4c14      	ldr	r4, [pc, #80]	; (8001ed8 <setUpLcdAdvancePlay+0x1b8>)
 8001e88:	9400      	str	r4, [sp, #0]
 8001e8a:	f7ff f843 	bl	8000f14 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8001e8e:	f7ff fd65 	bl	800195c <lcdDrawWall>
}
 8001e92:	bf00      	nop
 8001e94:	37b4      	adds	r7, #180	; 0xb4
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	080061dc 	.word	0x080061dc
 8001ea0:	20000170 	.word	0x20000170
 8001ea4:	2000003c 	.word	0x2000003c
 8001ea8:	20000040 	.word	0x20000040
 8001eac:	08006210 	.word	0x08006210
 8001eb0:	2000004c 	.word	0x2000004c
 8001eb4:	20000050 	.word	0x20000050
 8001eb8:	08006248 	.word	0x08006248
 8001ebc:	08006244 	.word	0x08006244
 8001ec0:	20000044 	.word	0x20000044
 8001ec4:	20000048 	.word	0x20000048
 8001ec8:	20000054 	.word	0x20000054
 8001ecc:	20000058 	.word	0x20000058
 8001ed0:	2000005c 	.word	0x2000005c
 8001ed4:	20000060 	.word	0x20000060
 8001ed8:	08009294 	.word	0x08009294

08001edc <initGame>:
struct info snake[3000];
int lengthOfArray= 3000;
int direction= RIGHT;

void initGame()
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
	snake[0].x= 150;
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <initGame+0x98>)
 8001ee4:	2296      	movs	r2, #150	; 0x96
 8001ee6:	601a      	str	r2, [r3, #0]
	snake[0].y= 150;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <initGame+0x98>)
 8001eea:	2296      	movs	r2, #150	; 0x96
 8001eec:	605a      	str	r2, [r3, #4]
	snake[1].x= 145;
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <initGame+0x98>)
 8001ef0:	2291      	movs	r2, #145	; 0x91
 8001ef2:	609a      	str	r2, [r3, #8]
	snake[1].y= 150;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <initGame+0x98>)
 8001ef6:	2296      	movs	r2, #150	; 0x96
 8001ef8:	60da      	str	r2, [r3, #12]
	snake[2].x= 140;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <initGame+0x98>)
 8001efc:	228c      	movs	r2, #140	; 0x8c
 8001efe:	611a      	str	r2, [r3, #16]
	snake[2].y= 150;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <initGame+0x98>)
 8001f02:	2296      	movs	r2, #150	; 0x96
 8001f04:	615a      	str	r2, [r3, #20]
	snake[3].x= 135;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <initGame+0x98>)
 8001f08:	2287      	movs	r2, #135	; 0x87
 8001f0a:	619a      	str	r2, [r3, #24]
	snake[3].y= 150;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <initGame+0x98>)
 8001f0e:	2296      	movs	r2, #150	; 0x96
 8001f10:	61da      	str	r2, [r3, #28]
	snake[4].x= 130;
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <initGame+0x98>)
 8001f14:	2282      	movs	r2, #130	; 0x82
 8001f16:	621a      	str	r2, [r3, #32]
	snake[4].y= 150;
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <initGame+0x98>)
 8001f1a:	2296      	movs	r2, #150	; 0x96
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
	snake[5].x= 125;
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <initGame+0x98>)
 8001f20:	227d      	movs	r2, #125	; 0x7d
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
	snake[5].y= 150;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <initGame+0x98>)
 8001f26:	2296      	movs	r2, #150	; 0x96
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
	snake[6].x= 120;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <initGame+0x98>)
 8001f2c:	2278      	movs	r2, #120	; 0x78
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
	snake[6].y= 150;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <initGame+0x98>)
 8001f32:	2296      	movs	r2, #150	; 0x96
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
	for (int i= 7; i < 1000; i++)
 8001f36:	2307      	movs	r3, #7
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	e00d      	b.n	8001f58 <initGame+0x7c>
	{
		snake[i].x= 0;
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <initGame+0x98>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2100      	movs	r1, #0
 8001f42:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y= 0;
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <initGame+0x98>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
	for (int i= 7; i < 1000; i++)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3301      	adds	r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5e:	dbed      	blt.n	8001f3c <initGame+0x60>
	}
	direction= RIGHT;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <initGame+0x9c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
//	snakeLength= 1;
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000188 	.word	0x20000188
 8001f78:	20005f48 	.word	0x20005f48

08001f7c <goLeft>:

void goLeft()
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0

	switch (direction)
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <goLeft+0xa8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <goLeft+0x12>
	{
	case RIGHT:
		goRight();
 8001f8a:	f000 f84f 	bl	800202c <goRight>
	default:
		direction= LEFT;
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <goLeft+0xa8>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
		for (int i= 1000; i >= 0; i--)
 8001f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	e03a      	b.n	8002012 <goLeft+0x96>
		{
			if (i== 0)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d113      	bne.n	8001fca <goLeft+0x4e>
			{
				snake[i].x -= 5;
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <goLeft+0xac>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001faa:	1f5a      	subs	r2, r3, #5
 8001fac:	491e      	ldr	r1, [pc, #120]	; (8002028 <goLeft+0xac>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				snake[i].y= snake[i].y;
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <goLeft+0xac>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	491a      	ldr	r1, [pc, #104]	; (8002028 <goLeft+0xac>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	e020      	b.n	800200c <goLeft+0x90>
			}
			else
			{
				if (snake[i].x || snake[i].y)
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <goLeft+0xac>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <goLeft+0x68>
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <goLeft+0xac>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <goLeft+0x90>
				{
					snake[i].x= snake[i- 1].x;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <goLeft+0xac>)
 8001fea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <goLeft+0xac>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					snake[i].y= snake[i-1].y;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <goLeft+0xac>)
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4909      	ldr	r1, [pc, #36]	; (8002028 <goLeft+0xac>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	605a      	str	r2, [r3, #4]
		for (int i= 1000; i >= 0; i--)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	dac1      	bge.n	8001f9c <goLeft+0x20>
				}
			}
		}
		break;
 8002018:	bf00      	nop
	}
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20005f48 	.word	0x20005f48
 8002028:	20000188 	.word	0x20000188

0800202c <goRight>:

void goRight()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	switch (direction)
 8002032:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <goRight+0xa8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <goRight+0x14>
	{
	case LEFT:
		goLeft();
 800203a:	f7ff ff9f 	bl	8001f7c <goLeft>
		break;
 800203e:	e045      	b.n	80020cc <goRight+0xa0>
	default:
		direction= RIGHT;
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <goRight+0xa8>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
		for (int i= 1000; i >= 0; i--)
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	e03a      	b.n	80020c4 <goRight+0x98>
		{
			if (i== 0)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d113      	bne.n	800207c <goRight+0x50>
			{
				snake[i].x+= 5;
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <goRight+0xac>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800205c:	1d5a      	adds	r2, r3, #5
 800205e:	491e      	ldr	r1, [pc, #120]	; (80020d8 <goRight+0xac>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				snake[i].y= snake[i].y;
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <goRight+0xac>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4919      	ldr	r1, [pc, #100]	; (80020d8 <goRight+0xac>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e020      	b.n	80020be <goRight+0x92>
			}
			else
			{
				if (snake[i].x || snake[i].y)
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <goRight+0xac>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <goRight+0x6a>
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <goRight+0xac>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <goRight+0x92>
				{
					snake[i].x= snake[i-1 ].x;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3b01      	subs	r3, #1
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <goRight+0xac>)
 800209c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80020a0:	490d      	ldr	r1, [pc, #52]	; (80020d8 <goRight+0xac>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					snake[i].y= snake[i-1 ].y;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <goRight+0xac>)
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <goRight+0xac>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	605a      	str	r2, [r3, #4]
		for (int i= 1000; i >= 0; i--)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dac1      	bge.n	800204e <goRight+0x22>
				}
			}
		}
		break;
 80020ca:	bf00      	nop
	}
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20005f48 	.word	0x20005f48
 80020d8:	20000188 	.word	0x20000188

080020dc <goUp>:

void goUp()
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
	switch (direction)
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <goUp+0xa8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d102      	bne.n	80020f0 <goUp+0x14>
	{
	case DOWN:
		goUp();
 80020ea:	f7ff fff7 	bl	80020dc <goUp>
		break;
 80020ee:	e045      	b.n	800217c <goUp+0xa0>
	default:
		direction= UP;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <goUp+0xa8>)
 80020f2:	2203      	movs	r2, #3
 80020f4:	601a      	str	r2, [r3, #0]
		for (int i= 1000; i >= 0; i--)
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e03a      	b.n	8002174 <goUp+0x98>
		{
			if (i== 0)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d113      	bne.n	800212c <goUp+0x50>
			{
				snake[i].x = snake[i].x;
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <goUp+0xac>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800210c:	491e      	ldr	r1, [pc, #120]	; (8002188 <goUp+0xac>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				snake[i].y-= 5;
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <goUp+0xac>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	1f5a      	subs	r2, r3, #5
 8002120:	4919      	ldr	r1, [pc, #100]	; (8002188 <goUp+0xac>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e020      	b.n	800216e <goUp+0x92>
			}
			else
			{
				if (snake[i].x || snake[i].y)
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <goUp+0xac>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <goUp+0x6a>
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <goUp+0xac>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d013      	beq.n	800216e <goUp+0x92>
				{
					snake[i].x= snake[i-1].x;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3b01      	subs	r3, #1
 800214a:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <goUp+0xac>)
 800214c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002150:	490d      	ldr	r1, [pc, #52]	; (8002188 <goUp+0xac>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					snake[i].y= snake[i-1].y;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <goUp+0xac>)
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4908      	ldr	r1, [pc, #32]	; (8002188 <goUp+0xac>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	605a      	str	r2, [r3, #4]
		for (int i= 1000; i >= 0; i--)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3b01      	subs	r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	dac1      	bge.n	80020fe <goUp+0x22>
				}
			}
		}
		break;
 800217a:	bf00      	nop
	}
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20005f48 	.word	0x20005f48
 8002188:	20000188 	.word	0x20000188

0800218c <goDown>:

void goDown()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
	switch (direction)
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <goDown+0xa8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d102      	bne.n	80021a0 <goDown+0x14>
	{
	case UP:
		goDown();
 800219a:	f7ff fff7 	bl	800218c <goDown>
		break;
 800219e:	e045      	b.n	800222c <goDown+0xa0>
	default:
		direction= DOWN;
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <goDown+0xa8>)
 80021a2:	2202      	movs	r2, #2
 80021a4:	601a      	str	r2, [r3, #0]
		for (int i= 1000; i >= 0; i--)
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	e03a      	b.n	8002224 <goDown+0x98>
		{
			if (i== 0)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d113      	bne.n	80021dc <goDown+0x50>
			{
				snake[i].x= snake[i].x;
 80021b4:	4a20      	ldr	r2, [pc, #128]	; (8002238 <goDown+0xac>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80021bc:	491e      	ldr	r1, [pc, #120]	; (8002238 <goDown+0xac>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				snake[i].y+= 5;
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <goDown+0xac>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	1d5a      	adds	r2, r3, #5
 80021d0:	4919      	ldr	r1, [pc, #100]	; (8002238 <goDown+0xac>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	e020      	b.n	800221e <goDown+0x92>
			}
			else
			{
				if (snake[i].x || snake[i].y)
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <goDown+0xac>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <goDown+0x6a>
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <goDown+0xac>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d013      	beq.n	800221e <goDown+0x92>
				{
					snake[i].x= snake[i-1].x;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <goDown+0xac>)
 80021fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002200:	490d      	ldr	r1, [pc, #52]	; (8002238 <goDown+0xac>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					snake[i].y= snake[i-1].y;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <goDown+0xac>)
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4908      	ldr	r1, [pc, #32]	; (8002238 <goDown+0xac>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	605a      	str	r2, [r3, #4]
		for (int i= 1000; i >= 0; i--)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3b01      	subs	r3, #1
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	dac1      	bge.n	80021ae <goDown+0x22>
				}
			}
		}
		break;
 800222a:	bf00      	nop
	}
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20005f48 	.word	0x20005f48
 8002238:	20000188 	.word	0x20000188

0800223c <move>:

void move()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	switch (direction)
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <move+0x44>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d817      	bhi.n	8002278 <move+0x3c>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <move+0x14>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	0800226d 	.word	0x0800226d
 8002254:	08002273 	.word	0x08002273
 8002258:	08002261 	.word	0x08002261
 800225c:	08002267 	.word	0x08002267
	{
		case DOWN:
			goDown();
 8002260:	f7ff ff94 	bl	800218c <goDown>
			break;
 8002264:	e009      	b.n	800227a <move+0x3e>
		case UP:
			goUp();
 8002266:	f7ff ff39 	bl	80020dc <goUp>
			break;
 800226a:	e006      	b.n	800227a <move+0x3e>
		case RIGHT:
			goRight();
 800226c:	f7ff fede 	bl	800202c <goRight>
			break;
 8002270:	e003      	b.n	800227a <move+0x3e>
		case LEFT:
			goLeft();
 8002272:	f7ff fe83 	bl	8001f7c <goLeft>
			break;
 8002276:	e000      	b.n	800227a <move+0x3e>
		default:
			break;
 8002278:	bf00      	nop
	}
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20005f48 	.word	0x20005f48

08002284 <displaySnake>:

void displaySnake()
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af02      	add	r7, sp, #8
	for (int i= 0; i < 1000; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	e04f      	b.n	8002330 <displaySnake+0xac>
	{
		if (i == 0)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11e      	bne.n	80022d4 <displaySnake+0x50>
		{
			lcd_Fill(snake[i].x, snake[i].y, snake[i].x+ 5, snake[i].y+ 5, BLUE);
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <displaySnake+0xbc>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800229e:	b298      	uxth	r0, r3
 80022a0:	4a27      	ldr	r2, [pc, #156]	; (8002340 <displaySnake+0xbc>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	b299      	uxth	r1, r3
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <displaySnake+0xbc>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3305      	adds	r3, #5
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4c21      	ldr	r4, [pc, #132]	; (8002340 <displaySnake+0xbc>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4423      	add	r3, r4
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3305      	adds	r3, #5
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	241f      	movs	r4, #31
 80022cc:	9400      	str	r4, [sp, #0]
 80022ce:	f7fe fc49 	bl	8000b64 <lcd_Fill>
 80022d2:	e02a      	b.n	800232a <displaySnake+0xa6>
		}
		else
		{
			if (snake[i].x || snake[i].y)
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <displaySnake+0xbc>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <displaySnake+0x6a>
 80022e0:	4a17      	ldr	r2, [pc, #92]	; (8002340 <displaySnake+0xbc>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d024      	beq.n	8002338 <displaySnake+0xb4>
				lcd_Fill(snake[i].x, snake[i].y, snake[i].x+ 5, snake[i].y+ 5, BLUE);
 80022ee:	4a14      	ldr	r2, [pc, #80]	; (8002340 <displaySnake+0xbc>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022f6:	b298      	uxth	r0, r3
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <displaySnake+0xbc>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	b299      	uxth	r1, r3
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <displaySnake+0xbc>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800230c:	b29b      	uxth	r3, r3
 800230e:	3305      	adds	r3, #5
 8002310:	b29a      	uxth	r2, r3
 8002312:	4c0b      	ldr	r4, [pc, #44]	; (8002340 <displaySnake+0xbc>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4423      	add	r3, r4
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	b29b      	uxth	r3, r3
 800231e:	3305      	adds	r3, #5
 8002320:	b29b      	uxth	r3, r3
 8002322:	241f      	movs	r4, #31
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	f7fe fc1d 	bl	8000b64 <lcd_Fill>
	for (int i= 0; i < 1000; i++)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3301      	adds	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002336:	dbab      	blt.n	8002290 <displaySnake+0xc>
			else
				break;
		}
	}
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	20000188 	.word	0x20000188

08002344 <runSnake>:

void runSnake()
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	if (button_count[5])
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <runSnake+0x54>)
 800234a:	895b      	ldrh	r3, [r3, #10]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <runSnake+0x12>
	  {
		  goUp();
 8002350:	f7ff fec4 	bl	80020dc <goUp>
 8002354:	e01a      	b.n	800238c <runSnake+0x48>
	  }
	  else
	  {
		  if (button_count[13])
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <runSnake+0x54>)
 8002358:	8b5b      	ldrh	r3, [r3, #26]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <runSnake+0x20>
		  {
			  goDown();
 800235e:	f7ff ff15 	bl	800218c <goDown>
 8002362:	e013      	b.n	800238c <runSnake+0x48>
		  }
		  else
		  {
			  if (button_count[10])
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <runSnake+0x54>)
 8002366:	8a9b      	ldrh	r3, [r3, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <runSnake+0x2e>
			  {
				  goRight();
 800236c:	f7ff fe5e 	bl	800202c <goRight>
 8002370:	e00c      	b.n	800238c <runSnake+0x48>
			  }
			  else
			  {
				  if (button_count[8])
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <runSnake+0x54>)
 8002374:	8a1b      	ldrh	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <runSnake+0x3c>
				  {
					  goLeft();
 800237a:	f7ff fdff 	bl	8001f7c <goLeft>
 800237e:	e005      	b.n	800238c <runSnake+0x48>
				  }
				  else
				  {
					  if (button_count[9])
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <runSnake+0x54>)
 8002382:	8a5b      	ldrh	r3, [r3, #18]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <runSnake+0x48>
					  {
					  }
					  else
						  move();
 8002388:	f7ff ff58 	bl	800223c <move>
				  }
			  }
		  }
	  }
//	  lcd_Clear(WHITE);
	initGame();
 800238c:	f7ff fda6 	bl	8001edc <initGame>
	displaySnake();
 8002390:	f7ff ff78 	bl	8002284 <displaySnake>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200000f8 	.word	0x200000f8

0800239c <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <timer_init+0x10>)
 80023a2:	f002 fd19 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20005fb0 	.word	0x20005fb0

080023b0 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <setTimer2+0x2c>)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <setTimer2+0x2c>)
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <setTimer2+0x30>)
 80023c6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <setTimer2+0x34>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20005f50 	.word	0x20005f50
 80023e0:	20005f4e 	.word	0x20005f4e
 80023e4:	20005f4c 	.word	0x20005f4c

080023e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f8:	d116      	bne.n	8002428 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800240c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002418:	2201      	movs	r2, #1
 800241a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800241e:	881a      	ldrh	r2, [r3, #0]
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002422:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8002424:	f7ff f8ea 	bl	80015fc <led7_Scan>
	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20005f4e 	.word	0x20005f4e
 8002434:	20005f4c 	.word	0x20005f4c
 8002438:	20005f50 	.word	0x20005f50

0800243c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <MX_SPI1_Init+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800244c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002470:	2200      	movs	r2, #0
 8002472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_SPI1_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_SPI1_Init+0x64>)
 8002488:	220a      	movs	r2, #10
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <MX_SPI1_Init+0x64>)
 800248e:	f001 fe67 	bl	8004160 <HAL_SPI_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002498:	f7ff fa42 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20005f54 	.word	0x20005f54
 80024a4:	40013000 	.word	0x40013000

080024a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_SPI_MspInit+0x84>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d12b      	bne.n	8002522 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_SPI_MspInit+0x88>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_SPI_MspInit+0x88>)
 80024d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_SPI_MspInit+0x88>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_SPI_MspInit+0x88>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <HAL_SPI_MspInit+0x88>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_SPI_MspInit+0x88>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002502:	2338      	movs	r3, #56	; 0x38
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002512:	2305      	movs	r3, #5
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <HAL_SPI_MspInit+0x8c>)
 800251e:	f001 f805 	bl	800352c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40013000 	.word	0x40013000
 8002530:	40023800 	.word	0x40023800
 8002534:	40020400 	.word	0x40020400

08002538 <startUI>:
#include "global.h"
#include "main.h"
#include "button.h"
#include "picture.h"

void startUI(){
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b093      	sub	sp, #76	; 0x4c
 800253c:	af04      	add	r7, sp, #16
	char str1[50] = "";
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	222e      	movs	r2, #46	; 0x2e
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f971 	bl	8005830 <memset>

	lcd_Clear(BLACK);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe fad6 	bl	8000b00 <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <startUI+0xdc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b298      	uxth	r0, r3
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <startUI+0xe0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b299      	uxth	r1, r3
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <startUI+0xe4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <startUI+0xe8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4c2d      	ldr	r4, [pc, #180]	; (8002624 <startUI+0xec>)
 800256e:	9400      	str	r4, [sp, #0]
 8002570:	f7fe fcd0 	bl	8000f14 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8002574:	2300      	movs	r3, #0
 8002576:	9302      	str	r3, [sp, #8]
 8002578:	2318      	movs	r3, #24
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	f248 4330 	movw	r3, #33840	; 0x8430
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002586:	4a28      	ldr	r2, [pc, #160]	; (8002628 <startUI+0xf0>)
 8002588:	2137      	movs	r1, #55	; 0x37
 800258a:	203c      	movs	r0, #60	; 0x3c
 800258c:	f7fe ff94 	bl	80014b8 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 8002590:	2300      	movs	r3, #0
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	2318      	movs	r3, #24
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	f248 4330 	movw	r3, #33840	; 0x8430
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025a2:	4a22      	ldr	r2, [pc, #136]	; (800262c <startUI+0xf4>)
 80025a4:	2164      	movs	r1, #100	; 0x64
 80025a6:	2028      	movs	r0, #40	; 0x28
 80025a8:	f7fe ff86 	bl	80014b8 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80025ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	23b4      	movs	r3, #180	; 0xb4
 80025b4:	22b4      	movs	r2, #180	; 0xb4
 80025b6:	2196      	movs	r1, #150	; 0x96
 80025b8:	203c      	movs	r0, #60	; 0x3c
 80025ba:	f7fe fba4 	bl	8000d06 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <startUI+0xf8>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f9b2 	bl	800192c <convert2str>
 80025c8:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 80025ca:	463b      	mov	r3, r7
 80025cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f96a 	bl	80058a8 <strcat>
	lcd_StrCenter(0, 155, str1, WHITE, RED, 24, 1);
 80025d4:	463a      	mov	r2, r7
 80025d6:	2301      	movs	r3, #1
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2318      	movs	r3, #24
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e8:	219b      	movs	r1, #155	; 0x9b
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe ffc8 	bl	8001580 <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 80025f0:	2300      	movs	r3, #0
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2318      	movs	r3, #24
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	f248 4330 	movw	r3, #33840	; 0x8430
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <startUI+0xfc>)
 8002604:	21e6      	movs	r1, #230	; 0xe6
 8002606:	2050      	movs	r0, #80	; 0x50
 8002608:	f7fe ff56 	bl	80014b8 <lcd_ShowStr>
}
 800260c:	bf00      	nop
 800260e:	373c      	adds	r7, #60	; 0x3c
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	20000054 	.word	0x20000054
 8002618:	20000058 	.word	0x20000058
 800261c:	2000005c 	.word	0x2000005c
 8002620:	20000060 	.word	0x20000060
 8002624:	08009294 	.word	0x08009294
 8002628:	0800627c 	.word	0x0800627c
 800262c:	0800628c 	.word	0x0800628c
 8002630:	20000170 	.word	0x20000170
 8002634:	0800629c 	.word	0x0800629c

08002638 <eraseArrow>:

void eraseArrow()
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f240 134b 	movw	r3, #331	; 0x14b
 8002646:	22dd      	movs	r2, #221	; 0xdd
 8002648:	21be      	movs	r1, #190	; 0xbe
 800264a:	20b4      	movs	r0, #180	; 0xb4
 800264c:	f7fe fa8a 	bl	8000b64 <lcd_Fill>
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <drawArrow>:

void drawArrow()
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b083      	sub	sp, #12
 800265c:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 800265e:	f7ff ffeb 	bl	8002638 <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <drawArrow+0x98>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b298      	uxth	r0, r3
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <drawArrow+0x9c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b299      	uxth	r1, r3
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <drawArrow+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <drawArrow+0xa4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800267e:	9400      	str	r4, [sp, #0]
 8002680:	f7fe fabd 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <drawArrow+0xa0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b298      	uxth	r0, r3
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <drawArrow+0xa4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b299      	uxth	r1, r3
 8002690:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <drawArrow+0x98>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29c      	uxth	r4, r3
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <drawArrow+0xa4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <drawArrow+0x9c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ae:	9200      	str	r2, [sp, #0]
 80026b0:	4622      	mov	r2, r4
 80026b2:	f7fe faa4 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <drawArrow+0x98>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b298      	uxth	r0, r3
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <drawArrow+0x9c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b299      	uxth	r1, r3
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <drawArrow+0x98>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29c      	uxth	r4, r3
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <drawArrow+0xa4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <drawArrow+0x9c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	4622      	mov	r2, r4
 80026e4:	f7fe fa8b 	bl	8000bfe <lcd_DrawLine>
}
 80026e8:	bf00      	nop
 80026ea:	3704      	adds	r7, #4
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	20000008 	.word	0x20000008
 80026f4:	20000010 	.word	0x20000010
 80026f8:	20000004 	.word	0x20000004
 80026fc:	2000000c 	.word	0x2000000c

08002700 <arrowInPickMode>:

void arrowInPickMode()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <arrowInPickMode+0x228>)
 8002708:	88db      	ldrh	r3, [r3, #6]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d117      	bne.n	800273e <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 800270e:	4b87      	ldr	r3, [pc, #540]	; (800292c <arrowInPickMode+0x22c>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8002714:	4b86      	ldr	r3, [pc, #536]	; (8002930 <arrowInPickMode+0x230>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d009      	beq.n	8002730 <arrowInPickMode+0x30>
 800271c:	2b05      	cmp	r3, #5
 800271e:	dc11      	bgt.n	8002744 <arrowInPickMode+0x44>
 8002720:	2b03      	cmp	r3, #3
 8002722:	d00e      	beq.n	8002742 <arrowInPickMode+0x42>
 8002724:	2b04      	cmp	r3, #4
 8002726:	d10d      	bne.n	8002744 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 8002728:	4b81      	ldr	r3, [pc, #516]	; (8002930 <arrowInPickMode+0x230>)
 800272a:	2203      	movs	r2, #3
 800272c:	601a      	str	r2, [r3, #0]
			break;
 800272e:	e009      	b.n	8002744 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8002730:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <arrowInPickMode+0x230>)
 8002732:	2204      	movs	r2, #4
 8002734:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 8002736:	4b7f      	ldr	r3, [pc, #508]	; (8002934 <arrowInPickMode+0x234>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
			break;
 800273c:	e002      	b.n	8002744 <arrowInPickMode+0x44>
		}

	}
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <arrowInPickMode+0x44>
			break;
 8002742:	bf00      	nop
	if(button_count[7] == 1)
 8002744:	4b78      	ldr	r3, [pc, #480]	; (8002928 <arrowInPickMode+0x228>)
 8002746:	89db      	ldrh	r3, [r3, #14]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d118      	bne.n	800277e <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 800274c:	4b77      	ldr	r3, [pc, #476]	; (800292c <arrowInPickMode+0x22c>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <arrowInPickMode+0x230>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d013      	beq.n	8002782 <arrowInPickMode+0x82>
 800275a:	2b05      	cmp	r3, #5
 800275c:	dc12      	bgt.n	8002784 <arrowInPickMode+0x84>
 800275e:	2b03      	cmp	r3, #3
 8002760:	d002      	beq.n	8002768 <arrowInPickMode+0x68>
 8002762:	2b04      	cmp	r3, #4
 8002764:	d007      	beq.n	8002776 <arrowInPickMode+0x76>
 8002766:	e00d      	b.n	8002784 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 8002768:	4b71      	ldr	r3, [pc, #452]	; (8002930 <arrowInPickMode+0x230>)
 800276a:	2204      	movs	r2, #4
 800276c:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 800276e:	4b71      	ldr	r3, [pc, #452]	; (8002934 <arrowInPickMode+0x234>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
			break;
 8002774:	e006      	b.n	8002784 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 8002776:	4b6e      	ldr	r3, [pc, #440]	; (8002930 <arrowInPickMode+0x230>)
 8002778:	2205      	movs	r2, #5
 800277a:	601a      	str	r2, [r3, #0]
			break;
 800277c:	e002      	b.n	8002784 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 800277e:	bf00      	nop
 8002780:	e000      	b.n	8002784 <arrowInPickMode+0x84>
			break;
 8002782:	bf00      	nop
	if(flagChange == 1)
 8002784:	4b69      	ldr	r3, [pc, #420]	; (800292c <arrowInPickMode+0x22c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	f040 80ca 	bne.w	8002922 <arrowInPickMode+0x222>
	{
		switch (arrowMode)
 800278e:	4b68      	ldr	r3, [pc, #416]	; (8002930 <arrowInPickMode+0x230>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d079      	beq.n	800288a <arrowInPickMode+0x18a>
 8002796:	2b05      	cmp	r3, #5
 8002798:	f300 80c0 	bgt.w	800291c <arrowInPickMode+0x21c>
 800279c:	2b03      	cmp	r3, #3
 800279e:	d002      	beq.n	80027a6 <arrowInPickMode+0xa6>
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d04f      	beq.n	8002844 <arrowInPickMode+0x144>
 80027a4:	e0ba      	b.n	800291c <arrowInPickMode+0x21c>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 80027a6:	4b64      	ldr	r3, [pc, #400]	; (8002938 <arrowInPickMode+0x238>)
 80027a8:	22d2      	movs	r2, #210	; 0xd2
 80027aa:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 80027ac:	4b63      	ldr	r3, [pc, #396]	; (800293c <arrowInPickMode+0x23c>)
 80027ae:	22be      	movs	r2, #190	; 0xbe
 80027b0:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027ba:	22f0      	movs	r2, #240	; 0xf0
 80027bc:	21b4      	movs	r1, #180	; 0xb4
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe f9d0 	bl	8000b64 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 80027c4:	2300      	movs	r3, #0
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	2318      	movs	r3, #24
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	f248 4330 	movw	r3, #33840	; 0x8430
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <arrowInPickMode+0x240>)
 80027d8:	21c8      	movs	r1, #200	; 0xc8
 80027da:	200a      	movs	r0, #10
 80027dc:	f7fe fe6c 	bl	80014b8 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80027e0:	2300      	movs	r3, #0
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2318      	movs	r3, #24
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	f248 4330 	movw	r3, #33840	; 0x8430
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f2:	4a54      	ldr	r2, [pc, #336]	; (8002944 <arrowInPickMode+0x244>)
 80027f4:	21fa      	movs	r1, #250	; 0xfa
 80027f6:	200a      	movs	r0, #10
 80027f8:	f7fe fe5e 	bl	80014b8 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 80027fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002806:	2282      	movs	r2, #130	; 0x82
 8002808:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800280c:	206e      	movs	r0, #110	; 0x6e
 800280e:	f7fe f9f6 	bl	8000bfe <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8002812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f44f 739b 	mov.w	r3, #310	; 0x136
 800281c:	2278      	movs	r2, #120	; 0x78
 800281e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002822:	206e      	movs	r0, #110	; 0x6e
 8002824:	f7fe f9eb 	bl	8000bfe <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 8002828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002832:	2282      	movs	r2, #130	; 0x82
 8002834:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002838:	2078      	movs	r0, #120	; 0x78
 800283a:	f7fe f9e0 	bl	8000bfe <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 800283e:	f7ff ff0b 	bl	8002658 <drawArrow>
			break;
 8002842:	e06b      	b.n	800291c <arrowInPickMode+0x21c>
		case TIMINGMODE:
			if(flagUpDOwn == 0)
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <arrowInPickMode+0x234>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <arrowInPickMode+0x15a>
			{
				arrowY1 = ARROWNORMALY1;
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <arrowInPickMode+0x238>)
 800284e:	22d2      	movs	r2, #210	; 0xd2
 8002850:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 8002852:	4b3a      	ldr	r3, [pc, #232]	; (800293c <arrowInPickMode+0x23c>)
 8002854:	22be      	movs	r2, #190	; 0xbe
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e006      	b.n	8002868 <arrowInPickMode+0x168>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <arrowInPickMode+0x238>)
 800285c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002860:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <arrowInPickMode+0x23c>)
 8002864:	22f0      	movs	r2, #240	; 0xf0
 8002866:	601a      	str	r2, [r3, #0]
			}
			lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8002868:	2300      	movs	r3, #0
 800286a:	9302      	str	r3, [sp, #8]
 800286c:	2318      	movs	r3, #24
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	f248 4330 	movw	r3, #33840	; 0x8430
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800287a:	4a32      	ldr	r2, [pc, #200]	; (8002944 <arrowInPickMode+0x244>)
 800287c:	21fa      	movs	r1, #250	; 0xfa
 800287e:	200a      	movs	r0, #10
 8002880:	f7fe fe1a 	bl	80014b8 <lcd_ShowStr>
			drawArrow();
 8002884:	f7ff fee8 	bl	8002658 <drawArrow>
			break;
 8002888:	e048      	b.n	800291c <arrowInPickMode+0x21c>
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <arrowInPickMode+0x238>)
 800288c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002890:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <arrowInPickMode+0x23c>)
 8002894:	22f0      	movs	r2, #240	; 0xf0
 8002896:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028a0:	22f0      	movs	r2, #240	; 0xf0
 80028a2:	21b4      	movs	r1, #180	; 0xb4
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f95d 	bl	8000b64 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80028aa:	2300      	movs	r3, #0
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	2318      	movs	r3, #24
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	f248 4330 	movw	r3, #33840	; 0x8430
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <arrowInPickMode+0x244>)
 80028be:	21c8      	movs	r1, #200	; 0xc8
 80028c0:	200a      	movs	r0, #10
 80028c2:	f7fe fdf9 	bl	80014b8 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 80028c6:	2300      	movs	r3, #0
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	2318      	movs	r3, #24
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	f248 4330 	movw	r3, #33840	; 0x8430
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <arrowInPickMode+0x248>)
 80028da:	21fa      	movs	r1, #250	; 0xfa
 80028dc:	200a      	movs	r0, #10
 80028de:	f7fe fdeb 	bl	80014b8 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 80028e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	23be      	movs	r3, #190	; 0xbe
 80028ea:	2282      	movs	r2, #130	; 0x82
 80028ec:	21be      	movs	r1, #190	; 0xbe
 80028ee:	206e      	movs	r0, #110	; 0x6e
 80028f0:	f7fe f985 	bl	8000bfe <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 80028f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	23b4      	movs	r3, #180	; 0xb4
 80028fc:	2278      	movs	r2, #120	; 0x78
 80028fe:	21be      	movs	r1, #190	; 0xbe
 8002900:	206e      	movs	r0, #110	; 0x6e
 8002902:	f7fe f97c 	bl	8000bfe <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 8002906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	23be      	movs	r3, #190	; 0xbe
 800290e:	2282      	movs	r2, #130	; 0x82
 8002910:	21b4      	movs	r1, #180	; 0xb4
 8002912:	2078      	movs	r0, #120	; 0x78
 8002914:	f7fe f973 	bl	8000bfe <lcd_DrawLine>

			// draw arrow
			drawArrow();
 8002918:	f7ff fe9e 	bl	8002658 <drawArrow>
		}
		flagChange = 0;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <arrowInPickMode+0x22c>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
	}
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200000f8 	.word	0x200000f8
 800292c:	20000178 	.word	0x20000178
 8002930:	20000014 	.word	0x20000014
 8002934:	20000174 	.word	0x20000174
 8002938:	2000000c 	.word	0x2000000c
 800293c:	20000010 	.word	0x20000010
 8002940:	080062a4 	.word	0x080062a4
 8002944:	080062b4 	.word	0x080062b4
 8002948:	080062c4 	.word	0x080062c4

0800294c <pickMode>:

void pickMode(uint16_t id){
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b095      	sub	sp, #84	; 0x54
 8002950:	af04      	add	r7, sp, #16
 8002952:	4603      	mov	r3, r0
 8002954:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe f8d2 	bl	8000b00 <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <pickMode+0x140>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b298      	uxth	r0, r3
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <pickMode+0x144>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b299      	uxth	r1, r3
 8002968:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <pickMode+0x148>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <pickMode+0x14c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4c49      	ldr	r4, [pc, #292]	; (8002a9c <pickMode+0x150>)
 8002976:	9400      	str	r4, [sp, #0]
 8002978:	f7fe facc 	bl	8000f14 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 800297c:	2300      	movs	r3, #0
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2318      	movs	r3, #24
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	f248 4330 	movw	r3, #33840	; 0x8430
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298e:	4a44      	ldr	r2, [pc, #272]	; (8002aa0 <pickMode+0x154>)
 8002990:	2137      	movs	r1, #55	; 0x37
 8002992:	203c      	movs	r0, #60	; 0x3c
 8002994:	f7fe fd90 	bl	80014b8 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <pickMode+0x158>)
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029a2:	6018      	str	r0, [r3, #0]
 80029a4:	3304      	adds	r3, #4
 80029a6:	8019      	strh	r1, [r3, #0]
 80029a8:	f107 030e 	add.w	r3, r7, #14
 80029ac:	222c      	movs	r2, #44	; 0x2c
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 ff3d 	bl	8005830 <memset>
	char *str2 = convert2str(id);
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe ffb7 	bl	800192c <convert2str>
 80029be:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 ff6e 	bl	80058a8 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80029cc:	f107 0208 	add.w	r2, r7, #8
 80029d0:	2300      	movs	r3, #0
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2318      	movs	r3, #24
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	f248 4330 	movw	r3, #33840	; 0x8430
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e2:	2164      	movs	r1, #100	; 0x64
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fdcb 	bl	8001580 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 80029ea:	2300      	movs	r3, #0
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	2318      	movs	r3, #24
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	f248 4330 	movw	r3, #33840	; 0x8430
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <pickMode+0x15c>)
 80029fe:	2196      	movs	r1, #150	; 0x96
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe fdbd 	bl	8001580 <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8002a06:	2300      	movs	r3, #0
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	2318      	movs	r3, #24
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <pickMode+0x160>)
 8002a1a:	21c8      	movs	r1, #200	; 0xc8
 8002a1c:	200a      	movs	r0, #10
 8002a1e:	f7fe fd4b 	bl	80014b8 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8002a22:	2300      	movs	r3, #0
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2318      	movs	r3, #24
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f248 4330 	movw	r3, #33840	; 0x8430
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a34:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <pickMode+0x164>)
 8002a36:	21fa      	movs	r1, #250	; 0xfa
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f7fe fd3d 	bl	80014b8 <lcd_ShowStr>

	// Draw the triangle show down
	drawArrow();
 8002a3e:	f7ff fe0b 	bl	8002658 <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8002a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a4c:	2282      	movs	r2, #130	; 0x82
 8002a4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a52:	206e      	movs	r0, #110	; 0x6e
 8002a54:	f7fe f8d3 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8002a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002a62:	2278      	movs	r2, #120	; 0x78
 8002a64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a68:	206e      	movs	r0, #110	; 0x6e
 8002a6a:	f7fe f8c8 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8002a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a78:	2282      	movs	r2, #130	; 0x82
 8002a7a:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002a7e:	2078      	movs	r0, #120	; 0x78
 8002a80:	f7fe f8bd 	bl	8000bfe <lcd_DrawLine>

}
 8002a84:	bf00      	nop
 8002a86:	3744      	adds	r7, #68	; 0x44
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	20000054 	.word	0x20000054
 8002a90:	20000058 	.word	0x20000058
 8002a94:	2000005c 	.word	0x2000005c
 8002a98:	20000060 	.word	0x20000060
 8002a9c:	08009294 	.word	0x08009294
 8002aa0:	0800627c 	.word	0x0800627c
 8002aa4:	080062dc 	.word	0x080062dc
 8002aa8:	080062d4 	.word	0x080062d4
 8002aac:	080062a4 	.word	0x080062a4
 8002ab0:	080062b4 	.word	0x080062b4

08002ab4 <beginStartGame>:

void beginStartGame()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b094      	sub	sp, #80	; 0x50
 8002ab8:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8002aba:	4bab      	ldr	r3, [pc, #684]	; (8002d68 <beginStartGame+0x2b4>)
 8002abc:	8b9b      	ldrh	r3, [r3, #28]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	f040 8094 	bne.w	8002bec <beginStartGame+0x138>
	{
		switch (statusGame) {
 8002ac4:	4ba9      	ldr	r3, [pc, #676]	; (8002d6c <beginStartGame+0x2b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	f200 8091 	bhi.w	8002bf0 <beginStartGame+0x13c>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <beginStartGame+0x20>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002aed 	.word	0x08002aed
 8002ad8:	08002b13 	.word	0x08002b13
 8002adc:	08002b25 	.word	0x08002b25
 8002ae0:	08002b7b 	.word	0x08002b7b
 8002ae4:	08002ba1 	.word	0x08002ba1
 8002ae8:	08002bc7 	.word	0x08002bc7
			case INIT:
				statusGame = STARTMODE;
 8002aec:	4b9f      	ldr	r3, [pc, #636]	; (8002d6c <beginStartGame+0x2b8>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
				ID = 0;
 8002af2:	4b9f      	ldr	r3, [pc, #636]	; (8002d70 <beginStartGame+0x2bc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8002af8:	4b9e      	ldr	r3, [pc, #632]	; (8002d74 <beginStartGame+0x2c0>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8002afe:	4b9e      	ldr	r3, [pc, #632]	; (8002d78 <beginStartGame+0x2c4>)
 8002b00:	2203      	movs	r2, #3
 8002b02:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8002b04:	4b9d      	ldr	r3, [pc, #628]	; (8002d7c <beginStartGame+0x2c8>)
 8002b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b0a:	801a      	strh	r2, [r3, #0]
				startUI();
 8002b0c:	f7ff fd14 	bl	8002538 <startUI>
				break;
 8002b10:	e071      	b.n	8002bf6 <beginStartGame+0x142>
			case STARTMODE:
				statusGame = PICKMODE;
 8002b12:	4b96      	ldr	r3, [pc, #600]	; (8002d6c <beginStartGame+0x2b8>)
 8002b14:	2202      	movs	r2, #2
 8002b16:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8002b18:	4b95      	ldr	r3, [pc, #596]	; (8002d70 <beginStartGame+0x2bc>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff15 	bl	800294c <pickMode>
				break;
 8002b22:	e068      	b.n	8002bf6 <beginStartGame+0x142>
			case PICKMODE:
				statusGame = arrowMode;
 8002b24:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <beginStartGame+0x2c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a90      	ldr	r2, [pc, #576]	; (8002d6c <beginStartGame+0x2b8>)
 8002b2a:	6013      	str	r3, [r2, #0]
				switch (arrowMode)
 8002b2c:	4b92      	ldr	r3, [pc, #584]	; (8002d78 <beginStartGame+0x2c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d018      	beq.n	8002b66 <beginStartGame+0xb2>
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	dc5d      	bgt.n	8002bf4 <beginStartGame+0x140>
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d002      	beq.n	8002b42 <beginStartGame+0x8e>
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d009      	beq.n	8002b54 <beginStartGame+0xa0>
					break;
				case ADVANCEMODE:
					setUpLcdAdvancePlay(ID, TIMING);
					break;
				}
				break;
 8002b40:	e058      	b.n	8002bf4 <beginStartGame+0x140>
					setUpLcdNormalPlay(ID, SCORE);
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <beginStartGame+0x2bc>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	4a8b      	ldr	r2, [pc, #556]	; (8002d74 <beginStartGame+0x2c0>)
 8002b48:	8812      	ldrh	r2, [r2, #0]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ff67 	bl	8001a20 <setUpLcdNormalPlay>
					break;
 8002b52:	e011      	b.n	8002b78 <beginStartGame+0xc4>
					setUpLcdTimingPlay(ID, TIMING);
 8002b54:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <beginStartGame+0x2bc>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	4a88      	ldr	r2, [pc, #544]	; (8002d7c <beginStartGame+0x2c8>)
 8002b5a:	8812      	ldrh	r2, [r2, #0]
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f800 	bl	8001b64 <setUpLcdTimingPlay>
					break;
 8002b64:	e008      	b.n	8002b78 <beginStartGame+0xc4>
					setUpLcdAdvancePlay(ID, TIMING);
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <beginStartGame+0x2bc>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	4a84      	ldr	r2, [pc, #528]	; (8002d7c <beginStartGame+0x2c8>)
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f8d5 	bl	8001d20 <setUpLcdAdvancePlay>
					break;
 8002b76:	bf00      	nop
				break;
 8002b78:	e03c      	b.n	8002bf4 <beginStartGame+0x140>
			case NORMALMODE:
				statusGame = STARTMODE;
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <beginStartGame+0x2b8>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
				ID = 0;
 8002b80:	4b7b      	ldr	r3, [pc, #492]	; (8002d70 <beginStartGame+0x2bc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8002b86:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <beginStartGame+0x2c0>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8002b8c:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <beginStartGame+0x2c4>)
 8002b8e:	2203      	movs	r2, #3
 8002b90:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8002b92:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <beginStartGame+0x2c8>)
 8002b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b98:	801a      	strh	r2, [r3, #0]
				startUI();
 8002b9a:	f7ff fccd 	bl	8002538 <startUI>
				break;
 8002b9e:	e02a      	b.n	8002bf6 <beginStartGame+0x142>
			case TIMINGMODE:
				statusGame = STARTMODE;
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <beginStartGame+0x2b8>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
				ID = 0;
 8002ba6:	4b72      	ldr	r3, [pc, #456]	; (8002d70 <beginStartGame+0x2bc>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8002bac:	4b71      	ldr	r3, [pc, #452]	; (8002d74 <beginStartGame+0x2c0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8002bb2:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <beginStartGame+0x2c4>)
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <beginStartGame+0x2c8>)
 8002bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bbe:	801a      	strh	r2, [r3, #0]
				startUI();
 8002bc0:	f7ff fcba 	bl	8002538 <startUI>
				break;
 8002bc4:	e017      	b.n	8002bf6 <beginStartGame+0x142>
			case ADVANCEMODE:
				statusGame = STARTMODE;
 8002bc6:	4b69      	ldr	r3, [pc, #420]	; (8002d6c <beginStartGame+0x2b8>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
				ID = 0;
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <beginStartGame+0x2bc>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8002bd2:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <beginStartGame+0x2c0>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8002bd8:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <beginStartGame+0x2c4>)
 8002bda:	2203      	movs	r2, #3
 8002bdc:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <beginStartGame+0x2c8>)
 8002be0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be4:	801a      	strh	r2, [r3, #0]
				startUI();
 8002be6:	f7ff fca7 	bl	8002538 <startUI>
			default:
				break;
 8002bea:	e001      	b.n	8002bf0 <beginStartGame+0x13c>
		}
	}
 8002bec:	bf00      	nop
 8002bee:	e002      	b.n	8002bf6 <beginStartGame+0x142>
				break;
 8002bf0:	bf00      	nop
 8002bf2:	e000      	b.n	8002bf6 <beginStartGame+0x142>
				break;
 8002bf4:	bf00      	nop
	if(statusGame == STARTMODE ){
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <beginStartGame+0x2b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	f040 817d 	bne.w	8002efa <beginStartGame+0x446>
		char str1[50] = "";
 8002c00:	2300      	movs	r3, #0
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	222e      	movs	r2, #46	; 0x2e
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fe0f 	bl	8005830 <memset>
		char *str2;
		for(uint16_t i=0; i<14; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002c16:	e16b      	b.n	8002ef0 <beginStartGame+0x43c>
		{
			if(button_count[i] == 1)
 8002c18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c1a:	4a53      	ldr	r2, [pc, #332]	; (8002d68 <beginStartGame+0x2b4>)
 8002c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8162 	bne.w	8002eea <beginStartGame+0x436>
			{
				button_count[i] == 0;
				switch (i)
 8002c26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c28:	2b0d      	cmp	r3, #13
 8002c2a:	f200 813d 	bhi.w	8002ea8 <beginStartGame+0x3f4>
 8002c2e:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <beginStartGame+0x180>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c6d 	.word	0x08002c6d
 8002c38:	08002ca1 	.word	0x08002ca1
 8002c3c:	08002cd5 	.word	0x08002cd5
 8002c40:	08002ee9 	.word	0x08002ee9
 8002c44:	08002d09 	.word	0x08002d09
 8002c48:	08002d39 	.word	0x08002d39
 8002c4c:	08002d81 	.word	0x08002d81
 8002c50:	08002ee9 	.word	0x08002ee9
 8002c54:	08002db1 	.word	0x08002db1
 8002c58:	08002de5 	.word	0x08002de5
 8002c5c:	08002e19 	.word	0x08002e19
 8002c60:	08002ee9 	.word	0x08002ee9
 8002c64:	08002e4d 	.word	0x08002e4d
 8002c68:	08002e7f 	.word	0x08002e7f
				{
					case 0:
						ID = ID*10 + i+1;
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <beginStartGame+0x2bc>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <beginStartGame+0x2bc>)
 8002c86:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <beginStartGame+0x2bc>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fe4d 	bl	800192c <convert2str>
 8002c92:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 fe05 	bl	80058a8 <strcat>
						break;
 8002c9e:	e103      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 1:
						ID = ID*10 + i+1;
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <beginStartGame+0x2bc>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <beginStartGame+0x2bc>)
 8002cba:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <beginStartGame+0x2bc>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fe33 	bl	800192c <convert2str>
 8002cc6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fdeb 	bl	80058a8 <strcat>
						break;
 8002cd2:	e0e9      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 2:
						ID = ID*10 + i+1;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <beginStartGame+0x2bc>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <beginStartGame+0x2bc>)
 8002cee:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <beginStartGame+0x2bc>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe fe19 	bl	800192c <convert2str>
 8002cfa:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fdd1 	bl	80058a8 <strcat>
						break;
 8002d06:	e0cf      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 3:
						continue;
						break;
					case 4:
						ID = ID*10 + i;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <beginStartGame+0x2bc>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d18:	4413      	add	r3, r2
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <beginStartGame+0x2bc>)
 8002d1e:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <beginStartGame+0x2bc>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fe01 	bl	800192c <convert2str>
 8002d2a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fdb9 	bl	80058a8 <strcat>
						break;
 8002d36:	e0b7      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 5:
						ID = ID*10 + i;
 8002d38:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <beginStartGame+0x2bc>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <beginStartGame+0x2bc>)
 8002d4e:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <beginStartGame+0x2bc>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fde9 	bl	800192c <convert2str>
 8002d5a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fda1 	bl	80058a8 <strcat>
						break;
 8002d66:	e09f      	b.n	8002ea8 <beginStartGame+0x3f4>
 8002d68:	200000f8 	.word	0x200000f8
 8002d6c:	2000017c 	.word	0x2000017c
 8002d70:	20000170 	.word	0x20000170
 8002d74:	20000172 	.word	0x20000172
 8002d78:	20000014 	.word	0x20000014
 8002d7c:	20000000 	.word	0x20000000
					case 6:
						ID = ID*10 + i;
 8002d80:	4b6e      	ldr	r3, [pc, #440]	; (8002f3c <beginStartGame+0x488>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d90:	4413      	add	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <beginStartGame+0x488>)
 8002d96:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <beginStartGame+0x488>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fdc5 	bl	800192c <convert2str>
 8002da2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 fd7d 	bl	80058a8 <strcat>
						break;
 8002dae:	e07b      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 7:
						continue;
						break;
					case 8:
						ID = ID*10 + i-1;
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <beginStartGame+0x488>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <beginStartGame+0x488>)
 8002dca:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <beginStartGame+0x488>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fdab 	bl	800192c <convert2str>
 8002dd6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fd63 	bl	80058a8 <strcat>
						break;
 8002de2:	e061      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 9:
						ID = ID*10 + i-1;
 8002de4:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <beginStartGame+0x488>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002df4:	4413      	add	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <beginStartGame+0x488>)
 8002dfe:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002e00:	4b4e      	ldr	r3, [pc, #312]	; (8002f3c <beginStartGame+0x488>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fd91 	bl	800192c <convert2str>
 8002e0a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 fd49 	bl	80058a8 <strcat>
						break;
 8002e16:	e047      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 10:
						ID = ID*10 + i-1;
 8002e18:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <beginStartGame+0x488>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e28:	4413      	add	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <beginStartGame+0x488>)
 8002e32:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <beginStartGame+0x488>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fd77 	bl	800192c <convert2str>
 8002e3e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fd2f 	bl	80058a8 <strcat>
						break;
 8002e4a:	e02d      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <beginStartGame+0x48c>)
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						ID = ID/10;
 8002e54:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <beginStartGame+0x488>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	4a3a      	ldr	r2, [pc, #232]	; (8002f44 <beginStartGame+0x490>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <beginStartGame+0x488>)
 8002e64:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <beginStartGame+0x488>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fd5e 	bl	800192c <convert2str>
 8002e70:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fd16 	bl	80058a8 <strcat>
						break;
 8002e7c:	e014      	b.n	8002ea8 <beginStartGame+0x3f4>
					case 13:
						ID = ID*10;
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <beginStartGame+0x488>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <beginStartGame+0x488>)
 8002e8e:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002e90:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <beginStartGame+0x488>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fd49 	bl	800192c <convert2str>
 8002e9a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 fd01 	bl	80058a8 <strcat>
						break;
 8002ea6:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	23b4      	movs	r3, #180	; 0xb4
 8002eae:	22b4      	movs	r2, #180	; 0xb4
 8002eb0:	2196      	movs	r1, #150	; 0x96
 8002eb2:	203c      	movs	r0, #60	; 0x3c
 8002eb4:	f7fd fe56 	bl	8000b64 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8002eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	23b4      	movs	r3, #180	; 0xb4
 8002ec0:	22b4      	movs	r2, #180	; 0xb4
 8002ec2:	2196      	movs	r1, #150	; 0x96
 8002ec4:	203c      	movs	r0, #60	; 0x3c
 8002ec6:	f7fd ff1e 	bl	8000d06 <lcd_DrawRectangle>
				lcd_StrCenter(0, 155, str1, WHITE, RED, 24, 1);
 8002eca:	1d3a      	adds	r2, r7, #4
 8002ecc:	2301      	movs	r3, #1
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	2318      	movs	r3, #24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ede:	219b      	movs	r1, #155	; 0x9b
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fe fb4d 	bl	8001580 <lcd_StrCenter>
 8002ee6:	e000      	b.n	8002eea <beginStartGame+0x436>
						continue;
 8002ee8:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 8002eea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002eec:	3301      	adds	r3, #1
 8002eee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002ef0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002ef2:	2b0d      	cmp	r3, #13
 8002ef4:	f67f ae90 	bls.w	8002c18 <beginStartGame+0x164>
			TIMING = NOTIMING;
			startUI();
			arrowMode = NORMALMODE;
		}
	}
}
 8002ef8:	e01b      	b.n	8002f32 <beginStartGame+0x47e>
		if(statusGame == PICKMODE)
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <beginStartGame+0x494>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d101      	bne.n	8002f06 <beginStartGame+0x452>
			arrowInPickMode();
 8002f02:	f7ff fbfd 	bl	8002700 <arrowInPickMode>
		if(button_count[12] == 1)
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <beginStartGame+0x498>)
 8002f08:	8b1b      	ldrh	r3, [r3, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d111      	bne.n	8002f32 <beginStartGame+0x47e>
			statusGame = STARTMODE;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <beginStartGame+0x494>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
			ID = 0;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <beginStartGame+0x488>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	801a      	strh	r2, [r3, #0]
			SCORE = 0;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <beginStartGame+0x49c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]
			TIMING = NOTIMING;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <beginStartGame+0x4a0>)
 8002f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f26:	801a      	strh	r2, [r3, #0]
			startUI();
 8002f28:	f7ff fb06 	bl	8002538 <startUI>
			arrowMode = NORMALMODE;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <beginStartGame+0x4a4>)
 8002f2e:	2203      	movs	r2, #3
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3740      	adds	r7, #64	; 0x40
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000170 	.word	0x20000170
 8002f40:	08006310 	.word	0x08006310
 8002f44:	cccccccd 	.word	0xcccccccd
 8002f48:	2000017c 	.word	0x2000017c
 8002f4c:	200000f8 	.word	0x200000f8
 8002f50:	20000172 	.word	0x20000172
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000014 	.word	0x20000014

08002f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_MspInit+0x4c>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_MspInit+0x4c>)
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_MspInit+0x4c>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_MspInit+0x4c>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <HAL_MspInit+0x4c>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_MspInit+0x4c>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <NMI_Handler+0x4>

08002fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <HardFault_Handler+0x4>

08002fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <MemManage_Handler+0x4>

08002fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fc2:	e7fe      	b.n	8002fc2 <BusFault_Handler+0x4>

08002fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <UsageFault_Handler+0x4>

08002fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff8:	f000 f942 	bl	8003280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <TIM2_IRQHandler+0x10>)
 8003006:	f001 ff57 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20005fb0 	.word	0x20005fb0

08003014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <_sbrk+0x5c>)
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <_sbrk+0x60>)
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <_sbrk+0x64>)
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <_sbrk+0x68>)
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <_sbrk+0x64>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003044:	f002 fbca 	bl	80057dc <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	220c      	movs	r2, #12
 800304c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e009      	b.n	8003068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <_sbrk+0x64>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <_sbrk+0x64>)
 8003064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20020000 	.word	0x20020000
 8003074:	00000400 	.word	0x00000400
 8003078:	20005fac 	.word	0x20005fac
 800307c:	20006010 	.word	0x20006010

08003080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <SystemInit+0x20>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <SystemInit+0x20>)
 800308c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b8:	463b      	mov	r3, r7
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <MX_TIM2_Init+0x94>)
 80030c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <MX_TIM2_Init+0x94>)
 80030ca:	f240 3247 	movw	r2, #839	; 0x347
 80030ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <MX_TIM2_Init+0x94>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <MX_TIM2_Init+0x94>)
 80030d8:	2263      	movs	r2, #99	; 0x63
 80030da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <MX_TIM2_Init+0x94>)
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_TIM2_Init+0x94>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030e8:	4813      	ldr	r0, [pc, #76]	; (8003138 <MX_TIM2_Init+0x94>)
 80030ea:	f001 fe25 	bl	8004d38 <HAL_TIM_Base_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80030f4:	f7fe fc14 	bl	8001920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	4619      	mov	r1, r3
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <MX_TIM2_Init+0x94>)
 8003106:	f001 ffdf 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003110:	f7fe fc06 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800311c:	463b      	mov	r3, r7
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_TIM2_Init+0x94>)
 8003122:	f002 f9fb 	bl	800551c <HAL_TIMEx_MasterConfigSynchronization>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800312c:	f7fe fbf8 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20005fb0 	.word	0x20005fb0

0800313c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d115      	bne.n	800317a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_TIM_Base_MspInit+0x48>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <HAL_TIM_Base_MspInit+0x48>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_TIM_Base_MspInit+0x48>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	201c      	movs	r0, #28
 8003170:	f000 f9a5 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003174:	201c      	movs	r0, #28
 8003176:	f000 f9be 	bl	80034f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800318c:	480d      	ldr	r0, [pc, #52]	; (80031c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800318e:	490e      	ldr	r1, [pc, #56]	; (80031c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003190:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031a4:	4c0b      	ldr	r4, [pc, #44]	; (80031d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031b2:	f7ff ff65 	bl	8003080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b6:	f002 fb17 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ba:	f7fe faab 	bl	8001714 <main>
  bx  lr    
 80031be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80031cc:	08009f18 	.word	0x08009f18
  ldr r2, =_sbss
 80031d0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80031d4:	2000600c 	.word	0x2000600c

080031d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d8:	e7fe      	b.n	80031d8 <ADC_IRQHandler>
	...

080031dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_Init+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <HAL_Init+0x40>)
 80031e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_Init+0x40>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_Init+0x40>)
 80031f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_Init+0x40>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003204:	2003      	movs	r0, #3
 8003206:	f000 f94f 	bl	80034a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800320a:	200f      	movs	r0, #15
 800320c:	f000 f808 	bl	8003220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003210:	f7ff fea4 	bl	8002f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00

08003220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_InitTick+0x54>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_InitTick+0x58>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003236:	fbb3 f3f1 	udiv	r3, r3, r1
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f967 	bl	8003512 <HAL_SYSTICK_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00e      	b.n	800326c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	d80a      	bhi.n	800326a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003254:	2200      	movs	r2, #0
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	f000 f92f 	bl	80034be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003260:	4a06      	ldr	r2, [pc, #24]	; (800327c <HAL_InitTick+0x5c>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	2000006c 	.word	0x2000006c
 8003278:	20000074 	.word	0x20000074
 800327c:	20000070 	.word	0x20000070

08003280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x20>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_IncTick+0x24>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4413      	add	r3, r2
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_IncTick+0x24>)
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000074 	.word	0x20000074
 80032a4:	20005ff8 	.word	0x20005ff8

080032a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return uwTick;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_GetTick+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20005ff8 	.word	0x20005ff8

080032c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c8:	f7ff ffee 	bl	80032a8 <HAL_GetTick>
 80032cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d005      	beq.n	80032e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_Delay+0x44>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032e6:	bf00      	nop
 80032e8:	f7ff ffde 	bl	80032a8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d8f7      	bhi.n	80032e8 <HAL_Delay+0x28>
  {
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000074 	.word	0x20000074

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4907      	ldr	r1, [pc, #28]	; (80033a4 <__NVIC_EnableIRQ+0x38>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000e100 	.word	0xe000e100

080033a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	db0a      	blt.n	80033d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	490c      	ldr	r1, [pc, #48]	; (80033f4 <__NVIC_SetPriority+0x4c>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	440b      	add	r3, r1
 80033cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d0:	e00a      	b.n	80033e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <__NVIC_SetPriority+0x50>)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3b04      	subs	r3, #4
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	761a      	strb	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf28      	it	cs
 800341a:	2304      	movcs	r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3304      	adds	r3, #4
 8003422:	2b06      	cmp	r3, #6
 8003424:	d902      	bls.n	800342c <NVIC_EncodePriority+0x30>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3b03      	subs	r3, #3
 800342a:	e000      	b.n	800342e <NVIC_EncodePriority+0x32>
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	401a      	ands	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43d9      	mvns	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	4313      	orrs	r3, r2
         );
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003474:	d301      	bcc.n	800347a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003476:	2301      	movs	r3, #1
 8003478:	e00f      	b.n	800349a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <SysTick_Config+0x40>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003482:	210f      	movs	r1, #15
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f7ff ff8e 	bl	80033a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <SysTick_Config+0x40>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <SysTick_Config+0x40>)
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff29 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff3e 	bl	8003350 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff8e 	bl	80033fc <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5d 	bl	80033a8 <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff31 	bl	800336c <__NVIC_EnableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffa2 	bl	8003464 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e16b      	b.n	8003820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 815a 	bne.w	800381a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357a:	2b02      	cmp	r3, #2
 800357c:	d130      	bne.n	80035e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d017      	beq.n	800361c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80b4 	beq.w	800381a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b60      	ldr	r3, [pc, #384]	; (8003838 <HAL_GPIO_Init+0x30c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a5f      	ldr	r2, [pc, #380]	; (8003838 <HAL_GPIO_Init+0x30c>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b5d      	ldr	r3, [pc, #372]	; (8003838 <HAL_GPIO_Init+0x30c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <HAL_GPIO_Init+0x310>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_GPIO_Init+0x314>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <HAL_GPIO_Init+0x226>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a51      	ldr	r2, [pc, #324]	; (8003844 <HAL_GPIO_Init+0x318>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d025      	beq.n	800374e <HAL_GPIO_Init+0x222>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a50      	ldr	r2, [pc, #320]	; (8003848 <HAL_GPIO_Init+0x31c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <HAL_GPIO_Init+0x21e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4f      	ldr	r2, [pc, #316]	; (800384c <HAL_GPIO_Init+0x320>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x21a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <HAL_GPIO_Init+0x324>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x216>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4d      	ldr	r2, [pc, #308]	; (8003854 <HAL_GPIO_Init+0x328>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x212>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <HAL_GPIO_Init+0x32c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x20e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4b      	ldr	r2, [pc, #300]	; (800385c <HAL_GPIO_Init+0x330>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x20a>
 8003732:	2307      	movs	r3, #7
 8003734:	e00e      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003736:	2308      	movs	r3, #8
 8003738:	e00c      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800373a:	2306      	movs	r3, #6
 800373c:	e00a      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800373e:	2305      	movs	r3, #5
 8003740:	e008      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003742:	2304      	movs	r3, #4
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_Init+0x228>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_Init+0x228>
 8003752:	2300      	movs	r3, #0
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4093      	lsls	r3, r2
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003764:	4935      	ldr	r1, [pc, #212]	; (800383c <HAL_GPIO_Init+0x310>)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_GPIO_Init+0x334>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <HAL_GPIO_Init+0x334>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800379c:	4b30      	ldr	r3, [pc, #192]	; (8003860 <HAL_GPIO_Init+0x334>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c0:	4a27      	ldr	r2, [pc, #156]	; (8003860 <HAL_GPIO_Init+0x334>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <HAL_GPIO_Init+0x334>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_GPIO_Init+0x334>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_GPIO_Init+0x334>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003814:	4a12      	ldr	r2, [pc, #72]	; (8003860 <HAL_GPIO_Init+0x334>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	f67f ae90 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40013800 	.word	0x40013800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020400 	.word	0x40020400
 8003848:	40020800 	.word	0x40020800
 800384c:	40020c00 	.word	0x40020c00
 8003850:	40021000 	.word	0x40021000
 8003854:	40021400 	.word	0x40021400
 8003858:	40021800 	.word	0x40021800
 800385c:	40021c00 	.word	0x40021c00
 8003860:	40013c00 	.word	0x40013c00

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e267      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d075      	beq.n	80039a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038b6:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d00c      	beq.n	80038dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b85      	ldr	r3, [pc, #532]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d112      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b82      	ldr	r3, [pc, #520]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038da:	d10b      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	4b7e      	ldr	r3, [pc, #504]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05b      	beq.n	80039a0 <HAL_RCC_OscConfig+0x108>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d157      	bne.n	80039a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e242      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x74>
 80038fe:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xb0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x98>
 8003916:	4b70      	ldr	r3, [pc, #448]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6f      	ldr	r2, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b6d      	ldr	r3, [pc, #436]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6c      	ldr	r2, [pc, #432]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xb0>
 8003930:	4b69      	ldr	r3, [pc, #420]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a68      	ldr	r2, [pc, #416]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b66      	ldr	r3, [pc, #408]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a65      	ldr	r2, [pc, #404]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7ff fcaa 	bl	80032a8 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7ff fca6 	bl	80032a8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e207      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b5b      	ldr	r3, [pc, #364]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xc0>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7ff fc96 	bl	80032a8 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7ff fc92 	bl	80032a8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1f3      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0xe8>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ae:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d11c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b44      	ldr	r3, [pc, #272]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d116      	bne.n	8003a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x152>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1c7      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4937      	ldr	r1, [pc, #220]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	e03a      	b.n	8003a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a08:	4b34      	ldr	r3, [pc, #208]	; (8003adc <HAL_RCC_OscConfig+0x244>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7ff fc4b 	bl	80032a8 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a16:	f7ff fc47 	bl	80032a8 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e1a8      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4925      	ldr	r1, [pc, #148]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]
 8003a48:	e015      	b.n	8003a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4a:	4b24      	ldr	r3, [pc, #144]	; (8003adc <HAL_RCC_OscConfig+0x244>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7ff fc2a 	bl	80032a8 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a58:	f7ff fc26 	bl	80032a8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e187      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d036      	beq.n	8003af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_RCC_OscConfig+0x248>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7ff fc0a 	bl	80032a8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a98:	f7ff fc06 	bl	80032a8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e167      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x200>
 8003ab6:	e01b      	b.n	8003af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_OscConfig+0x248>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7ff fbf3 	bl	80032a8 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	e00e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7ff fbef 	bl	80032a8 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d907      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e150      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	42470000 	.word	0x42470000
 8003ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ea      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8097 	beq.w	8003c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b7d      	ldr	r3, [pc, #500]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	4a7c      	ldr	r2, [pc, #496]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1e:	4b7a      	ldr	r3, [pc, #488]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b77      	ldr	r3, [pc, #476]	; (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d118      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3a:	4b74      	ldr	r3, [pc, #464]	; (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a73      	ldr	r2, [pc, #460]	; (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7ff fbaf 	bl	80032a8 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7ff fbab 	bl	80032a8 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e10c      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x2ea>
 8003b74:	4b64      	ldr	r3, [pc, #400]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a63      	ldr	r2, [pc, #396]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	e01c      	b.n	8003bbc <HAL_RCC_OscConfig+0x324>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x30c>
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4a5e      	ldr	r2, [pc, #376]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6713      	str	r3, [r2, #112]	; 0x70
 8003b96:	4b5c      	ldr	r3, [pc, #368]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	4a5b      	ldr	r2, [pc, #364]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0x324>
 8003ba4:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	4b55      	ldr	r3, [pc, #340]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a54      	ldr	r2, [pc, #336]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 0304 	bic.w	r3, r3, #4
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7ff fb70 	bl	80032a8 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bcc:	f7ff fb6c 	bl	80032a8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e0cb      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be2:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ee      	beq.n	8003bcc <HAL_RCC_OscConfig+0x334>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf0:	f7ff fb5a 	bl	80032a8 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7ff fb56 	bl	80032a8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0b5      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ee      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c20:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a1 	beq.w	8003d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d05c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d141      	bne.n	8003cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7ff fb2a 	bl	80032a8 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7ff fb26 	bl	80032a8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e087      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	491b      	ldr	r1, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7ff faff 	bl	80032a8 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7ff fafb 	bl	80032a8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e05c      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x416>
 8003ccc:	e054      	b.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7ff fae8 	bl	80032a8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7ff fae4 	bl	80032a8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e045      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x444>
 8003cfa:	e03d      	b.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e038      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x4ec>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d028      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d121      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0cc      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b68      	ldr	r3, [pc, #416]	; (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d90c      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0b8      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ddc:	4b59      	ldr	r3, [pc, #356]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a58      	ldr	r2, [pc, #352]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df4:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b50      	ldr	r3, [pc, #320]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	494d      	ldr	r1, [pc, #308]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d044      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d119      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e07f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b3f      	ldr	r3, [pc, #252]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e56:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e067      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e66:	4b37      	ldr	r3, [pc, #220]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4934      	ldr	r1, [pc, #208]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e78:	f7ff fa16 	bl	80032a8 <HAL_GetTick>
 8003e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7ff fa12 	bl	80032a8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e04f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 020c 	and.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d1eb      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d20c      	bcs.n	8003ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e032      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4916      	ldr	r1, [pc, #88]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	490e      	ldr	r1, [pc, #56]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f0e:	f000 f821 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	490a      	ldr	r1, [pc, #40]	; (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f976 	bl	8003220 <HAL_InitTick>

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023c00 	.word	0x40023c00
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08009ec4 	.word	0x08009ec4
 8003f4c:	2000006c 	.word	0x2000006c
 8003f50:	20000070 	.word	0x20000070

08003f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b094      	sub	sp, #80	; 0x50
 8003f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f60:	2300      	movs	r3, #0
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f64:	2300      	movs	r3, #0
 8003f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f6c:	4b79      	ldr	r3, [pc, #484]	; (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d00d      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x40>
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	f200 80e1 	bhi.w	8004140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x34>
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d003      	beq.n	8003f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f86:	e0db      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b73      	ldr	r3, [pc, #460]	; (8004158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f8c:	e0db      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8e:	4b73      	ldr	r3, [pc, #460]	; (800415c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f92:	e0d8      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d063      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003faa:	4b6a      	ldr	r3, [pc, #424]	; (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	099b      	lsrs	r3, r3, #6
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	462b      	mov	r3, r5
 8003fca:	f04f 0000 	mov.w	r0, #0
 8003fce:	f04f 0100 	mov.w	r1, #0
 8003fd2:	0159      	lsls	r1, r3, #5
 8003fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd8:	0150      	lsls	r0, r2, #5
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4621      	mov	r1, r4
 8003fe0:	1a51      	subs	r1, r2, r1
 8003fe2:	6139      	str	r1, [r7, #16]
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	018b      	lsls	r3, r1, #6
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004002:	4651      	mov	r1, sl
 8004004:	018a      	lsls	r2, r1, #6
 8004006:	4651      	mov	r1, sl
 8004008:	ebb2 0801 	subs.w	r8, r2, r1
 800400c:	4659      	mov	r1, fp
 800400e:	eb63 0901 	sbc.w	r9, r3, r1
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800401e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004026:	4690      	mov	r8, r2
 8004028:	4699      	mov	r9, r3
 800402a:	4623      	mov	r3, r4
 800402c:	eb18 0303 	adds.w	r3, r8, r3
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	462b      	mov	r3, r5
 8004034:	eb49 0303 	adc.w	r3, r9, r3
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004046:	4629      	mov	r1, r5
 8004048:	024b      	lsls	r3, r1, #9
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004050:	4621      	mov	r1, r4
 8004052:	024a      	lsls	r2, r1, #9
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405a:	2200      	movs	r2, #0
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
 800405e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004064:	f7fc f90c 	bl	8000280 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4613      	mov	r3, r2
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004070:	e058      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	4618      	mov	r0, r3
 800407c:	4611      	mov	r1, r2
 800407e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	2300      	movs	r3, #0
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
 8004088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	f04f 0000 	mov.w	r0, #0
 8004094:	f04f 0100 	mov.w	r1, #0
 8004098:	0159      	lsls	r1, r3, #5
 800409a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409e:	0150      	lsls	r0, r2, #5
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4641      	mov	r1, r8
 80040a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040aa:	4649      	mov	r1, r9
 80040ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040c4:	ebb2 040a 	subs.w	r4, r2, sl
 80040c8:	eb63 050b 	sbc.w	r5, r3, fp
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	00eb      	lsls	r3, r5, #3
 80040d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	4643      	mov	r3, r8
 80040e2:	18e3      	adds	r3, r4, r3
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	464b      	mov	r3, r9
 80040e8:	eb45 0303 	adc.w	r3, r5, r3
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fa:	4629      	mov	r1, r5
 80040fc:	028b      	lsls	r3, r1, #10
 80040fe:	4621      	mov	r1, r4
 8004100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004104:	4621      	mov	r1, r4
 8004106:	028a      	lsls	r2, r1, #10
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410e:	2200      	movs	r2, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	61fa      	str	r2, [r7, #28]
 8004114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004118:	f7fc f8b2 	bl	8000280 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800413e:	e002      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetSysClockFreq+0x204>)
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004148:	4618      	mov	r0, r3
 800414a:	3750      	adds	r7, #80	; 0x50
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400
 800415c:	007a1200 	.word	0x007a1200

08004160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07b      	b.n	800426a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004182:	d009      	beq.n	8004198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	61da      	str	r2, [r3, #28]
 800418a:	e005      	b.n	8004198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe f978 	bl	80024a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f003 0104 	and.w	r1, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	f003 0210 	and.w	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b088      	sub	sp, #32
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_SPI_Transmit+0x22>
 8004290:	2302      	movs	r3, #2
 8004292:	e126      	b.n	80044e2 <HAL_SPI_Transmit+0x270>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429c:	f7ff f804 	bl	80032a8 <HAL_GetTick>
 80042a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b6:	e10b      	b.n	80044d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x52>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c8:	e102      	b.n	80044d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2203      	movs	r2, #3
 80042ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004310:	d10f      	bne.n	8004332 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d007      	beq.n	8004350 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004358:	d14b      	bne.n	80043f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0xf6>
 8004362:	8afb      	ldrh	r3, [r7, #22]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d13e      	bne.n	80043e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800438c:	e02b      	b.n	80043e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d112      	bne.n	80043c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	1c9a      	adds	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	86da      	strh	r2, [r3, #54]	; 0x36
 80043c0:	e011      	b.n	80043e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c2:	f7fe ff71 	bl	80032a8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d803      	bhi.n	80043da <HAL_SPI_Transmit+0x168>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d102      	bne.n	80043e0 <HAL_SPI_Transmit+0x16e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e4:	e074      	b.n	80044d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ce      	bne.n	800438e <HAL_SPI_Transmit+0x11c>
 80043f0:	e04c      	b.n	800448c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Transmit+0x18e>
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d140      	bne.n	8004482 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004426:	e02c      	b.n	8004482 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d113      	bne.n	800445e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	86da      	strh	r2, [r3, #54]	; 0x36
 800445c:	e011      	b.n	8004482 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800445e:	f7fe ff23 	bl	80032a8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d803      	bhi.n	8004476 <HAL_SPI_Transmit+0x204>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d102      	bne.n	800447c <HAL_SPI_Transmit+0x20a>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004480:	e026      	b.n	80044d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1cd      	bne.n	8004428 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	6839      	ldr	r1, [r7, #0]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fbcb 	bl	8004c2c <SPI_EndRxTxTransaction>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e000      	b.n	80044d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80044ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b088      	sub	sp, #32
 80044ee:	af02      	add	r7, sp, #8
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004506:	d112      	bne.n	800452e <HAL_SPI_Receive+0x44>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2204      	movs	r2, #4
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f8f1 	bl	800470c <HAL_SPI_TransmitReceive>
 800452a:	4603      	mov	r3, r0
 800452c:	e0ea      	b.n	8004704 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_SPI_Receive+0x52>
 8004538:	2302      	movs	r3, #2
 800453a:	e0e3      	b.n	8004704 <HAL_SPI_Receive+0x21a>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004544:	f7fe feb0 	bl	80032a8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d002      	beq.n	800455c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004556:	2302      	movs	r3, #2
 8004558:	75fb      	strb	r3, [r7, #23]
    goto error;
 800455a:	e0ca      	b.n	80046f2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_SPI_Receive+0x7e>
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800456c:	e0c1      	b.n	80046f2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2204      	movs	r2, #4
 8004572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b4:	d10f      	bne.n	80045d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d007      	beq.n	80045f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d162      	bne.n	80046c2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045fc:	e02e      	b.n	800465c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d115      	bne.n	8004638 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f103 020c 	add.w	r2, r3, #12
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004636:	e011      	b.n	800465c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004638:	f7fe fe36 	bl	80032a8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d803      	bhi.n	8004650 <HAL_SPI_Receive+0x166>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d102      	bne.n	8004656 <HAL_SPI_Receive+0x16c>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	75fb      	strb	r3, [r7, #23]
          goto error;
 800465a:	e04a      	b.n	80046f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1cb      	bne.n	80045fe <HAL_SPI_Receive+0x114>
 8004666:	e031      	b.n	80046cc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d113      	bne.n	800469e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	b292      	uxth	r2, r2
 8004682:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800469c:	e011      	b.n	80046c2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800469e:	f7fe fe03 	bl	80032a8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d803      	bhi.n	80046b6 <HAL_SPI_Receive+0x1cc>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d102      	bne.n	80046bc <HAL_SPI_Receive+0x1d2>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046c0:	e017      	b.n	80046f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1cd      	bne.n	8004668 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa45 	bl	8004b60 <SPI_EndRxTransaction>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
 80046ee:	e000      	b.n	80046f2 <HAL_SPI_Receive+0x208>
  }

error :
 80046f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800471a:	2301      	movs	r3, #1
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x26>
 800472e:	2302      	movs	r3, #2
 8004730:	e18a      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x33c>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800473a:	f7fe fdb5 	bl	80032a8 <HAL_GetTick>
 800473e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004758:	2b01      	cmp	r3, #1
 800475a:	d00f      	beq.n	800477c <HAL_SPI_TransmitReceive+0x70>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d107      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x68>
 800476c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004770:	2b04      	cmp	r3, #4
 8004772:	d003      	beq.n	800477c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004774:	2302      	movs	r3, #2
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800477a:	e15b      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_SPI_TransmitReceive+0x82>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_SPI_TransmitReceive+0x82>
 8004788:	887b      	ldrh	r3, [r7, #2]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004794:	e14e      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d003      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2205      	movs	r2, #5
 80047a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	887a      	ldrh	r2, [r7, #2]
 80047ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	887a      	ldrh	r2, [r7, #2]
 80047d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d007      	beq.n	80047fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004806:	d178      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x10a>
 8004810:	8b7b      	ldrh	r3, [r7, #26]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d166      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	881a      	ldrh	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	1c9a      	adds	r2, r3, #2
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483a:	e053      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d11b      	bne.n	8004882 <HAL_SPI_TransmitReceive+0x176>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d016      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x176>
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d113      	bne.n	8004882 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d119      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x1b8>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	b292      	uxth	r2, r2
 80048a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	1c9a      	adds	r2, r3, #2
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c0:	2301      	movs	r3, #1
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048c4:	f7fe fcf0 	bl	80032a8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d807      	bhi.n	80048e4 <HAL_SPI_TransmitReceive+0x1d8>
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d003      	beq.n	80048e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048e2:	e0a7      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1a6      	bne.n	800483c <HAL_SPI_TransmitReceive+0x130>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1a1      	bne.n	800483c <HAL_SPI_TransmitReceive+0x130>
 80048f8:	e07c      	b.n	80049f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x1fc>
 8004902:	8b7b      	ldrh	r3, [r7, #26]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d16b      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492e:	e057      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d11c      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x26c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x26c>
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d114      	bne.n	8004978 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b01      	cmp	r3, #1
 8004984:	d119      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x2ae>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d014      	beq.n	80049ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b6:	2301      	movs	r3, #1
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049ba:	f7fe fc75 	bl	80032a8 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d803      	bhi.n	80049d2 <HAL_SPI_TransmitReceive+0x2c6>
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d102      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x2cc>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049de:	e029      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1a2      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x224>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d19d      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f917 	bl	8004c2c <SPI_EndRxTxTransaction>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a10:	e010      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	e000      	b.n	8004a34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3730      	adds	r7, #48	; 0x30
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a60:	f7fe fc22 	bl	80032a8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a70:	f7fe fc1a 	bl	80032a8 <HAL_GetTick>
 8004a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a76:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	015b      	lsls	r3, r3, #5
 8004a7c:	0d1b      	lsrs	r3, r3, #20
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a86:	e054      	b.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d050      	beq.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a90:	f7fe fc0a 	bl	80032a8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d902      	bls.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d13d      	bne.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004abe:	d111      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d004      	beq.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad2:	d107      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aec:	d10f      	bne.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e017      	b.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d19b      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	2000006c 	.word	0x2000006c

08004b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b74:	d111      	bne.n	8004b9a <SPI_EndRxTransaction+0x3a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d004      	beq.n	8004b8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d107      	bne.n	8004b9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba2:	d12a      	bne.n	8004bfa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bac:	d012      	beq.n	8004bd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff49 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d02d      	beq.n	8004c20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e026      	b.n	8004c22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2101      	movs	r1, #1
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ff36 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01a      	beq.n	8004c20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e013      	b.n	8004c22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2101      	movs	r1, #1
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff ff23 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e000      	b.n	8004c22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <SPI_EndRxTxTransaction+0x7c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <SPI_EndRxTxTransaction+0x80>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0d5b      	lsrs	r3, r3, #21
 8004c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c56:	d112      	bne.n	8004c7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fef4 	bl	8004a50 <SPI_WaitFlagStateUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e00f      	b.n	8004c9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d0f2      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x52>
 8004c98:	e000      	b.n	8004c9c <SPI_EndRxTxTransaction+0x70>
        break;
 8004c9a:	bf00      	nop
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2000006c 	.word	0x2000006c
 8004cac:	165e9f81 	.word	0x165e9f81

08004cb0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e034      	b.n	8004d30 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7fb fd90 	bl	8000800 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f000 fca6 	bl	800563c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	f000 fcf0 	bl	80056e0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6858      	ldr	r0, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	f000 fd25 	bl	800575c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	6892      	ldr	r2, [r2, #8]
 8004d1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6892      	ldr	r2, [r2, #8]
 8004d26:	f041 0101 	orr.w	r1, r1, #1
 8004d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e041      	b.n	8004dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fe f9ec 	bl	800313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f000 fa96 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d001      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e04e      	b.n	8004e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d01d      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_TIM_Base_Start_IT+0xd4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x80>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d111      	bne.n	8004e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b06      	cmp	r3, #6
 8004e68:	d010      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	e007      	b.n	8004e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40001800 	.word	0x40001800

08004eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0202 	mvn.w	r2, #2
 8004ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9b5 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f9a7 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f9b8 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0204 	mvn.w	r2, #4
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f98b 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f97d 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f98e 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0208 	mvn.w	r2, #8
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2204      	movs	r2, #4
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f961 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f953 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f964 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0210 	mvn.w	r2, #16
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2208      	movs	r2, #8
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f937 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f929 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f93a 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10e      	bne.n	800503c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d107      	bne.n	800503c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0201 	mvn.w	r2, #1
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd f9d6 	bl	80023e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005054:	2b80      	cmp	r3, #128	; 0x80
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fae0 	bl	8005628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f8ff 	bl	8005292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0220 	mvn.w	r2, #32
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 faaa 	bl	8005614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_ConfigClockSource+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0b4      	b.n	800524e <HAL_TIM_ConfigClockSource+0x186>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d03e      	beq.n	800519c <HAL_TIM_ConfigClockSource+0xd4>
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	f200 8087 	bhi.w	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	f000 8086 	beq.w	800523a <HAL_TIM_ConfigClockSource+0x172>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	d87f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d01a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0xa6>
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d87b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d050      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005140:	2b60      	cmp	r3, #96	; 0x60
 8005142:	d877      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d03c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005148:	2b50      	cmp	r3, #80	; 0x50
 800514a:	d873      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d058      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x13a>
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d86f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d064      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d86b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d060      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d867      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05c      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b10      	cmp	r3, #16
 800516a:	d05a      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 800516c:	e062      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6899      	ldr	r1, [r3, #8]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f000 f9ad 	bl	80054dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	609a      	str	r2, [r3, #8]
      break;
 800519a:	e04f      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f000 f996 	bl	80054dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051be:	609a      	str	r2, [r3, #8]
      break;
 80051c0:	e03c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f000 f90a 	bl	80053e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2150      	movs	r1, #80	; 0x50
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f963 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 80051e0:	e02c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 f929 	bl	8005446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2160      	movs	r1, #96	; 0x60
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f953 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8005200:	e01c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	461a      	mov	r2, r3
 8005210:	f000 f8ea 	bl	80053e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f943 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8005220:	e00c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 f93a 	bl	80054a6 <TIM_ITRx_SetConfig>
      break;
 8005232:	e003      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e000      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800523a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a40      	ldr	r2, [pc, #256]	; (80053bc <TIM_Base_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a3d      	ldr	r2, [pc, #244]	; (80053c0 <TIM_Base_SetConfig+0x118>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3c      	ldr	r2, [pc, #240]	; (80053c4 <TIM_Base_SetConfig+0x11c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3b      	ldr	r2, [pc, #236]	; (80053c8 <TIM_Base_SetConfig+0x120>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <TIM_Base_SetConfig+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <TIM_Base_SetConfig+0x114>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005308:	d027      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <TIM_Base_SetConfig+0x118>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d023      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <TIM_Base_SetConfig+0x11c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01f      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <TIM_Base_SetConfig+0x120>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <TIM_Base_SetConfig+0x124>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d017      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <TIM_Base_SetConfig+0x128>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a27      	ldr	r2, [pc, #156]	; (80053d4 <TIM_Base_SetConfig+0x12c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a26      	ldr	r2, [pc, #152]	; (80053d8 <TIM_Base_SetConfig+0x130>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a25      	ldr	r2, [pc, #148]	; (80053dc <TIM_Base_SetConfig+0x134>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a24      	ldr	r2, [pc, #144]	; (80053e0 <TIM_Base_SetConfig+0x138>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <TIM_Base_SetConfig+0x13c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <TIM_Base_SetConfig+0x114>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0xf8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a0c      	ldr	r2, [pc, #48]	; (80053cc <TIM_Base_SetConfig+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d103      	bne.n	80053a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	615a      	str	r2, [r3, #20]
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40010400 	.word	0x40010400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800
 80053dc:	40001800 	.word	0x40001800
 80053e0:	40001c00 	.word	0x40001c00
 80053e4:	40002000 	.word	0x40002000

080053e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 030a 	bic.w	r3, r3, #10
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005446:	b480      	push	{r7}
 8005448:	b087      	sub	sp, #28
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0210 	bic.w	r2, r3, #16
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	031b      	lsls	r3, r3, #12
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f043 0307 	orr.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	431a      	orrs	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005530:	2302      	movs	r3, #2
 8005532:	e05a      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d01d      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a17      	ldr	r2, [pc, #92]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40001800 	.word	0x40001800

08005614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005654:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <FSMC_NORSRAM_Init+0xa0>)
 800565a:	4013      	ands	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005666:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800566c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005672:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005678:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800567e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005684:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800568a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005690:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005696:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800569c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80056a2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80056a8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d103      	bne.n	80056c0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056be:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	fff00080 	.word	0xfff00080

080056e0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fa:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005702:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800570e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005716:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800571e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	3b01      	subs	r3, #1
 8005726:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005728:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	3b02      	subs	r3, #2
 8005730:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005732:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005738:	4313      	orrs	r3, r2
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005774:	d122      	bne.n	80057bc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005784:	4013      	ands	r3, r2
 8005786:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005792:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800579a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80057a2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80057a8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057ba:	e005      	b.n	80057c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80057c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	cff00000 	.word	0xcff00000

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000078 	.word	0x20000078

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4d0d      	ldr	r5, [pc, #52]	; (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	; (8005824 <__libc_init_array+0x3c>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2600      	movs	r6, #0
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4d0b      	ldr	r5, [pc, #44]	; (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	; (800582c <__libc_init_array+0x44>)
 80057fc:	f000 fcd0 	bl	80061a0 <_init>
 8005800:	1b64      	subs	r4, r4, r5
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2600      	movs	r6, #0
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08009f10 	.word	0x08009f10
 8005824:	08009f10 	.word	0x08009f10
 8005828:	08009f10 	.word	0x08009f10
 800582c:	08009f14 	.word	0x08009f14

08005830 <memset>:
 8005830:	4402      	add	r2, r0
 8005832:	4603      	mov	r3, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <sniprintf>:
 8005840:	b40c      	push	{r2, r3}
 8005842:	b530      	push	{r4, r5, lr}
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <sniprintf+0x64>)
 8005846:	1e0c      	subs	r4, r1, #0
 8005848:	681d      	ldr	r5, [r3, #0]
 800584a:	b09d      	sub	sp, #116	; 0x74
 800584c:	da08      	bge.n	8005860 <sniprintf+0x20>
 800584e:	238b      	movs	r3, #139	; 0x8b
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	f04f 30ff 	mov.w	r0, #4294967295
 8005856:	b01d      	add	sp, #116	; 0x74
 8005858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800585c:	b002      	add	sp, #8
 800585e:	4770      	bx	lr
 8005860:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005864:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005868:	bf14      	ite	ne
 800586a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800586e:	4623      	moveq	r3, r4
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	9307      	str	r3, [sp, #28]
 8005874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005878:	9002      	str	r0, [sp, #8]
 800587a:	9006      	str	r0, [sp, #24]
 800587c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005880:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005882:	ab21      	add	r3, sp, #132	; 0x84
 8005884:	a902      	add	r1, sp, #8
 8005886:	4628      	mov	r0, r5
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	f000 f939 	bl	8005b00 <_svfiprintf_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	bfbc      	itt	lt
 8005892:	238b      	movlt	r3, #139	; 0x8b
 8005894:	602b      	strlt	r3, [r5, #0]
 8005896:	2c00      	cmp	r4, #0
 8005898:	d0dd      	beq.n	8005856 <sniprintf+0x16>
 800589a:	9b02      	ldr	r3, [sp, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e7d9      	b.n	8005856 <sniprintf+0x16>
 80058a2:	bf00      	nop
 80058a4:	20000078 	.word	0x20000078

080058a8 <strcat>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	4602      	mov	r2, r0
 80058ac:	7814      	ldrb	r4, [r2, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	3201      	adds	r2, #1
 80058b2:	2c00      	cmp	r4, #0
 80058b4:	d1fa      	bne.n	80058ac <strcat+0x4>
 80058b6:	3b01      	subs	r3, #1
 80058b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	d1f9      	bne.n	80058b8 <strcat+0x10>
 80058c4:	bd10      	pop	{r4, pc}
	...

080058c8 <strdup>:
 80058c8:	4b02      	ldr	r3, [pc, #8]	; (80058d4 <strdup+0xc>)
 80058ca:	4601      	mov	r1, r0
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	f000 b803 	b.w	80058d8 <_strdup_r>
 80058d2:	bf00      	nop
 80058d4:	20000078 	.word	0x20000078

080058d8 <_strdup_r>:
 80058d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	460d      	mov	r5, r1
 80058e0:	f7fa fc76 	bl	80001d0 <strlen>
 80058e4:	1c42      	adds	r2, r0, #1
 80058e6:	4611      	mov	r1, r2
 80058e8:	4620      	mov	r0, r4
 80058ea:	9201      	str	r2, [sp, #4]
 80058ec:	f000 f838 	bl	8005960 <_malloc_r>
 80058f0:	4604      	mov	r4, r0
 80058f2:	b118      	cbz	r0, 80058fc <_strdup_r+0x24>
 80058f4:	9a01      	ldr	r2, [sp, #4]
 80058f6:	4629      	mov	r1, r5
 80058f8:	f000 f803 	bl	8005902 <memcpy>
 80058fc:	4620      	mov	r0, r4
 80058fe:	b003      	add	sp, #12
 8005900:	bd30      	pop	{r4, r5, pc}

08005902 <memcpy>:
 8005902:	440a      	add	r2, r1
 8005904:	4291      	cmp	r1, r2
 8005906:	f100 33ff 	add.w	r3, r0, #4294967295
 800590a:	d100      	bne.n	800590e <memcpy+0xc>
 800590c:	4770      	bx	lr
 800590e:	b510      	push	{r4, lr}
 8005910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005918:	4291      	cmp	r1, r2
 800591a:	d1f9      	bne.n	8005910 <memcpy+0xe>
 800591c:	bd10      	pop	{r4, pc}
	...

08005920 <sbrk_aligned>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4e0e      	ldr	r6, [pc, #56]	; (800595c <sbrk_aligned+0x3c>)
 8005924:	460c      	mov	r4, r1
 8005926:	6831      	ldr	r1, [r6, #0]
 8005928:	4605      	mov	r5, r0
 800592a:	b911      	cbnz	r1, 8005932 <sbrk_aligned+0x12>
 800592c:	f000 fb7c 	bl	8006028 <_sbrk_r>
 8005930:	6030      	str	r0, [r6, #0]
 8005932:	4621      	mov	r1, r4
 8005934:	4628      	mov	r0, r5
 8005936:	f000 fb77 	bl	8006028 <_sbrk_r>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	d00a      	beq.n	8005954 <sbrk_aligned+0x34>
 800593e:	1cc4      	adds	r4, r0, #3
 8005940:	f024 0403 	bic.w	r4, r4, #3
 8005944:	42a0      	cmp	r0, r4
 8005946:	d007      	beq.n	8005958 <sbrk_aligned+0x38>
 8005948:	1a21      	subs	r1, r4, r0
 800594a:	4628      	mov	r0, r5
 800594c:	f000 fb6c 	bl	8006028 <_sbrk_r>
 8005950:	3001      	adds	r0, #1
 8005952:	d101      	bne.n	8005958 <sbrk_aligned+0x38>
 8005954:	f04f 34ff 	mov.w	r4, #4294967295
 8005958:	4620      	mov	r0, r4
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	20006000 	.word	0x20006000

08005960 <_malloc_r>:
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	1ccd      	adds	r5, r1, #3
 8005966:	f025 0503 	bic.w	r5, r5, #3
 800596a:	3508      	adds	r5, #8
 800596c:	2d0c      	cmp	r5, #12
 800596e:	bf38      	it	cc
 8005970:	250c      	movcc	r5, #12
 8005972:	2d00      	cmp	r5, #0
 8005974:	4607      	mov	r7, r0
 8005976:	db01      	blt.n	800597c <_malloc_r+0x1c>
 8005978:	42a9      	cmp	r1, r5
 800597a:	d905      	bls.n	8005988 <_malloc_r+0x28>
 800597c:	230c      	movs	r3, #12
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	2600      	movs	r6, #0
 8005982:	4630      	mov	r0, r6
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	4e2e      	ldr	r6, [pc, #184]	; (8005a44 <_malloc_r+0xe4>)
 800598a:	f000 fb77 	bl	800607c <__malloc_lock>
 800598e:	6833      	ldr	r3, [r6, #0]
 8005990:	461c      	mov	r4, r3
 8005992:	bb34      	cbnz	r4, 80059e2 <_malloc_r+0x82>
 8005994:	4629      	mov	r1, r5
 8005996:	4638      	mov	r0, r7
 8005998:	f7ff ffc2 	bl	8005920 <sbrk_aligned>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	4604      	mov	r4, r0
 80059a0:	d14d      	bne.n	8005a3e <_malloc_r+0xde>
 80059a2:	6834      	ldr	r4, [r6, #0]
 80059a4:	4626      	mov	r6, r4
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	d140      	bne.n	8005a2c <_malloc_r+0xcc>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	4631      	mov	r1, r6
 80059ae:	4638      	mov	r0, r7
 80059b0:	eb04 0803 	add.w	r8, r4, r3
 80059b4:	f000 fb38 	bl	8006028 <_sbrk_r>
 80059b8:	4580      	cmp	r8, r0
 80059ba:	d13a      	bne.n	8005a32 <_malloc_r+0xd2>
 80059bc:	6821      	ldr	r1, [r4, #0]
 80059be:	3503      	adds	r5, #3
 80059c0:	1a6d      	subs	r5, r5, r1
 80059c2:	f025 0503 	bic.w	r5, r5, #3
 80059c6:	3508      	adds	r5, #8
 80059c8:	2d0c      	cmp	r5, #12
 80059ca:	bf38      	it	cc
 80059cc:	250c      	movcc	r5, #12
 80059ce:	4629      	mov	r1, r5
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff ffa5 	bl	8005920 <sbrk_aligned>
 80059d6:	3001      	adds	r0, #1
 80059d8:	d02b      	beq.n	8005a32 <_malloc_r+0xd2>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	442b      	add	r3, r5
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	e00e      	b.n	8005a00 <_malloc_r+0xa0>
 80059e2:	6822      	ldr	r2, [r4, #0]
 80059e4:	1b52      	subs	r2, r2, r5
 80059e6:	d41e      	bmi.n	8005a26 <_malloc_r+0xc6>
 80059e8:	2a0b      	cmp	r2, #11
 80059ea:	d916      	bls.n	8005a1a <_malloc_r+0xba>
 80059ec:	1961      	adds	r1, r4, r5
 80059ee:	42a3      	cmp	r3, r4
 80059f0:	6025      	str	r5, [r4, #0]
 80059f2:	bf18      	it	ne
 80059f4:	6059      	strne	r1, [r3, #4]
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	bf08      	it	eq
 80059fa:	6031      	streq	r1, [r6, #0]
 80059fc:	5162      	str	r2, [r4, r5]
 80059fe:	604b      	str	r3, [r1, #4]
 8005a00:	4638      	mov	r0, r7
 8005a02:	f104 060b 	add.w	r6, r4, #11
 8005a06:	f000 fb3f 	bl	8006088 <__malloc_unlock>
 8005a0a:	f026 0607 	bic.w	r6, r6, #7
 8005a0e:	1d23      	adds	r3, r4, #4
 8005a10:	1af2      	subs	r2, r6, r3
 8005a12:	d0b6      	beq.n	8005982 <_malloc_r+0x22>
 8005a14:	1b9b      	subs	r3, r3, r6
 8005a16:	50a3      	str	r3, [r4, r2]
 8005a18:	e7b3      	b.n	8005982 <_malloc_r+0x22>
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	bf0c      	ite	eq
 8005a20:	6032      	streq	r2, [r6, #0]
 8005a22:	605a      	strne	r2, [r3, #4]
 8005a24:	e7ec      	b.n	8005a00 <_malloc_r+0xa0>
 8005a26:	4623      	mov	r3, r4
 8005a28:	6864      	ldr	r4, [r4, #4]
 8005a2a:	e7b2      	b.n	8005992 <_malloc_r+0x32>
 8005a2c:	4634      	mov	r4, r6
 8005a2e:	6876      	ldr	r6, [r6, #4]
 8005a30:	e7b9      	b.n	80059a6 <_malloc_r+0x46>
 8005a32:	230c      	movs	r3, #12
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4638      	mov	r0, r7
 8005a38:	f000 fb26 	bl	8006088 <__malloc_unlock>
 8005a3c:	e7a1      	b.n	8005982 <_malloc_r+0x22>
 8005a3e:	6025      	str	r5, [r4, #0]
 8005a40:	e7de      	b.n	8005a00 <_malloc_r+0xa0>
 8005a42:	bf00      	nop
 8005a44:	20005ffc 	.word	0x20005ffc

08005a48 <__ssputs_r>:
 8005a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	688e      	ldr	r6, [r1, #8]
 8005a4e:	429e      	cmp	r6, r3
 8005a50:	4682      	mov	sl, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	4690      	mov	r8, r2
 8005a56:	461f      	mov	r7, r3
 8005a58:	d838      	bhi.n	8005acc <__ssputs_r+0x84>
 8005a5a:	898a      	ldrh	r2, [r1, #12]
 8005a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a60:	d032      	beq.n	8005ac8 <__ssputs_r+0x80>
 8005a62:	6825      	ldr	r5, [r4, #0]
 8005a64:	6909      	ldr	r1, [r1, #16]
 8005a66:	eba5 0901 	sub.w	r9, r5, r1
 8005a6a:	6965      	ldr	r5, [r4, #20]
 8005a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a74:	3301      	adds	r3, #1
 8005a76:	444b      	add	r3, r9
 8005a78:	106d      	asrs	r5, r5, #1
 8005a7a:	429d      	cmp	r5, r3
 8005a7c:	bf38      	it	cc
 8005a7e:	461d      	movcc	r5, r3
 8005a80:	0553      	lsls	r3, r2, #21
 8005a82:	d531      	bpl.n	8005ae8 <__ssputs_r+0xa0>
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7ff ff6b 	bl	8005960 <_malloc_r>
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	b950      	cbnz	r0, 8005aa4 <__ssputs_r+0x5c>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	f8ca 3000 	str.w	r3, [sl]
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a9a:	81a3      	strh	r3, [r4, #12]
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa4:	6921      	ldr	r1, [r4, #16]
 8005aa6:	464a      	mov	r2, r9
 8005aa8:	f7ff ff2b 	bl	8005902 <memcpy>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	6126      	str	r6, [r4, #16]
 8005aba:	6165      	str	r5, [r4, #20]
 8005abc:	444e      	add	r6, r9
 8005abe:	eba5 0509 	sub.w	r5, r5, r9
 8005ac2:	6026      	str	r6, [r4, #0]
 8005ac4:	60a5      	str	r5, [r4, #8]
 8005ac6:	463e      	mov	r6, r7
 8005ac8:	42be      	cmp	r6, r7
 8005aca:	d900      	bls.n	8005ace <__ssputs_r+0x86>
 8005acc:	463e      	mov	r6, r7
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	f000 fab8 	bl	8006048 <memmove>
 8005ad8:	68a3      	ldr	r3, [r4, #8]
 8005ada:	1b9b      	subs	r3, r3, r6
 8005adc:	60a3      	str	r3, [r4, #8]
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	4433      	add	r3, r6
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e7db      	b.n	8005aa0 <__ssputs_r+0x58>
 8005ae8:	462a      	mov	r2, r5
 8005aea:	f000 fb1f 	bl	800612c <_realloc_r>
 8005aee:	4606      	mov	r6, r0
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d1e1      	bne.n	8005ab8 <__ssputs_r+0x70>
 8005af4:	6921      	ldr	r1, [r4, #16]
 8005af6:	4650      	mov	r0, sl
 8005af8:	f000 facc 	bl	8006094 <_free_r>
 8005afc:	e7c7      	b.n	8005a8e <__ssputs_r+0x46>
	...

08005b00 <_svfiprintf_r>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	4698      	mov	r8, r3
 8005b06:	898b      	ldrh	r3, [r1, #12]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	b09d      	sub	sp, #116	; 0x74
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	460d      	mov	r5, r1
 8005b10:	4614      	mov	r4, r2
 8005b12:	d50e      	bpl.n	8005b32 <_svfiprintf_r+0x32>
 8005b14:	690b      	ldr	r3, [r1, #16]
 8005b16:	b963      	cbnz	r3, 8005b32 <_svfiprintf_r+0x32>
 8005b18:	2140      	movs	r1, #64	; 0x40
 8005b1a:	f7ff ff21 	bl	8005960 <_malloc_r>
 8005b1e:	6028      	str	r0, [r5, #0]
 8005b20:	6128      	str	r0, [r5, #16]
 8005b22:	b920      	cbnz	r0, 8005b2e <_svfiprintf_r+0x2e>
 8005b24:	230c      	movs	r3, #12
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	e0d1      	b.n	8005cd2 <_svfiprintf_r+0x1d2>
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	616b      	str	r3, [r5, #20]
 8005b32:	2300      	movs	r3, #0
 8005b34:	9309      	str	r3, [sp, #36]	; 0x24
 8005b36:	2320      	movs	r3, #32
 8005b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b40:	2330      	movs	r3, #48	; 0x30
 8005b42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cec <_svfiprintf_r+0x1ec>
 8005b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b4a:	f04f 0901 	mov.w	r9, #1
 8005b4e:	4623      	mov	r3, r4
 8005b50:	469a      	mov	sl, r3
 8005b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b56:	b10a      	cbz	r2, 8005b5c <_svfiprintf_r+0x5c>
 8005b58:	2a25      	cmp	r2, #37	; 0x25
 8005b5a:	d1f9      	bne.n	8005b50 <_svfiprintf_r+0x50>
 8005b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b60:	d00b      	beq.n	8005b7a <_svfiprintf_r+0x7a>
 8005b62:	465b      	mov	r3, fp
 8005b64:	4622      	mov	r2, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ff6d 	bl	8005a48 <__ssputs_r>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f000 80aa 	beq.w	8005cc8 <_svfiprintf_r+0x1c8>
 8005b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b76:	445a      	add	r2, fp
 8005b78:	9209      	str	r2, [sp, #36]	; 0x24
 8005b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80a2 	beq.w	8005cc8 <_svfiprintf_r+0x1c8>
 8005b84:	2300      	movs	r3, #0
 8005b86:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b8e:	f10a 0a01 	add.w	sl, sl, #1
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	9307      	str	r3, [sp, #28]
 8005b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b9c:	4654      	mov	r4, sl
 8005b9e:	2205      	movs	r2, #5
 8005ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba4:	4851      	ldr	r0, [pc, #324]	; (8005cec <_svfiprintf_r+0x1ec>)
 8005ba6:	f7fa fb1b 	bl	80001e0 <memchr>
 8005baa:	9a04      	ldr	r2, [sp, #16]
 8005bac:	b9d8      	cbnz	r0, 8005be6 <_svfiprintf_r+0xe6>
 8005bae:	06d0      	lsls	r0, r2, #27
 8005bb0:	bf44      	itt	mi
 8005bb2:	2320      	movmi	r3, #32
 8005bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb8:	0711      	lsls	r1, r2, #28
 8005bba:	bf44      	itt	mi
 8005bbc:	232b      	movmi	r3, #43	; 0x2b
 8005bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc8:	d015      	beq.n	8005bf6 <_svfiprintf_r+0xf6>
 8005bca:	9a07      	ldr	r2, [sp, #28]
 8005bcc:	4654      	mov	r4, sl
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f04f 0c0a 	mov.w	ip, #10
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bda:	3b30      	subs	r3, #48	; 0x30
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	d94e      	bls.n	8005c7e <_svfiprintf_r+0x17e>
 8005be0:	b1b0      	cbz	r0, 8005c10 <_svfiprintf_r+0x110>
 8005be2:	9207      	str	r2, [sp, #28]
 8005be4:	e014      	b.n	8005c10 <_svfiprintf_r+0x110>
 8005be6:	eba0 0308 	sub.w	r3, r0, r8
 8005bea:	fa09 f303 	lsl.w	r3, r9, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	46a2      	mov	sl, r4
 8005bf4:	e7d2      	b.n	8005b9c <_svfiprintf_r+0x9c>
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	1d19      	adds	r1, r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	9103      	str	r1, [sp, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfbb      	ittet	lt
 8005c02:	425b      	neglt	r3, r3
 8005c04:	f042 0202 	orrlt.w	r2, r2, #2
 8005c08:	9307      	strge	r3, [sp, #28]
 8005c0a:	9307      	strlt	r3, [sp, #28]
 8005c0c:	bfb8      	it	lt
 8005c0e:	9204      	strlt	r2, [sp, #16]
 8005c10:	7823      	ldrb	r3, [r4, #0]
 8005c12:	2b2e      	cmp	r3, #46	; 0x2e
 8005c14:	d10c      	bne.n	8005c30 <_svfiprintf_r+0x130>
 8005c16:	7863      	ldrb	r3, [r4, #1]
 8005c18:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1a:	d135      	bne.n	8005c88 <_svfiprintf_r+0x188>
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	1d1a      	adds	r2, r3, #4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	9203      	str	r2, [sp, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfb8      	it	lt
 8005c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c2c:	3402      	adds	r4, #2
 8005c2e:	9305      	str	r3, [sp, #20]
 8005c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cfc <_svfiprintf_r+0x1fc>
 8005c34:	7821      	ldrb	r1, [r4, #0]
 8005c36:	2203      	movs	r2, #3
 8005c38:	4650      	mov	r0, sl
 8005c3a:	f7fa fad1 	bl	80001e0 <memchr>
 8005c3e:	b140      	cbz	r0, 8005c52 <_svfiprintf_r+0x152>
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	eba0 000a 	sub.w	r0, r0, sl
 8005c46:	fa03 f000 	lsl.w	r0, r3, r0
 8005c4a:	9b04      	ldr	r3, [sp, #16]
 8005c4c:	4303      	orrs	r3, r0
 8005c4e:	3401      	adds	r4, #1
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c56:	4826      	ldr	r0, [pc, #152]	; (8005cf0 <_svfiprintf_r+0x1f0>)
 8005c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c5c:	2206      	movs	r2, #6
 8005c5e:	f7fa fabf 	bl	80001e0 <memchr>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d038      	beq.n	8005cd8 <_svfiprintf_r+0x1d8>
 8005c66:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <_svfiprintf_r+0x1f4>)
 8005c68:	bb1b      	cbnz	r3, 8005cb2 <_svfiprintf_r+0x1b2>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	3307      	adds	r3, #7
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	3308      	adds	r3, #8
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c78:	4433      	add	r3, r6
 8005c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7c:	e767      	b.n	8005b4e <_svfiprintf_r+0x4e>
 8005c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c82:	460c      	mov	r4, r1
 8005c84:	2001      	movs	r0, #1
 8005c86:	e7a5      	b.n	8005bd4 <_svfiprintf_r+0xd4>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	3401      	adds	r4, #1
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f04f 0c0a 	mov.w	ip, #10
 8005c94:	4620      	mov	r0, r4
 8005c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c9a:	3a30      	subs	r2, #48	; 0x30
 8005c9c:	2a09      	cmp	r2, #9
 8005c9e:	d903      	bls.n	8005ca8 <_svfiprintf_r+0x1a8>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0c5      	beq.n	8005c30 <_svfiprintf_r+0x130>
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	e7c3      	b.n	8005c30 <_svfiprintf_r+0x130>
 8005ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cac:	4604      	mov	r4, r0
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e7f0      	b.n	8005c94 <_svfiprintf_r+0x194>
 8005cb2:	ab03      	add	r3, sp, #12
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <_svfiprintf_r+0x1f8>)
 8005cba:	a904      	add	r1, sp, #16
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f3af 8000 	nop.w
 8005cc2:	1c42      	adds	r2, r0, #1
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	d1d6      	bne.n	8005c76 <_svfiprintf_r+0x176>
 8005cc8:	89ab      	ldrh	r3, [r5, #12]
 8005cca:	065b      	lsls	r3, r3, #25
 8005ccc:	f53f af2c 	bmi.w	8005b28 <_svfiprintf_r+0x28>
 8005cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd2:	b01d      	add	sp, #116	; 0x74
 8005cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd8:	ab03      	add	r3, sp, #12
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <_svfiprintf_r+0x1f8>)
 8005ce0:	a904      	add	r1, sp, #16
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f000 f87a 	bl	8005ddc <_printf_i>
 8005ce8:	e7eb      	b.n	8005cc2 <_svfiprintf_r+0x1c2>
 8005cea:	bf00      	nop
 8005cec:	08009ed4 	.word	0x08009ed4
 8005cf0:	08009ede 	.word	0x08009ede
 8005cf4:	00000000 	.word	0x00000000
 8005cf8:	08005a49 	.word	0x08005a49
 8005cfc:	08009eda 	.word	0x08009eda

08005d00 <_printf_common>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	4616      	mov	r6, r2
 8005d06:	4699      	mov	r9, r3
 8005d08:	688a      	ldr	r2, [r1, #8]
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	bfb8      	it	lt
 8005d14:	4613      	movlt	r3, r2
 8005d16:	6033      	str	r3, [r6, #0]
 8005d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b10a      	cbz	r2, 8005d26 <_printf_common+0x26>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0699      	lsls	r1, r3, #26
 8005d2a:	bf42      	ittt	mi
 8005d2c:	6833      	ldrmi	r3, [r6, #0]
 8005d2e:	3302      	addmi	r3, #2
 8005d30:	6033      	strmi	r3, [r6, #0]
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	f015 0506 	ands.w	r5, r5, #6
 8005d38:	d106      	bne.n	8005d48 <_printf_common+0x48>
 8005d3a:	f104 0a19 	add.w	sl, r4, #25
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	6832      	ldr	r2, [r6, #0]
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dc26      	bgt.n	8005d96 <_printf_common+0x96>
 8005d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d4c:	1e13      	subs	r3, r2, #0
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	0692      	lsls	r2, r2, #26
 8005d56:	d42b      	bmi.n	8005db0 <_printf_common+0xb0>
 8005d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d01e      	beq.n	8005da4 <_printf_common+0xa4>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	68e5      	ldr	r5, [r4, #12]
 8005d6a:	6832      	ldr	r2, [r6, #0]
 8005d6c:	f003 0306 	and.w	r3, r3, #6
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	bf08      	it	eq
 8005d74:	1aad      	subeq	r5, r5, r2
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	bf0c      	ite	eq
 8005d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d80:	2500      	movne	r5, #0
 8005d82:	4293      	cmp	r3, r2
 8005d84:	bfc4      	itt	gt
 8005d86:	1a9b      	subgt	r3, r3, r2
 8005d88:	18ed      	addgt	r5, r5, r3
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	341a      	adds	r4, #26
 8005d8e:	42b5      	cmp	r5, r6
 8005d90:	d11a      	bne.n	8005dc8 <_printf_common+0xc8>
 8005d92:	2000      	movs	r0, #0
 8005d94:	e008      	b.n	8005da8 <_printf_common+0xa8>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	47c0      	blx	r8
 8005da0:	3001      	adds	r0, #1
 8005da2:	d103      	bne.n	8005dac <_printf_common+0xac>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7c6      	b.n	8005d3e <_printf_common+0x3e>
 8005db0:	18e1      	adds	r1, r4, r3
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	2030      	movs	r0, #48	; 0x30
 8005db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dba:	4422      	add	r2, r4
 8005dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	e7c7      	b.n	8005d58 <_printf_common+0x58>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4622      	mov	r2, r4
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d0e6      	beq.n	8005da4 <_printf_common+0xa4>
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7d9      	b.n	8005d8e <_printf_common+0x8e>
	...

08005ddc <_printf_i>:
 8005ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	7e0f      	ldrb	r7, [r1, #24]
 8005de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de4:	2f78      	cmp	r7, #120	; 0x78
 8005de6:	4691      	mov	r9, r2
 8005de8:	4680      	mov	r8, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	469a      	mov	sl, r3
 8005dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005df2:	d807      	bhi.n	8005e04 <_printf_i+0x28>
 8005df4:	2f62      	cmp	r7, #98	; 0x62
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x32>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f000 80d8 	beq.w	8005fae <_printf_i+0x1d2>
 8005dfe:	2f58      	cmp	r7, #88	; 0x58
 8005e00:	f000 80a3 	beq.w	8005f4a <_printf_i+0x16e>
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e0c:	e03a      	b.n	8005e84 <_printf_i+0xa8>
 8005e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e12:	2b15      	cmp	r3, #21
 8005e14:	d8f6      	bhi.n	8005e04 <_printf_i+0x28>
 8005e16:	a101      	add	r1, pc, #4	; (adr r1, 8005e1c <_printf_i+0x40>)
 8005e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e05 	.word	0x08005e05
 8005e28:	08005e05 	.word	0x08005e05
 8005e2c:	08005e05 	.word	0x08005e05
 8005e30:	08005e05 	.word	0x08005e05
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e05 	.word	0x08005e05
 8005e3c:	08005e05 	.word	0x08005e05
 8005e40:	08005e05 	.word	0x08005e05
 8005e44:	08005e05 	.word	0x08005e05
 8005e48:	08005f95 	.word	0x08005f95
 8005e4c:	08005eb9 	.word	0x08005eb9
 8005e50:	08005f77 	.word	0x08005f77
 8005e54:	08005e05 	.word	0x08005e05
 8005e58:	08005e05 	.word	0x08005e05
 8005e5c:	08005fb7 	.word	0x08005fb7
 8005e60:	08005e05 	.word	0x08005e05
 8005e64:	08005eb9 	.word	0x08005eb9
 8005e68:	08005e05 	.word	0x08005e05
 8005e6c:	08005e05 	.word	0x08005e05
 8005e70:	08005f7f 	.word	0x08005f7f
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	602a      	str	r2, [r5, #0]
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0a3      	b.n	8005fd0 <_printf_i+0x1f4>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	6829      	ldr	r1, [r5, #0]
 8005e8c:	0606      	lsls	r6, r0, #24
 8005e8e:	f101 0304 	add.w	r3, r1, #4
 8005e92:	d50a      	bpl.n	8005eaa <_printf_i+0xce>
 8005e94:	680e      	ldr	r6, [r1, #0]
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	da03      	bge.n	8005ea4 <_printf_i+0xc8>
 8005e9c:	232d      	movs	r3, #45	; 0x2d
 8005e9e:	4276      	negs	r6, r6
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	485e      	ldr	r0, [pc, #376]	; (8006020 <_printf_i+0x244>)
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	e019      	b.n	8005ede <_printf_i+0x102>
 8005eaa:	680e      	ldr	r6, [r1, #0]
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eb2:	bf18      	it	ne
 8005eb4:	b236      	sxthne	r6, r6
 8005eb6:	e7ef      	b.n	8005e98 <_printf_i+0xbc>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	6029      	str	r1, [r5, #0]
 8005ec0:	0601      	lsls	r1, r0, #24
 8005ec2:	d501      	bpl.n	8005ec8 <_printf_i+0xec>
 8005ec4:	681e      	ldr	r6, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <_printf_i+0xf2>
 8005ec8:	0646      	lsls	r6, r0, #25
 8005eca:	d5fb      	bpl.n	8005ec4 <_printf_i+0xe8>
 8005ecc:	881e      	ldrh	r6, [r3, #0]
 8005ece:	4854      	ldr	r0, [pc, #336]	; (8006020 <_printf_i+0x244>)
 8005ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2308      	moveq	r3, #8
 8005ed6:	230a      	movne	r3, #10
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ede:	6865      	ldr	r5, [r4, #4]
 8005ee0:	60a5      	str	r5, [r4, #8]
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	bfa2      	ittt	ge
 8005ee6:	6821      	ldrge	r1, [r4, #0]
 8005ee8:	f021 0104 	bicge.w	r1, r1, #4
 8005eec:	6021      	strge	r1, [r4, #0]
 8005eee:	b90e      	cbnz	r6, 8005ef4 <_printf_i+0x118>
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	d04d      	beq.n	8005f90 <_printf_i+0x1b4>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005efa:	fb03 6711 	mls	r7, r3, r1, r6
 8005efe:	5dc7      	ldrb	r7, [r0, r7]
 8005f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f04:	4637      	mov	r7, r6
 8005f06:	42bb      	cmp	r3, r7
 8005f08:	460e      	mov	r6, r1
 8005f0a:	d9f4      	bls.n	8005ef6 <_printf_i+0x11a>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d10b      	bne.n	8005f28 <_printf_i+0x14c>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07de      	lsls	r6, r3, #31
 8005f14:	d508      	bpl.n	8005f28 <_printf_i+0x14c>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6861      	ldr	r1, [r4, #4]
 8005f1a:	4299      	cmp	r1, r3
 8005f1c:	bfde      	ittt	le
 8005f1e:	2330      	movle	r3, #48	; 0x30
 8005f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f28:	1b52      	subs	r2, r2, r5
 8005f2a:	6122      	str	r2, [r4, #16]
 8005f2c:	f8cd a000 	str.w	sl, [sp]
 8005f30:	464b      	mov	r3, r9
 8005f32:	aa03      	add	r2, sp, #12
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fee2 	bl	8005d00 <_printf_common>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d14c      	bne.n	8005fda <_printf_i+0x1fe>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b004      	add	sp, #16
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	4835      	ldr	r0, [pc, #212]	; (8006020 <_printf_i+0x244>)
 8005f4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f50:	6829      	ldr	r1, [r5, #0]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f58:	6029      	str	r1, [r5, #0]
 8005f5a:	061d      	lsls	r5, r3, #24
 8005f5c:	d514      	bpl.n	8005f88 <_printf_i+0x1ac>
 8005f5e:	07df      	lsls	r7, r3, #31
 8005f60:	bf44      	itt	mi
 8005f62:	f043 0320 	orrmi.w	r3, r3, #32
 8005f66:	6023      	strmi	r3, [r4, #0]
 8005f68:	b91e      	cbnz	r6, 8005f72 <_printf_i+0x196>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f023 0320 	bic.w	r3, r3, #32
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	2310      	movs	r3, #16
 8005f74:	e7b0      	b.n	8005ed8 <_printf_i+0xfc>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	f043 0320 	orr.w	r3, r3, #32
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	2378      	movs	r3, #120	; 0x78
 8005f80:	4828      	ldr	r0, [pc, #160]	; (8006024 <_printf_i+0x248>)
 8005f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f86:	e7e3      	b.n	8005f50 <_printf_i+0x174>
 8005f88:	0659      	lsls	r1, r3, #25
 8005f8a:	bf48      	it	mi
 8005f8c:	b2b6      	uxthmi	r6, r6
 8005f8e:	e7e6      	b.n	8005f5e <_printf_i+0x182>
 8005f90:	4615      	mov	r5, r2
 8005f92:	e7bb      	b.n	8005f0c <_printf_i+0x130>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	6826      	ldr	r6, [r4, #0]
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	1d18      	adds	r0, r3, #4
 8005f9c:	6028      	str	r0, [r5, #0]
 8005f9e:	0635      	lsls	r5, r6, #24
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0x1cc>
 8005fa4:	6019      	str	r1, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0x1d2>
 8005fa8:	0670      	lsls	r0, r6, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0x1c8>
 8005fac:	8019      	strh	r1, [r3, #0]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	4615      	mov	r5, r2
 8005fb4:	e7ba      	b.n	8005f2c <_printf_i+0x150>
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	602a      	str	r2, [r5, #0]
 8005fbc:	681d      	ldr	r5, [r3, #0]
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7fa f90c 	bl	80001e0 <memchr>
 8005fc8:	b108      	cbz	r0, 8005fce <_printf_i+0x1f2>
 8005fca:	1b40      	subs	r0, r0, r5
 8005fcc:	6060      	str	r0, [r4, #4]
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	6123      	str	r3, [r4, #16]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd8:	e7a8      	b.n	8005f2c <_printf_i+0x150>
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	47d0      	blx	sl
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d0ab      	beq.n	8005f40 <_printf_i+0x164>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	079b      	lsls	r3, r3, #30
 8005fec:	d413      	bmi.n	8006016 <_printf_i+0x23a>
 8005fee:	68e0      	ldr	r0, [r4, #12]
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	bfb8      	it	lt
 8005ff6:	4618      	movlt	r0, r3
 8005ff8:	e7a4      	b.n	8005f44 <_printf_i+0x168>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	47d0      	blx	sl
 8006004:	3001      	adds	r0, #1
 8006006:	d09b      	beq.n	8005f40 <_printf_i+0x164>
 8006008:	3501      	adds	r5, #1
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	9903      	ldr	r1, [sp, #12]
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	42ab      	cmp	r3, r5
 8006012:	dcf2      	bgt.n	8005ffa <_printf_i+0x21e>
 8006014:	e7eb      	b.n	8005fee <_printf_i+0x212>
 8006016:	2500      	movs	r5, #0
 8006018:	f104 0619 	add.w	r6, r4, #25
 800601c:	e7f5      	b.n	800600a <_printf_i+0x22e>
 800601e:	bf00      	nop
 8006020:	08009ee5 	.word	0x08009ee5
 8006024:	08009ef6 	.word	0x08009ef6

08006028 <_sbrk_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d06      	ldr	r5, [pc, #24]	; (8006044 <_sbrk_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fc ffee 	bl	8003014 <_sbrk>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_sbrk_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_sbrk_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20006004 	.word	0x20006004

08006048 <memmove>:
 8006048:	4288      	cmp	r0, r1
 800604a:	b510      	push	{r4, lr}
 800604c:	eb01 0402 	add.w	r4, r1, r2
 8006050:	d902      	bls.n	8006058 <memmove+0x10>
 8006052:	4284      	cmp	r4, r0
 8006054:	4623      	mov	r3, r4
 8006056:	d807      	bhi.n	8006068 <memmove+0x20>
 8006058:	1e43      	subs	r3, r0, #1
 800605a:	42a1      	cmp	r1, r4
 800605c:	d008      	beq.n	8006070 <memmove+0x28>
 800605e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006066:	e7f8      	b.n	800605a <memmove+0x12>
 8006068:	4402      	add	r2, r0
 800606a:	4601      	mov	r1, r0
 800606c:	428a      	cmp	r2, r1
 800606e:	d100      	bne.n	8006072 <memmove+0x2a>
 8006070:	bd10      	pop	{r4, pc}
 8006072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800607a:	e7f7      	b.n	800606c <memmove+0x24>

0800607c <__malloc_lock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_lock+0x8>)
 800607e:	f000 b884 	b.w	800618a <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	20006008 	.word	0x20006008

08006088 <__malloc_unlock>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__malloc_unlock+0x8>)
 800608a:	f000 b87f 	b.w	800618c <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	20006008 	.word	0x20006008

08006094 <_free_r>:
 8006094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006096:	2900      	cmp	r1, #0
 8006098:	d044      	beq.n	8006124 <_free_r+0x90>
 800609a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800609e:	9001      	str	r0, [sp, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f1a1 0404 	sub.w	r4, r1, #4
 80060a6:	bfb8      	it	lt
 80060a8:	18e4      	addlt	r4, r4, r3
 80060aa:	f7ff ffe7 	bl	800607c <__malloc_lock>
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <_free_r+0x94>)
 80060b0:	9801      	ldr	r0, [sp, #4]
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	b933      	cbnz	r3, 80060c4 <_free_r+0x30>
 80060b6:	6063      	str	r3, [r4, #4]
 80060b8:	6014      	str	r4, [r2, #0]
 80060ba:	b003      	add	sp, #12
 80060bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060c0:	f7ff bfe2 	b.w	8006088 <__malloc_unlock>
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d908      	bls.n	80060da <_free_r+0x46>
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1961      	adds	r1, r4, r5
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf01      	itttt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	1949      	addeq	r1, r1, r5
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	e7ed      	b.n	80060b6 <_free_r+0x22>
 80060da:	461a      	mov	r2, r3
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	b10b      	cbz	r3, 80060e4 <_free_r+0x50>
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d9fa      	bls.n	80060da <_free_r+0x46>
 80060e4:	6811      	ldr	r1, [r2, #0]
 80060e6:	1855      	adds	r5, r2, r1
 80060e8:	42a5      	cmp	r5, r4
 80060ea:	d10b      	bne.n	8006104 <_free_r+0x70>
 80060ec:	6824      	ldr	r4, [r4, #0]
 80060ee:	4421      	add	r1, r4
 80060f0:	1854      	adds	r4, r2, r1
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	6011      	str	r1, [r2, #0]
 80060f6:	d1e0      	bne.n	80060ba <_free_r+0x26>
 80060f8:	681c      	ldr	r4, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	6053      	str	r3, [r2, #4]
 80060fe:	4421      	add	r1, r4
 8006100:	6011      	str	r1, [r2, #0]
 8006102:	e7da      	b.n	80060ba <_free_r+0x26>
 8006104:	d902      	bls.n	800610c <_free_r+0x78>
 8006106:	230c      	movs	r3, #12
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	e7d6      	b.n	80060ba <_free_r+0x26>
 800610c:	6825      	ldr	r5, [r4, #0]
 800610e:	1961      	adds	r1, r4, r5
 8006110:	428b      	cmp	r3, r1
 8006112:	bf04      	itt	eq
 8006114:	6819      	ldreq	r1, [r3, #0]
 8006116:	685b      	ldreq	r3, [r3, #4]
 8006118:	6063      	str	r3, [r4, #4]
 800611a:	bf04      	itt	eq
 800611c:	1949      	addeq	r1, r1, r5
 800611e:	6021      	streq	r1, [r4, #0]
 8006120:	6054      	str	r4, [r2, #4]
 8006122:	e7ca      	b.n	80060ba <_free_r+0x26>
 8006124:	b003      	add	sp, #12
 8006126:	bd30      	pop	{r4, r5, pc}
 8006128:	20005ffc 	.word	0x20005ffc

0800612c <_realloc_r>:
 800612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	4680      	mov	r8, r0
 8006132:	4614      	mov	r4, r2
 8006134:	460e      	mov	r6, r1
 8006136:	b921      	cbnz	r1, 8006142 <_realloc_r+0x16>
 8006138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800613c:	4611      	mov	r1, r2
 800613e:	f7ff bc0f 	b.w	8005960 <_malloc_r>
 8006142:	b92a      	cbnz	r2, 8006150 <_realloc_r+0x24>
 8006144:	f7ff ffa6 	bl	8006094 <_free_r>
 8006148:	4625      	mov	r5, r4
 800614a:	4628      	mov	r0, r5
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	f000 f81d 	bl	800618e <_malloc_usable_size_r>
 8006154:	4284      	cmp	r4, r0
 8006156:	4607      	mov	r7, r0
 8006158:	d802      	bhi.n	8006160 <_realloc_r+0x34>
 800615a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800615e:	d812      	bhi.n	8006186 <_realloc_r+0x5a>
 8006160:	4621      	mov	r1, r4
 8006162:	4640      	mov	r0, r8
 8006164:	f7ff fbfc 	bl	8005960 <_malloc_r>
 8006168:	4605      	mov	r5, r0
 800616a:	2800      	cmp	r0, #0
 800616c:	d0ed      	beq.n	800614a <_realloc_r+0x1e>
 800616e:	42bc      	cmp	r4, r7
 8006170:	4622      	mov	r2, r4
 8006172:	4631      	mov	r1, r6
 8006174:	bf28      	it	cs
 8006176:	463a      	movcs	r2, r7
 8006178:	f7ff fbc3 	bl	8005902 <memcpy>
 800617c:	4631      	mov	r1, r6
 800617e:	4640      	mov	r0, r8
 8006180:	f7ff ff88 	bl	8006094 <_free_r>
 8006184:	e7e1      	b.n	800614a <_realloc_r+0x1e>
 8006186:	4635      	mov	r5, r6
 8006188:	e7df      	b.n	800614a <_realloc_r+0x1e>

0800618a <__retarget_lock_acquire_recursive>:
 800618a:	4770      	bx	lr

0800618c <__retarget_lock_release_recursive>:
 800618c:	4770      	bx	lr

0800618e <_malloc_usable_size_r>:
 800618e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006192:	1f18      	subs	r0, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfbc      	itt	lt
 8006198:	580b      	ldrlt	r3, [r1, r0]
 800619a:	18c0      	addlt	r0, r0, r3
 800619c:	4770      	bx	lr
	...

080061a0 <_init>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr

080061ac <_fini>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr
