
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007010  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c454  0800c454  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c45c  0800c45c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c460  0800c460  0001c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000168  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010336  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e1e  00000000  00000000  000303de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da8  00000000  00000000  00034160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230bd  00000000  00000000  00034f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015486  00000000  00000000  00057fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd21b  00000000  00000000  0006d44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a666  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004178  00000000  00000000  0013a6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800542c 	.word	0x0800542c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800542c 	.word	0x0800542c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <button_init+0x14>)
 800058e:	f002 faaf 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	482f      	ldr	r0, [pc, #188]	; (8000664 <button_Scan+0xc8>)
 80005a8:	f002 faa2 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	482c      	ldr	r0, [pc, #176]	; (8000664 <button_Scan+0xc8>)
 80005b2:	f002 fa9d 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005b6:	230a      	movs	r3, #10
 80005b8:	2202      	movs	r2, #2
 80005ba:	492b      	ldr	r1, [pc, #172]	; (8000668 <button_Scan+0xcc>)
 80005bc:	482b      	ldr	r0, [pc, #172]	; (800066c <button_Scan+0xd0>)
 80005be:	f003 f8da 	bl	8003776 <HAL_SPI_Receive>
	  int button_index = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e03f      	b.n	8000652 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db06      	blt.n	80005e6 <button_Scan+0x4a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	dc03      	bgt.n	80005e6 <button_Scan+0x4a>
			  button_index = i + 4;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3304      	adds	r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e018      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	dd07      	ble.n	80005fc <button_Scan+0x60>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	dc04      	bgt.n	80005fc <button_Scan+0x60>
			  button_index = 7 - i;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f1c3 0307 	rsb	r3, r3, #7
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e00d      	b.n	8000618 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	dd06      	ble.n	8000610 <button_Scan+0x74>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0b      	cmp	r3, #11
 8000606:	dc03      	bgt.n	8000610 <button_Scan+0x74>
			  button_index = i + 4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e003      	b.n	8000618 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f1c3 0317 	rsb	r3, r3, #23
 8000616:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <button_Scan+0xcc>)
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	4013      	ands	r3, r2
 8000620:	b29b      	uxth	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <button_Scan+0x96>
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2100      	movs	r1, #0
 800062c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000630:	e009      	b.n	8000646 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063a:	3301      	adds	r3, #1
 800063c:	b299      	uxth	r1, r3
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <button_Scan+0xd4>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	ddbc      	ble.n	80005d2 <button_Scan+0x36>
	  }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020c00 	.word	0x40020c00
 8000668:	200000b4 	.word	0x200000b4
 800066c:	20000128 	.word	0x20000128
 8000670:	20000094 	.word	0x20000094

08000674 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	; 0x38
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]
 800069e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_FSMC_Init+0xec>)
 80006a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80006a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_FSMC_Init+0xec>)
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <MX_FSMC_Init+0xf0>)
 80006ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <MX_FSMC_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_FSMC_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_FSMC_Init+0xec>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_FSMC_Init+0xec>)
 80006c2:	2210      	movs	r2, #16
 80006c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_FSMC_Init+0xec>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_FSMC_Init+0xec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_FSMC_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_FSMC_Init+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_FSMC_Init+0xec>)
 80006e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_FSMC_Init+0xec>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_FSMC_Init+0xec>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_FSMC_Init+0xec>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_FSMC_Init+0xec>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_FSMC_Init+0xec>)
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000706:	230f      	movs	r3, #15
 8000708:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800070a:	230f      	movs	r3, #15
 800070c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800070e:	233c      	movs	r3, #60	; 0x3c
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000716:	2310      	movs	r3, #16
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800071a:	2311      	movs	r3, #17
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800071e:	2300      	movs	r3, #0
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000722:	2308      	movs	r3, #8
 8000724:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000726:	230f      	movs	r3, #15
 8000728:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800072a:	2309      	movs	r3, #9
 800072c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000732:	2310      	movs	r3, #16
 8000734:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000736:	2311      	movs	r3, #17
 8000738:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800073e:	463a      	mov	r2, r7
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_FSMC_Init+0xec>)
 8000748:	f003 fbf8 	bl	8003f3c <HAL_SRAM_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000752:	f001 f8d9 	bl	8001908 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000756:	bf00      	nop
 8000758:	3738      	adds	r7, #56	; 0x38
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000b8 	.word	0x200000b8
 8000764:	a0000104 	.word	0xa0000104

08000768 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_FSMC_MspInit+0x88>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d131      	bne.n	80007e8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_FSMC_MspInit+0x88>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_FSMC_MspInit+0x8c>)
 8000790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <HAL_FSMC_MspInit+0x8c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6393      	str	r3, [r2, #56]	; 0x38
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_FSMC_MspInit+0x8c>)
 800079c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80007a6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80007aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007b8:	230c      	movs	r3, #12
 80007ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <HAL_FSMC_MspInit+0x90>)
 80007c2:	f001 fff9 	bl	80027b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007c6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80007ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007d8:	230c      	movs	r3, #12
 80007da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_FSMC_MspInit+0x94>)
 80007e2:	f001 ffe9 	bl	80027b8 <HAL_GPIO_Init>
 80007e6:	e000      	b.n	80007ea <HAL_FSMC_MspInit+0x82>
    return;
 80007e8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000108 	.word	0x20000108
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40020c00 	.word	0x40020c00

08000800 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000808:	f7ff ffae 	bl	8000768 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b6f      	ldr	r3, [pc, #444]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a6e      	ldr	r2, [pc, #440]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b6c      	ldr	r3, [pc, #432]	; (80009ec <MX_GPIO_Init+0x1d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b68      	ldr	r3, [pc, #416]	; (80009ec <MX_GPIO_Init+0x1d8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a67      	ldr	r2, [pc, #412]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b65      	ldr	r3, [pc, #404]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b61      	ldr	r3, [pc, #388]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a60      	ldr	r2, [pc, #384]	; (80009ec <MX_GPIO_Init+0x1d8>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a59      	ldr	r2, [pc, #356]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b57      	ldr	r3, [pc, #348]	; (80009ec <MX_GPIO_Init+0x1d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b53      	ldr	r3, [pc, #332]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a52      	ldr	r2, [pc, #328]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b50      	ldr	r3, [pc, #320]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b4c      	ldr	r3, [pc, #304]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a4b      	ldr	r2, [pc, #300]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b49      	ldr	r3, [pc, #292]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b45      	ldr	r3, [pc, #276]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a44      	ldr	r2, [pc, #272]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b42      	ldr	r3, [pc, #264]	; (80009ec <MX_GPIO_Init+0x1d8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2170      	movs	r1, #112	; 0x70
 80008f2:	483f      	ldr	r0, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x1dc>)
 80008f4:	f002 f8fc 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <MX_GPIO_Init+0x1e0>)
 8000900:	f002 f8f6 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	483b      	ldr	r0, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 800090a:	f002 f8f1 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000914:	4839      	ldr	r0, [pc, #228]	; (80009fc <MX_GPIO_Init+0x1e8>)
 8000916:	f002 f8eb 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2108      	movs	r1, #8
 800091e:	4838      	ldr	r0, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 8000920:	f002 f8e6 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000924:	2370      	movs	r3, #112	; 0x70
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	482d      	ldr	r0, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x1dc>)
 800093c:	f001 ff3c 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x1e0>)
 800095a:	f001 ff2d 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4822      	ldr	r0, [pc, #136]	; (80009fc <MX_GPIO_Init+0x1e8>)
 8000972:	f001 ff21 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000976:	2330      	movs	r3, #48	; 0x30
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x1e0>)
 800098a:	f001 ff15 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_GPIO_Init+0x1e4>)
 80009a6:	f001 ff07 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480e      	ldr	r0, [pc, #56]	; (80009fc <MX_GPIO_Init+0x1e8>)
 80009c4:	f001 fef8 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009c8:	2308      	movs	r3, #8
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_GPIO_Init+0x1ec>)
 80009e0:	f001 feea 	bl	80027b8 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LCD_WR_REG+0x1c>)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	8013      	strh	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	600ffffe 	.word	0x600ffffe

08000a24 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <LCD_WR_DATA+0x1c>)
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	8053      	strh	r3, [r2, #2]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	600ffffe 	.word	0x600ffffe

08000a44 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <LCD_RD_DATA+0x20>)
 8000a4c:	885b      	ldrh	r3, [r3, #2]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	b29b      	uxth	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	600ffffe 	.word	0x600ffffe

08000a68 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	80fb      	strh	r3, [r7, #6]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80bb      	strh	r3, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	807b      	strh	r3, [r7, #2]
 8000a82:	4613      	mov	r3, r2
 8000a84:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000a86:	202a      	movs	r0, #42	; 0x2a
 8000a88:	f7ff ffbc 	bl	8000a04 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffc6 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffc0 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffba 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffb4 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000abc:	202b      	movs	r0, #43	; 0x2b
 8000abe:	f7ff ffa1 	bl	8000a04 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffab 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffa5 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ada:	883b      	ldrh	r3, [r7, #0]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff9f 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ae6:	883b      	ldrh	r3, [r7, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff99 	bl	8000a24 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000af2:	202c      	movs	r0, #44	; 0x2c
 8000af4:	f7ff ff86 	bl	8000a04 <LCD_WR_REG>
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}

08000b00 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <lcd_Clear+0x60>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <lcd_Clear+0x60>)
 8000b14:	885b      	ldrh	r3, [r3, #2]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ffa3 	bl	8000a68 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	81fb      	strh	r3, [r7, #14]
 8000b26:	e011      	b.n	8000b4c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
 8000b2c:	e006      	b.n	8000b3c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff77 	bl	8000a24 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	81bb      	strh	r3, [r7, #12]
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <lcd_Clear+0x60>)
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	89ba      	ldrh	r2, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3f3      	bcc.n	8000b2e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	81fb      	strh	r3, [r7, #14]
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <lcd_Clear+0x60>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	89fa      	ldrh	r2, [r7, #14]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3e8      	bcc.n	8000b28 <lcd_Clear+0x28>
		}
	}
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000118 	.word	0x20000118

08000b64 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4623      	mov	r3, r4
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	4603      	mov	r3, r0
 8000b78:	80bb      	strh	r3, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	807b      	strh	r3, [r7, #2]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	883b      	ldrh	r3, [r7, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	88b9      	ldrh	r1, [r7, #4]
 8000b90:	88f8      	ldrh	r0, [r7, #6]
 8000b92:	f7ff ff69 	bl	8000a68 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e010      	b.n	8000bbe <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	81bb      	strh	r3, [r7, #12]
 8000ba0:	e006      	b.n	8000bb0 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000ba2:	8c3b      	ldrh	r3, [r7, #32]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff3d 	bl	8000a24 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	81bb      	strh	r3, [r7, #12]
 8000bb0:	89ba      	ldrh	r2, [r7, #12]
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f4      	bcc.n	8000ba2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000bb8:	89fb      	ldrh	r3, [r7, #14]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	89fa      	ldrh	r2, [r7, #14]
 8000bc0:	883b      	ldrh	r3, [r7, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3ea      	bcc.n	8000b9c <lcd_Fill+0x38>
		}
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}

08000bd0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	88b9      	ldrh	r1, [r7, #4]
 8000be8:	88f8      	ldrh	r0, [r7, #6]
 8000bea:	f7ff ff3d 	bl	8000a68 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff17 	bl	8000a24 <LCD_WR_DATA>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000bfe:	b590      	push	{r4, r7, lr}
 8000c00:	b08d      	sub	sp, #52	; 0x34
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4604      	mov	r4, r0
 8000c06:	4608      	mov	r0, r1
 8000c08:	4611      	mov	r1, r2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	80fb      	strh	r3, [r7, #6]
 8000c10:	4603      	mov	r3, r0
 8000c12:	80bb      	strh	r3, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8000c2c:	883a      	ldrh	r2, [r7, #0]
 8000c2e:	88bb      	ldrh	r3, [r7, #4]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dd02      	ble.n	8000c48 <lcd_DrawLine+0x4a>
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e00b      	b.n	8000c60 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <lcd_DrawLine+0x56>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e005      	b.n	8000c60 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dd02      	ble.n	8000c6c <lcd_DrawLine+0x6e>
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e00b      	b.n	8000c84 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <lcd_DrawLine+0x7a>
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	e005      	b.n	8000c84 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	425b      	negs	r3, r3
 8000c82:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8000c84:	6a3a      	ldr	r2, [r7, #32]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dd02      	ble.n	8000c92 <lcd_DrawLine+0x94>
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	e001      	b.n	8000c96 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000c9a:	e02b      	b.n	8000cf4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	b291      	uxth	r1, r2
 8000ca4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff91 	bl	8000bd0 <lcd_DrawPoint>
		xerr+=delta_x;
 8000cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8000cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	4413      	add	r3, r2
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dd07      	ble.n	8000cd6 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8000cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dd07      	ble.n	8000cee <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8000cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8000cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dacf      	bge.n	8000c9c <lcd_DrawLine+0x9e>
		}
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3734      	adds	r7, #52	; 0x34
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}

08000d06 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8000d06:	b590      	push	{r4, r7, lr}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af02      	add	r7, sp, #8
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	4611      	mov	r1, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	4623      	mov	r3, r4
 8000d16:	80fb      	strh	r3, [r7, #6]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80bb      	strh	r3, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8000d24:	88bc      	ldrh	r4, [r7, #4]
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	88b9      	ldrh	r1, [r7, #4]
 8000d2a:	88f8      	ldrh	r0, [r7, #6]
 8000d2c:	8b3b      	ldrh	r3, [r7, #24]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4623      	mov	r3, r4
 8000d32:	f7ff ff64 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8000d36:	883c      	ldrh	r4, [r7, #0]
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	88b9      	ldrh	r1, [r7, #4]
 8000d3c:	88f8      	ldrh	r0, [r7, #6]
 8000d3e:	8b3b      	ldrh	r3, [r7, #24]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4623      	mov	r3, r4
 8000d44:	f7ff ff5b 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8000d48:	883c      	ldrh	r4, [r7, #0]
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	8839      	ldrh	r1, [r7, #0]
 8000d4e:	88f8      	ldrh	r0, [r7, #6]
 8000d50:	8b3b      	ldrh	r3, [r7, #24]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	4623      	mov	r3, r4
 8000d56:	f7ff ff52 	bl	8000bfe <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8000d5a:	883c      	ldrh	r4, [r7, #0]
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	88b9      	ldrh	r1, [r7, #4]
 8000d60:	8878      	ldrh	r0, [r7, #2]
 8000d62:	8b3b      	ldrh	r3, [r7, #24]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4623      	mov	r3, r4
 8000d68:	f7ff ff49 	bl	8000bfe <lcd_DrawLine>
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70fb      	strb	r3, [r7, #3]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d9e:	085b      	lsrs	r3, r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bf14      	ite	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	2300      	moveq	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	fb12 f303 	smulbb	r3, r2, r3
 8000dca:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	3b20      	subs	r3, #32
 8000dd0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b29c      	uxth	r4, r3
 8000de0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	88bb      	ldrh	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	88b9      	ldrh	r1, [r7, #4]
 8000df2:	88f8      	ldrh	r0, [r7, #6]
 8000df4:	4622      	mov	r2, r4
 8000df6:	f7ff fe37 	bl	8000a68 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	827b      	strh	r3, [r7, #18]
 8000dfe:	e07a      	b.n	8000ef6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e04:	2b0c      	cmp	r3, #12
 8000e06:	d028      	beq.n	8000e5a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000e08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d108      	bne.n	8000e22 <lcd_ShowChar+0xae>
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	8a7b      	ldrh	r3, [r7, #18]
 8000e14:	493c      	ldr	r1, [pc, #240]	; (8000f08 <lcd_ShowChar+0x194>)
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	440a      	add	r2, r1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	75fb      	strb	r3, [r7, #23]
 8000e20:	e01b      	b.n	8000e5a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e26:	2b18      	cmp	r3, #24
 8000e28:	d10b      	bne.n	8000e42 <lcd_ShowChar+0xce>
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	8a79      	ldrh	r1, [r7, #18]
 8000e2e:	4837      	ldr	r0, [pc, #220]	; (8000f0c <lcd_ShowChar+0x198>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4403      	add	r3, r0
 8000e3a:	440b      	add	r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	75fb      	strb	r3, [r7, #23]
 8000e40:	e00b      	b.n	8000e5a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e46:	2b20      	cmp	r3, #32
 8000e48:	d15a      	bne.n	8000f00 <lcd_ShowChar+0x18c>
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	8a7b      	ldrh	r3, [r7, #18]
 8000e4e:	4930      	ldr	r1, [pc, #192]	; (8000f10 <lcd_ShowChar+0x19c>)
 8000e50:	0192      	lsls	r2, r2, #6
 8000e52:	440a      	add	r2, r1
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75bb      	strb	r3, [r7, #22]
 8000e5e:	e044      	b.n	8000eea <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d120      	bne.n	8000eaa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e68:	7dfa      	ldrb	r2, [r7, #23]
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	fa42 f303 	asr.w	r3, r2, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <lcd_ShowChar+0x10e>
 8000e78:	883b      	ldrh	r3, [r7, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fdd2 	bl	8000a24 <LCD_WR_DATA>
 8000e80:	e003      	b.n	8000e8a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fdcd 	bl	8000a24 <LCD_WR_DATA>
				m++;
 8000e8a:	7d7b      	ldrb	r3, [r7, #21]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e98:	fb01 f202 	mul.w	r2, r1, r2
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11f      	bne.n	8000ee4 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	757b      	strb	r3, [r7, #21]
					break;
 8000ea8:	e022      	b.n	8000ef0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000eaa:	7dfa      	ldrb	r2, [r7, #23]
 8000eac:	7dbb      	ldrb	r3, [r7, #22]
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <lcd_ShowChar+0x152>
 8000eba:	883a      	ldrh	r2, [r7, #0]
 8000ebc:	88b9      	ldrh	r1, [r7, #4]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe85 	bl	8000bd0 <lcd_DrawPoint>
				x++;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	8a3b      	ldrh	r3, [r7, #16]
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d105      	bne.n	8000ee4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ed8:	8a3b      	ldrh	r3, [r7, #16]
 8000eda:	80fb      	strh	r3, [r7, #6]
					y++;
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	80bb      	strh	r3, [r7, #4]
					break;
 8000ee2:	e005      	b.n	8000ef0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ee4:	7dbb      	ldrb	r3, [r7, #22]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	75bb      	strb	r3, [r7, #22]
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d9b7      	bls.n	8000e60 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	827b      	strh	r3, [r7, #18]
 8000ef6:	8a7a      	ldrh	r2, [r7, #18]
 8000ef8:	89bb      	ldrh	r3, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d380      	bcc.n	8000e00 <lcd_ShowChar+0x8c>
 8000efe:	e000      	b.n	8000f02 <lcd_ShowChar+0x18e>
		else return;
 8000f00:	bf00      	nop
				}
			}
		}
	}
}
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	08005548 	.word	0x08005548
 8000f0c:	08005b38 	.word	0x08005b38
 8000f10:	08006d08 	.word	0x08006d08

08000f14 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	4611      	mov	r1, r2
 8000f20:	461a      	mov	r2, r3
 8000f22:	4623      	mov	r3, r4
 8000f24:	80fb      	strh	r3, [r7, #6]
 8000f26:	4603      	mov	r3, r0
 8000f28:	80bb      	strh	r3, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	b29c      	uxth	r4, r3
 8000f42:	88ba      	ldrh	r2, [r7, #4]
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	88b9      	ldrh	r1, [r7, #4]
 8000f50:	88f8      	ldrh	r0, [r7, #6]
 8000f52:	4622      	mov	r2, r4
 8000f54:	f7ff fd88 	bl	8000a68 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	82fb      	strh	r3, [r7, #22]
 8000f5c:	e027      	b.n	8000fae <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	82bb      	strh	r3, [r7, #20]
 8000f62:	e01d      	b.n	8000fa0 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3301      	adds	r3, #1
 8000f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd48 	bl	8000a24 <LCD_WR_DATA>
			k++;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	3301      	adds	r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000f9a:	8abb      	ldrh	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	8aba      	ldrh	r2, [r7, #20]
 8000fa2:	883b      	ldrh	r3, [r7, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3dd      	bcc.n	8000f64 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000fa8:	8afb      	ldrh	r3, [r7, #22]
 8000faa:	3301      	adds	r3, #1
 8000fac:	82fb      	strh	r3, [r7, #22]
 8000fae:	8afa      	ldrh	r2, [r7, #22]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3d3      	bcc.n	8000f5e <lcd_ShowPicture+0x4a>
		}
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}

08000fc0 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <lcd_SetDir+0x44>)
 8000fdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fe0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <lcd_SetDir+0x44>)
 8000fe4:	22f0      	movs	r2, #240	; 0xf0
 8000fe6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000fe8:	e006      	b.n	8000ff8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <lcd_SetDir+0x44>)
 8000fec:	22f0      	movs	r2, #240	; 0xf0
 8000fee:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <lcd_SetDir+0x44>)
 8000ff2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ff6:	805a      	strh	r2, [r3, #2]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000118 	.word	0x20000118

08001008 <lcd_init>:


void lcd_init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001012:	48aa      	ldr	r0, [pc, #680]	; (80012bc <lcd_init+0x2b4>)
 8001014:	f001 fd6c 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f001 fa96 	bl	800254c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	48a5      	ldr	r0, [pc, #660]	; (80012bc <lcd_init+0x2b4>)
 8001028:	f001 fd62 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800102c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001030:	f001 fa8c 	bl	800254c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ffc3 	bl	8000fc0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800103a:	20d3      	movs	r0, #211	; 0xd3
 800103c:	f7ff fce2 	bl	8000a04 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001040:	f7ff fd00 	bl	8000a44 <LCD_RD_DATA>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b9d      	ldr	r3, [pc, #628]	; (80012c0 <lcd_init+0x2b8>)
 800104a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800104c:	f7ff fcfa 	bl	8000a44 <LCD_RD_DATA>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <lcd_init+0x2b8>)
 8001056:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001058:	f7ff fcf4 	bl	8000a44 <LCD_RD_DATA>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b97      	ldr	r3, [pc, #604]	; (80012c0 <lcd_init+0x2b8>)
 8001062:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001064:	4b96      	ldr	r3, [pc, #600]	; (80012c0 <lcd_init+0x2b8>)
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b94      	ldr	r3, [pc, #592]	; (80012c0 <lcd_init+0x2b8>)
 800106e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001070:	f7ff fce8 	bl	8000a44 <LCD_RD_DATA>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b91      	ldr	r3, [pc, #580]	; (80012c0 <lcd_init+0x2b8>)
 800107a:	889b      	ldrh	r3, [r3, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <lcd_init+0x2b8>)
 8001082:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001084:	20cf      	movs	r0, #207	; 0xcf
 8001086:	f7ff fcbd 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff fcca 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001090:	20c1      	movs	r0, #193	; 0xc1
 8001092:	f7ff fcc7 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001096:	2030      	movs	r0, #48	; 0x30
 8001098:	f7ff fcc4 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800109c:	20ed      	movs	r0, #237	; 0xed
 800109e:	f7ff fcb1 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80010a2:	2064      	movs	r0, #100	; 0x64
 80010a4:	f7ff fcbe 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff fcbb 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80010ae:	2012      	movs	r0, #18
 80010b0:	f7ff fcb8 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80010b4:	2081      	movs	r0, #129	; 0x81
 80010b6:	f7ff fcb5 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80010ba:	20e8      	movs	r0, #232	; 0xe8
 80010bc:	f7ff fca2 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80010c0:	2085      	movs	r0, #133	; 0x85
 80010c2:	f7ff fcaf 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010c6:	2010      	movs	r0, #16
 80010c8:	f7ff fcac 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80010cc:	207a      	movs	r0, #122	; 0x7a
 80010ce:	f7ff fca9 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80010d2:	20cb      	movs	r0, #203	; 0xcb
 80010d4:	f7ff fc96 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80010d8:	2039      	movs	r0, #57	; 0x39
 80010da:	f7ff fca3 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80010de:	202c      	movs	r0, #44	; 0x2c
 80010e0:	f7ff fca0 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fc9d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80010ea:	2034      	movs	r0, #52	; 0x34
 80010ec:	f7ff fc9a 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f7ff fc97 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80010f6:	20f7      	movs	r0, #247	; 0xf7
 80010f8:	f7ff fc84 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80010fc:	2020      	movs	r0, #32
 80010fe:	f7ff fc91 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001102:	20ea      	movs	r0, #234	; 0xea
 8001104:	f7ff fc7e 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fc8b 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fc88 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001114:	20c0      	movs	r0, #192	; 0xc0
 8001116:	f7ff fc75 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800111a:	201b      	movs	r0, #27
 800111c:	f7ff fc82 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001120:	20c1      	movs	r0, #193	; 0xc1
 8001122:	f7ff fc6f 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fc7c 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800112c:	20c5      	movs	r0, #197	; 0xc5
 800112e:	f7ff fc69 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001132:	2030      	movs	r0, #48	; 0x30
 8001134:	f7ff fc76 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001138:	2030      	movs	r0, #48	; 0x30
 800113a:	f7ff fc73 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800113e:	20c7      	movs	r0, #199	; 0xc7
 8001140:	f7ff fc60 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001144:	20b7      	movs	r0, #183	; 0xb7
 8001146:	f7ff fc6d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800114a:	2036      	movs	r0, #54	; 0x36
 800114c:	f7ff fc5a 	bl	8000a04 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001150:	2008      	movs	r0, #8
 8001152:	f7ff fc67 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001156:	203a      	movs	r0, #58	; 0x3a
 8001158:	f7ff fc54 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800115c:	2055      	movs	r0, #85	; 0x55
 800115e:	f7ff fc61 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001162:	20b1      	movs	r0, #177	; 0xb1
 8001164:	f7ff fc4e 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fc5b 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800116e:	201a      	movs	r0, #26
 8001170:	f7ff fc58 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001174:	20b6      	movs	r0, #182	; 0xb6
 8001176:	f7ff fc45 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800117a:	200a      	movs	r0, #10
 800117c:	f7ff fc52 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001180:	20a2      	movs	r0, #162	; 0xa2
 8001182:	f7ff fc4f 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001186:	20f2      	movs	r0, #242	; 0xf2
 8001188:	f7ff fc3c 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fc49 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001192:	2026      	movs	r0, #38	; 0x26
 8001194:	f7ff fc36 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fc43 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800119e:	20e0      	movs	r0, #224	; 0xe0
 80011a0:	f7ff fc30 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fc3d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80011aa:	202a      	movs	r0, #42	; 0x2a
 80011ac:	f7ff fc3a 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80011b0:	2028      	movs	r0, #40	; 0x28
 80011b2:	f7ff fc37 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011b6:	2008      	movs	r0, #8
 80011b8:	f7ff fc34 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80011bc:	200e      	movs	r0, #14
 80011be:	f7ff fc31 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011c2:	2008      	movs	r0, #8
 80011c4:	f7ff fc2e 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80011c8:	2054      	movs	r0, #84	; 0x54
 80011ca:	f7ff fc2b 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80011ce:	20a9      	movs	r0, #169	; 0xa9
 80011d0:	f7ff fc28 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80011d4:	2043      	movs	r0, #67	; 0x43
 80011d6:	f7ff fc25 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80011da:	200a      	movs	r0, #10
 80011dc:	f7ff fc22 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011e0:	200f      	movs	r0, #15
 80011e2:	f7ff fc1f 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fc1c 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fc19 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fc16 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fc13 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80011fe:	20e1      	movs	r0, #225	; 0xe1
 8001200:	f7ff fc00 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fc0d 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800120a:	2015      	movs	r0, #21
 800120c:	f7ff fc0a 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001210:	2017      	movs	r0, #23
 8001212:	f7ff fc07 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001216:	2007      	movs	r0, #7
 8001218:	f7ff fc04 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800121c:	2011      	movs	r0, #17
 800121e:	f7ff fc01 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001222:	2006      	movs	r0, #6
 8001224:	f7ff fbfe 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001228:	202b      	movs	r0, #43	; 0x2b
 800122a:	f7ff fbfb 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800122e:	2056      	movs	r0, #86	; 0x56
 8001230:	f7ff fbf8 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001234:	203c      	movs	r0, #60	; 0x3c
 8001236:	f7ff fbf5 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800123a:	2005      	movs	r0, #5
 800123c:	f7ff fbf2 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001240:	2010      	movs	r0, #16
 8001242:	f7ff fbef 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001246:	200f      	movs	r0, #15
 8001248:	f7ff fbec 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800124c:	203f      	movs	r0, #63	; 0x3f
 800124e:	f7ff fbe9 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001252:	203f      	movs	r0, #63	; 0x3f
 8001254:	f7ff fbe6 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001258:	200f      	movs	r0, #15
 800125a:	f7ff fbe3 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800125e:	202b      	movs	r0, #43	; 0x2b
 8001260:	f7ff fbd0 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fbdd 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fbda 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fbd7 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001276:	203f      	movs	r0, #63	; 0x3f
 8001278:	f7ff fbd4 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800127c:	202a      	movs	r0, #42	; 0x2a
 800127e:	f7ff fbc1 	bl	8000a04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fbce 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fbcb 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fbc8 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001294:	20ef      	movs	r0, #239	; 0xef
 8001296:	f7ff fbc5 	bl	8000a24 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800129a:	2011      	movs	r0, #17
 800129c:	f7ff fbb2 	bl	8000a04 <LCD_WR_REG>
	HAL_Delay(120);
 80012a0:	2078      	movs	r0, #120	; 0x78
 80012a2:	f001 f953 	bl	800254c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80012a6:	2029      	movs	r0, #41	; 0x29
 80012a8:	f7ff fbac 	bl	8000a04 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <lcd_init+0x2bc>)
 80012b4:	f001 fc1c 	bl	8002af0 <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40020800 	.word	0x40020800
 80012c0:	20000118 	.word	0x20000118
 80012c4:	40020000 	.word	0x40020000

080012c8 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b298      	uxth	r0, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	8b3a      	ldrh	r2, [r7, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc6d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b298      	uxth	r0, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b29a      	uxth	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	8b3a      	ldrh	r2, [r7, #24]
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc5d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b298      	uxth	r0, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b29a      	uxth	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	8b3a      	ldrh	r2, [r7, #24]
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc4d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b298      	uxth	r0, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	b29a      	uxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	8b3a      	ldrh	r2, [r7, #24]
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc3d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	b29a      	uxth	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b298      	uxth	r0, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fc2d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	b29a      	uxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b298      	uxth	r0, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	8b3a      	ldrh	r2, [r7, #24]
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc1d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	b29a      	uxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	b298      	uxth	r0, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	8b3a      	ldrh	r2, [r7, #24]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc0d 	bl	8000bd0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b298      	uxth	r0, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	8b3a      	ldrh	r2, [r7, #24]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbfd 	bl	8000bd0 <lcd_DrawPoint>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b08a      	sub	sp, #40	; 0x28
 80013e2:	af02      	add	r7, sp, #8
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4613      	mov	r3, r2
 80013ec:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	f1c3 0303 	rsb	r3, r3, #3
 80013fe:	613b      	str	r3, [r7, #16]


	if (fill)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	2b00      	cmp	r3, #0
 8001404:	d04f      	beq.n	80014a6 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001406:	e029      	b.n	800145c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e00a      	b.n	8001424 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff ff55 	bl	80012c8 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	429a      	cmp	r2, r3
 800142a:	ddf0      	ble.n	800140e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da06      	bge.n	8001440 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4413      	add	r3, r2
 800143a:	3306      	adds	r3, #6
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	e00a      	b.n	8001456 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	009a      	lsls	r2, r3, #2
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4413      	add	r3, r2
 800144c:	330a      	adds	r3, #10
 800144e:	613b      	str	r3, [r7, #16]
				y--;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3b01      	subs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	429a      	cmp	r2, r3
 8001462:	ddd1      	ble.n	8001408 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001464:	e023      	b.n	80014ae <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff ff29 	bl	80012c8 <_draw_circle_8>
			if (d < 0) {
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da06      	bge.n	800148a <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	009a      	lsls	r2, r3, #2
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4413      	add	r3, r2
 8001484:	3306      	adds	r3, #6
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e00a      	b.n	80014a0 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	009a      	lsls	r2, r3, #2
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	330a      	adds	r3, #10
 8001498:	613b      	str	r3, [r7, #16]
				y--;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	3b01      	subs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
			x++;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dddb      	ble.n	8001466 <lcd_DrawCircle+0x88>
}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af04      	add	r7, sp, #16
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	81fb      	strh	r3, [r7, #14]
 80014c6:	460b      	mov	r3, r1
 80014c8:	81bb      	strh	r3, [r7, #12]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80014d6:	e048      	b.n	800156a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d145      	bne.n	800156a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014de:	89fa      	ldrh	r2, [r7, #14]
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <lcd_ShowStr+0xc4>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	1acb      	subs	r3, r1, r3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dc3f      	bgt.n	8001574 <lcd_ShowStr+0xbc>
 80014f4:	89ba      	ldrh	r2, [r7, #12]
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <lcd_ShowStr+0xc4>)
 80014f8:	885b      	ldrh	r3, [r3, #2]
 80014fa:	4619      	mov	r1, r3
 80014fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	429a      	cmp	r2, r3
 8001504:	dc36      	bgt.n	8001574 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b80      	cmp	r3, #128	; 0x80
 800150c:	d902      	bls.n	8001514 <lcd_ShowStr+0x5c>
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
 8001512:	e02a      	b.n	800156a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b0d      	cmp	r3, #13
 800151a:	d10b      	bne.n	8001534 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800151c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001520:	b29a      	uxth	r2, r3
 8001522:	89bb      	ldrh	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001528:	8abb      	ldrh	r3, [r7, #20]
 800152a:	81fb      	strh	r3, [r7, #14]
					str++;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	e017      	b.n	8001564 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	88fc      	ldrh	r4, [r7, #6]
 800153a:	89b9      	ldrh	r1, [r7, #12]
 800153c:	89f8      	ldrh	r0, [r7, #14]
 800153e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	f7ff fc10 	bl	8000d74 <lcd_ShowChar>
					x+=sizey/2;
 8001554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	b29a      	uxth	r2, r3
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4413      	add	r3, r2
 8001562:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1b2      	bne.n	80014d8 <lcd_ShowStr+0x20>
 8001572:	e000      	b.n	8001576 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001574:	bf00      	nop
			}
		}
	}
}
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000118 	.word	0x20000118

08001580 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af04      	add	r7, sp, #16
 8001586:	60ba      	str	r2, [r7, #8]
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	81fb      	strh	r3, [r7, #14]
 800158e:	460b      	mov	r3, r1
 8001590:	81bb      	strh	r3, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001596:	68b8      	ldr	r0, [r7, #8]
 8001598:	f7fe fe1a 	bl	80001d0 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <lcd_StrCenter+0x60>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	8afb      	ldrh	r3, [r7, #22]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	0fda      	lsrs	r2, r3, #31
 80015ae:	4413      	add	r3, r2
 80015b0:	105b      	asrs	r3, r3, #1
 80015b2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	8abb      	ldrh	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	b298      	uxth	r0, r3
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	89b9      	ldrh	r1, [r7, #12]
 80015c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	8c3b      	ldrh	r3, [r7, #32]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f7ff ff70 	bl	80014b8 <lcd_ShowStr>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000118 	.word	0x20000118

080015e4 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <led7_init+0x14>)
 80015ee:	f001 fa7f 	bl	8002af0 <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021800 	.word	0x40021800

080015fc <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001600:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <led7_Scan+0x104>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <led7_Scan+0x104>)
 800160a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <led7_Scan+0x108>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <led7_Scan+0x10c>)
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <led7_Scan+0x104>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <led7_Scan+0x104>)
 8001628:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <led7_Scan+0x108>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d846      	bhi.n	80016c0 <led7_Scan+0xc4>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <led7_Scan+0x3c>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001649 	.word	0x08001649
 800163c:	08001667 	.word	0x08001667
 8001640:	08001685 	.word	0x08001685
 8001644:	080016a3 	.word	0x080016a3
	case 0:
		spi_buffer |= 0x00b0;
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <led7_Scan+0x104>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <led7_Scan+0x104>)
 8001654:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <led7_Scan+0x104>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <led7_Scan+0x104>)
 8001662:	801a      	strh	r2, [r3, #0]
		break;
 8001664:	e02d      	b.n	80016c2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <led7_Scan+0x104>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <led7_Scan+0x104>)
 8001672:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <led7_Scan+0x104>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f023 0320 	bic.w	r3, r3, #32
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <led7_Scan+0x104>)
 8001680:	801a      	strh	r2, [r3, #0]
		break;
 8001682:	e01e      	b.n	80016c2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <led7_Scan+0x104>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <led7_Scan+0x104>)
 8001690:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <led7_Scan+0x104>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	f023 0310 	bic.w	r3, r3, #16
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <led7_Scan+0x104>)
 800169e:	801a      	strh	r2, [r3, #0]
		break;
 80016a0:	e00f      	b.n	80016c2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <led7_Scan+0x104>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <led7_Scan+0x104>)
 80016ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <led7_Scan+0x104>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <led7_Scan+0x104>)
 80016bc:	801a      	strh	r2, [r3, #0]
		break;
 80016be:	e000      	b.n	80016c2 <led7_Scan+0xc6>
	default:
		break;
 80016c0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <led7_Scan+0x108>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	425a      	negs	r2, r3
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	bf58      	it	pl
 80016d4:	4253      	negpl	r3, r2
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <led7_Scan+0x108>)
 80016da:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <led7_Scan+0x110>)
 80016e2:	f001 fa05 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016e6:	2301      	movs	r3, #1
 80016e8:	2202      	movs	r2, #2
 80016ea:	4905      	ldr	r1, [pc, #20]	; (8001700 <led7_Scan+0x104>)
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <led7_Scan+0x114>)
 80016ee:	f001 ff06 	bl	80034fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2140      	movs	r1, #64	; 0x40
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <led7_Scan+0x110>)
 80016f8:	f001 f9fa 	bl	8002af0 <HAL_GPIO_WritePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000004 	.word	0x20000004
 8001704:	2000011e 	.word	0x2000011e
 8001708:	20000000 	.word	0x20000000
 800170c:	40021800 	.word	0x40021800
 8001710:	20000128 	.word	0x20000128

08001714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001718:	f000 fea6 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171c:	f000 f820 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001720:	f7ff f878 	bl	8000814 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001724:	f000 fe04 	bl	8002330 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001728:	f000 fa08 	bl	8001b3c <MX_SPI1_Init>
  MX_FSMC_Init();
 800172c:	f7fe ffa2 	bl	8000674 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001730:	f000 f880 	bl	8001834 <system_init>
  lcd_Clear(WHITE);
 8001734:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001738:	f7ff f9e2 	bl	8000b00 <lcd_Clear>
  test_lcd();
 800173c:	f000 f89a 	bl	8001874 <test_lcd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8001740:	bf00      	nop
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <main+0x48>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0fb      	beq.n	8001742 <main+0x2e>
	  flag_timer2 = 0;
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <main+0x48>)
 800174c:	2200      	movs	r2, #0
 800174e:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001750:	f7fe ff24 	bl	800059c <button_Scan>
	  beginStartGame();
 8001754:	f000 fb56 	bl	8001e04 <beginStartGame>
  {
 8001758:	e7f2      	b.n	8001740 <main+0x2c>
 800175a:	bf00      	nop
 800175c:	20000120 	.word	0x20000120

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	; 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	2230      	movs	r2, #48	; 0x30
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f9a4 	bl	8004abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <SystemClock_Config+0xcc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <SystemClock_Config+0xcc>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <SystemClock_Config+0xcc>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <SystemClock_Config+0xd0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <SystemClock_Config+0xd0>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <SystemClock_Config+0xd0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c4:	2310      	movs	r3, #16
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d0:	2308      	movs	r3, #8
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017d4:	23a8      	movs	r3, #168	; 0xa8
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017dc:	2304      	movs	r3, #4
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 f99d 	bl	8002b24 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f0:	f000 f88a 	bl	8001908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800180a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2105      	movs	r1, #5
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fbfe 	bl	8003014 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800181e:	f000 f873 	bl	8001908 <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	; 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40007000 	.word	0x40007000

08001834 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2120      	movs	r1, #32
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <system_init+0x3c>)
 800183e:	f001 f957 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <system_init+0x3c>)
 8001848:	f001 f952 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2110      	movs	r1, #16
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <system_init+0x3c>)
 8001852:	f001 f94d 	bl	8002af0 <HAL_GPIO_WritePin>
	  timer_init();
 8001856:	f000 f921 	bl	8001a9c <timer_init>
	  led7_init();
 800185a:	f7ff fec3 	bl	80015e4 <led7_init>
	  button_init();
 800185e:	f7fe fe91 	bl	8000584 <button_init>
	  lcd_init();
 8001862:	f7ff fbd1 	bl	8001008 <lcd_init>
	  setTimer2(200);
 8001866:	20c8      	movs	r0, #200	; 0xc8
 8001868:	f000 f922 	bl	8001ab0 <setTimer2>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 20, BLUE);
 800187a:	231f      	movs	r3, #31
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2314      	movs	r3, #20
 8001880:	22f0      	movs	r2, #240	; 0xf0
 8001882:	2100      	movs	r1, #0
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff f96d 	bl	8000b64 <lcd_Fill>
	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 800188a:	2301      	movs	r3, #1
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2310      	movs	r3, #16
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	231f      	movs	r3, #31
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <test_lcd+0x88>)
 800189c:	2102      	movs	r1, #2
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fe6e 	bl	8001580 <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
 80018a4:	2300      	movs	r3, #0
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	2318      	movs	r3, #24
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <test_lcd+0x8c>)
 80018b8:	211e      	movs	r1, #30
 80018ba:	2014      	movs	r0, #20
 80018bc:	f7ff fdfc 	bl	80014b8 <lcd_ShowStr>
	lcd_DrawCircle(60, 120, GREEN, 40, 1);
 80018c0:	2301      	movs	r3, #1
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2328      	movs	r3, #40	; 0x28
 80018c6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80018ca:	2178      	movs	r1, #120	; 0x78
 80018cc:	203c      	movs	r0, #60	; 0x3c
 80018ce:	f7ff fd86 	bl	80013de <lcd_DrawCircle>
	lcd_DrawCircle(160, 120, BRED, 40, 0);
 80018d2:	2300      	movs	r3, #0
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2328      	movs	r3, #40	; 0x28
 80018d8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80018dc:	2178      	movs	r1, #120	; 0x78
 80018de:	20a0      	movs	r0, #160	; 0xa0
 80018e0:	f7ff fd7d 	bl	80013de <lcd_DrawCircle>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <test_lcd+0x90>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	235a      	movs	r3, #90	; 0x5a
 80018ea:	225a      	movs	r2, #90	; 0x5a
 80018ec:	21c8      	movs	r1, #200	; 0xc8
 80018ee:	2050      	movs	r0, #80	; 0x50
 80018f0:	f7ff fb10 	bl	8000f14 <lcd_ShowPicture>
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	08005444 	.word	0x08005444
 8001900:	08005454 	.word	0x08005454
 8001904:	080084c8 	.word	0x080084c8

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	e7fe      	b.n	8001910 <Error_Handler+0x8>
	...

08001914 <convert2str>:
#include "global.h"

uint8_t wall_size = 10;

char *convert2str(uint16_t val)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b090      	sub	sp, #64	; 0x40
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f107 000c 	add.w	r0, r7, #12
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <convert2str+0x2c>)
 8001926:	2132      	movs	r1, #50	; 0x32
 8001928:	f003 f8d0 	bl	8004acc <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4618      	mov	r0, r3
 8001932:	f003 f90f 	bl	8004b54 <strdup>
 8001936:	4603      	mov	r3, r0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3740      	adds	r7, #64	; 0x40
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08005464 	.word	0x08005464

08001944 <lcdDrawWall>:

void lcdDrawWall()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(0, 60, 240, 70 + wall_size, BLACK);
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <lcdDrawWall+0x74>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	3346      	adds	r3, #70	; 0x46
 8001952:	b29b      	uxth	r3, r3
 8001954:	2200      	movs	r2, #0
 8001956:	9200      	str	r2, [sp, #0]
 8001958:	22f0      	movs	r2, #240	; 0xf0
 800195a:	213c      	movs	r1, #60	; 0x3c
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff f901 	bl	8000b64 <lcd_Fill>
	// LEFT
//	lcd_DrawRectangle(0, 70, wall_size, 320, BLACK);
	lcd_Fill(0, 60, wall_size, 320, BLACK);
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <lcdDrawWall+0x74>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001970:	213c      	movs	r1, #60	; 0x3c
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff f8f6 	bl	8000b64 <lcd_Fill>
	// RIGHT
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
	lcd_Fill(240 - wall_size, 60, 240, 320, BLACK);
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <lcdDrawWall+0x74>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001982:	b298      	uxth	r0, r3
 8001984:	2300      	movs	r3, #0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800198c:	22f0      	movs	r2, #240	; 0xf0
 800198e:	213c      	movs	r1, #60	; 0x3c
 8001990:	f7ff f8e8 	bl	8000b64 <lcd_Fill>
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
	lcd_Fill(0, 320 - wall_size, 240, 320, BLACK);
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <lcdDrawWall+0x74>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800199e:	b299      	uxth	r1, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019a8:	22f0      	movs	r2, #240	; 0xf0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff f8da 	bl	8000b64 <lcd_Fill>
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000006 	.word	0x20000006

080019bc <setUpLcdPlay>:

void setUpLcdPlay(uint16_t id)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(WHITE);
 80019c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019ca:	f7ff f899 	bl	8000b00 <lcd_Clear>
	lcd_Fill(0, 0, 240, 30, BLUE);
 80019ce:	231f      	movs	r3, #31
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	231e      	movs	r3, #30
 80019d4:	22f0      	movs	r2, #240	; 0xf0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff f8c3 	bl	8000b64 <lcd_Fill>
	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
 80019de:	2301      	movs	r3, #1
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2310      	movs	r3, #16
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	231f      	movs	r3, #31
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <setUpLcdPlay+0xd0>)
 80019f0:	2105      	movs	r1, #5
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fdc4 	bl	8001580 <lcd_StrCenter>
	char str1[50] = "ID: ";
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <setUpLcdPlay+0xd4>)
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a02:	6018      	str	r0, [r3, #0]
 8001a04:	3304      	adds	r3, #4
 8001a06:	7019      	strb	r1, [r3, #0]
 8001a08:	f107 030d 	add.w	r3, r7, #13
 8001a0c:	222d      	movs	r2, #45	; 0x2d
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 f853 	bl	8004abc <memset>
	char *str2 = convert2str(id);
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff7b 	bl	8001914 <convert2str>
 8001a1e:	63f8      	str	r0, [r7, #60]	; 0x3c

	strcat(str1, str2);
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f884 	bl	8004b34 <strcat>
	lcd_ShowStr(20, 30, str1, WHITE, RED, 24, 0);
 8001a2c:	f107 0208 	add.w	r2, r7, #8
 8001a30:	2300      	movs	r3, #0
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2318      	movs	r3, #24
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a42:	211e      	movs	r1, #30
 8001a44:	2014      	movs	r0, #20
 8001a46:	f7ff fd37 	bl	80014b8 <lcd_ShowStr>
	lcd_ShowStr(110, 30, "TIMING: --", WHITE, RED, 24, 0);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2318      	movs	r3, #24
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <setUpLcdPlay+0xd8>)
 8001a5e:	211e      	movs	r1, #30
 8001a60:	206e      	movs	r0, #110	; 0x6e
 8001a62:	f7ff fd29 	bl	80014b8 <lcd_ShowStr>

//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8001a66:	f7ff ff6d 	bl	8001944 <lcdDrawWall>

	lcd_StrCenter(0, 60, "Score: 0", RED, BLUE, 16, 1);
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2310      	movs	r3, #16
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	231f      	movs	r3, #31
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <setUpLcdPlay+0xdc>)
 8001a7c:	213c      	movs	r1, #60	; 0x3c
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fd7e 	bl	8001580 <lcd_StrCenter>
}
 8001a84:	bf00      	nop
 8001a86:	3740      	adds	r7, #64	; 0x40
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08005468 	.word	0x08005468
 8001a90:	0800548c 	.word	0x0800548c
 8001a94:	08005474 	.word	0x08005474
 8001a98:	08005480 	.word	0x08005480

08001a9c <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <timer_init+0x10>)
 8001aa2:	f002 fadf 	bl	8004064 <HAL_TIM_Base_Start_IT>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000184 	.word	0x20000184

08001ab0 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <setTimer2+0x2c>)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <setTimer2+0x2c>)
 8001ac2:	881a      	ldrh	r2, [r3, #0]
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <setTimer2+0x30>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <setTimer2+0x34>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000124 	.word	0x20000124
 8001ae0:	20000122 	.word	0x20000122
 8001ae4:	20000120 	.word	0x20000120

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af8:	d116      	bne.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b0c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b22:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001b24:	f7ff fd6a 	bl	80015fc <led7_Scan>
	}
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000122 	.word	0x20000122
 8001b34:	20000120 	.word	0x20000120
 8001b38:	20000124 	.word	0x20000124

08001b3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <MX_SPI1_Init+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b88:	220a      	movs	r2, #10
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_SPI1_Init+0x64>)
 8001b8e:	f001 fc2d 	bl	80033ec <HAL_SPI_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b98:	f7ff feb6 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000128 	.word	0x20000128
 8001ba4:	40013000 	.word	0x40013000

08001ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_SPI_MspInit+0x84>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12b      	bne.n	8001c22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_SPI_MspInit+0x88>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_SPI_MspInit+0x88>)
 8001bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_SPI_MspInit+0x88>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_SPI_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_SPI_MspInit+0x88>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_SPI_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c02:	2338      	movs	r3, #56	; 0x38
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c12:	2305      	movs	r3, #5
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <HAL_SPI_MspInit+0x8c>)
 8001c1e:	f000 fdcb 	bl	80027b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40013000 	.word	0x40013000
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <startUI>:
#include "set_up_mode.h"
#include "global.h"
#include "main.h"
#include "button.h"

void startUI(){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b092      	sub	sp, #72	; 0x48
 8001c3c:	af04      	add	r7, sp, #16
	char str1[50] = "";
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	222e      	movs	r2, #46	; 0x2e
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 ff37 	bl	8004abc <memset>

	lcd_Clear(BLACK);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7fe ff56 	bl	8000b00 <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowStr(60, 5, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8001c54:	2300      	movs	r3, #0
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	2318      	movs	r3, #24
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c66:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <startUI+0xbc>)
 8001c68:	2105      	movs	r1, #5
 8001c6a:	203c      	movs	r0, #60	; 0x3c
 8001c6c:	f7ff fc24 	bl	80014b8 <lcd_ShowStr>

	lcd_ShowStr(40, 50, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 8001c70:	2300      	movs	r3, #0
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2318      	movs	r3, #24
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f248 4330 	movw	r3, #33840	; 0x8430
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <startUI+0xc0>)
 8001c84:	2132      	movs	r1, #50	; 0x32
 8001c86:	2028      	movs	r0, #40	; 0x28
 8001c88:	f7ff fc16 	bl	80014b8 <lcd_ShowStr>

	lcd_DrawRectangle(60, 100, 180, 130, WHITE);
 8001c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2382      	movs	r3, #130	; 0x82
 8001c94:	22b4      	movs	r2, #180	; 0xb4
 8001c96:	2164      	movs	r1, #100	; 0x64
 8001c98:	203c      	movs	r0, #60	; 0x3c
 8001c9a:	f7ff f834 	bl	8000d06 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <startUI+0xc4>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fe36 	bl	8001914 <convert2str>
 8001ca8:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 8001caa:	463b      	mov	r3, r7
 8001cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 ff40 	bl	8004b34 <strcat>
	lcd_StrCenter(0, 105, str1, WHITE, RED, 24, 0);
 8001cb4:	463a      	mov	r2, r7
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	2318      	movs	r3, #24
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc8:	2169      	movs	r1, #105	; 0x69
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fc58 	bl	8001580 <lcd_StrCenter>

	lcd_ShowStr(80, 180, " START ", WHITE, GRAY, 24, 0);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	2318      	movs	r3, #24
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f248 4330 	movw	r3, #33840	; 0x8430
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <startUI+0xc8>)
 8001ce4:	21b4      	movs	r1, #180	; 0xb4
 8001ce6:	2050      	movs	r0, #80	; 0x50
 8001ce8:	f7ff fbe6 	bl	80014b8 <lcd_ShowStr>
}
 8001cec:	bf00      	nop
 8001cee:	3738      	adds	r7, #56	; 0x38
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	080054c0 	.word	0x080054c0
 8001cf8:	080054d0 	.word	0x080054d0
 8001cfc:	2000010c 	.word	0x2000010c
 8001d00:	080054e0 	.word	0x080054e0

08001d04 <pickMode>:

void pickMode(uint16_t id){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b094      	sub	sp, #80	; 0x50
 8001d08:	af04      	add	r7, sp, #16
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7fe fef6 	bl	8000b00 <lcd_Clear>
	lcd_Fill(0, 0, 240, 30, BLACK);
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	231e      	movs	r3, #30
 8001d1a:	22f0      	movs	r2, #240	; 0xf0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7fe ff20 	bl	8000b64 <lcd_Fill>
	lcd_ShowStr(60, 5, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8001d24:	2300      	movs	r3, #0
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2318      	movs	r3, #24
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d36:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <pickMode+0xec>)
 8001d38:	2105      	movs	r1, #5
 8001d3a:	203c      	movs	r0, #60	; 0x3c
 8001d3c:	f7ff fbbc 	bl	80014b8 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <pickMode+0xf0>)
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4a:	6018      	str	r0, [r3, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	8019      	strh	r1, [r3, #0]
 8001d50:	f107 030e 	add.w	r3, r7, #14
 8001d54:	222c      	movs	r2, #44	; 0x2c
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 feaf 	bl	8004abc <memset>
	char *str2 = convert2str(id);
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdd7 	bl	8001914 <convert2str>
 8001d66:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fee0 	bl	8004b34 <strcat>

	lcd_StrCenter(0, 50, str1, WHITE, GRAY, 24, 0);
 8001d74:	f107 0208 	add.w	r2, r7, #8
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2318      	movs	r3, #24
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	f248 4330 	movw	r3, #33840	; 0x8430
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8a:	2132      	movs	r1, #50	; 0x32
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fbf7 	bl	8001580 <lcd_StrCenter>

	lcd_StrCenter(0, 100, " MODE ", WHITE, GRAY, 24, 0);
 8001d92:	2300      	movs	r3, #0
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2318      	movs	r3, #24
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	f248 4330 	movw	r3, #33840	; 0x8430
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <pickMode+0xf4>)
 8001da6:	2164      	movs	r1, #100	; 0x64
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fbe9 	bl	8001580 <lcd_StrCenter>

	lcd_ShowStr(10, 150, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 8001dae:	2300      	movs	r3, #0
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2318      	movs	r3, #24
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	f248 4330 	movw	r3, #33840	; 0x8430
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <pickMode+0xf8>)
 8001dc2:	2196      	movs	r1, #150	; 0x96
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f7ff fb77 	bl	80014b8 <lcd_ShowStr>
	lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2318      	movs	r3, #24
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f248 4330 	movw	r3, #33840	; 0x8430
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <pickMode+0xfc>)
 8001dde:	21c8      	movs	r1, #200	; 0xc8
 8001de0:	200a      	movs	r0, #10
 8001de2:	f7ff fb69 	bl	80014b8 <lcd_ShowStr>
}
 8001de6:	bf00      	nop
 8001de8:	3740      	adds	r7, #64	; 0x40
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	080054c0 	.word	0x080054c0
 8001df4:	08005510 	.word	0x08005510
 8001df8:	080054e8 	.word	0x080054e8
 8001dfc:	080054f0 	.word	0x080054f0
 8001e00:	08005500 	.word	0x08005500

08001e04 <beginStartGame>:

void beginStartGame()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b094      	sub	sp, #80	; 0x50
 8001e08:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8001e0a:	4bac      	ldr	r3, [pc, #688]	; (80020bc <beginStartGame+0x2b8>)
 8001e0c:	8b9b      	ldrh	r3, [r3, #28]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d14c      	bne.n	8001eac <beginStartGame+0xa8>
	{
		switch (statusGame) {
 8001e12:	4bab      	ldr	r3, [pc, #684]	; (80020c0 <beginStartGame+0x2bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d84a      	bhi.n	8001eb0 <beginStartGame+0xac>
 8001e1a:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <beginStartGame+0x1c>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e35 	.word	0x08001e35
 8001e24:	08001e4d 	.word	0x08001e4d
 8001e28:	08001e65 	.word	0x08001e65
 8001e2c:	08001e7d 	.word	0x08001e7d
 8001e30:	08001e95 	.word	0x08001e95
			case INIT:
				statusGame = STARTMODE;
 8001e34:	4ba2      	ldr	r3, [pc, #648]	; (80020c0 <beginStartGame+0x2bc>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
				ID = 0;
 8001e3a:	4ba2      	ldr	r3, [pc, #648]	; (80020c4 <beginStartGame+0x2c0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	801a      	strh	r2, [r3, #0]
				point = 0;
 8001e40:	4ba1      	ldr	r3, [pc, #644]	; (80020c8 <beginStartGame+0x2c4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
				startUI();
 8001e46:	f7ff fef7 	bl	8001c38 <startUI>
				break;
 8001e4a:	e032      	b.n	8001eb2 <beginStartGame+0xae>
			case STARTMODE:
				statusGame = PICKMODE;
 8001e4c:	4b9c      	ldr	r3, [pc, #624]	; (80020c0 <beginStartGame+0x2bc>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8001e52:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <beginStartGame+0x2c0>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff54 	bl	8001d04 <pickMode>
				button_count[14] = 0;
 8001e5c:	4b97      	ldr	r3, [pc, #604]	; (80020bc <beginStartGame+0x2b8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	839a      	strh	r2, [r3, #28]
				break;
 8001e62:	e026      	b.n	8001eb2 <beginStartGame+0xae>
			case PICKMODE:
				statusGame = NORMALMODE;
 8001e64:	4b96      	ldr	r3, [pc, #600]	; (80020c0 <beginStartGame+0x2bc>)
 8001e66:	2203      	movs	r2, #3
 8001e68:	601a      	str	r2, [r3, #0]
				setUpLcdPlay(ID);
 8001e6a:	4b96      	ldr	r3, [pc, #600]	; (80020c4 <beginStartGame+0x2c0>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fda4 	bl	80019bc <setUpLcdPlay>
				button_count[14] = 0;
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <beginStartGame+0x2b8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	839a      	strh	r2, [r3, #28]
				break;
 8001e7a:	e01a      	b.n	8001eb2 <beginStartGame+0xae>
			case NORMALMODE:
				statusGame = INIT;
 8001e7c:	4b90      	ldr	r3, [pc, #576]	; (80020c0 <beginStartGame+0x2bc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
				setUpLcdPlay(ID);
 8001e82:	4b90      	ldr	r3, [pc, #576]	; (80020c4 <beginStartGame+0x2c0>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fd98 	bl	80019bc <setUpLcdPlay>
				button_count[14] = 0;
 8001e8c:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <beginStartGame+0x2b8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	839a      	strh	r2, [r3, #28]
				break;
 8001e92:	e00e      	b.n	8001eb2 <beginStartGame+0xae>
			case TIMINGMODE:
				statusGame = INIT;
 8001e94:	4b8a      	ldr	r3, [pc, #552]	; (80020c0 <beginStartGame+0x2bc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
				setUpLcdPlay(ID);
 8001e9a:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <beginStartGame+0x2c0>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd8c 	bl	80019bc <setUpLcdPlay>
				button_count[14] = 0;
 8001ea4:	4b85      	ldr	r3, [pc, #532]	; (80020bc <beginStartGame+0x2b8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	839a      	strh	r2, [r3, #28]
				break;
 8001eaa:	e002      	b.n	8001eb2 <beginStartGame+0xae>
			default:
				break;
		}
	}
 8001eac:	bf00      	nop
 8001eae:	e000      	b.n	8001eb2 <beginStartGame+0xae>
				break;
 8001eb0:	bf00      	nop
	if(statusGame == STARTMODE ){
 8001eb2:	4b83      	ldr	r3, [pc, #524]	; (80020c0 <beginStartGame+0x2bc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 8177 	bne.w	80021aa <beginStartGame+0x3a6>
		char str1[50] = "";
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	222e      	movs	r2, #46	; 0x2e
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 fdf7 	bl	8004abc <memset>
		char *str2;
		for(uint16_t i=0; i<14; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001ed2:	e165      	b.n	80021a0 <beginStartGame+0x39c>
		{
			if(button_count[i] == 1)
 8001ed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ed6:	4a79      	ldr	r2, [pc, #484]	; (80020bc <beginStartGame+0x2b8>)
 8001ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 815c 	bne.w	800219a <beginStartGame+0x396>
			{
				button_count[i] == 0;
				switch (i)
 8001ee2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ee4:	2b0d      	cmp	r3, #13
 8001ee6:	f200 8139 	bhi.w	800215c <beginStartGame+0x358>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <beginStartGame+0xec>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f29 	.word	0x08001f29
 8001ef4:	08001f5d 	.word	0x08001f5d
 8001ef8:	08001f91 	.word	0x08001f91
 8001efc:	0800215d 	.word	0x0800215d
 8001f00:	08001fc5 	.word	0x08001fc5
 8001f04:	08001ff5 	.word	0x08001ff5
 8001f08:	08002025 	.word	0x08002025
 8001f0c:	0800215d 	.word	0x0800215d
 8001f10:	08002055 	.word	0x08002055
 8001f14:	08002089 	.word	0x08002089
 8001f18:	080020cd 	.word	0x080020cd
 8001f1c:	0800215d 	.word	0x0800215d
 8001f20:	08002101 	.word	0x08002101
 8001f24:	08002133 	.word	0x08002133
				{
					case 0:
						ID = ID*10 + i+1;
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <beginStartGame+0x2c0>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <beginStartGame+0x2c0>)
 8001f42:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8001f44:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <beginStartGame+0x2c0>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fce3 	bl	8001914 <convert2str>
 8001f4e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fded 	bl	8004b34 <strcat>
						break;
 8001f5a:	e0ff      	b.n	800215c <beginStartGame+0x358>
					case 1:
						ID = ID*10 + i+1;
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <beginStartGame+0x2c0>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <beginStartGame+0x2c0>)
 8001f76:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8001f78:	4b52      	ldr	r3, [pc, #328]	; (80020c4 <beginStartGame+0x2c0>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fcc9 	bl	8001914 <convert2str>
 8001f82:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fdd3 	bl	8004b34 <strcat>
						break;
 8001f8e:	e0e5      	b.n	800215c <beginStartGame+0x358>
					case 2:
						ID = ID*10 + i+1;
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <beginStartGame+0x2c0>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <beginStartGame+0x2c0>)
 8001faa:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8001fac:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <beginStartGame+0x2c0>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fcaf 	bl	8001914 <convert2str>
 8001fb6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fdb9 	bl	8004b34 <strcat>
						break;
 8001fc2:	e0cb      	b.n	800215c <beginStartGame+0x358>
					case 3:
						break;
					case 4:
						ID = ID*10 + i;
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <beginStartGame+0x2c0>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <beginStartGame+0x2c0>)
 8001fda:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <beginStartGame+0x2c0>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fc97 	bl	8001914 <convert2str>
 8001fe6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fda1 	bl	8004b34 <strcat>
						break;
 8001ff2:	e0b3      	b.n	800215c <beginStartGame+0x358>
					case 5:
						ID = ID*10 + i;
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <beginStartGame+0x2c0>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002004:	4413      	add	r3, r2
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <beginStartGame+0x2c0>)
 800200a:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <beginStartGame+0x2c0>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fc7f 	bl	8001914 <convert2str>
 8002016:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fd89 	bl	8004b34 <strcat>
						break;
 8002022:	e09b      	b.n	800215c <beginStartGame+0x358>
					case 6:
						ID = ID*10 + i;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <beginStartGame+0x2c0>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002034:	4413      	add	r3, r2
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <beginStartGame+0x2c0>)
 800203a:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <beginStartGame+0x2c0>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fc67 	bl	8001914 <convert2str>
 8002046:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fd71 	bl	8004b34 <strcat>
						break;
 8002052:	e083      	b.n	800215c <beginStartGame+0x358>
					case 7:
						break;
					case 8:
						ID = ID*10 + i-1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <beginStartGame+0x2c0>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4413      	add	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002064:	4413      	add	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <beginStartGame+0x2c0>)
 800206e:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <beginStartGame+0x2c0>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fc4d 	bl	8001914 <convert2str>
 800207a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fd57 	bl	8004b34 <strcat>
						break;
 8002086:	e069      	b.n	800215c <beginStartGame+0x358>
					case 9:
						ID = ID*10 + i-1;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <beginStartGame+0x2c0>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4413      	add	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002098:	4413      	add	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <beginStartGame+0x2c0>)
 80020a2:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <beginStartGame+0x2c0>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fc33 	bl	8001914 <convert2str>
 80020ae:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fd3d 	bl	8004b34 <strcat>
						break;
 80020ba:	e04f      	b.n	800215c <beginStartGame+0x358>
 80020bc:	20000094 	.word	0x20000094
 80020c0:	20000110 	.word	0x20000110
 80020c4:	2000010c 	.word	0x2000010c
 80020c8:	20000114 	.word	0x20000114
					case 10:
						ID = ID*10 + i-1;
 80020cc:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <beginStartGame+0x3cc>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80020dc:	4413      	add	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <beginStartGame+0x3cc>)
 80020e6:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <beginStartGame+0x3cc>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fc11 	bl	8001914 <convert2str>
 80020f2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 fd1b 	bl	8004b34 <strcat>
						break;
 80020fe:	e02d      	b.n	800215c <beginStartGame+0x358>
					case 11:
						break;
					case 12:
						str1[50] = "";
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <beginStartGame+0x3d0>)
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						ID = ID/10;
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <beginStartGame+0x3cc>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <beginStartGame+0x3d4>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <beginStartGame+0x3cc>)
 8002118:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <beginStartGame+0x3cc>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fbf8 	bl	8001914 <convert2str>
 8002124:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800212a:	4618      	mov	r0, r3
 800212c:	f002 fd02 	bl	8004b34 <strcat>
						break;
 8002130:	e014      	b.n	800215c <beginStartGame+0x358>
					case 13:
						ID = ID*10;
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <beginStartGame+0x3cc>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <beginStartGame+0x3cc>)
 8002142:	801a      	strh	r2, [r3, #0]
						str2 = convert2str(ID);
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <beginStartGame+0x3cc>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbe3 	bl	8001914 <convert2str>
 800214e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fced 	bl	8004b34 <strcat>
						break;
 800215a:	bf00      	nop
				}
				lcd_Fill(60, 100, 180, 130, BLACK);
 800215c:	2300      	movs	r3, #0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2382      	movs	r3, #130	; 0x82
 8002162:	22b4      	movs	r2, #180	; 0xb4
 8002164:	2164      	movs	r1, #100	; 0x64
 8002166:	203c      	movs	r0, #60	; 0x3c
 8002168:	f7fe fcfc 	bl	8000b64 <lcd_Fill>
				lcd_DrawRectangle(60, 100, 180, 130, WHITE);
 800216c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2382      	movs	r3, #130	; 0x82
 8002174:	22b4      	movs	r2, #180	; 0xb4
 8002176:	2164      	movs	r1, #100	; 0x64
 8002178:	203c      	movs	r0, #60	; 0x3c
 800217a:	f7fe fdc4 	bl	8000d06 <lcd_DrawRectangle>
				lcd_StrCenter(0, 105, str1, WHITE, RED, 24, 0);
 800217e:	1d3a      	adds	r2, r7, #4
 8002180:	2300      	movs	r3, #0
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	2318      	movs	r3, #24
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002192:	2169      	movs	r1, #105	; 0x69
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff f9f3 	bl	8001580 <lcd_StrCenter>
		for(uint16_t i=0; i<14; i++)
 800219a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800219c:	3301      	adds	r3, #1
 800219e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80021a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021a2:	2b0d      	cmp	r3, #13
 80021a4:	f67f ae96 	bls.w	8001ed4 <beginStartGame+0xd0>
			ID = 0;
			point = 0;
			startUI();
		}
	}
}
 80021a8:	e00e      	b.n	80021c8 <beginStartGame+0x3c4>
		if(button_count[12] == 1)
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <beginStartGame+0x3d8>)
 80021ac:	8b1b      	ldrh	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10a      	bne.n	80021c8 <beginStartGame+0x3c4>
			statusGame = INIT;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <beginStartGame+0x3dc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
			ID = 0;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <beginStartGame+0x3cc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	801a      	strh	r2, [r3, #0]
			point = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <beginStartGame+0x3e0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
			startUI();
 80021c4:	f7ff fd38 	bl	8001c38 <startUI>
}
 80021c8:	bf00      	nop
 80021ca:	3740      	adds	r7, #64	; 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000010c 	.word	0x2000010c
 80021d4:	08005544 	.word	0x08005544
 80021d8:	cccccccd 	.word	0xcccccccd
 80021dc:	20000094 	.word	0x20000094
 80021e0:	20000110 	.word	0x20000110
 80021e4:	20000114 	.word	0x20000114

080021e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_MspInit+0x4c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_MspInit+0x4c>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_MspInit+0x4c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_MspInit+0x4c>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_MspInit+0x4c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800223c:	e7fe      	b.n	800223c <NMI_Handler+0x4>

0800223e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler+0x4>

0800224a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler+0x4>

08002256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002284:	f000 f942 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <TIM2_IRQHandler+0x10>)
 8002292:	f001 ff57 	bl	8004144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000184 	.word	0x20000184

080022a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d0:	f002 fbca 	bl	8004a68 <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20020000 	.word	0x20020000
 8002300:	00000400 	.word	0x00000400
 8002304:	20000180 	.word	0x20000180
 8002308:	200001e0 	.word	0x200001e0

0800230c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <SystemInit+0x20>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <SystemInit+0x20>)
 8002318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	463b      	mov	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_TIM2_Init+0x94>)
 800234e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002356:	f240 3247 	movw	r2, #839	; 0x347
 800235a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM2_Init+0x94>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002364:	2263      	movs	r2, #99	; 0x63
 8002366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_TIM2_Init+0x94>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002376:	f001 fe25 	bl	8003fc4 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002380:	f7ff fac2 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4619      	mov	r1, r3
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002392:	f001 ffdf 	bl	8004354 <HAL_TIM_ConfigClockSource>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800239c:	f7ff fab4 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM2_Init+0x94>)
 80023ae:	f002 f9fb 	bl	80047a8 <HAL_TIMEx_MasterConfigSynchronization>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023b8:	f7ff faa6 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000184 	.word	0x20000184

080023c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d8:	d115      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_TIM_Base_MspInit+0x48>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <HAL_TIM_Base_MspInit+0x48>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_TIM_Base_MspInit+0x48>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	201c      	movs	r0, #28
 80023fc:	f000 f9a5 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002400:	201c      	movs	r0, #28
 8002402:	f000 f9be 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800

08002414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002430:	4c0b      	ldr	r4, [pc, #44]	; (8002460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800243e:	f7ff ff65 	bl	800230c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f002 fb17 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002446:	f7ff f965 	bl	8001714 <main>
  bx  lr    
 800244a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800244c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002458:	0800c464 	.word	0x0800c464
  ldr r2, =_sbss
 800245c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002460:	200001e0 	.word	0x200001e0

08002464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC_IRQHandler>
	...

08002468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <HAL_Init+0x40>)
 8002472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_Init+0x40>)
 800247e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x40>)
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f000 f94f 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	200f      	movs	r0, #15
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fea4 	bl	80021e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f967 	bl	800279e <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f000 f92f 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000008 	.word	0x20000008
 8002504:	20000010 	.word	0x20000010
 8002508:	2000000c 	.word	0x2000000c

0800250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000010 	.word	0x20000010
 8002530:	200001cc 	.word	0x200001cc

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200001cc 	.word	0x200001cc

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffde 	bl	8002534 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000010 	.word	0x20000010

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e16b      	b.n	8002aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 815a 	bne.w	8002aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d005      	beq.n	800280a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	2b02      	cmp	r3, #2
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b4 	beq.w	8002aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a5f      	ldr	r2, [pc, #380]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_GPIO_Init+0x310>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a52      	ldr	r2, [pc, #328]	; (8002acc <HAL_GPIO_Init+0x314>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x226>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a51      	ldr	r2, [pc, #324]	; (8002ad0 <HAL_GPIO_Init+0x318>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x222>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a50      	ldr	r2, [pc, #320]	; (8002ad4 <HAL_GPIO_Init+0x31c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x21e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4f      	ldr	r2, [pc, #316]	; (8002ad8 <HAL_GPIO_Init+0x320>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x21a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4e      	ldr	r2, [pc, #312]	; (8002adc <HAL_GPIO_Init+0x324>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x216>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x212>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <HAL_GPIO_Init+0x32c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x20a>
 80029be:	2307      	movs	r3, #7
 80029c0:	e00e      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e00c      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00a      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029ca:	2305      	movs	r3, #5
 80029cc:	e008      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029ce:	2304      	movs	r3, #4
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029de:	2300      	movs	r3, #0
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	f002 0203 	and.w	r2, r2, #3
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f0:	4935      	ldr	r1, [pc, #212]	; (8002ac8 <HAL_GPIO_Init+0x310>)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a22:	4a32      	ldr	r2, [pc, #200]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b0f      	cmp	r3, #15
 8002ab0:	f67f ae90 	bls.w	80027d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40021c00 	.word	0x40021c00
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e267      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d075      	beq.n	8002c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4e:	4b85      	ldr	r3, [pc, #532]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d112      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	4b7e      	ldr	r3, [pc, #504]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d05b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x108>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d157      	bne.n	8002c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e242      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x74>
 8002b8a:	4b76      	ldr	r3, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a75      	ldr	r2, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0xb0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x98>
 8002ba2:	4b70      	ldr	r3, [pc, #448]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6f      	ldr	r2, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b6d      	ldr	r3, [pc, #436]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6c      	ldr	r2, [pc, #432]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0xb0>
 8002bbc:	4b69      	ldr	r3, [pc, #420]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a68      	ldr	r2, [pc, #416]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a65      	ldr	r2, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff fcaa 	bl	8002534 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7ff fca6 	bl	8002534 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e207      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0xc0>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7ff fc96 	bl	8002534 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7ff fc92 	bl	8002534 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1f3      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0xe8>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d063      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d11c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x152>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e1c7      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4937      	ldr	r1, [pc, #220]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	e03a      	b.n	8002d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_OscConfig+0x244>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7ff fc4b 	bl	8002534 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7ff fc47 	bl	8002534 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1a8      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc0:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4925      	ldr	r1, [pc, #148]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x244>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fc2a 	bl	8002534 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7ff fc26 	bl	8002534 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e187      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d036      	beq.n	8002d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCC_OscConfig+0x248>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7ff fc0a 	bl	8002534 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d24:	f7ff fc06 	bl	8002534 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e167      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x240>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x200>
 8002d42:	e01b      	b.n	8002d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_OscConfig+0x248>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fbf3 	bl	8002534 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	e00e      	b.n	8002d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d52:	f7ff fbef 	bl	8002534 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d907      	bls.n	8002d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e150      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	42470000 	.word	0x42470000
 8002d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ea      	bne.n	8002d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8097 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8e:	4b81      	ldr	r3, [pc, #516]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b7a      	ldr	r3, [pc, #488]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	4b77      	ldr	r3, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc6:	4b74      	ldr	r3, [pc, #464]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a73      	ldr	r2, [pc, #460]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7ff fbaf 	bl	8002534 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7ff fbab 	bl	8002534 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e10c      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_OscConfig+0x474>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2ea>
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a63      	ldr	r2, [pc, #396]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x324>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x30c>
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a5e      	ldr	r2, [pc, #376]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a5b      	ldr	r2, [pc, #364]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0x324>
 8002e30:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a57      	ldr	r2, [pc, #348]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a54      	ldr	r2, [pc, #336]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f023 0304 	bic.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7ff fb70 	bl	8002534 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7ff fb6c 	bl	8002534 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0cb      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6e:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ee      	beq.n	8002e58 <HAL_RCC_OscConfig+0x334>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7ff fb5a 	bl	8002534 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7ff fb56 	bl	8002534 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0b5      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ee      	bne.n	8002e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a38      	ldr	r2, [pc, #224]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a1 	beq.w	8003004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec2:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d05c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d141      	bne.n	8002f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_OscConfig+0x478>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff fb2a 	bl	8002534 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7ff fb26 	bl	8002534 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e087      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	019b      	lsls	r3, r3, #6
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	491b      	ldr	r1, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x478>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff faff 	bl	8002534 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7ff fafb 	bl	8002534 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e05c      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x416>
 8002f58:	e054      	b.n	8003004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_RCC_OscConfig+0x478>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff fae8 	bl	8002534 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7ff fae4 	bl	8002534 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e045      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x444>
 8002f86:	e03d      	b.n	8003004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e038      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x4ec>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d028      	beq.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d121      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d11a      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d111      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7ff fa16 	bl	8002534 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7ff fa12 	bl	8002534 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f821 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f976 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	0800c410 	.word	0x0800c410
 80031d8:	20000008 	.word	0x20000008
 80031dc:	2000000c 	.word	0x2000000c

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b094      	sub	sp, #80	; 0x50
 80031e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	2300      	movs	r3, #0
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f0:	2300      	movs	r3, #0
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f8:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d00d      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x40>
 8003204:	2b08      	cmp	r3, #8
 8003206:	f200 80e1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x34>
 800320e:	2b04      	cmp	r3, #4
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x3a>
 8003212:	e0db      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003218:	e0db      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321a:	4b73      	ldr	r3, [pc, #460]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321e:	e0d8      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003236:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	2200      	movs	r2, #0
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
 800324a:	2300      	movs	r3, #0
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
 800324e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0159      	lsls	r1, r3, #5
 8003260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003264:	0150      	lsls	r0, r2, #5
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4621      	mov	r1, r4
 800326c:	1a51      	subs	r1, r2, r1
 800326e:	6139      	str	r1, [r7, #16]
 8003270:	4629      	mov	r1, r5
 8003272:	eb63 0301 	sbc.w	r3, r3, r1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003284:	4659      	mov	r1, fp
 8003286:	018b      	lsls	r3, r1, #6
 8003288:	4651      	mov	r1, sl
 800328a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800328e:	4651      	mov	r1, sl
 8003290:	018a      	lsls	r2, r1, #6
 8003292:	4651      	mov	r1, sl
 8003294:	ebb2 0801 	subs.w	r8, r2, r1
 8003298:	4659      	mov	r1, fp
 800329a:	eb63 0901 	sbc.w	r9, r3, r1
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b2:	4690      	mov	r8, r2
 80032b4:	4699      	mov	r9, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	eb18 0303 	adds.w	r3, r8, r3
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	462b      	mov	r3, r5
 80032c0:	eb49 0303 	adc.w	r3, r9, r3
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032d2:	4629      	mov	r1, r5
 80032d4:	024b      	lsls	r3, r1, #9
 80032d6:	4621      	mov	r1, r4
 80032d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032dc:	4621      	mov	r1, r4
 80032de:	024a      	lsls	r2, r1, #9
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e6:	2200      	movs	r2, #0
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032f0:	f7fc ffc6 	bl	8000280 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	e058      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	4611      	mov	r1, r2
 800330a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	f04f 0000 	mov.w	r0, #0
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	0159      	lsls	r1, r3, #5
 8003326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332a:	0150      	lsls	r0, r2, #5
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4641      	mov	r1, r8
 8003332:	ebb2 0a01 	subs.w	sl, r2, r1
 8003336:	4649      	mov	r1, r9
 8003338:	eb63 0b01 	sbc.w	fp, r3, r1
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800334c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003350:	ebb2 040a 	subs.w	r4, r2, sl
 8003354:	eb63 050b 	sbc.w	r5, r3, fp
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	00eb      	lsls	r3, r5, #3
 8003362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003366:	00e2      	lsls	r2, r4, #3
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4643      	mov	r3, r8
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	464b      	mov	r3, r9
 8003374:	eb45 0303 	adc.w	r3, r5, r3
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003386:	4629      	mov	r1, r5
 8003388:	028b      	lsls	r3, r1, #10
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003390:	4621      	mov	r1, r4
 8003392:	028a      	lsls	r2, r1, #10
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	61fa      	str	r2, [r7, #28]
 80033a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a4:	f7fc ff6c 	bl	8000280 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3750      	adds	r7, #80	; 0x50
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07b      	b.n	80034f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d108      	bne.n	8003418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340e:	d009      	beq.n	8003424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
 8003416:	e005      	b.n	8003424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fbb2 	bl	8001ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	ea42 0103 	orr.w	r1, r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	f003 0104 	and.w	r1, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	f003 0210 	and.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b088      	sub	sp, #32
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_SPI_Transmit+0x22>
 800351c:	2302      	movs	r3, #2
 800351e:	e126      	b.n	800376e <HAL_SPI_Transmit+0x270>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003528:	f7ff f804 	bl	8002534 <HAL_GetTick>
 800352c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d002      	beq.n	8003544 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003542:	e10b      	b.n	800375c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_Transmit+0x52>
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003554:	e102      	b.n	800375c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2203      	movs	r2, #3
 800355a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	d10f      	bne.n	80035be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d007      	beq.n	80035dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e4:	d14b      	bne.n	800367e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_SPI_Transmit+0xf6>
 80035ee:	8afb      	ldrh	r3, [r7, #22]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d13e      	bne.n	8003672 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	881a      	ldrh	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	1c9a      	adds	r2, r3, #2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003618:	e02b      	b.n	8003672 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d112      	bne.n	800364e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	881a      	ldrh	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	86da      	strh	r2, [r3, #54]	; 0x36
 800364c:	e011      	b.n	8003672 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364e:	f7fe ff71 	bl	8002534 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d803      	bhi.n	8003666 <HAL_SPI_Transmit+0x168>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d102      	bne.n	800366c <HAL_SPI_Transmit+0x16e>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003670:	e074      	b.n	800375c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ce      	bne.n	800361a <HAL_SPI_Transmit+0x11c>
 800367c:	e04c      	b.n	8003718 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_SPI_Transmit+0x18e>
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d140      	bne.n	800370e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036b2:	e02c      	b.n	800370e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d113      	bne.n	80036ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e8:	e011      	b.n	800370e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fe ff23 	bl	8002534 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x204>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x20a>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800370c:	e026      	b.n	800375c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1cd      	bne.n	80036b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fbcb 	bl	8003eb8 <SPI_EndRxTxTransaction>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e000      	b.n	800375c <HAL_SPI_Transmit+0x25e>
  }

error:
 800375a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800376c:	7ffb      	ldrb	r3, [r7, #31]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af02      	add	r7, sp, #8
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003792:	d112      	bne.n	80037ba <HAL_SPI_Receive+0x44>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10e      	bne.n	80037ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2204      	movs	r2, #4
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f8f1 	bl	8003998 <HAL_SPI_TransmitReceive>
 80037b6:	4603      	mov	r3, r0
 80037b8:	e0ea      	b.n	8003990 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_SPI_Receive+0x52>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0e3      	b.n	8003990 <HAL_SPI_Receive+0x21a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d0:	f7fe feb0 	bl	8002534 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
 80037e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037e6:	e0ca      	b.n	800397e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Receive+0x7e>
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037f8:	e0c1      	b.n	800397e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2204      	movs	r2, #4
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003840:	d10f      	bne.n	8003862 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003850:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d007      	beq.n	8003880 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d162      	bne.n	800394e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003888:	e02e      	b.n	80038e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d115      	bne.n	80038c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f103 020c 	add.w	r2, r3, #12
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038c2:	e011      	b.n	80038e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c4:	f7fe fe36 	bl	8002534 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d803      	bhi.n	80038dc <HAL_SPI_Receive+0x166>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d102      	bne.n	80038e2 <HAL_SPI_Receive+0x16c>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038e6:	e04a      	b.n	800397e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1cb      	bne.n	800388a <HAL_SPI_Receive+0x114>
 80038f2:	e031      	b.n	8003958 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d113      	bne.n	800392a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	b292      	uxth	r2, r2
 800390e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003928:	e011      	b.n	800394e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392a:	f7fe fe03 	bl	8002534 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d803      	bhi.n	8003942 <HAL_SPI_Receive+0x1cc>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d102      	bne.n	8003948 <HAL_SPI_Receive+0x1d2>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800394c:	e017      	b.n	800397e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1cd      	bne.n	80038f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	6839      	ldr	r1, [r7, #0]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fa45 	bl	8003dec <SPI_EndRxTransaction>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
 800397a:	e000      	b.n	800397e <HAL_SPI_Receive+0x208>
  }

error :
 800397c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039a6:	2301      	movs	r3, #1
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_SPI_TransmitReceive+0x26>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e18a      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x33c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c6:	f7fe fdb5 	bl	8002534 <HAL_GetTick>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d00f      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x70>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ee:	d107      	bne.n	8003a00 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <HAL_SPI_TransmitReceive+0x68>
 80039f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d003      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a06:	e15b      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x82>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x82>
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a20:	e14e      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d003      	beq.n	8003a36 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2205      	movs	r2, #5
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	887a      	ldrh	r2, [r7, #2]
 8003a5e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d007      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d178      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x10a>
 8003a9c:	8b7b      	ldrh	r3, [r7, #26]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d166      	bne.n	8003b70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	1c9a      	adds	r2, r3, #2
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac6:	e053      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x176>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d016      	beq.n	8003b0e <HAL_SPI_TransmitReceive+0x176>
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d113      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	1c9a      	adds	r2, r3, #2
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d119      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x1b8>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d014      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	b292      	uxth	r2, r2
 8003b32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	1c9a      	adds	r2, r3, #2
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b50:	f7fe fcf0 	bl	8002534 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d807      	bhi.n	8003b70 <HAL_SPI_TransmitReceive+0x1d8>
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d003      	beq.n	8003b70 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b6e:	e0a7      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1a6      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x130>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1a1      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x130>
 8003b84:	e07c      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x1fc>
 8003b8e:	8b7b      	ldrh	r3, [r7, #26]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d16b      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bba:	e057      	b.n	8003c6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d11c      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x26c>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d017      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x26c>
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d114      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d119      	bne.n	8003c46 <HAL_SPI_TransmitReceive+0x2ae>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d014      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c42:	2301      	movs	r3, #1
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c46:	f7fe fc75 	bl	8002534 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d803      	bhi.n	8003c5e <HAL_SPI_TransmitReceive+0x2c6>
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d102      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x2cc>
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c6a:	e029      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1a2      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x224>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d19d      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f917 	bl	8003eb8 <SPI_EndRxTxTransaction>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d006      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c9c:	e010      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	e000      	b.n	8003cc0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cec:	f7fe fc22 	bl	8002534 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cfc:	f7fe fc1a 	bl	8002534 <HAL_GetTick>
 8003d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d02:	4b39      	ldr	r3, [pc, #228]	; (8003de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	015b      	lsls	r3, r3, #5
 8003d08:	0d1b      	lsrs	r3, r3, #20
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d12:	e054      	b.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d050      	beq.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d1c:	f7fe fc0a 	bl	8002534 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d902      	bls.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d13d      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d4a:	d111      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d54:	d004      	beq.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d107      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d78:	d10f      	bne.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e017      	b.n	8003dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d19b      	bne.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000008 	.word	0x20000008

08003dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e00:	d111      	bne.n	8003e26 <SPI_EndRxTransaction+0x3a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0a:	d004      	beq.n	8003e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e14:	d107      	bne.n	8003e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2e:	d12a      	bne.n	8003e86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e38:	d012      	beq.n	8003e60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff ff49 	bl	8003cdc <SPI_WaitFlagStateUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02d      	beq.n	8003eac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e026      	b.n	8003eae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	2101      	movs	r1, #1
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff ff36 	bl	8003cdc <SPI_WaitFlagStateUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01a      	beq.n	8003eac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e013      	b.n	8003eae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2101      	movs	r1, #1
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff ff23 	bl	8003cdc <SPI_WaitFlagStateUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e000      	b.n	8003eae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <SPI_EndRxTxTransaction+0x7c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <SPI_EndRxTxTransaction+0x80>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0d5b      	lsrs	r3, r3, #21
 8003ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ed4:	fb02 f303 	mul.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee2:	d112      	bne.n	8003f0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fef4 	bl	8003cdc <SPI_WaitFlagStateUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e00f      	b.n	8003f2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d0f2      	beq.n	8003f0a <SPI_EndRxTxTransaction+0x52>
 8003f24:	e000      	b.n	8003f28 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f26:	bf00      	nop
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000008 	.word	0x20000008
 8003f38:	165e9f81 	.word	0x165e9f81

08003f3c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e034      	b.n	8003fbc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7fc fc4a 	bl	8000800 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3308      	adds	r3, #8
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 fca6 	bl	80048c8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	f000 fcf0 	bl	800496c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6858      	ldr	r0, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	f000 fd25 	bl	80049e8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	6892      	ldr	r2, [r2, #8]
 8003fa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	6892      	ldr	r2, [r2, #8]
 8003fb2:	f041 0101 	orr.w	r1, r1, #1
 8003fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e041      	b.n	800405a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fe f9ec 	bl	80023c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f000 fa96 	bl	8004534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e04e      	b.n	800411a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a23      	ldr	r2, [pc, #140]	; (8004128 <HAL_TIM_Base_Start_IT+0xc4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d022      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d01d      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_TIM_Base_Start_IT+0xc8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d018      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <HAL_TIM_Base_Start_IT+0xcc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d013      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <HAL_TIM_Base_Start_IT+0xd0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_TIM_Base_Start_IT+0xd4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_TIM_Base_Start_IT+0xd8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x80>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_TIM_Base_Start_IT+0xdc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d111      	bne.n	8004108 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d010      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e007      	b.n	8004118 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40010400 	.word	0x40010400
 800413c:	40014000 	.word	0x40014000
 8004140:	40001800 	.word	0x40001800

08004144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b02      	cmp	r3, #2
 8004158:	d122      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d11b      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0202 	mvn.w	r2, #2
 8004170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9b5 	bl	80044f6 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9a7 	bl	80044e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9b8 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d122      	bne.n	80041f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d11b      	bne.n	80041f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0204 	mvn.w	r2, #4
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f98b 	bl	80044f6 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f97d 	bl	80044e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f98e 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d122      	bne.n	8004248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d11b      	bne.n	8004248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0208 	mvn.w	r2, #8
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2204      	movs	r2, #4
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f961 	bl	80044f6 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f953 	bl	80044e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f964 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b10      	cmp	r3, #16
 8004254:	d122      	bne.n	800429c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b10      	cmp	r3, #16
 8004262:	d11b      	bne.n	800429c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0210 	mvn.w	r2, #16
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2208      	movs	r2, #8
 8004272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f937 	bl	80044f6 <HAL_TIM_IC_CaptureCallback>
 8004288:	e005      	b.n	8004296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f929 	bl	80044e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f93a 	bl	800450a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10e      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0201 	mvn.w	r2, #1
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fc10 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fae0 	bl	80048b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8ff 	bl	800451e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b20      	cmp	r3, #32
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0220 	mvn.w	r2, #32
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 faaa 	bl	80048a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x1c>
 800436c:	2302      	movs	r3, #2
 800436e:	e0b4      	b.n	80044da <HAL_TIM_ConfigClockSource+0x186>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a8:	d03e      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xd4>
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ae:	f200 8087 	bhi.w	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b6:	f000 8086 	beq.w	80044c6 <HAL_TIM_ConfigClockSource+0x172>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	d87f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d01a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xa6>
 80043c4:	2b70      	cmp	r3, #112	; 0x70
 80043c6:	d87b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b60      	cmp	r3, #96	; 0x60
 80043ca:	d050      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x11a>
 80043cc:	2b60      	cmp	r3, #96	; 0x60
 80043ce:	d877      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b50      	cmp	r3, #80	; 0x50
 80043d2:	d03c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xfa>
 80043d4:	2b50      	cmp	r3, #80	; 0x50
 80043d6:	d873      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d058      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x13a>
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d86f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b30      	cmp	r3, #48	; 0x30
 80043e2:	d064      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043e4:	2b30      	cmp	r3, #48	; 0x30
 80043e6:	d86b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d060      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d867      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05c      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d05a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	e062      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6899      	ldr	r1, [r3, #8]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f000 f9ad 	bl	8004768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800441c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	609a      	str	r2, [r3, #8]
      break;
 8004426:	e04f      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f000 f996 	bl	8004768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800444a:	609a      	str	r2, [r3, #8]
      break;
 800444c:	e03c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f90a 	bl	8004674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2150      	movs	r1, #80	; 0x50
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f963 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800446c:	e02c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f929 	bl	80046d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2160      	movs	r1, #96	; 0x60
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f953 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 800448c:	e01c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 f8ea 	bl	8004674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f943 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 80044ac:	e00c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 f93a 	bl	8004732 <TIM_ITRx_SetConfig>
      break;
 80044be:	e003      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a40      	ldr	r2, [pc, #256]	; (8004648 <TIM_Base_SetConfig+0x114>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d00f      	beq.n	8004574 <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3d      	ldr	r2, [pc, #244]	; (800464c <TIM_Base_SetConfig+0x118>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3c      	ldr	r2, [pc, #240]	; (8004650 <TIM_Base_SetConfig+0x11c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <TIM_Base_SetConfig+0x120>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3a      	ldr	r2, [pc, #232]	; (8004658 <TIM_Base_SetConfig+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d108      	bne.n	8004586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2f      	ldr	r2, [pc, #188]	; (8004648 <TIM_Base_SetConfig+0x114>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d02b      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004594:	d027      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2c      	ldr	r2, [pc, #176]	; (800464c <TIM_Base_SetConfig+0x118>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d023      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2b      	ldr	r2, [pc, #172]	; (8004650 <TIM_Base_SetConfig+0x11c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01f      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2a      	ldr	r2, [pc, #168]	; (8004654 <TIM_Base_SetConfig+0x120>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01b      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a29      	ldr	r2, [pc, #164]	; (8004658 <TIM_Base_SetConfig+0x124>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d017      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a28      	ldr	r2, [pc, #160]	; (800465c <TIM_Base_SetConfig+0x128>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <TIM_Base_SetConfig+0x12c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00f      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a26      	ldr	r2, [pc, #152]	; (8004664 <TIM_Base_SetConfig+0x130>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a25      	ldr	r2, [pc, #148]	; (8004668 <TIM_Base_SetConfig+0x134>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a24      	ldr	r2, [pc, #144]	; (800466c <TIM_Base_SetConfig+0x138>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a23      	ldr	r2, [pc, #140]	; (8004670 <TIM_Base_SetConfig+0x13c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d108      	bne.n	80045f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <TIM_Base_SetConfig+0x114>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0xf8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <TIM_Base_SetConfig+0x124>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d103      	bne.n	8004634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	615a      	str	r2, [r3, #20]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40010400 	.word	0x40010400
 800465c:	40014000 	.word	0x40014000
 8004660:	40014400 	.word	0x40014400
 8004664:	40014800 	.word	0x40014800
 8004668:	40001800 	.word	0x40001800
 800466c:	40001c00 	.word	0x40001c00
 8004670:	40002000 	.word	0x40002000

08004674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 030a 	bic.w	r3, r3, #10
 80046b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0210 	bic.w	r2, r3, #16
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800470e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 0307 	orr.w	r3, r3, #7
 8004754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	021a      	lsls	r2, r3, #8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	431a      	orrs	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047bc:	2302      	movs	r3, #2
 80047be:	e05a      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d01d      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a15      	ldr	r2, [pc, #84]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40010400 	.word	0x40010400
 8004898:	40014000 	.word	0x40014000
 800489c:	40001800 	.word	0x40001800

080048a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <FSMC_NORSRAM_Init+0xa0>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80048f2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80048f8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80048fe:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004904:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800490a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004910:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004916:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800491c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004922:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004928:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800492e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004934:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d103      	bne.n	800494c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800494a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	fff00080 	.word	0xfff00080

0800496c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004986:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800498e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800499a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80049a2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80049aa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80049b4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	3b02      	subs	r3, #2
 80049bc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80049be:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80049c4:	4313      	orrs	r3, r2
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6979      	ldr	r1, [r7, #20]
 80049d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a00:	d122      	bne.n	8004a48 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a1e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004a26:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004a2e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a34:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6979      	ldr	r1, [r7, #20]
 8004a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004a46:	e005      	b.n	8004a54 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	cff00000 	.word	0xcff00000

08004a68 <__errno>:
 8004a68:	4b01      	ldr	r3, [pc, #4]	; (8004a70 <__errno+0x8>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000014 	.word	0x20000014

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4d0d      	ldr	r5, [pc, #52]	; (8004aac <__libc_init_array+0x38>)
 8004a78:	4c0d      	ldr	r4, [pc, #52]	; (8004ab0 <__libc_init_array+0x3c>)
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	10a4      	asrs	r4, r4, #2
 8004a7e:	2600      	movs	r6, #0
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	4d0b      	ldr	r5, [pc, #44]	; (8004ab4 <__libc_init_array+0x40>)
 8004a86:	4c0c      	ldr	r4, [pc, #48]	; (8004ab8 <__libc_init_array+0x44>)
 8004a88:	f000 fcd0 	bl	800542c <_init>
 8004a8c:	1b64      	subs	r4, r4, r5
 8004a8e:	10a4      	asrs	r4, r4, #2
 8004a90:	2600      	movs	r6, #0
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	0800c45c 	.word	0x0800c45c
 8004ab0:	0800c45c 	.word	0x0800c45c
 8004ab4:	0800c45c 	.word	0x0800c45c
 8004ab8:	0800c460 	.word	0x0800c460

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <sniprintf>:
 8004acc:	b40c      	push	{r2, r3}
 8004ace:	b530      	push	{r4, r5, lr}
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <sniprintf+0x64>)
 8004ad2:	1e0c      	subs	r4, r1, #0
 8004ad4:	681d      	ldr	r5, [r3, #0]
 8004ad6:	b09d      	sub	sp, #116	; 0x74
 8004ad8:	da08      	bge.n	8004aec <sniprintf+0x20>
 8004ada:	238b      	movs	r3, #139	; 0x8b
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae2:	b01d      	add	sp, #116	; 0x74
 8004ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ae8:	b002      	add	sp, #8
 8004aea:	4770      	bx	lr
 8004aec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004af0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004af4:	bf14      	ite	ne
 8004af6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004afa:	4623      	moveq	r3, r4
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	9307      	str	r3, [sp, #28]
 8004b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b04:	9002      	str	r0, [sp, #8]
 8004b06:	9006      	str	r0, [sp, #24]
 8004b08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b0e:	ab21      	add	r3, sp, #132	; 0x84
 8004b10:	a902      	add	r1, sp, #8
 8004b12:	4628      	mov	r0, r5
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	f000 f939 	bl	8004d8c <_svfiprintf_r>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	bfbc      	itt	lt
 8004b1e:	238b      	movlt	r3, #139	; 0x8b
 8004b20:	602b      	strlt	r3, [r5, #0]
 8004b22:	2c00      	cmp	r4, #0
 8004b24:	d0dd      	beq.n	8004ae2 <sniprintf+0x16>
 8004b26:	9b02      	ldr	r3, [sp, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e7d9      	b.n	8004ae2 <sniprintf+0x16>
 8004b2e:	bf00      	nop
 8004b30:	20000014 	.word	0x20000014

08004b34 <strcat>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4602      	mov	r2, r0
 8004b38:	7814      	ldrb	r4, [r2, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	3201      	adds	r2, #1
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	d1fa      	bne.n	8004b38 <strcat+0x4>
 8004b42:	3b01      	subs	r3, #1
 8004b44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d1f9      	bne.n	8004b44 <strcat+0x10>
 8004b50:	bd10      	pop	{r4, pc}
	...

08004b54 <strdup>:
 8004b54:	4b02      	ldr	r3, [pc, #8]	; (8004b60 <strdup+0xc>)
 8004b56:	4601      	mov	r1, r0
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f000 b803 	b.w	8004b64 <_strdup_r>
 8004b5e:	bf00      	nop
 8004b60:	20000014 	.word	0x20000014

08004b64 <_strdup_r>:
 8004b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	f7fb fb30 	bl	80001d0 <strlen>
 8004b70:	1c42      	adds	r2, r0, #1
 8004b72:	4611      	mov	r1, r2
 8004b74:	4620      	mov	r0, r4
 8004b76:	9201      	str	r2, [sp, #4]
 8004b78:	f000 f838 	bl	8004bec <_malloc_r>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	b118      	cbz	r0, 8004b88 <_strdup_r+0x24>
 8004b80:	9a01      	ldr	r2, [sp, #4]
 8004b82:	4629      	mov	r1, r5
 8004b84:	f000 f803 	bl	8004b8e <memcpy>
 8004b88:	4620      	mov	r0, r4
 8004b8a:	b003      	add	sp, #12
 8004b8c:	bd30      	pop	{r4, r5, pc}

08004b8e <memcpy>:
 8004b8e:	440a      	add	r2, r1
 8004b90:	4291      	cmp	r1, r2
 8004b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b96:	d100      	bne.n	8004b9a <memcpy+0xc>
 8004b98:	4770      	bx	lr
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba4:	4291      	cmp	r1, r2
 8004ba6:	d1f9      	bne.n	8004b9c <memcpy+0xe>
 8004ba8:	bd10      	pop	{r4, pc}
	...

08004bac <sbrk_aligned>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4e0e      	ldr	r6, [pc, #56]	; (8004be8 <sbrk_aligned+0x3c>)
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	6831      	ldr	r1, [r6, #0]
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	b911      	cbnz	r1, 8004bbe <sbrk_aligned+0x12>
 8004bb8:	f000 fb7c 	bl	80052b4 <_sbrk_r>
 8004bbc:	6030      	str	r0, [r6, #0]
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 fb77 	bl	80052b4 <_sbrk_r>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	d00a      	beq.n	8004be0 <sbrk_aligned+0x34>
 8004bca:	1cc4      	adds	r4, r0, #3
 8004bcc:	f024 0403 	bic.w	r4, r4, #3
 8004bd0:	42a0      	cmp	r0, r4
 8004bd2:	d007      	beq.n	8004be4 <sbrk_aligned+0x38>
 8004bd4:	1a21      	subs	r1, r4, r0
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f000 fb6c 	bl	80052b4 <_sbrk_r>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d101      	bne.n	8004be4 <sbrk_aligned+0x38>
 8004be0:	f04f 34ff 	mov.w	r4, #4294967295
 8004be4:	4620      	mov	r0, r4
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	200001d4 	.word	0x200001d4

08004bec <_malloc_r>:
 8004bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	1ccd      	adds	r5, r1, #3
 8004bf2:	f025 0503 	bic.w	r5, r5, #3
 8004bf6:	3508      	adds	r5, #8
 8004bf8:	2d0c      	cmp	r5, #12
 8004bfa:	bf38      	it	cc
 8004bfc:	250c      	movcc	r5, #12
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	4607      	mov	r7, r0
 8004c02:	db01      	blt.n	8004c08 <_malloc_r+0x1c>
 8004c04:	42a9      	cmp	r1, r5
 8004c06:	d905      	bls.n	8004c14 <_malloc_r+0x28>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c14:	4e2e      	ldr	r6, [pc, #184]	; (8004cd0 <_malloc_r+0xe4>)
 8004c16:	f000 fb77 	bl	8005308 <__malloc_lock>
 8004c1a:	6833      	ldr	r3, [r6, #0]
 8004c1c:	461c      	mov	r4, r3
 8004c1e:	bb34      	cbnz	r4, 8004c6e <_malloc_r+0x82>
 8004c20:	4629      	mov	r1, r5
 8004c22:	4638      	mov	r0, r7
 8004c24:	f7ff ffc2 	bl	8004bac <sbrk_aligned>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	d14d      	bne.n	8004cca <_malloc_r+0xde>
 8004c2e:	6834      	ldr	r4, [r6, #0]
 8004c30:	4626      	mov	r6, r4
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	d140      	bne.n	8004cb8 <_malloc_r+0xcc>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	eb04 0803 	add.w	r8, r4, r3
 8004c40:	f000 fb38 	bl	80052b4 <_sbrk_r>
 8004c44:	4580      	cmp	r8, r0
 8004c46:	d13a      	bne.n	8004cbe <_malloc_r+0xd2>
 8004c48:	6821      	ldr	r1, [r4, #0]
 8004c4a:	3503      	adds	r5, #3
 8004c4c:	1a6d      	subs	r5, r5, r1
 8004c4e:	f025 0503 	bic.w	r5, r5, #3
 8004c52:	3508      	adds	r5, #8
 8004c54:	2d0c      	cmp	r5, #12
 8004c56:	bf38      	it	cc
 8004c58:	250c      	movcc	r5, #12
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f7ff ffa5 	bl	8004bac <sbrk_aligned>
 8004c62:	3001      	adds	r0, #1
 8004c64:	d02b      	beq.n	8004cbe <_malloc_r+0xd2>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	442b      	add	r3, r5
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	e00e      	b.n	8004c8c <_malloc_r+0xa0>
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	1b52      	subs	r2, r2, r5
 8004c72:	d41e      	bmi.n	8004cb2 <_malloc_r+0xc6>
 8004c74:	2a0b      	cmp	r2, #11
 8004c76:	d916      	bls.n	8004ca6 <_malloc_r+0xba>
 8004c78:	1961      	adds	r1, r4, r5
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	6025      	str	r5, [r4, #0]
 8004c7e:	bf18      	it	ne
 8004c80:	6059      	strne	r1, [r3, #4]
 8004c82:	6863      	ldr	r3, [r4, #4]
 8004c84:	bf08      	it	eq
 8004c86:	6031      	streq	r1, [r6, #0]
 8004c88:	5162      	str	r2, [r4, r5]
 8004c8a:	604b      	str	r3, [r1, #4]
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f104 060b 	add.w	r6, r4, #11
 8004c92:	f000 fb3f 	bl	8005314 <__malloc_unlock>
 8004c96:	f026 0607 	bic.w	r6, r6, #7
 8004c9a:	1d23      	adds	r3, r4, #4
 8004c9c:	1af2      	subs	r2, r6, r3
 8004c9e:	d0b6      	beq.n	8004c0e <_malloc_r+0x22>
 8004ca0:	1b9b      	subs	r3, r3, r6
 8004ca2:	50a3      	str	r3, [r4, r2]
 8004ca4:	e7b3      	b.n	8004c0e <_malloc_r+0x22>
 8004ca6:	6862      	ldr	r2, [r4, #4]
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	bf0c      	ite	eq
 8004cac:	6032      	streq	r2, [r6, #0]
 8004cae:	605a      	strne	r2, [r3, #4]
 8004cb0:	e7ec      	b.n	8004c8c <_malloc_r+0xa0>
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	6864      	ldr	r4, [r4, #4]
 8004cb6:	e7b2      	b.n	8004c1e <_malloc_r+0x32>
 8004cb8:	4634      	mov	r4, r6
 8004cba:	6876      	ldr	r6, [r6, #4]
 8004cbc:	e7b9      	b.n	8004c32 <_malloc_r+0x46>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f000 fb26 	bl	8005314 <__malloc_unlock>
 8004cc8:	e7a1      	b.n	8004c0e <_malloc_r+0x22>
 8004cca:	6025      	str	r5, [r4, #0]
 8004ccc:	e7de      	b.n	8004c8c <_malloc_r+0xa0>
 8004cce:	bf00      	nop
 8004cd0:	200001d0 	.word	0x200001d0

08004cd4 <__ssputs_r>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	688e      	ldr	r6, [r1, #8]
 8004cda:	429e      	cmp	r6, r3
 8004cdc:	4682      	mov	sl, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	4690      	mov	r8, r2
 8004ce2:	461f      	mov	r7, r3
 8004ce4:	d838      	bhi.n	8004d58 <__ssputs_r+0x84>
 8004ce6:	898a      	ldrh	r2, [r1, #12]
 8004ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cec:	d032      	beq.n	8004d54 <__ssputs_r+0x80>
 8004cee:	6825      	ldr	r5, [r4, #0]
 8004cf0:	6909      	ldr	r1, [r1, #16]
 8004cf2:	eba5 0901 	sub.w	r9, r5, r1
 8004cf6:	6965      	ldr	r5, [r4, #20]
 8004cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d00:	3301      	adds	r3, #1
 8004d02:	444b      	add	r3, r9
 8004d04:	106d      	asrs	r5, r5, #1
 8004d06:	429d      	cmp	r5, r3
 8004d08:	bf38      	it	cc
 8004d0a:	461d      	movcc	r5, r3
 8004d0c:	0553      	lsls	r3, r2, #21
 8004d0e:	d531      	bpl.n	8004d74 <__ssputs_r+0xa0>
 8004d10:	4629      	mov	r1, r5
 8004d12:	f7ff ff6b 	bl	8004bec <_malloc_r>
 8004d16:	4606      	mov	r6, r0
 8004d18:	b950      	cbnz	r0, 8004d30 <__ssputs_r+0x5c>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	f8ca 3000 	str.w	r3, [sl]
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	6921      	ldr	r1, [r4, #16]
 8004d32:	464a      	mov	r2, r9
 8004d34:	f7ff ff2b 	bl	8004b8e <memcpy>
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	6126      	str	r6, [r4, #16]
 8004d46:	6165      	str	r5, [r4, #20]
 8004d48:	444e      	add	r6, r9
 8004d4a:	eba5 0509 	sub.w	r5, r5, r9
 8004d4e:	6026      	str	r6, [r4, #0]
 8004d50:	60a5      	str	r5, [r4, #8]
 8004d52:	463e      	mov	r6, r7
 8004d54:	42be      	cmp	r6, r7
 8004d56:	d900      	bls.n	8004d5a <__ssputs_r+0x86>
 8004d58:	463e      	mov	r6, r7
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4641      	mov	r1, r8
 8004d60:	f000 fab8 	bl	80052d4 <memmove>
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	1b9b      	subs	r3, r3, r6
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4433      	add	r3, r6
 8004d6e:	6023      	str	r3, [r4, #0]
 8004d70:	2000      	movs	r0, #0
 8004d72:	e7db      	b.n	8004d2c <__ssputs_r+0x58>
 8004d74:	462a      	mov	r2, r5
 8004d76:	f000 fb1f 	bl	80053b8 <_realloc_r>
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d1e1      	bne.n	8004d44 <__ssputs_r+0x70>
 8004d80:	6921      	ldr	r1, [r4, #16]
 8004d82:	4650      	mov	r0, sl
 8004d84:	f000 facc 	bl	8005320 <_free_r>
 8004d88:	e7c7      	b.n	8004d1a <__ssputs_r+0x46>
	...

08004d8c <_svfiprintf_r>:
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	4698      	mov	r8, r3
 8004d92:	898b      	ldrh	r3, [r1, #12]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	b09d      	sub	sp, #116	; 0x74
 8004d98:	4607      	mov	r7, r0
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	d50e      	bpl.n	8004dbe <_svfiprintf_r+0x32>
 8004da0:	690b      	ldr	r3, [r1, #16]
 8004da2:	b963      	cbnz	r3, 8004dbe <_svfiprintf_r+0x32>
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	f7ff ff21 	bl	8004bec <_malloc_r>
 8004daa:	6028      	str	r0, [r5, #0]
 8004dac:	6128      	str	r0, [r5, #16]
 8004dae:	b920      	cbnz	r0, 8004dba <_svfiprintf_r+0x2e>
 8004db0:	230c      	movs	r3, #12
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e0d1      	b.n	8004f5e <_svfiprintf_r+0x1d2>
 8004dba:	2340      	movs	r3, #64	; 0x40
 8004dbc:	616b      	str	r3, [r5, #20]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dcc:	2330      	movs	r3, #48	; 0x30
 8004dce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f78 <_svfiprintf_r+0x1ec>
 8004dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dd6:	f04f 0901 	mov.w	r9, #1
 8004dda:	4623      	mov	r3, r4
 8004ddc:	469a      	mov	sl, r3
 8004dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de2:	b10a      	cbz	r2, 8004de8 <_svfiprintf_r+0x5c>
 8004de4:	2a25      	cmp	r2, #37	; 0x25
 8004de6:	d1f9      	bne.n	8004ddc <_svfiprintf_r+0x50>
 8004de8:	ebba 0b04 	subs.w	fp, sl, r4
 8004dec:	d00b      	beq.n	8004e06 <_svfiprintf_r+0x7a>
 8004dee:	465b      	mov	r3, fp
 8004df0:	4622      	mov	r2, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	4638      	mov	r0, r7
 8004df6:	f7ff ff6d 	bl	8004cd4 <__ssputs_r>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f000 80aa 	beq.w	8004f54 <_svfiprintf_r+0x1c8>
 8004e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e02:	445a      	add	r2, fp
 8004e04:	9209      	str	r2, [sp, #36]	; 0x24
 8004e06:	f89a 3000 	ldrb.w	r3, [sl]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80a2 	beq.w	8004f54 <_svfiprintf_r+0x1c8>
 8004e10:	2300      	movs	r3, #0
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e1a:	f10a 0a01 	add.w	sl, sl, #1
 8004e1e:	9304      	str	r3, [sp, #16]
 8004e20:	9307      	str	r3, [sp, #28]
 8004e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e26:	931a      	str	r3, [sp, #104]	; 0x68
 8004e28:	4654      	mov	r4, sl
 8004e2a:	2205      	movs	r2, #5
 8004e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e30:	4851      	ldr	r0, [pc, #324]	; (8004f78 <_svfiprintf_r+0x1ec>)
 8004e32:	f7fb f9d5 	bl	80001e0 <memchr>
 8004e36:	9a04      	ldr	r2, [sp, #16]
 8004e38:	b9d8      	cbnz	r0, 8004e72 <_svfiprintf_r+0xe6>
 8004e3a:	06d0      	lsls	r0, r2, #27
 8004e3c:	bf44      	itt	mi
 8004e3e:	2320      	movmi	r3, #32
 8004e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e44:	0711      	lsls	r1, r2, #28
 8004e46:	bf44      	itt	mi
 8004e48:	232b      	movmi	r3, #43	; 0x2b
 8004e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e52:	2b2a      	cmp	r3, #42	; 0x2a
 8004e54:	d015      	beq.n	8004e82 <_svfiprintf_r+0xf6>
 8004e56:	9a07      	ldr	r2, [sp, #28]
 8004e58:	4654      	mov	r4, sl
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f04f 0c0a 	mov.w	ip, #10
 8004e60:	4621      	mov	r1, r4
 8004e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e66:	3b30      	subs	r3, #48	; 0x30
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	d94e      	bls.n	8004f0a <_svfiprintf_r+0x17e>
 8004e6c:	b1b0      	cbz	r0, 8004e9c <_svfiprintf_r+0x110>
 8004e6e:	9207      	str	r2, [sp, #28]
 8004e70:	e014      	b.n	8004e9c <_svfiprintf_r+0x110>
 8004e72:	eba0 0308 	sub.w	r3, r0, r8
 8004e76:	fa09 f303 	lsl.w	r3, r9, r3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	46a2      	mov	sl, r4
 8004e80:	e7d2      	b.n	8004e28 <_svfiprintf_r+0x9c>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	1d19      	adds	r1, r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	9103      	str	r1, [sp, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfbb      	ittet	lt
 8004e8e:	425b      	neglt	r3, r3
 8004e90:	f042 0202 	orrlt.w	r2, r2, #2
 8004e94:	9307      	strge	r3, [sp, #28]
 8004e96:	9307      	strlt	r3, [sp, #28]
 8004e98:	bfb8      	it	lt
 8004e9a:	9204      	strlt	r2, [sp, #16]
 8004e9c:	7823      	ldrb	r3, [r4, #0]
 8004e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea0:	d10c      	bne.n	8004ebc <_svfiprintf_r+0x130>
 8004ea2:	7863      	ldrb	r3, [r4, #1]
 8004ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea6:	d135      	bne.n	8004f14 <_svfiprintf_r+0x188>
 8004ea8:	9b03      	ldr	r3, [sp, #12]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	9203      	str	r2, [sp, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bfb8      	it	lt
 8004eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eb8:	3402      	adds	r4, #2
 8004eba:	9305      	str	r3, [sp, #20]
 8004ebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f88 <_svfiprintf_r+0x1fc>
 8004ec0:	7821      	ldrb	r1, [r4, #0]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f7fb f98b 	bl	80001e0 <memchr>
 8004eca:	b140      	cbz	r0, 8004ede <_svfiprintf_r+0x152>
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	eba0 000a 	sub.w	r0, r0, sl
 8004ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ed6:	9b04      	ldr	r3, [sp, #16]
 8004ed8:	4303      	orrs	r3, r0
 8004eda:	3401      	adds	r4, #1
 8004edc:	9304      	str	r3, [sp, #16]
 8004ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee2:	4826      	ldr	r0, [pc, #152]	; (8004f7c <_svfiprintf_r+0x1f0>)
 8004ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ee8:	2206      	movs	r2, #6
 8004eea:	f7fb f979 	bl	80001e0 <memchr>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d038      	beq.n	8004f64 <_svfiprintf_r+0x1d8>
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <_svfiprintf_r+0x1f4>)
 8004ef4:	bb1b      	cbnz	r3, 8004f3e <_svfiprintf_r+0x1b2>
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	3307      	adds	r3, #7
 8004efa:	f023 0307 	bic.w	r3, r3, #7
 8004efe:	3308      	adds	r3, #8
 8004f00:	9303      	str	r3, [sp, #12]
 8004f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f04:	4433      	add	r3, r6
 8004f06:	9309      	str	r3, [sp, #36]	; 0x24
 8004f08:	e767      	b.n	8004dda <_svfiprintf_r+0x4e>
 8004f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f0e:	460c      	mov	r4, r1
 8004f10:	2001      	movs	r0, #1
 8004f12:	e7a5      	b.n	8004e60 <_svfiprintf_r+0xd4>
 8004f14:	2300      	movs	r3, #0
 8004f16:	3401      	adds	r4, #1
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f04f 0c0a 	mov.w	ip, #10
 8004f20:	4620      	mov	r0, r4
 8004f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f26:	3a30      	subs	r2, #48	; 0x30
 8004f28:	2a09      	cmp	r2, #9
 8004f2a:	d903      	bls.n	8004f34 <_svfiprintf_r+0x1a8>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0c5      	beq.n	8004ebc <_svfiprintf_r+0x130>
 8004f30:	9105      	str	r1, [sp, #20]
 8004f32:	e7c3      	b.n	8004ebc <_svfiprintf_r+0x130>
 8004f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f38:	4604      	mov	r4, r0
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e7f0      	b.n	8004f20 <_svfiprintf_r+0x194>
 8004f3e:	ab03      	add	r3, sp, #12
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	462a      	mov	r2, r5
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <_svfiprintf_r+0x1f8>)
 8004f46:	a904      	add	r1, sp, #16
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f3af 8000 	nop.w
 8004f4e:	1c42      	adds	r2, r0, #1
 8004f50:	4606      	mov	r6, r0
 8004f52:	d1d6      	bne.n	8004f02 <_svfiprintf_r+0x176>
 8004f54:	89ab      	ldrh	r3, [r5, #12]
 8004f56:	065b      	lsls	r3, r3, #25
 8004f58:	f53f af2c 	bmi.w	8004db4 <_svfiprintf_r+0x28>
 8004f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f5e:	b01d      	add	sp, #116	; 0x74
 8004f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f64:	ab03      	add	r3, sp, #12
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <_svfiprintf_r+0x1f8>)
 8004f6c:	a904      	add	r1, sp, #16
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f000 f87a 	bl	8005068 <_printf_i>
 8004f74:	e7eb      	b.n	8004f4e <_svfiprintf_r+0x1c2>
 8004f76:	bf00      	nop
 8004f78:	0800c420 	.word	0x0800c420
 8004f7c:	0800c42a 	.word	0x0800c42a
 8004f80:	00000000 	.word	0x00000000
 8004f84:	08004cd5 	.word	0x08004cd5
 8004f88:	0800c426 	.word	0x0800c426

08004f8c <_printf_common>:
 8004f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	4616      	mov	r6, r2
 8004f92:	4699      	mov	r9, r3
 8004f94:	688a      	ldr	r2, [r1, #8]
 8004f96:	690b      	ldr	r3, [r1, #16]
 8004f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bfb8      	it	lt
 8004fa0:	4613      	movlt	r3, r2
 8004fa2:	6033      	str	r3, [r6, #0]
 8004fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa8:	4607      	mov	r7, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	b10a      	cbz	r2, 8004fb2 <_printf_common+0x26>
 8004fae:	3301      	adds	r3, #1
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	0699      	lsls	r1, r3, #26
 8004fb6:	bf42      	ittt	mi
 8004fb8:	6833      	ldrmi	r3, [r6, #0]
 8004fba:	3302      	addmi	r3, #2
 8004fbc:	6033      	strmi	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	f015 0506 	ands.w	r5, r5, #6
 8004fc4:	d106      	bne.n	8004fd4 <_printf_common+0x48>
 8004fc6:	f104 0a19 	add.w	sl, r4, #25
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	6832      	ldr	r2, [r6, #0]
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dc26      	bgt.n	8005022 <_printf_common+0x96>
 8004fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd8:	1e13      	subs	r3, r2, #0
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	0692      	lsls	r2, r2, #26
 8004fe2:	d42b      	bmi.n	800503c <_printf_common+0xb0>
 8004fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe8:	4649      	mov	r1, r9
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c0      	blx	r8
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d01e      	beq.n	8005030 <_printf_common+0xa4>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	68e5      	ldr	r5, [r4, #12]
 8004ff6:	6832      	ldr	r2, [r6, #0]
 8004ff8:	f003 0306 	and.w	r3, r3, #6
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	bf08      	it	eq
 8005000:	1aad      	subeq	r5, r5, r2
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	bf0c      	ite	eq
 8005008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800500c:	2500      	movne	r5, #0
 800500e:	4293      	cmp	r3, r2
 8005010:	bfc4      	itt	gt
 8005012:	1a9b      	subgt	r3, r3, r2
 8005014:	18ed      	addgt	r5, r5, r3
 8005016:	2600      	movs	r6, #0
 8005018:	341a      	adds	r4, #26
 800501a:	42b5      	cmp	r5, r6
 800501c:	d11a      	bne.n	8005054 <_printf_common+0xc8>
 800501e:	2000      	movs	r0, #0
 8005020:	e008      	b.n	8005034 <_printf_common+0xa8>
 8005022:	2301      	movs	r3, #1
 8005024:	4652      	mov	r2, sl
 8005026:	4649      	mov	r1, r9
 8005028:	4638      	mov	r0, r7
 800502a:	47c0      	blx	r8
 800502c:	3001      	adds	r0, #1
 800502e:	d103      	bne.n	8005038 <_printf_common+0xac>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005038:	3501      	adds	r5, #1
 800503a:	e7c6      	b.n	8004fca <_printf_common+0x3e>
 800503c:	18e1      	adds	r1, r4, r3
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	2030      	movs	r0, #48	; 0x30
 8005042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005046:	4422      	add	r2, r4
 8005048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800504c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005050:	3302      	adds	r3, #2
 8005052:	e7c7      	b.n	8004fe4 <_printf_common+0x58>
 8005054:	2301      	movs	r3, #1
 8005056:	4622      	mov	r2, r4
 8005058:	4649      	mov	r1, r9
 800505a:	4638      	mov	r0, r7
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d0e6      	beq.n	8005030 <_printf_common+0xa4>
 8005062:	3601      	adds	r6, #1
 8005064:	e7d9      	b.n	800501a <_printf_common+0x8e>
	...

08005068 <_printf_i>:
 8005068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	7e0f      	ldrb	r7, [r1, #24]
 800506e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005070:	2f78      	cmp	r7, #120	; 0x78
 8005072:	4691      	mov	r9, r2
 8005074:	4680      	mov	r8, r0
 8005076:	460c      	mov	r4, r1
 8005078:	469a      	mov	sl, r3
 800507a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800507e:	d807      	bhi.n	8005090 <_printf_i+0x28>
 8005080:	2f62      	cmp	r7, #98	; 0x62
 8005082:	d80a      	bhi.n	800509a <_printf_i+0x32>
 8005084:	2f00      	cmp	r7, #0
 8005086:	f000 80d8 	beq.w	800523a <_printf_i+0x1d2>
 800508a:	2f58      	cmp	r7, #88	; 0x58
 800508c:	f000 80a3 	beq.w	80051d6 <_printf_i+0x16e>
 8005090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005098:	e03a      	b.n	8005110 <_printf_i+0xa8>
 800509a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800509e:	2b15      	cmp	r3, #21
 80050a0:	d8f6      	bhi.n	8005090 <_printf_i+0x28>
 80050a2:	a101      	add	r1, pc, #4	; (adr r1, 80050a8 <_printf_i+0x40>)
 80050a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005091 	.word	0x08005091
 80050b4:	08005091 	.word	0x08005091
 80050b8:	08005091 	.word	0x08005091
 80050bc:	08005091 	.word	0x08005091
 80050c0:	08005115 	.word	0x08005115
 80050c4:	08005091 	.word	0x08005091
 80050c8:	08005091 	.word	0x08005091
 80050cc:	08005091 	.word	0x08005091
 80050d0:	08005091 	.word	0x08005091
 80050d4:	08005221 	.word	0x08005221
 80050d8:	08005145 	.word	0x08005145
 80050dc:	08005203 	.word	0x08005203
 80050e0:	08005091 	.word	0x08005091
 80050e4:	08005091 	.word	0x08005091
 80050e8:	08005243 	.word	0x08005243
 80050ec:	08005091 	.word	0x08005091
 80050f0:	08005145 	.word	0x08005145
 80050f4:	08005091 	.word	0x08005091
 80050f8:	08005091 	.word	0x08005091
 80050fc:	0800520b 	.word	0x0800520b
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	602a      	str	r2, [r5, #0]
 8005108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800510c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005110:	2301      	movs	r3, #1
 8005112:	e0a3      	b.n	800525c <_printf_i+0x1f4>
 8005114:	6820      	ldr	r0, [r4, #0]
 8005116:	6829      	ldr	r1, [r5, #0]
 8005118:	0606      	lsls	r6, r0, #24
 800511a:	f101 0304 	add.w	r3, r1, #4
 800511e:	d50a      	bpl.n	8005136 <_printf_i+0xce>
 8005120:	680e      	ldr	r6, [r1, #0]
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	2e00      	cmp	r6, #0
 8005126:	da03      	bge.n	8005130 <_printf_i+0xc8>
 8005128:	232d      	movs	r3, #45	; 0x2d
 800512a:	4276      	negs	r6, r6
 800512c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005130:	485e      	ldr	r0, [pc, #376]	; (80052ac <_printf_i+0x244>)
 8005132:	230a      	movs	r3, #10
 8005134:	e019      	b.n	800516a <_printf_i+0x102>
 8005136:	680e      	ldr	r6, [r1, #0]
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800513e:	bf18      	it	ne
 8005140:	b236      	sxthne	r6, r6
 8005142:	e7ef      	b.n	8005124 <_printf_i+0xbc>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	1d19      	adds	r1, r3, #4
 800514a:	6029      	str	r1, [r5, #0]
 800514c:	0601      	lsls	r1, r0, #24
 800514e:	d501      	bpl.n	8005154 <_printf_i+0xec>
 8005150:	681e      	ldr	r6, [r3, #0]
 8005152:	e002      	b.n	800515a <_printf_i+0xf2>
 8005154:	0646      	lsls	r6, r0, #25
 8005156:	d5fb      	bpl.n	8005150 <_printf_i+0xe8>
 8005158:	881e      	ldrh	r6, [r3, #0]
 800515a:	4854      	ldr	r0, [pc, #336]	; (80052ac <_printf_i+0x244>)
 800515c:	2f6f      	cmp	r7, #111	; 0x6f
 800515e:	bf0c      	ite	eq
 8005160:	2308      	moveq	r3, #8
 8005162:	230a      	movne	r3, #10
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800516a:	6865      	ldr	r5, [r4, #4]
 800516c:	60a5      	str	r5, [r4, #8]
 800516e:	2d00      	cmp	r5, #0
 8005170:	bfa2      	ittt	ge
 8005172:	6821      	ldrge	r1, [r4, #0]
 8005174:	f021 0104 	bicge.w	r1, r1, #4
 8005178:	6021      	strge	r1, [r4, #0]
 800517a:	b90e      	cbnz	r6, 8005180 <_printf_i+0x118>
 800517c:	2d00      	cmp	r5, #0
 800517e:	d04d      	beq.n	800521c <_printf_i+0x1b4>
 8005180:	4615      	mov	r5, r2
 8005182:	fbb6 f1f3 	udiv	r1, r6, r3
 8005186:	fb03 6711 	mls	r7, r3, r1, r6
 800518a:	5dc7      	ldrb	r7, [r0, r7]
 800518c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005190:	4637      	mov	r7, r6
 8005192:	42bb      	cmp	r3, r7
 8005194:	460e      	mov	r6, r1
 8005196:	d9f4      	bls.n	8005182 <_printf_i+0x11a>
 8005198:	2b08      	cmp	r3, #8
 800519a:	d10b      	bne.n	80051b4 <_printf_i+0x14c>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	07de      	lsls	r6, r3, #31
 80051a0:	d508      	bpl.n	80051b4 <_printf_i+0x14c>
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	6861      	ldr	r1, [r4, #4]
 80051a6:	4299      	cmp	r1, r3
 80051a8:	bfde      	ittt	le
 80051aa:	2330      	movle	r3, #48	; 0x30
 80051ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051b4:	1b52      	subs	r2, r2, r5
 80051b6:	6122      	str	r2, [r4, #16]
 80051b8:	f8cd a000 	str.w	sl, [sp]
 80051bc:	464b      	mov	r3, r9
 80051be:	aa03      	add	r2, sp, #12
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff fee2 	bl	8004f8c <_printf_common>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d14c      	bne.n	8005266 <_printf_i+0x1fe>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	b004      	add	sp, #16
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	4835      	ldr	r0, [pc, #212]	; (80052ac <_printf_i+0x244>)
 80051d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051dc:	6829      	ldr	r1, [r5, #0]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e4:	6029      	str	r1, [r5, #0]
 80051e6:	061d      	lsls	r5, r3, #24
 80051e8:	d514      	bpl.n	8005214 <_printf_i+0x1ac>
 80051ea:	07df      	lsls	r7, r3, #31
 80051ec:	bf44      	itt	mi
 80051ee:	f043 0320 	orrmi.w	r3, r3, #32
 80051f2:	6023      	strmi	r3, [r4, #0]
 80051f4:	b91e      	cbnz	r6, 80051fe <_printf_i+0x196>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	f023 0320 	bic.w	r3, r3, #32
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	2310      	movs	r3, #16
 8005200:	e7b0      	b.n	8005164 <_printf_i+0xfc>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f043 0320 	orr.w	r3, r3, #32
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	2378      	movs	r3, #120	; 0x78
 800520c:	4828      	ldr	r0, [pc, #160]	; (80052b0 <_printf_i+0x248>)
 800520e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005212:	e7e3      	b.n	80051dc <_printf_i+0x174>
 8005214:	0659      	lsls	r1, r3, #25
 8005216:	bf48      	it	mi
 8005218:	b2b6      	uxthmi	r6, r6
 800521a:	e7e6      	b.n	80051ea <_printf_i+0x182>
 800521c:	4615      	mov	r5, r2
 800521e:	e7bb      	b.n	8005198 <_printf_i+0x130>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	6826      	ldr	r6, [r4, #0]
 8005224:	6961      	ldr	r1, [r4, #20]
 8005226:	1d18      	adds	r0, r3, #4
 8005228:	6028      	str	r0, [r5, #0]
 800522a:	0635      	lsls	r5, r6, #24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	d501      	bpl.n	8005234 <_printf_i+0x1cc>
 8005230:	6019      	str	r1, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0x1d2>
 8005234:	0670      	lsls	r0, r6, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0x1c8>
 8005238:	8019      	strh	r1, [r3, #0]
 800523a:	2300      	movs	r3, #0
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	4615      	mov	r5, r2
 8005240:	e7ba      	b.n	80051b8 <_printf_i+0x150>
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	602a      	str	r2, [r5, #0]
 8005248:	681d      	ldr	r5, [r3, #0]
 800524a:	6862      	ldr	r2, [r4, #4]
 800524c:	2100      	movs	r1, #0
 800524e:	4628      	mov	r0, r5
 8005250:	f7fa ffc6 	bl	80001e0 <memchr>
 8005254:	b108      	cbz	r0, 800525a <_printf_i+0x1f2>
 8005256:	1b40      	subs	r0, r0, r5
 8005258:	6060      	str	r0, [r4, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	2300      	movs	r3, #0
 8005260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005264:	e7a8      	b.n	80051b8 <_printf_i+0x150>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	462a      	mov	r2, r5
 800526a:	4649      	mov	r1, r9
 800526c:	4640      	mov	r0, r8
 800526e:	47d0      	blx	sl
 8005270:	3001      	adds	r0, #1
 8005272:	d0ab      	beq.n	80051cc <_printf_i+0x164>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	079b      	lsls	r3, r3, #30
 8005278:	d413      	bmi.n	80052a2 <_printf_i+0x23a>
 800527a:	68e0      	ldr	r0, [r4, #12]
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	4298      	cmp	r0, r3
 8005280:	bfb8      	it	lt
 8005282:	4618      	movlt	r0, r3
 8005284:	e7a4      	b.n	80051d0 <_printf_i+0x168>
 8005286:	2301      	movs	r3, #1
 8005288:	4632      	mov	r2, r6
 800528a:	4649      	mov	r1, r9
 800528c:	4640      	mov	r0, r8
 800528e:	47d0      	blx	sl
 8005290:	3001      	adds	r0, #1
 8005292:	d09b      	beq.n	80051cc <_printf_i+0x164>
 8005294:	3501      	adds	r5, #1
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	9903      	ldr	r1, [sp, #12]
 800529a:	1a5b      	subs	r3, r3, r1
 800529c:	42ab      	cmp	r3, r5
 800529e:	dcf2      	bgt.n	8005286 <_printf_i+0x21e>
 80052a0:	e7eb      	b.n	800527a <_printf_i+0x212>
 80052a2:	2500      	movs	r5, #0
 80052a4:	f104 0619 	add.w	r6, r4, #25
 80052a8:	e7f5      	b.n	8005296 <_printf_i+0x22e>
 80052aa:	bf00      	nop
 80052ac:	0800c431 	.word	0x0800c431
 80052b0:	0800c442 	.word	0x0800c442

080052b4 <_sbrk_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d06      	ldr	r5, [pc, #24]	; (80052d0 <_sbrk_r+0x1c>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fc ffee 	bl	80022a0 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_sbrk_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_sbrk_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200001d8 	.word	0x200001d8

080052d4 <memmove>:
 80052d4:	4288      	cmp	r0, r1
 80052d6:	b510      	push	{r4, lr}
 80052d8:	eb01 0402 	add.w	r4, r1, r2
 80052dc:	d902      	bls.n	80052e4 <memmove+0x10>
 80052de:	4284      	cmp	r4, r0
 80052e0:	4623      	mov	r3, r4
 80052e2:	d807      	bhi.n	80052f4 <memmove+0x20>
 80052e4:	1e43      	subs	r3, r0, #1
 80052e6:	42a1      	cmp	r1, r4
 80052e8:	d008      	beq.n	80052fc <memmove+0x28>
 80052ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052f2:	e7f8      	b.n	80052e6 <memmove+0x12>
 80052f4:	4402      	add	r2, r0
 80052f6:	4601      	mov	r1, r0
 80052f8:	428a      	cmp	r2, r1
 80052fa:	d100      	bne.n	80052fe <memmove+0x2a>
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005306:	e7f7      	b.n	80052f8 <memmove+0x24>

08005308 <__malloc_lock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_lock+0x8>)
 800530a:	f000 b884 	b.w	8005416 <__retarget_lock_acquire_recursive>
 800530e:	bf00      	nop
 8005310:	200001dc 	.word	0x200001dc

08005314 <__malloc_unlock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_unlock+0x8>)
 8005316:	f000 b87f 	b.w	8005418 <__retarget_lock_release_recursive>
 800531a:	bf00      	nop
 800531c:	200001dc 	.word	0x200001dc

08005320 <_free_r>:
 8005320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005322:	2900      	cmp	r1, #0
 8005324:	d044      	beq.n	80053b0 <_free_r+0x90>
 8005326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800532a:	9001      	str	r0, [sp, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f1a1 0404 	sub.w	r4, r1, #4
 8005332:	bfb8      	it	lt
 8005334:	18e4      	addlt	r4, r4, r3
 8005336:	f7ff ffe7 	bl	8005308 <__malloc_lock>
 800533a:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <_free_r+0x94>)
 800533c:	9801      	ldr	r0, [sp, #4]
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	b933      	cbnz	r3, 8005350 <_free_r+0x30>
 8005342:	6063      	str	r3, [r4, #4]
 8005344:	6014      	str	r4, [r2, #0]
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800534c:	f7ff bfe2 	b.w	8005314 <__malloc_unlock>
 8005350:	42a3      	cmp	r3, r4
 8005352:	d908      	bls.n	8005366 <_free_r+0x46>
 8005354:	6825      	ldr	r5, [r4, #0]
 8005356:	1961      	adds	r1, r4, r5
 8005358:	428b      	cmp	r3, r1
 800535a:	bf01      	itttt	eq
 800535c:	6819      	ldreq	r1, [r3, #0]
 800535e:	685b      	ldreq	r3, [r3, #4]
 8005360:	1949      	addeq	r1, r1, r5
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	e7ed      	b.n	8005342 <_free_r+0x22>
 8005366:	461a      	mov	r2, r3
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b10b      	cbz	r3, 8005370 <_free_r+0x50>
 800536c:	42a3      	cmp	r3, r4
 800536e:	d9fa      	bls.n	8005366 <_free_r+0x46>
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	1855      	adds	r5, r2, r1
 8005374:	42a5      	cmp	r5, r4
 8005376:	d10b      	bne.n	8005390 <_free_r+0x70>
 8005378:	6824      	ldr	r4, [r4, #0]
 800537a:	4421      	add	r1, r4
 800537c:	1854      	adds	r4, r2, r1
 800537e:	42a3      	cmp	r3, r4
 8005380:	6011      	str	r1, [r2, #0]
 8005382:	d1e0      	bne.n	8005346 <_free_r+0x26>
 8005384:	681c      	ldr	r4, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	6053      	str	r3, [r2, #4]
 800538a:	4421      	add	r1, r4
 800538c:	6011      	str	r1, [r2, #0]
 800538e:	e7da      	b.n	8005346 <_free_r+0x26>
 8005390:	d902      	bls.n	8005398 <_free_r+0x78>
 8005392:	230c      	movs	r3, #12
 8005394:	6003      	str	r3, [r0, #0]
 8005396:	e7d6      	b.n	8005346 <_free_r+0x26>
 8005398:	6825      	ldr	r5, [r4, #0]
 800539a:	1961      	adds	r1, r4, r5
 800539c:	428b      	cmp	r3, r1
 800539e:	bf04      	itt	eq
 80053a0:	6819      	ldreq	r1, [r3, #0]
 80053a2:	685b      	ldreq	r3, [r3, #4]
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	bf04      	itt	eq
 80053a8:	1949      	addeq	r1, r1, r5
 80053aa:	6021      	streq	r1, [r4, #0]
 80053ac:	6054      	str	r4, [r2, #4]
 80053ae:	e7ca      	b.n	8005346 <_free_r+0x26>
 80053b0:	b003      	add	sp, #12
 80053b2:	bd30      	pop	{r4, r5, pc}
 80053b4:	200001d0 	.word	0x200001d0

080053b8 <_realloc_r>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	4680      	mov	r8, r0
 80053be:	4614      	mov	r4, r2
 80053c0:	460e      	mov	r6, r1
 80053c2:	b921      	cbnz	r1, 80053ce <_realloc_r+0x16>
 80053c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	4611      	mov	r1, r2
 80053ca:	f7ff bc0f 	b.w	8004bec <_malloc_r>
 80053ce:	b92a      	cbnz	r2, 80053dc <_realloc_r+0x24>
 80053d0:	f7ff ffa6 	bl	8005320 <_free_r>
 80053d4:	4625      	mov	r5, r4
 80053d6:	4628      	mov	r0, r5
 80053d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053dc:	f000 f81d 	bl	800541a <_malloc_usable_size_r>
 80053e0:	4284      	cmp	r4, r0
 80053e2:	4607      	mov	r7, r0
 80053e4:	d802      	bhi.n	80053ec <_realloc_r+0x34>
 80053e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053ea:	d812      	bhi.n	8005412 <_realloc_r+0x5a>
 80053ec:	4621      	mov	r1, r4
 80053ee:	4640      	mov	r0, r8
 80053f0:	f7ff fbfc 	bl	8004bec <_malloc_r>
 80053f4:	4605      	mov	r5, r0
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d0ed      	beq.n	80053d6 <_realloc_r+0x1e>
 80053fa:	42bc      	cmp	r4, r7
 80053fc:	4622      	mov	r2, r4
 80053fe:	4631      	mov	r1, r6
 8005400:	bf28      	it	cs
 8005402:	463a      	movcs	r2, r7
 8005404:	f7ff fbc3 	bl	8004b8e <memcpy>
 8005408:	4631      	mov	r1, r6
 800540a:	4640      	mov	r0, r8
 800540c:	f7ff ff88 	bl	8005320 <_free_r>
 8005410:	e7e1      	b.n	80053d6 <_realloc_r+0x1e>
 8005412:	4635      	mov	r5, r6
 8005414:	e7df      	b.n	80053d6 <_realloc_r+0x1e>

08005416 <__retarget_lock_acquire_recursive>:
 8005416:	4770      	bx	lr

08005418 <__retarget_lock_release_recursive>:
 8005418:	4770      	bx	lr

0800541a <_malloc_usable_size_r>:
 800541a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800541e:	1f18      	subs	r0, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfbc      	itt	lt
 8005424:	580b      	ldrlt	r3, [r1, r0]
 8005426:	18c0      	addlt	r0, r0, r3
 8005428:	4770      	bx	lr
	...

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
