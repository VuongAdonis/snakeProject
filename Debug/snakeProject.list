
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f40  080084e0  080084e0  000184e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c420  0800c420  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800c420  0800c420  0001c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c428  0800c428  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c42c  0800c42c  0001c42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800c430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00001164  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001268  20001268  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012474  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ea  00000000  00000000  000325a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f90  00000000  00000000  00036e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002533f  00000000  00000000  00037dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2ea  00000000  00000000  0005d10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cff64  00000000  00000000  000773f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014735d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000511c  00000000  00000000  001473b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084c8 	.word	0x080084c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	080084c8 	.word	0x080084c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b095      	sub	sp, #84	; 0x54
 8000588:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fef0 	bl	8001370 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8000590:	4ba6      	ldr	r3, [pc, #664]	; (800082c <setupAdvance+0x2a8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b298      	uxth	r0, r3
 8000596:	4ba6      	ldr	r3, [pc, #664]	; (8000830 <setupAdvance+0x2ac>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b299      	uxth	r1, r3
 800059c:	4ba5      	ldr	r3, [pc, #660]	; (8000834 <setupAdvance+0x2b0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4ba5      	ldr	r3, [pc, #660]	; (8000838 <setupAdvance+0x2b4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4ca4      	ldr	r4, [pc, #656]	; (800083c <setupAdvance+0x2b8>)
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	f001 f8ea 	bl	8001784 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80005b0:	2300      	movs	r3, #0
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2318      	movs	r3, #24
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f248 4330 	movw	r3, #33840	; 0x8430
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	4a9f      	ldr	r2, [pc, #636]	; (8000840 <setupAdvance+0x2bc>)
 80005c4:	2137      	movs	r1, #55	; 0x37
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f001 fab6 	bl	8001b38 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80005cc:	4a9d      	ldr	r2, [pc, #628]	; (8000844 <setupAdvance+0x2c0>)
 80005ce:	463b      	mov	r3, r7
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	1dbb      	adds	r3, r7, #6
 80005dc:	222c      	movs	r2, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f006 fce5 	bl	8006fb0 <memset>
	char *str2 = convert2str(ID);
 80005e6:	4b98      	ldr	r3, [pc, #608]	; (8000848 <setupAdvance+0x2c4>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fc6e 	bl	8001ecc <convert2str>
 80005f0:	4603      	mov	r3, r0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80005f4:	463b      	mov	r3, r7
 80005f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005f8:	4618      	mov	r0, r3
 80005fa:	f006 fd81 	bl	8007100 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80005fe:	463a      	mov	r2, r7
 8000600:	2300      	movs	r3, #0
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2318      	movs	r3, #24
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f248 4330 	movw	r3, #33840	; 0x8430
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	2000      	movs	r0, #0
 8000616:	f001 faf3 	bl	8001c00 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800061a:	2300      	movs	r3, #0
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2318      	movs	r3, #24
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	f248 4330 	movw	r3, #33840	; 0x8430
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062c:	4a87      	ldr	r2, [pc, #540]	; (800084c <setupAdvance+0x2c8>)
 800062e:	2196      	movs	r1, #150	; 0x96
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fae5 	bl	8001c00 <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000636:	2300      	movs	r3, #0
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2318      	movs	r3, #24
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	4a81      	ldr	r2, [pc, #516]	; (8000850 <setupAdvance+0x2cc>)
 800064a:	21d7      	movs	r1, #215	; 0xd7
 800064c:	2014      	movs	r0, #20
 800064e:	f001 fa73 	bl	8001b38 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	23f0      	movs	r3, #240	; 0xf0
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	21d2      	movs	r1, #210	; 0xd2
 800065e:	2096      	movs	r0, #150	; 0x96
 8000660:	f000 ff89 	bl	8001576 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8000664:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <setupAdvance+0x2d0>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fc2f 	bl	8001ecc <convert2str>
 800066e:	4603      	mov	r3, r0
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8000672:	4b78      	ldr	r3, [pc, #480]	; (8000854 <setupAdvance+0x2d0>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2b77      	cmp	r3, #119	; 0x77
 8000678:	d80e      	bhi.n	8000698 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 800067a:	2301      	movs	r3, #1
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2318      	movs	r3, #24
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f248 4330 	movw	r3, #33840	; 0x8430
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800068e:	21d4      	movs	r1, #212	; 0xd4
 8000690:	20a5      	movs	r0, #165	; 0xa5
 8000692:	f001 fa51 	bl	8001b38 <lcd_ShowStr>
 8000696:	e00d      	b.n	80006b4 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8000698:	2301      	movs	r3, #1
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	2318      	movs	r3, #24
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006ac:	21d4      	movs	r1, #212	; 0xd4
 80006ae:	209d      	movs	r0, #157	; 0x9d
 80006b0:	f001 fa42 	bl	8001b38 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80006b4:	4b67      	ldr	r3, [pc, #412]	; (8000854 <setupAdvance+0x2d0>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b77      	cmp	r3, #119	; 0x77
 80006ba:	d81a      	bhi.n	80006f2 <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80006bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	23dc      	movs	r3, #220	; 0xdc
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	21dc      	movs	r1, #220	; 0xdc
 80006c8:	20cd      	movs	r0, #205	; 0xcd
 80006ca:	f000 fed0 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	23d2      	movs	r3, #210	; 0xd2
 80006d6:	22d7      	movs	r2, #215	; 0xd7
 80006d8:	21dc      	movs	r1, #220	; 0xdc
 80006da:	20cd      	movs	r0, #205	; 0xcd
 80006dc:	f000 fec7 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	23d2      	movs	r3, #210	; 0xd2
 80006e8:	22d7      	movs	r2, #215	; 0xd7
 80006ea:	21dc      	movs	r1, #220	; 0xdc
 80006ec:	20e1      	movs	r0, #225	; 0xe1
 80006ee:	f000 febe 	bl	800146e <lcd_DrawLine>
	}
	if(TIMING > 30)
 80006f2:	4b58      	ldr	r3, [pc, #352]	; (8000854 <setupAdvance+0x2d0>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b1e      	cmp	r3, #30
 80006f8:	d91a      	bls.n	8000730 <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	23e6      	movs	r3, #230	; 0xe6
 8000702:	22e1      	movs	r2, #225	; 0xe1
 8000704:	21e6      	movs	r1, #230	; 0xe6
 8000706:	20cd      	movs	r0, #205	; 0xcd
 8000708:	f000 feb1 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 800070c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	23f0      	movs	r3, #240	; 0xf0
 8000714:	22d7      	movs	r2, #215	; 0xd7
 8000716:	21e6      	movs	r1, #230	; 0xe6
 8000718:	20cd      	movs	r0, #205	; 0xcd
 800071a:	f000 fea8 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	23f0      	movs	r3, #240	; 0xf0
 8000726:	22d7      	movs	r2, #215	; 0xd7
 8000728:	21e6      	movs	r1, #230	; 0xe6
 800072a:	20e1      	movs	r0, #225	; 0xe1
 800072c:	f000 fe9f 	bl	800146e <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 8000730:	2300      	movs	r3, #0
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2318      	movs	r3, #24
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	f248 4330 	movw	r3, #33840	; 0x8430
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	4a45      	ldr	r2, [pc, #276]	; (8000858 <setupAdvance+0x2d4>)
 8000744:	f240 1109 	movw	r1, #265	; 0x109
 8000748:	2014      	movs	r0, #20
 800074a:	f001 f9f5 	bl	8001b38 <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800074e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000758:	22c8      	movs	r2, #200	; 0xc8
 800075a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800075e:	2096      	movs	r0, #150	; 0x96
 8000760:	f000 ff09 	bl	8001576 <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <setupAdvance+0x2d8>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fbaf 	bl	8001ecc <convert2str>
 800076e:	4603      	mov	r3, r0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
	lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 8000772:	2301      	movs	r3, #1
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2318      	movs	r3, #24
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	f248 4330 	movw	r3, #33840	; 0x8430
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000786:	f240 1109 	movw	r1, #265	; 0x109
 800078a:	20aa      	movs	r0, #170	; 0xaa
 800078c:	f001 f9d4 	bl	8001b38 <lcd_ShowStr>

	if(WALL < 5)
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <setupAdvance+0x2d8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d820      	bhi.n	80007da <setupAdvance+0x256>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 8000798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007a2:	22e1      	movs	r2, #225	; 0xe1
 80007a4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007a8:	20cd      	movs	r0, #205	; 0xcd
 80007aa:	f000 fe60 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 80007ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007b8:	22d7      	movs	r2, #215	; 0xd7
 80007ba:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007be:	20cd      	movs	r0, #205	; 0xcd
 80007c0:	f000 fe55 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 80007c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007ce:	22d7      	movs	r2, #215	; 0xd7
 80007d0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007d4:	20e1      	movs	r0, #225	; 0xe1
 80007d6:	f000 fe4a 	bl	800146e <lcd_DrawLine>
	}
	if(WALL > 0)
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <setupAdvance+0x2d8>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d020      	beq.n	8000824 <setupAdvance+0x2a0>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80007ec:	22e1      	movs	r2, #225	; 0xe1
 80007ee:	f44f 718c 	mov.w	r1, #280	; 0x118
 80007f2:	20cd      	movs	r0, #205	; 0xcd
 80007f4:	f000 fe3b 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 80007f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000802:	22d7      	movs	r2, #215	; 0xd7
 8000804:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000808:	20cd      	movs	r0, #205	; 0xcd
 800080a:	f000 fe30 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 800080e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000818:	22d7      	movs	r2, #215	; 0xd7
 800081a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800081e:	20e1      	movs	r0, #225	; 0xe1
 8000820:	f000 fe25 	bl	800146e <lcd_DrawLine>
	}
}
 8000824:	bf00      	nop
 8000826:	3744      	adds	r7, #68	; 0x44
 8000828:	46bd      	mov	sp, r7
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	20000078 	.word	0x20000078
 8000830:	2000007c 	.word	0x2000007c
 8000834:	20000080 	.word	0x20000080
 8000838:	20000084 	.word	0x20000084
 800083c:	0800b698 	.word	0x0800b698
 8000840:	080084e0 	.word	0x080084e0
 8000844:	08008510 	.word	0x08008510
 8000848:	20000198 	.word	0x20000198
 800084c:	080084f0 	.word	0x080084f0
 8000850:	08008500 	.word	0x08008500
 8000854:	20000000 	.word	0x20000000
 8000858:	08008508 	.word	0x08008508
 800085c:	2000019c 	.word	0x2000019c

08000860 <initAdvanceMode>:

void initAdvanceMode()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <initAdvanceMode+0x94>)
 8000866:	88db      	ldrh	r3, [r3, #6]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d10e      	bne.n	800088a <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <initAdvanceMode+0x98>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	331e      	adds	r3, #30
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <initAdvanceMode+0x98>)
 8000876:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <initAdvanceMode+0x98>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2b78      	cmp	r3, #120	; 0x78
 800087e:	d902      	bls.n	8000886 <initAdvanceMode+0x26>
		{
			TIMING = 120;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <initAdvanceMode+0x98>)
 8000882:	2278      	movs	r2, #120	; 0x78
 8000884:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000886:	f7ff fe7d 	bl	8000584 <setupAdvance>
	}
	if(button_count[7] == 1)
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <initAdvanceMode+0x94>)
 800088c:	89db      	ldrh	r3, [r3, #14]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10e      	bne.n	80008b0 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <initAdvanceMode+0x98>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	3b1e      	subs	r3, #30
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <initAdvanceMode+0x98>)
 800089c:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <initAdvanceMode+0x98>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	2b1d      	cmp	r3, #29
 80008a4:	d802      	bhi.n	80008ac <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <initAdvanceMode+0x98>)
 80008a8:	221e      	movs	r2, #30
 80008aa:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008ac:	f7ff fe6a 	bl	8000584 <setupAdvance>
	}
	if(button_count[11] == 1)
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <initAdvanceMode+0x94>)
 80008b2:	8adb      	ldrh	r3, [r3, #22]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d10e      	bne.n	80008d6 <initAdvanceMode+0x76>
	{
		WALL = WALL + 1;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <initAdvanceMode+0x9c>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <initAdvanceMode+0x9c>)
 80008c2:	801a      	strh	r2, [r3, #0]
		if(WALL > 5)
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <initAdvanceMode+0x9c>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d902      	bls.n	80008d2 <initAdvanceMode+0x72>
		{
			WALL = 5;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <initAdvanceMode+0x9c>)
 80008ce:	2205      	movs	r2, #5
 80008d0:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 80008d2:	f7ff fe57 	bl	8000584 <setupAdvance>
	}
	if(button_count[15] == 1)
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <initAdvanceMode+0x94>)
 80008d8:	8bdb      	ldrh	r3, [r3, #30]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d107      	bne.n	80008ee <initAdvanceMode+0x8e>
	{
		WALL = WALL - 1;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <initAdvanceMode+0x9c>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <initAdvanceMode+0x9c>)
 80008e8:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 80008ea:	f7ff fe4b 	bl	8000584 <setupAdvance>
	}
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000120 	.word	0x20000120
 80008f8:	20000000 	.word	0x20000000
 80008fc:	2000019c 	.word	0x2000019c

08000900 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	2108      	movs	r1, #8
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <button_init+0x14>)
 800090a:	f004 fca7 	bl	800525c <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020c00 	.word	0x40020c00

08000918 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2108      	movs	r1, #8
 8000922:	482f      	ldr	r0, [pc, #188]	; (80009e0 <button_Scan+0xc8>)
 8000924:	f004 fc9a 	bl	800525c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	2108      	movs	r1, #8
 800092c:	482c      	ldr	r0, [pc, #176]	; (80009e0 <button_Scan+0xc8>)
 800092e:	f004 fc95 	bl	800525c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000932:	230a      	movs	r3, #10
 8000934:	2202      	movs	r2, #2
 8000936:	492b      	ldr	r1, [pc, #172]	; (80009e4 <button_Scan+0xcc>)
 8000938:	482b      	ldr	r0, [pc, #172]	; (80009e8 <button_Scan+0xd0>)
 800093a:	f005 f996 	bl	8005c6a <HAL_SPI_Receive>
	  int button_index = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000946:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	e03f      	b.n	80009ce <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db06      	blt.n	8000962 <button_Scan+0x4a>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b03      	cmp	r3, #3
 8000958:	dc03      	bgt.n	8000962 <button_Scan+0x4a>
			  button_index = i + 4;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3304      	adds	r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e018      	b.n	8000994 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b03      	cmp	r3, #3
 8000966:	dd07      	ble.n	8000978 <button_Scan+0x60>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b07      	cmp	r3, #7
 800096c:	dc04      	bgt.n	8000978 <button_Scan+0x60>
			  button_index = 7 - i;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f1c3 0307 	rsb	r3, r3, #7
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e00d      	b.n	8000994 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b07      	cmp	r3, #7
 800097c:	dd06      	ble.n	800098c <button_Scan+0x74>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0b      	cmp	r3, #11
 8000982:	dc03      	bgt.n	800098c <button_Scan+0x74>
			  button_index = i + 4;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3304      	adds	r3, #4
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e003      	b.n	8000994 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f1c3 0317 	rsb	r3, r3, #23
 8000992:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <button_Scan+0xcc>)
 8000996:	881a      	ldrh	r2, [r3, #0]
 8000998:	897b      	ldrh	r3, [r7, #10]
 800099a:	4013      	ands	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <button_Scan+0x96>
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <button_Scan+0xd4>)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2100      	movs	r1, #0
 80009a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009ac:	e009      	b.n	80009c2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <button_Scan+0xd4>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b299      	uxth	r1, r3
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <button_Scan+0xd4>)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80009c2:	897b      	ldrh	r3, [r7, #10]
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	ddbc      	ble.n	800094e <button_Scan+0x36>
	  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	20000140 	.word	0x20000140
 80009e8:	200011b0 	.word	0x200011b0
 80009ec:	20000120 	.word	0x20000120

080009f0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a1e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000a22:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a26:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <MX_FSMC_Init+0xf0>)
 8000a28:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a3e:	2210      	movs	r2, #16
 8000a40:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_FSMC_Init+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000a82:	230f      	movs	r3, #15
 8000a84:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000a86:	230f      	movs	r3, #15
 8000a88:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000a8a:	233c      	movs	r3, #60	; 0x3c
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000a92:	2310      	movs	r3, #16
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000a96:	2311      	movs	r3, #17
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000aa6:	2309      	movs	r3, #9
 8000aa8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000ab2:	2311      	movs	r3, #17
 8000ab4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000aba:	463a      	mov	r2, r7
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_FSMC_Init+0xec>)
 8000ac4:	f005 fcb4 	bl	8006430 <HAL_SRAM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000ace:	f001 f9f7 	bl	8001ec0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3738      	adds	r7, #56	; 0x38
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000144 	.word	0x20000144
 8000ae0:	a0000104 	.word	0xa0000104

08000ae4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_FSMC_MspInit+0x88>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d131      	bne.n	8000b64 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_FSMC_MspInit+0x88>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_FSMC_MspInit+0x8c>)
 8000b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <HAL_FSMC_MspInit+0x8c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6393      	str	r3, [r2, #56]	; 0x38
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_FSMC_MspInit+0x8c>)
 8000b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b22:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000b26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000b34:	230c      	movs	r3, #12
 8000b36:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <HAL_FSMC_MspInit+0x90>)
 8000b3e:	f004 f9f1 	bl	8004f24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000b42:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000b46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <HAL_FSMC_MspInit+0x94>)
 8000b5e:	f004 f9e1 	bl	8004f24 <HAL_GPIO_Init>
 8000b62:	e000      	b.n	8000b66 <HAL_FSMC_MspInit+0x82>
    return;
 8000b64:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000b84:	f7ff ffae 	bl	8000ae4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <showWallnotify>:
#include "main.h"
#include "button.h"
#include "picture.h"

void showWallnotify()
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <showWallnotify+0xe8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b298      	uxth	r0, r3
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <showWallnotify+0xec>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	b299      	uxth	r1, r3
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <showWallnotify+0xe8>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	b29c      	uxth	r4, r3
 8000ba8:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <showWallnotify+0xec>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <showWallnotify+0xf0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	f248 4230 	movw	r2, #33840	; 0x8430
 8000bbc:	9200      	str	r2, [sp, #0]
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	f000 fc08 	bl	80013d4 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <showWallnotify+0xe8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <showWallnotify+0xec>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	b299      	uxth	r1, r3
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <showWallnotify+0xe8>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	b29c      	uxth	r4, r3
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <showWallnotify+0xec>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <showWallnotify+0xf0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	2200      	movs	r2, #0
 8000be8:	9200      	str	r2, [sp, #0]
 8000bea:	4622      	mov	r2, r4
 8000bec:	f000 fbf2 	bl	80013d4 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <showWallnotify+0xe8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <showWallnotify+0xec>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b299      	uxth	r1, r3
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <showWallnotify+0xe8>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <showWallnotify+0xf0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <showWallnotify+0xec>)
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	2400      	movs	r4, #0
 8000c14:	9400      	str	r4, [sp, #0]
 8000c16:	f000 fbdd 	bl	80013d4 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <showWallnotify+0xe8>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <showWallnotify+0xf0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <showWallnotify+0xec>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	b299      	uxth	r1, r3
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <showWallnotify+0xe8>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <showWallnotify+0xec>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	9400      	str	r4, [sp, #0]
 8000c40:	f000 fbc8 	bl	80013d4 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <showWallnotify+0xe8>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <showWallnotify+0xec>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <showWallnotify+0xf0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <showWallnotify+0xe8>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <showWallnotify+0xec>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	2400      	movs	r4, #0
 8000c68:	9400      	str	r4, [sp, #0]
 8000c6a:	f000 fbb3 	bl	80013d4 <lcd_Fill>

}
 8000c6e:	bf00      	nop
 8000c70:	3704      	adds	r7, #4
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000003c 	.word	0x2000003c
 8000c7c:	2000004c 	.word	0x2000004c
 8000c80:	20000038 	.word	0x20000038

08000c84 <showNotifyOver>:

void showNotifyOver()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 10, "GAME OVER", BLACK, GRAY, 16, 1);
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <showNotifyOver+0x9c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	330a      	adds	r3, #10
 8000c92:	b299      	uxth	r1, r3
 8000c94:	2301      	movs	r3, #1
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	2310      	movs	r3, #16
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <showNotifyOver+0xa0>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 ffaa 	bl	8001c00 <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <showNotifyOver+0xa4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <showNotifyOver+0x9c>)
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <showNotifyOver+0x9c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	0fda      	lsrs	r2, r3, #31
 8000cc2:	4413      	add	r3, r2
 8000cc4:	105b      	asrs	r3, r3, #1
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3b0f      	subs	r3, #15
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	f248 4330 	movw	r3, #33840	; 0x8430
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <showNotifyOver+0xa8>)
 8000cde:	f000 ff2b 	bl	8001b38 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <showNotifyOver+0xa4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	3308      	adds	r3, #8
 8000cea:	b298      	uxth	r0, r3
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <showNotifyOver+0x9c>)
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <showNotifyOver+0x9c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	0fda      	lsrs	r2, r3, #31
 8000cf8:	4413      	add	r3, r2
 8000cfa:	105b      	asrs	r3, r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3314      	adds	r3, #20
 8000d00:	b299      	uxth	r1, r3
 8000d02:	2301      	movs	r3, #1
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	2310      	movs	r3, #16
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	f248 4330 	movw	r3, #33840	; 0x8430
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <showNotifyOver+0xac>)
 8000d14:	f000 ff10 	bl	8001b38 <lcd_ShowStr>
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000004c 	.word	0x2000004c
 8000d24:	08008544 	.word	0x08008544
 8000d28:	2000003c 	.word	0x2000003c
 8000d2c:	08008550 	.word	0x08008550
 8000d30:	0800855c 	.word	0x0800855c

08000d34 <eraseFull>:

void eraseFull()
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <eraseFull+0x4c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <eraseFull+0x50>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b298      	uxth	r0, r3
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <eraseFull+0x54>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	3319      	adds	r3, #25
 8000d52:	b299      	uxth	r1, r3
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <eraseFull+0x4c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <eraseFull+0x50>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <eraseFull+0x54>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	3b05      	subs	r3, #5
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f248 4430 	movw	r4, #33840	; 0x8430
 8000d72:	9400      	str	r4, [sp, #0]
 8000d74:	f000 fb2e 	bl	80013d4 <lcd_Fill>
}
 8000d78:	bf00      	nop
 8000d7a:	3704      	adds	r7, #4
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	2000003c 	.word	0x2000003c
 8000d84:	20000038 	.word	0x20000038
 8000d88:	2000004c 	.word	0x2000004c

08000d8c <drawArrowOver>:

void drawArrowOver()
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8000d92:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <drawArrowOver+0x224>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	4b86      	ldr	r3, [pc, #536]	; (8000fb0 <drawArrowOver+0x224>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	0fda      	lsrs	r2, r3, #31
 8000d9e:	4413      	add	r3, r2
 8000da0:	105b      	asrs	r3, r3, #1
 8000da2:	3b08      	subs	r3, #8
 8000da4:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8000da6:	4b82      	ldr	r3, [pc, #520]	; (8000fb0 <drawArrowOver+0x224>)
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4b81      	ldr	r3, [pc, #516]	; (8000fb0 <drawArrowOver+0x224>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	0fda      	lsrs	r2, r3, #31
 8000db2:	4413      	add	r3, r2
 8000db4:	105b      	asrs	r3, r3, #1
 8000db6:	331c      	adds	r3, #28
 8000db8:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 8000dba:	4b7e      	ldr	r3, [pc, #504]	; (8000fb4 <drawArrowOver+0x228>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <drawArrowOver+0x3c>
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d078      	beq.n	8000eb8 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8000dc6:	e0ef      	b.n	8000fa8 <drawArrowOver+0x21c>
		eraseFull();
 8000dc8:	f7ff ffb4 	bl	8000d34 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 8000dcc:	4b7a      	ldr	r3, [pc, #488]	; (8000fb8 <drawArrowOver+0x22c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	b298      	uxth	r0, r3
 8000dd6:	4b76      	ldr	r3, [pc, #472]	; (8000fb0 <drawArrowOver+0x224>)
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <drawArrowOver+0x224>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	0fda      	lsrs	r2, r3, #31
 8000de2:	4413      	add	r3, r2
 8000de4:	105b      	asrs	r3, r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3b0f      	subs	r3, #15
 8000dea:	b299      	uxth	r1, r3
 8000dec:	2301      	movs	r3, #1
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2310      	movs	r3, #16
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f248 4330 	movw	r3, #33840	; 0x8430
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dfe:	4a6f      	ldr	r2, [pc, #444]	; (8000fbc <drawArrowOver+0x230>)
 8000e00:	f000 fe9a 	bl	8001b38 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 8000e04:	4b6c      	ldr	r3, [pc, #432]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	b298      	uxth	r0, r3
 8000e0e:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <drawArrowOver+0x224>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <drawArrowOver+0x224>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	0fda      	lsrs	r2, r3, #31
 8000e1a:	4413      	add	r3, r2
 8000e1c:	105b      	asrs	r3, r3, #1
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3314      	adds	r3, #20
 8000e22:	b299      	uxth	r1, r3
 8000e24:	2301      	movs	r3, #1
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	2310      	movs	r3, #16
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	f248 4330 	movw	r3, #33840	; 0x8430
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	4a62      	ldr	r2, [pc, #392]	; (8000fc0 <drawArrowOver+0x234>)
 8000e36:	f000 fe7f 	bl	8001b38 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3b0f      	subs	r3, #15
 8000e42:	b298      	uxth	r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	b299      	uxth	r1, r3
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	3b0a      	subs	r3, #10
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	3b05      	subs	r3, #5
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	9400      	str	r4, [sp, #0]
 8000e5e:	f000 fb06 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b0f      	subs	r3, #15
 8000e6a:	b298      	uxth	r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	3b0a      	subs	r3, #10
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3305      	adds	r3, #5
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	2400      	movs	r4, #0
 8000e84:	9400      	str	r4, [sp, #0]
 8000e86:	f000 faf2 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000e8a:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b0a      	subs	r3, #10
 8000e92:	b298      	uxth	r0, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3b05      	subs	r3, #5
 8000e9a:	b299      	uxth	r1, r3
 8000e9c:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <drawArrowOver+0x22c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	3b0a      	subs	r3, #10
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3305      	adds	r3, #5
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	2400      	movs	r4, #0
 8000eb0:	9400      	str	r4, [sp, #0]
 8000eb2:	f000 fadc 	bl	800146e <lcd_DrawLine>
		break;
 8000eb6:	e077      	b.n	8000fa8 <drawArrowOver+0x21c>
		eraseFull();
 8000eb8:	f7ff ff3c 	bl	8000d34 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <drawArrowOver+0x22c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	b298      	uxth	r0, r3
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <drawArrowOver+0x224>)
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <drawArrowOver+0x224>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	0fda      	lsrs	r2, r3, #31
 8000ed2:	4413      	add	r3, r2
 8000ed4:	105b      	asrs	r3, r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3b0f      	subs	r3, #15
 8000eda:	b299      	uxth	r1, r3
 8000edc:	2301      	movs	r3, #1
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	4a33      	ldr	r2, [pc, #204]	; (8000fbc <drawArrowOver+0x230>)
 8000eee:	f000 fe23 	bl	8001b38 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <drawArrowOver+0x22c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3308      	adds	r3, #8
 8000efa:	b298      	uxth	r0, r3
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <drawArrowOver+0x224>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <drawArrowOver+0x224>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	0fda      	lsrs	r2, r3, #31
 8000f08:	4413      	add	r3, r2
 8000f0a:	105b      	asrs	r3, r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	3314      	adds	r3, #20
 8000f10:	b299      	uxth	r1, r3
 8000f12:	2301      	movs	r3, #1
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2310      	movs	r3, #16
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f248 4330 	movw	r3, #33840	; 0x8430
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <drawArrowOver+0x234>)
 8000f26:	f000 fe07 	bl	8001b38 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <drawArrowOver+0x22c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3b0f      	subs	r3, #15
 8000f32:	b298      	uxth	r0, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b299      	uxth	r1, r3
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <drawArrowOver+0x22c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b0a      	subs	r3, #10
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3b05      	subs	r3, #5
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	9400      	str	r4, [sp, #0]
 8000f4e:	f000 fa8e 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <drawArrowOver+0x22c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3b0f      	subs	r3, #15
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <drawArrowOver+0x22c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3b0a      	subs	r3, #10
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3305      	adds	r3, #5
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2400      	movs	r4, #0
 8000f74:	9400      	str	r4, [sp, #0]
 8000f76:	f000 fa7a 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <drawArrowOver+0x22c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3b0a      	subs	r3, #10
 8000f82:	b298      	uxth	r0, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3b05      	subs	r3, #5
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <drawArrowOver+0x22c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3b0a      	subs	r3, #10
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3305      	adds	r3, #5
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	9400      	str	r4, [sp, #0]
 8000fa2:	f000 fa64 	bl	800146e <lcd_DrawLine>
		break;
 8000fa6:	bf00      	nop
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	2000004c 	.word	0x2000004c
 8000fb4:	200001a0 	.word	0x200001a0
 8000fb8:	2000003c 	.word	0x2000003c
 8000fbc:	08008550 	.word	0x08008550
 8000fc0:	0800855c 	.word	0x0800855c

08000fc4 <gameOverUI>:

void gameOverUI()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	showNotifyOver();
 8000fc8:	f7ff fe5c 	bl	8000c84 <showNotifyOver>
	showNotifyOver();
 8000fcc:	f7ff fe5a 	bl	8000c84 <showNotifyOver>
	drawArrowOver();
 8000fd0:	f7ff fedc 	bl	8000d8c <drawArrowOver>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <pickOver>:

void pickOver()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <pickOver+0x6c>)
 8000fde:	88db      	ldrh	r3, [r3, #6]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d10c      	bne.n	8000ffe <pickOver+0x26>
	{
		flagOver = 1;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <pickOver+0x70>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <pickOver+0x74>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d023      	beq.n	800103a <pickOver+0x62>
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d104      	bne.n	8001000 <pickOver+0x28>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <pickOver+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
			break;
 8000ffc:	e000      	b.n	8001000 <pickOver+0x28>
		}
	}
 8000ffe:	bf00      	nop
	if(button_count[7] == 1)
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <pickOver+0x6c>)
 8001002:	89db      	ldrh	r3, [r3, #14]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10d      	bne.n	8001024 <pickOver+0x4c>
	{
		flagOver = 1;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <pickOver+0x70>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <pickOver+0x74>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <pickOver+0x44>
 8001016:	2b01      	cmp	r3, #1
 8001018:	d011      	beq.n	800103e <pickOver+0x66>
 800101a:	e004      	b.n	8001026 <pickOver+0x4e>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <pickOver+0x74>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
			break;
 8001022:	e000      	b.n	8001026 <pickOver+0x4e>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 8001024:	bf00      	nop
	if(flagOver == 1)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <pickOver+0x70>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <pickOver+0x68>
	{
		gameOverUI();
 800102e:	f7ff ffc9 	bl	8000fc4 <gameOverUI>
		flagOver = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <pickOver+0x70>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e002      	b.n	8001040 <pickOver+0x68>
			return;
 800103a:	bf00      	nop
 800103c:	e000      	b.n	8001040 <pickOver+0x68>
			return;
 800103e:	bf00      	nop
	}
}
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000120 	.word	0x20000120
 8001048:	200001b4 	.word	0x200001b4
 800104c:	200001a0 	.word	0x200001a0

08001050 <initOverMode>:

void initOverMode()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	statusGame = OVERMODE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <initOverMode+0x24>)
 8001056:	2207      	movs	r2, #7
 8001058:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <initOverMode+0x28>)
 800105c:	2200      	movs	r2, #0
 800105e:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <initOverMode+0x2c>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <initOverMode+0x30>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
	pickOver();
 800106c:	f7ff ffb4 	bl	8000fd8 <pickOver>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200001ac 	.word	0x200001ac
 8001078:	2000019a 	.word	0x2000019a
 800107c:	200001a0 	.word	0x200001a0
 8001080:	200001b4 	.word	0x200001b4

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a6e      	ldr	r2, [pc, #440]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b6c      	ldr	r3, [pc, #432]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b68      	ldr	r3, [pc, #416]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a67      	ldr	r2, [pc, #412]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a60      	ldr	r2, [pc, #384]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b5a      	ldr	r3, [pc, #360]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a59      	ldr	r2, [pc, #356]	; (800125c <MX_GPIO_Init+0x1d8>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b53      	ldr	r3, [pc, #332]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a52      	ldr	r2, [pc, #328]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b50      	ldr	r3, [pc, #320]	; (800125c <MX_GPIO_Init+0x1d8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <MX_GPIO_Init+0x1d8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a4b      	ldr	r2, [pc, #300]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b45      	ldr	r3, [pc, #276]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a44      	ldr	r2, [pc, #272]	; (800125c <MX_GPIO_Init+0x1d8>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <MX_GPIO_Init+0x1d8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2170      	movs	r1, #112	; 0x70
 8001162:	483f      	ldr	r0, [pc, #252]	; (8001260 <MX_GPIO_Init+0x1dc>)
 8001164:	f004 f87a 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	483d      	ldr	r0, [pc, #244]	; (8001264 <MX_GPIO_Init+0x1e0>)
 8001170:	f004 f874 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	483b      	ldr	r0, [pc, #236]	; (8001268 <MX_GPIO_Init+0x1e4>)
 800117a:	f004 f86f 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001184:	4839      	ldr	r0, [pc, #228]	; (800126c <MX_GPIO_Init+0x1e8>)
 8001186:	f004 f869 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2108      	movs	r1, #8
 800118e:	4838      	ldr	r0, [pc, #224]	; (8001270 <MX_GPIO_Init+0x1ec>)
 8001190:	f004 f864 	bl	800525c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001194:	2370      	movs	r3, #112	; 0x70
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	482d      	ldr	r0, [pc, #180]	; (8001260 <MX_GPIO_Init+0x1dc>)
 80011ac:	f003 feba 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4826      	ldr	r0, [pc, #152]	; (8001264 <MX_GPIO_Init+0x1e0>)
 80011ca:	f003 feab 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80011ce:	23c0      	movs	r3, #192	; 0xc0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4822      	ldr	r0, [pc, #136]	; (800126c <MX_GPIO_Init+0x1e8>)
 80011e2:	f003 fe9f 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80011e6:	2330      	movs	r3, #48	; 0x30
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <MX_GPIO_Init+0x1e0>)
 80011fa:	f003 fe93 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_GPIO_Init+0x1e4>)
 8001216:	f003 fe85 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800121a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <MX_GPIO_Init+0x1e8>)
 8001234:	f003 fe76 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001238:	2308      	movs	r3, #8
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <MX_GPIO_Init+0x1ec>)
 8001250:	f003 fe68 	bl	8004f24 <HAL_GPIO_Init>

}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40021000 	.word	0x40021000
 8001264:	40020800 	.word	0x40020800
 8001268:	40021800 	.word	0x40021800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020c00 	.word	0x40020c00

08001274 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <LCD_WR_REG+0x1c>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	8013      	strh	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	600ffffe 	.word	0x600ffffe

08001294 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <LCD_WR_DATA+0x1c>)
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	8053      	strh	r3, [r2, #2]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	600ffffe 	.word	0x600ffffe

080012b4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <LCD_RD_DATA+0x20>)
 80012bc:	885b      	ldrh	r3, [r3, #2]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	b29b      	uxth	r3, r3
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	600ffffe 	.word	0x600ffffe

080012d8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4604      	mov	r4, r0
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	4603      	mov	r3, r0
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]
 80012f2:	4613      	mov	r3, r2
 80012f4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80012f6:	202a      	movs	r0, #42	; 0x2a
 80012f8:	f7ff ffbc 	bl	8001274 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffc6 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffc0 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffba 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffb4 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800132c:	202b      	movs	r0, #43	; 0x2b
 800132e:	f7ff ffa1 	bl	8001274 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffab 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ffa5 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800134a:	883b      	ldrh	r3, [r7, #0]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff9f 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001356:	883b      	ldrh	r3, [r7, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff99 	bl	8001294 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001362:	202c      	movs	r0, #44	; 0x2c
 8001364:	f7ff ff86 	bl	8001274 <LCD_WR_REG>
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <lcd_Clear+0x60>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <lcd_Clear+0x60>)
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	3b01      	subs	r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	2100      	movs	r1, #0
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff ffa3 	bl	80012d8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001392:	2300      	movs	r3, #0
 8001394:	81fb      	strh	r3, [r7, #14]
 8001396:	e011      	b.n	80013bc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001398:	2300      	movs	r3, #0
 800139a:	81bb      	strh	r3, [r7, #12]
 800139c:	e006      	b.n	80013ac <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff77 	bl	8001294 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	81bb      	strh	r3, [r7, #12]
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <lcd_Clear+0x60>)
 80013ae:	885b      	ldrh	r3, [r3, #2]
 80013b0:	89ba      	ldrh	r2, [r7, #12]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3f3      	bcc.n	800139e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	3301      	adds	r3, #1
 80013ba:	81fb      	strh	r3, [r7, #14]
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <lcd_Clear+0x60>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	89fa      	ldrh	r2, [r7, #14]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3e8      	bcc.n	8001398 <lcd_Clear+0x28>
		}
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001c0 	.word	0x200001c0

080013d4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	88b9      	ldrh	r1, [r7, #4]
 8001400:	88f8      	ldrh	r0, [r7, #6]
 8001402:	f7ff ff69 	bl	80012d8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	81fb      	strh	r3, [r7, #14]
 800140a:	e010      	b.n	800142e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	81bb      	strh	r3, [r7, #12]
 8001410:	e006      	b.n	8001420 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001412:	8c3b      	ldrh	r3, [r7, #32]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff3d 	bl	8001294 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	81bb      	strh	r3, [r7, #12]
 8001420:	89ba      	ldrh	r2, [r7, #12]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	429a      	cmp	r2, r3
 8001426:	d3f4      	bcc.n	8001412 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	3301      	adds	r3, #1
 800142c:	81fb      	strh	r3, [r7, #14]
 800142e:	89fa      	ldrh	r2, [r7, #14]
 8001430:	883b      	ldrh	r3, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3ea      	bcc.n	800140c <lcd_Fill+0x38>
		}
	}
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}

08001440 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	460b      	mov	r3, r1
 800144c:	80bb      	strh	r3, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	88b9      	ldrh	r1, [r7, #4]
 8001458:	88f8      	ldrh	r0, [r7, #6]
 800145a:	f7ff ff3d 	bl	80012d8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff17 	bl	8001294 <LCD_WR_DATA>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 800146e:	b590      	push	{r4, r7, lr}
 8001470:	b08d      	sub	sp, #52	; 0x34
 8001472:	af00      	add	r7, sp, #0
 8001474:	4604      	mov	r4, r0
 8001476:	4608      	mov	r0, r1
 8001478:	4611      	mov	r1, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4623      	mov	r3, r4
 800147e:	80fb      	strh	r3, [r7, #6]
 8001480:	4603      	mov	r3, r0
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800149c:	883a      	ldrh	r2, [r7, #0]
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dd02      	ble.n	80014b8 <lcd_DrawLine+0x4a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e00b      	b.n	80014d0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <lcd_DrawLine+0x56>
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e005      	b.n	80014d0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	425b      	negs	r3, r3
 80014ce:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dd02      	ble.n	80014dc <lcd_DrawLine+0x6e>
 80014d6:	2301      	movs	r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	e00b      	b.n	80014f4 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <lcd_DrawLine+0x7a>
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e005      	b.n	80014f4 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	425b      	negs	r3, r3
 80014f2:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 80014f4:	6a3a      	ldr	r2, [r7, #32]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dd02      	ble.n	8001502 <lcd_DrawLine+0x94>
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	e001      	b.n	8001506 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001506:	2300      	movs	r3, #0
 8001508:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800150a:	e02b      	b.n	8001564 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	b29b      	uxth	r3, r3
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	b291      	uxth	r1, r2
 8001514:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff91 	bl	8001440 <lcd_DrawPoint>
		xerr+=delta_x;
 800151e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	4413      	add	r3, r2
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800152e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	429a      	cmp	r2, r3
 8001534:	dd07      	ble.n	8001546 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	429a      	cmp	r2, r3
 800154c:	dd07      	ble.n	800155e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4413      	add	r3, r2
 800155c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800155e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001560:	3301      	adds	r3, #1
 8001562:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001564:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	429a      	cmp	r2, r3
 800156a:	dacf      	bge.n	800150c <lcd_DrawLine+0x9e>
		}
	}
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}

08001576 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001576:	b590      	push	{r4, r7, lr}
 8001578:	b085      	sub	sp, #20
 800157a:	af02      	add	r7, sp, #8
 800157c:	4604      	mov	r4, r0
 800157e:	4608      	mov	r0, r1
 8001580:	4611      	mov	r1, r2
 8001582:	461a      	mov	r2, r3
 8001584:	4623      	mov	r3, r4
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	4603      	mov	r3, r0
 800158a:	80bb      	strh	r3, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001594:	88bc      	ldrh	r4, [r7, #4]
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	88b9      	ldrh	r1, [r7, #4]
 800159a:	88f8      	ldrh	r0, [r7, #6]
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4623      	mov	r3, r4
 80015a2:	f7ff ff64 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 80015a6:	883c      	ldrh	r4, [r7, #0]
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	88f8      	ldrh	r0, [r7, #6]
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4623      	mov	r3, r4
 80015b4:	f7ff ff5b 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 80015b8:	883c      	ldrh	r4, [r7, #0]
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	8839      	ldrh	r1, [r7, #0]
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	8b3b      	ldrh	r3, [r7, #24]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	f7ff ff52 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 80015ca:	883c      	ldrh	r4, [r7, #0]
 80015cc:	887a      	ldrh	r2, [r7, #2]
 80015ce:	88b9      	ldrh	r1, [r7, #4]
 80015d0:	8878      	ldrh	r0, [r7, #2]
 80015d2:	8b3b      	ldrh	r3, [r7, #24]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4623      	mov	r3, r4
 80015d8:	f7ff ff49 	bl	800146e <lcd_DrawLine>
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4623      	mov	r3, r4
 80015f4:	80fb      	strh	r3, [r7, #6]
 80015f6:	4603      	mov	r3, r0
 80015f8:	80bb      	strh	r3, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	4613      	mov	r3, r2
 8001600:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001602:	2300      	movs	r3, #0
 8001604:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800160a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	b29a      	uxth	r2, r3
 8001630:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001634:	b29b      	uxth	r3, r3
 8001636:	fb12 f303 	smulbb	r3, r2, r3
 800163a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	3b20      	subs	r3, #32
 8001640:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	b29a      	uxth	r2, r3
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4413      	add	r3, r2
 800164a:	b29b      	uxth	r3, r3
 800164c:	3b01      	subs	r3, #1
 800164e:	b29c      	uxth	r4, r3
 8001650:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001654:	b29a      	uxth	r2, r3
 8001656:	88bb      	ldrh	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	88b9      	ldrh	r1, [r7, #4]
 8001662:	88f8      	ldrh	r0, [r7, #6]
 8001664:	4622      	mov	r2, r4
 8001666:	f7ff fe37 	bl	80012d8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800166a:	2300      	movs	r3, #0
 800166c:	827b      	strh	r3, [r7, #18]
 800166e:	e07a      	b.n	8001766 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001670:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d028      	beq.n	80016ca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001678:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800167c:	2b10      	cmp	r3, #16
 800167e:	d108      	bne.n	8001692 <lcd_ShowChar+0xae>
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	493c      	ldr	r1, [pc, #240]	; (8001778 <lcd_ShowChar+0x194>)
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	440a      	add	r2, r1
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	75fb      	strb	r3, [r7, #23]
 8001690:	e01b      	b.n	80016ca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001692:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001696:	2b18      	cmp	r3, #24
 8001698:	d10b      	bne.n	80016b2 <lcd_ShowChar+0xce>
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	8a79      	ldrh	r1, [r7, #18]
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <lcd_ShowChar+0x198>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4403      	add	r3, r0
 80016aa:	440b      	add	r3, r1
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	e00b      	b.n	80016ca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80016b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d15a      	bne.n	8001770 <lcd_ShowChar+0x18c>
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	8a7b      	ldrh	r3, [r7, #18]
 80016be:	4930      	ldr	r1, [pc, #192]	; (8001780 <lcd_ShowChar+0x19c>)
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	440a      	add	r2, r1
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	75bb      	strb	r3, [r7, #22]
 80016ce:	e044      	b.n	800175a <lcd_ShowChar+0x176>
		{
			if(!mode)
 80016d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d120      	bne.n	800171a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80016d8:	7dfa      	ldrb	r2, [r7, #23]
 80016da:	7dbb      	ldrb	r3, [r7, #22]
 80016dc:	fa42 f303 	asr.w	r3, r2, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <lcd_ShowChar+0x10e>
 80016e8:	883b      	ldrh	r3, [r7, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fdd2 	bl	8001294 <LCD_WR_DATA>
 80016f0:	e003      	b.n	80016fa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80016f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fdcd 	bl	8001294 <LCD_WR_DATA>
				m++;
 80016fa:	7d7b      	ldrb	r3, [r7, #21]
 80016fc:	3301      	adds	r3, #1
 80016fe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001700:	7d7b      	ldrb	r3, [r7, #21]
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	fbb3 f1f2 	udiv	r1, r3, r2
 8001708:	fb01 f202 	mul.w	r2, r1, r2
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11f      	bne.n	8001754 <lcd_ShowChar+0x170>
				{
					m=0;
 8001714:	2300      	movs	r3, #0
 8001716:	757b      	strb	r3, [r7, #21]
					break;
 8001718:	e022      	b.n	8001760 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800171a:	7dfa      	ldrb	r2, [r7, #23]
 800171c:	7dbb      	ldrb	r3, [r7, #22]
 800171e:	fa42 f303 	asr.w	r3, r2, r3
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <lcd_ShowChar+0x152>
 800172a:	883a      	ldrh	r2, [r7, #0]
 800172c:	88b9      	ldrh	r1, [r7, #4]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe85 	bl	8001440 <lcd_DrawPoint>
				x++;
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	3301      	adds	r3, #1
 800173a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800173c:	88fa      	ldrh	r2, [r7, #6]
 800173e:	8a3b      	ldrh	r3, [r7, #16]
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	429a      	cmp	r2, r3
 8001746:	d105      	bne.n	8001754 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001748:	8a3b      	ldrh	r3, [r7, #16]
 800174a:	80fb      	strh	r3, [r7, #6]
					y++;
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	3301      	adds	r3, #1
 8001750:	80bb      	strh	r3, [r7, #4]
					break;
 8001752:	e005      	b.n	8001760 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001754:	7dbb      	ldrb	r3, [r7, #22]
 8001756:	3301      	adds	r3, #1
 8001758:	75bb      	strb	r3, [r7, #22]
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	2b07      	cmp	r3, #7
 800175e:	d9b7      	bls.n	80016d0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001760:	8a7b      	ldrh	r3, [r7, #18]
 8001762:	3301      	adds	r3, #1
 8001764:	827b      	strh	r3, [r7, #18]
 8001766:	8a7a      	ldrh	r2, [r7, #18]
 8001768:	89bb      	ldrh	r3, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d380      	bcc.n	8001670 <lcd_ShowChar+0x8c>
 800176e:	e000      	b.n	8001772 <lcd_ShowChar+0x18e>
		else return;
 8001770:	bf00      	nop
				}
			}
		}
	}
}
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	08008718 	.word	0x08008718
 800177c:	08008d08 	.word	0x08008d08
 8001780:	08009ed8 	.word	0x08009ed8

08001784 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	4603      	mov	r3, r0
 8001798:	80bb      	strh	r3, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	807b      	strh	r3, [r7, #2]
 800179e:	4613      	mov	r3, r2
 80017a0:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	4413      	add	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29c      	uxth	r4, r3
 80017b2:	88ba      	ldrh	r2, [r7, #4]
 80017b4:	883b      	ldrh	r3, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	88b9      	ldrh	r1, [r7, #4]
 80017c0:	88f8      	ldrh	r0, [r7, #6]
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fd88 	bl	80012d8 <lcd_AddressSet>
	for(i=0;i<length;i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	82fb      	strh	r3, [r7, #22]
 80017cc:	e027      	b.n	800181e <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	82bb      	strh	r3, [r7, #20]
 80017d2:	e01d      	b.n	8001810 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	3301      	adds	r3, #1
 80017e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fd48 	bl	8001294 <LCD_WR_DATA>
			k++;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	3301      	adds	r3, #1
 8001808:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 800180a:	8abb      	ldrh	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	82bb      	strh	r3, [r7, #20]
 8001810:	8aba      	ldrh	r2, [r7, #20]
 8001812:	883b      	ldrh	r3, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d3dd      	bcc.n	80017d4 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001818:	8afb      	ldrh	r3, [r7, #22]
 800181a:	3301      	adds	r3, #1
 800181c:	82fb      	strh	r3, [r7, #22]
 800181e:	8afa      	ldrh	r2, [r7, #22]
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3d3      	bcc.n	80017ce <lcd_ShowPicture+0x4a>
		}
	}
}
 8001826:	bf00      	nop
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}

08001830 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <lcd_SetDir+0x44>)
 800184c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001850:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <lcd_SetDir+0x44>)
 8001854:	22f0      	movs	r2, #240	; 0xf0
 8001856:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001858:	e006      	b.n	8001868 <lcd_SetDir+0x38>
		lcddev.width=240;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <lcd_SetDir+0x44>)
 800185c:	22f0      	movs	r2, #240	; 0xf0
 800185e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <lcd_SetDir+0x44>)
 8001862:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001866:	805a      	strh	r2, [r3, #2]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	200001c0 	.word	0x200001c0

08001878 <lcd_init>:


void lcd_init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	48aa      	ldr	r0, [pc, #680]	; (8001b2c <lcd_init+0x2b4>)
 8001884:	f003 fcea 	bl	800525c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188c:	f003 fa14 	bl	8004cb8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001896:	48a5      	ldr	r0, [pc, #660]	; (8001b2c <lcd_init+0x2b4>)
 8001898:	f003 fce0 	bl	800525c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800189c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a0:	f003 fa0a 	bl	8004cb8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ffc3 	bl	8001830 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80018aa:	20d3      	movs	r0, #211	; 0xd3
 80018ac:	f7ff fce2 	bl	8001274 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80018b0:	f7ff fd00 	bl	80012b4 <LCD_RD_DATA>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b9d      	ldr	r3, [pc, #628]	; (8001b30 <lcd_init+0x2b8>)
 80018ba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80018bc:	f7ff fcfa 	bl	80012b4 <LCD_RD_DATA>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b9a      	ldr	r3, [pc, #616]	; (8001b30 <lcd_init+0x2b8>)
 80018c6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80018c8:	f7ff fcf4 	bl	80012b4 <LCD_RD_DATA>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b97      	ldr	r3, [pc, #604]	; (8001b30 <lcd_init+0x2b8>)
 80018d2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80018d4:	4b96      	ldr	r3, [pc, #600]	; (8001b30 <lcd_init+0x2b8>)
 80018d6:	889b      	ldrh	r3, [r3, #4]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b94      	ldr	r3, [pc, #592]	; (8001b30 <lcd_init+0x2b8>)
 80018de:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80018e0:	f7ff fce8 	bl	80012b4 <LCD_RD_DATA>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b91      	ldr	r3, [pc, #580]	; (8001b30 <lcd_init+0x2b8>)
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <lcd_init+0x2b8>)
 80018f2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80018f4:	20cf      	movs	r0, #207	; 0xcf
 80018f6:	f7ff fcbd 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fcca 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001900:	20c1      	movs	r0, #193	; 0xc1
 8001902:	f7ff fcc7 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001906:	2030      	movs	r0, #48	; 0x30
 8001908:	f7ff fcc4 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800190c:	20ed      	movs	r0, #237	; 0xed
 800190e:	f7ff fcb1 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	f7ff fcbe 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001918:	2003      	movs	r0, #3
 800191a:	f7ff fcbb 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800191e:	2012      	movs	r0, #18
 8001920:	f7ff fcb8 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001924:	2081      	movs	r0, #129	; 0x81
 8001926:	f7ff fcb5 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800192a:	20e8      	movs	r0, #232	; 0xe8
 800192c:	f7ff fca2 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001930:	2085      	movs	r0, #133	; 0x85
 8001932:	f7ff fcaf 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001936:	2010      	movs	r0, #16
 8001938:	f7ff fcac 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800193c:	207a      	movs	r0, #122	; 0x7a
 800193e:	f7ff fca9 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001942:	20cb      	movs	r0, #203	; 0xcb
 8001944:	f7ff fc96 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001948:	2039      	movs	r0, #57	; 0x39
 800194a:	f7ff fca3 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800194e:	202c      	movs	r0, #44	; 0x2c
 8001950:	f7ff fca0 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fc9d 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800195a:	2034      	movs	r0, #52	; 0x34
 800195c:	f7ff fc9a 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff fc97 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001966:	20f7      	movs	r0, #247	; 0xf7
 8001968:	f7ff fc84 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800196c:	2020      	movs	r0, #32
 800196e:	f7ff fc91 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001972:	20ea      	movs	r0, #234	; 0xea
 8001974:	f7ff fc7e 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fc8b 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff fc88 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001984:	20c0      	movs	r0, #192	; 0xc0
 8001986:	f7ff fc75 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800198a:	201b      	movs	r0, #27
 800198c:	f7ff fc82 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001990:	20c1      	movs	r0, #193	; 0xc1
 8001992:	f7ff fc6f 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff fc7c 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800199c:	20c5      	movs	r0, #197	; 0xc5
 800199e:	f7ff fc69 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80019a2:	2030      	movs	r0, #48	; 0x30
 80019a4:	f7ff fc76 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80019a8:	2030      	movs	r0, #48	; 0x30
 80019aa:	f7ff fc73 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80019ae:	20c7      	movs	r0, #199	; 0xc7
 80019b0:	f7ff fc60 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80019b4:	20b7      	movs	r0, #183	; 0xb7
 80019b6:	f7ff fc6d 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80019ba:	2036      	movs	r0, #54	; 0x36
 80019bc:	f7ff fc5a 	bl	8001274 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80019c0:	2008      	movs	r0, #8
 80019c2:	f7ff fc67 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80019c6:	203a      	movs	r0, #58	; 0x3a
 80019c8:	f7ff fc54 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80019cc:	2055      	movs	r0, #85	; 0x55
 80019ce:	f7ff fc61 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80019d2:	20b1      	movs	r0, #177	; 0xb1
 80019d4:	f7ff fc4e 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff fc5b 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80019de:	201a      	movs	r0, #26
 80019e0:	f7ff fc58 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80019e4:	20b6      	movs	r0, #182	; 0xb6
 80019e6:	f7ff fc45 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80019ea:	200a      	movs	r0, #10
 80019ec:	f7ff fc52 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80019f0:	20a2      	movs	r0, #162	; 0xa2
 80019f2:	f7ff fc4f 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80019f6:	20f2      	movs	r0, #242	; 0xf2
 80019f8:	f7ff fc3c 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fc49 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001a02:	2026      	movs	r0, #38	; 0x26
 8001a04:	f7ff fc36 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fc43 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001a0e:	20e0      	movs	r0, #224	; 0xe0
 8001a10:	f7ff fc30 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001a14:	200f      	movs	r0, #15
 8001a16:	f7ff fc3d 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001a1a:	202a      	movs	r0, #42	; 0x2a
 8001a1c:	f7ff fc3a 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001a20:	2028      	movs	r0, #40	; 0x28
 8001a22:	f7ff fc37 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a26:	2008      	movs	r0, #8
 8001a28:	f7ff fc34 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001a2c:	200e      	movs	r0, #14
 8001a2e:	f7ff fc31 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a32:	2008      	movs	r0, #8
 8001a34:	f7ff fc2e 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001a38:	2054      	movs	r0, #84	; 0x54
 8001a3a:	f7ff fc2b 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001a3e:	20a9      	movs	r0, #169	; 0xa9
 8001a40:	f7ff fc28 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001a44:	2043      	movs	r0, #67	; 0x43
 8001a46:	f7ff fc25 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f7ff fc22 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a50:	200f      	movs	r0, #15
 8001a52:	f7ff fc1f 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fc1c 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fc19 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fc16 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fc13 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001a6e:	20e1      	movs	r0, #225	; 0xe1
 8001a70:	f7ff fc00 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fc0d 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001a7a:	2015      	movs	r0, #21
 8001a7c:	f7ff fc0a 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001a80:	2017      	movs	r0, #23
 8001a82:	f7ff fc07 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001a86:	2007      	movs	r0, #7
 8001a88:	f7ff fc04 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001a8c:	2011      	movs	r0, #17
 8001a8e:	f7ff fc01 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001a92:	2006      	movs	r0, #6
 8001a94:	f7ff fbfe 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001a98:	202b      	movs	r0, #43	; 0x2b
 8001a9a:	f7ff fbfb 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001a9e:	2056      	movs	r0, #86	; 0x56
 8001aa0:	f7ff fbf8 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001aa4:	203c      	movs	r0, #60	; 0x3c
 8001aa6:	f7ff fbf5 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f7ff fbf2 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ab0:	2010      	movs	r0, #16
 8001ab2:	f7ff fbef 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ab6:	200f      	movs	r0, #15
 8001ab8:	f7ff fbec 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001abc:	203f      	movs	r0, #63	; 0x3f
 8001abe:	f7ff fbe9 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ac2:	203f      	movs	r0, #63	; 0x3f
 8001ac4:	f7ff fbe6 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f7ff fbe3 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ace:	202b      	movs	r0, #43	; 0x2b
 8001ad0:	f7ff fbd0 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fbdd 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff fbda 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fbd7 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ae6:	203f      	movs	r0, #63	; 0x3f
 8001ae8:	f7ff fbd4 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001aec:	202a      	movs	r0, #42	; 0x2a
 8001aee:	f7ff fbc1 	bl	8001274 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fbce 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fbcb 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fbc8 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001b04:	20ef      	movs	r0, #239	; 0xef
 8001b06:	f7ff fbc5 	bl	8001294 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001b0a:	2011      	movs	r0, #17
 8001b0c:	f7ff fbb2 	bl	8001274 <LCD_WR_REG>
	HAL_Delay(120);
 8001b10:	2078      	movs	r0, #120	; 0x78
 8001b12:	f003 f8d1 	bl	8004cb8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001b16:	2029      	movs	r0, #41	; 0x29
 8001b18:	f7ff fbac 	bl	8001274 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <lcd_init+0x2bc>)
 8001b24:	f003 fb9a 	bl	800525c <HAL_GPIO_WritePin>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	200001c0 	.word	0x200001c0
 8001b34:	40020000 	.word	0x40020000

08001b38 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b08b      	sub	sp, #44	; 0x2c
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	60ba      	str	r2, [r7, #8]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4603      	mov	r3, r0
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	460b      	mov	r3, r1
 8001b48:	81bb      	strh	r3, [r7, #12]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001b56:	e048      	b.n	8001bea <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d145      	bne.n	8001bea <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001b5e:	89fa      	ldrh	r2, [r7, #14]
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <lcd_ShowStr+0xc4>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	1acb      	subs	r3, r1, r3
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dc3f      	bgt.n	8001bf4 <lcd_ShowStr+0xbc>
 8001b74:	89ba      	ldrh	r2, [r7, #12]
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <lcd_ShowStr+0xc4>)
 8001b78:	885b      	ldrh	r3, [r3, #2]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b80:	1acb      	subs	r3, r1, r3
 8001b82:	429a      	cmp	r2, r3
 8001b84:	dc36      	bgt.n	8001bf4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b80      	cmp	r3, #128	; 0x80
 8001b8c:	d902      	bls.n	8001b94 <lcd_ShowStr+0x5c>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
 8001b92:	e02a      	b.n	8001bea <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b0d      	cmp	r3, #13
 8001b9a:	d10b      	bne.n	8001bb4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	89bb      	ldrh	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001ba8:	8abb      	ldrh	r3, [r7, #20]
 8001baa:	81fb      	strh	r3, [r7, #14]
					str++;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	e017      	b.n	8001be4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	88fc      	ldrh	r4, [r7, #6]
 8001bba:	89b9      	ldrh	r1, [r7, #12]
 8001bbc:	89f8      	ldrh	r0, [r7, #14]
 8001bbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	4623      	mov	r3, r4
 8001bd0:	f7ff fd08 	bl	80015e4 <lcd_ShowChar>
					x+=sizey/2;
 8001bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	4413      	add	r3, r2
 8001be2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3301      	adds	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1b2      	bne.n	8001b58 <lcd_ShowStr+0x20>
 8001bf2:	e000      	b.n	8001bf6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001bf4:	bf00      	nop
			}
		}
	}
}
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	200001c0 	.word	0x200001c0

08001c00 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	81fb      	strh	r3, [r7, #14]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	81bb      	strh	r3, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7fe fada 	bl	80001d0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <lcd_StrCenter+0x60>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	8afb      	ldrh	r3, [r7, #22]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	0fda      	lsrs	r2, r3, #31
 8001c2e:	4413      	add	r3, r2
 8001c30:	105b      	asrs	r3, r3, #1
 8001c32:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001c34:	89fa      	ldrh	r2, [r7, #14]
 8001c36:	8abb      	ldrh	r3, [r7, #20]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b298      	uxth	r0, r3
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	89b9      	ldrh	r1, [r7, #12]
 8001c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	8c3b      	ldrh	r3, [r7, #32]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f7ff ff70 	bl	8001b38 <lcd_ShowStr>
}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200001c0 	.word	0x200001c0

08001c64 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <led7_init+0x14>)
 8001c6e:	f003 faf5 	bl	800525c <HAL_GPIO_WritePin>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021800 	.word	0x40021800

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c80:	f002 ffa8 	bl	8004bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c84:	f000 f870 	bl	8001d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c88:	f7ff f9fc 	bl	8001084 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c8c:	f002 fd98 	bl	80047c0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001c90:	f001 fb64 	bl	800335c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001c94:	f7fe feac 	bl	80009f0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001c98:	f000 f8d0 	bl	8001e3c <system_init>
  lcd_Clear(WHITE);
 8001c9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ca0:	f7ff fb66 	bl	8001370 <lcd_Clear>
  test_lcd();
 8001ca4:	f000 f8ee 	bl	8001e84 <test_lcd>
//  lcd_Fill(0,  0, 240,  70, RED);
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {
    // lcd_Clear(WHITE);
	   if (flagForButton)
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <main+0xd0>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <main+0x42>
	   {
		   flagForButton= 0;
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <main+0xd0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 8001cb6:	f7fe fe2f 	bl	8000918 <button_Scan>
		   beginStartGame();
 8001cba:	f001 ff11 	bl	8003ae0 <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <main+0xd4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d007      	beq.n	8001cd6 <main+0x5a>
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <main+0xd4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d003      	beq.n	8001cd6 <main+0x5a>
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <main+0xd4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d10b      	bne.n	8001cee <main+0x72>
	   {
		   generateFruit();
 8001cd6:	f001 f9d5 	bl	8003084 <generateFruit>
		   if (flagForSnakeRun)
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <main+0xd8>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <main+0x78>
		   {
			   flagForSnakeRun= 0;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <main+0xd8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 8001ce8:	f001 f8c4 	bl	8002e74 <snakeRun>
		   if (flagForSnakeRun)
 8001cec:	e002      	b.n	8001cf4 <main+0x78>
		   }
	  }else{
		  flagForSnakeRun = 0;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <main+0xd8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <main+0xd4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b07      	cmp	r3, #7
 8001cfa:	d101      	bne.n	8001d00 <main+0x84>
	  {
		  pickOver();
 8001cfc:	f7ff f96c 	bl	8000fd8 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <main+0xd4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d101      	bne.n	8001d0c <main+0x90>
	  {
		  pickStop();
 8001d08:	f002 fc1c 	bl	8004544 <pickStop>
	  }
	  if(flagForTiming == 1)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <main+0xdc>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10a      	bne.n	8001d2a <main+0xae>
	  {
		  flagForTiming = 0;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <main+0xdc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <main+0xd4>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
		  initOverMode();
 8001d20:	f7ff f996 	bl	8001050 <initOverMode>
		  arrowMode = NORMALMODE;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <main+0xe0>)
 8001d26:	2203      	movs	r2, #3
 8001d28:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <main+0xe4>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d1ba      	bne.n	8001ca8 <main+0x2c>
	  {
		  TIMING--;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <main+0xe8>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <main+0xe8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
		  showTiming();
 8001d3e:	f002 fea5 	bl	8004a8c <showTiming>
		  setTimerDeTime(1000);
 8001d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d46:	f001 fa61 	bl	800320c <setTimerDeTime>
	   if (flagForButton)
 8001d4a:	e7ad      	b.n	8001ca8 <main+0x2c>
 8001d4c:	20001198 	.word	0x20001198
 8001d50:	200001ac 	.word	0x200001ac
 8001d54:	2000119e 	.word	0x2000119e
 8001d58:	200011a4 	.word	0x200011a4
 8001d5c:	20000014 	.word	0x20000014
 8001d60:	200011aa 	.word	0x200011aa
 8001d64:	20000000 	.word	0x20000000

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b094      	sub	sp, #80	; 0x50
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2230      	movs	r2, #48	; 0x30
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 f91a 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <SystemClock_Config+0xd0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <SystemClock_Config+0xd0>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <SystemClock_Config+0xd0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ddc:	23a8      	movs	r3, #168	; 0xa8
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001de4:	2304      	movs	r3, #4
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fa4f 	bl	8005290 <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001df8:	f000 f862 	bl	8001ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001e0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2105      	movs	r1, #5
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fcb0 	bl	8005780 <HAL_RCC_ClockConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e26:	f000 f84b 	bl	8001ec0 <Error_Handler>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3750      	adds	r7, #80	; 0x50
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000

08001e3c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2120      	movs	r1, #32
 8001e44:	480e      	ldr	r0, [pc, #56]	; (8001e80 <system_init+0x44>)
 8001e46:	f003 fa09 	bl	800525c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <system_init+0x44>)
 8001e50:	f003 fa04 	bl	800525c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2110      	movs	r1, #16
 8001e58:	4809      	ldr	r0, [pc, #36]	; (8001e80 <system_init+0x44>)
 8001e5a:	f003 f9ff 	bl	800525c <HAL_GPIO_WritePin>
	  timer_init();
 8001e5e:	f001 f993 	bl	8003188 <timer_init>
	  led7_init();
 8001e62:	f7ff feff 	bl	8001c64 <led7_init>
	  button_init();
 8001e66:	f7fe fd4b 	bl	8000900 <button_init>
	  lcd_init();
 8001e6a:	f7ff fd05 	bl	8001878 <lcd_init>
	  setTimerButton(50);
 8001e6e:	2032      	movs	r0, #50	; 0x32
 8001e70:	f001 f9e8 	bl	8003244 <setTimerButton>
	  setTimerSnakeRun(300);
 8001e74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e78:	f001 f990 	bl	800319c <setTimerSnakeRun>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 8001e8a:	231f      	movs	r3, #31
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	231d      	movs	r3, #29
 8001e90:	221d      	movs	r2, #29
 8001e92:	2113      	movs	r1, #19
 8001e94:	2013      	movs	r0, #19
 8001e96:	f7ff fa9d 	bl	80013d4 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <test_lcd+0x38>)
 8001eac:	2164      	movs	r1, #100	; 0x64
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fea6 	bl	8001c00 <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	08008564 	.word	0x08008564

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <Error_Handler+0x8>
	...

08001ecc <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b090      	sub	sp, #64	; 0x40
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	f107 000c 	add.w	r0, r7, #12
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <convert2str+0x2c>)
 8001ede:	2132      	movs	r1, #50	; 0x32
 8001ee0:	f005 f8da 	bl	8007098 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 f919 	bl	8007120 <strdup>
 8001eee:	4603      	mov	r3, r0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3740      	adds	r7, #64	; 0x40
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	08008574 	.word	0x08008574

08001efc <lcdDrawWall>:

void lcdDrawWall()
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <lcdDrawWall+0x3c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b298      	uxth	r0, r3
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <lcdDrawWall+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b299      	uxth	r1, r3
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <lcdDrawWall+0x3c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	b29c      	uxth	r4, r3
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <lcdDrawWall+0x40>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <lcdDrawWall+0x44>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	4622      	mov	r2, r4
 8001f2a:	f7ff fa53 	bl	80013d4 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 8001f2e:	bf00      	nop
 8001f30:	3704      	adds	r7, #4
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000018 	.word	0x20000018
 8001f3c:	20000028 	.word	0x20000028
 8001f40:	20000038 	.word	0x20000038

08001f44 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b0a3      	sub	sp, #140	; 0x8c
 8001f48:	af04      	add	r7, sp, #16
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	80fb      	strh	r3, [r7, #6]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8001f54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f58:	f7ff fa0a 	bl	8001370 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <setUpLcdNormalPlay+0x114>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <setUpLcdNormalPlay+0x118>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	211f      	movs	r1, #31
 8001f6a:	9100      	str	r1, [sp, #0]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fa30 	bl	80013d4 <lcd_Fill>
//	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
	char str1[50] = "ID: ";
 8001f74:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <setUpLcdNormalPlay+0x11c>)
 8001f76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f7e:	6018      	str	r0, [r3, #0]
 8001f80:	3304      	adds	r3, #4
 8001f82:	7019      	strb	r1, [r3, #0]
 8001f84:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8001f88:	222d      	movs	r2, #45	; 0x2d
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 f80f 	bl	8006fb0 <memset>
	char *str2 = convert2str(ID);
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <setUpLcdNormalPlay+0x120>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff98 	bl	8001ecc <convert2str>
 8001f9c:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 8001f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fa2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 f8ab 	bl	8007100 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 24, 1);
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <setUpLcdNormalPlay+0x124>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b298      	uxth	r0, r3
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <setUpLcdNormalPlay+0x128>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2318      	movs	r3, #24
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fcc:	f7ff fdb4 	bl	8001b38 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <setUpLcdNormalPlay+0x12c>)
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fda:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	222a      	movs	r2, #42	; 0x2a
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 ffe2 	bl	8006fb0 <memset>
	char *str4 = convert2str(SCORE);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <setUpLcdNormalPlay+0x130>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff6b 	bl	8001ecc <convert2str>
 8001ff6:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001ffe:	4618      	mov	r0, r3
 8002000:	f005 f87e 	bl	8007100 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 24, 0);
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <setUpLcdNormalPlay+0x134>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b298      	uxth	r0, r3
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <setUpLcdNormalPlay+0x138>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	3305      	adds	r3, #5
 8002012:	b299      	uxth	r1, r3
 8002014:	f107 0208 	add.w	r2, r7, #8
 8002018:	2300      	movs	r3, #0
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	2318      	movs	r3, #24
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	231f      	movs	r3, #31
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002028:	f7ff fd86 	bl	8001b38 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <setUpLcdNormalPlay+0x13c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b298      	uxth	r0, r3
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <setUpLcdNormalPlay+0x140>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b299      	uxth	r1, r3
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <setUpLcdNormalPlay+0x144>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <setUpLcdNormalPlay+0x148>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4c12      	ldr	r4, [pc, #72]	; (8002090 <setUpLcdNormalPlay+0x14c>)
 8002046:	9400      	str	r4, [sp, #0]
 8002048:	f7ff fb9c 	bl	8001784 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 800204c:	f7ff ff56 	bl	8001efc <lcdDrawWall>
}
 8002050:	bf00      	nop
 8002052:	377c      	adds	r7, #124	; 0x7c
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	20000018 	.word	0x20000018
 800205c:	20000028 	.word	0x20000028
 8002060:	08008578 	.word	0x08008578
 8002064:	20000198 	.word	0x20000198
 8002068:	20000060 	.word	0x20000060
 800206c:	20000064 	.word	0x20000064
 8002070:	080085ac 	.word	0x080085ac
 8002074:	2000019a 	.word	0x2000019a
 8002078:	20000070 	.word	0x20000070
 800207c:	20000074 	.word	0x20000074
 8002080:	20000078 	.word	0x20000078
 8002084:	2000007c 	.word	0x2000007c
 8002088:	20000080 	.word	0x20000080
 800208c:	20000084 	.word	0x20000084
 8002090:	0800b698 	.word	0x0800b698

08002094 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b0a3      	sub	sp, #140	; 0x8c
 8002098:	af04      	add	r7, sp, #16
 800209a:	4603      	mov	r3, r0
 800209c:	460a      	mov	r2, r1
 800209e:	80fb      	strh	r3, [r7, #6]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80020a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020a8:	f7ff f962 	bl	8001370 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80020ac:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <setUpLcdTimingPlay+0x114>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <setUpLcdTimingPlay+0x118>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	211f      	movs	r1, #31
 80020ba:	9100      	str	r1, [sp, #0]
 80020bc:	2100      	movs	r1, #0
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff f988 	bl	80013d4 <lcd_Fill>
//	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
	char str1[50] = "ID: ";
 80020c4:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <setUpLcdTimingPlay+0x11c>)
 80020c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ce:	6018      	str	r0, [r3, #0]
 80020d0:	3304      	adds	r3, #4
 80020d2:	7019      	strb	r1, [r3, #0]
 80020d4:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80020d8:	222d      	movs	r2, #45	; 0x2d
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 ff67 	bl	8006fb0 <memset>
	char *str2 = convert2str(ID);
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <setUpLcdTimingPlay+0x120>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fef0 	bl	8001ecc <convert2str>
 80020ec:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 80020ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 f803 	bl	8007100 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <setUpLcdTimingPlay+0x124>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b298      	uxth	r0, r3
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <setUpLcdTimingPlay+0x128>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b299      	uxth	r1, r3
 8002106:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800210a:	2301      	movs	r3, #1
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	2310      	movs	r3, #16
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800211c:	f7ff fd0c 	bl	8001b38 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <setUpLcdTimingPlay+0x12c>)
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800212a:	e883 0003 	stmia.w	r3, {r0, r1}
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	222a      	movs	r2, #42	; 0x2a
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f004 ff3a 	bl	8006fb0 <memset>
	char *str4 = convert2str(0);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fec5 	bl	8001ecc <convert2str>
 8002142:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800214a:	4618      	mov	r0, r3
 800214c:	f004 ffd8 	bl	8007100 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <setUpLcdTimingPlay+0x130>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b298      	uxth	r0, r3
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <setUpLcdTimingPlay+0x134>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b299      	uxth	r1, r3
 800215c:	f107 0208 	add.w	r2, r7, #8
 8002160:	2301      	movs	r3, #1
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2310      	movs	r3, #16
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002172:	f7ff fce1 	bl	8001b38 <lcd_ShowStr>

	showTiming();
 8002176:	f002 fc89 	bl	8004a8c <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <setUpLcdTimingPlay+0x138>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b298      	uxth	r0, r3
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <setUpLcdTimingPlay+0x13c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b299      	uxth	r1, r3
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <setUpLcdTimingPlay+0x140>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <setUpLcdTimingPlay+0x144>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4c12      	ldr	r4, [pc, #72]	; (80021dc <setUpLcdTimingPlay+0x148>)
 8002194:	9400      	str	r4, [sp, #0]
 8002196:	f7ff faf5 	bl	8001784 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 800219a:	f7ff feaf 	bl	8001efc <lcdDrawWall>
}
 800219e:	bf00      	nop
 80021a0:	377c      	adds	r7, #124	; 0x7c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000018 	.word	0x20000018
 80021ac:	20000028 	.word	0x20000028
 80021b0:	08008578 	.word	0x08008578
 80021b4:	20000198 	.word	0x20000198
 80021b8:	20000060 	.word	0x20000060
 80021bc:	20000064 	.word	0x20000064
 80021c0:	080085ac 	.word	0x080085ac
 80021c4:	20000070 	.word	0x20000070
 80021c8:	20000074 	.word	0x20000074
 80021cc:	20000078 	.word	0x20000078
 80021d0:	2000007c 	.word	0x2000007c
 80021d4:	20000080 	.word	0x20000080
 80021d8:	20000084 	.word	0x20000084
 80021dc:	0800b698 	.word	0x0800b698

080021e0 <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b0a3      	sub	sp, #140	; 0x8c
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	4603      	mov	r3, r0
 80021e8:	460a      	mov	r2, r1
 80021ea:	80fb      	strh	r3, [r7, #6]
 80021ec:	4613      	mov	r3, r2
 80021ee:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 80021f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021f4:	f7ff f8bc 	bl	8001370 <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 80021f8:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <setUpLcdAdvancePlay+0x114>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <setUpLcdAdvancePlay+0x118>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	211f      	movs	r1, #31
 8002206:	9100      	str	r1, [sp, #0]
 8002208:	2100      	movs	r1, #0
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f8e2 	bl	80013d4 <lcd_Fill>
//	lcd_StrCenter(0, 5, "SNAKE GAME", RED, BLUE, 16, 1);
	char str1[50] = "ID: ";
 8002210:	4a3a      	ldr	r2, [pc, #232]	; (80022fc <setUpLcdAdvancePlay+0x11c>)
 8002212:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800221a:	6018      	str	r0, [r3, #0]
 800221c:	3304      	adds	r3, #4
 800221e:	7019      	strb	r1, [r3, #0]
 8002220:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002224:	222d      	movs	r2, #45	; 0x2d
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fec1 	bl	8006fb0 <memset>
	char *str2 = convert2str(ID);
 800222e:	4b34      	ldr	r3, [pc, #208]	; (8002300 <setUpLcdAdvancePlay+0x120>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fe4a 	bl	8001ecc <convert2str>
 8002238:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 800223a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800223e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002240:	4618      	mov	r0, r3
 8002242:	f004 ff5d 	bl	8007100 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <setUpLcdAdvancePlay+0x124>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b298      	uxth	r0, r3
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <setUpLcdAdvancePlay+0x128>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b299      	uxth	r1, r3
 8002252:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002256:	2301      	movs	r3, #1
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	2310      	movs	r3, #16
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002268:	f7ff fc66 	bl	8001b38 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <setUpLcdAdvancePlay+0x12c>)
 800226e:	f107 0308 	add.w	r3, r7, #8
 8002272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002276:	e883 0003 	stmia.w	r3, {r0, r1}
 800227a:	f107 0310 	add.w	r3, r7, #16
 800227e:	222a      	movs	r2, #42	; 0x2a
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f004 fe94 	bl	8006fb0 <memset>
	char *str4 = convert2str(0);
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff fe1f 	bl	8001ecc <convert2str>
 800228e:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002296:	4618      	mov	r0, r3
 8002298:	f004 ff32 	bl	8007100 <strcat>
	lcd_ShowStr(scoreX, scoreY, str3, RED, WHITE, 16, 1);
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <setUpLcdAdvancePlay+0x130>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	b298      	uxth	r0, r3
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <setUpLcdAdvancePlay+0x134>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b299      	uxth	r1, r3
 80022a8:	f107 0208 	add.w	r2, r7, #8
 80022ac:	2301      	movs	r3, #1
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	2310      	movs	r3, #16
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022be:	f7ff fc3b 	bl	8001b38 <lcd_ShowStr>

	showTiming();
 80022c2:	f002 fbe3 	bl	8004a8c <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <setUpLcdAdvancePlay+0x138>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b298      	uxth	r0, r3
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <setUpLcdAdvancePlay+0x13c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b299      	uxth	r1, r3
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <setUpLcdAdvancePlay+0x140>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <setUpLcdAdvancePlay+0x144>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4c12      	ldr	r4, [pc, #72]	; (8002328 <setUpLcdAdvancePlay+0x148>)
 80022e0:	9400      	str	r4, [sp, #0]
 80022e2:	f7ff fa4f 	bl	8001784 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 80022e6:	f7ff fe09 	bl	8001efc <lcdDrawWall>
}
 80022ea:	bf00      	nop
 80022ec:	377c      	adds	r7, #124	; 0x7c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000018 	.word	0x20000018
 80022f8:	20000028 	.word	0x20000028
 80022fc:	08008578 	.word	0x08008578
 8002300:	20000198 	.word	0x20000198
 8002304:	20000060 	.word	0x20000060
 8002308:	20000064 	.word	0x20000064
 800230c:	080085ac 	.word	0x080085ac
 8002310:	20000070 	.word	0x20000070
 8002314:	20000074 	.word	0x20000074
 8002318:	20000078 	.word	0x20000078
 800231c:	2000007c 	.word	0x2000007c
 8002320:	20000080 	.word	0x20000080
 8002324:	20000084 	.word	0x20000084
 8002328:	0800b698 	.word	0x0800b698

0800232c <printScore>:

void printScore()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b094      	sub	sp, #80	; 0x50
 8002330:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 8002332:	4b33      	ldr	r3, [pc, #204]	; (8002400 <printScore+0xd4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d12a      	bne.n	8002390 <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 800233a:	4a32      	ldr	r2, [pc, #200]	; (8002404 <printScore+0xd8>)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002342:	e883 0003 	stmia.w	r3, {r0, r1}
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	222a      	movs	r2, #42	; 0x2a
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f004 fe2e 	bl	8006fb0 <memset>
		char *str4 = convert2str(SCORE);
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <printScore+0xdc>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fdb7 	bl	8001ecc <convert2str>
 800235e:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fecb 	bl	8007100 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 24, 0);
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <printScore+0xe0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b298      	uxth	r0, r3
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <printScore+0xe4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	3305      	adds	r3, #5
 8002378:	b299      	uxth	r1, r3
 800237a:	1d3a      	adds	r2, r7, #4
 800237c:	2300      	movs	r3, #0
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	2318      	movs	r3, #24
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	231f      	movs	r3, #31
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800238c:	f7ff fbd4 	bl	8001b38 <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <printScore+0xd4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d003      	beq.n	80023a0 <printScore+0x74>
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <printScore+0xd4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d12a      	bne.n	80023f6 <printScore+0xca>
	{
		char str3[50] = "SCORE: ";
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <printScore+0xd8>)
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	222a      	movs	r2, #42	; 0x2a
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 fdfb 	bl	8006fb0 <memset>
		char *str4 = convert2str(SCORE);
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <printScore+0xdc>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fd84 	bl	8001ecc <convert2str>
 80023c4:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fe98 	bl	8007100 <strcat>
		lcd_ShowStr(scoreX, scoreY, str3, RED, BLUE, 16, 0);
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <printScore+0xe0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b298      	uxth	r0, r3
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <printScore+0xe4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b299      	uxth	r1, r3
 80023dc:	1d3a      	adds	r2, r7, #4
 80023de:	2300      	movs	r3, #0
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	2310      	movs	r3, #16
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	231f      	movs	r3, #31
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ee:	f7ff fba3 	bl	8001b38 <lcd_ShowStr>

		showTiming();
 80023f2:	f002 fb4b 	bl	8004a8c <showTiming>
	}
}
 80023f6:	bf00      	nop
 80023f8:	3740      	adds	r7, #64	; 0x40
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200001ac 	.word	0x200001ac
 8002404:	080085ac 	.word	0x080085ac
 8002408:	2000019a 	.word	0x2000019a
 800240c:	20000070 	.word	0x20000070
 8002410:	20000074 	.word	0x20000074

08002414 <drawHeadSnake>:
}SNAKE;

SNAKE snakeObject;

void drawHeadSnake()
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b083      	sub	sp, #12
 8002418:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 800241a:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <drawHeadSnake+0x244>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b03      	cmp	r3, #3
 8002420:	f200 8114 	bhi.w	800264c <drawHeadSnake+0x238>
 8002424:	a201      	add	r2, pc, #4	; (adr r2, 800242c <drawHeadSnake+0x18>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	080025c5 	.word	0x080025c5
 8002430:	08002545 	.word	0x08002545
 8002434:	080024bd 	.word	0x080024bd
 8002438:	0800243d 	.word	0x0800243d
	{
		case UP:
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800243c:	4b86      	ldr	r3, [pc, #536]	; (8002658 <drawHeadSnake+0x244>)
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	b298      	uxth	r0, r3
 8002442:	4b85      	ldr	r3, [pc, #532]	; (8002658 <drawHeadSnake+0x244>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	b299      	uxth	r1, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 8002448:	4b83      	ldr	r3, [pc, #524]	; (8002658 <drawHeadSnake+0x244>)
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800244c:	b29b      	uxth	r3, r3
 800244e:	3309      	adds	r3, #9
 8002450:	b29a      	uxth	r2, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <drawHeadSnake+0x244>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002456:	b29b      	uxth	r3, r3
 8002458:	3309      	adds	r3, #9
 800245a:	b29b      	uxth	r3, r3
 800245c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002460:	9400      	str	r4, [sp, #0]
 8002462:	f7fe ffb7 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002466:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <drawHeadSnake+0x244>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	b298      	uxth	r0, r3
 800246c:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <drawHeadSnake+0x244>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y +4, BLACK);
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <drawHeadSnake+0x244>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002476:	b29b      	uxth	r3, r3
 8002478:	3304      	adds	r3, #4
 800247a:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y +4, BLACK);
 800247c:	4b76      	ldr	r3, [pc, #472]	; (8002658 <drawHeadSnake+0x244>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002480:	b29b      	uxth	r3, r3
 8002482:	3304      	adds	r3, #4
 8002484:	b29b      	uxth	r3, r3
 8002486:	2400      	movs	r4, #0
 8002488:	9400      	str	r4, [sp, #0]
 800248a:	f7fe ffa3 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y,
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <drawHeadSnake+0x244>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	b29b      	uxth	r3, r3
 8002494:	3305      	adds	r3, #5
 8002496:	b298      	uxth	r0, r3
 8002498:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <drawHeadSnake+0x244>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y + 4, BLACK);
 800249e:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <drawHeadSnake+0x244>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y,
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3309      	adds	r3, #9
 80024a6:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y + 4, BLACK);
 80024a8:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <drawHeadSnake+0x244>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y,
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3304      	adds	r3, #4
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2400      	movs	r4, #0
 80024b4:	9400      	str	r4, [sp, #0]
 80024b6:	f7fe ff8d 	bl	80013d4 <lcd_Fill>
			break;
 80024ba:	e0c8      	b.n	800264e <drawHeadSnake+0x23a>
		case DOWN:
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <drawHeadSnake+0x244>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	b298      	uxth	r0, r3
 80024c2:	4b65      	ldr	r3, [pc, #404]	; (8002658 <drawHeadSnake+0x244>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	b299      	uxth	r1, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 80024c8:	4b63      	ldr	r3, [pc, #396]	; (8002658 <drawHeadSnake+0x244>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3309      	adds	r3, #9
 80024d0:	b29a      	uxth	r2, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 80024d2:	4b61      	ldr	r3, [pc, #388]	; (8002658 <drawHeadSnake+0x244>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3309      	adds	r3, #9
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80024e0:	9400      	str	r4, [sp, #0]
 80024e2:	f7fe ff77 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y+ 5,
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <drawHeadSnake+0x244>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	b298      	uxth	r0, r3
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <drawHeadSnake+0x244>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3305      	adds	r3, #5
 80024f4:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y +9, BLACK);
 80024f6:	4b58      	ldr	r3, [pc, #352]	; (8002658 <drawHeadSnake+0x244>)
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y+ 5,
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3304      	adds	r3, #4
 80024fe:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y +9, BLACK);
 8002500:	4b55      	ldr	r3, [pc, #340]	; (8002658 <drawHeadSnake+0x244>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y+ 5,
 8002504:	b29b      	uxth	r3, r3
 8002506:	3309      	adds	r3, #9
 8002508:	b29b      	uxth	r3, r3
 800250a:	2400      	movs	r4, #0
 800250c:	9400      	str	r4, [sp, #0]
 800250e:	f7fe ff61 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y + 5,
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <drawHeadSnake+0x244>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	b29b      	uxth	r3, r3
 8002518:	3305      	adds	r3, #5
 800251a:	b298      	uxth	r0, r3
 800251c:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <drawHeadSnake+0x244>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	b29b      	uxth	r3, r3
 8002522:	3305      	adds	r3, #5
 8002524:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <drawHeadSnake+0x244>)
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y + 5,
 800252a:	b29b      	uxth	r3, r3
 800252c:	3309      	adds	r3, #9
 800252e:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <drawHeadSnake+0x244>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y + 5,
 8002534:	b29b      	uxth	r3, r3
 8002536:	3309      	adds	r3, #9
 8002538:	b29b      	uxth	r3, r3
 800253a:	2400      	movs	r4, #0
 800253c:	9400      	str	r4, [sp, #0]
 800253e:	f7fe ff49 	bl	80013d4 <lcd_Fill>
			break;
 8002542:	e084      	b.n	800264e <drawHeadSnake+0x23a>
		case LEFT:
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002544:	4b44      	ldr	r3, [pc, #272]	; (8002658 <drawHeadSnake+0x244>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	b298      	uxth	r0, r3
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <drawHeadSnake+0x244>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	b299      	uxth	r1, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <drawHeadSnake+0x244>)
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002554:	b29b      	uxth	r3, r3
 8002556:	3309      	adds	r3, #9
 8002558:	b29a      	uxth	r2, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <drawHeadSnake+0x244>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800255e:	b29b      	uxth	r3, r3
 8002560:	3309      	adds	r3, #9
 8002562:	b29b      	uxth	r3, r3
 8002564:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002568:	9400      	str	r4, [sp, #0]
 800256a:	f7fe ff33 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800256e:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <drawHeadSnake+0x244>)
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	b298      	uxth	r0, r3
 8002574:	4b38      	ldr	r3, [pc, #224]	; (8002658 <drawHeadSnake+0x244>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y +4, BLACK);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <drawHeadSnake+0x244>)
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800257e:	b29b      	uxth	r3, r3
 8002580:	3304      	adds	r3, #4
 8002582:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y +4, BLACK);
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <drawHeadSnake+0x244>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8002588:	b29b      	uxth	r3, r3
 800258a:	3304      	adds	r3, #4
 800258c:	b29b      	uxth	r3, r3
 800258e:	2400      	movs	r4, #0
 8002590:	9400      	str	r4, [sp, #0]
 8002592:	f7fe ff1f 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <drawHeadSnake+0x244>)
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	b298      	uxth	r0, r3
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <drawHeadSnake+0x244>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3305      	adds	r3, #5
 80025a4:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y + 9, BLACK);
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <drawHeadSnake+0x244>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3304      	adds	r3, #4
 80025ae:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 4, snakeObject.infoSnake[0].y + 9, BLACK);
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <drawHeadSnake+0x244>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3309      	adds	r3, #9
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2400      	movs	r4, #0
 80025bc:	9400      	str	r4, [sp, #0]
 80025be:	f7fe ff09 	bl	80013d4 <lcd_Fill>
			break;
 80025c2:	e044      	b.n	800264e <drawHeadSnake+0x23a>
		case RIGHT:
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <drawHeadSnake+0x244>)
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	b298      	uxth	r0, r3
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <drawHeadSnake+0x244>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	b299      	uxth	r1, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <drawHeadSnake+0x244>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3309      	adds	r3, #9
 80025d8:	b29a      	uxth	r2, r3
				snakeObject.infoSnake[0].x+ snakeWidth, snakeObject.infoSnake[0].y+ snakeWidth, RED);
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <drawHeadSnake+0x244>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3309      	adds	r3, #9
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80025e8:	9400      	str	r4, [sp, #0]
 80025ea:	f7fe fef3 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y,
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <drawHeadSnake+0x244>)
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3305      	adds	r3, #5
 80025f6:	b298      	uxth	r0, r3
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <drawHeadSnake+0x244>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y +4, BLACK);
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <drawHeadSnake+0x244>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y,
 8002602:	b29b      	uxth	r3, r3
 8002604:	3309      	adds	r3, #9
 8002606:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y +4, BLACK);
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <drawHeadSnake+0x244>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y,
 800260c:	b29b      	uxth	r3, r3
 800260e:	3304      	adds	r3, #4
 8002610:	b29b      	uxth	r3, r3
 8002612:	2400      	movs	r4, #0
 8002614:	9400      	str	r4, [sp, #0]
 8002616:	f7fe fedd 	bl	80013d4 <lcd_Fill>
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y + 5,
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <drawHeadSnake+0x244>)
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	b29b      	uxth	r3, r3
 8002620:	3305      	adds	r3, #5
 8002622:	b298      	uxth	r0, r3
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <drawHeadSnake+0x244>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	b29b      	uxth	r3, r3
 800262a:	3305      	adds	r3, #5
 800262c:	b299      	uxth	r1, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y + 9, BLACK);
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <drawHeadSnake+0x244>)
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y + 5,
 8002632:	b29b      	uxth	r3, r3
 8002634:	3309      	adds	r3, #9
 8002636:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[0].x+ 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <drawHeadSnake+0x244>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			lcd_Fill(snakeObject.infoSnake[0].x+ 5, snakeObject.infoSnake[0].y + 5,
 800263c:	b29b      	uxth	r3, r3
 800263e:	3309      	adds	r3, #9
 8002640:	b29b      	uxth	r3, r3
 8002642:	2400      	movs	r4, #0
 8002644:	9400      	str	r4, [sp, #0]
 8002646:	f7fe fec5 	bl	80013d4 <lcd_Fill>
			break;
 800264a:	e000      	b.n	800264e <drawHeadSnake+0x23a>
		default:
			break;
 800264c:	bf00      	nop
	}
}
 800264e:	bf00      	nop
 8002650:	3704      	adds	r7, #4
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	200001cc 	.word	0x200001cc

0800265c <goLeft>:

void goLeft()
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 8002662:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <goLeft+0x168>)
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 80a7 	bne.w	80027ba <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <goLeft+0x168>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <goLeft+0x168>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4798      	blx	r3
			break;
 800267a:	e09f      	b.n	80027bc <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead= LEFT;
 800267c:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <goLeft+0x168>)
 800267e:	2201      	movs	r2, #1
 8002680:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e091      	b.n	80027ac <goLeft+0x150>
			{
				if (i== 0)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d128      	bne.n	80026e0 <goLeft+0x84>
				{
					tempSnake1= snakeObject.infoSnake[i];
 800268e:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <goLeft+0x168>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3305      	adds	r3, #5
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	3304      	adds	r3, #4
 800269e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026a2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x-= snakeStep;
 80026a6:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <goLeft+0x168>)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3305      	adds	r3, #5
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f1a3 020a 	sub.w	r2, r3, #10
 80026b6:	4943      	ldr	r1, [pc, #268]	; (80027c4 <goLeft+0x168>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3305      	adds	r3, #5
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y= snakeObject.infoSnake[i].y;
 80026c2:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <goLeft+0x168>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3305      	adds	r3, #5
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	493d      	ldr	r1, [pc, #244]	; (80027c4 <goLeft+0x168>)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3305      	adds	r3, #5
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80026da:	f7ff fe9b 	bl	8002414 <drawHeadSnake>
 80026de:	e062      	b.n	80027a6 <goLeft+0x14a>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 80026e0:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <goLeft+0x168>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3305      	adds	r3, #5
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	1d3a      	adds	r2, r7, #4
 80026ec:	3304      	adds	r3, #4
 80026ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026f2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 80026f6:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <goLeft+0x168>)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3305      	adds	r3, #5
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	f107 020c 	add.w	r2, r7, #12
 8002706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800270a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	1d3a      	adds	r2, r7, #4
 8002714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002718:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d123      	bne.n	800276a <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002722:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <goLeft+0x168>)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3305      	adds	r3, #5
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	b298      	uxth	r0, r3
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <goLeft+0x168>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3305      	adds	r3, #5
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <goLeft+0x168>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3305      	adds	r3, #5
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800274a:	b29b      	uxth	r3, r3
 800274c:	3309      	adds	r3, #9
 800274e:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002750:	4c1c      	ldr	r4, [pc, #112]	; (80027c4 <goLeft+0x168>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3305      	adds	r3, #5
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4423      	add	r3, r4
 800275a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800275c:	b29b      	uxth	r3, r3
 800275e:	3309      	adds	r3, #9
 8002760:	b29b      	uxth	r3, r3
 8002762:	2400      	movs	r4, #0
 8002764:	9400      	str	r4, [sp, #0]
 8002766:	f7fe fe35 	bl	80013d4 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <goLeft+0x168>)
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	3b01      	subs	r3, #1
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	429a      	cmp	r2, r3
 8002774:	d117      	bne.n	80027a6 <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <goLeft+0x168>)
 8002778:	331c      	adds	r3, #28
 800277a:	1d3a      	adds	r2, r7, #4
 800277c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002780:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	b298      	uxth	r0, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	b299      	uxth	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	b29b      	uxth	r3, r3
 8002790:	3309      	adds	r3, #9
 8002792:	b29a      	uxth	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	b29b      	uxth	r3, r3
 8002798:	3309      	adds	r3, #9
 800279a:	b29b      	uxth	r3, r3
 800279c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80027a0:	9400      	str	r4, [sp, #0]
 80027a2:	f7fe fe17 	bl	80013d4 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <goLeft+0x168>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	f6ff af68 	blt.w	8002688 <goLeft+0x2c>
					}
				}
			}
			break;
 80027b8:	e000      	b.n	80027bc <goLeft+0x160>
		}
	}
 80027ba:	bf00      	nop
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	200001cc 	.word	0x200001cc

080027c8 <goRight>:

void goRight()
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 80027ce:	4b58      	ldr	r3, [pc, #352]	; (8002930 <goRight+0x168>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80a7 	bne.w	8002926 <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80027d8:	4b55      	ldr	r3, [pc, #340]	; (8002930 <goRight+0x168>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d103      	bne.n	80027e8 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <goRight+0x168>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4798      	blx	r3
			break;
 80027e6:	e09f      	b.n	8002928 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead= RIGHT;
 80027e8:	4b51      	ldr	r3, [pc, #324]	; (8002930 <goRight+0x168>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e091      	b.n	8002918 <goRight+0x150>
			{
				if (i== 0)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d128      	bne.n	800284c <goRight+0x84>
				{
					tempSnake1= snakeObject.infoSnake[i];
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <goRight+0x168>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3305      	adds	r3, #5
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	f107 020c 	add.w	r2, r7, #12
 8002808:	3304      	adds	r3, #4
 800280a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800280e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x+= snakeStep;
 8002812:	4a47      	ldr	r2, [pc, #284]	; (8002930 <goRight+0x168>)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3305      	adds	r3, #5
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f103 020a 	add.w	r2, r3, #10
 8002822:	4943      	ldr	r1, [pc, #268]	; (8002930 <goRight+0x168>)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3305      	adds	r3, #5
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y= snakeObject.infoSnake[i].y;
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <goRight+0x168>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3305      	adds	r3, #5
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	493d      	ldr	r1, [pc, #244]	; (8002930 <goRight+0x168>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3305      	adds	r3, #5
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002846:	f7ff fde5 	bl	8002414 <drawHeadSnake>
 800284a:	e062      	b.n	8002912 <goRight+0x14a>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 800284c:	4a38      	ldr	r2, [pc, #224]	; (8002930 <goRight+0x168>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3305      	adds	r3, #5
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	1d3a      	adds	r2, r7, #4
 8002858:	3304      	adds	r3, #4
 800285a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800285e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 8002862:	4a33      	ldr	r2, [pc, #204]	; (8002930 <goRight+0x168>)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3305      	adds	r3, #5
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	f107 020c 	add.w	r2, r7, #12
 8002872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002876:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	1d3a      	adds	r2, r7, #4
 8002880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002884:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d123      	bne.n	80028d6 <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <goRight+0x168>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3305      	adds	r3, #5
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	b298      	uxth	r0, r3
 800289c:	4a24      	ldr	r2, [pc, #144]	; (8002930 <goRight+0x168>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3305      	adds	r3, #5
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 80028aa:	4a21      	ldr	r2, [pc, #132]	; (8002930 <goRight+0x168>)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3305      	adds	r3, #5
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3309      	adds	r3, #9
 80028ba:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 80028bc:	4c1c      	ldr	r4, [pc, #112]	; (8002930 <goRight+0x168>)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3305      	adds	r3, #5
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4423      	add	r3, r4
 80028c6:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3309      	adds	r3, #9
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2400      	movs	r4, #0
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	f7fe fd7f 	bl	80013d4 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <goRight+0x168>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	3b01      	subs	r3, #1
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d117      	bne.n	8002912 <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <goRight+0x168>)
 80028e4:	331c      	adds	r3, #28
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ec:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	b298      	uxth	r0, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	b299      	uxth	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3309      	adds	r3, #9
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	b29b      	uxth	r3, r3
 8002904:	3309      	adds	r3, #9
 8002906:	b29b      	uxth	r3, r3
 8002908:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800290c:	9400      	str	r4, [sp, #0]
 800290e:	f7fe fd61 	bl	80013d4 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <goRight+0x168>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	f6ff af68 	blt.w	80027f4 <goRight+0x2c>
					}
				}
			}
			break;
 8002924:	e000      	b.n	8002928 <goRight+0x160>
		}
	}
 8002926:	bf00      	nop
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}
 8002930:	200001cc 	.word	0x200001cc

08002934 <goUp>:

void goUp()
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 800293a:	4b58      	ldr	r3, [pc, #352]	; (8002a9c <goUp+0x168>)
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80a7 	bne.w	8002a92 <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <goUp+0x168>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d103      	bne.n	8002954 <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <goUp+0x168>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4798      	blx	r3
			break;
 8002952:	e09f      	b.n	8002a94 <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead= UP;
 8002954:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <goUp+0x168>)
 8002956:	2203      	movs	r2, #3
 8002958:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e091      	b.n	8002a84 <goUp+0x150>
			{
				if (i== 0)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d128      	bne.n	80029b8 <goUp+0x84>
				{
					tempSnake1= snakeObject.infoSnake[i];
 8002966:	4a4d      	ldr	r2, [pc, #308]	; (8002a9c <goUp+0x168>)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3305      	adds	r3, #5
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	f107 020c 	add.w	r2, r7, #12
 8002974:	3304      	adds	r3, #4
 8002976:	e893 0003 	ldmia.w	r3, {r0, r1}
 800297a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 800297e:	4a47      	ldr	r2, [pc, #284]	; (8002a9c <goUp+0x168>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3305      	adds	r3, #5
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4944      	ldr	r1, [pc, #272]	; (8002a9c <goUp+0x168>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3305      	adds	r3, #5
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	440b      	add	r3, r1
 8002994:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y-= snakeStep;
 8002996:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <goUp+0x168>)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3305      	adds	r3, #5
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f1a3 020a 	sub.w	r2, r3, #10
 80029a6:	493d      	ldr	r1, [pc, #244]	; (8002a9c <goUp+0x168>)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3305      	adds	r3, #5
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80029b2:	f7ff fd2f 	bl	8002414 <drawHeadSnake>
 80029b6:	e062      	b.n	8002a7e <goUp+0x14a>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 80029b8:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <goUp+0x168>)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3305      	adds	r3, #5
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	1d3a      	adds	r2, r7, #4
 80029c4:	3304      	adds	r3, #4
 80029c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029ca:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 80029ce:	4a33      	ldr	r2, [pc, #204]	; (8002a9c <goUp+0x168>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3305      	adds	r3, #5
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	3304      	adds	r3, #4
 80029da:	f107 020c 	add.w	r2, r7, #12
 80029de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e2:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	1d3a      	adds	r2, r7, #4
 80029ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f0:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d123      	bne.n	8002a42 <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80029fa:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <goUp+0x168>)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3305      	adds	r3, #5
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	b298      	uxth	r0, r3
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <goUp+0x168>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3305      	adds	r3, #5
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <goUp+0x168>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3305      	adds	r3, #5
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3309      	adds	r3, #9
 8002a26:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002a28:	4c1c      	ldr	r4, [pc, #112]	; (8002a9c <goUp+0x168>)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3305      	adds	r3, #5
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4423      	add	r3, r4
 8002a32:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3309      	adds	r3, #9
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2400      	movs	r4, #0
 8002a3c:	9400      	str	r4, [sp, #0]
 8002a3e:	f7fe fcc9 	bl	80013d4 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <goUp+0x168>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	3b01      	subs	r3, #1
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d117      	bne.n	8002a7e <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <goUp+0x168>)
 8002a50:	331c      	adds	r3, #28
 8002a52:	1d3a      	adds	r2, r7, #4
 8002a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a58:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	b298      	uxth	r0, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	b299      	uxth	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3309      	adds	r3, #9
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3309      	adds	r3, #9
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a78:	9400      	str	r4, [sp, #0]
 8002a7a:	f7fe fcab 	bl	80013d4 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <goUp+0x168>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	f6ff af68 	blt.w	8002960 <goUp+0x2c>
					}
				}
			}
			break;
 8002a90:	e000      	b.n	8002a94 <goUp+0x160>
		}
	}
 8002a92:	bf00      	nop
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd90      	pop	{r4, r7, pc}
 8002a9c:	200001cc 	.word	0x200001cc

08002aa0 <goDown>:

void goDown()
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af02      	add	r7, sp, #8
	if (snakeObject.stopFlag== 0)
 8002aa6:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <goDown+0x168>)
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80a7 	bne.w	8002bfe <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8002ab0:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <goDown+0x168>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d103      	bne.n	8002ac0 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <goDown+0x168>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4798      	blx	r3
			break;
 8002abe:	e09f      	b.n	8002c00 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead= DOWN;
 8002ac0:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <goDown+0x168>)
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	619a      	str	r2, [r3, #24]
			infoXY tempSnake1;
			infoXY tempSnake2;
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e091      	b.n	8002bf0 <goDown+0x150>
			{
				if (i== 0)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d128      	bne.n	8002b24 <goDown+0x84>
				{
					tempSnake1= snakeObject.infoSnake[i];
 8002ad2:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <goDown+0x168>)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3305      	adds	r3, #5
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	f107 020c 	add.w	r2, r7, #12
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ae6:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8002aea:	4a47      	ldr	r2, [pc, #284]	; (8002c08 <goDown+0x168>)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3305      	adds	r3, #5
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4944      	ldr	r1, [pc, #272]	; (8002c08 <goDown+0x168>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3305      	adds	r3, #5
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y+= snakeStep;
 8002b02:	4a41      	ldr	r2, [pc, #260]	; (8002c08 <goDown+0x168>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3305      	adds	r3, #5
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f103 020a 	add.w	r2, r3, #10
 8002b12:	493d      	ldr	r1, [pc, #244]	; (8002c08 <goDown+0x168>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3305      	adds	r3, #5
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8002b1e:	f7ff fc79 	bl	8002414 <drawHeadSnake>
 8002b22:	e062      	b.n	8002bea <goDown+0x14a>
				}
				else
				{
					tempSnake2= snakeObject.infoSnake[i];
 8002b24:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <goDown+0x168>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3305      	adds	r3, #5
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	1d3a      	adds	r2, r7, #4
 8002b30:	3304      	adds	r3, #4
 8002b32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b36:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i]= tempSnake1;
 8002b3a:	4a33      	ldr	r2, [pc, #204]	; (8002c08 <goDown+0x168>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	f107 020c 	add.w	r2, r7, #12
 8002b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b4e:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1= tempSnake2;
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	1d3a      	adds	r2, r7, #4
 8002b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b5c:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i== 1)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d123      	bne.n	8002bae <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002b66:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <goDown+0x168>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3305      	adds	r3, #5
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b298      	uxth	r0, r3
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <goDown+0x168>)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3305      	adds	r3, #5
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	b299      	uxth	r1, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <goDown+0x168>)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3305      	adds	r3, #5
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3309      	adds	r3, #9
 8002b92:	b29a      	uxth	r2, r3
							snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002b94:	4c1c      	ldr	r4, [pc, #112]	; (8002c08 <goDown+0x168>)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3305      	adds	r3, #5
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4423      	add	r3, r4
 8002b9e:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3309      	adds	r3, #9
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2400      	movs	r4, #0
 8002ba8:	9400      	str	r4, [sp, #0]
 8002baa:	f7fe fc13 	bl	80013d4 <lcd_Fill>
					if (i== snakeObject.snakeLength -1)
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <goDown+0x168>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d117      	bne.n	8002bea <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail= tempSnake2;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <goDown+0x168>)
 8002bbc:	331c      	adds	r3, #28
 8002bbe:	1d3a      	adds	r2, r7, #4
 8002bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bc4:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x+ snakeWidth, tempSnake2.y+ snakeWidth, WHITE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	b298      	uxth	r0, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3309      	adds	r3, #9
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3309      	adds	r3, #9
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002be4:	9400      	str	r4, [sp, #0]
 8002be6:	f7fe fbf5 	bl	80013d4 <lcd_Fill>
			for (int i= 0; i < snakeObject.snakeLength; i++)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <goDown+0x168>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f6ff af68 	blt.w	8002acc <goDown+0x2c>
					}
				}
			}
			break;
 8002bfc:	e000      	b.n	8002c00 <goDown+0x160>
		}
	}
 8002bfe:	bf00      	nop
}
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	200001cc 	.word	0x200001cc

08002c0c <resumeGame>:

void resumeGame()
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af02      	add	r7, sp, #8
	lcd_Fill(0, wallY[0]+wallSize, 240, 320, WHITE);
 8002c12:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <resumeGame+0xc4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <resumeGame+0xc8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b299      	uxth	r1, r3
 8002c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c2c:	22f0      	movs	r2, #240	; 0xf0
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fbd0 	bl	80013d4 <lcd_Fill>
	for (int i= 0; i < snakeObject.snakeLength; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	e02c      	b.n	8002c94 <resumeGame+0x88>
	{
		if (i== 0)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <resumeGame+0x3a>
			drawHeadSnake();
 8002c40:	f7ff fbe8 	bl	8002414 <drawHeadSnake>
 8002c44:	e023      	b.n	8002c8e <resumeGame+0x82>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <resumeGame+0xcc>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3305      	adds	r3, #5
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b298      	uxth	r0, r3
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <resumeGame+0xcc>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3305      	adds	r3, #5
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	b299      	uxth	r1, r3
				snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002c62:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <resumeGame+0xcc>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3305      	adds	r3, #5
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3309      	adds	r3, #9
 8002c72:	b29a      	uxth	r2, r3
				snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8002c74:	4c18      	ldr	r4, [pc, #96]	; (8002cd8 <resumeGame+0xcc>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3305      	adds	r3, #5
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4423      	add	r3, r4
 8002c7e:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3309      	adds	r3, #9
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2400      	movs	r4, #0
 8002c88:	9400      	str	r4, [sp, #0]
 8002c8a:	f7fe fba3 	bl	80013d4 <lcd_Fill>
	for (int i= 0; i < snakeObject.snakeLength; i++)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3301      	adds	r3, #1
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <resumeGame+0xcc>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dbcd      	blt.n	8002c3a <resumeGame+0x2e>
	}
	lcd_Fill(xFruit, yFruit, xFruit+ snakeWidth, yFruit+ snakeWidth, DARKBLUE);
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <resumeGame+0xd0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b298      	uxth	r0, r3
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <resumeGame+0xd4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b299      	uxth	r1, r3
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <resumeGame+0xd0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3309      	adds	r3, #9
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <resumeGame+0xd4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3309      	adds	r3, #9
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f240 14cf 	movw	r4, #463	; 0x1cf
 8002cc2:	9400      	str	r4, [sp, #0]
 8002cc4:	f7fe fb86 	bl	80013d4 <lcd_Fill>
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	20000028 	.word	0x20000028
 8002cd4:	20000038 	.word	0x20000038
 8002cd8:	200001cc 	.word	0x200001cc
 8002cdc:	20000088 	.word	0x20000088
 8002ce0:	2000008c 	.word	0x2000008c

08002ce4 <checkHead>:

void checkHead()
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af02      	add	r7, sp, #8
//	lcd_ShowIntNum (100, 30 , snakeObject.snakeLength , 2 , WHITE , RED , 32) ;
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 232)
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <checkHead+0x12c>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db0c      	blt.n	8002d0c <checkHead+0x28>
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <checkHead+0x12c>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	2be8      	cmp	r3, #232	; 0xe8
 8002cf8:	dc08      	bgt.n	8002d0c <checkHead+0x28>
		|| (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 8002cfa:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <checkHead+0x12c>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2b45      	cmp	r3, #69	; 0x45
 8002d00:	dd04      	ble.n	8002d0c <checkHead+0x28>
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <checkHead+0x12c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002d0a:	dd02      	ble.n	8002d12 <checkHead+0x2e>
	{
		// show gameover
		initOverMode();
 8002d0c:	f7fe f9a0 	bl	8001050 <initOverMode>
 8002d10:	e07b      	b.n	8002e0a <checkHead+0x126>
//		lcd_ShowStr (20, 40 , "NGU", WHITE , RED , 24 ,0) ;

	}
	else
	{
		for (int i= 1; i < snakeObject.snakeLength; i++)
 8002d12:	2301      	movs	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e019      	b.n	8002d4c <checkHead+0x68>
		{
			if (snakeObject.infoSnake[0].x== snakeObject.infoSnake[i].x
 8002d18:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <checkHead+0x12c>)
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	493c      	ldr	r1, [pc, #240]	; (8002e10 <checkHead+0x12c>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3305      	adds	r3, #5
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d10c      	bne.n	8002d46 <checkHead+0x62>
				&& snakeObject.infoSnake[0].y== snakeObject.infoSnake[i].y)
 8002d2c:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <checkHead+0x12c>)
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	4937      	ldr	r1, [pc, #220]	; (8002e10 <checkHead+0x12c>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3305      	adds	r3, #5
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d102      	bne.n	8002d46 <checkHead+0x62>
			{
				// showGameover
				initOverMode();
 8002d40:	f7fe f986 	bl	8001050 <initOverMode>
				// reason: eat body
//				lcd_ShowStr (20 , 40 , "NGU", WHITE , RED , 24 ,0) ;
				return;
 8002d44:	e061      	b.n	8002e0a <checkHead+0x126>
		for (int i= 1; i < snakeObject.snakeLength; i++)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <checkHead+0x12c>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	dbe0      	blt.n	8002d18 <checkHead+0x34>
			}
		}
//		  lcd_Fill(0,  0, 240, 70, RED);
		if (snakeObject.infoSnake[0].x== xFruit && snakeObject.infoSnake[0].y== yFruit)
 8002d56:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <checkHead+0x12c>)
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <checkHead+0x130>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d153      	bne.n	8002e0a <checkHead+0x126>
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <checkHead+0x12c>)
 8002d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <checkHead+0x134>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d14d      	bne.n	8002e0a <checkHead+0x126>
		{
			xFruit= INT_MIN;
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <checkHead+0x130>)
 8002d70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d74:	601a      	str	r2, [r3, #0]
			yFruit= INT_MIN;
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <checkHead+0x134>)
 8002d78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d7c:	601a      	str	r2, [r3, #0]
			snakeObject.snakeLength+= 1;
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <checkHead+0x12c>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <checkHead+0x12c>)
 8002d86:	6253      	str	r3, [r2, #36]	; 0x24
//			lcd_ShowIntNum (100, 30 , snakeObject.snakeLength , 2 , WHITE , RED , 32) ;
			snakeObject.infoSnake[snakeObject.snakeLength-1].x= snakeObject.infoTempSnakeTail.x;
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <checkHead+0x12c>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <checkHead+0x12c>)
 8002d90:	69d2      	ldr	r2, [r2, #28]
 8002d92:	491f      	ldr	r1, [pc, #124]	; (8002e10 <checkHead+0x12c>)
 8002d94:	3305      	adds	r3, #5
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	605a      	str	r2, [r3, #4]
			snakeObject.infoSnake[snakeObject.snakeLength-1 ].y= snakeObject.infoTempSnakeTail.y;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <checkHead+0x12c>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <checkHead+0x12c>)
 8002da4:	6a12      	ldr	r2, [r2, #32]
 8002da6:	491a      	ldr	r1, [pc, #104]	; (8002e10 <checkHead+0x12c>)
 8002da8:	3305      	adds	r3, #5
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	609a      	str	r2, [r3, #8]
			int x= snakeObject.infoSnake[snakeObject.snakeLength-1].x;
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <checkHead+0x12c>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	3b01      	subs	r3, #1
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <checkHead+0x12c>)
 8002db8:	3305      	adds	r3, #5
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60bb      	str	r3, [r7, #8]
			int y= snakeObject.infoSnake[snakeObject.snakeLength-1 ].y;
 8002dc2:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <checkHead+0x12c>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <checkHead+0x12c>)
 8002dca:	3305      	adds	r3, #5
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	607b      	str	r3, [r7, #4]
			lcd_Fill(x, y, x+ snakeWidth, y + snakeWidth, BLACK);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	b298      	uxth	r0, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	b299      	uxth	r1, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3309      	adds	r3, #9
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3309      	adds	r3, #9
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2400      	movs	r4, #0
 8002dee:	9400      	str	r4, [sp, #0]
 8002df0:	f7fe faf0 	bl	80013d4 <lcd_Fill>
			flagEat= 1;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <checkHead+0x138>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

			SCORE++;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <checkHead+0x13c>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <checkHead+0x13c>)
 8002e04:	801a      	strh	r2, [r3, #0]
			printScore();
 8002e06:	f7ff fa91 	bl	800232c <printScore>
		}
	}
}
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd90      	pop	{r4, r7, pc}
 8002e10:	200001cc 	.word	0x200001cc
 8002e14:	20000088 	.word	0x20000088
 8002e18:	2000008c 	.word	0x2000008c
 8002e1c:	20000090 	.word	0x20000090
 8002e20:	2000019a 	.word	0x2000019a

08002e24 <move>:

void move()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <move+0x4c>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d81b      	bhi.n	8002e68 <move+0x44>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <move+0x14>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e59 	.word	0x08002e59
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08002e49 	.word	0x08002e49
 8002e44:	08002e51 	.word	0x08002e51
	{
		case DOWN:
			(*snakeObject.GODOWN)();
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <move+0x4c>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4798      	blx	r3
			break;
 8002e4e:	e00c      	b.n	8002e6a <move+0x46>
		case UP:
			(*snakeObject.GOUP)();
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <move+0x4c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4798      	blx	r3
			break;
 8002e56:	e008      	b.n	8002e6a <move+0x46>
		case RIGHT:
			(*snakeObject.GORIGHT)();
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <move+0x4c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4798      	blx	r3
			break;
 8002e5e:	e004      	b.n	8002e6a <move+0x46>
		case LEFT:
			(*snakeObject.GOLEFT)();
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <move+0x4c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4798      	blx	r3
			break;
 8002e66:	e000      	b.n	8002e6a <move+0x46>
		default:
			break;
 8002e68:	bf00      	nop
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200001cc 	.word	0x200001cc

08002e74 <snakeRun>:

void snakeRun()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af02      	add	r7, sp, #8
	if (button_count[5])
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <snakeRun+0xcc>)
 8002e7c:	895b      	ldrh	r3, [r3, #10]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <snakeRun+0x1c>
	{
		(*snakeObject.GOUP)();
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <snakeRun+0xd0>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8002e88:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <snakeRun+0xd0>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4798      	blx	r3
				  }
			  }
		  }
	  }
	}
}
 8002e8e:	e054      	b.n	8002f3a <snakeRun+0xc6>
	  if (button_count[13])
 8002e90:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <snakeRun+0xcc>)
 8002e92:	8b5b      	ldrh	r3, [r3, #26]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <snakeRun+0x32>
		  (*snakeObject.GODOWN)();
 8002e98:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <snakeRun+0xd0>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4798      	blx	r3
		  (*snakeObject.CHECKHEAD)();
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <snakeRun+0xd0>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4798      	blx	r3
}
 8002ea4:	e049      	b.n	8002f3a <snakeRun+0xc6>
		  if (button_count[10])
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <snakeRun+0xcc>)
 8002ea8:	8a9b      	ldrh	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <snakeRun+0x48>
			  (*snakeObject.GORIGHT)();
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <snakeRun+0xd0>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4798      	blx	r3
			  (*snakeObject.CHECKHEAD)();
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <snakeRun+0xd0>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	4798      	blx	r3
}
 8002eba:	e03e      	b.n	8002f3a <snakeRun+0xc6>
			  if (button_count[8])
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <snakeRun+0xcc>)
 8002ebe:	8a1b      	ldrh	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <snakeRun+0x5e>
				  (*snakeObject.GOLEFT)();
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <snakeRun+0xd0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4798      	blx	r3
				  (*snakeObject.CHECKHEAD)();
 8002eca:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <snakeRun+0xd0>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	4798      	blx	r3
}
 8002ed0:	e033      	b.n	8002f3a <snakeRun+0xc6>
				  if (button_count[9])
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <snakeRun+0xcc>)
 8002ed4:	8a5b      	ldrh	r3, [r3, #18]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d012      	beq.n	8002f00 <snakeRun+0x8c>
					  snakeObject.stopFlag= !snakeObject.stopFlag;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <snakeRun+0xd0>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <snakeRun+0xd0>)
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
					  snakeObject.stopFlag = initStopGame(snakeObject.stopFlag);
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <snakeRun+0xd0>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 fb6a 	bl	80045cc <initStopGame>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <snakeRun+0xd0>)
 8002efc:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002efe:	e01c      	b.n	8002f3a <snakeRun+0xc6>
					  if (button_count[12])
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <snakeRun+0xcc>)
 8002f02:	8b1b      	ldrh	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <snakeRun+0xba>
						  lcd_Clear(WHITE);
 8002f08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f0c:	f7fe fa30 	bl	8001370 <lcd_Clear>
						  snakeInit();
 8002f10:	f000 f81c 	bl	8002f4c <snakeInit>
						  lcd_Fill(0,  0, 240, 70, RED);
 8002f14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2346      	movs	r3, #70	; 0x46
 8002f1c:	22f0      	movs	r2, #240	; 0xf0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe fa57 	bl	80013d4 <lcd_Fill>
						  flagEat= 1;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <snakeRun+0xd4>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	e005      	b.n	8002f3a <snakeRun+0xc6>
						  (*snakeObject.MOVE)();
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <snakeRun+0xd0>)
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	4798      	blx	r3
						  (*snakeObject.CHECKHEAD)();
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <snakeRun+0xd0>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	4798      	blx	r3
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000120 	.word	0x20000120
 8002f44:	200001cc 	.word	0x200001cc
 8002f48:	20000090 	.word	0x20000090

08002f4c <snakeInit>:

void snakeInit()
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af02      	add	r7, sp, #8
	flagEat = 1;
 8002f52:	4b43      	ldr	r3, [pc, #268]	; (8003060 <snakeInit+0x114>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
	srand(rst);
 8002f58:	4b42      	ldr	r3, [pc, #264]	; (8003064 <snakeInit+0x118>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 f82f 	bl	8006fc0 <srand>
	rst++;
 8002f62:	4b40      	ldr	r3, [pc, #256]	; (8003064 <snakeInit+0x118>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a3e      	ldr	r2, [pc, #248]	; (8003064 <snakeInit+0x118>)
 8002f6a:	6013      	str	r3, [r2, #0]
	snakeObject.infoSnake[0].x= 20;
 8002f6c:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <snakeInit+0x11c>)
 8002f6e:	2214      	movs	r2, #20
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y= rangeValidYLower;
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <snakeInit+0x11c>)
 8002f74:	2246      	movs	r2, #70	; 0x46
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x= 10;
 8002f78:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <snakeInit+0x11c>)
 8002f7a:	220a      	movs	r2, #10
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y= rangeValidYLower;
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <snakeInit+0x11c>)
 8002f80:	2246      	movs	r2, #70	; 0x46
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x= 0;
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <snakeInit+0x11c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y= rangeValidYLower;
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <snakeInit+0x11c>)
 8002f8c:	2246      	movs	r2, #70	; 0x46
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i= 3; i < MAX_LENGTH; i++)
 8002f90:	2303      	movs	r3, #3
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	e010      	b.n	8002fb8 <snakeInit+0x6c>
	{
		snakeObject.infoSnake[i].x= 0;
 8002f96:	4a34      	ldr	r2, [pc, #208]	; (8003068 <snakeInit+0x11c>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y= 0;
 8002fa4:	4a30      	ldr	r2, [pc, #192]	; (8003068 <snakeInit+0x11c>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3305      	adds	r3, #5
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
	for (int i= 3; i < MAX_LENGTH; i++)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fbe:	dbea      	blt.n	8002f96 <snakeInit+0x4a>
	}
	snakeObject.GODOWN= goDown;
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <snakeInit+0x11c>)
 8002fc2:	4a2a      	ldr	r2, [pc, #168]	; (800306c <snakeInit+0x120>)
 8002fc4:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT= goLeft;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <snakeInit+0x11c>)
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <snakeInit+0x124>)
 8002fca:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP= goUp;
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <snakeInit+0x11c>)
 8002fce:	4a29      	ldr	r2, [pc, #164]	; (8003074 <snakeInit+0x128>)
 8002fd0:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT= goRight;
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <snakeInit+0x11c>)
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <snakeInit+0x12c>)
 8002fd6:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE= move;
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <snakeInit+0x11c>)
 8002fda:	4a28      	ldr	r2, [pc, #160]	; (800307c <snakeInit+0x130>)
 8002fdc:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD= checkHead;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <snakeInit+0x11c>)
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <snakeInit+0x134>)
 8002fe2:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength= 3;
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <snakeInit+0x11c>)
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead= RIGHT;
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <snakeInit+0x11c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
	for (int i= 0; i < 3; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	e02c      	b.n	8003050 <snakeInit+0x104>
	{
		if (i== 0)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <snakeInit+0xb6>
			drawHeadSnake();
 8002ffc:	f7ff fa0a 	bl	8002414 <drawHeadSnake>
 8003000:	e023      	b.n	800304a <snakeInit+0xfe>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <snakeInit+0x11c>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	3305      	adds	r3, #5
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	b298      	uxth	r0, r3
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <snakeInit+0x11c>)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	3305      	adds	r3, #5
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	b299      	uxth	r1, r3
					snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <snakeInit+0x11c>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3305      	adds	r3, #5
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800302a:	b29b      	uxth	r3, r3
 800302c:	3309      	adds	r3, #9
 800302e:	b29a      	uxth	r2, r3
					snakeObject.infoSnake[i].x+ snakeWidth, snakeObject.infoSnake[i].y+ snakeWidth, BLACK);
 8003030:	4c0d      	ldr	r4, [pc, #52]	; (8003068 <snakeInit+0x11c>)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	3305      	adds	r3, #5
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4423      	add	r3, r4
 800303a:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800303c:	b29b      	uxth	r3, r3
 800303e:	3309      	adds	r3, #9
 8003040:	b29b      	uxth	r3, r3
 8003042:	2400      	movs	r4, #0
 8003044:	9400      	str	r4, [sp, #0]
 8003046:	f7fe f9c5 	bl	80013d4 <lcd_Fill>
	for (int i= 0; i < 3; i++)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	ddcf      	ble.n	8002ff6 <snakeInit+0xaa>
	}
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	20000090 	.word	0x20000090
 8003064:	200001c8 	.word	0x200001c8
 8003068:	200001cc 	.word	0x200001cc
 800306c:	08002aa1 	.word	0x08002aa1
 8003070:	0800265d 	.word	0x0800265d
 8003074:	08002935 	.word	0x08002935
 8003078:	080027c9 	.word	0x080027c9
 800307c:	08002e25 	.word	0x08002e25
 8003080:	08002ce5 	.word	0x08002ce5

08003084 <generateFruit>:

void generateFruit()
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b085      	sub	sp, #20
 8003088:	af02      	add	r7, sp, #8
	if (flagEat== 1)
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <generateFruit+0xec>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d16b      	bne.n	800316a <generateFruit+0xe6>
	{
		xFruit= (rand()%(rangeXGenerate+ 1))*snakeStep;
 8003092:	f003 ffc3 	bl	800701c <rand>
 8003096:	4601      	mov	r1, r0
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <generateFruit+0xf0>)
 800309a:	fb83 2301 	smull	r2, r3, r3, r1
 800309e:	109a      	asrs	r2, r3, #2
 80030a0:	17cb      	asrs	r3, r1, #31
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1aca      	subs	r2, r1, r3
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <generateFruit+0xf4>)
 80030ba:	601a      	str	r2, [r3, #0]
		yFruit= (rand()%(rangeYGenerate+ 1)+ 7)*snakeStep;
 80030bc:	f003 ffae 	bl	800701c <rand>
 80030c0:	4601      	mov	r1, r0
 80030c2:	4b2e      	ldr	r3, [pc, #184]	; (800317c <generateFruit+0xf8>)
 80030c4:	fb83 2301 	smull	r2, r3, r3, r1
 80030c8:	10da      	asrs	r2, r3, #3
 80030ca:	17cb      	asrs	r3, r1, #31
 80030cc:	1ad2      	subs	r2, r2, r3
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	1aca      	subs	r2, r1, r3
 80030da:	3207      	adds	r2, #7
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <generateFruit+0xfc>)
 80030e8:	601a      	str	r2, [r3, #0]
		for (int i= 0; i < snakeObject.snakeLength; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e01f      	b.n	8003130 <generateFruit+0xac>
		{
			if (xFruit== snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 80030f0:	4a24      	ldr	r2, [pc, #144]	; (8003184 <generateFruit+0x100>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3305      	adds	r3, #5
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <generateFruit+0xf4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d112      	bne.n	800312a <generateFruit+0xa6>
 8003104:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <generateFruit+0x100>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3305      	adds	r3, #5
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <generateFruit+0xfc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d108      	bne.n	800312a <generateFruit+0xa6>
			{
				xFruit= INT_MIN;
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <generateFruit+0xf4>)
 800311a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800311e:	601a      	str	r2, [r3, #0]
				yFruit= INT_MIN;
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <generateFruit+0xfc>)
 8003122:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003126:	601a      	str	r2, [r3, #0]
				return;
 8003128:	e01f      	b.n	800316a <generateFruit+0xe6>
		for (int i= 0; i < snakeObject.snakeLength; i++)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3301      	adds	r3, #1
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <generateFruit+0x100>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	dbda      	blt.n	80030f0 <generateFruit+0x6c>
			}
		}
		lcd_Fill(xFruit, yFruit, xFruit+ snakeWidth, yFruit+ snakeWidth, DARKBLUE);
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <generateFruit+0xf4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	b298      	uxth	r0, r3
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <generateFruit+0xfc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b299      	uxth	r1, r3
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <generateFruit+0xf4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	3309      	adds	r3, #9
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <generateFruit+0xfc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3309      	adds	r3, #9
 8003158:	b29b      	uxth	r3, r3
 800315a:	f240 14cf 	movw	r4, #463	; 0x1cf
 800315e:	9400      	str	r4, [sp, #0]
 8003160:	f7fe f938 	bl	80013d4 <lcd_Fill>
		flagEat= 0;
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <generateFruit+0xec>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
	}
}
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	20000090 	.word	0x20000090
 8003174:	2aaaaaab 	.word	0x2aaaaaab
 8003178:	20000088 	.word	0x20000088
 800317c:	51eb851f 	.word	0x51eb851f
 8003180:	2000008c 	.word	0x2000008c
 8003184:	200001cc 	.word	0x200001cc

08003188 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <timer_init+0x10>)
 800318e:	f003 f9e3 	bl	8006558 <HAL_TIM_Base_Start_IT>
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000120c 	.word	0x2000120c

0800319c <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <setTimerSnakeRun+0x2c>)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <setTimerSnakeRun+0x2c>)
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <setTimerSnakeRun+0x30>)
 80031b2:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <setTimerSnakeRun+0x34>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	200011a2 	.word	0x200011a2
 80031cc:	200011a0 	.word	0x200011a0
 80031d0:	2000119e 	.word	0x2000119e

080031d4 <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL = duration/ TIMER_CYCLE_2;
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <setTimerTiming+0x2c>)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	8013      	strh	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <setTimerTiming+0x2c>)
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <setTimerTiming+0x30>)
 80031ea:	801a      	strh	r2, [r3, #0]
	flagForTiming = 0;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <setTimerTiming+0x34>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	801a      	strh	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200011a8 	.word	0x200011a8
 8003204:	200011a6 	.word	0x200011a6
 8003208:	200011a4 	.word	0x200011a4

0800320c <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <setTimerDeTime+0x2c>)
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <setTimerDeTime+0x2c>)
 800321e:	881a      	ldrh	r2, [r3, #0]
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <setTimerDeTime+0x30>)
 8003222:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <setTimerDeTime+0x34>)
 8003226:	2200      	movs	r2, #0
 8003228:	801a      	strh	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	200011ae 	.word	0x200011ae
 800323c:	200011ac 	.word	0x200011ac
 8003240:	200011aa 	.word	0x200011aa

08003244 <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <setTimerButton+0x2c>)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <setTimerButton+0x2c>)
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <setTimerButton+0x30>)
 800325a:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <setTimerButton+0x34>)
 800325e:	2200      	movs	r2, #0
 8003260:	801a      	strh	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	2000119c 	.word	0x2000119c
 8003274:	2000119a 	.word	0x2000119a
 8003278:	20001198 	.word	0x20001198

0800327c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d14b      	bne.n	8003326 <HAL_TIM_PeriodElapsedCallback+0xaa>
		if(timerForSnakeRun > 0)
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timerForSnakeRun--;
 8003296:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80032a0:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flagForSnakeRun = 1;
 80032aa:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80032b2:	881a      	ldrh	r2, [r3, #0]
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80032b6:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 80032b8:	4b21      	ldr	r3, [pc, #132]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timerForButton--;
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80032ca:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flagForButton= 1;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80032dc:	881a      	ldrh	r2, [r3, #0]
 80032de:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80032e0:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			timerForTiming--;
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032f4:	801a      	strh	r2, [r3, #0]
			if(timerForTiming <= 0)
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_TIM_PeriodElapsedCallback+0x88>
			{
				flagForTiming = 1;
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003300:	2201      	movs	r2, #1
 8003302:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			timerForDeTime--;
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003316:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				flagForDeTime = 1;
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003322:	2201      	movs	r2, #1
 8003324:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
//		led7_Scan();
	}
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	200011a0 	.word	0x200011a0
 8003338:	2000119e 	.word	0x2000119e
 800333c:	200011a2 	.word	0x200011a2
 8003340:	2000119a 	.word	0x2000119a
 8003344:	20001198 	.word	0x20001198
 8003348:	2000119c 	.word	0x2000119c
 800334c:	200011a6 	.word	0x200011a6
 8003350:	200011a4 	.word	0x200011a4
 8003354:	200011ac 	.word	0x200011ac
 8003358:	200011aa 	.word	0x200011aa

0800335c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <MX_SPI1_Init+0x68>)
 8003364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800336c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <MX_SPI1_Init+0x64>)
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003382:	2200      	movs	r2, #0
 8003384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800338e:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003390:	2200      	movs	r2, #0
 8003392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <MX_SPI1_Init+0x64>)
 8003396:	2200      	movs	r2, #0
 8003398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <MX_SPI1_Init+0x64>)
 800339c:	2200      	movs	r2, #0
 800339e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <MX_SPI1_Init+0x64>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <MX_SPI1_Init+0x64>)
 80033a8:	220a      	movs	r2, #10
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033ac:	4804      	ldr	r0, [pc, #16]	; (80033c0 <MX_SPI1_Init+0x64>)
 80033ae:	f002 fbd3 	bl	8005b58 <HAL_SPI_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033b8:	f7fe fd82 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200011b0 	.word	0x200011b0
 80033c4:	40013000 	.word	0x40013000

080033c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <HAL_SPI_MspInit+0x84>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12b      	bne.n	8003442 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <HAL_SPI_MspInit+0x88>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_SPI_MspInit+0x88>)
 80033f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f8:	6453      	str	r3, [r2, #68]	; 0x44
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_SPI_MspInit+0x88>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_SPI_MspInit+0x88>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_SPI_MspInit+0x88>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_SPI_MspInit+0x88>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003422:	2338      	movs	r3, #56	; 0x38
 8003424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342e:	2303      	movs	r3, #3
 8003430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003432:	2305      	movs	r3, #5
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	4619      	mov	r1, r3
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <HAL_SPI_MspInit+0x8c>)
 800343e:	f001 fd71 	bl	8004f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40013000 	.word	0x40013000
 8003450:	40023800 	.word	0x40023800
 8003454:	40020400 	.word	0x40020400

08003458 <startUI>:
#include "snake.h"
#include "software_timer.h"
#include "timingModeUI.h"
#include "advanceModeUI.h"

void startUI(){
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b093      	sub	sp, #76	; 0x4c
 800345c:	af04      	add	r7, sp, #16
	char str1[50] = "";
 800345e:	2300      	movs	r3, #0
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	222e      	movs	r2, #46	; 0x2e
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fda1 	bl	8006fb0 <memset>

	lcd_Clear(BLACK);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd ff7e 	bl	8001370 <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8003474:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <startUI+0xdc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	b298      	uxth	r0, r3
 800347a:	4b2f      	ldr	r3, [pc, #188]	; (8003538 <startUI+0xe0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b299      	uxth	r1, r3
 8003480:	4b2e      	ldr	r3, [pc, #184]	; (800353c <startUI+0xe4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b29a      	uxth	r2, r3
 8003486:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <startUI+0xe8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	4c2d      	ldr	r4, [pc, #180]	; (8003544 <startUI+0xec>)
 800348e:	9400      	str	r4, [sp, #0]
 8003490:	f7fe f978 	bl	8001784 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8003494:	2300      	movs	r3, #0
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	2318      	movs	r3, #24
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	f248 4330 	movw	r3, #33840	; 0x8430
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <startUI+0xf0>)
 80034a8:	2137      	movs	r1, #55	; 0x37
 80034aa:	203c      	movs	r0, #60	; 0x3c
 80034ac:	f7fe fb44 	bl	8001b38 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 80034b0:	2300      	movs	r3, #0
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	2318      	movs	r3, #24
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	f248 4330 	movw	r3, #33840	; 0x8430
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c2:	4a22      	ldr	r2, [pc, #136]	; (800354c <startUI+0xf4>)
 80034c4:	2164      	movs	r1, #100	; 0x64
 80034c6:	2028      	movs	r0, #40	; 0x28
 80034c8:	f7fe fb36 	bl	8001b38 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80034cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	23b4      	movs	r3, #180	; 0xb4
 80034d4:	22b4      	movs	r2, #180	; 0xb4
 80034d6:	2196      	movs	r1, #150	; 0x96
 80034d8:	203c      	movs	r0, #60	; 0x3c
 80034da:	f7fe f84c 	bl	8001576 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <startUI+0xf8>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fcf2 	bl	8001ecc <convert2str>
 80034e8:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 80034ea:	463b      	mov	r3, r7
 80034ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fe06 	bl	8007100 <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 80034f4:	463a      	mov	r2, r7
 80034f6:	2301      	movs	r3, #1
 80034f8:	9302      	str	r3, [sp, #8]
 80034fa:	2318      	movs	r3, #24
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003508:	2198      	movs	r1, #152	; 0x98
 800350a:	2000      	movs	r0, #0
 800350c:	f7fe fb78 	bl	8001c00 <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8003510:	2300      	movs	r3, #0
 8003512:	9302      	str	r3, [sp, #8]
 8003514:	2318      	movs	r3, #24
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	f248 4330 	movw	r3, #33840	; 0x8430
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <startUI+0xfc>)
 8003524:	21e6      	movs	r1, #230	; 0xe6
 8003526:	2050      	movs	r0, #80	; 0x50
 8003528:	f7fe fb06 	bl	8001b38 <lcd_ShowStr>
}
 800352c:	bf00      	nop
 800352e:	373c      	adds	r7, #60	; 0x3c
 8003530:	46bd      	mov	sp, r7
 8003532:	bd90      	pop	{r4, r7, pc}
 8003534:	20000078 	.word	0x20000078
 8003538:	2000007c 	.word	0x2000007c
 800353c:	20000080 	.word	0x20000080
 8003540:	20000084 	.word	0x20000084
 8003544:	0800b698 	.word	0x0800b698
 8003548:	080085e0 	.word	0x080085e0
 800354c:	080085f0 	.word	0x080085f0
 8003550:	20000198 	.word	0x20000198
 8003554:	08008600 	.word	0x08008600

08003558 <eraseArrow>:

void eraseArrow()
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f240 134b 	movw	r3, #331	; 0x14b
 8003566:	22dd      	movs	r2, #221	; 0xdd
 8003568:	21be      	movs	r1, #190	; 0xbe
 800356a:	20b4      	movs	r0, #180	; 0xb4
 800356c:	f7fd ff32 	bl	80013d4 <lcd_Fill>
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <drawArrow>:

void drawArrow()
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b083      	sub	sp, #12
 800357c:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 800357e:	f7ff ffeb 	bl	8003558 <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <drawArrow+0x98>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	b298      	uxth	r0, r3
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <drawArrow+0x9c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b299      	uxth	r1, r3
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <drawArrow+0xa0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29a      	uxth	r2, r3
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <drawArrow+0xa4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800359e:	9400      	str	r4, [sp, #0]
 80035a0:	f7fd ff65 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <drawArrow+0xa0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b298      	uxth	r0, r3
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <drawArrow+0xa4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b299      	uxth	r1, r3
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <drawArrow+0x98>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b29c      	uxth	r4, r3
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <drawArrow+0xa4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <drawArrow+0x9c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ce:	9200      	str	r2, [sp, #0]
 80035d0:	4622      	mov	r2, r4
 80035d2:	f7fd ff4c 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <drawArrow+0x98>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b298      	uxth	r0, r3
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <drawArrow+0x9c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b299      	uxth	r1, r3
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <drawArrow+0x98>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b29c      	uxth	r4, r3
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <drawArrow+0xa4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <drawArrow+0x9c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	4622      	mov	r2, r4
 8003604:	f7fd ff33 	bl	800146e <lcd_DrawLine>
}
 8003608:	bf00      	nop
 800360a:	3704      	adds	r7, #4
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}
 8003610:	20000008 	.word	0x20000008
 8003614:	20000010 	.word	0x20000010
 8003618:	20000004 	.word	0x20000004
 800361c:	2000000c 	.word	0x2000000c

08003620 <arrowInPickMode>:

void arrowInPickMode()
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8003626:	4b99      	ldr	r3, [pc, #612]	; (800388c <arrowInPickMode+0x26c>)
 8003628:	88db      	ldrh	r3, [r3, #6]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d117      	bne.n	800365e <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 800362e:	4b98      	ldr	r3, [pc, #608]	; (8003890 <arrowInPickMode+0x270>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8003634:	4b97      	ldr	r3, [pc, #604]	; (8003894 <arrowInPickMode+0x274>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d009      	beq.n	8003650 <arrowInPickMode+0x30>
 800363c:	2b05      	cmp	r3, #5
 800363e:	dc11      	bgt.n	8003664 <arrowInPickMode+0x44>
 8003640:	2b03      	cmp	r3, #3
 8003642:	d00e      	beq.n	8003662 <arrowInPickMode+0x42>
 8003644:	2b04      	cmp	r3, #4
 8003646:	d10d      	bne.n	8003664 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 8003648:	4b92      	ldr	r3, [pc, #584]	; (8003894 <arrowInPickMode+0x274>)
 800364a:	2203      	movs	r2, #3
 800364c:	601a      	str	r2, [r3, #0]
			break;
 800364e:	e009      	b.n	8003664 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8003650:	4b90      	ldr	r3, [pc, #576]	; (8003894 <arrowInPickMode+0x274>)
 8003652:	2204      	movs	r2, #4
 8003654:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 8003656:	4b90      	ldr	r3, [pc, #576]	; (8003898 <arrowInPickMode+0x278>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
			break;
 800365c:	e002      	b.n	8003664 <arrowInPickMode+0x44>
		}

	}
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <arrowInPickMode+0x44>
			break;
 8003662:	bf00      	nop
	if(button_count[7] == 1)
 8003664:	4b89      	ldr	r3, [pc, #548]	; (800388c <arrowInPickMode+0x26c>)
 8003666:	89db      	ldrh	r3, [r3, #14]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d118      	bne.n	800369e <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 800366c:	4b88      	ldr	r3, [pc, #544]	; (8003890 <arrowInPickMode+0x270>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <arrowInPickMode+0x274>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d013      	beq.n	80036a2 <arrowInPickMode+0x82>
 800367a:	2b05      	cmp	r3, #5
 800367c:	dc12      	bgt.n	80036a4 <arrowInPickMode+0x84>
 800367e:	2b03      	cmp	r3, #3
 8003680:	d002      	beq.n	8003688 <arrowInPickMode+0x68>
 8003682:	2b04      	cmp	r3, #4
 8003684:	d007      	beq.n	8003696 <arrowInPickMode+0x76>
 8003686:	e00d      	b.n	80036a4 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 8003688:	4b82      	ldr	r3, [pc, #520]	; (8003894 <arrowInPickMode+0x274>)
 800368a:	2204      	movs	r2, #4
 800368c:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 800368e:	4b82      	ldr	r3, [pc, #520]	; (8003898 <arrowInPickMode+0x278>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
			break;
 8003694:	e006      	b.n	80036a4 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 8003696:	4b7f      	ldr	r3, [pc, #508]	; (8003894 <arrowInPickMode+0x274>)
 8003698:	2205      	movs	r2, #5
 800369a:	601a      	str	r2, [r3, #0]
			break;
 800369c:	e002      	b.n	80036a4 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <arrowInPickMode+0x84>
			break;
 80036a2:	bf00      	nop
	if(flagChange == 1)
 80036a4:	4b7a      	ldr	r3, [pc, #488]	; (8003890 <arrowInPickMode+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 814d 	bne.w	8003948 <arrowInPickMode+0x328>
	{
		switch (arrowMode)
 80036ae:	4b79      	ldr	r3, [pc, #484]	; (8003894 <arrowInPickMode+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	f000 80fc 	beq.w	80038b0 <arrowInPickMode+0x290>
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	f300 8142 	bgt.w	8003942 <arrowInPickMode+0x322>
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d002      	beq.n	80036c8 <arrowInPickMode+0xa8>
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d04f      	beq.n	8003766 <arrowInPickMode+0x146>
 80036c6:	e13c      	b.n	8003942 <arrowInPickMode+0x322>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 80036c8:	4b74      	ldr	r3, [pc, #464]	; (800389c <arrowInPickMode+0x27c>)
 80036ca:	22d2      	movs	r2, #210	; 0xd2
 80036cc:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 80036ce:	4b74      	ldr	r3, [pc, #464]	; (80038a0 <arrowInPickMode+0x280>)
 80036d0:	22be      	movs	r2, #190	; 0xbe
 80036d2:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80036dc:	22f0      	movs	r2, #240	; 0xf0
 80036de:	21b4      	movs	r1, #180	; 0xb4
 80036e0:	2000      	movs	r0, #0
 80036e2:	f7fd fe77 	bl	80013d4 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 80036e6:	2300      	movs	r3, #0
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	2318      	movs	r3, #24
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	f248 4330 	movw	r3, #33840	; 0x8430
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036f8:	4a6a      	ldr	r2, [pc, #424]	; (80038a4 <arrowInPickMode+0x284>)
 80036fa:	21c8      	movs	r1, #200	; 0xc8
 80036fc:	200a      	movs	r0, #10
 80036fe:	f7fe fa1b 	bl	8001b38 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8003702:	2300      	movs	r3, #0
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	2318      	movs	r3, #24
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	f248 4330 	movw	r3, #33840	; 0x8430
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003714:	4a64      	ldr	r2, [pc, #400]	; (80038a8 <arrowInPickMode+0x288>)
 8003716:	21fa      	movs	r1, #250	; 0xfa
 8003718:	200a      	movs	r0, #10
 800371a:	f7fe fa0d 	bl	8001b38 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 800371e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003728:	2282      	movs	r2, #130	; 0x82
 800372a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800372e:	206e      	movs	r0, #110	; 0x6e
 8003730:	f7fd fe9d 	bl	800146e <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 8003734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800373e:	2278      	movs	r2, #120	; 0x78
 8003740:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003744:	206e      	movs	r0, #110	; 0x6e
 8003746:	f7fd fe92 	bl	800146e <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 800374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003754:	2282      	movs	r2, #130	; 0x82
 8003756:	f44f 719b 	mov.w	r1, #310	; 0x136
 800375a:	2078      	movs	r0, #120	; 0x78
 800375c:	f7fd fe87 	bl	800146e <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8003760:	f7ff ff0a 	bl	8003578 <drawArrow>
			break;
 8003764:	e0ed      	b.n	8003942 <arrowInPickMode+0x322>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800376e:	22f0      	movs	r2, #240	; 0xf0
 8003770:	21b4      	movs	r1, #180	; 0xb4
 8003772:	2000      	movs	r0, #0
 8003774:	f7fd fe2e 	bl	80013d4 <lcd_Fill>
			if(flagUpDOwn == 0)
 8003778:	4b47      	ldr	r3, [pc, #284]	; (8003898 <arrowInPickMode+0x278>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d13d      	bne.n	80037fc <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 8003780:	4b46      	ldr	r3, [pc, #280]	; (800389c <arrowInPickMode+0x27c>)
 8003782:	22d2      	movs	r2, #210	; 0xd2
 8003784:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 8003786:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <arrowInPickMode+0x280>)
 8003788:	22be      	movs	r2, #190	; 0xbe
 800378a:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 800378c:	2300      	movs	r3, #0
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2318      	movs	r3, #24
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	f248 4330 	movw	r3, #33840	; 0x8430
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800379e:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <arrowInPickMode+0x288>)
 80037a0:	21c8      	movs	r1, #200	; 0xc8
 80037a2:	200a      	movs	r0, #10
 80037a4:	f7fe f9c8 	bl	8001b38 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 80037a8:	2300      	movs	r3, #0
 80037aa:	9302      	str	r3, [sp, #8]
 80037ac:	2318      	movs	r3, #24
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	f248 4330 	movw	r3, #33840	; 0x8430
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ba:	4a3c      	ldr	r2, [pc, #240]	; (80038ac <arrowInPickMode+0x28c>)
 80037bc:	21fa      	movs	r1, #250	; 0xfa
 80037be:	200a      	movs	r0, #10
 80037c0:	f7fe f9ba 	bl	8001b38 <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 80037c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	23be      	movs	r3, #190	; 0xbe
 80037cc:	2282      	movs	r2, #130	; 0x82
 80037ce:	21be      	movs	r1, #190	; 0xbe
 80037d0:	206e      	movs	r0, #110	; 0x6e
 80037d2:	f7fd fe4c 	bl	800146e <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 80037d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	23b4      	movs	r3, #180	; 0xb4
 80037de:	2278      	movs	r2, #120	; 0x78
 80037e0:	21be      	movs	r1, #190	; 0xbe
 80037e2:	206e      	movs	r0, #110	; 0x6e
 80037e4:	f7fd fe43 	bl	800146e <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 80037e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	23be      	movs	r3, #190	; 0xbe
 80037f0:	2282      	movs	r2, #130	; 0x82
 80037f2:	21b4      	movs	r1, #180	; 0xb4
 80037f4:	2078      	movs	r0, #120	; 0x78
 80037f6:	f7fd fe3a 	bl	800146e <lcd_DrawLine>
 80037fa:	e043      	b.n	8003884 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <arrowInPickMode+0x27c>)
 80037fe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003802:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 8003804:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <arrowInPickMode+0x280>)
 8003806:	22f0      	movs	r2, #240	; 0xf0
 8003808:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 800380a:	2300      	movs	r3, #0
 800380c:	9302      	str	r3, [sp, #8]
 800380e:	2318      	movs	r3, #24
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	f248 4330 	movw	r3, #33840	; 0x8430
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <arrowInPickMode+0x284>)
 800381e:	21c8      	movs	r1, #200	; 0xc8
 8003820:	200a      	movs	r0, #10
 8003822:	f7fe f989 	bl	8001b38 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 8003826:	2300      	movs	r3, #0
 8003828:	9302      	str	r3, [sp, #8]
 800382a:	2318      	movs	r3, #24
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	f248 4330 	movw	r3, #33840	; 0x8430
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003838:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <arrowInPickMode+0x288>)
 800383a:	21fa      	movs	r1, #250	; 0xfa
 800383c:	200a      	movs	r0, #10
 800383e:	f7fe f97b 	bl	8001b38 <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 8003842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800384c:	2282      	movs	r2, #130	; 0x82
 800384e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003852:	206e      	movs	r0, #110	; 0x6e
 8003854:	f7fd fe0b 	bl	800146e <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 8003858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003862:	2278      	movs	r2, #120	; 0x78
 8003864:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003868:	206e      	movs	r0, #110	; 0x6e
 800386a:	f7fd fe00 	bl	800146e <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 800386e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003878:	2282      	movs	r2, #130	; 0x82
 800387a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800387e:	2078      	movs	r0, #120	; 0x78
 8003880:	f7fd fdf5 	bl	800146e <lcd_DrawLine>
			}

			drawArrow();
 8003884:	f7ff fe78 	bl	8003578 <drawArrow>
			break;
 8003888:	e05b      	b.n	8003942 <arrowInPickMode+0x322>
 800388a:	bf00      	nop
 800388c:	20000120 	.word	0x20000120
 8003890:	200001a8 	.word	0x200001a8
 8003894:	20000014 	.word	0x20000014
 8003898:	200001a4 	.word	0x200001a4
 800389c:	2000000c 	.word	0x2000000c
 80038a0:	20000010 	.word	0x20000010
 80038a4:	08008608 	.word	0x08008608
 80038a8:	08008618 	.word	0x08008618
 80038ac:	08008628 	.word	0x08008628
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <arrowInPickMode+0x330>)
 80038b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038b6:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <arrowInPickMode+0x334>)
 80038ba:	22f0      	movs	r2, #240	; 0xf0
 80038bc:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 80038be:	2300      	movs	r3, #0
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80038c6:	22f0      	movs	r2, #240	; 0xf0
 80038c8:	21b4      	movs	r1, #180	; 0xb4
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7fd fd82 	bl	80013d4 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80038d0:	2300      	movs	r3, #0
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	2318      	movs	r3, #24
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	f248 4330 	movw	r3, #33840	; 0x8430
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <arrowInPickMode+0x338>)
 80038e4:	21c8      	movs	r1, #200	; 0xc8
 80038e6:	200a      	movs	r0, #10
 80038e8:	f7fe f926 	bl	8001b38 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 80038ec:	2300      	movs	r3, #0
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	2318      	movs	r3, #24
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	f248 4330 	movw	r3, #33840	; 0x8430
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <arrowInPickMode+0x33c>)
 8003900:	21fa      	movs	r1, #250	; 0xfa
 8003902:	200a      	movs	r0, #10
 8003904:	f7fe f918 	bl	8001b38 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 8003908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	23be      	movs	r3, #190	; 0xbe
 8003910:	2282      	movs	r2, #130	; 0x82
 8003912:	21be      	movs	r1, #190	; 0xbe
 8003914:	206e      	movs	r0, #110	; 0x6e
 8003916:	f7fd fdaa 	bl	800146e <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 800391a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	23b4      	movs	r3, #180	; 0xb4
 8003922:	2278      	movs	r2, #120	; 0x78
 8003924:	21be      	movs	r1, #190	; 0xbe
 8003926:	206e      	movs	r0, #110	; 0x6e
 8003928:	f7fd fda1 	bl	800146e <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 800392c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	23be      	movs	r3, #190	; 0xbe
 8003934:	2282      	movs	r2, #130	; 0x82
 8003936:	21b4      	movs	r1, #180	; 0xb4
 8003938:	2078      	movs	r0, #120	; 0x78
 800393a:	f7fd fd98 	bl	800146e <lcd_DrawLine>

			// draw arrow
			drawArrow();
 800393e:	f7ff fe1b 	bl	8003578 <drawArrow>
		}
		flagChange = 0;
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <arrowInPickMode+0x340>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
	}
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000000c 	.word	0x2000000c
 8003954:	20000010 	.word	0x20000010
 8003958:	08008618 	.word	0x08008618
 800395c:	08008628 	.word	0x08008628
 8003960:	200001a8 	.word	0x200001a8

08003964 <pickMode>:

void pickMode(uint16_t id){
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b095      	sub	sp, #84	; 0x54
 8003968:	af04      	add	r7, sp, #16
 800396a:	4603      	mov	r3, r0
 800396c:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 800396e:	2000      	movs	r0, #0
 8003970:	f7fd fcfe 	bl	8001370 <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <pickMode+0x14c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b298      	uxth	r0, r3
 800397a:	4b4e      	ldr	r3, [pc, #312]	; (8003ab4 <pickMode+0x150>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	b299      	uxth	r1, r3
 8003980:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <pickMode+0x154>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <pickMode+0x158>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4c4c      	ldr	r4, [pc, #304]	; (8003ac0 <pickMode+0x15c>)
 800398e:	9400      	str	r4, [sp, #0]
 8003990:	f7fd fef8 	bl	8001784 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8003994:	2300      	movs	r3, #0
 8003996:	9302      	str	r3, [sp, #8]
 8003998:	2318      	movs	r3, #24
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	f248 4330 	movw	r3, #33840	; 0x8430
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a6:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <pickMode+0x160>)
 80039a8:	2137      	movs	r1, #55	; 0x37
 80039aa:	203c      	movs	r0, #60	; 0x3c
 80039ac:	f7fe f8c4 	bl	8001b38 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80039b0:	4a45      	ldr	r2, [pc, #276]	; (8003ac8 <pickMode+0x164>)
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039ba:	6018      	str	r0, [r3, #0]
 80039bc:	3304      	adds	r3, #4
 80039be:	8019      	strh	r1, [r3, #0]
 80039c0:	f107 030e 	add.w	r3, r7, #14
 80039c4:	222c      	movs	r2, #44	; 0x2c
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f003 faf1 	bl	8006fb0 <memset>
	char *str2 = convert2str(id);
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fa7b 	bl	8001ecc <convert2str>
 80039d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80039d8:	f107 0308 	add.w	r3, r7, #8
 80039dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fb8e 	bl	8007100 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80039e4:	f107 0208 	add.w	r2, r7, #8
 80039e8:	2300      	movs	r3, #0
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	2318      	movs	r3, #24
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	f248 4330 	movw	r3, #33840	; 0x8430
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039fa:	2164      	movs	r1, #100	; 0x64
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fe f8ff 	bl	8001c00 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 8003a02:	2300      	movs	r3, #0
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	2318      	movs	r3, #24
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	f248 4330 	movw	r3, #33840	; 0x8430
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a14:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <pickMode+0x168>)
 8003a16:	2196      	movs	r1, #150	; 0x96
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f7fe f8f1 	bl	8001c00 <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	2318      	movs	r3, #24
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	f248 4330 	movw	r3, #33840	; 0x8430
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <pickMode+0x16c>)
 8003a32:	21c8      	movs	r1, #200	; 0xc8
 8003a34:	200a      	movs	r0, #10
 8003a36:	f7fe f87f 	bl	8001b38 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	2318      	movs	r3, #24
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f248 4330 	movw	r3, #33840	; 0x8430
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <pickMode+0x170>)
 8003a4e:	21fa      	movs	r1, #250	; 0xfa
 8003a50:	200a      	movs	r0, #10
 8003a52:	f7fe f871 	bl	8001b38 <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <pickMode+0x174>)
 8003a58:	22d2      	movs	r2, #210	; 0xd2
 8003a5a:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <pickMode+0x178>)
 8003a5e:	22be      	movs	r2, #190	; 0xbe
 8003a60:	601a      	str	r2, [r3, #0]
	drawArrow();
 8003a62:	f7ff fd89 	bl	8003578 <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 8003a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003a70:	2282      	movs	r2, #130	; 0x82
 8003a72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a76:	206e      	movs	r0, #110	; 0x6e
 8003a78:	f7fd fcf9 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8003a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003a86:	2278      	movs	r2, #120	; 0x78
 8003a88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a8c:	206e      	movs	r0, #110	; 0x6e
 8003a8e:	f7fd fcee 	bl	800146e <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8003a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003a9c:	2282      	movs	r2, #130	; 0x82
 8003a9e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003aa2:	2078      	movs	r0, #120	; 0x78
 8003aa4:	f7fd fce3 	bl	800146e <lcd_DrawLine>

}
 8003aa8:	bf00      	nop
 8003aaa:	3744      	adds	r7, #68	; 0x44
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd90      	pop	{r4, r7, pc}
 8003ab0:	20000078 	.word	0x20000078
 8003ab4:	2000007c 	.word	0x2000007c
 8003ab8:	20000080 	.word	0x20000080
 8003abc:	20000084 	.word	0x20000084
 8003ac0:	0800b698 	.word	0x0800b698
 8003ac4:	080085e0 	.word	0x080085e0
 8003ac8:	08008640 	.word	0x08008640
 8003acc:	08008638 	.word	0x08008638
 8003ad0:	08008608 	.word	0x08008608
 8003ad4:	08008618 	.word	0x08008618
 8003ad8:	2000000c 	.word	0x2000000c
 8003adc:	20000010 	.word	0x20000010

08003ae0 <beginStartGame>:

void beginStartGame()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b094      	sub	sp, #80	; 0x50
 8003ae4:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 8003ae6:	4b9b      	ldr	r3, [pc, #620]	; (8003d54 <beginStartGame+0x274>)
 8003ae8:	8b9b      	ldrh	r3, [r3, #28]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	f040 81b0 	bne.w	8003e50 <beginStartGame+0x370>
	{
		switch (statusGame) {
 8003af0:	4b99      	ldr	r3, [pc, #612]	; (8003d58 <beginStartGame+0x278>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	f200 81ad 	bhi.w	8003e54 <beginStartGame+0x374>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <beginStartGame+0x20>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b29 	.word	0x08003b29
 8003b04:	08003b4f 	.word	0x08003b4f
 8003b08:	08003b61 	.word	0x08003b61
 8003b0c:	08003c55 	.word	0x08003c55
 8003b10:	08003c7b 	.word	0x08003c7b
 8003b14:	08003ca1 	.word	0x08003ca1
 8003b18:	08003de5 	.word	0x08003de5
 8003b1c:	08003cc5 	.word	0x08003cc5
 8003b20:	08003bcd 	.word	0x08003bcd
 8003b24:	08003c11 	.word	0x08003c11
			case INIT:
				statusGame = STARTMODE;
 8003b28:	4b8b      	ldr	r3, [pc, #556]	; (8003d58 <beginStartGame+0x278>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
				ID = 0;
 8003b2e:	4b8b      	ldr	r3, [pc, #556]	; (8003d5c <beginStartGame+0x27c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8003b34:	4b8a      	ldr	r3, [pc, #552]	; (8003d60 <beginStartGame+0x280>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8003b3a:	4b8a      	ldr	r3, [pc, #552]	; (8003d64 <beginStartGame+0x284>)
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8003b40:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <beginStartGame+0x288>)
 8003b42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b46:	801a      	strh	r2, [r3, #0]
				startUI();
 8003b48:	f7ff fc86 	bl	8003458 <startUI>
				break;
 8003b4c:	e187      	b.n	8003e5e <beginStartGame+0x37e>
			case STARTMODE:
				statusGame = PICKMODE;
 8003b4e:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <beginStartGame+0x278>)
 8003b50:	2202      	movs	r2, #2
 8003b52:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8003b54:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <beginStartGame+0x27c>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff03 	bl	8003964 <pickMode>
				break;
 8003b5e:	e17e      	b.n	8003e5e <beginStartGame+0x37e>
			case PICKMODE:
				switch (arrowMode)
 8003b60:	4b80      	ldr	r3, [pc, #512]	; (8003d64 <beginStartGame+0x284>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d024      	beq.n	8003bb2 <beginStartGame+0xd2>
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	f300 8175 	bgt.w	8003e58 <beginStartGame+0x378>
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d002      	beq.n	8003b78 <beginStartGame+0x98>
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d011      	beq.n	8003b9a <beginStartGame+0xba>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 8003b76:	e16f      	b.n	8003e58 <beginStartGame+0x378>
					oldStatusGame = NORMALMODE;
 8003b78:	4b7c      	ldr	r3, [pc, #496]	; (8003d6c <beginStartGame+0x28c>)
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 8003b7e:	4b76      	ldr	r3, [pc, #472]	; (8003d58 <beginStartGame+0x278>)
 8003b80:	2203      	movs	r2, #3
 8003b82:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 8003b84:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <beginStartGame+0x27c>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <beginStartGame+0x280>)
 8003b8a:	8812      	ldrh	r2, [r2, #0]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe f9d8 	bl	8001f44 <setUpLcdNormalPlay>
					snakeInit();
 8003b94:	f7ff f9da 	bl	8002f4c <snakeInit>
					break;
 8003b98:	e017      	b.n	8003bca <beginStartGame+0xea>
					oldStatusGame = TIMINGMODE;
 8003b9a:	4b74      	ldr	r3, [pc, #464]	; (8003d6c <beginStartGame+0x28c>)
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8003ba0:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <beginStartGame+0x288>)
 8003ba2:	221e      	movs	r2, #30
 8003ba4:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 8003ba6:	4b6c      	ldr	r3, [pc, #432]	; (8003d58 <beginStartGame+0x278>)
 8003ba8:	2208      	movs	r2, #8
 8003baa:	601a      	str	r2, [r3, #0]
					setupTiming();
 8003bac:	f000 fe7a 	bl	80048a4 <setupTiming>
					break;
 8003bb0:	e00b      	b.n	8003bca <beginStartGame+0xea>
					oldStatusGame = ADVANCEMODE;
 8003bb2:	4b6e      	ldr	r3, [pc, #440]	; (8003d6c <beginStartGame+0x28c>)
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8003bb8:	4b6b      	ldr	r3, [pc, #428]	; (8003d68 <beginStartGame+0x288>)
 8003bba:	221e      	movs	r2, #30
 8003bbc:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 8003bbe:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <beginStartGame+0x278>)
 8003bc0:	2209      	movs	r2, #9
 8003bc2:	601a      	str	r2, [r3, #0]
					setupAdvance();
 8003bc4:	f7fc fcde 	bl	8000584 <setupAdvance>
					break;
 8003bc8:	bf00      	nop
				break;
 8003bca:	e145      	b.n	8003e58 <beginStartGame+0x378>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING*1000);
 8003bcc:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <beginStartGame+0x288>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	0152      	lsls	r2, r2, #5
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff faf8 	bl	80031d4 <setTimerTiming>
				setTimerDeTime(1000);
 8003be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be8:	f7ff fb10 	bl	800320c <setTimerDeTime>
				oldTiming = TIMING;
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <beginStartGame+0x288>)
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <beginStartGame+0x290>)
 8003bf2:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 8003bf4:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <beginStartGame+0x278>)
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 8003bfa:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <beginStartGame+0x27c>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <beginStartGame+0x288>)
 8003c00:	8812      	ldrh	r2, [r2, #0]
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fa45 	bl	8002094 <setUpLcdTimingPlay>
				snakeInit();
 8003c0a:	f7ff f99f 	bl	8002f4c <snakeInit>
				break;
 8003c0e:	e126      	b.n	8003e5e <beginStartGame+0x37e>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING*1000);
 8003c10:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <beginStartGame+0x288>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	0152      	lsls	r2, r2, #5
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fad6 	bl	80031d4 <setTimerTiming>
				setTimerDeTime(1000);
 8003c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c2c:	f7ff faee 	bl	800320c <setTimerDeTime>
				oldTiming = TIMING;
 8003c30:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <beginStartGame+0x288>)
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	4b4e      	ldr	r3, [pc, #312]	; (8003d70 <beginStartGame+0x290>)
 8003c36:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 8003c38:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <beginStartGame+0x278>)
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <beginStartGame+0x27c>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	4a49      	ldr	r2, [pc, #292]	; (8003d68 <beginStartGame+0x288>)
 8003c44:	8812      	ldrh	r2, [r2, #0]
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe fac9 	bl	80021e0 <setUpLcdAdvancePlay>
				snakeInit();
 8003c4e:	f7ff f97d 	bl	8002f4c <snakeInit>
				break;
 8003c52:	e104      	b.n	8003e5e <beginStartGame+0x37e>
			case NORMALMODE:
				statusGame = STARTMODE;
 8003c54:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <beginStartGame+0x278>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
				ID = 0;
 8003c5a:	4b40      	ldr	r3, [pc, #256]	; (8003d5c <beginStartGame+0x27c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <beginStartGame+0x280>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <beginStartGame+0x284>)
 8003c68:	2203      	movs	r2, #3
 8003c6a:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <beginStartGame+0x288>)
 8003c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c72:	801a      	strh	r2, [r3, #0]
				startUI();
 8003c74:	f7ff fbf0 	bl	8003458 <startUI>
				break;
 8003c78:	e0f1      	b.n	8003e5e <beginStartGame+0x37e>
			case TIMINGMODE:
				statusGame = STARTMODE;
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <beginStartGame+0x278>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
				ID = 0;
 8003c80:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <beginStartGame+0x27c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <beginStartGame+0x280>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8003c8c:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <beginStartGame+0x284>)
 8003c8e:	2203      	movs	r2, #3
 8003c90:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8003c92:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <beginStartGame+0x288>)
 8003c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c98:	801a      	strh	r2, [r3, #0]
				startUI();
 8003c9a:	f7ff fbdd 	bl	8003458 <startUI>
				break;
 8003c9e:	e0de      	b.n	8003e5e <beginStartGame+0x37e>
			case ADVANCEMODE:
				statusGame = STARTMODE;
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <beginStartGame+0x278>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
				ID = 0;
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <beginStartGame+0x27c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 8003cac:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <beginStartGame+0x280>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <beginStartGame+0x284>)
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <beginStartGame+0x288>)
 8003cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cbe:	801a      	strh	r2, [r3, #0]
				startUI();
 8003cc0:	f7ff fbca 	bl	8003458 <startUI>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <beginStartGame+0x294>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d177      	bne.n	8003dbc <beginStartGame+0x2dc>
				{
					statusGame = oldStatusGame;
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <beginStartGame+0x28c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <beginStartGame+0x278>)
 8003cd2:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <beginStartGame+0x280>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 8003cda:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <beginStartGame+0x278>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	d04a      	beq.n	8003d78 <beginStartGame+0x298>
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	f300 80ba 	bgt.w	8003e5c <beginStartGame+0x37c>
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d002      	beq.n	8003cf2 <beginStartGame+0x212>
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00e      	beq.n	8003d0e <beginStartGame+0x22e>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8003cf0:	e0b4      	b.n	8003e5c <beginStartGame+0x37c>
						oldStatusGame = NORMALMODE;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <beginStartGame+0x28c>)
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <beginStartGame+0x27c>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <beginStartGame+0x280>)
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe f91e 	bl	8001f44 <setUpLcdNormalPlay>
						snakeInit();
 8003d08:	f7ff f920 	bl	8002f4c <snakeInit>
						break;
 8003d0c:	e069      	b.n	8003de2 <beginStartGame+0x302>
						oldStatusGame = TIMINGMODE;
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <beginStartGame+0x28c>)
 8003d10:	2204      	movs	r2, #4
 8003d12:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <beginStartGame+0x290>)
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <beginStartGame+0x288>)
 8003d1a:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING*1000);
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <beginStartGame+0x288>)
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	0152      	lsls	r2, r2, #5
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fa50 	bl	80031d4 <setTimerTiming>
						setTimerDeTime(1000);
 8003d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d38:	f7ff fa68 	bl	800320c <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <beginStartGame+0x27c>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <beginStartGame+0x288>)
 8003d42:	8812      	ldrh	r2, [r2, #0]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe f9a4 	bl	8002094 <setUpLcdTimingPlay>
						snakeInit();
 8003d4c:	f7ff f8fe 	bl	8002f4c <snakeInit>
						break;
 8003d50:	e047      	b.n	8003de2 <beginStartGame+0x302>
 8003d52:	bf00      	nop
 8003d54:	20000120 	.word	0x20000120
 8003d58:	200001ac 	.word	0x200001ac
 8003d5c:	20000198 	.word	0x20000198
 8003d60:	2000019a 	.word	0x2000019a
 8003d64:	20000014 	.word	0x20000014
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	200001b0 	.word	0x200001b0
 8003d70:	200001bc 	.word	0x200001bc
 8003d74:	200001a0 	.word	0x200001a0
						oldStatusGame = ADVANCEMODE;
 8003d78:	4bad      	ldr	r3, [pc, #692]	; (8004030 <beginStartGame+0x550>)
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8003d7e:	4bad      	ldr	r3, [pc, #692]	; (8004034 <beginStartGame+0x554>)
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	4bad      	ldr	r3, [pc, #692]	; (8004038 <beginStartGame+0x558>)
 8003d84:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING*1000);
 8003d86:	4bac      	ldr	r3, [pc, #688]	; (8004038 <beginStartGame+0x558>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	0152      	lsls	r2, r2, #5
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fa1b 	bl	80031d4 <setTimerTiming>
						setTimerDeTime(1000);
 8003d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da2:	f7ff fa33 	bl	800320c <setTimerDeTime>
						setUpLcdAdvancePlay(ID, TIMING);
 8003da6:	4ba5      	ldr	r3, [pc, #660]	; (800403c <beginStartGame+0x55c>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	4aa3      	ldr	r2, [pc, #652]	; (8004038 <beginStartGame+0x558>)
 8003dac:	8812      	ldrh	r2, [r2, #0]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fa15 	bl	80021e0 <setUpLcdAdvancePlay>
						snakeInit();
 8003db6:	f7ff f8c9 	bl	8002f4c <snakeInit>
						break;
 8003dba:	e012      	b.n	8003de2 <beginStartGame+0x302>
					statusGame = STARTMODE;
 8003dbc:	4ba0      	ldr	r3, [pc, #640]	; (8004040 <beginStartGame+0x560>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
					ID = 0;
 8003dc2:	4b9e      	ldr	r3, [pc, #632]	; (800403c <beginStartGame+0x55c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8003dc8:	4b9e      	ldr	r3, [pc, #632]	; (8004044 <beginStartGame+0x564>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8003dce:	4b9e      	ldr	r3, [pc, #632]	; (8004048 <beginStartGame+0x568>)
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8003dd4:	4b98      	ldr	r3, [pc, #608]	; (8004038 <beginStartGame+0x558>)
 8003dd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dda:	801a      	strh	r2, [r3, #0]
					startUI();
 8003ddc:	f7ff fb3c 	bl	8003458 <startUI>
				break;
 8003de0:	e03c      	b.n	8003e5c <beginStartGame+0x37c>
 8003de2:	e03b      	b.n	8003e5c <beginStartGame+0x37c>
			case STOPMODE:
				if(arrowStopMode == RESUME)
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <beginStartGame+0x56c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d11e      	bne.n	8003e2a <beginStartGame+0x34a>
				{
					statusGame = oldStatusGame;
 8003dec:	4b90      	ldr	r3, [pc, #576]	; (8004030 <beginStartGame+0x550>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a93      	ldr	r2, [pc, #588]	; (8004040 <beginStartGame+0x560>)
 8003df2:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8003df4:	4b92      	ldr	r3, [pc, #584]	; (8004040 <beginStartGame+0x560>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d003      	beq.n	8003e04 <beginStartGame+0x324>
 8003dfc:	4b90      	ldr	r3, [pc, #576]	; (8004040 <beginStartGame+0x560>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d10f      	bne.n	8003e24 <beginStartGame+0x344>
					{
						setTimerTiming(TIMING*1000);
 8003e04:	4b8c      	ldr	r3, [pc, #560]	; (8004038 <beginStartGame+0x558>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	0152      	lsls	r2, r2, #5
 8003e0c:	1ad2      	subs	r2, r2, r3
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f9dc 	bl	80031d4 <setTimerTiming>
						setTimerDeTime(1000);
 8003e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e20:	f7ff f9f4 	bl	800320c <setTimerDeTime>
					}
					resumeGame();
 8003e24:	f7fe fef2 	bl	8002c0c <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8003e28:	e019      	b.n	8003e5e <beginStartGame+0x37e>
					statusGame = STARTMODE;
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <beginStartGame+0x560>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
					ID = 0;
 8003e30:	4b82      	ldr	r3, [pc, #520]	; (800403c <beginStartGame+0x55c>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8003e36:	4b83      	ldr	r3, [pc, #524]	; (8004044 <beginStartGame+0x564>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 8003e3c:	4b82      	ldr	r3, [pc, #520]	; (8004048 <beginStartGame+0x568>)
 8003e3e:	2203      	movs	r2, #3
 8003e40:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8003e42:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <beginStartGame+0x558>)
 8003e44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e48:	801a      	strh	r2, [r3, #0]
					startUI();
 8003e4a:	f7ff fb05 	bl	8003458 <startUI>
				break;
 8003e4e:	e006      	b.n	8003e5e <beginStartGame+0x37e>
			default:
				break;
		}
	}
 8003e50:	bf00      	nop
 8003e52:	e004      	b.n	8003e5e <beginStartGame+0x37e>
				break;
 8003e54:	bf00      	nop
 8003e56:	e002      	b.n	8003e5e <beginStartGame+0x37e>
				break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <beginStartGame+0x37e>
				break;
 8003e5c:	bf00      	nop
	if(statusGame == STARTMODE){
 8003e5e:	4b78      	ldr	r3, [pc, #480]	; (8004040 <beginStartGame+0x560>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 815d 	bne.w	8004122 <beginStartGame+0x642>
		char str1[50] = "";
 8003e68:	2300      	movs	r3, #0
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	222e      	movs	r2, #46	; 0x2e
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 f89b 	bl	8006fb0 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 8003e7a:	4b70      	ldr	r3, [pc, #448]	; (800403c <beginStartGame+0x55c>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003e84:	e149      	b.n	800411a <beginStartGame+0x63a>
		{
			if(button_count[i] == 1)
 8003e86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e88:	4a71      	ldr	r2, [pc, #452]	; (8004050 <beginStartGame+0x570>)
 8003e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 8140 	bne.w	8004114 <beginStartGame+0x634>
			{
				button_count[i] == 0;
				switch (i)
 8003e94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e96:	2b0d      	cmp	r3, #13
 8003e98:	f200 8118 	bhi.w	80040cc <beginStartGame+0x5ec>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <beginStartGame+0x3c4>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003f09 	.word	0x08003f09
 8003eac:	08003f35 	.word	0x08003f35
 8003eb0:	08004113 	.word	0x08004113
 8003eb4:	08003f61 	.word	0x08003f61
 8003eb8:	08003f89 	.word	0x08003f89
 8003ebc:	08003fb1 	.word	0x08003fb1
 8003ec0:	08004113 	.word	0x08004113
 8003ec4:	08003fd9 	.word	0x08003fd9
 8003ec8:	08004005 	.word	0x08004005
 8003ecc:	08004055 	.word	0x08004055
 8003ed0:	08004113 	.word	0x08004113
 8003ed4:	08004081 	.word	0x08004081
 8003ed8:	080040ab 	.word	0x080040ab
				{
					case 0:
						val = val*10 + i+1;
 8003edc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ede:	461a      	mov	r2, r3
 8003ee0:	0092      	lsls	r2, r2, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003eea:	4413      	add	r3, r2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003ef2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd ffe9 	bl	8001ecc <convert2str>
 8003efa:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 f8fd 	bl	8007100 <strcat>
						break;
 8003f06:	e0e1      	b.n	80040cc <beginStartGame+0x5ec>
					case 1:
						val = val*10 + i+1;
 8003f08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	0092      	lsls	r2, r2, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f16:	4413      	add	r3, r2
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003f1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd ffd3 	bl	8001ecc <convert2str>
 8003f26:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 f8e7 	bl	8007100 <strcat>
						break;
 8003f32:	e0cb      	b.n	80040cc <beginStartGame+0x5ec>
					case 2:
						val = val*10 + i+1;
 8003f34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f36:	461a      	mov	r2, r3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f42:	4413      	add	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003f4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fd ffbd 	bl	8001ecc <convert2str>
 8003f52:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 f8d1 	bl	8007100 <strcat>
						break;
 8003f5e:	e0b5      	b.n	80040cc <beginStartGame+0x5ec>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 8003f60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f62:	461a      	mov	r2, r3
 8003f64:	0092      	lsls	r2, r2, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f6e:	4413      	add	r3, r2
 8003f70:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003f72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fd ffa9 	bl	8001ecc <convert2str>
 8003f7a:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 f8bd 	bl	8007100 <strcat>
						break;
 8003f86:	e0a1      	b.n	80040cc <beginStartGame+0x5ec>
					case 5:
						val = val*10 + i;
 8003f88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	0092      	lsls	r2, r2, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f96:	4413      	add	r3, r2
 8003f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003f9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd ff95 	bl	8001ecc <convert2str>
 8003fa2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 f8a9 	bl	8007100 <strcat>
						break;
 8003fae:	e08d      	b.n	80040cc <beginStartGame+0x5ec>
					case 6:
						val = val*10 + i;
 8003fb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fbe:	4413      	add	r3, r2
 8003fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003fc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd ff81 	bl	8001ecc <convert2str>
 8003fca:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f003 f895 	bl	8007100 <strcat>
						break;
 8003fd6:	e079      	b.n	80040cc <beginStartGame+0x5ec>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 8003fd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fda:	461a      	mov	r2, r3
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fe6:	4413      	add	r3, r2
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8003fee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fd ff6b 	bl	8001ecc <convert2str>
 8003ff6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 f87f 	bl	8007100 <strcat>
						break;
 8004002:	e063      	b.n	80040cc <beginStartGame+0x5ec>
					case 9:
						val = val*10 + i-1;
 8004004:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004006:	461a      	mov	r2, r3
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4413      	add	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004012:	4413      	add	r3, r2
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800401a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800401c:	4618      	mov	r0, r3
 800401e:	f7fd ff55 	bl	8001ecc <convert2str>
 8004022:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004028:	4618      	mov	r0, r3
 800402a:	f003 f869 	bl	8007100 <strcat>
						break;
 800402e:	e04d      	b.n	80040cc <beginStartGame+0x5ec>
 8004030:	200001b0 	.word	0x200001b0
 8004034:	200001bc 	.word	0x200001bc
 8004038:	20000000 	.word	0x20000000
 800403c:	20000198 	.word	0x20000198
 8004040:	200001ac 	.word	0x200001ac
 8004044:	2000019a 	.word	0x2000019a
 8004048:	20000014 	.word	0x20000014
 800404c:	2000005c 	.word	0x2000005c
 8004050:	20000120 	.word	0x20000120
					case 10:
						val = val*10 + i-1;
 8004054:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004056:	461a      	mov	r2, r3
 8004058:	0092      	lsls	r2, r2, #2
 800405a:	4413      	add	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004062:	4413      	add	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800406a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd ff2d 	bl	8001ecc <convert2str>
 8004072:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004078:	4618      	mov	r0, r3
 800407a:	f003 f841 	bl	8007100 <strcat>
						break;
 800407e:	e025      	b.n	80040cc <beginStartGame+0x5ec>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8004080:	4b45      	ldr	r3, [pc, #276]	; (8004198 <beginStartGame+0x6b8>)
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 8004088:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800408a:	4a44      	ldr	r2, [pc, #272]	; (800419c <beginStartGame+0x6bc>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8004094:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd ff18 	bl	8001ecc <convert2str>
 800409c:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 f82c 	bl	8007100 <strcat>
						break;
 80040a8:	e010      	b.n	80040cc <beginStartGame+0x5ec>
					case 13:
						val = val*10;
 80040aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80040ac:	461a      	mov	r2, r3
 80040ae:	0092      	lsls	r2, r2, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80040b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd ff07 	bl	8001ecc <convert2str>
 80040be:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c4:	4618      	mov	r0, r3
 80040c6:	f003 f81b 	bl	8007100 <strcat>
						break;
 80040ca:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 80040cc:	2300      	movs	r3, #0
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	23b4      	movs	r3, #180	; 0xb4
 80040d2:	22b4      	movs	r2, #180	; 0xb4
 80040d4:	2196      	movs	r1, #150	; 0x96
 80040d6:	203c      	movs	r0, #60	; 0x3c
 80040d8:	f7fd f97c 	bl	80013d4 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 80040dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	23b4      	movs	r3, #180	; 0xb4
 80040e4:	22b4      	movs	r2, #180	; 0xb4
 80040e6:	2196      	movs	r1, #150	; 0x96
 80040e8:	203c      	movs	r0, #60	; 0x3c
 80040ea:	f7fd fa44 	bl	8001576 <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 80040ee:	1d3a      	adds	r2, r7, #4
 80040f0:	2301      	movs	r3, #1
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	2318      	movs	r3, #24
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004102:	2198      	movs	r1, #152	; 0x98
 8004104:	2000      	movs	r0, #0
 8004106:	f7fd fd7b 	bl	8001c00 <lcd_StrCenter>

				ID = val;
 800410a:	4a25      	ldr	r2, [pc, #148]	; (80041a0 <beginStartGame+0x6c0>)
 800410c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800410e:	8013      	strh	r3, [r2, #0]
 8004110:	e000      	b.n	8004114 <beginStartGame+0x634>
						continue;
 8004112:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 8004114:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004116:	3301      	adds	r3, #1
 8004118:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800411a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800411c:	2b0d      	cmp	r3, #13
 800411e:	f67f aeb2 	bls.w	8003e86 <beginStartGame+0x3a6>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <beginStartGame+0x6c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d101      	bne.n	800412e <beginStartGame+0x64e>
	{
		initTimingMode();
 800412a:	f000 fcfb 	bl	8004b24 <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <beginStartGame+0x6c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b09      	cmp	r3, #9
 8004134:	d101      	bne.n	800413a <beginStartGame+0x65a>
	{
		initAdvanceMode();
 8004136:	f7fc fb93 	bl	8000860 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <beginStartGame+0x6c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d01b      	beq.n	800417a <beginStartGame+0x69a>
	{
		if(statusGame == PICKMODE)
 8004142:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <beginStartGame+0x6c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d101      	bne.n	800414e <beginStartGame+0x66e>
		{
			arrowInPickMode();
 800414a:	f7ff fa69 	bl	8003620 <arrowInPickMode>
		}
		if(button_count[12] == 1)
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <beginStartGame+0x6c8>)
 8004150:	8b1b      	ldrh	r3, [r3, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d111      	bne.n	800417a <beginStartGame+0x69a>
		{
			statusGame = STARTMODE;
 8004156:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <beginStartGame+0x6c4>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
			ID = 0;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <beginStartGame+0x6c0>)
 800415e:	2200      	movs	r2, #0
 8004160:	801a      	strh	r2, [r3, #0]
			SCORE = 0;
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <beginStartGame+0x6cc>)
 8004164:	2200      	movs	r2, #0
 8004166:	801a      	strh	r2, [r3, #0]
			TIMING = NOTIMING;
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <beginStartGame+0x6d0>)
 800416a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800416e:	801a      	strh	r2, [r3, #0]
			startUI();
 8004170:	f7ff f972 	bl	8003458 <startUI>
			arrowMode = NORMALMODE;
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <beginStartGame+0x6d4>)
 8004176:	2203      	movs	r2, #3
 8004178:	601a      	str	r2, [r3, #0]
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <beginStartGame+0x6c4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b04      	cmp	r3, #4
 8004180:	d006      	beq.n	8004190 <beginStartGame+0x6b0>
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <beginStartGame+0x6c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d002      	beq.n	8004190 <beginStartGame+0x6b0>
	{
		setTimerDeTime(0);
 800418a:	2000      	movs	r0, #0
 800418c:	f7ff f83e 	bl	800320c <setTimerDeTime>
	}
}
 8004190:	bf00      	nop
 8004192:	3740      	adds	r7, #64	; 0x40
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	08008674 	.word	0x08008674
 800419c:	cccccccd 	.word	0xcccccccd
 80041a0:	20000198 	.word	0x20000198
 80041a4:	200001ac 	.word	0x200001ac
 80041a8:	20000120 	.word	0x20000120
 80041ac:	2000019a 	.word	0x2000019a
 80041b0:	20000000 	.word	0x20000000
 80041b4:	20000014 	.word	0x20000014

080041b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_MspInit+0x4c>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <HAL_MspInit+0x4c>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	; 0x44
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_MspInit+0x4c>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_MspInit+0x4c>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_MspInit+0x4c>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <HAL_MspInit+0x4c>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800420c:	e7fe      	b.n	800420c <NMI_Handler+0x4>

0800420e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004212:	e7fe      	b.n	8004212 <HardFault_Handler+0x4>

08004214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <MemManage_Handler+0x4>

0800421a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800421e:	e7fe      	b.n	800421e <BusFault_Handler+0x4>

08004220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004224:	e7fe      	b.n	8004224 <UsageFault_Handler+0x4>

08004226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004254:	f000 fd10 	bl	8004c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}

0800425c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004260:	4802      	ldr	r0, [pc, #8]	; (800426c <TIM2_IRQHandler+0x10>)
 8004262:	f002 f9e9 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000120c 	.word	0x2000120c

08004270 <showNotifyStop>:
#include "picture.h"
#include "stop_game.h"
#include "snake.h"

void showNotifyStop()
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af04      	add	r7, sp, #16

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <showNotifyStop+0x78>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	3308      	adds	r3, #8
 800427e:	b298      	uxth	r0, r3
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <showNotifyStop+0x7c>)
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <showNotifyStop+0x7c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4413      	add	r3, r2
 800428a:	0fda      	lsrs	r2, r3, #31
 800428c:	4413      	add	r3, r2
 800428e:	105b      	asrs	r3, r3, #1
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b14      	subs	r3, #20
 8004294:	b299      	uxth	r1, r3
 8004296:	2301      	movs	r3, #1
 8004298:	9302      	str	r3, [sp, #8]
 800429a:	2310      	movs	r3, #16
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	f248 4330 	movw	r3, #33840	; 0x8430
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <showNotifyStop+0x80>)
 80042a8:	f7fd fc46 	bl	8001b38 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <showNotifyStop+0x78>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3308      	adds	r3, #8
 80042b4:	b298      	uxth	r0, r3
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <showNotifyStop+0x7c>)
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <showNotifyStop+0x7c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	0fda      	lsrs	r2, r3, #31
 80042c2:	4413      	add	r3, r2
 80042c4:	105b      	asrs	r3, r3, #1
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	330f      	adds	r3, #15
 80042ca:	b299      	uxth	r1, r3
 80042cc:	2301      	movs	r3, #1
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	2310      	movs	r3, #16
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	f248 4330 	movw	r3, #33840	; 0x8430
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <showNotifyStop+0x84>)
 80042de:	f7fd fc2b 	bl	8001b38 <lcd_ShowStr>
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	2000003c 	.word	0x2000003c
 80042ec:	2000004c 	.word	0x2000004c
 80042f0:	08008678 	.word	0x08008678
 80042f4:	08008680 	.word	0x08008680

080042f8 <drawArrowStop>:


void drawArrowStop()
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 80042fe:	4b87      	ldr	r3, [pc, #540]	; (800451c <drawArrowStop+0x224>)
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	4b86      	ldr	r3, [pc, #536]	; (800451c <drawArrowStop+0x224>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4413      	add	r3, r2
 8004308:	0fda      	lsrs	r2, r3, #31
 800430a:	4413      	add	r3, r2
 800430c:	105b      	asrs	r3, r3, #1
 800430e:	3b08      	subs	r3, #8
 8004310:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8004312:	4b82      	ldr	r3, [pc, #520]	; (800451c <drawArrowStop+0x224>)
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b81      	ldr	r3, [pc, #516]	; (800451c <drawArrowStop+0x224>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4413      	add	r3, r2
 800431c:	0fda      	lsrs	r2, r3, #31
 800431e:	4413      	add	r3, r2
 8004320:	105b      	asrs	r3, r3, #1
 8004322:	331c      	adds	r3, #28
 8004324:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 8004326:	4b7e      	ldr	r3, [pc, #504]	; (8004520 <drawArrowStop+0x228>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d07a      	beq.n	8004424 <drawArrowStop+0x12c>
 800432e:	2b02      	cmp	r3, #2
 8004330:	f040 80f0 	bne.w	8004514 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8004334:	f7fc fcfe 	bl	8000d34 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 8004338:	4b7a      	ldr	r3, [pc, #488]	; (8004524 <drawArrowStop+0x22c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	3308      	adds	r3, #8
 8004340:	b298      	uxth	r0, r3
 8004342:	4b76      	ldr	r3, [pc, #472]	; (800451c <drawArrowStop+0x224>)
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	4b75      	ldr	r3, [pc, #468]	; (800451c <drawArrowStop+0x224>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4413      	add	r3, r2
 800434c:	0fda      	lsrs	r2, r3, #31
 800434e:	4413      	add	r3, r2
 8004350:	105b      	asrs	r3, r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b14      	subs	r3, #20
 8004356:	b299      	uxth	r1, r3
 8004358:	2301      	movs	r3, #1
 800435a:	9302      	str	r3, [sp, #8]
 800435c:	2310      	movs	r3, #16
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	f248 4330 	movw	r3, #33840	; 0x8430
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800436a:	4a6f      	ldr	r2, [pc, #444]	; (8004528 <drawArrowStop+0x230>)
 800436c:	f7fd fbe4 	bl	8001b38 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 8004370:	4b6c      	ldr	r3, [pc, #432]	; (8004524 <drawArrowStop+0x22c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	3308      	adds	r3, #8
 8004378:	b298      	uxth	r0, r3
 800437a:	4b68      	ldr	r3, [pc, #416]	; (800451c <drawArrowStop+0x224>)
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b67      	ldr	r3, [pc, #412]	; (800451c <drawArrowStop+0x224>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4413      	add	r3, r2
 8004384:	0fda      	lsrs	r2, r3, #31
 8004386:	4413      	add	r3, r2
 8004388:	105b      	asrs	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	330f      	adds	r3, #15
 800438e:	b299      	uxth	r1, r3
 8004390:	2301      	movs	r3, #1
 8004392:	9302      	str	r3, [sp, #8]
 8004394:	2310      	movs	r3, #16
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	f248 4330 	movw	r3, #33840	; 0x8430
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	4a62      	ldr	r2, [pc, #392]	; (800452c <drawArrowStop+0x234>)
 80043a2:	f7fd fbc9 	bl	8001b38 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 80043a6:	4b5f      	ldr	r3, [pc, #380]	; (8004524 <drawArrowStop+0x22c>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b0f      	subs	r3, #15
 80043ae:	b298      	uxth	r0, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	b299      	uxth	r1, r3
 80043b4:	4b5b      	ldr	r3, [pc, #364]	; (8004524 <drawArrowStop+0x22c>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b0a      	subs	r3, #10
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b05      	subs	r3, #5
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2400      	movs	r4, #0
 80043c8:	9400      	str	r4, [sp, #0]
 80043ca:	f7fd f850 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80043ce:	4b55      	ldr	r3, [pc, #340]	; (8004524 <drawArrowStop+0x22c>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b0f      	subs	r3, #15
 80043d6:	b298      	uxth	r0, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	b299      	uxth	r1, r3
 80043dc:	4b51      	ldr	r3, [pc, #324]	; (8004524 <drawArrowStop+0x22c>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b0a      	subs	r3, #10
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3305      	adds	r3, #5
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2400      	movs	r4, #0
 80043f0:	9400      	str	r4, [sp, #0]
 80043f2:	f7fd f83c 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 80043f6:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <drawArrowStop+0x22c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b0a      	subs	r3, #10
 80043fe:	b298      	uxth	r0, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b05      	subs	r3, #5
 8004406:	b299      	uxth	r1, r3
 8004408:	4b46      	ldr	r3, [pc, #280]	; (8004524 <drawArrowStop+0x22c>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b0a      	subs	r3, #10
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	b29b      	uxth	r3, r3
 8004416:	3305      	adds	r3, #5
 8004418:	b29b      	uxth	r3, r3
 800441a:	2400      	movs	r4, #0
 800441c:	9400      	str	r4, [sp, #0]
 800441e:	f7fd f826 	bl	800146e <lcd_DrawLine>
		break;
 8004422:	e077      	b.n	8004514 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 8004424:	f7fc fc86 	bl	8000d34 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8004428:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <drawArrowStop+0x22c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	3308      	adds	r3, #8
 8004430:	b298      	uxth	r0, r3
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <drawArrowStop+0x224>)
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <drawArrowStop+0x224>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4413      	add	r3, r2
 800443c:	0fda      	lsrs	r2, r3, #31
 800443e:	4413      	add	r3, r2
 8004440:	105b      	asrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b14      	subs	r3, #20
 8004446:	b299      	uxth	r1, r3
 8004448:	2301      	movs	r3, #1
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	2310      	movs	r3, #16
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	f248 4330 	movw	r3, #33840	; 0x8430
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <drawArrowStop+0x230>)
 800445a:	f7fd fb6d 	bl	8001b38 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 800445e:	4b31      	ldr	r3, [pc, #196]	; (8004524 <drawArrowStop+0x22c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	3308      	adds	r3, #8
 8004466:	b298      	uxth	r0, r3
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <drawArrowStop+0x224>)
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <drawArrowStop+0x224>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4413      	add	r3, r2
 8004472:	0fda      	lsrs	r2, r3, #31
 8004474:	4413      	add	r3, r2
 8004476:	105b      	asrs	r3, r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	330f      	adds	r3, #15
 800447c:	b299      	uxth	r1, r3
 800447e:	2301      	movs	r3, #1
 8004480:	9302      	str	r3, [sp, #8]
 8004482:	2310      	movs	r3, #16
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f248 4330 	movw	r3, #33840	; 0x8430
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004490:	4a26      	ldr	r2, [pc, #152]	; (800452c <drawArrowStop+0x234>)
 8004492:	f7fd fb51 	bl	8001b38 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <drawArrowStop+0x22c>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b0f      	subs	r3, #15
 800449e:	b298      	uxth	r0, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b299      	uxth	r1, r3
 80044a4:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <drawArrowStop+0x22c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b0a      	subs	r3, #10
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b05      	subs	r3, #5
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2400      	movs	r4, #0
 80044b8:	9400      	str	r4, [sp, #0]
 80044ba:	f7fc ffd8 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <drawArrowStop+0x22c>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b0f      	subs	r3, #15
 80044c6:	b298      	uxth	r0, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b299      	uxth	r1, r3
 80044cc:	4b15      	ldr	r3, [pc, #84]	; (8004524 <drawArrowStop+0x22c>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b0a      	subs	r3, #10
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3305      	adds	r3, #5
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2400      	movs	r4, #0
 80044e0:	9400      	str	r4, [sp, #0]
 80044e2:	f7fc ffc4 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <drawArrowStop+0x22c>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b0a      	subs	r3, #10
 80044ee:	b298      	uxth	r0, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b05      	subs	r3, #5
 80044f6:	b299      	uxth	r1, r3
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <drawArrowStop+0x22c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b0a      	subs	r3, #10
 8004500:	b29a      	uxth	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	3305      	adds	r3, #5
 8004508:	b29b      	uxth	r3, r3
 800450a:	2400      	movs	r4, #0
 800450c:	9400      	str	r4, [sp, #0]
 800450e:	f7fc ffae 	bl	800146e <lcd_DrawLine>
		break;
 8004512:	bf00      	nop
	}
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bd90      	pop	{r4, r7, pc}
 800451c:	2000004c 	.word	0x2000004c
 8004520:	2000005c 	.word	0x2000005c
 8004524:	2000003c 	.word	0x2000003c
 8004528:	08008678 	.word	0x08008678
 800452c:	08008680 	.word	0x08008680

08004530 <gameStopUI>:

void gameStopUI()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	showWallnotify();
 8004534:	f7fc fb2c 	bl	8000b90 <showWallnotify>
	showNotifyStop();
 8004538:	f7ff fe9a 	bl	8004270 <showNotifyStop>
	drawArrowStop();
 800453c:	f7ff fedc 	bl	80042f8 <drawArrowStop>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}

08004544 <pickStop>:

void pickStop()
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <pickStop+0x78>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b06      	cmp	r3, #6
 800454e:	d133      	bne.n	80045b8 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <pickStop+0x7c>)
 8004552:	88db      	ldrh	r3, [r3, #6]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d10f      	bne.n	8004578 <pickStop+0x34>
		{
			flagStop = 1;
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <pickStop+0x80>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <pickStop+0x84>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d002      	beq.n	800456c <pickStop+0x28>
 8004566:	2b02      	cmp	r3, #2
 8004568:	d107      	bne.n	800457a <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 800456a:	e025      	b.n	80045b8 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 800456c:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <pickStop+0x84>)
 800456e:	2202      	movs	r2, #2
 8004570:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8004572:	f7ff ffdd 	bl	8004530 <gameStopUI>
				break;
 8004576:	e000      	b.n	800457a <pickStop+0x36>
			}
		}
 8004578:	bf00      	nop
		if(button_count[7] == 1)
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <pickStop+0x7c>)
 800457c:	89db      	ldrh	r3, [r3, #14]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10e      	bne.n	80045a0 <pickStop+0x5c>
		{
			flagStop = 1;
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <pickStop+0x80>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <pickStop+0x84>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d012      	beq.n	80045b6 <pickStop+0x72>
 8004590:	2b02      	cmp	r3, #2
 8004592:	d106      	bne.n	80045a2 <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <pickStop+0x84>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]
				gameStopUI();
 800459a:	f7ff ffc9 	bl	8004530 <gameStopUI>
				break;
 800459e:	e000      	b.n	80045a2 <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 80045a0:	bf00      	nop
		if(flagStop == 1)
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <pickStop+0x80>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d106      	bne.n	80045b8 <pickStop+0x74>
		{
			gameStopUI();
 80045aa:	f7ff ffc1 	bl	8004530 <gameStopUI>
			flagStop = 0;
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <pickStop+0x80>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e000      	b.n	80045b8 <pickStop+0x74>
				return;
 80045b6:	bf00      	nop
		}
	}
}
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	200001ac 	.word	0x200001ac
 80045c0:	20000120 	.word	0x20000120
 80045c4:	200001b8 	.word	0x200001b8
 80045c8:	2000005c 	.word	0x2000005c

080045cc <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10d      	bne.n	80045f8 <initStopGame+0x2c>
	{
		statusGame = STOPMODE;
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <initStopGame+0x38>)
 80045de:	2206      	movs	r2, #6
 80045e0:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <initStopGame+0x3c>)
 80045e4:	2202      	movs	r2, #2
 80045e6:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7fe fdf3 	bl	80031d4 <setTimerTiming>
		flagStop = 1;
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <initStopGame+0x40>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
		pickStop();
 80045f4:	f7ff ffa6 	bl	8004544 <pickStop>
	}
	return 0;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200001ac 	.word	0x200001ac
 8004608:	2000005c 	.word	0x2000005c
 800460c:	200001b8 	.word	0x200001b8

08004610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
	return 1;
 8004614:	2301      	movs	r3, #1
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_kill>:

int _kill(int pid, int sig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800462a:	f002 fc97 	bl	8006f5c <__errno>
 800462e:	4603      	mov	r3, r0
 8004630:	2216      	movs	r2, #22
 8004632:	601a      	str	r2, [r3, #0]
	return -1;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_exit>:

void _exit (int status)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ffe7 	bl	8004620 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004652:	e7fe      	b.n	8004652 <_exit+0x12>

08004654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e00a      	b.n	800467c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004666:	f3af 8000 	nop.w
 800466a:	4601      	mov	r1, r0
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	60ba      	str	r2, [r7, #8]
 8004672:	b2ca      	uxtb	r2, r1
 8004674:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3301      	adds	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	dbf0      	blt.n	8004666 <_read+0x12>
	}

return len;
 8004684:	687b      	ldr	r3, [r7, #4]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e009      	b.n	80046b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	60ba      	str	r2, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dbf1      	blt.n	80046a0 <_write+0x12>
	}
	return len;
 80046bc:	687b      	ldr	r3, [r7, #4]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_close>:

int _close(int file)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
	return -1;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ee:	605a      	str	r2, [r3, #4]
	return 0;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <_isatty>:

int _isatty(int file)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
	return 1;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
	return 0;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004738:	4a14      	ldr	r2, [pc, #80]	; (800478c <_sbrk+0x5c>)
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <_sbrk+0x60>)
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004744:	4b13      	ldr	r3, [pc, #76]	; (8004794 <_sbrk+0x64>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <_sbrk+0x64>)
 800474e:	4a12      	ldr	r2, [pc, #72]	; (8004798 <_sbrk+0x68>)
 8004750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <_sbrk+0x64>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	429a      	cmp	r2, r3
 800475e:	d207      	bcs.n	8004770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004760:	f002 fbfc 	bl	8006f5c <__errno>
 8004764:	4603      	mov	r3, r0
 8004766:	220c      	movs	r2, #12
 8004768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	e009      	b.n	8004784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004770:	4b08      	ldr	r3, [pc, #32]	; (8004794 <_sbrk+0x64>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <_sbrk+0x64>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <_sbrk+0x64>)
 8004780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004782:	68fb      	ldr	r3, [r7, #12]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20020000 	.word	0x20020000
 8004790:	00000400 	.word	0x00000400
 8004794:	20001208 	.word	0x20001208
 8004798:	20001268 	.word	0x20001268

0800479c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <SystemInit+0x20>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	4a05      	ldr	r2, [pc, #20]	; (80047bc <SystemInit+0x20>)
 80047a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047d4:	463b      	mov	r3, r7
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <MX_TIM2_Init+0x94>)
 80047de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <MX_TIM2_Init+0x94>)
 80047e6:	f240 3247 	movw	r2, #839	; 0x347
 80047ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <MX_TIM2_Init+0x94>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <MX_TIM2_Init+0x94>)
 80047f4:	2263      	movs	r2, #99	; 0x63
 80047f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047f8:	4b16      	ldr	r3, [pc, #88]	; (8004854 <MX_TIM2_Init+0x94>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <MX_TIM2_Init+0x94>)
 8004800:	2200      	movs	r2, #0
 8004802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004804:	4813      	ldr	r0, [pc, #76]	; (8004854 <MX_TIM2_Init+0x94>)
 8004806:	f001 fe57 	bl	80064b8 <HAL_TIM_Base_Init>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004810:	f7fd fb56 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	4619      	mov	r1, r3
 8004820:	480c      	ldr	r0, [pc, #48]	; (8004854 <MX_TIM2_Init+0x94>)
 8004822:	f002 f811 	bl	8006848 <HAL_TIM_ConfigClockSource>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800482c:	f7fd fb48 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004830:	2300      	movs	r3, #0
 8004832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004834:	2300      	movs	r3, #0
 8004836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004838:	463b      	mov	r3, r7
 800483a:	4619      	mov	r1, r3
 800483c:	4805      	ldr	r0, [pc, #20]	; (8004854 <MX_TIM2_Init+0x94>)
 800483e:	f002 fa2d 	bl	8006c9c <HAL_TIMEx_MasterConfigSynchronization>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004848:	f7fd fb3a 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	2000120c 	.word	0x2000120c

08004858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d115      	bne.n	8004896 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_TIM_Base_MspInit+0x48>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <HAL_TIM_Base_MspInit+0x48>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <HAL_TIM_Base_MspInit+0x48>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	201c      	movs	r0, #28
 800488c:	f000 fb13 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004890:	201c      	movs	r0, #28
 8004892:	f000 fb2c 	bl	8004eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800

080048a4 <setupTiming>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupTiming()
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b095      	sub	sp, #84	; 0x54
 80048a8:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7fc fd60 	bl	8001370 <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80048b0:	4b6b      	ldr	r3, [pc, #428]	; (8004a60 <setupTiming+0x1bc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b298      	uxth	r0, r3
 80048b6:	4b6b      	ldr	r3, [pc, #428]	; (8004a64 <setupTiming+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b299      	uxth	r1, r3
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <setupTiming+0x1c4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <setupTiming+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	4c69      	ldr	r4, [pc, #420]	; (8004a70 <setupTiming+0x1cc>)
 80048ca:	9400      	str	r4, [sp, #0]
 80048cc:	f7fc ff5a 	bl	8001784 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80048d0:	2300      	movs	r3, #0
 80048d2:	9302      	str	r3, [sp, #8]
 80048d4:	2318      	movs	r3, #24
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	f248 4330 	movw	r3, #33840	; 0x8430
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e2:	4a64      	ldr	r2, [pc, #400]	; (8004a74 <setupTiming+0x1d0>)
 80048e4:	2137      	movs	r1, #55	; 0x37
 80048e6:	203c      	movs	r0, #60	; 0x3c
 80048e8:	f7fd f926 	bl	8001b38 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80048ec:	4a62      	ldr	r2, [pc, #392]	; (8004a78 <setupTiming+0x1d4>)
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048f4:	6018      	str	r0, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	8019      	strh	r1, [r3, #0]
 80048fa:	f107 030a 	add.w	r3, r7, #10
 80048fe:	222c      	movs	r2, #44	; 0x2c
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f002 fb54 	bl	8006fb0 <memset>
	char *str2 = convert2str(ID);
 8004908:	4b5c      	ldr	r3, [pc, #368]	; (8004a7c <setupTiming+0x1d8>)
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fd fadd 	bl	8001ecc <convert2str>
 8004912:	4603      	mov	r3, r0
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800491a:	4618      	mov	r0, r3
 800491c:	f002 fbf0 	bl	8007100 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8004920:	1d3a      	adds	r2, r7, #4
 8004922:	2300      	movs	r3, #0
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	2318      	movs	r3, #24
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f248 4330 	movw	r3, #33840	; 0x8430
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004934:	2164      	movs	r1, #100	; 0x64
 8004936:	2000      	movs	r0, #0
 8004938:	f7fd f962 	bl	8001c00 <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 800493c:	2300      	movs	r3, #0
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	2318      	movs	r3, #24
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	f248 4330 	movw	r3, #33840	; 0x8430
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800494e:	4a4c      	ldr	r2, [pc, #304]	; (8004a80 <setupTiming+0x1dc>)
 8004950:	2196      	movs	r1, #150	; 0x96
 8004952:	2000      	movs	r0, #0
 8004954:	f7fd f954 	bl	8001c00 <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 8004958:	2300      	movs	r3, #0
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	2318      	movs	r3, #24
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	f248 4330 	movw	r3, #33840	; 0x8430
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800496a:	4a46      	ldr	r2, [pc, #280]	; (8004a84 <setupTiming+0x1e0>)
 800496c:	21d2      	movs	r1, #210	; 0xd2
 800496e:	2014      	movs	r0, #20
 8004970:	f7fd f8e2 	bl	8001b38 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 8004974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	23f0      	movs	r3, #240	; 0xf0
 800497c:	22c8      	movs	r2, #200	; 0xc8
 800497e:	21d2      	movs	r1, #210	; 0xd2
 8004980:	2096      	movs	r0, #150	; 0x96
 8004982:	f7fc fdf8 	bl	8001576 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 8004986:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <setupTiming+0x1e4>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd fa9e 	bl	8001ecc <convert2str>
 8004990:	4603      	mov	r3, r0
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 8004994:	4b3c      	ldr	r3, [pc, #240]	; (8004a88 <setupTiming+0x1e4>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	2b77      	cmp	r3, #119	; 0x77
 800499a:	d80e      	bhi.n	80049ba <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 800499c:	2301      	movs	r3, #1
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	2318      	movs	r3, #24
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	f248 4330 	movw	r3, #33840	; 0x8430
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b0:	21d4      	movs	r1, #212	; 0xd4
 80049b2:	20a5      	movs	r0, #165	; 0xa5
 80049b4:	f7fd f8c0 	bl	8001b38 <lcd_ShowStr>
 80049b8:	e00d      	b.n	80049d6 <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 80049ba:	2301      	movs	r3, #1
 80049bc:	9302      	str	r3, [sp, #8]
 80049be:	2318      	movs	r3, #24
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	f248 4330 	movw	r3, #33840	; 0x8430
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ce:	21d4      	movs	r1, #212	; 0xd4
 80049d0:	209d      	movs	r0, #157	; 0x9d
 80049d2:	f7fd f8b1 	bl	8001b38 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80049d6:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <setupTiming+0x1e4>)
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	2b77      	cmp	r3, #119	; 0x77
 80049dc:	d81a      	bhi.n	8004a14 <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 80049de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	23c8      	movs	r3, #200	; 0xc8
 80049e6:	22b9      	movs	r2, #185	; 0xb9
 80049e8:	21c8      	movs	r1, #200	; 0xc8
 80049ea:	20a5      	movs	r0, #165	; 0xa5
 80049ec:	f7fc fd3f 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 80049f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	23c8      	movs	r3, #200	; 0xc8
 80049f8:	22a5      	movs	r2, #165	; 0xa5
 80049fa:	21b4      	movs	r1, #180	; 0xb4
 80049fc:	20af      	movs	r0, #175	; 0xaf
 80049fe:	f7fc fd36 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 8004a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	23b4      	movs	r3, #180	; 0xb4
 8004a0a:	22af      	movs	r2, #175	; 0xaf
 8004a0c:	21c8      	movs	r1, #200	; 0xc8
 8004a0e:	20b9      	movs	r0, #185	; 0xb9
 8004a10:	f7fc fd2d 	bl	800146e <lcd_DrawLine>
	}
	if(TIMING > 30)
 8004a14:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <setupTiming+0x1e4>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b1e      	cmp	r3, #30
 8004a1a:	d91c      	bls.n	8004a56 <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 8004a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	23fa      	movs	r3, #250	; 0xfa
 8004a24:	22b9      	movs	r2, #185	; 0xb9
 8004a26:	21fa      	movs	r1, #250	; 0xfa
 8004a28:	20a5      	movs	r0, #165	; 0xa5
 8004a2a:	f7fc fd20 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 8004a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004a38:	22af      	movs	r2, #175	; 0xaf
 8004a3a:	21fa      	movs	r1, #250	; 0xfa
 8004a3c:	20a5      	movs	r0, #165	; 0xa5
 8004a3e:	f7fc fd16 	bl	800146e <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 8004a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004a4c:	22af      	movs	r2, #175	; 0xaf
 8004a4e:	21fa      	movs	r1, #250	; 0xfa
 8004a50:	20b9      	movs	r0, #185	; 0xb9
 8004a52:	f7fc fd0c 	bl	800146e <lcd_DrawLine>
	}
}
 8004a56:	bf00      	nop
 8004a58:	3744      	adds	r7, #68	; 0x44
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd90      	pop	{r4, r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000078 	.word	0x20000078
 8004a64:	2000007c 	.word	0x2000007c
 8004a68:	20000080 	.word	0x20000080
 8004a6c:	20000084 	.word	0x20000084
 8004a70:	0800b698 	.word	0x0800b698
 8004a74:	08008688 	.word	0x08008688
 8004a78:	080086b0 	.word	0x080086b0
 8004a7c:	20000198 	.word	0x20000198
 8004a80:	08008698 	.word	0x08008698
 8004a84:	080086a8 	.word	0x080086a8
 8004a88:	20000000 	.word	0x20000000

08004a8c <showTiming>:

void showTiming()
{
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b093      	sub	sp, #76	; 0x4c
 8004a90:	af04      	add	r7, sp, #16
	char str5[50] = "TIMING: ";
 8004a92:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <showTiming+0x88>)
 8004a94:	463b      	mov	r3, r7
 8004a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a98:	c303      	stmia	r3!, {r0, r1}
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	f107 0309 	add.w	r3, r7, #9
 8004aa0:	2229      	movs	r2, #41	; 0x29
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f002 fa83 	bl	8006fb0 <memset>
	char *str6 = convert2str(TIMING);
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <showTiming+0x8c>)
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd fa0c 	bl	8001ecc <convert2str>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
	strcat(str5, str6);
 8004ab8:	463b      	mov	r3, r7
 8004aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 fb1f 	bl	8007100 <strcat>
	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <showTiming+0x90>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	b298      	uxth	r0, r3
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <showTiming+0x94>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b299      	uxth	r1, r3
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <showTiming+0x90>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	335a      	adds	r3, #90	; 0x5a
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <showTiming+0x94>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	330f      	adds	r3, #15
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	241f      	movs	r4, #31
 8004ae4:	9400      	str	r4, [sp, #0]
 8004ae6:	f7fc fc75 	bl	80013d4 <lcd_Fill>
	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <showTiming+0x90>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b298      	uxth	r0, r3
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <showTiming+0x94>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	b299      	uxth	r1, r3
 8004af6:	463a      	mov	r2, r7
 8004af8:	2300      	movs	r3, #0
 8004afa:	9302      	str	r3, [sp, #8]
 8004afc:	2310      	movs	r3, #16
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	231f      	movs	r3, #31
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004b08:	f7fd f816 	bl	8001b38 <lcd_ShowStr>
}
 8004b0c:	bf00      	nop
 8004b0e:	373c      	adds	r7, #60	; 0x3c
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	080086e4 	.word	0x080086e4
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000068 	.word	0x20000068
 8004b20:	2000006c 	.word	0x2000006c

08004b24 <initTimingMode>:

void initTimingMode()
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <initTimingMode+0x54>)
 8004b2a:	88db      	ldrh	r3, [r3, #6]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10e      	bne.n	8004b4e <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <initTimingMode+0x58>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	331e      	adds	r3, #30
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <initTimingMode+0x58>)
 8004b3a:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <initTimingMode+0x58>)
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	2b78      	cmp	r3, #120	; 0x78
 8004b42:	d902      	bls.n	8004b4a <initTimingMode+0x26>
		{
			TIMING = 120;
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <initTimingMode+0x58>)
 8004b46:	2278      	movs	r2, #120	; 0x78
 8004b48:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8004b4a:	f7ff feab 	bl	80048a4 <setupTiming>
	}
	if(button_count[7] == 1)
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <initTimingMode+0x54>)
 8004b50:	89db      	ldrh	r3, [r3, #14]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10e      	bne.n	8004b74 <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <initTimingMode+0x58>)
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	3b1e      	subs	r3, #30
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <initTimingMode+0x58>)
 8004b60:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <initTimingMode+0x58>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	2b1d      	cmp	r3, #29
 8004b68:	d802      	bhi.n	8004b70 <initTimingMode+0x4c>
		{
			TIMING = 30;
 8004b6a:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <initTimingMode+0x58>)
 8004b6c:	221e      	movs	r2, #30
 8004b6e:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8004b70:	f7ff fe98 	bl	80048a4 <setupTiming>
	}
}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000120 	.word	0x20000120
 8004b7c:	20000000 	.word	0x20000000

08004b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b86:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b8c:	e002      	b.n	8004b94 <LoopCopyDataInit>

08004b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b92:	3304      	adds	r3, #4

08004b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b98:	d3f9      	bcc.n	8004b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9a:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	; (8004bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba0:	e001      	b.n	8004ba6 <LoopFillZerobss>

08004ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba4:	3204      	adds	r2, #4

08004ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ba8:	d3fb      	bcc.n	8004ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004baa:	f7ff fdf7 	bl	800479c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bae:	f002 f9db 	bl	8006f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bb2:	f7fd f863 	bl	8001c7c <main>
  bx  lr    
 8004bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8004bc4:	0800c430 	.word	0x0800c430
  ldr r2, =_sbss
 8004bc8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8004bcc:	20001268 	.word	0x20001268

08004bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bd0:	e7fe      	b.n	8004bd0 <ADC_IRQHandler>
	...

08004bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_Init+0x40>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <HAL_Init+0x40>)
 8004bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_Init+0x40>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_Init+0x40>)
 8004bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_Init+0x40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_Init+0x40>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	f000 f94f 	bl	8004ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c02:	200f      	movs	r0, #15
 8004c04:	f000 f808 	bl	8004c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c08:	f7ff fad6 	bl	80041b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023c00 	.word	0x40023c00

08004c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_InitTick+0x54>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_InitTick+0x58>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f967 	bl	8004f0a <HAL_SYSTICK_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00e      	b.n	8004c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d80a      	bhi.n	8004c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	f000 f92f 	bl	8004eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c58:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <HAL_InitTick+0x5c>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000094 	.word	0x20000094
 8004c70:	2000009c 	.word	0x2000009c
 8004c74:	20000098 	.word	0x20000098

08004c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_IncTick+0x20>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_IncTick+0x24>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <HAL_IncTick+0x24>)
 8004c8a:	6013      	str	r3, [r2, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000009c 	.word	0x2000009c
 8004c9c:	20001254 	.word	0x20001254

08004ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <HAL_GetTick+0x14>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20001254 	.word	0x20001254

08004cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff ffee 	bl	8004ca0 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d005      	beq.n	8004cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_Delay+0x44>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cde:	bf00      	nop
 8004ce0:	f7ff ffde 	bl	8004ca0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d8f7      	bhi.n	8004ce0 <HAL_Delay+0x28>
  {
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2000009c 	.word	0x2000009c

08004d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <__NVIC_SetPriorityGrouping+0x44>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d32:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <__NVIC_SetPriorityGrouping+0x44>)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	60d3      	str	r3, [r2, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <__NVIC_GetPriorityGrouping+0x18>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0a1b      	lsrs	r3, r3, #8
 8004d52:	f003 0307 	and.w	r3, r3, #7
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	db0b      	blt.n	8004d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	f003 021f 	and.w	r2, r3, #31
 8004d7c:	4907      	ldr	r1, [pc, #28]	; (8004d9c <__NVIC_EnableIRQ+0x38>)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2001      	movs	r0, #1
 8004d86:	fa00 f202 	lsl.w	r2, r0, r2
 8004d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000e100 	.word	0xe000e100

08004da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	6039      	str	r1, [r7, #0]
 8004daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db0a      	blt.n	8004dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	490c      	ldr	r1, [pc, #48]	; (8004dec <__NVIC_SetPriority+0x4c>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc8:	e00a      	b.n	8004de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4908      	ldr	r1, [pc, #32]	; (8004df0 <__NVIC_SetPriority+0x50>)
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	440b      	add	r3, r1
 8004dde:	761a      	strb	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000e100 	.word	0xe000e100
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f1c3 0307 	rsb	r3, r3, #7
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	bf28      	it	cs
 8004e12:	2304      	movcs	r3, #4
 8004e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d902      	bls.n	8004e24 <NVIC_EncodePriority+0x30>
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3b03      	subs	r3, #3
 8004e22:	e000      	b.n	8004e26 <NVIC_EncodePriority+0x32>
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e28:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	401a      	ands	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	43d9      	mvns	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e4c:	4313      	orrs	r3, r2
         );
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6c:	d301      	bcc.n	8004e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00f      	b.n	8004e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <SysTick_Config+0x40>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e7a:	210f      	movs	r1, #15
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	f7ff ff8e 	bl	8004da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <SysTick_Config+0x40>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8a:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <SysTick_Config+0x40>)
 8004e8c:	2207      	movs	r2, #7
 8004e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	e000e010 	.word	0xe000e010

08004ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff29 	bl	8004d00 <__NVIC_SetPriorityGrouping>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec8:	f7ff ff3e 	bl	8004d48 <__NVIC_GetPriorityGrouping>
 8004ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f7ff ff8e 	bl	8004df4 <NVIC_EncodePriority>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ff5d 	bl	8004da0 <__NVIC_SetPriority>
}
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff31 	bl	8004d64 <__NVIC_EnableIRQ>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ffa2 	bl	8004e5c <SysTick_Config>
 8004f18:	4603      	mov	r3, r0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e16b      	b.n	8005218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f40:	2201      	movs	r2, #1
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	f040 815a 	bne.w	8005212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d005      	beq.n	8004f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d130      	bne.n	8004fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	2203      	movs	r2, #3
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fac:	2201      	movs	r2, #1
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 0201 	and.w	r2, r3, #1
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d017      	beq.n	8005014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	2203      	movs	r2, #3
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d123      	bne.n	8005068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	08da      	lsrs	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3208      	adds	r2, #8
 8005028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	220f      	movs	r2, #15
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	08da      	lsrs	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3208      	adds	r2, #8
 8005062:	69b9      	ldr	r1, [r7, #24]
 8005064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	2203      	movs	r2, #3
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0203 	and.w	r2, r3, #3
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80b4 	beq.w	8005212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b60      	ldr	r3, [pc, #384]	; (8005230 <HAL_GPIO_Init+0x30c>)
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	4a5f      	ldr	r2, [pc, #380]	; (8005230 <HAL_GPIO_Init+0x30c>)
 80050b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ba:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <HAL_GPIO_Init+0x30c>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c6:	4a5b      	ldr	r2, [pc, #364]	; (8005234 <HAL_GPIO_Init+0x310>)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	3302      	adds	r3, #2
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	220f      	movs	r2, #15
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a52      	ldr	r2, [pc, #328]	; (8005238 <HAL_GPIO_Init+0x314>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02b      	beq.n	800514a <HAL_GPIO_Init+0x226>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a51      	ldr	r2, [pc, #324]	; (800523c <HAL_GPIO_Init+0x318>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d025      	beq.n	8005146 <HAL_GPIO_Init+0x222>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a50      	ldr	r2, [pc, #320]	; (8005240 <HAL_GPIO_Init+0x31c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01f      	beq.n	8005142 <HAL_GPIO_Init+0x21e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a4f      	ldr	r2, [pc, #316]	; (8005244 <HAL_GPIO_Init+0x320>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d019      	beq.n	800513e <HAL_GPIO_Init+0x21a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a4e      	ldr	r2, [pc, #312]	; (8005248 <HAL_GPIO_Init+0x324>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_GPIO_Init+0x216>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a4d      	ldr	r2, [pc, #308]	; (800524c <HAL_GPIO_Init+0x328>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00d      	beq.n	8005136 <HAL_GPIO_Init+0x212>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a4c      	ldr	r2, [pc, #304]	; (8005250 <HAL_GPIO_Init+0x32c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <HAL_GPIO_Init+0x20e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a4b      	ldr	r2, [pc, #300]	; (8005254 <HAL_GPIO_Init+0x330>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_GPIO_Init+0x20a>
 800512a:	2307      	movs	r3, #7
 800512c:	e00e      	b.n	800514c <HAL_GPIO_Init+0x228>
 800512e:	2308      	movs	r3, #8
 8005130:	e00c      	b.n	800514c <HAL_GPIO_Init+0x228>
 8005132:	2306      	movs	r3, #6
 8005134:	e00a      	b.n	800514c <HAL_GPIO_Init+0x228>
 8005136:	2305      	movs	r3, #5
 8005138:	e008      	b.n	800514c <HAL_GPIO_Init+0x228>
 800513a:	2304      	movs	r3, #4
 800513c:	e006      	b.n	800514c <HAL_GPIO_Init+0x228>
 800513e:	2303      	movs	r3, #3
 8005140:	e004      	b.n	800514c <HAL_GPIO_Init+0x228>
 8005142:	2302      	movs	r3, #2
 8005144:	e002      	b.n	800514c <HAL_GPIO_Init+0x228>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_GPIO_Init+0x228>
 800514a:	2300      	movs	r3, #0
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	f002 0203 	and.w	r2, r2, #3
 8005152:	0092      	lsls	r2, r2, #2
 8005154:	4093      	lsls	r3, r2
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800515c:	4935      	ldr	r1, [pc, #212]	; (8005234 <HAL_GPIO_Init+0x310>)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	3302      	adds	r3, #2
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_GPIO_Init+0x334>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800518e:	4a32      	ldr	r2, [pc, #200]	; (8005258 <HAL_GPIO_Init+0x334>)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005194:	4b30      	ldr	r3, [pc, #192]	; (8005258 <HAL_GPIO_Init+0x334>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <HAL_GPIO_Init+0x334>)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_GPIO_Init+0x334>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <HAL_GPIO_Init+0x334>)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <HAL_GPIO_Init+0x334>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800520c:	4a12      	ldr	r2, [pc, #72]	; (8005258 <HAL_GPIO_Init+0x334>)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b0f      	cmp	r3, #15
 800521c:	f67f ae90 	bls.w	8004f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	3724      	adds	r7, #36	; 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	40013800 	.word	0x40013800
 8005238:	40020000 	.word	0x40020000
 800523c:	40020400 	.word	0x40020400
 8005240:	40020800 	.word	0x40020800
 8005244:	40020c00 	.word	0x40020c00
 8005248:	40021000 	.word	0x40021000
 800524c:	40021400 	.word	0x40021400
 8005250:	40021800 	.word	0x40021800
 8005254:	40021c00 	.word	0x40021c00
 8005258:	40013c00 	.word	0x40013c00

0800525c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	807b      	strh	r3, [r7, #2]
 8005268:	4613      	mov	r3, r2
 800526a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800526c:	787b      	ldrb	r3, [r7, #1]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005278:	e003      	b.n	8005282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	041a      	lsls	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	619a      	str	r2, [r3, #24]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e267      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d075      	beq.n	800539a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ae:	4b88      	ldr	r3, [pc, #544]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d00c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4b85      	ldr	r3, [pc, #532]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d112      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c6:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	4b7e      	ldr	r3, [pc, #504]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05b      	beq.n	8005398 <HAL_RCC_OscConfig+0x108>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d157      	bne.n	8005398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e242      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d106      	bne.n	8005304 <HAL_RCC_OscConfig+0x74>
 80052f6:	4b76      	ldr	r3, [pc, #472]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a75      	ldr	r2, [pc, #468]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01d      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x98>
 800530e:	4b70      	ldr	r3, [pc, #448]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6f      	ldr	r2, [pc, #444]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b6d      	ldr	r3, [pc, #436]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a6c      	ldr	r2, [pc, #432]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005328:	4b69      	ldr	r3, [pc, #420]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a68      	ldr	r2, [pc, #416]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800533a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d013      	beq.n	8005370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7ff fcaa 	bl	8004ca0 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005350:	f7ff fca6 	bl	8004ca0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e207      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b5b      	ldr	r3, [pc, #364]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xc0>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7ff fc96 	bl	8004ca0 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005378:	f7ff fc92 	bl	8004ca0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e1f3      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538a:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0xe8>
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d063      	beq.n	800546e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a6:	4b4a      	ldr	r3, [pc, #296]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b2:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d11c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053be:	4b44      	ldr	r3, [pc, #272]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d116      	bne.n	80053f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ca:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_RCC_OscConfig+0x152>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e1c7      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e2:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4937      	ldr	r1, [pc, #220]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f6:	e03a      	b.n	800546e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d020      	beq.n	8005442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005400:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <HAL_RCC_OscConfig+0x244>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7ff fc4b 	bl	8004ca0 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540e:	f7ff fc47 	bl	8004ca0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e1a8      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4925      	ldr	r1, [pc, #148]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
 8005440:	e015      	b.n	800546e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <HAL_RCC_OscConfig+0x244>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7ff fc2a 	bl	8004ca0 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005450:	f7ff fc26 	bl	8004ca0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e187      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d036      	beq.n	80054e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <HAL_RCC_OscConfig+0x248>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7ff fc0a 	bl	8004ca0 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005490:	f7ff fc06 	bl	8004ca0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e167      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_OscConfig+0x240>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0x200>
 80054ae:	e01b      	b.n	80054e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RCC_OscConfig+0x248>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b6:	f7ff fbf3 	bl	8004ca0 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	e00e      	b.n	80054dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054be:	f7ff fbef 	bl	8004ca0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d907      	bls.n	80054dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e150      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
 80054d0:	40023800 	.word	0x40023800
 80054d4:	42470000 	.word	0x42470000
 80054d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054dc:	4b88      	ldr	r3, [pc, #544]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80054de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ea      	bne.n	80054be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8097 	beq.w	8005624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fa:	4b81      	ldr	r3, [pc, #516]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	4b7d      	ldr	r3, [pc, #500]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	4a7c      	ldr	r2, [pc, #496]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6413      	str	r3, [r2, #64]	; 0x40
 8005516:	4b7a      	ldr	r3, [pc, #488]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005526:	4b77      	ldr	r3, [pc, #476]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005532:	4b74      	ldr	r3, [pc, #464]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a73      	ldr	r2, [pc, #460]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7ff fbaf 	bl	8004ca0 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7ff fbab 	bl	8004ca0 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e10c      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCC_OscConfig+0x474>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d106      	bne.n	800557a <HAL_RCC_OscConfig+0x2ea>
 800556c:	4b64      	ldr	r3, [pc, #400]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	4a63      	ldr	r2, [pc, #396]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	6713      	str	r3, [r2, #112]	; 0x70
 8005578:	e01c      	b.n	80055b4 <HAL_RCC_OscConfig+0x324>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b05      	cmp	r3, #5
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x30c>
 8005582:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	4a5e      	ldr	r2, [pc, #376]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005588:	f043 0304 	orr.w	r3, r3, #4
 800558c:	6713      	str	r3, [r2, #112]	; 0x70
 800558e:	4b5c      	ldr	r3, [pc, #368]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a5b      	ldr	r2, [pc, #364]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0x324>
 800559c:	4b58      	ldr	r3, [pc, #352]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	4a57      	ldr	r2, [pc, #348]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
 80055a8:	4b55      	ldr	r3, [pc, #340]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a54      	ldr	r2, [pc, #336]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055ae:	f023 0304 	bic.w	r3, r3, #4
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7ff fb70 	bl	8004ca0 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c2:	e00a      	b.n	80055da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7ff fb6c 	bl	8004ca0 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0cb      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055da:	4b49      	ldr	r3, [pc, #292]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ee      	beq.n	80055c4 <HAL_RCC_OscConfig+0x334>
 80055e6:	e014      	b.n	8005612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e8:	f7ff fb5a 	bl	8004ca0 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7ff fb56 	bl	8004ca0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0b5      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005606:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ee      	bne.n	80055f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005618:	4b39      	ldr	r3, [pc, #228]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	4a38      	ldr	r2, [pc, #224]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 800561e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80a1 	beq.w	8005770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800562e:	4b34      	ldr	r3, [pc, #208]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b08      	cmp	r3, #8
 8005638:	d05c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d141      	bne.n	80056c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005642:	4b31      	ldr	r3, [pc, #196]	; (8005708 <HAL_RCC_OscConfig+0x478>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7ff fb2a 	bl	8004ca0 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005650:	f7ff fb26 	bl	8004ca0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e087      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005662:	4b27      	ldr	r3, [pc, #156]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	3b01      	subs	r3, #1
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	491b      	ldr	r1, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <HAL_RCC_OscConfig+0x478>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569e:	f7ff faff 	bl	8004ca0 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a6:	f7ff fafb 	bl	8004ca0 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e05c      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x416>
 80056c4:	e054      	b.n	8005770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <HAL_RCC_OscConfig+0x478>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7ff fae8 	bl	8004ca0 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d4:	f7ff fae4 	bl	8004ca0 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e045      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_RCC_OscConfig+0x470>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x444>
 80056f2:	e03d      	b.n	8005770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e038      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
 8005700:	40023800 	.word	0x40023800
 8005704:	40007000 	.word	0x40007000
 8005708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800570c:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x4ec>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d028      	beq.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d121      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d11a      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005744:	4293      	cmp	r3, r2
 8005746:	d111      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	3b01      	subs	r3, #1
 8005756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d107      	bne.n	800576c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800

08005780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0cc      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005794:	4b68      	ldr	r3, [pc, #416]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d90c      	bls.n	80057bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b65      	ldr	r3, [pc, #404]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b63      	ldr	r3, [pc, #396]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0b8      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d020      	beq.n	800580a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a58      	ldr	r2, [pc, #352]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057ec:	4b53      	ldr	r3, [pc, #332]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4a52      	ldr	r2, [pc, #328]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f8:	4b50      	ldr	r3, [pc, #320]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	494d      	ldr	r1, [pc, #308]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d044      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581e:	4b47      	ldr	r3, [pc, #284]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d119      	bne.n	800585e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e07f      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d003      	beq.n	800583e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800583a:	2b03      	cmp	r3, #3
 800583c:	d107      	bne.n	800584e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583e:	4b3f      	ldr	r3, [pc, #252]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e06f      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584e:	4b3b      	ldr	r3, [pc, #236]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e067      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800585e:	4b37      	ldr	r3, [pc, #220]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 0203 	bic.w	r2, r3, #3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4934      	ldr	r1, [pc, #208]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	4313      	orrs	r3, r2
 800586e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005870:	f7ff fa16 	bl	8004ca0 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	e00a      	b.n	800588e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005878:	f7ff fa12 	bl	8004ca0 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e04f      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588e:	4b2b      	ldr	r3, [pc, #172]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 020c 	and.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	429a      	cmp	r2, r3
 800589e:	d1eb      	bne.n	8005878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d20c      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	4b20      	ldr	r3, [pc, #128]	; (8005938 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e032      	b.n	800592e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4916      	ldr	r1, [pc, #88]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	490e      	ldr	r1, [pc, #56]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005906:	f000 f821 	bl	800594c <HAL_RCC_GetSysClockFreq>
 800590a:	4602      	mov	r2, r0
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	490a      	ldr	r1, [pc, #40]	; (8005940 <HAL_RCC_ClockConfig+0x1c0>)
 8005918:	5ccb      	ldrb	r3, [r1, r3]
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <HAL_RCC_ClockConfig+0x1c4>)
 8005920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005922:	4b09      	ldr	r3, [pc, #36]	; (8005948 <HAL_RCC_ClockConfig+0x1c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff f976 	bl	8004c18 <HAL_InitTick>

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40023c00 	.word	0x40023c00
 800593c:	40023800 	.word	0x40023800
 8005940:	0800c2c8 	.word	0x0800c2c8
 8005944:	20000094 	.word	0x20000094
 8005948:	20000098 	.word	0x20000098

0800594c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800594c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005950:	b094      	sub	sp, #80	; 0x50
 8005952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
 8005958:	2300      	movs	r3, #0
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595c:	2300      	movs	r3, #0
 800595e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005964:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b08      	cmp	r3, #8
 800596e:	d00d      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0x40>
 8005970:	2b08      	cmp	r3, #8
 8005972:	f200 80e1 	bhi.w	8005b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x34>
 800597a:	2b04      	cmp	r3, #4
 800597c:	d003      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x3a>
 800597e:	e0db      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005980:	4b73      	ldr	r3, [pc, #460]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005984:	e0db      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005986:	4b73      	ldr	r3, [pc, #460]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800598a:	e0d8      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800598c:	4b6f      	ldr	r3, [pc, #444]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005994:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005996:	4b6d      	ldr	r3, [pc, #436]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d063      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a2:	4b6a      	ldr	r3, [pc, #424]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	2200      	movs	r2, #0
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
 80059b6:	2300      	movs	r3, #0
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059be:	4622      	mov	r2, r4
 80059c0:	462b      	mov	r3, r5
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	0159      	lsls	r1, r3, #5
 80059cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d0:	0150      	lsls	r0, r2, #5
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4621      	mov	r1, r4
 80059d8:	1a51      	subs	r1, r2, r1
 80059da:	6139      	str	r1, [r7, #16]
 80059dc:	4629      	mov	r1, r5
 80059de:	eb63 0301 	sbc.w	r3, r3, r1
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f0:	4659      	mov	r1, fp
 80059f2:	018b      	lsls	r3, r1, #6
 80059f4:	4651      	mov	r1, sl
 80059f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059fa:	4651      	mov	r1, sl
 80059fc:	018a      	lsls	r2, r1, #6
 80059fe:	4651      	mov	r1, sl
 8005a00:	ebb2 0801 	subs.w	r8, r2, r1
 8005a04:	4659      	mov	r1, fp
 8005a06:	eb63 0901 	sbc.w	r9, r3, r1
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a1e:	4690      	mov	r8, r2
 8005a20:	4699      	mov	r9, r3
 8005a22:	4623      	mov	r3, r4
 8005a24:	eb18 0303 	adds.w	r3, r8, r3
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	eb49 0303 	adc.w	r3, r9, r3
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a3e:	4629      	mov	r1, r5
 8005a40:	024b      	lsls	r3, r1, #9
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a48:	4621      	mov	r1, r4
 8005a4a:	024a      	lsls	r2, r1, #9
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a52:	2200      	movs	r2, #0
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a5c:	f7fa fc10 	bl	8000280 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a68:	e058      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6a:	4b38      	ldr	r3, [pc, #224]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	099b      	lsrs	r3, r3, #6
 8005a70:	2200      	movs	r2, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	4611      	mov	r1, r2
 8005a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	f04f 0000 	mov.w	r0, #0
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	0159      	lsls	r1, r3, #5
 8005a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a96:	0150      	lsls	r0, r2, #5
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005abc:	ebb2 040a 	subs.w	r4, r2, sl
 8005ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	00eb      	lsls	r3, r5, #3
 8005ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ad2:	00e2      	lsls	r2, r4, #3
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	461d      	mov	r5, r3
 8005ad8:	4643      	mov	r3, r8
 8005ada:	18e3      	adds	r3, r4, r3
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	464b      	mov	r3, r9
 8005ae0:	eb45 0303 	adc.w	r3, r5, r3
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005af2:	4629      	mov	r1, r5
 8005af4:	028b      	lsls	r3, r1, #10
 8005af6:	4621      	mov	r1, r4
 8005af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005afc:	4621      	mov	r1, r4
 8005afe:	028a      	lsls	r2, r1, #10
 8005b00:	4610      	mov	r0, r2
 8005b02:	4619      	mov	r1, r3
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	2200      	movs	r2, #0
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	61fa      	str	r2, [r7, #28]
 8005b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b10:	f7fa fbb6 	bl	8000280 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4613      	mov	r3, r2
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	3301      	adds	r3, #1
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b36:	e002      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3750      	adds	r7, #80	; 0x50
 8005b44:	46bd      	mov	sp, r7
 8005b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	007a1200 	.word	0x007a1200

08005b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e07b      	b.n	8005c62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d108      	bne.n	8005b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7a:	d009      	beq.n	8005b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	61da      	str	r2, [r3, #28]
 8005b82:	e005      	b.n	8005b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fd fc0c 	bl	80033c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	ea42 0103 	orr.w	r1, r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	f003 0104 	and.w	r1, r3, #4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	f003 0210 	and.w	r2, r3, #16
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b088      	sub	sp, #32
 8005c6e:	af02      	add	r7, sp, #8
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c86:	d112      	bne.n	8005cae <HAL_SPI_Receive+0x44>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10e      	bne.n	8005cae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2204      	movs	r2, #4
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f8f1 	bl	8005e8c <HAL_SPI_TransmitReceive>
 8005caa:	4603      	mov	r3, r0
 8005cac:	e0ea      	b.n	8005e84 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_Receive+0x52>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0e3      	b.n	8005e84 <HAL_SPI_Receive+0x21a>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cc4:	f7fe ffec 	bl	8004ca0 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cda:	e0ca      	b.n	8005e72 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Receive+0x7e>
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cec:	e0c1      	b.n	8005e72 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d34:	d10f      	bne.n	8005d56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d007      	beq.n	8005d74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d162      	bne.n	8005e42 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d7c:	e02e      	b.n	8005ddc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d115      	bne.n	8005db8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f103 020c 	add.w	r2, r3, #12
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005db6:	e011      	b.n	8005ddc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db8:	f7fe ff72 	bl	8004ca0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d803      	bhi.n	8005dd0 <HAL_SPI_Receive+0x166>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d102      	bne.n	8005dd6 <HAL_SPI_Receive+0x16c>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dda:	e04a      	b.n	8005e72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1cb      	bne.n	8005d7e <HAL_SPI_Receive+0x114>
 8005de6:	e031      	b.n	8005e4c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d113      	bne.n	8005e1e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	b292      	uxth	r2, r2
 8005e02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e1c:	e011      	b.n	8005e42 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1e:	f7fe ff3f 	bl	8004ca0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d803      	bhi.n	8005e36 <HAL_SPI_Receive+0x1cc>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d102      	bne.n	8005e3c <HAL_SPI_Receive+0x1d2>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e40:	e017      	b.n	8005e72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1cd      	bne.n	8005de8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fa45 	bl	80062e0 <SPI_EndRxTransaction>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
 8005e6e:	e000      	b.n	8005e72 <HAL_SPI_Receive+0x208>
  }

error :
 8005e70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x26>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e18a      	b.n	80061c8 <HAL_SPI_TransmitReceive+0x33c>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eba:	f7fe fef1 	bl	8004ca0 <HAL_GetTick>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ed0:	887b      	ldrh	r3, [r7, #2]
 8005ed2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d00f      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x70>
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee2:	d107      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x68>
 8005eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d003      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005efa:	e15b      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_SPI_TransmitReceive+0x82>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_TransmitReceive+0x82>
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f14:	e14e      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d003      	beq.n	8005f2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2205      	movs	r2, #5
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	887a      	ldrh	r2, [r7, #2]
 8005f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	887a      	ldrh	r2, [r7, #2]
 8005f40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	887a      	ldrh	r2, [r7, #2]
 8005f4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	887a      	ldrh	r2, [r7, #2]
 8005f52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d007      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	d178      	bne.n	800607a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_SPI_TransmitReceive+0x10a>
 8005f90:	8b7b      	ldrh	r3, [r7, #26]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d166      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	881a      	ldrh	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	1c9a      	adds	r2, r3, #2
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fba:	e053      	b.n	8006064 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d11b      	bne.n	8006002 <HAL_SPI_TransmitReceive+0x176>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d016      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x176>
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d113      	bne.n	8006002 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d119      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x1b8>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d014      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	b292      	uxth	r2, r2
 8006026:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006040:	2301      	movs	r3, #1
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006044:	f7fe fe2c 	bl	8004ca0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006050:	429a      	cmp	r2, r3
 8006052:	d807      	bhi.n	8006064 <HAL_SPI_TransmitReceive+0x1d8>
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d003      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006062:	e0a7      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1a6      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x130>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1a1      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x130>
 8006078:	e07c      	b.n	8006174 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_SPI_TransmitReceive+0x1fc>
 8006082:	8b7b      	ldrh	r3, [r7, #26]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d16b      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ae:	e057      	b.n	8006160 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d11c      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x26c>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d017      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0x26c>
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d114      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d119      	bne.n	800613a <HAL_SPI_TransmitReceive+0x2ae>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d014      	beq.n	800613a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006136:	2301      	movs	r3, #1
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800613a:	f7fe fdb1 	bl	8004ca0 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006146:	429a      	cmp	r2, r3
 8006148:	d803      	bhi.n	8006152 <HAL_SPI_TransmitReceive+0x2c6>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d102      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x2cc>
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800615e:	e029      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1a2      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x224>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d19d      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f917 	bl	80063ac <SPI_EndRxTxTransaction>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006190:	e010      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	e000      	b.n	80061b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80061b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3730      	adds	r7, #48	; 0x30
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061e0:	f7fe fd5e 	bl	8004ca0 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061f0:	f7fe fd56 	bl	8004ca0 <HAL_GetTick>
 80061f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061f6:	4b39      	ldr	r3, [pc, #228]	; (80062dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	015b      	lsls	r3, r3, #5
 80061fc:	0d1b      	lsrs	r3, r3, #20
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006206:	e054      	b.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d050      	beq.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006210:	f7fe fd46 	bl	8004ca0 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	429a      	cmp	r2, r3
 800621e:	d902      	bls.n	8006226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d13d      	bne.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800623e:	d111      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006248:	d004      	beq.n	8006254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006252:	d107      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626c:	d10f      	bne.n	800628e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e017      	b.n	80062d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d19b      	bne.n	8006208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000094 	.word	0x20000094

080062e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f4:	d111      	bne.n	800631a <SPI_EndRxTransaction+0x3a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fe:	d004      	beq.n	800630a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006308:	d107      	bne.n	800631a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006318:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006322:	d12a      	bne.n	800637a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d012      	beq.n	8006354 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2200      	movs	r2, #0
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7ff ff49 	bl	80061d0 <SPI_WaitFlagStateUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02d      	beq.n	80063a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e026      	b.n	80063a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	2101      	movs	r1, #1
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff ff36 	bl	80061d0 <SPI_WaitFlagStateUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01a      	beq.n	80063a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e013      	b.n	80063a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	2101      	movs	r1, #1
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff ff23 	bl	80061d0 <SPI_WaitFlagStateUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e000      	b.n	80063a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <SPI_EndRxTxTransaction+0x7c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <SPI_EndRxTxTransaction+0x80>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	0d5b      	lsrs	r3, r3, #21
 80063c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d6:	d112      	bne.n	80063fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff fef4 	bl	80061d0 <SPI_WaitFlagStateUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	f043 0220 	orr.w	r2, r3, #32
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00f      	b.n	800641e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	3b01      	subs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d0f2      	beq.n	80063fe <SPI_EndRxTxTransaction+0x52>
 8006418:	e000      	b.n	800641c <SPI_EndRxTxTransaction+0x70>
        break;
 800641a:	bf00      	nop
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000094 	.word	0x20000094
 800642c:	165e9f81 	.word	0x165e9f81

08006430 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e034      	b.n	80064b0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7fa fb8e 	bl	8000b7c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3308      	adds	r3, #8
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f000 fca6 	bl	8006dbc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	461a      	mov	r2, r3
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	f000 fcf0 	bl	8006e60 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6858      	ldr	r0, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	f000 fd25 	bl	8006edc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	6892      	ldr	r2, [r2, #8]
 800649a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	6892      	ldr	r2, [r2, #8]
 80064a6:	f041 0101 	orr.w	r1, r1, #1
 80064aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e041      	b.n	800654e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fe f9ba 	bl	8004858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 fa96 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e04e      	b.n	800660e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a23      	ldr	r2, [pc, #140]	; (800661c <HAL_TIM_Base_Start_IT+0xc4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d01d      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <HAL_TIM_Base_Start_IT+0xc8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <HAL_TIM_Base_Start_IT+0xcc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_TIM_Base_Start_IT+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1b      	ldr	r2, [pc, #108]	; (800662c <HAL_TIM_Base_Start_IT+0xd4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_TIM_Base_Start_IT+0x80>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a18      	ldr	r2, [pc, #96]	; (8006634 <HAL_TIM_Base_Start_IT+0xdc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d111      	bne.n	80065fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b06      	cmp	r3, #6
 80065e8:	d010      	beq.n	800660c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0201 	orr.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	e007      	b.n	800660c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	40010400 	.word	0x40010400
 8006630:	40014000 	.word	0x40014000
 8006634:	40001800 	.word	0x40001800

08006638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b02      	cmp	r3, #2
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0202 	mvn.w	r2, #2
 8006664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9b5 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f9a7 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f9b8 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d122      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d11b      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0204 	mvn.w	r2, #4
 80066b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f98b 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 80066d4:	e005      	b.n	80066e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f97d 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f98e 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b08      	cmp	r3, #8
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0208 	mvn.w	r2, #8
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2204      	movs	r2, #4
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f961 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f953 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f964 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b10      	cmp	r3, #16
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0210 	mvn.w	r2, #16
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2208      	movs	r2, #8
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f937 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f929 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f93a 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10e      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0201 	mvn.w	r2, #1
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fc fd60 	bl	800327c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d10e      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d107      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fae0 	bl	8006da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d10e      	bne.n	8006814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d107      	bne.n	8006814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800680c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f8ff 	bl	8006a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b20      	cmp	r3, #32
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0220 	mvn.w	r2, #32
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 faaa 	bl	8006d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIM_ConfigClockSource+0x1c>
 8006860:	2302      	movs	r3, #2
 8006862:	e0b4      	b.n	80069ce <HAL_TIM_ConfigClockSource+0x186>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689c:	d03e      	beq.n	800691c <HAL_TIM_ConfigClockSource+0xd4>
 800689e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a2:	f200 8087 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	f000 8086 	beq.w	80069ba <HAL_TIM_ConfigClockSource+0x172>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d87f      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d01a      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0xa6>
 80068b8:	2b70      	cmp	r3, #112	; 0x70
 80068ba:	d87b      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068bc:	2b60      	cmp	r3, #96	; 0x60
 80068be:	d050      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x11a>
 80068c0:	2b60      	cmp	r3, #96	; 0x60
 80068c2:	d877      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b50      	cmp	r3, #80	; 0x50
 80068c6:	d03c      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0xfa>
 80068c8:	2b50      	cmp	r3, #80	; 0x50
 80068ca:	d873      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	d058      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x13a>
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d86f      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b30      	cmp	r3, #48	; 0x30
 80068d6:	d064      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15a>
 80068d8:	2b30      	cmp	r3, #48	; 0x30
 80068da:	d86b      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d060      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15a>
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d867      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d05c      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d05a      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15a>
 80068ec:	e062      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6899      	ldr	r1, [r3, #8]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f000 f9ad 	bl	8006c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	609a      	str	r2, [r3, #8]
      break;
 800691a:	e04f      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	6899      	ldr	r1, [r3, #8]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f000 f996 	bl	8006c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693e:	609a      	str	r2, [r3, #8]
      break;
 8006940:	e03c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6859      	ldr	r1, [r3, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	461a      	mov	r2, r3
 8006950:	f000 f90a 	bl	8006b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2150      	movs	r1, #80	; 0x50
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f963 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 8006960:	e02c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	461a      	mov	r2, r3
 8006970:	f000 f929 	bl	8006bc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2160      	movs	r1, #96	; 0x60
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f953 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 8006980:	e01c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	461a      	mov	r2, r3
 8006990:	f000 f8ea 	bl	8006b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2140      	movs	r1, #64	; 0x40
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f943 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069a0:	e00c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f000 f93a 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069b2:	e003      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e000      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a40      	ldr	r2, [pc, #256]	; (8006b3c <TIM_Base_SetConfig+0x114>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d00f      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a3d      	ldr	r2, [pc, #244]	; (8006b40 <TIM_Base_SetConfig+0x118>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a3c      	ldr	r2, [pc, #240]	; (8006b44 <TIM_Base_SetConfig+0x11c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a3b      	ldr	r2, [pc, #236]	; (8006b48 <TIM_Base_SetConfig+0x120>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a3a      	ldr	r2, [pc, #232]	; (8006b4c <TIM_Base_SetConfig+0x124>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d108      	bne.n	8006a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <TIM_Base_SetConfig+0x114>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d02b      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d027      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a2c      	ldr	r2, [pc, #176]	; (8006b40 <TIM_Base_SetConfig+0x118>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d023      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a2b      	ldr	r2, [pc, #172]	; (8006b44 <TIM_Base_SetConfig+0x11c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01f      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a2a      	ldr	r2, [pc, #168]	; (8006b48 <TIM_Base_SetConfig+0x120>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d01b      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a29      	ldr	r2, [pc, #164]	; (8006b4c <TIM_Base_SetConfig+0x124>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d017      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a28      	ldr	r2, [pc, #160]	; (8006b50 <TIM_Base_SetConfig+0x128>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <TIM_Base_SetConfig+0x12c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00f      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a26      	ldr	r2, [pc, #152]	; (8006b58 <TIM_Base_SetConfig+0x130>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00b      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <TIM_Base_SetConfig+0x134>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a24      	ldr	r2, [pc, #144]	; (8006b60 <TIM_Base_SetConfig+0x138>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <TIM_Base_SetConfig+0x13c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d108      	bne.n	8006aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <TIM_Base_SetConfig+0x114>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_Base_SetConfig+0xf8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a0c      	ldr	r2, [pc, #48]	; (8006b4c <TIM_Base_SetConfig+0x124>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d103      	bne.n	8006b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	615a      	str	r2, [r3, #20]
}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000c00 	.word	0x40000c00
 8006b4c:	40010400 	.word	0x40010400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40014400 	.word	0x40014400
 8006b58:	40014800 	.word	0x40014800
 8006b5c:	40001800 	.word	0x40001800
 8006b60:	40001c00 	.word	0x40001c00
 8006b64:	40002000 	.word	0x40002000

08006b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 030a 	bic.w	r3, r3, #10
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0210 	bic.w	r2, r3, #16
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f043 0307 	orr.w	r3, r3, #7
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	609a      	str	r2, [r3, #8]
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e05a      	b.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a21      	ldr	r2, [pc, #132]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d01d      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1d      	ldr	r2, [pc, #116]	; (8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1b      	ldr	r2, [pc, #108]	; (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1a      	ldr	r2, [pc, #104]	; (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d10c      	bne.n	8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40010000 	.word	0x40010000
 8006d7c:	40000400 	.word	0x40000400
 8006d80:	40000800 	.word	0x40000800
 8006d84:	40000c00 	.word	0x40000c00
 8006d88:	40010400 	.word	0x40010400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40001800 	.word	0x40001800

08006d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4b20      	ldr	r3, [pc, #128]	; (8006e5c <FSMC_NORSRAM_Init+0xa0>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006de6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006dec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006df2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006df8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006dfe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006e04:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e0a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e10:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006e16:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006e1c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006e22:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006e28:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d103      	bne.n	8006e40 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	fff00080 	.word	0xfff00080

08006e60 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e82:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e8e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e96:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e9e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ea8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	3b02      	subs	r3, #2
 8006eb0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006eb2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef4:	d122      	bne.n	8006f3c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f12:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f1a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f22:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f28:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6979      	ldr	r1, [r7, #20]
 8006f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f3a:	e005      	b.n	8006f48 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	cff00000 	.word	0xcff00000

08006f5c <__errno>:
 8006f5c:	4b01      	ldr	r3, [pc, #4]	; (8006f64 <__errno+0x8>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	200000a0 	.word	0x200000a0

08006f68 <__libc_init_array>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	4d0d      	ldr	r5, [pc, #52]	; (8006fa0 <__libc_init_array+0x38>)
 8006f6c:	4c0d      	ldr	r4, [pc, #52]	; (8006fa4 <__libc_init_array+0x3c>)
 8006f6e:	1b64      	subs	r4, r4, r5
 8006f70:	10a4      	asrs	r4, r4, #2
 8006f72:	2600      	movs	r6, #0
 8006f74:	42a6      	cmp	r6, r4
 8006f76:	d109      	bne.n	8006f8c <__libc_init_array+0x24>
 8006f78:	4d0b      	ldr	r5, [pc, #44]	; (8006fa8 <__libc_init_array+0x40>)
 8006f7a:	4c0c      	ldr	r4, [pc, #48]	; (8006fac <__libc_init_array+0x44>)
 8006f7c:	f001 faa4 	bl	80084c8 <_init>
 8006f80:	1b64      	subs	r4, r4, r5
 8006f82:	10a4      	asrs	r4, r4, #2
 8006f84:	2600      	movs	r6, #0
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	d105      	bne.n	8006f96 <__libc_init_array+0x2e>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f90:	4798      	blx	r3
 8006f92:	3601      	adds	r6, #1
 8006f94:	e7ee      	b.n	8006f74 <__libc_init_array+0xc>
 8006f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9a:	4798      	blx	r3
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	e7f2      	b.n	8006f86 <__libc_init_array+0x1e>
 8006fa0:	0800c428 	.word	0x0800c428
 8006fa4:	0800c428 	.word	0x0800c428
 8006fa8:	0800c428 	.word	0x0800c428
 8006fac:	0800c42c 	.word	0x0800c42c

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <srand>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4b10      	ldr	r3, [pc, #64]	; (8007004 <srand+0x44>)
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006fc8:	4604      	mov	r4, r0
 8006fca:	b9b3      	cbnz	r3, 8006ffa <srand+0x3a>
 8006fcc:	2018      	movs	r0, #24
 8006fce:	f000 f8f5 	bl	80071bc <malloc>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	63a8      	str	r0, [r5, #56]	; 0x38
 8006fd6:	b920      	cbnz	r0, 8006fe2 <srand+0x22>
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <srand+0x48>)
 8006fda:	480c      	ldr	r0, [pc, #48]	; (800700c <srand+0x4c>)
 8006fdc:	2142      	movs	r1, #66	; 0x42
 8006fde:	f000 f8bd 	bl	800715c <__assert_func>
 8006fe2:	490b      	ldr	r1, [pc, #44]	; (8007010 <srand+0x50>)
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <srand+0x54>)
 8006fe6:	e9c0 1300 	strd	r1, r3, [r0]
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <srand+0x58>)
 8006fec:	6083      	str	r3, [r0, #8]
 8006fee:	230b      	movs	r3, #11
 8006ff0:	8183      	strh	r3, [r0, #12]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006ffa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	611c      	str	r4, [r3, #16]
 8007000:	615a      	str	r2, [r3, #20]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	200000a0 	.word	0x200000a0
 8007008:	0800c2dc 	.word	0x0800c2dc
 800700c:	0800c2f3 	.word	0x0800c2f3
 8007010:	abcd330e 	.word	0xabcd330e
 8007014:	e66d1234 	.word	0xe66d1234
 8007018:	0005deec 	.word	0x0005deec

0800701c <rand>:
 800701c:	4b16      	ldr	r3, [pc, #88]	; (8007078 <rand+0x5c>)
 800701e:	b510      	push	{r4, lr}
 8007020:	681c      	ldr	r4, [r3, #0]
 8007022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007024:	b9b3      	cbnz	r3, 8007054 <rand+0x38>
 8007026:	2018      	movs	r0, #24
 8007028:	f000 f8c8 	bl	80071bc <malloc>
 800702c:	63a0      	str	r0, [r4, #56]	; 0x38
 800702e:	b928      	cbnz	r0, 800703c <rand+0x20>
 8007030:	4602      	mov	r2, r0
 8007032:	4b12      	ldr	r3, [pc, #72]	; (800707c <rand+0x60>)
 8007034:	4812      	ldr	r0, [pc, #72]	; (8007080 <rand+0x64>)
 8007036:	214e      	movs	r1, #78	; 0x4e
 8007038:	f000 f890 	bl	800715c <__assert_func>
 800703c:	4a11      	ldr	r2, [pc, #68]	; (8007084 <rand+0x68>)
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <rand+0x6c>)
 8007040:	e9c0 2300 	strd	r2, r3, [r0]
 8007044:	4b11      	ldr	r3, [pc, #68]	; (800708c <rand+0x70>)
 8007046:	6083      	str	r3, [r0, #8]
 8007048:	230b      	movs	r3, #11
 800704a:	8183      	strh	r3, [r0, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	2300      	movs	r3, #0
 8007050:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007054:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007056:	4a0e      	ldr	r2, [pc, #56]	; (8007090 <rand+0x74>)
 8007058:	6920      	ldr	r0, [r4, #16]
 800705a:	6963      	ldr	r3, [r4, #20]
 800705c:	490d      	ldr	r1, [pc, #52]	; (8007094 <rand+0x78>)
 800705e:	4342      	muls	r2, r0
 8007060:	fb01 2203 	mla	r2, r1, r3, r2
 8007064:	fba0 0101 	umull	r0, r1, r0, r1
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	eb42 0001 	adc.w	r0, r2, r1
 800706e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007072:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007076:	bd10      	pop	{r4, pc}
 8007078:	200000a0 	.word	0x200000a0
 800707c:	0800c2dc 	.word	0x0800c2dc
 8007080:	0800c2f3 	.word	0x0800c2f3
 8007084:	abcd330e 	.word	0xabcd330e
 8007088:	e66d1234 	.word	0xe66d1234
 800708c:	0005deec 	.word	0x0005deec
 8007090:	5851f42d 	.word	0x5851f42d
 8007094:	4c957f2d 	.word	0x4c957f2d

08007098 <sniprintf>:
 8007098:	b40c      	push	{r2, r3}
 800709a:	b530      	push	{r4, r5, lr}
 800709c:	4b17      	ldr	r3, [pc, #92]	; (80070fc <sniprintf+0x64>)
 800709e:	1e0c      	subs	r4, r1, #0
 80070a0:	681d      	ldr	r5, [r3, #0]
 80070a2:	b09d      	sub	sp, #116	; 0x74
 80070a4:	da08      	bge.n	80070b8 <sniprintf+0x20>
 80070a6:	238b      	movs	r3, #139	; 0x8b
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	b01d      	add	sp, #116	; 0x74
 80070b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070b4:	b002      	add	sp, #8
 80070b6:	4770      	bx	lr
 80070b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070c0:	bf14      	ite	ne
 80070c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070c6:	4623      	moveq	r3, r4
 80070c8:	9304      	str	r3, [sp, #16]
 80070ca:	9307      	str	r3, [sp, #28]
 80070cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070d0:	9002      	str	r0, [sp, #8]
 80070d2:	9006      	str	r0, [sp, #24]
 80070d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070da:	ab21      	add	r3, sp, #132	; 0x84
 80070dc:	a902      	add	r1, sp, #8
 80070de:	4628      	mov	r0, r5
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	f000 f9bd 	bl	8007460 <_svfiprintf_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	bfbc      	itt	lt
 80070ea:	238b      	movlt	r3, #139	; 0x8b
 80070ec:	602b      	strlt	r3, [r5, #0]
 80070ee:	2c00      	cmp	r4, #0
 80070f0:	d0dd      	beq.n	80070ae <sniprintf+0x16>
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e7d9      	b.n	80070ae <sniprintf+0x16>
 80070fa:	bf00      	nop
 80070fc:	200000a0 	.word	0x200000a0

08007100 <strcat>:
 8007100:	b510      	push	{r4, lr}
 8007102:	4602      	mov	r2, r0
 8007104:	7814      	ldrb	r4, [r2, #0]
 8007106:	4613      	mov	r3, r2
 8007108:	3201      	adds	r2, #1
 800710a:	2c00      	cmp	r4, #0
 800710c:	d1fa      	bne.n	8007104 <strcat+0x4>
 800710e:	3b01      	subs	r3, #1
 8007110:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007114:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007118:	2a00      	cmp	r2, #0
 800711a:	d1f9      	bne.n	8007110 <strcat+0x10>
 800711c:	bd10      	pop	{r4, pc}
	...

08007120 <strdup>:
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <strdup+0xc>)
 8007122:	4601      	mov	r1, r0
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f000 b803 	b.w	8007130 <_strdup_r>
 800712a:	bf00      	nop
 800712c:	200000a0 	.word	0x200000a0

08007130 <_strdup_r>:
 8007130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	460d      	mov	r5, r1
 8007138:	f7f9 f84a 	bl	80001d0 <strlen>
 800713c:	1c42      	adds	r2, r0, #1
 800713e:	4611      	mov	r1, r2
 8007140:	4620      	mov	r0, r4
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	f000 f8bc 	bl	80072c0 <_malloc_r>
 8007148:	4604      	mov	r4, r0
 800714a:	b118      	cbz	r0, 8007154 <_strdup_r+0x24>
 800714c:	9a01      	ldr	r2, [sp, #4]
 800714e:	4629      	mov	r1, r5
 8007150:	f000 f83c 	bl	80071cc <memcpy>
 8007154:	4620      	mov	r0, r4
 8007156:	b003      	add	sp, #12
 8007158:	bd30      	pop	{r4, r5, pc}
	...

0800715c <__assert_func>:
 800715c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800715e:	4614      	mov	r4, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <__assert_func+0x2c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4605      	mov	r5, r0
 8007168:	68d8      	ldr	r0, [r3, #12]
 800716a:	b14c      	cbz	r4, 8007180 <__assert_func+0x24>
 800716c:	4b07      	ldr	r3, [pc, #28]	; (800718c <__assert_func+0x30>)
 800716e:	9100      	str	r1, [sp, #0]
 8007170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007174:	4906      	ldr	r1, [pc, #24]	; (8007190 <__assert_func+0x34>)
 8007176:	462b      	mov	r3, r5
 8007178:	f000 f80e 	bl	8007198 <fiprintf>
 800717c:	f000 fe2e 	bl	8007ddc <abort>
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <__assert_func+0x38>)
 8007182:	461c      	mov	r4, r3
 8007184:	e7f3      	b.n	800716e <__assert_func+0x12>
 8007186:	bf00      	nop
 8007188:	200000a0 	.word	0x200000a0
 800718c:	0800c34e 	.word	0x0800c34e
 8007190:	0800c35b 	.word	0x0800c35b
 8007194:	0800c389 	.word	0x0800c389

08007198 <fiprintf>:
 8007198:	b40e      	push	{r1, r2, r3}
 800719a:	b503      	push	{r0, r1, lr}
 800719c:	4601      	mov	r1, r0
 800719e:	ab03      	add	r3, sp, #12
 80071a0:	4805      	ldr	r0, [pc, #20]	; (80071b8 <fiprintf+0x20>)
 80071a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	f000 fa83 	bl	80076b4 <_vfiprintf_r>
 80071ae:	b002      	add	sp, #8
 80071b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b4:	b003      	add	sp, #12
 80071b6:	4770      	bx	lr
 80071b8:	200000a0 	.word	0x200000a0

080071bc <malloc>:
 80071bc:	4b02      	ldr	r3, [pc, #8]	; (80071c8 <malloc+0xc>)
 80071be:	4601      	mov	r1, r0
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	f000 b87d 	b.w	80072c0 <_malloc_r>
 80071c6:	bf00      	nop
 80071c8:	200000a0 	.word	0x200000a0

080071cc <memcpy>:
 80071cc:	440a      	add	r2, r1
 80071ce:	4291      	cmp	r1, r2
 80071d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d4:	d100      	bne.n	80071d8 <memcpy+0xc>
 80071d6:	4770      	bx	lr
 80071d8:	b510      	push	{r4, lr}
 80071da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e2:	4291      	cmp	r1, r2
 80071e4:	d1f9      	bne.n	80071da <memcpy+0xe>
 80071e6:	bd10      	pop	{r4, pc}

080071e8 <_free_r>:
 80071e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ea:	2900      	cmp	r1, #0
 80071ec:	d044      	beq.n	8007278 <_free_r+0x90>
 80071ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f2:	9001      	str	r0, [sp, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f1a1 0404 	sub.w	r4, r1, #4
 80071fa:	bfb8      	it	lt
 80071fc:	18e4      	addlt	r4, r4, r3
 80071fe:	f001 f82f 	bl	8008260 <__malloc_lock>
 8007202:	4a1e      	ldr	r2, [pc, #120]	; (800727c <_free_r+0x94>)
 8007204:	9801      	ldr	r0, [sp, #4]
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	b933      	cbnz	r3, 8007218 <_free_r+0x30>
 800720a:	6063      	str	r3, [r4, #4]
 800720c:	6014      	str	r4, [r2, #0]
 800720e:	b003      	add	sp, #12
 8007210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007214:	f001 b82a 	b.w	800826c <__malloc_unlock>
 8007218:	42a3      	cmp	r3, r4
 800721a:	d908      	bls.n	800722e <_free_r+0x46>
 800721c:	6825      	ldr	r5, [r4, #0]
 800721e:	1961      	adds	r1, r4, r5
 8007220:	428b      	cmp	r3, r1
 8007222:	bf01      	itttt	eq
 8007224:	6819      	ldreq	r1, [r3, #0]
 8007226:	685b      	ldreq	r3, [r3, #4]
 8007228:	1949      	addeq	r1, r1, r5
 800722a:	6021      	streq	r1, [r4, #0]
 800722c:	e7ed      	b.n	800720a <_free_r+0x22>
 800722e:	461a      	mov	r2, r3
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b10b      	cbz	r3, 8007238 <_free_r+0x50>
 8007234:	42a3      	cmp	r3, r4
 8007236:	d9fa      	bls.n	800722e <_free_r+0x46>
 8007238:	6811      	ldr	r1, [r2, #0]
 800723a:	1855      	adds	r5, r2, r1
 800723c:	42a5      	cmp	r5, r4
 800723e:	d10b      	bne.n	8007258 <_free_r+0x70>
 8007240:	6824      	ldr	r4, [r4, #0]
 8007242:	4421      	add	r1, r4
 8007244:	1854      	adds	r4, r2, r1
 8007246:	42a3      	cmp	r3, r4
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	d1e0      	bne.n	800720e <_free_r+0x26>
 800724c:	681c      	ldr	r4, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	6053      	str	r3, [r2, #4]
 8007252:	4421      	add	r1, r4
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	e7da      	b.n	800720e <_free_r+0x26>
 8007258:	d902      	bls.n	8007260 <_free_r+0x78>
 800725a:	230c      	movs	r3, #12
 800725c:	6003      	str	r3, [r0, #0]
 800725e:	e7d6      	b.n	800720e <_free_r+0x26>
 8007260:	6825      	ldr	r5, [r4, #0]
 8007262:	1961      	adds	r1, r4, r5
 8007264:	428b      	cmp	r3, r1
 8007266:	bf04      	itt	eq
 8007268:	6819      	ldreq	r1, [r3, #0]
 800726a:	685b      	ldreq	r3, [r3, #4]
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	bf04      	itt	eq
 8007270:	1949      	addeq	r1, r1, r5
 8007272:	6021      	streq	r1, [r4, #0]
 8007274:	6054      	str	r4, [r2, #4]
 8007276:	e7ca      	b.n	800720e <_free_r+0x26>
 8007278:	b003      	add	sp, #12
 800727a:	bd30      	pop	{r4, r5, pc}
 800727c:	20001258 	.word	0x20001258

08007280 <sbrk_aligned>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4e0e      	ldr	r6, [pc, #56]	; (80072bc <sbrk_aligned+0x3c>)
 8007284:	460c      	mov	r4, r1
 8007286:	6831      	ldr	r1, [r6, #0]
 8007288:	4605      	mov	r5, r0
 800728a:	b911      	cbnz	r1, 8007292 <sbrk_aligned+0x12>
 800728c:	f000 fcd6 	bl	8007c3c <_sbrk_r>
 8007290:	6030      	str	r0, [r6, #0]
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f000 fcd1 	bl	8007c3c <_sbrk_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d00a      	beq.n	80072b4 <sbrk_aligned+0x34>
 800729e:	1cc4      	adds	r4, r0, #3
 80072a0:	f024 0403 	bic.w	r4, r4, #3
 80072a4:	42a0      	cmp	r0, r4
 80072a6:	d007      	beq.n	80072b8 <sbrk_aligned+0x38>
 80072a8:	1a21      	subs	r1, r4, r0
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 fcc6 	bl	8007c3c <_sbrk_r>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d101      	bne.n	80072b8 <sbrk_aligned+0x38>
 80072b4:	f04f 34ff 	mov.w	r4, #4294967295
 80072b8:	4620      	mov	r0, r4
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	2000125c 	.word	0x2000125c

080072c0 <_malloc_r>:
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	1ccd      	adds	r5, r1, #3
 80072c6:	f025 0503 	bic.w	r5, r5, #3
 80072ca:	3508      	adds	r5, #8
 80072cc:	2d0c      	cmp	r5, #12
 80072ce:	bf38      	it	cc
 80072d0:	250c      	movcc	r5, #12
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	4607      	mov	r7, r0
 80072d6:	db01      	blt.n	80072dc <_malloc_r+0x1c>
 80072d8:	42a9      	cmp	r1, r5
 80072da:	d905      	bls.n	80072e8 <_malloc_r+0x28>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	2600      	movs	r6, #0
 80072e2:	4630      	mov	r0, r6
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	4e2e      	ldr	r6, [pc, #184]	; (80073a4 <_malloc_r+0xe4>)
 80072ea:	f000 ffb9 	bl	8008260 <__malloc_lock>
 80072ee:	6833      	ldr	r3, [r6, #0]
 80072f0:	461c      	mov	r4, r3
 80072f2:	bb34      	cbnz	r4, 8007342 <_malloc_r+0x82>
 80072f4:	4629      	mov	r1, r5
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7ff ffc2 	bl	8007280 <sbrk_aligned>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	4604      	mov	r4, r0
 8007300:	d14d      	bne.n	800739e <_malloc_r+0xde>
 8007302:	6834      	ldr	r4, [r6, #0]
 8007304:	4626      	mov	r6, r4
 8007306:	2e00      	cmp	r6, #0
 8007308:	d140      	bne.n	800738c <_malloc_r+0xcc>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	4631      	mov	r1, r6
 800730e:	4638      	mov	r0, r7
 8007310:	eb04 0803 	add.w	r8, r4, r3
 8007314:	f000 fc92 	bl	8007c3c <_sbrk_r>
 8007318:	4580      	cmp	r8, r0
 800731a:	d13a      	bne.n	8007392 <_malloc_r+0xd2>
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	3503      	adds	r5, #3
 8007320:	1a6d      	subs	r5, r5, r1
 8007322:	f025 0503 	bic.w	r5, r5, #3
 8007326:	3508      	adds	r5, #8
 8007328:	2d0c      	cmp	r5, #12
 800732a:	bf38      	it	cc
 800732c:	250c      	movcc	r5, #12
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ffa5 	bl	8007280 <sbrk_aligned>
 8007336:	3001      	adds	r0, #1
 8007338:	d02b      	beq.n	8007392 <_malloc_r+0xd2>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	442b      	add	r3, r5
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	e00e      	b.n	8007360 <_malloc_r+0xa0>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	1b52      	subs	r2, r2, r5
 8007346:	d41e      	bmi.n	8007386 <_malloc_r+0xc6>
 8007348:	2a0b      	cmp	r2, #11
 800734a:	d916      	bls.n	800737a <_malloc_r+0xba>
 800734c:	1961      	adds	r1, r4, r5
 800734e:	42a3      	cmp	r3, r4
 8007350:	6025      	str	r5, [r4, #0]
 8007352:	bf18      	it	ne
 8007354:	6059      	strne	r1, [r3, #4]
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	bf08      	it	eq
 800735a:	6031      	streq	r1, [r6, #0]
 800735c:	5162      	str	r2, [r4, r5]
 800735e:	604b      	str	r3, [r1, #4]
 8007360:	4638      	mov	r0, r7
 8007362:	f104 060b 	add.w	r6, r4, #11
 8007366:	f000 ff81 	bl	800826c <__malloc_unlock>
 800736a:	f026 0607 	bic.w	r6, r6, #7
 800736e:	1d23      	adds	r3, r4, #4
 8007370:	1af2      	subs	r2, r6, r3
 8007372:	d0b6      	beq.n	80072e2 <_malloc_r+0x22>
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	50a3      	str	r3, [r4, r2]
 8007378:	e7b3      	b.n	80072e2 <_malloc_r+0x22>
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	42a3      	cmp	r3, r4
 800737e:	bf0c      	ite	eq
 8007380:	6032      	streq	r2, [r6, #0]
 8007382:	605a      	strne	r2, [r3, #4]
 8007384:	e7ec      	b.n	8007360 <_malloc_r+0xa0>
 8007386:	4623      	mov	r3, r4
 8007388:	6864      	ldr	r4, [r4, #4]
 800738a:	e7b2      	b.n	80072f2 <_malloc_r+0x32>
 800738c:	4634      	mov	r4, r6
 800738e:	6876      	ldr	r6, [r6, #4]
 8007390:	e7b9      	b.n	8007306 <_malloc_r+0x46>
 8007392:	230c      	movs	r3, #12
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	4638      	mov	r0, r7
 8007398:	f000 ff68 	bl	800826c <__malloc_unlock>
 800739c:	e7a1      	b.n	80072e2 <_malloc_r+0x22>
 800739e:	6025      	str	r5, [r4, #0]
 80073a0:	e7de      	b.n	8007360 <_malloc_r+0xa0>
 80073a2:	bf00      	nop
 80073a4:	20001258 	.word	0x20001258

080073a8 <__ssputs_r>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	688e      	ldr	r6, [r1, #8]
 80073ae:	429e      	cmp	r6, r3
 80073b0:	4682      	mov	sl, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	4690      	mov	r8, r2
 80073b6:	461f      	mov	r7, r3
 80073b8:	d838      	bhi.n	800742c <__ssputs_r+0x84>
 80073ba:	898a      	ldrh	r2, [r1, #12]
 80073bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c0:	d032      	beq.n	8007428 <__ssputs_r+0x80>
 80073c2:	6825      	ldr	r5, [r4, #0]
 80073c4:	6909      	ldr	r1, [r1, #16]
 80073c6:	eba5 0901 	sub.w	r9, r5, r1
 80073ca:	6965      	ldr	r5, [r4, #20]
 80073cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d4:	3301      	adds	r3, #1
 80073d6:	444b      	add	r3, r9
 80073d8:	106d      	asrs	r5, r5, #1
 80073da:	429d      	cmp	r5, r3
 80073dc:	bf38      	it	cc
 80073de:	461d      	movcc	r5, r3
 80073e0:	0553      	lsls	r3, r2, #21
 80073e2:	d531      	bpl.n	8007448 <__ssputs_r+0xa0>
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7ff ff6b 	bl	80072c0 <_malloc_r>
 80073ea:	4606      	mov	r6, r0
 80073ec:	b950      	cbnz	r0, 8007404 <__ssputs_r+0x5c>
 80073ee:	230c      	movs	r3, #12
 80073f0:	f8ca 3000 	str.w	r3, [sl]
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	6921      	ldr	r1, [r4, #16]
 8007406:	464a      	mov	r2, r9
 8007408:	f7ff fee0 	bl	80071cc <memcpy>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	6126      	str	r6, [r4, #16]
 800741a:	6165      	str	r5, [r4, #20]
 800741c:	444e      	add	r6, r9
 800741e:	eba5 0509 	sub.w	r5, r5, r9
 8007422:	6026      	str	r6, [r4, #0]
 8007424:	60a5      	str	r5, [r4, #8]
 8007426:	463e      	mov	r6, r7
 8007428:	42be      	cmp	r6, r7
 800742a:	d900      	bls.n	800742e <__ssputs_r+0x86>
 800742c:	463e      	mov	r6, r7
 800742e:	6820      	ldr	r0, [r4, #0]
 8007430:	4632      	mov	r2, r6
 8007432:	4641      	mov	r1, r8
 8007434:	f000 fefa 	bl	800822c <memmove>
 8007438:	68a3      	ldr	r3, [r4, #8]
 800743a:	1b9b      	subs	r3, r3, r6
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4433      	add	r3, r6
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	2000      	movs	r0, #0
 8007446:	e7db      	b.n	8007400 <__ssputs_r+0x58>
 8007448:	462a      	mov	r2, r5
 800744a:	f000 ff15 	bl	8008278 <_realloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d1e1      	bne.n	8007418 <__ssputs_r+0x70>
 8007454:	6921      	ldr	r1, [r4, #16]
 8007456:	4650      	mov	r0, sl
 8007458:	f7ff fec6 	bl	80071e8 <_free_r>
 800745c:	e7c7      	b.n	80073ee <__ssputs_r+0x46>
	...

08007460 <_svfiprintf_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4698      	mov	r8, r3
 8007466:	898b      	ldrh	r3, [r1, #12]
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	b09d      	sub	sp, #116	; 0x74
 800746c:	4607      	mov	r7, r0
 800746e:	460d      	mov	r5, r1
 8007470:	4614      	mov	r4, r2
 8007472:	d50e      	bpl.n	8007492 <_svfiprintf_r+0x32>
 8007474:	690b      	ldr	r3, [r1, #16]
 8007476:	b963      	cbnz	r3, 8007492 <_svfiprintf_r+0x32>
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	f7ff ff21 	bl	80072c0 <_malloc_r>
 800747e:	6028      	str	r0, [r5, #0]
 8007480:	6128      	str	r0, [r5, #16]
 8007482:	b920      	cbnz	r0, 800748e <_svfiprintf_r+0x2e>
 8007484:	230c      	movs	r3, #12
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e0d1      	b.n	8007632 <_svfiprintf_r+0x1d2>
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	616b      	str	r3, [r5, #20]
 8007492:	2300      	movs	r3, #0
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	2320      	movs	r3, #32
 8007498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749c:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a0:	2330      	movs	r3, #48	; 0x30
 80074a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800764c <_svfiprintf_r+0x1ec>
 80074a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074aa:	f04f 0901 	mov.w	r9, #1
 80074ae:	4623      	mov	r3, r4
 80074b0:	469a      	mov	sl, r3
 80074b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b6:	b10a      	cbz	r2, 80074bc <_svfiprintf_r+0x5c>
 80074b8:	2a25      	cmp	r2, #37	; 0x25
 80074ba:	d1f9      	bne.n	80074b0 <_svfiprintf_r+0x50>
 80074bc:	ebba 0b04 	subs.w	fp, sl, r4
 80074c0:	d00b      	beq.n	80074da <_svfiprintf_r+0x7a>
 80074c2:	465b      	mov	r3, fp
 80074c4:	4622      	mov	r2, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff ff6d 	bl	80073a8 <__ssputs_r>
 80074ce:	3001      	adds	r0, #1
 80074d0:	f000 80aa 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d6:	445a      	add	r2, fp
 80074d8:	9209      	str	r2, [sp, #36]	; 0x24
 80074da:	f89a 3000 	ldrb.w	r3, [sl]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80a2 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ee:	f10a 0a01 	add.w	sl, sl, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	9307      	str	r3, [sp, #28]
 80074f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fa:	931a      	str	r3, [sp, #104]	; 0x68
 80074fc:	4654      	mov	r4, sl
 80074fe:	2205      	movs	r2, #5
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	4851      	ldr	r0, [pc, #324]	; (800764c <_svfiprintf_r+0x1ec>)
 8007506:	f7f8 fe6b 	bl	80001e0 <memchr>
 800750a:	9a04      	ldr	r2, [sp, #16]
 800750c:	b9d8      	cbnz	r0, 8007546 <_svfiprintf_r+0xe6>
 800750e:	06d0      	lsls	r0, r2, #27
 8007510:	bf44      	itt	mi
 8007512:	2320      	movmi	r3, #32
 8007514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007518:	0711      	lsls	r1, r2, #28
 800751a:	bf44      	itt	mi
 800751c:	232b      	movmi	r3, #43	; 0x2b
 800751e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	d015      	beq.n	8007556 <_svfiprintf_r+0xf6>
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	4654      	mov	r4, sl
 800752e:	2000      	movs	r0, #0
 8007530:	f04f 0c0a 	mov.w	ip, #10
 8007534:	4621      	mov	r1, r4
 8007536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753a:	3b30      	subs	r3, #48	; 0x30
 800753c:	2b09      	cmp	r3, #9
 800753e:	d94e      	bls.n	80075de <_svfiprintf_r+0x17e>
 8007540:	b1b0      	cbz	r0, 8007570 <_svfiprintf_r+0x110>
 8007542:	9207      	str	r2, [sp, #28]
 8007544:	e014      	b.n	8007570 <_svfiprintf_r+0x110>
 8007546:	eba0 0308 	sub.w	r3, r0, r8
 800754a:	fa09 f303 	lsl.w	r3, r9, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	46a2      	mov	sl, r4
 8007554:	e7d2      	b.n	80074fc <_svfiprintf_r+0x9c>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	1d19      	adds	r1, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9103      	str	r1, [sp, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfbb      	ittet	lt
 8007562:	425b      	neglt	r3, r3
 8007564:	f042 0202 	orrlt.w	r2, r2, #2
 8007568:	9307      	strge	r3, [sp, #28]
 800756a:	9307      	strlt	r3, [sp, #28]
 800756c:	bfb8      	it	lt
 800756e:	9204      	strlt	r2, [sp, #16]
 8007570:	7823      	ldrb	r3, [r4, #0]
 8007572:	2b2e      	cmp	r3, #46	; 0x2e
 8007574:	d10c      	bne.n	8007590 <_svfiprintf_r+0x130>
 8007576:	7863      	ldrb	r3, [r4, #1]
 8007578:	2b2a      	cmp	r3, #42	; 0x2a
 800757a:	d135      	bne.n	80075e8 <_svfiprintf_r+0x188>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	1d1a      	adds	r2, r3, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	9203      	str	r2, [sp, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	bfb8      	it	lt
 8007588:	f04f 33ff 	movlt.w	r3, #4294967295
 800758c:	3402      	adds	r4, #2
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800765c <_svfiprintf_r+0x1fc>
 8007594:	7821      	ldrb	r1, [r4, #0]
 8007596:	2203      	movs	r2, #3
 8007598:	4650      	mov	r0, sl
 800759a:	f7f8 fe21 	bl	80001e0 <memchr>
 800759e:	b140      	cbz	r0, 80075b2 <_svfiprintf_r+0x152>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	eba0 000a 	sub.w	r0, r0, sl
 80075a6:	fa03 f000 	lsl.w	r0, r3, r0
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	4303      	orrs	r3, r0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	4826      	ldr	r0, [pc, #152]	; (8007650 <_svfiprintf_r+0x1f0>)
 80075b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075bc:	2206      	movs	r2, #6
 80075be:	f7f8 fe0f 	bl	80001e0 <memchr>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d038      	beq.n	8007638 <_svfiprintf_r+0x1d8>
 80075c6:	4b23      	ldr	r3, [pc, #140]	; (8007654 <_svfiprintf_r+0x1f4>)
 80075c8:	bb1b      	cbnz	r3, 8007612 <_svfiprintf_r+0x1b2>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	f023 0307 	bic.w	r3, r3, #7
 80075d2:	3308      	adds	r3, #8
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d8:	4433      	add	r3, r6
 80075da:	9309      	str	r3, [sp, #36]	; 0x24
 80075dc:	e767      	b.n	80074ae <_svfiprintf_r+0x4e>
 80075de:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e2:	460c      	mov	r4, r1
 80075e4:	2001      	movs	r0, #1
 80075e6:	e7a5      	b.n	8007534 <_svfiprintf_r+0xd4>
 80075e8:	2300      	movs	r3, #0
 80075ea:	3401      	adds	r4, #1
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	4619      	mov	r1, r3
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4620      	mov	r0, r4
 80075f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fa:	3a30      	subs	r2, #48	; 0x30
 80075fc:	2a09      	cmp	r2, #9
 80075fe:	d903      	bls.n	8007608 <_svfiprintf_r+0x1a8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0c5      	beq.n	8007590 <_svfiprintf_r+0x130>
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	e7c3      	b.n	8007590 <_svfiprintf_r+0x130>
 8007608:	fb0c 2101 	mla	r1, ip, r1, r2
 800760c:	4604      	mov	r4, r0
 800760e:	2301      	movs	r3, #1
 8007610:	e7f0      	b.n	80075f4 <_svfiprintf_r+0x194>
 8007612:	ab03      	add	r3, sp, #12
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	462a      	mov	r2, r5
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <_svfiprintf_r+0x1f8>)
 800761a:	a904      	add	r1, sp, #16
 800761c:	4638      	mov	r0, r7
 800761e:	f3af 8000 	nop.w
 8007622:	1c42      	adds	r2, r0, #1
 8007624:	4606      	mov	r6, r0
 8007626:	d1d6      	bne.n	80075d6 <_svfiprintf_r+0x176>
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	065b      	lsls	r3, r3, #25
 800762c:	f53f af2c 	bmi.w	8007488 <_svfiprintf_r+0x28>
 8007630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007632:	b01d      	add	sp, #116	; 0x74
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	ab03      	add	r3, sp, #12
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	462a      	mov	r2, r5
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <_svfiprintf_r+0x1f8>)
 8007640:	a904      	add	r1, sp, #16
 8007642:	4638      	mov	r0, r7
 8007644:	f000 f9d4 	bl	80079f0 <_printf_i>
 8007648:	e7eb      	b.n	8007622 <_svfiprintf_r+0x1c2>
 800764a:	bf00      	nop
 800764c:	0800c38a 	.word	0x0800c38a
 8007650:	0800c394 	.word	0x0800c394
 8007654:	00000000 	.word	0x00000000
 8007658:	080073a9 	.word	0x080073a9
 800765c:	0800c390 	.word	0x0800c390

08007660 <__sfputc_r>:
 8007660:	6893      	ldr	r3, [r2, #8]
 8007662:	3b01      	subs	r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	b410      	push	{r4}
 8007668:	6093      	str	r3, [r2, #8]
 800766a:	da08      	bge.n	800767e <__sfputc_r+0x1e>
 800766c:	6994      	ldr	r4, [r2, #24]
 800766e:	42a3      	cmp	r3, r4
 8007670:	db01      	blt.n	8007676 <__sfputc_r+0x16>
 8007672:	290a      	cmp	r1, #10
 8007674:	d103      	bne.n	800767e <__sfputc_r+0x1e>
 8007676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800767a:	f000 baef 	b.w	8007c5c <__swbuf_r>
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	1c58      	adds	r0, r3, #1
 8007682:	6010      	str	r0, [r2, #0]
 8007684:	7019      	strb	r1, [r3, #0]
 8007686:	4608      	mov	r0, r1
 8007688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800768c:	4770      	bx	lr

0800768e <__sfputs_r>:
 800768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	4614      	mov	r4, r2
 8007696:	18d5      	adds	r5, r2, r3
 8007698:	42ac      	cmp	r4, r5
 800769a:	d101      	bne.n	80076a0 <__sfputs_r+0x12>
 800769c:	2000      	movs	r0, #0
 800769e:	e007      	b.n	80076b0 <__sfputs_r+0x22>
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	463a      	mov	r2, r7
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7ff ffda 	bl	8007660 <__sfputc_r>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d1f3      	bne.n	8007698 <__sfputs_r+0xa>
 80076b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b4 <_vfiprintf_r>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	460d      	mov	r5, r1
 80076ba:	b09d      	sub	sp, #116	; 0x74
 80076bc:	4614      	mov	r4, r2
 80076be:	4698      	mov	r8, r3
 80076c0:	4606      	mov	r6, r0
 80076c2:	b118      	cbz	r0, 80076cc <_vfiprintf_r+0x18>
 80076c4:	6983      	ldr	r3, [r0, #24]
 80076c6:	b90b      	cbnz	r3, 80076cc <_vfiprintf_r+0x18>
 80076c8:	f000 fcaa 	bl	8008020 <__sinit>
 80076cc:	4b89      	ldr	r3, [pc, #548]	; (80078f4 <_vfiprintf_r+0x240>)
 80076ce:	429d      	cmp	r5, r3
 80076d0:	d11b      	bne.n	800770a <_vfiprintf_r+0x56>
 80076d2:	6875      	ldr	r5, [r6, #4]
 80076d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d6:	07d9      	lsls	r1, r3, #31
 80076d8:	d405      	bmi.n	80076e6 <_vfiprintf_r+0x32>
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	059a      	lsls	r2, r3, #22
 80076de:	d402      	bmi.n	80076e6 <_vfiprintf_r+0x32>
 80076e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e2:	f000 fd3b 	bl	800815c <__retarget_lock_acquire_recursive>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	071b      	lsls	r3, r3, #28
 80076ea:	d501      	bpl.n	80076f0 <_vfiprintf_r+0x3c>
 80076ec:	692b      	ldr	r3, [r5, #16]
 80076ee:	b9eb      	cbnz	r3, 800772c <_vfiprintf_r+0x78>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 fb04 	bl	8007d00 <__swsetup_r>
 80076f8:	b1c0      	cbz	r0, 800772c <_vfiprintf_r+0x78>
 80076fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076fc:	07dc      	lsls	r4, r3, #31
 80076fe:	d50e      	bpl.n	800771e <_vfiprintf_r+0x6a>
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	b01d      	add	sp, #116	; 0x74
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	4b7b      	ldr	r3, [pc, #492]	; (80078f8 <_vfiprintf_r+0x244>)
 800770c:	429d      	cmp	r5, r3
 800770e:	d101      	bne.n	8007714 <_vfiprintf_r+0x60>
 8007710:	68b5      	ldr	r5, [r6, #8]
 8007712:	e7df      	b.n	80076d4 <_vfiprintf_r+0x20>
 8007714:	4b79      	ldr	r3, [pc, #484]	; (80078fc <_vfiprintf_r+0x248>)
 8007716:	429d      	cmp	r5, r3
 8007718:	bf08      	it	eq
 800771a:	68f5      	ldreq	r5, [r6, #12]
 800771c:	e7da      	b.n	80076d4 <_vfiprintf_r+0x20>
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d4ed      	bmi.n	8007700 <_vfiprintf_r+0x4c>
 8007724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007726:	f000 fd1a 	bl	800815e <__retarget_lock_release_recursive>
 800772a:	e7e9      	b.n	8007700 <_vfiprintf_r+0x4c>
 800772c:	2300      	movs	r3, #0
 800772e:	9309      	str	r3, [sp, #36]	; 0x24
 8007730:	2320      	movs	r3, #32
 8007732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007736:	f8cd 800c 	str.w	r8, [sp, #12]
 800773a:	2330      	movs	r3, #48	; 0x30
 800773c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007900 <_vfiprintf_r+0x24c>
 8007740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007744:	f04f 0901 	mov.w	r9, #1
 8007748:	4623      	mov	r3, r4
 800774a:	469a      	mov	sl, r3
 800774c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007750:	b10a      	cbz	r2, 8007756 <_vfiprintf_r+0xa2>
 8007752:	2a25      	cmp	r2, #37	; 0x25
 8007754:	d1f9      	bne.n	800774a <_vfiprintf_r+0x96>
 8007756:	ebba 0b04 	subs.w	fp, sl, r4
 800775a:	d00b      	beq.n	8007774 <_vfiprintf_r+0xc0>
 800775c:	465b      	mov	r3, fp
 800775e:	4622      	mov	r2, r4
 8007760:	4629      	mov	r1, r5
 8007762:	4630      	mov	r0, r6
 8007764:	f7ff ff93 	bl	800768e <__sfputs_r>
 8007768:	3001      	adds	r0, #1
 800776a:	f000 80aa 	beq.w	80078c2 <_vfiprintf_r+0x20e>
 800776e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007770:	445a      	add	r2, fp
 8007772:	9209      	str	r2, [sp, #36]	; 0x24
 8007774:	f89a 3000 	ldrb.w	r3, [sl]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 80a2 	beq.w	80078c2 <_vfiprintf_r+0x20e>
 800777e:	2300      	movs	r3, #0
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007788:	f10a 0a01 	add.w	sl, sl, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007794:	931a      	str	r3, [sp, #104]	; 0x68
 8007796:	4654      	mov	r4, sl
 8007798:	2205      	movs	r2, #5
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	4858      	ldr	r0, [pc, #352]	; (8007900 <_vfiprintf_r+0x24c>)
 80077a0:	f7f8 fd1e 	bl	80001e0 <memchr>
 80077a4:	9a04      	ldr	r2, [sp, #16]
 80077a6:	b9d8      	cbnz	r0, 80077e0 <_vfiprintf_r+0x12c>
 80077a8:	06d1      	lsls	r1, r2, #27
 80077aa:	bf44      	itt	mi
 80077ac:	2320      	movmi	r3, #32
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b2:	0713      	lsls	r3, r2, #28
 80077b4:	bf44      	itt	mi
 80077b6:	232b      	movmi	r3, #43	; 0x2b
 80077b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077bc:	f89a 3000 	ldrb.w	r3, [sl]
 80077c0:	2b2a      	cmp	r3, #42	; 0x2a
 80077c2:	d015      	beq.n	80077f0 <_vfiprintf_r+0x13c>
 80077c4:	9a07      	ldr	r2, [sp, #28]
 80077c6:	4654      	mov	r4, sl
 80077c8:	2000      	movs	r0, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d4:	3b30      	subs	r3, #48	; 0x30
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d94e      	bls.n	8007878 <_vfiprintf_r+0x1c4>
 80077da:	b1b0      	cbz	r0, 800780a <_vfiprintf_r+0x156>
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	e014      	b.n	800780a <_vfiprintf_r+0x156>
 80077e0:	eba0 0308 	sub.w	r3, r0, r8
 80077e4:	fa09 f303 	lsl.w	r3, r9, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	46a2      	mov	sl, r4
 80077ee:	e7d2      	b.n	8007796 <_vfiprintf_r+0xe2>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	1d19      	adds	r1, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9103      	str	r1, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfbb      	ittet	lt
 80077fc:	425b      	neglt	r3, r3
 80077fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007802:	9307      	strge	r3, [sp, #28]
 8007804:	9307      	strlt	r3, [sp, #28]
 8007806:	bfb8      	it	lt
 8007808:	9204      	strlt	r2, [sp, #16]
 800780a:	7823      	ldrb	r3, [r4, #0]
 800780c:	2b2e      	cmp	r3, #46	; 0x2e
 800780e:	d10c      	bne.n	800782a <_vfiprintf_r+0x176>
 8007810:	7863      	ldrb	r3, [r4, #1]
 8007812:	2b2a      	cmp	r3, #42	; 0x2a
 8007814:	d135      	bne.n	8007882 <_vfiprintf_r+0x1ce>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d1a      	adds	r2, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9203      	str	r2, [sp, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfb8      	it	lt
 8007822:	f04f 33ff 	movlt.w	r3, #4294967295
 8007826:	3402      	adds	r4, #2
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007910 <_vfiprintf_r+0x25c>
 800782e:	7821      	ldrb	r1, [r4, #0]
 8007830:	2203      	movs	r2, #3
 8007832:	4650      	mov	r0, sl
 8007834:	f7f8 fcd4 	bl	80001e0 <memchr>
 8007838:	b140      	cbz	r0, 800784c <_vfiprintf_r+0x198>
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	eba0 000a 	sub.w	r0, r0, sl
 8007840:	fa03 f000 	lsl.w	r0, r3, r0
 8007844:	9b04      	ldr	r3, [sp, #16]
 8007846:	4303      	orrs	r3, r0
 8007848:	3401      	adds	r4, #1
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007850:	482c      	ldr	r0, [pc, #176]	; (8007904 <_vfiprintf_r+0x250>)
 8007852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007856:	2206      	movs	r2, #6
 8007858:	f7f8 fcc2 	bl	80001e0 <memchr>
 800785c:	2800      	cmp	r0, #0
 800785e:	d03f      	beq.n	80078e0 <_vfiprintf_r+0x22c>
 8007860:	4b29      	ldr	r3, [pc, #164]	; (8007908 <_vfiprintf_r+0x254>)
 8007862:	bb1b      	cbnz	r3, 80078ac <_vfiprintf_r+0x1f8>
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	3307      	adds	r3, #7
 8007868:	f023 0307 	bic.w	r3, r3, #7
 800786c:	3308      	adds	r3, #8
 800786e:	9303      	str	r3, [sp, #12]
 8007870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007872:	443b      	add	r3, r7
 8007874:	9309      	str	r3, [sp, #36]	; 0x24
 8007876:	e767      	b.n	8007748 <_vfiprintf_r+0x94>
 8007878:	fb0c 3202 	mla	r2, ip, r2, r3
 800787c:	460c      	mov	r4, r1
 800787e:	2001      	movs	r0, #1
 8007880:	e7a5      	b.n	80077ce <_vfiprintf_r+0x11a>
 8007882:	2300      	movs	r3, #0
 8007884:	3401      	adds	r4, #1
 8007886:	9305      	str	r3, [sp, #20]
 8007888:	4619      	mov	r1, r3
 800788a:	f04f 0c0a 	mov.w	ip, #10
 800788e:	4620      	mov	r0, r4
 8007890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007894:	3a30      	subs	r2, #48	; 0x30
 8007896:	2a09      	cmp	r2, #9
 8007898:	d903      	bls.n	80078a2 <_vfiprintf_r+0x1ee>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0c5      	beq.n	800782a <_vfiprintf_r+0x176>
 800789e:	9105      	str	r1, [sp, #20]
 80078a0:	e7c3      	b.n	800782a <_vfiprintf_r+0x176>
 80078a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078a6:	4604      	mov	r4, r0
 80078a8:	2301      	movs	r3, #1
 80078aa:	e7f0      	b.n	800788e <_vfiprintf_r+0x1da>
 80078ac:	ab03      	add	r3, sp, #12
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	462a      	mov	r2, r5
 80078b2:	4b16      	ldr	r3, [pc, #88]	; (800790c <_vfiprintf_r+0x258>)
 80078b4:	a904      	add	r1, sp, #16
 80078b6:	4630      	mov	r0, r6
 80078b8:	f3af 8000 	nop.w
 80078bc:	4607      	mov	r7, r0
 80078be:	1c78      	adds	r0, r7, #1
 80078c0:	d1d6      	bne.n	8007870 <_vfiprintf_r+0x1bc>
 80078c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c4:	07d9      	lsls	r1, r3, #31
 80078c6:	d405      	bmi.n	80078d4 <_vfiprintf_r+0x220>
 80078c8:	89ab      	ldrh	r3, [r5, #12]
 80078ca:	059a      	lsls	r2, r3, #22
 80078cc:	d402      	bmi.n	80078d4 <_vfiprintf_r+0x220>
 80078ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d0:	f000 fc45 	bl	800815e <__retarget_lock_release_recursive>
 80078d4:	89ab      	ldrh	r3, [r5, #12]
 80078d6:	065b      	lsls	r3, r3, #25
 80078d8:	f53f af12 	bmi.w	8007700 <_vfiprintf_r+0x4c>
 80078dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078de:	e711      	b.n	8007704 <_vfiprintf_r+0x50>
 80078e0:	ab03      	add	r3, sp, #12
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	462a      	mov	r2, r5
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <_vfiprintf_r+0x258>)
 80078e8:	a904      	add	r1, sp, #16
 80078ea:	4630      	mov	r0, r6
 80078ec:	f000 f880 	bl	80079f0 <_printf_i>
 80078f0:	e7e4      	b.n	80078bc <_vfiprintf_r+0x208>
 80078f2:	bf00      	nop
 80078f4:	0800c3e0 	.word	0x0800c3e0
 80078f8:	0800c400 	.word	0x0800c400
 80078fc:	0800c3c0 	.word	0x0800c3c0
 8007900:	0800c38a 	.word	0x0800c38a
 8007904:	0800c394 	.word	0x0800c394
 8007908:	00000000 	.word	0x00000000
 800790c:	0800768f 	.word	0x0800768f
 8007910:	0800c390 	.word	0x0800c390

08007914 <_printf_common>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	4616      	mov	r6, r2
 800791a:	4699      	mov	r9, r3
 800791c:	688a      	ldr	r2, [r1, #8]
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007924:	4293      	cmp	r3, r2
 8007926:	bfb8      	it	lt
 8007928:	4613      	movlt	r3, r2
 800792a:	6033      	str	r3, [r6, #0]
 800792c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007930:	4607      	mov	r7, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b10a      	cbz	r2, 800793a <_printf_common+0x26>
 8007936:	3301      	adds	r3, #1
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	0699      	lsls	r1, r3, #26
 800793e:	bf42      	ittt	mi
 8007940:	6833      	ldrmi	r3, [r6, #0]
 8007942:	3302      	addmi	r3, #2
 8007944:	6033      	strmi	r3, [r6, #0]
 8007946:	6825      	ldr	r5, [r4, #0]
 8007948:	f015 0506 	ands.w	r5, r5, #6
 800794c:	d106      	bne.n	800795c <_printf_common+0x48>
 800794e:	f104 0a19 	add.w	sl, r4, #25
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	6832      	ldr	r2, [r6, #0]
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	42ab      	cmp	r3, r5
 800795a:	dc26      	bgt.n	80079aa <_printf_common+0x96>
 800795c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007960:	1e13      	subs	r3, r2, #0
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	bf18      	it	ne
 8007966:	2301      	movne	r3, #1
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d42b      	bmi.n	80079c4 <_printf_common+0xb0>
 800796c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007970:	4649      	mov	r1, r9
 8007972:	4638      	mov	r0, r7
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d01e      	beq.n	80079b8 <_printf_common+0xa4>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	68e5      	ldr	r5, [r4, #12]
 800797e:	6832      	ldr	r2, [r6, #0]
 8007980:	f003 0306 	and.w	r3, r3, #6
 8007984:	2b04      	cmp	r3, #4
 8007986:	bf08      	it	eq
 8007988:	1aad      	subeq	r5, r5, r2
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	6922      	ldr	r2, [r4, #16]
 800798e:	bf0c      	ite	eq
 8007990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007994:	2500      	movne	r5, #0
 8007996:	4293      	cmp	r3, r2
 8007998:	bfc4      	itt	gt
 800799a:	1a9b      	subgt	r3, r3, r2
 800799c:	18ed      	addgt	r5, r5, r3
 800799e:	2600      	movs	r6, #0
 80079a0:	341a      	adds	r4, #26
 80079a2:	42b5      	cmp	r5, r6
 80079a4:	d11a      	bne.n	80079dc <_printf_common+0xc8>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e008      	b.n	80079bc <_printf_common+0xa8>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4652      	mov	r2, sl
 80079ae:	4649      	mov	r1, r9
 80079b0:	4638      	mov	r0, r7
 80079b2:	47c0      	blx	r8
 80079b4:	3001      	adds	r0, #1
 80079b6:	d103      	bne.n	80079c0 <_printf_common+0xac>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c0:	3501      	adds	r5, #1
 80079c2:	e7c6      	b.n	8007952 <_printf_common+0x3e>
 80079c4:	18e1      	adds	r1, r4, r3
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	2030      	movs	r0, #48	; 0x30
 80079ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ce:	4422      	add	r2, r4
 80079d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079d8:	3302      	adds	r3, #2
 80079da:	e7c7      	b.n	800796c <_printf_common+0x58>
 80079dc:	2301      	movs	r3, #1
 80079de:	4622      	mov	r2, r4
 80079e0:	4649      	mov	r1, r9
 80079e2:	4638      	mov	r0, r7
 80079e4:	47c0      	blx	r8
 80079e6:	3001      	adds	r0, #1
 80079e8:	d0e6      	beq.n	80079b8 <_printf_common+0xa4>
 80079ea:	3601      	adds	r6, #1
 80079ec:	e7d9      	b.n	80079a2 <_printf_common+0x8e>
	...

080079f0 <_printf_i>:
 80079f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079f4:	7e0f      	ldrb	r7, [r1, #24]
 80079f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079f8:	2f78      	cmp	r7, #120	; 0x78
 80079fa:	4691      	mov	r9, r2
 80079fc:	4680      	mov	r8, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	469a      	mov	sl, r3
 8007a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a06:	d807      	bhi.n	8007a18 <_printf_i+0x28>
 8007a08:	2f62      	cmp	r7, #98	; 0x62
 8007a0a:	d80a      	bhi.n	8007a22 <_printf_i+0x32>
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	f000 80d8 	beq.w	8007bc2 <_printf_i+0x1d2>
 8007a12:	2f58      	cmp	r7, #88	; 0x58
 8007a14:	f000 80a3 	beq.w	8007b5e <_printf_i+0x16e>
 8007a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a20:	e03a      	b.n	8007a98 <_printf_i+0xa8>
 8007a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a26:	2b15      	cmp	r3, #21
 8007a28:	d8f6      	bhi.n	8007a18 <_printf_i+0x28>
 8007a2a:	a101      	add	r1, pc, #4	; (adr r1, 8007a30 <_printf_i+0x40>)
 8007a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a30:	08007a89 	.word	0x08007a89
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a19 	.word	0x08007a19
 8007a3c:	08007a19 	.word	0x08007a19
 8007a40:	08007a19 	.word	0x08007a19
 8007a44:	08007a19 	.word	0x08007a19
 8007a48:	08007a9d 	.word	0x08007a9d
 8007a4c:	08007a19 	.word	0x08007a19
 8007a50:	08007a19 	.word	0x08007a19
 8007a54:	08007a19 	.word	0x08007a19
 8007a58:	08007a19 	.word	0x08007a19
 8007a5c:	08007ba9 	.word	0x08007ba9
 8007a60:	08007acd 	.word	0x08007acd
 8007a64:	08007b8b 	.word	0x08007b8b
 8007a68:	08007a19 	.word	0x08007a19
 8007a6c:	08007a19 	.word	0x08007a19
 8007a70:	08007bcb 	.word	0x08007bcb
 8007a74:	08007a19 	.word	0x08007a19
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007a19 	.word	0x08007a19
 8007a80:	08007a19 	.word	0x08007a19
 8007a84:	08007b93 	.word	0x08007b93
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	1d1a      	adds	r2, r3, #4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	602a      	str	r2, [r5, #0]
 8007a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0a3      	b.n	8007be4 <_printf_i+0x1f4>
 8007a9c:	6820      	ldr	r0, [r4, #0]
 8007a9e:	6829      	ldr	r1, [r5, #0]
 8007aa0:	0606      	lsls	r6, r0, #24
 8007aa2:	f101 0304 	add.w	r3, r1, #4
 8007aa6:	d50a      	bpl.n	8007abe <_printf_i+0xce>
 8007aa8:	680e      	ldr	r6, [r1, #0]
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	da03      	bge.n	8007ab8 <_printf_i+0xc8>
 8007ab0:	232d      	movs	r3, #45	; 0x2d
 8007ab2:	4276      	negs	r6, r6
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab8:	485e      	ldr	r0, [pc, #376]	; (8007c34 <_printf_i+0x244>)
 8007aba:	230a      	movs	r3, #10
 8007abc:	e019      	b.n	8007af2 <_printf_i+0x102>
 8007abe:	680e      	ldr	r6, [r1, #0]
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ac6:	bf18      	it	ne
 8007ac8:	b236      	sxthne	r6, r6
 8007aca:	e7ef      	b.n	8007aac <_printf_i+0xbc>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	6820      	ldr	r0, [r4, #0]
 8007ad0:	1d19      	adds	r1, r3, #4
 8007ad2:	6029      	str	r1, [r5, #0]
 8007ad4:	0601      	lsls	r1, r0, #24
 8007ad6:	d501      	bpl.n	8007adc <_printf_i+0xec>
 8007ad8:	681e      	ldr	r6, [r3, #0]
 8007ada:	e002      	b.n	8007ae2 <_printf_i+0xf2>
 8007adc:	0646      	lsls	r6, r0, #25
 8007ade:	d5fb      	bpl.n	8007ad8 <_printf_i+0xe8>
 8007ae0:	881e      	ldrh	r6, [r3, #0]
 8007ae2:	4854      	ldr	r0, [pc, #336]	; (8007c34 <_printf_i+0x244>)
 8007ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2308      	moveq	r3, #8
 8007aea:	230a      	movne	r3, #10
 8007aec:	2100      	movs	r1, #0
 8007aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007af2:	6865      	ldr	r5, [r4, #4]
 8007af4:	60a5      	str	r5, [r4, #8]
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	bfa2      	ittt	ge
 8007afa:	6821      	ldrge	r1, [r4, #0]
 8007afc:	f021 0104 	bicge.w	r1, r1, #4
 8007b00:	6021      	strge	r1, [r4, #0]
 8007b02:	b90e      	cbnz	r6, 8007b08 <_printf_i+0x118>
 8007b04:	2d00      	cmp	r5, #0
 8007b06:	d04d      	beq.n	8007ba4 <_printf_i+0x1b4>
 8007b08:	4615      	mov	r5, r2
 8007b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b12:	5dc7      	ldrb	r7, [r0, r7]
 8007b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b18:	4637      	mov	r7, r6
 8007b1a:	42bb      	cmp	r3, r7
 8007b1c:	460e      	mov	r6, r1
 8007b1e:	d9f4      	bls.n	8007b0a <_printf_i+0x11a>
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d10b      	bne.n	8007b3c <_printf_i+0x14c>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	07de      	lsls	r6, r3, #31
 8007b28:	d508      	bpl.n	8007b3c <_printf_i+0x14c>
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	6861      	ldr	r1, [r4, #4]
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	bfde      	ittt	le
 8007b32:	2330      	movle	r3, #48	; 0x30
 8007b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b3c:	1b52      	subs	r2, r2, r5
 8007b3e:	6122      	str	r2, [r4, #16]
 8007b40:	f8cd a000 	str.w	sl, [sp]
 8007b44:	464b      	mov	r3, r9
 8007b46:	aa03      	add	r2, sp, #12
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f7ff fee2 	bl	8007914 <_printf_common>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d14c      	bne.n	8007bee <_printf_i+0x1fe>
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	b004      	add	sp, #16
 8007b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5e:	4835      	ldr	r0, [pc, #212]	; (8007c34 <_printf_i+0x244>)
 8007b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b64:	6829      	ldr	r1, [r5, #0]
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b6c:	6029      	str	r1, [r5, #0]
 8007b6e:	061d      	lsls	r5, r3, #24
 8007b70:	d514      	bpl.n	8007b9c <_printf_i+0x1ac>
 8007b72:	07df      	lsls	r7, r3, #31
 8007b74:	bf44      	itt	mi
 8007b76:	f043 0320 	orrmi.w	r3, r3, #32
 8007b7a:	6023      	strmi	r3, [r4, #0]
 8007b7c:	b91e      	cbnz	r6, 8007b86 <_printf_i+0x196>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	f023 0320 	bic.w	r3, r3, #32
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	2310      	movs	r3, #16
 8007b88:	e7b0      	b.n	8007aec <_printf_i+0xfc>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f043 0320 	orr.w	r3, r3, #32
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	2378      	movs	r3, #120	; 0x78
 8007b94:	4828      	ldr	r0, [pc, #160]	; (8007c38 <_printf_i+0x248>)
 8007b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b9a:	e7e3      	b.n	8007b64 <_printf_i+0x174>
 8007b9c:	0659      	lsls	r1, r3, #25
 8007b9e:	bf48      	it	mi
 8007ba0:	b2b6      	uxthmi	r6, r6
 8007ba2:	e7e6      	b.n	8007b72 <_printf_i+0x182>
 8007ba4:	4615      	mov	r5, r2
 8007ba6:	e7bb      	b.n	8007b20 <_printf_i+0x130>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	6826      	ldr	r6, [r4, #0]
 8007bac:	6961      	ldr	r1, [r4, #20]
 8007bae:	1d18      	adds	r0, r3, #4
 8007bb0:	6028      	str	r0, [r5, #0]
 8007bb2:	0635      	lsls	r5, r6, #24
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	d501      	bpl.n	8007bbc <_printf_i+0x1cc>
 8007bb8:	6019      	str	r1, [r3, #0]
 8007bba:	e002      	b.n	8007bc2 <_printf_i+0x1d2>
 8007bbc:	0670      	lsls	r0, r6, #25
 8007bbe:	d5fb      	bpl.n	8007bb8 <_printf_i+0x1c8>
 8007bc0:	8019      	strh	r1, [r3, #0]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6123      	str	r3, [r4, #16]
 8007bc6:	4615      	mov	r5, r2
 8007bc8:	e7ba      	b.n	8007b40 <_printf_i+0x150>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	1d1a      	adds	r2, r3, #4
 8007bce:	602a      	str	r2, [r5, #0]
 8007bd0:	681d      	ldr	r5, [r3, #0]
 8007bd2:	6862      	ldr	r2, [r4, #4]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f7f8 fb02 	bl	80001e0 <memchr>
 8007bdc:	b108      	cbz	r0, 8007be2 <_printf_i+0x1f2>
 8007bde:	1b40      	subs	r0, r0, r5
 8007be0:	6060      	str	r0, [r4, #4]
 8007be2:	6863      	ldr	r3, [r4, #4]
 8007be4:	6123      	str	r3, [r4, #16]
 8007be6:	2300      	movs	r3, #0
 8007be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bec:	e7a8      	b.n	8007b40 <_printf_i+0x150>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	47d0      	blx	sl
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d0ab      	beq.n	8007b54 <_printf_i+0x164>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	079b      	lsls	r3, r3, #30
 8007c00:	d413      	bmi.n	8007c2a <_printf_i+0x23a>
 8007c02:	68e0      	ldr	r0, [r4, #12]
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	4298      	cmp	r0, r3
 8007c08:	bfb8      	it	lt
 8007c0a:	4618      	movlt	r0, r3
 8007c0c:	e7a4      	b.n	8007b58 <_printf_i+0x168>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4632      	mov	r2, r6
 8007c12:	4649      	mov	r1, r9
 8007c14:	4640      	mov	r0, r8
 8007c16:	47d0      	blx	sl
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d09b      	beq.n	8007b54 <_printf_i+0x164>
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	9903      	ldr	r1, [sp, #12]
 8007c22:	1a5b      	subs	r3, r3, r1
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dcf2      	bgt.n	8007c0e <_printf_i+0x21e>
 8007c28:	e7eb      	b.n	8007c02 <_printf_i+0x212>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	f104 0619 	add.w	r6, r4, #25
 8007c30:	e7f5      	b.n	8007c1e <_printf_i+0x22e>
 8007c32:	bf00      	nop
 8007c34:	0800c39b 	.word	0x0800c39b
 8007c38:	0800c3ac 	.word	0x0800c3ac

08007c3c <_sbrk_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_sbrk_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fc fd72 	bl	8004730 <_sbrk>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_sbrk_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_sbrk_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20001264 	.word	0x20001264

08007c5c <__swbuf_r>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	460e      	mov	r6, r1
 8007c60:	4614      	mov	r4, r2
 8007c62:	4605      	mov	r5, r0
 8007c64:	b118      	cbz	r0, 8007c6e <__swbuf_r+0x12>
 8007c66:	6983      	ldr	r3, [r0, #24]
 8007c68:	b90b      	cbnz	r3, 8007c6e <__swbuf_r+0x12>
 8007c6a:	f000 f9d9 	bl	8008020 <__sinit>
 8007c6e:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <__swbuf_r+0x98>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d12b      	bne.n	8007ccc <__swbuf_r+0x70>
 8007c74:	686c      	ldr	r4, [r5, #4]
 8007c76:	69a3      	ldr	r3, [r4, #24]
 8007c78:	60a3      	str	r3, [r4, #8]
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	071a      	lsls	r2, r3, #28
 8007c7e:	d52f      	bpl.n	8007ce0 <__swbuf_r+0x84>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	b36b      	cbz	r3, 8007ce0 <__swbuf_r+0x84>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	1ac0      	subs	r0, r0, r3
 8007c8a:	6963      	ldr	r3, [r4, #20]
 8007c8c:	b2f6      	uxtb	r6, r6
 8007c8e:	4283      	cmp	r3, r0
 8007c90:	4637      	mov	r7, r6
 8007c92:	dc04      	bgt.n	8007c9e <__swbuf_r+0x42>
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f92e 	bl	8007ef8 <_fflush_r>
 8007c9c:	bb30      	cbnz	r0, 8007cec <__swbuf_r+0x90>
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	60a3      	str	r3, [r4, #8]
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	6022      	str	r2, [r4, #0]
 8007caa:	701e      	strb	r6, [r3, #0]
 8007cac:	6963      	ldr	r3, [r4, #20]
 8007cae:	3001      	adds	r0, #1
 8007cb0:	4283      	cmp	r3, r0
 8007cb2:	d004      	beq.n	8007cbe <__swbuf_r+0x62>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	07db      	lsls	r3, r3, #31
 8007cb8:	d506      	bpl.n	8007cc8 <__swbuf_r+0x6c>
 8007cba:	2e0a      	cmp	r6, #10
 8007cbc:	d104      	bne.n	8007cc8 <__swbuf_r+0x6c>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f000 f919 	bl	8007ef8 <_fflush_r>
 8007cc6:	b988      	cbnz	r0, 8007cec <__swbuf_r+0x90>
 8007cc8:	4638      	mov	r0, r7
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <__swbuf_r+0x9c>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d101      	bne.n	8007cd6 <__swbuf_r+0x7a>
 8007cd2:	68ac      	ldr	r4, [r5, #8]
 8007cd4:	e7cf      	b.n	8007c76 <__swbuf_r+0x1a>
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <__swbuf_r+0xa0>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	bf08      	it	eq
 8007cdc:	68ec      	ldreq	r4, [r5, #12]
 8007cde:	e7ca      	b.n	8007c76 <__swbuf_r+0x1a>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 f80c 	bl	8007d00 <__swsetup_r>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d0cb      	beq.n	8007c84 <__swbuf_r+0x28>
 8007cec:	f04f 37ff 	mov.w	r7, #4294967295
 8007cf0:	e7ea      	b.n	8007cc8 <__swbuf_r+0x6c>
 8007cf2:	bf00      	nop
 8007cf4:	0800c3e0 	.word	0x0800c3e0
 8007cf8:	0800c400 	.word	0x0800c400
 8007cfc:	0800c3c0 	.word	0x0800c3c0

08007d00 <__swsetup_r>:
 8007d00:	4b32      	ldr	r3, [pc, #200]	; (8007dcc <__swsetup_r+0xcc>)
 8007d02:	b570      	push	{r4, r5, r6, lr}
 8007d04:	681d      	ldr	r5, [r3, #0]
 8007d06:	4606      	mov	r6, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	b125      	cbz	r5, 8007d16 <__swsetup_r+0x16>
 8007d0c:	69ab      	ldr	r3, [r5, #24]
 8007d0e:	b913      	cbnz	r3, 8007d16 <__swsetup_r+0x16>
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f985 	bl	8008020 <__sinit>
 8007d16:	4b2e      	ldr	r3, [pc, #184]	; (8007dd0 <__swsetup_r+0xd0>)
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	d10f      	bne.n	8007d3c <__swsetup_r+0x3c>
 8007d1c:	686c      	ldr	r4, [r5, #4]
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d24:	0719      	lsls	r1, r3, #28
 8007d26:	d42c      	bmi.n	8007d82 <__swsetup_r+0x82>
 8007d28:	06dd      	lsls	r5, r3, #27
 8007d2a:	d411      	bmi.n	8007d50 <__swsetup_r+0x50>
 8007d2c:	2309      	movs	r3, #9
 8007d2e:	6033      	str	r3, [r6, #0]
 8007d30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	e03e      	b.n	8007dba <__swsetup_r+0xba>
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <__swsetup_r+0xd4>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <__swsetup_r+0x46>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7eb      	b.n	8007d1e <__swsetup_r+0x1e>
 8007d46:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <__swsetup_r+0xd8>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	bf08      	it	eq
 8007d4c:	68ec      	ldreq	r4, [r5, #12]
 8007d4e:	e7e6      	b.n	8007d1e <__swsetup_r+0x1e>
 8007d50:	0758      	lsls	r0, r3, #29
 8007d52:	d512      	bpl.n	8007d7a <__swsetup_r+0x7a>
 8007d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d56:	b141      	cbz	r1, 8007d6a <__swsetup_r+0x6a>
 8007d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	d002      	beq.n	8007d66 <__swsetup_r+0x66>
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff fa41 	bl	80071e8 <_free_r>
 8007d66:	2300      	movs	r3, #0
 8007d68:	6363      	str	r3, [r4, #52]	; 0x34
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d70:	81a3      	strh	r3, [r4, #12]
 8007d72:	2300      	movs	r3, #0
 8007d74:	6063      	str	r3, [r4, #4]
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	f043 0308 	orr.w	r3, r3, #8
 8007d80:	81a3      	strh	r3, [r4, #12]
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	b94b      	cbnz	r3, 8007d9a <__swsetup_r+0x9a>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d90:	d003      	beq.n	8007d9a <__swsetup_r+0x9a>
 8007d92:	4621      	mov	r1, r4
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 fa09 	bl	80081ac <__smakebuf_r>
 8007d9a:	89a0      	ldrh	r0, [r4, #12]
 8007d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da0:	f010 0301 	ands.w	r3, r0, #1
 8007da4:	d00a      	beq.n	8007dbc <__swsetup_r+0xbc>
 8007da6:	2300      	movs	r3, #0
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	6963      	ldr	r3, [r4, #20]
 8007dac:	425b      	negs	r3, r3
 8007dae:	61a3      	str	r3, [r4, #24]
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	b943      	cbnz	r3, 8007dc6 <__swsetup_r+0xc6>
 8007db4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007db8:	d1ba      	bne.n	8007d30 <__swsetup_r+0x30>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	0781      	lsls	r1, r0, #30
 8007dbe:	bf58      	it	pl
 8007dc0:	6963      	ldrpl	r3, [r4, #20]
 8007dc2:	60a3      	str	r3, [r4, #8]
 8007dc4:	e7f4      	b.n	8007db0 <__swsetup_r+0xb0>
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e7f7      	b.n	8007dba <__swsetup_r+0xba>
 8007dca:	bf00      	nop
 8007dcc:	200000a0 	.word	0x200000a0
 8007dd0:	0800c3e0 	.word	0x0800c3e0
 8007dd4:	0800c400 	.word	0x0800c400
 8007dd8:	0800c3c0 	.word	0x0800c3c0

08007ddc <abort>:
 8007ddc:	b508      	push	{r3, lr}
 8007dde:	2006      	movs	r0, #6
 8007de0:	f000 faa2 	bl	8008328 <raise>
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7fc fc2b 	bl	8004640 <_exit>
	...

08007dec <__sflush_r>:
 8007dec:	898a      	ldrh	r2, [r1, #12]
 8007dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	4605      	mov	r5, r0
 8007df4:	0710      	lsls	r0, r2, #28
 8007df6:	460c      	mov	r4, r1
 8007df8:	d458      	bmi.n	8007eac <__sflush_r+0xc0>
 8007dfa:	684b      	ldr	r3, [r1, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dc05      	bgt.n	8007e0c <__sflush_r+0x20>
 8007e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dc02      	bgt.n	8007e0c <__sflush_r+0x20>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	d0f9      	beq.n	8007e06 <__sflush_r+0x1a>
 8007e12:	2300      	movs	r3, #0
 8007e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e18:	682f      	ldr	r7, [r5, #0]
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	d032      	beq.n	8007e84 <__sflush_r+0x98>
 8007e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	075a      	lsls	r2, r3, #29
 8007e24:	d505      	bpl.n	8007e32 <__sflush_r+0x46>
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	1ac0      	subs	r0, r0, r3
 8007e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e2c:	b10b      	cbz	r3, 8007e32 <__sflush_r+0x46>
 8007e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e30:	1ac0      	subs	r0, r0, r3
 8007e32:	2300      	movs	r3, #0
 8007e34:	4602      	mov	r2, r0
 8007e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e38:	6a21      	ldr	r1, [r4, #32]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b0      	blx	r6
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	d106      	bne.n	8007e52 <__sflush_r+0x66>
 8007e44:	6829      	ldr	r1, [r5, #0]
 8007e46:	291d      	cmp	r1, #29
 8007e48:	d82c      	bhi.n	8007ea4 <__sflush_r+0xb8>
 8007e4a:	4a2a      	ldr	r2, [pc, #168]	; (8007ef4 <__sflush_r+0x108>)
 8007e4c:	40ca      	lsrs	r2, r1
 8007e4e:	07d6      	lsls	r6, r2, #31
 8007e50:	d528      	bpl.n	8007ea4 <__sflush_r+0xb8>
 8007e52:	2200      	movs	r2, #0
 8007e54:	6062      	str	r2, [r4, #4]
 8007e56:	04d9      	lsls	r1, r3, #19
 8007e58:	6922      	ldr	r2, [r4, #16]
 8007e5a:	6022      	str	r2, [r4, #0]
 8007e5c:	d504      	bpl.n	8007e68 <__sflush_r+0x7c>
 8007e5e:	1c42      	adds	r2, r0, #1
 8007e60:	d101      	bne.n	8007e66 <__sflush_r+0x7a>
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	b903      	cbnz	r3, 8007e68 <__sflush_r+0x7c>
 8007e66:	6560      	str	r0, [r4, #84]	; 0x54
 8007e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e6a:	602f      	str	r7, [r5, #0]
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d0ca      	beq.n	8007e06 <__sflush_r+0x1a>
 8007e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e74:	4299      	cmp	r1, r3
 8007e76:	d002      	beq.n	8007e7e <__sflush_r+0x92>
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f7ff f9b5 	bl	80071e8 <_free_r>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	6360      	str	r0, [r4, #52]	; 0x34
 8007e82:	e7c1      	b.n	8007e08 <__sflush_r+0x1c>
 8007e84:	6a21      	ldr	r1, [r4, #32]
 8007e86:	2301      	movs	r3, #1
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b0      	blx	r6
 8007e8c:	1c41      	adds	r1, r0, #1
 8007e8e:	d1c7      	bne.n	8007e20 <__sflush_r+0x34>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0c4      	beq.n	8007e20 <__sflush_r+0x34>
 8007e96:	2b1d      	cmp	r3, #29
 8007e98:	d001      	beq.n	8007e9e <__sflush_r+0xb2>
 8007e9a:	2b16      	cmp	r3, #22
 8007e9c:	d101      	bne.n	8007ea2 <__sflush_r+0xb6>
 8007e9e:	602f      	str	r7, [r5, #0]
 8007ea0:	e7b1      	b.n	8007e06 <__sflush_r+0x1a>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	e7ad      	b.n	8007e08 <__sflush_r+0x1c>
 8007eac:	690f      	ldr	r7, [r1, #16]
 8007eae:	2f00      	cmp	r7, #0
 8007eb0:	d0a9      	beq.n	8007e06 <__sflush_r+0x1a>
 8007eb2:	0793      	lsls	r3, r2, #30
 8007eb4:	680e      	ldr	r6, [r1, #0]
 8007eb6:	bf08      	it	eq
 8007eb8:	694b      	ldreq	r3, [r1, #20]
 8007eba:	600f      	str	r7, [r1, #0]
 8007ebc:	bf18      	it	ne
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	eba6 0807 	sub.w	r8, r6, r7
 8007ec4:	608b      	str	r3, [r1, #8]
 8007ec6:	f1b8 0f00 	cmp.w	r8, #0
 8007eca:	dd9c      	ble.n	8007e06 <__sflush_r+0x1a>
 8007ecc:	6a21      	ldr	r1, [r4, #32]
 8007ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ed0:	4643      	mov	r3, r8
 8007ed2:	463a      	mov	r2, r7
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b0      	blx	r6
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	dc06      	bgt.n	8007eea <__sflush_r+0xfe>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	e78e      	b.n	8007e08 <__sflush_r+0x1c>
 8007eea:	4407      	add	r7, r0
 8007eec:	eba8 0800 	sub.w	r8, r8, r0
 8007ef0:	e7e9      	b.n	8007ec6 <__sflush_r+0xda>
 8007ef2:	bf00      	nop
 8007ef4:	20400001 	.word	0x20400001

08007ef8 <_fflush_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	690b      	ldr	r3, [r1, #16]
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b913      	cbnz	r3, 8007f08 <_fflush_r+0x10>
 8007f02:	2500      	movs	r5, #0
 8007f04:	4628      	mov	r0, r5
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	b118      	cbz	r0, 8007f12 <_fflush_r+0x1a>
 8007f0a:	6983      	ldr	r3, [r0, #24]
 8007f0c:	b90b      	cbnz	r3, 8007f12 <_fflush_r+0x1a>
 8007f0e:	f000 f887 	bl	8008020 <__sinit>
 8007f12:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <_fflush_r+0x6c>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	d11b      	bne.n	8007f50 <_fflush_r+0x58>
 8007f18:	686c      	ldr	r4, [r5, #4]
 8007f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0ef      	beq.n	8007f02 <_fflush_r+0xa>
 8007f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f24:	07d0      	lsls	r0, r2, #31
 8007f26:	d404      	bmi.n	8007f32 <_fflush_r+0x3a>
 8007f28:	0599      	lsls	r1, r3, #22
 8007f2a:	d402      	bmi.n	8007f32 <_fflush_r+0x3a>
 8007f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2e:	f000 f915 	bl	800815c <__retarget_lock_acquire_recursive>
 8007f32:	4628      	mov	r0, r5
 8007f34:	4621      	mov	r1, r4
 8007f36:	f7ff ff59 	bl	8007dec <__sflush_r>
 8007f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f3c:	07da      	lsls	r2, r3, #31
 8007f3e:	4605      	mov	r5, r0
 8007f40:	d4e0      	bmi.n	8007f04 <_fflush_r+0xc>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	059b      	lsls	r3, r3, #22
 8007f46:	d4dd      	bmi.n	8007f04 <_fflush_r+0xc>
 8007f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f4a:	f000 f908 	bl	800815e <__retarget_lock_release_recursive>
 8007f4e:	e7d9      	b.n	8007f04 <_fflush_r+0xc>
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <_fflush_r+0x70>)
 8007f52:	429c      	cmp	r4, r3
 8007f54:	d101      	bne.n	8007f5a <_fflush_r+0x62>
 8007f56:	68ac      	ldr	r4, [r5, #8]
 8007f58:	e7df      	b.n	8007f1a <_fflush_r+0x22>
 8007f5a:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <_fflush_r+0x74>)
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	bf08      	it	eq
 8007f60:	68ec      	ldreq	r4, [r5, #12]
 8007f62:	e7da      	b.n	8007f1a <_fflush_r+0x22>
 8007f64:	0800c3e0 	.word	0x0800c3e0
 8007f68:	0800c400 	.word	0x0800c400
 8007f6c:	0800c3c0 	.word	0x0800c3c0

08007f70 <std>:
 8007f70:	2300      	movs	r3, #0
 8007f72:	b510      	push	{r4, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	e9c0 3300 	strd	r3, r3, [r0]
 8007f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f7e:	6083      	str	r3, [r0, #8]
 8007f80:	8181      	strh	r1, [r0, #12]
 8007f82:	6643      	str	r3, [r0, #100]	; 0x64
 8007f84:	81c2      	strh	r2, [r0, #14]
 8007f86:	6183      	str	r3, [r0, #24]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	305c      	adds	r0, #92	; 0x5c
 8007f8e:	f7ff f80f 	bl	8006fb0 <memset>
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x38>)
 8007f94:	6263      	str	r3, [r4, #36]	; 0x24
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std+0x3c>)
 8007f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <std+0x40>)
 8007f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std+0x44>)
 8007fa0:	6224      	str	r4, [r4, #32]
 8007fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	08008361 	.word	0x08008361
 8007fac:	08008383 	.word	0x08008383
 8007fb0:	080083bb 	.word	0x080083bb
 8007fb4:	080083df 	.word	0x080083df

08007fb8 <_cleanup_r>:
 8007fb8:	4901      	ldr	r1, [pc, #4]	; (8007fc0 <_cleanup_r+0x8>)
 8007fba:	f000 b8af 	b.w	800811c <_fwalk_reent>
 8007fbe:	bf00      	nop
 8007fc0:	08007ef9 	.word	0x08007ef9

08007fc4 <__sfmoreglue>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	2268      	movs	r2, #104	; 0x68
 8007fc8:	1e4d      	subs	r5, r1, #1
 8007fca:	4355      	muls	r5, r2
 8007fcc:	460e      	mov	r6, r1
 8007fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fd2:	f7ff f975 	bl	80072c0 <_malloc_r>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	b140      	cbz	r0, 8007fec <__sfmoreglue+0x28>
 8007fda:	2100      	movs	r1, #0
 8007fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8007fe0:	300c      	adds	r0, #12
 8007fe2:	60a0      	str	r0, [r4, #8]
 8007fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe8:	f7fe ffe2 	bl	8006fb0 <memset>
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}

08007ff0 <__sfp_lock_acquire>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__sfp_lock_acquire+0x8>)
 8007ff2:	f000 b8b3 	b.w	800815c <__retarget_lock_acquire_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20001261 	.word	0x20001261

08007ffc <__sfp_lock_release>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__sfp_lock_release+0x8>)
 8007ffe:	f000 b8ae 	b.w	800815e <__retarget_lock_release_recursive>
 8008002:	bf00      	nop
 8008004:	20001261 	.word	0x20001261

08008008 <__sinit_lock_acquire>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__sinit_lock_acquire+0x8>)
 800800a:	f000 b8a7 	b.w	800815c <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	20001262 	.word	0x20001262

08008014 <__sinit_lock_release>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__sinit_lock_release+0x8>)
 8008016:	f000 b8a2 	b.w	800815e <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	20001262 	.word	0x20001262

08008020 <__sinit>:
 8008020:	b510      	push	{r4, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	f7ff fff0 	bl	8008008 <__sinit_lock_acquire>
 8008028:	69a3      	ldr	r3, [r4, #24]
 800802a:	b11b      	cbz	r3, 8008034 <__sinit+0x14>
 800802c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008030:	f7ff bff0 	b.w	8008014 <__sinit_lock_release>
 8008034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008038:	6523      	str	r3, [r4, #80]	; 0x50
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <__sinit+0x68>)
 800803c:	4a13      	ldr	r2, [pc, #76]	; (800808c <__sinit+0x6c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	62a2      	str	r2, [r4, #40]	; 0x28
 8008042:	42a3      	cmp	r3, r4
 8008044:	bf04      	itt	eq
 8008046:	2301      	moveq	r3, #1
 8008048:	61a3      	streq	r3, [r4, #24]
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f820 	bl	8008090 <__sfp>
 8008050:	6060      	str	r0, [r4, #4]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f81c 	bl	8008090 <__sfp>
 8008058:	60a0      	str	r0, [r4, #8]
 800805a:	4620      	mov	r0, r4
 800805c:	f000 f818 	bl	8008090 <__sfp>
 8008060:	2200      	movs	r2, #0
 8008062:	60e0      	str	r0, [r4, #12]
 8008064:	2104      	movs	r1, #4
 8008066:	6860      	ldr	r0, [r4, #4]
 8008068:	f7ff ff82 	bl	8007f70 <std>
 800806c:	68a0      	ldr	r0, [r4, #8]
 800806e:	2201      	movs	r2, #1
 8008070:	2109      	movs	r1, #9
 8008072:	f7ff ff7d 	bl	8007f70 <std>
 8008076:	68e0      	ldr	r0, [r4, #12]
 8008078:	2202      	movs	r2, #2
 800807a:	2112      	movs	r1, #18
 800807c:	f7ff ff78 	bl	8007f70 <std>
 8008080:	2301      	movs	r3, #1
 8008082:	61a3      	str	r3, [r4, #24]
 8008084:	e7d2      	b.n	800802c <__sinit+0xc>
 8008086:	bf00      	nop
 8008088:	0800c2d8 	.word	0x0800c2d8
 800808c:	08007fb9 	.word	0x08007fb9

08008090 <__sfp>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	4607      	mov	r7, r0
 8008094:	f7ff ffac 	bl	8007ff0 <__sfp_lock_acquire>
 8008098:	4b1e      	ldr	r3, [pc, #120]	; (8008114 <__sfp+0x84>)
 800809a:	681e      	ldr	r6, [r3, #0]
 800809c:	69b3      	ldr	r3, [r6, #24]
 800809e:	b913      	cbnz	r3, 80080a6 <__sfp+0x16>
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff ffbd 	bl	8008020 <__sinit>
 80080a6:	3648      	adds	r6, #72	; 0x48
 80080a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	d503      	bpl.n	80080b8 <__sfp+0x28>
 80080b0:	6833      	ldr	r3, [r6, #0]
 80080b2:	b30b      	cbz	r3, 80080f8 <__sfp+0x68>
 80080b4:	6836      	ldr	r6, [r6, #0]
 80080b6:	e7f7      	b.n	80080a8 <__sfp+0x18>
 80080b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080bc:	b9d5      	cbnz	r5, 80080f4 <__sfp+0x64>
 80080be:	4b16      	ldr	r3, [pc, #88]	; (8008118 <__sfp+0x88>)
 80080c0:	60e3      	str	r3, [r4, #12]
 80080c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080c6:	6665      	str	r5, [r4, #100]	; 0x64
 80080c8:	f000 f847 	bl	800815a <__retarget_lock_init_recursive>
 80080cc:	f7ff ff96 	bl	8007ffc <__sfp_lock_release>
 80080d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080d8:	6025      	str	r5, [r4, #0]
 80080da:	61a5      	str	r5, [r4, #24]
 80080dc:	2208      	movs	r2, #8
 80080de:	4629      	mov	r1, r5
 80080e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080e4:	f7fe ff64 	bl	8006fb0 <memset>
 80080e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080f0:	4620      	mov	r0, r4
 80080f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f4:	3468      	adds	r4, #104	; 0x68
 80080f6:	e7d9      	b.n	80080ac <__sfp+0x1c>
 80080f8:	2104      	movs	r1, #4
 80080fa:	4638      	mov	r0, r7
 80080fc:	f7ff ff62 	bl	8007fc4 <__sfmoreglue>
 8008100:	4604      	mov	r4, r0
 8008102:	6030      	str	r0, [r6, #0]
 8008104:	2800      	cmp	r0, #0
 8008106:	d1d5      	bne.n	80080b4 <__sfp+0x24>
 8008108:	f7ff ff78 	bl	8007ffc <__sfp_lock_release>
 800810c:	230c      	movs	r3, #12
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	e7ee      	b.n	80080f0 <__sfp+0x60>
 8008112:	bf00      	nop
 8008114:	0800c2d8 	.word	0x0800c2d8
 8008118:	ffff0001 	.word	0xffff0001

0800811c <_fwalk_reent>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	4688      	mov	r8, r1
 8008124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008128:	2700      	movs	r7, #0
 800812a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800812e:	f1b9 0901 	subs.w	r9, r9, #1
 8008132:	d505      	bpl.n	8008140 <_fwalk_reent+0x24>
 8008134:	6824      	ldr	r4, [r4, #0]
 8008136:	2c00      	cmp	r4, #0
 8008138:	d1f7      	bne.n	800812a <_fwalk_reent+0xe>
 800813a:	4638      	mov	r0, r7
 800813c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008140:	89ab      	ldrh	r3, [r5, #12]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d907      	bls.n	8008156 <_fwalk_reent+0x3a>
 8008146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800814a:	3301      	adds	r3, #1
 800814c:	d003      	beq.n	8008156 <_fwalk_reent+0x3a>
 800814e:	4629      	mov	r1, r5
 8008150:	4630      	mov	r0, r6
 8008152:	47c0      	blx	r8
 8008154:	4307      	orrs	r7, r0
 8008156:	3568      	adds	r5, #104	; 0x68
 8008158:	e7e9      	b.n	800812e <_fwalk_reent+0x12>

0800815a <__retarget_lock_init_recursive>:
 800815a:	4770      	bx	lr

0800815c <__retarget_lock_acquire_recursive>:
 800815c:	4770      	bx	lr

0800815e <__retarget_lock_release_recursive>:
 800815e:	4770      	bx	lr

08008160 <__swhatbuf_r>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	460e      	mov	r6, r1
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	2900      	cmp	r1, #0
 800816a:	b096      	sub	sp, #88	; 0x58
 800816c:	4614      	mov	r4, r2
 800816e:	461d      	mov	r5, r3
 8008170:	da08      	bge.n	8008184 <__swhatbuf_r+0x24>
 8008172:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	602a      	str	r2, [r5, #0]
 800817a:	061a      	lsls	r2, r3, #24
 800817c:	d410      	bmi.n	80081a0 <__swhatbuf_r+0x40>
 800817e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008182:	e00e      	b.n	80081a2 <__swhatbuf_r+0x42>
 8008184:	466a      	mov	r2, sp
 8008186:	f000 f951 	bl	800842c <_fstat_r>
 800818a:	2800      	cmp	r0, #0
 800818c:	dbf1      	blt.n	8008172 <__swhatbuf_r+0x12>
 800818e:	9a01      	ldr	r2, [sp, #4]
 8008190:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008194:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008198:	425a      	negs	r2, r3
 800819a:	415a      	adcs	r2, r3
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	e7ee      	b.n	800817e <__swhatbuf_r+0x1e>
 80081a0:	2340      	movs	r3, #64	; 0x40
 80081a2:	2000      	movs	r0, #0
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	b016      	add	sp, #88	; 0x58
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080081ac <__smakebuf_r>:
 80081ac:	898b      	ldrh	r3, [r1, #12]
 80081ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081b0:	079d      	lsls	r5, r3, #30
 80081b2:	4606      	mov	r6, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	d507      	bpl.n	80081c8 <__smakebuf_r+0x1c>
 80081b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	6123      	str	r3, [r4, #16]
 80081c0:	2301      	movs	r3, #1
 80081c2:	6163      	str	r3, [r4, #20]
 80081c4:	b002      	add	sp, #8
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	ab01      	add	r3, sp, #4
 80081ca:	466a      	mov	r2, sp
 80081cc:	f7ff ffc8 	bl	8008160 <__swhatbuf_r>
 80081d0:	9900      	ldr	r1, [sp, #0]
 80081d2:	4605      	mov	r5, r0
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff f873 	bl	80072c0 <_malloc_r>
 80081da:	b948      	cbnz	r0, 80081f0 <__smakebuf_r+0x44>
 80081dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e0:	059a      	lsls	r2, r3, #22
 80081e2:	d4ef      	bmi.n	80081c4 <__smakebuf_r+0x18>
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	f043 0302 	orr.w	r3, r3, #2
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	e7e3      	b.n	80081b8 <__smakebuf_r+0xc>
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <__smakebuf_r+0x7c>)
 80081f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	9b00      	ldr	r3, [sp, #0]
 8008200:	6163      	str	r3, [r4, #20]
 8008202:	9b01      	ldr	r3, [sp, #4]
 8008204:	6120      	str	r0, [r4, #16]
 8008206:	b15b      	cbz	r3, 8008220 <__smakebuf_r+0x74>
 8008208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800820c:	4630      	mov	r0, r6
 800820e:	f000 f91f 	bl	8008450 <_isatty_r>
 8008212:	b128      	cbz	r0, 8008220 <__smakebuf_r+0x74>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	89a0      	ldrh	r0, [r4, #12]
 8008222:	4305      	orrs	r5, r0
 8008224:	81a5      	strh	r5, [r4, #12]
 8008226:	e7cd      	b.n	80081c4 <__smakebuf_r+0x18>
 8008228:	08007fb9 	.word	0x08007fb9

0800822c <memmove>:
 800822c:	4288      	cmp	r0, r1
 800822e:	b510      	push	{r4, lr}
 8008230:	eb01 0402 	add.w	r4, r1, r2
 8008234:	d902      	bls.n	800823c <memmove+0x10>
 8008236:	4284      	cmp	r4, r0
 8008238:	4623      	mov	r3, r4
 800823a:	d807      	bhi.n	800824c <memmove+0x20>
 800823c:	1e43      	subs	r3, r0, #1
 800823e:	42a1      	cmp	r1, r4
 8008240:	d008      	beq.n	8008254 <memmove+0x28>
 8008242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800824a:	e7f8      	b.n	800823e <memmove+0x12>
 800824c:	4402      	add	r2, r0
 800824e:	4601      	mov	r1, r0
 8008250:	428a      	cmp	r2, r1
 8008252:	d100      	bne.n	8008256 <memmove+0x2a>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800825a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800825e:	e7f7      	b.n	8008250 <memmove+0x24>

08008260 <__malloc_lock>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__malloc_lock+0x8>)
 8008262:	f7ff bf7b 	b.w	800815c <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	20001260 	.word	0x20001260

0800826c <__malloc_unlock>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__malloc_unlock+0x8>)
 800826e:	f7ff bf76 	b.w	800815e <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	20001260 	.word	0x20001260

08008278 <_realloc_r>:
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	4680      	mov	r8, r0
 800827e:	4614      	mov	r4, r2
 8008280:	460e      	mov	r6, r1
 8008282:	b921      	cbnz	r1, 800828e <_realloc_r+0x16>
 8008284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008288:	4611      	mov	r1, r2
 800828a:	f7ff b819 	b.w	80072c0 <_malloc_r>
 800828e:	b92a      	cbnz	r2, 800829c <_realloc_r+0x24>
 8008290:	f7fe ffaa 	bl	80071e8 <_free_r>
 8008294:	4625      	mov	r5, r4
 8008296:	4628      	mov	r0, r5
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829c:	f000 f8fa 	bl	8008494 <_malloc_usable_size_r>
 80082a0:	4284      	cmp	r4, r0
 80082a2:	4607      	mov	r7, r0
 80082a4:	d802      	bhi.n	80082ac <_realloc_r+0x34>
 80082a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082aa:	d812      	bhi.n	80082d2 <_realloc_r+0x5a>
 80082ac:	4621      	mov	r1, r4
 80082ae:	4640      	mov	r0, r8
 80082b0:	f7ff f806 	bl	80072c0 <_malloc_r>
 80082b4:	4605      	mov	r5, r0
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0ed      	beq.n	8008296 <_realloc_r+0x1e>
 80082ba:	42bc      	cmp	r4, r7
 80082bc:	4622      	mov	r2, r4
 80082be:	4631      	mov	r1, r6
 80082c0:	bf28      	it	cs
 80082c2:	463a      	movcs	r2, r7
 80082c4:	f7fe ff82 	bl	80071cc <memcpy>
 80082c8:	4631      	mov	r1, r6
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7fe ff8c 	bl	80071e8 <_free_r>
 80082d0:	e7e1      	b.n	8008296 <_realloc_r+0x1e>
 80082d2:	4635      	mov	r5, r6
 80082d4:	e7df      	b.n	8008296 <_realloc_r+0x1e>

080082d6 <_raise_r>:
 80082d6:	291f      	cmp	r1, #31
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4604      	mov	r4, r0
 80082dc:	460d      	mov	r5, r1
 80082de:	d904      	bls.n	80082ea <_raise_r+0x14>
 80082e0:	2316      	movs	r3, #22
 80082e2:	6003      	str	r3, [r0, #0]
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	bd38      	pop	{r3, r4, r5, pc}
 80082ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082ec:	b112      	cbz	r2, 80082f4 <_raise_r+0x1e>
 80082ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082f2:	b94b      	cbnz	r3, 8008308 <_raise_r+0x32>
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 f831 	bl	800835c <_getpid_r>
 80082fa:	462a      	mov	r2, r5
 80082fc:	4601      	mov	r1, r0
 80082fe:	4620      	mov	r0, r4
 8008300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008304:	f000 b818 	b.w	8008338 <_kill_r>
 8008308:	2b01      	cmp	r3, #1
 800830a:	d00a      	beq.n	8008322 <_raise_r+0x4c>
 800830c:	1c59      	adds	r1, r3, #1
 800830e:	d103      	bne.n	8008318 <_raise_r+0x42>
 8008310:	2316      	movs	r3, #22
 8008312:	6003      	str	r3, [r0, #0]
 8008314:	2001      	movs	r0, #1
 8008316:	e7e7      	b.n	80082e8 <_raise_r+0x12>
 8008318:	2400      	movs	r4, #0
 800831a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800831e:	4628      	mov	r0, r5
 8008320:	4798      	blx	r3
 8008322:	2000      	movs	r0, #0
 8008324:	e7e0      	b.n	80082e8 <_raise_r+0x12>
	...

08008328 <raise>:
 8008328:	4b02      	ldr	r3, [pc, #8]	; (8008334 <raise+0xc>)
 800832a:	4601      	mov	r1, r0
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	f7ff bfd2 	b.w	80082d6 <_raise_r>
 8008332:	bf00      	nop
 8008334:	200000a0 	.word	0x200000a0

08008338 <_kill_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	; (8008358 <_kill_r+0x20>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	f7fc f96b 	bl	8004620 <_kill>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d102      	bne.n	8008354 <_kill_r+0x1c>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	b103      	cbz	r3, 8008354 <_kill_r+0x1c>
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	20001264 	.word	0x20001264

0800835c <_getpid_r>:
 800835c:	f7fc b958 	b.w	8004610 <_getpid>

08008360 <__sread>:
 8008360:	b510      	push	{r4, lr}
 8008362:	460c      	mov	r4, r1
 8008364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008368:	f000 f89c 	bl	80084a4 <_read_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	bfab      	itete	ge
 8008370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008372:	89a3      	ldrhlt	r3, [r4, #12]
 8008374:	181b      	addge	r3, r3, r0
 8008376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800837a:	bfac      	ite	ge
 800837c:	6563      	strge	r3, [r4, #84]	; 0x54
 800837e:	81a3      	strhlt	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__swrite>:
 8008382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008386:	461f      	mov	r7, r3
 8008388:	898b      	ldrh	r3, [r1, #12]
 800838a:	05db      	lsls	r3, r3, #23
 800838c:	4605      	mov	r5, r0
 800838e:	460c      	mov	r4, r1
 8008390:	4616      	mov	r6, r2
 8008392:	d505      	bpl.n	80083a0 <__swrite+0x1e>
 8008394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008398:	2302      	movs	r3, #2
 800839a:	2200      	movs	r2, #0
 800839c:	f000 f868 	bl	8008470 <_lseek_r>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	4632      	mov	r2, r6
 80083ae:	463b      	mov	r3, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b6:	f000 b817 	b.w	80083e8 <_write_r>

080083ba <__sseek>:
 80083ba:	b510      	push	{r4, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 f855 	bl	8008470 <_lseek_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	bf15      	itete	ne
 80083cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083d6:	81a3      	strheq	r3, [r4, #12]
 80083d8:	bf18      	it	ne
 80083da:	81a3      	strhne	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__sclose>:
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	f000 b813 	b.w	800840c <_close_r>
	...

080083e8 <_write_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	; (8008408 <_write_r+0x20>)
 80083ec:	4604      	mov	r4, r0
 80083ee:	4608      	mov	r0, r1
 80083f0:	4611      	mov	r1, r2
 80083f2:	2200      	movs	r2, #0
 80083f4:	602a      	str	r2, [r5, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f7fc f949 	bl	800468e <_write>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_write_r+0x1e>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_write_r+0x1e>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20001264 	.word	0x20001264

0800840c <_close_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d06      	ldr	r5, [pc, #24]	; (8008428 <_close_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	f7fc f955 	bl	80046c6 <_close>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_close_r+0x1a>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_close_r+0x1a>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20001264 	.word	0x20001264

0800842c <_fstat_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	; (800844c <_fstat_r+0x20>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	4611      	mov	r1, r2
 8008438:	602b      	str	r3, [r5, #0]
 800843a:	f7fc f950 	bl	80046de <_fstat>
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	d102      	bne.n	8008448 <_fstat_r+0x1c>
 8008442:	682b      	ldr	r3, [r5, #0]
 8008444:	b103      	cbz	r3, 8008448 <_fstat_r+0x1c>
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	bf00      	nop
 800844c:	20001264 	.word	0x20001264

08008450 <_isatty_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d06      	ldr	r5, [pc, #24]	; (800846c <_isatty_r+0x1c>)
 8008454:	2300      	movs	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	f7fc f94f 	bl	80046fe <_isatty>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_isatty_r+0x1a>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_isatty_r+0x1a>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20001264 	.word	0x20001264

08008470 <_lseek_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	; (8008490 <_lseek_r+0x20>)
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7fc f948 	bl	8004714 <_lseek>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_lseek_r+0x1e>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_lseek_r+0x1e>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20001264 	.word	0x20001264

08008494 <_malloc_usable_size_r>:
 8008494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008498:	1f18      	subs	r0, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	bfbc      	itt	lt
 800849e:	580b      	ldrlt	r3, [r1, r0]
 80084a0:	18c0      	addlt	r0, r0, r3
 80084a2:	4770      	bx	lr

080084a4 <_read_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	; (80084c4 <_read_r+0x20>)
 80084a8:	4604      	mov	r4, r0
 80084aa:	4608      	mov	r0, r1
 80084ac:	4611      	mov	r1, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	602a      	str	r2, [r5, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f7fc f8ce 	bl	8004654 <_read>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_read_r+0x1e>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_read_r+0x1e>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	20001264 	.word	0x20001264

080084c8 <_init>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	bf00      	nop
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr

080084d4 <_fini>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr
