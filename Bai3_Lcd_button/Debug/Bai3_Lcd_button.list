
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800488c  0800488c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004894  08004894  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800489c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000027c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000faae  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f08  00000000  00000000  0002fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe0  00000000  00000000  00032aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c0a  00000000  00000000  00033a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000246a3  00000000  00000000  0003468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000149a5  00000000  00000000  00058d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d006e  00000000  00000000  0006d6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004968  00000000  00000000  0013d740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001420a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004784 	.word	0x08004784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004784 	.word	0x08004784

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2108      	movs	r1, #8
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <button_init+0x14>)
 8000576:	f001 fc55 	bl	8001e24 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020c00 	.word	0x40020c00

08000584 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]
 80005ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <MX_FSMC_Init+0xec>)
 80005b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <MX_FSMC_Init+0xec>)
 80005ba:	4a2e      	ldr	r2, [pc, #184]	; (8000674 <MX_FSMC_Init+0xf0>)
 80005bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <MX_FSMC_Init+0xec>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_FSMC_Init+0xec>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <MX_FSMC_Init+0xec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <MX_FSMC_Init+0xec>)
 80005d2:	2210      	movs	r2, #16
 80005d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <MX_FSMC_Init+0xec>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <MX_FSMC_Init+0xec>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <MX_FSMC_Init+0xec>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_FSMC_Init+0xec>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_FSMC_Init+0xec>)
 80005f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_FSMC_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_FSMC_Init+0xec>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_FSMC_Init+0xec>)
 8000606:	2200      	movs	r2, #0
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_FSMC_Init+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_FSMC_Init+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000616:	230f      	movs	r3, #15
 8000618:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800061a:	230f      	movs	r3, #15
 800061c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800061e:	233c      	movs	r3, #60	; 0x3c
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000626:	2310      	movs	r3, #16
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800062a:	2311      	movs	r3, #17
 800062c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800062e:	2300      	movs	r3, #0
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000632:	2308      	movs	r3, #8
 8000634:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000636:	230f      	movs	r3, #15
 8000638:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800063a:	2309      	movs	r3, #9
 800063c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000642:	2310      	movs	r3, #16
 8000644:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000646:	2311      	movs	r3, #17
 8000648:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800064e:	463a      	mov	r2, r7
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_FSMC_Init+0xec>)
 8000658:	f002 faf2 	bl	8002c40 <HAL_SRAM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000662:	f000 fd17 	bl	8001094 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000666:	bf00      	nop
 8000668:	3738      	adds	r7, #56	; 0x38
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c
 8000674:	a0000104 	.word	0xa0000104

08000678 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <HAL_FSMC_MspInit+0x88>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d131      	bne.n	80006f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_FSMC_MspInit+0x88>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_FSMC_MspInit+0x8c>)
 80006a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <HAL_FSMC_MspInit+0x8c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6393      	str	r3, [r2, #56]	; 0x38
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_FSMC_MspInit+0x8c>)
 80006ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006c8:	230c      	movs	r3, #12
 80006ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <HAL_FSMC_MspInit+0x90>)
 80006d2:	f001 fa0b 	bl	8001aec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80006d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80006da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006e8:	230c      	movs	r3, #12
 80006ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <HAL_FSMC_MspInit+0x94>)
 80006f2:	f001 f9fb 	bl	8001aec <HAL_GPIO_Init>
 80006f6:	e000      	b.n	80006fa <HAL_FSMC_MspInit+0x82>
    return;
 80006f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000dc 	.word	0x200000dc
 8000704:	40023800 	.word	0x40023800
 8000708:	40021000 	.word	0x40021000
 800070c:	40020c00 	.word	0x40020c00

08000710 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000718:	f7ff ffae 	bl	8000678 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b6f      	ldr	r3, [pc, #444]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a6e      	ldr	r2, [pc, #440]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <MX_GPIO_Init+0x1d8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b68      	ldr	r3, [pc, #416]	; (80008fc <MX_GPIO_Init+0x1d8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a67      	ldr	r2, [pc, #412]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b65      	ldr	r3, [pc, #404]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a60      	ldr	r2, [pc, #384]	; (80008fc <MX_GPIO_Init+0x1d8>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a59      	ldr	r2, [pc, #356]	; (80008fc <MX_GPIO_Init+0x1d8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b57      	ldr	r3, [pc, #348]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a52      	ldr	r2, [pc, #328]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b50      	ldr	r3, [pc, #320]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4b      	ldr	r2, [pc, #300]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b49      	ldr	r3, [pc, #292]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a44      	ldr	r2, [pc, #272]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <MX_GPIO_Init+0x1d8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2170      	movs	r1, #112	; 0x70
 8000802:	483f      	ldr	r0, [pc, #252]	; (8000900 <MX_GPIO_Init+0x1dc>)
 8000804:	f001 fb0e 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	483d      	ldr	r0, [pc, #244]	; (8000904 <MX_GPIO_Init+0x1e0>)
 8000810:	f001 fb08 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2140      	movs	r1, #64	; 0x40
 8000818:	483b      	ldr	r0, [pc, #236]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800081a:	f001 fb03 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	4839      	ldr	r0, [pc, #228]	; (800090c <MX_GPIO_Init+0x1e8>)
 8000826:	f001 fafd 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4838      	ldr	r0, [pc, #224]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000830:	f001 faf8 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000834:	2370      	movs	r3, #112	; 0x70
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482d      	ldr	r0, [pc, #180]	; (8000900 <MX_GPIO_Init+0x1dc>)
 800084c:	f001 f94e 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4826      	ldr	r0, [pc, #152]	; (8000904 <MX_GPIO_Init+0x1e0>)
 800086a:	f001 f93f 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800086e:	23c0      	movs	r3, #192	; 0xc0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x1e8>)
 8000882:	f001 f933 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000886:	2330      	movs	r3, #48	; 0x30
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_GPIO_Init+0x1e0>)
 800089a:	f001 f927 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80008b6:	f001 f919 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <MX_GPIO_Init+0x1e8>)
 80008d4:	f001 f90a 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80008d8:	2308      	movs	r3, #8
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80008f0:	f001 f8fc 	bl	8001aec <HAL_GPIO_Init>

}
 80008f4:	bf00      	nop
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40021000 	.word	0x40021000
 8000904:	40020800 	.word	0x40020800
 8000908:	40021800 	.word	0x40021800
 800090c:	40020000 	.word	0x40020000
 8000910:	40020c00 	.word	0x40020c00

08000914 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <LCD_WR_REG+0x1c>)
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	8013      	strh	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	600ffffe 	.word	0x600ffffe

08000934 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <LCD_WR_DATA+0x1c>)
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	8053      	strh	r3, [r2, #2]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	600ffffe 	.word	0x600ffffe

08000954 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <LCD_RD_DATA+0x20>)
 800095c:	885b      	ldrh	r3, [r3, #2]
 800095e:	b29b      	uxth	r3, r3
 8000960:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b29b      	uxth	r3, r3
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	600ffffe 	.word	0x600ffffe

08000978 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	4611      	mov	r1, r2
 8000984:	461a      	mov	r2, r3
 8000986:	4623      	mov	r3, r4
 8000988:	80fb      	strh	r3, [r7, #6]
 800098a:	4603      	mov	r3, r0
 800098c:	80bb      	strh	r3, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	807b      	strh	r3, [r7, #2]
 8000992:	4613      	mov	r3, r2
 8000994:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000996:	202a      	movs	r0, #42	; 0x2a
 8000998:	f7ff ffbc 	bl	8000914 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffc6 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffc0 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffba 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffb4 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80009cc:	202b      	movs	r0, #43	; 0x2b
 80009ce:	f7ff ffa1 	bl	8000914 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffab 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffa5 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80009ea:	883b      	ldrh	r3, [r7, #0]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff9f 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff99 	bl	8000934 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a02:	202c      	movs	r0, #44	; 0x2c
 8000a04:	f7ff ff86 	bl	8000914 <LCD_WR_REG>
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <lcd_Clear+0x60>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <lcd_Clear+0x60>)
 8000a24:	885b      	ldrh	r3, [r3, #2]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ffa3 	bl	8000978 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	81fb      	strh	r3, [r7, #14]
 8000a36:	e011      	b.n	8000a5c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81bb      	strh	r3, [r7, #12]
 8000a3c:	e006      	b.n	8000a4c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff77 	bl	8000934 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a46:	89bb      	ldrh	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	81bb      	strh	r3, [r7, #12]
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <lcd_Clear+0x60>)
 8000a4e:	885b      	ldrh	r3, [r3, #2]
 8000a50:	89ba      	ldrh	r2, [r7, #12]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3f3      	bcc.n	8000a3e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	81fb      	strh	r3, [r7, #14]
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <lcd_Clear+0x60>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	89fa      	ldrh	r2, [r7, #14]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3e8      	bcc.n	8000a38 <lcd_Clear+0x28>
		}
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000e0 	.word	0x200000e0

08000a74 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4603      	mov	r3, r0
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	807b      	strh	r3, [r7, #2]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000a92:	887b      	ldrh	r3, [r7, #2]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	883b      	ldrh	r3, [r7, #0]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	88b9      	ldrh	r1, [r7, #4]
 8000aa0:	88f8      	ldrh	r0, [r7, #6]
 8000aa2:	f7ff ff69 	bl	8000978 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	81fb      	strh	r3, [r7, #14]
 8000aaa:	e010      	b.n	8000ace <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	81bb      	strh	r3, [r7, #12]
 8000ab0:	e006      	b.n	8000ac0 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000ab2:	8c3b      	ldrh	r3, [r7, #32]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff3d 	bl	8000934 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	81bb      	strh	r3, [r7, #12]
 8000ac0:	89ba      	ldrh	r2, [r7, #12]
 8000ac2:	887b      	ldrh	r3, [r7, #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d3f4      	bcc.n	8000ab2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	3301      	adds	r3, #1
 8000acc:	81fb      	strh	r3, [r7, #14]
 8000ace:	89fa      	ldrh	r2, [r7, #14]
 8000ad0:	883b      	ldrh	r3, [r7, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d3ea      	bcc.n	8000aac <lcd_Fill+0x38>
		}
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	091b      	lsrs	r3, r3, #4
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <lcd_SetDir+0x44>)
 8000afc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b00:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <lcd_SetDir+0x44>)
 8000b04:	22f0      	movs	r2, #240	; 0xf0
 8000b06:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000b08:	e006      	b.n	8000b18 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <lcd_SetDir+0x44>)
 8000b0c:	22f0      	movs	r2, #240	; 0xf0
 8000b0e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <lcd_SetDir+0x44>)
 8000b12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b16:	805a      	strh	r2, [r3, #2]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	200000e0 	.word	0x200000e0

08000b28 <lcd_init>:


void lcd_init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	48aa      	ldr	r0, [pc, #680]	; (8000ddc <lcd_init+0x2b4>)
 8000b34:	f001 f976 	bl	8001e24 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3c:	f000 fea0 	bl	8001880 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b46:	48a5      	ldr	r0, [pc, #660]	; (8000ddc <lcd_init+0x2b4>)
 8000b48:	f001 f96c 	bl	8001e24 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b50:	f000 fe96 	bl	8001880 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff ffc3 	bl	8000ae0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000b5a:	20d3      	movs	r0, #211	; 0xd3
 8000b5c:	f7ff feda 	bl	8000914 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000b60:	f7ff fef8 	bl	8000954 <LCD_RD_DATA>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b9d      	ldr	r3, [pc, #628]	; (8000de0 <lcd_init+0x2b8>)
 8000b6a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000b6c:	f7ff fef2 	bl	8000954 <LCD_RD_DATA>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b9a      	ldr	r3, [pc, #616]	; (8000de0 <lcd_init+0x2b8>)
 8000b76:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000b78:	f7ff feec 	bl	8000954 <LCD_RD_DATA>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b97      	ldr	r3, [pc, #604]	; (8000de0 <lcd_init+0x2b8>)
 8000b82:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000b84:	4b96      	ldr	r3, [pc, #600]	; (8000de0 <lcd_init+0x2b8>)
 8000b86:	889b      	ldrh	r3, [r3, #4]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b94      	ldr	r3, [pc, #592]	; (8000de0 <lcd_init+0x2b8>)
 8000b8e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000b90:	f7ff fee0 	bl	8000954 <LCD_RD_DATA>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b91      	ldr	r3, [pc, #580]	; (8000de0 <lcd_init+0x2b8>)
 8000b9a:	889b      	ldrh	r3, [r3, #4]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b8f      	ldr	r3, [pc, #572]	; (8000de0 <lcd_init+0x2b8>)
 8000ba2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000ba4:	20cf      	movs	r0, #207	; 0xcf
 8000ba6:	f7ff feb5 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fec2 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000bb0:	20c1      	movs	r0, #193	; 0xc1
 8000bb2:	f7ff febf 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000bb6:	2030      	movs	r0, #48	; 0x30
 8000bb8:	f7ff febc 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000bbc:	20ed      	movs	r0, #237	; 0xed
 8000bbe:	f7ff fea9 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f7ff feb6 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f7ff feb3 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000bce:	2012      	movs	r0, #18
 8000bd0:	f7ff feb0 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000bd4:	2081      	movs	r0, #129	; 0x81
 8000bd6:	f7ff fead 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000bda:	20e8      	movs	r0, #232	; 0xe8
 8000bdc:	f7ff fe9a 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000be0:	2085      	movs	r0, #133	; 0x85
 8000be2:	f7ff fea7 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000be6:	2010      	movs	r0, #16
 8000be8:	f7ff fea4 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000bec:	207a      	movs	r0, #122	; 0x7a
 8000bee:	f7ff fea1 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000bf2:	20cb      	movs	r0, #203	; 0xcb
 8000bf4:	f7ff fe8e 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000bf8:	2039      	movs	r0, #57	; 0x39
 8000bfa:	f7ff fe9b 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000bfe:	202c      	movs	r0, #44	; 0x2c
 8000c00:	f7ff fe98 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fe95 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000c0a:	2034      	movs	r0, #52	; 0x34
 8000c0c:	f7ff fe92 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fe8f 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000c16:	20f7      	movs	r0, #247	; 0xf7
 8000c18:	f7ff fe7c 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000c1c:	2020      	movs	r0, #32
 8000c1e:	f7ff fe89 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000c22:	20ea      	movs	r0, #234	; 0xea
 8000c24:	f7ff fe76 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe83 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fe80 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000c34:	20c0      	movs	r0, #192	; 0xc0
 8000c36:	f7ff fe6d 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000c3a:	201b      	movs	r0, #27
 8000c3c:	f7ff fe7a 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000c40:	20c1      	movs	r0, #193	; 0xc1
 8000c42:	f7ff fe67 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000c46:	2001      	movs	r0, #1
 8000c48:	f7ff fe74 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000c4c:	20c5      	movs	r0, #197	; 0xc5
 8000c4e:	f7ff fe61 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000c52:	2030      	movs	r0, #48	; 0x30
 8000c54:	f7ff fe6e 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000c58:	2030      	movs	r0, #48	; 0x30
 8000c5a:	f7ff fe6b 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000c5e:	20c7      	movs	r0, #199	; 0xc7
 8000c60:	f7ff fe58 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000c64:	20b7      	movs	r0, #183	; 0xb7
 8000c66:	f7ff fe65 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000c6a:	2036      	movs	r0, #54	; 0x36
 8000c6c:	f7ff fe52 	bl	8000914 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000c70:	2008      	movs	r0, #8
 8000c72:	f7ff fe5f 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000c76:	203a      	movs	r0, #58	; 0x3a
 8000c78:	f7ff fe4c 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000c7c:	2055      	movs	r0, #85	; 0x55
 8000c7e:	f7ff fe59 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000c82:	20b1      	movs	r0, #177	; 0xb1
 8000c84:	f7ff fe46 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fe53 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000c8e:	201a      	movs	r0, #26
 8000c90:	f7ff fe50 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000c94:	20b6      	movs	r0, #182	; 0xb6
 8000c96:	f7ff fe3d 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f7ff fe4a 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000ca0:	20a2      	movs	r0, #162	; 0xa2
 8000ca2:	f7ff fe47 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000ca6:	20f2      	movs	r0, #242	; 0xf2
 8000ca8:	f7ff fe34 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fe41 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000cb2:	2026      	movs	r0, #38	; 0x26
 8000cb4:	f7ff fe2e 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fe3b 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000cbe:	20e0      	movs	r0, #224	; 0xe0
 8000cc0:	f7ff fe28 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	f7ff fe35 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000cca:	202a      	movs	r0, #42	; 0x2a
 8000ccc:	f7ff fe32 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000cd0:	2028      	movs	r0, #40	; 0x28
 8000cd2:	f7ff fe2f 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000cd6:	2008      	movs	r0, #8
 8000cd8:	f7ff fe2c 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000cdc:	200e      	movs	r0, #14
 8000cde:	f7ff fe29 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000ce2:	2008      	movs	r0, #8
 8000ce4:	f7ff fe26 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000ce8:	2054      	movs	r0, #84	; 0x54
 8000cea:	f7ff fe23 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000cee:	20a9      	movs	r0, #169	; 0xa9
 8000cf0:	f7ff fe20 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000cf4:	2043      	movs	r0, #67	; 0x43
 8000cf6:	f7ff fe1d 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000cfa:	200a      	movs	r0, #10
 8000cfc:	f7ff fe1a 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d00:	200f      	movs	r0, #15
 8000d02:	f7ff fe17 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fe14 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fe11 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fe0e 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fe0b 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000d1e:	20e1      	movs	r0, #225	; 0xe1
 8000d20:	f7ff fdf8 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe05 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000d2a:	2015      	movs	r0, #21
 8000d2c:	f7ff fe02 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000d30:	2017      	movs	r0, #23
 8000d32:	f7ff fdff 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f7ff fdfc 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000d3c:	2011      	movs	r0, #17
 8000d3e:	f7ff fdf9 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000d42:	2006      	movs	r0, #6
 8000d44:	f7ff fdf6 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000d48:	202b      	movs	r0, #43	; 0x2b
 8000d4a:	f7ff fdf3 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000d4e:	2056      	movs	r0, #86	; 0x56
 8000d50:	f7ff fdf0 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000d54:	203c      	movs	r0, #60	; 0x3c
 8000d56:	f7ff fded 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000d5a:	2005      	movs	r0, #5
 8000d5c:	f7ff fdea 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f7ff fde7 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f7ff fde4 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000d6c:	203f      	movs	r0, #63	; 0x3f
 8000d6e:	f7ff fde1 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000d72:	203f      	movs	r0, #63	; 0x3f
 8000d74:	f7ff fdde 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d78:	200f      	movs	r0, #15
 8000d7a:	f7ff fddb 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000d7e:	202b      	movs	r0, #43	; 0x2b
 8000d80:	f7ff fdc8 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fdd5 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fdd2 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fdcf 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000d96:	203f      	movs	r0, #63	; 0x3f
 8000d98:	f7ff fdcc 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000d9c:	202a      	movs	r0, #42	; 0x2a
 8000d9e:	f7ff fdb9 	bl	8000914 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fdc6 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fdc3 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff fdc0 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000db4:	20ef      	movs	r0, #239	; 0xef
 8000db6:	f7ff fdbd 	bl	8000934 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000dba:	2011      	movs	r0, #17
 8000dbc:	f7ff fdaa 	bl	8000914 <LCD_WR_REG>
	HAL_Delay(120);
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	f000 fd5d 	bl	8001880 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000dc6:	2029      	movs	r0, #41	; 0x29
 8000dc8:	f7ff fda4 	bl	8000914 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <lcd_init+0x2bc>)
 8000dd4:	f001 f826 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	200000e0 	.word	0x200000e0
 8000de4:	40020000 	.word	0x40020000

08000de8 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <led7_init+0x14>)
 8000df2:	f001 f817 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021800 	.word	0x40021800

08000e00 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <led7_Scan+0x104>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <led7_Scan+0x104>)
 8000e0e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000e10:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <led7_Scan+0x108>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <led7_Scan+0x10c>)
 8000e18:	5c9b      	ldrb	r3, [r3, r2]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <led7_Scan+0x104>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <led7_Scan+0x104>)
 8000e2c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <led7_Scan+0x108>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d846      	bhi.n	8000ec4 <led7_Scan+0xc4>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <led7_Scan+0x3c>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e4d 	.word	0x08000e4d
 8000e40:	08000e6b 	.word	0x08000e6b
 8000e44:	08000e89 	.word	0x08000e89
 8000e48:	08000ea7 	.word	0x08000ea7
	case 0:
		spi_buffer |= 0x00b0;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <led7_Scan+0x104>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <led7_Scan+0x104>)
 8000e58:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <led7_Scan+0x104>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <led7_Scan+0x104>)
 8000e66:	801a      	strh	r2, [r3, #0]
		break;
 8000e68:	e02d      	b.n	8000ec6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <led7_Scan+0x104>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <led7_Scan+0x104>)
 8000e76:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <led7_Scan+0x104>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	f023 0320 	bic.w	r3, r3, #32
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <led7_Scan+0x104>)
 8000e84:	801a      	strh	r2, [r3, #0]
		break;
 8000e86:	e01e      	b.n	8000ec6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <led7_Scan+0x104>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <led7_Scan+0x104>)
 8000e94:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <led7_Scan+0x104>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	f023 0310 	bic.w	r3, r3, #16
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <led7_Scan+0x104>)
 8000ea2:	801a      	strh	r2, [r3, #0]
		break;
 8000ea4:	e00f      	b.n	8000ec6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <led7_Scan+0x104>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <led7_Scan+0x104>)
 8000eb2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <led7_Scan+0x104>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <led7_Scan+0x104>)
 8000ec0:	801a      	strh	r2, [r3, #0]
		break;
 8000ec2:	e000      	b.n	8000ec6 <led7_Scan+0xc6>
	default:
		break;
 8000ec4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <led7_Scan+0x108>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	425a      	negs	r2, r3
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	bf58      	it	pl
 8000ed8:	4253      	negpl	r3, r2
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <led7_Scan+0x108>)
 8000ede:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <led7_Scan+0x110>)
 8000ee6:	f000 ff9d 	bl	8001e24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000eea:	2301      	movs	r3, #1
 8000eec:	2202      	movs	r2, #2
 8000eee:	4905      	ldr	r1, [pc, #20]	; (8000f04 <led7_Scan+0x104>)
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <led7_Scan+0x114>)
 8000ef2:	f001 fc9e 	bl	8002832 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <led7_Scan+0x110>)
 8000efc:	f000 ff92 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000004 	.word	0x20000004
 8000f08:	200000e6 	.word	0x200000e6
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	40021800 	.word	0x40021800
 8000f14:	200000f8 	.word	0x200000f8

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fc3e 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f818 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff fbfe 	bl	8000724 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f28:	f000 fb0e 	bl	8001548 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f2c:	f000 f95a 	bl	80011e4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000f30:	f7ff fb28 	bl	8000584 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000f34:	f000 f878 	bl	8001028 <system_init>
  lcd_Clear(WHITE);
 8000f38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f3c:	f7ff fd68 	bl	8000a10 <lcd_Clear>
  test_lcd();
 8000f40:	f000 f89a 	bl	8001078 <test_lcd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setFruitTimer(1000);
 8000f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f48:	f000 f8d0 	bl	80010ec <setFruitTimer>
//	  button_Scan();
//	  test_button();
//	  if(fruit_timer_flag == 1) {
//		  presentFruit(fruit1, '*', 2000, 24);
//	  }
	  generateFruit();
 8000f4c:	f000 fbce 	bl	80016ec <generateFruit>
 8000f50:	e7fc      	b.n	8000f4c <main+0x34>
	...

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fe21 	bl	8003baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a27      	ldr	r2, [pc, #156]	; (8001020 <SystemClock_Config+0xcc>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <SystemClock_Config+0xd0>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc8:	23a8      	movs	r3, #168	; 0xa8
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 ff3d 	bl	8001e58 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe4:	f000 f856 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2105      	movs	r1, #5
 8001006:	4618      	mov	r0, r3
 8001008:	f001 f99e 	bl	8002348 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001012:	f000 f83f 	bl	8001094 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	; 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	  srand(HAL_GetTick());
 800102c:	f000 fc1c 	bl	8001868 <HAL_GetTick>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fc5a 	bl	80038ec <srand>
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2120      	movs	r1, #32
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <system_init+0x4c>)
 800103e:	f000 fef1 	bl	8001e24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <system_init+0x4c>)
 8001048:	f000 feec 	bl	8001e24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2110      	movs	r1, #16
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <system_init+0x4c>)
 8001052:	f000 fee7 	bl	8001e24 <HAL_GPIO_WritePin>
	  timer_init();
 8001056:	f000 f823 	bl	80010a0 <timer_init>
	  led7_init();
 800105a:	f7ff fec5 	bl	8000de8 <led7_init>
	  button_init();
 800105e:	f7ff fa85 	bl	800056c <button_init>
	  lcd_init();
 8001062:	f7ff fd61 	bl	8000b28 <lcd_init>
	  setTimer2(7000);
 8001066:	f641 3058 	movw	r0, #7000	; 0x1b58
 800106a:	f000 f823 	bl	80010b4 <setTimer2>

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af02      	add	r7, sp, #8
	lcd_Fill(0, 0, 240, 20, BLUE);
 800107e:	231f      	movs	r3, #31
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2314      	movs	r3, #20
 8001084:	22f0      	movs	r2, #240	; 0xf0
 8001086:	2100      	movs	r1, #0
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fcf3 	bl	8000a74 <lcd_Fill>
//	lcd_ShowStr(20, 30, "*", WHITE, RED, 24, 0);
//	lcd_ShowChar(20,  30, '*', WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <timer_init+0x10>)
 80010a6:	f001 fe63 	bl	8002d70 <HAL_TIM_Base_Start_IT>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000154 	.word	0x20000154

080010b4 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <setTimer2+0x2c>)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <setTimer2+0x2c>)
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <setTimer2+0x30>)
 80010ca:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <setTimer2+0x34>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200000ec 	.word	0x200000ec
 80010e4:	200000ea 	.word	0x200000ea
 80010e8:	200000e8 	.word	0x200000e8

080010ec <setFruitTimer>:
/**
 * @brief Set duration for fruit timer
 * @param duration Duration of fruit timer
 * @retval None
 */
void setFruitTimer(uint16_t duration) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
	fruit_timer_cycle = duration/FRUIT_CYCLE;
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <setFruitTimer+0x30>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	8013      	strh	r3, [r2, #0]
	fruit_timer_counter = fruit_timer_cycle;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <setFruitTimer+0x30>)
 80010fe:	881a      	ldrh	r2, [r3, #0]
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <setFruitTimer+0x34>)
 8001102:	801a      	strh	r2, [r3, #0]
	fruit_timer_flag = 0;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <setFruitTimer+0x38>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
	fruit_counter = 0;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <setFruitTimer+0x3c>)
 800110c:	2200      	movs	r2, #0
 800110e:	801a      	strh	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	200000f2 	.word	0x200000f2
 8001120:	200000f0 	.word	0x200000f0
 8001124:	200000ee 	.word	0x200000ee
 8001128:	200000f4 	.word	0x200000f4

0800112c <fruitTimerRun>:
/**
 * @brief Timer run logic for fruit timer
 * @param None
 * @retval None
 */
void fruitTimerRun() {
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	if (fruit_timer_counter > 0) {
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <fruitTimerRun+0x50>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <fruitTimerRun+0x1a>
		fruit_timer_counter--;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <fruitTimerRun+0x50>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3b01      	subs	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <fruitTimerRun+0x50>)
 8001142:	801a      	strh	r2, [r3, #0]
			fruit_counter++;
		}
		fruit_timer_flag = 1;
		fruit_timer_counter = fruit_timer_cycle;
	}
}
 8001144:	e015      	b.n	8001172 <fruitTimerRun+0x46>
		if (fruit_counter > 400) {
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <fruitTimerRun+0x54>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800114e:	d903      	bls.n	8001158 <fruitTimerRun+0x2c>
			fruit_counter = 0;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <fruitTimerRun+0x54>)
 8001152:	2200      	movs	r2, #0
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	e005      	b.n	8001164 <fruitTimerRun+0x38>
			fruit_counter++;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <fruitTimerRun+0x54>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <fruitTimerRun+0x54>)
 8001162:	801a      	strh	r2, [r3, #0]
		fruit_timer_flag = 1;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <fruitTimerRun+0x58>)
 8001166:	2201      	movs	r2, #1
 8001168:	801a      	strh	r2, [r3, #0]
		fruit_timer_counter = fruit_timer_cycle;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <fruitTimerRun+0x5c>)
 800116c:	881a      	ldrh	r2, [r3, #0]
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <fruitTimerRun+0x50>)
 8001170:	801a      	strh	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	200000f0 	.word	0x200000f0
 8001180:	200000f4 	.word	0x200000f4
 8001184:	200000ee 	.word	0x200000ee
 8001188:	200000f2 	.word	0x200000f2

0800118c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119c:	d118      	bne.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0x44>
		if(timer2_counter > 0){
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011b0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011bc:	2201      	movs	r2, #1
 80011be:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011c6:	801a      	strh	r2, [r3, #0]
			}
		}
		fruitTimerRun();
 80011c8:	f7ff ffb0 	bl	800112c <fruitTimerRun>
		// 1ms interrupt here
		led7_Scan();
 80011cc:	f7ff fe18 	bl	8000e00 <led7_Scan>
	}
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000ea 	.word	0x200000ea
 80011dc:	200000e8 	.word	0x200000e8
 80011e0:	200000ec 	.word	0x200000ec

080011e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_SPI1_Init+0x64>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <MX_SPI1_Init+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI1_Init+0x64>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI1_Init+0x64>)
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI1_Init+0x64>)
 8001230:	220a      	movs	r2, #10
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_SPI1_Init+0x64>)
 8001236:	f001 fa73 	bl	8002720 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001240:	f7ff ff28 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000f8 	.word	0x200000f8
 800124c:	40013000 	.word	0x40013000

08001250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_SPI_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 800127c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_SPI_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012aa:	2338      	movs	r3, #56	; 0x38
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ba:	2305      	movs	r3, #5
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_SPI_MspInit+0x8c>)
 80012c6:	f000 fc11 	bl	8001aec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40013000 	.word	0x40013000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 fa60 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM2_IRQHandler+0x10>)
 800138a:	f001 fd61 	bl	8002e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000154 	.word	0x20000154

08001398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_kill>:

int _kill(int pid, int sig)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013b2:	f002 fc59 	bl	8003c68 <__errno>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2216      	movs	r2, #22
 80013ba:	601a      	str	r2, [r3, #0]
	return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_exit>:

void _exit (int status)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffe7 	bl	80013a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013da:	e7fe      	b.n	80013da <_exit+0x12>

080013dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e00a      	b.n	8001404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ee:	f3af 8000 	nop.w
 80013f2:	4601      	mov	r1, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf0      	blt.n	80013ee <_read+0x12>
	}

return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e009      	b.n	800143c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf1      	blt.n	8001428 <_write+0x12>
	}
	return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_close>:

int _close(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001476:	605a      	str	r2, [r3, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_isatty>:

int _isatty(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return 1;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f002 fbbe 	bl	8003c68 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20020000 	.word	0x20020000
 8001518:	00000400 	.word	0x00000400
 800151c:	20000150 	.word	0x20000150
 8001520:	200002f0 	.word	0x200002f0

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM2_Init+0x94>)
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_TIM2_Init+0x94>)
 800156e:	f240 3247 	movw	r2, #839	; 0x347
 8001572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM2_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_TIM2_Init+0x94>)
 800157c:	2263      	movs	r2, #99	; 0x63
 800157e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_TIM2_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_TIM2_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_TIM2_Init+0x94>)
 800158e:	f001 fb9f 	bl	8002cd0 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001598:	f7ff fd7c 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_TIM2_Init+0x94>)
 80015aa:	f001 fd59 	bl	8003060 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b4:	f7ff fd6e 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_TIM2_Init+0x94>)
 80015c6:	f001 ff75 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f7ff fd60 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000154 	.word	0x20000154

080015e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d115      	bne.n	800161e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_TIM_Base_MspInit+0x48>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_TIM_Base_MspInit+0x48>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_TIM_Base_MspInit+0x48>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	201c      	movs	r0, #28
 8001614:	f000 fa33 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001618:	201c      	movs	r0, #28
 800161a:	f000 fa4c 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <setFruit>:
 * @brief set x and y for fruit
 * @param x x-axis value
 * @param y y-axis value
 * @retval None
 * */
oFruit setFruit(uint16_t x, uint16_t y) {
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	803b      	strh	r3, [r7, #0]
	oFruit fr1;
	fr1.x = x;
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	81bb      	strh	r3, [r7, #12]
	fr1.y = y;
 8001640:	883b      	ldrh	r3, [r7, #0]
 8001642:	81fb      	strh	r3, [r7, #14]
	fr1.color = BLUE;
 8001644:	231f      	movs	r3, #31
 8001646:	823b      	strh	r3, [r7, #16]
	fr1.Eaten = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	753b      	strb	r3, [r7, #20]
	fr1.point = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	827b      	strh	r3, [r7, #18]
	return fr1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	cb03      	ldmia	r3!, {r0, r1}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	6051      	str	r1, [r2, #4]
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	8113      	strh	r3, [r2, #8]
}
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <displayFruit>:
 * @brief display fruit
 * @param fruit fruit object to display
 * @retval None
 * */

void displayFruit(oFruit fruit) {
 800166e:	b590      	push	{r4, r7, lr}
 8001670:	b087      	sub	sp, #28
 8001672:	af02      	add	r7, sp, #8
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Draw a fruit object with area is 5x5 (squared unit)
	lcd_Fill(fruit.x, fruit.y, fruit.x + 5, fruit.y + 5, fruit.color);
 800167a:	88b8      	ldrh	r0, [r7, #4]
 800167c:	88f9      	ldrh	r1, [r7, #6]
 800167e:	88bb      	ldrh	r3, [r7, #4]
 8001680:	3305      	adds	r3, #5
 8001682:	b29a      	uxth	r2, r3
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	3305      	adds	r3, #5
 8001688:	b29c      	uxth	r4, r3
 800168a:	893b      	ldrh	r3, [r7, #8]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4623      	mov	r3, r4
 8001690:	f7ff f9f0 	bl	8000a74 <lcd_Fill>
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}

0800169c <randomCoordinate>:
 * @param lower lower bound in range of number need to generate
 * @param upper upper bound in range of number need to generate
 * @param count number of generating time
 * @retval num randomn coordinate
 * */
uint16_t randomCoordinate(uint16_t lower, uint16_t upper, uint16_t count) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
 80016a6:	460b      	mov	r3, r1
 80016a8:	80bb      	strh	r3, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	807b      	strh	r3, [r7, #2]
	uint16_t num;
	for (uint16_t i = 0; i < count; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	81bb      	strh	r3, [r7, #12]
 80016b2:	e012      	b.n	80016da <randomCoordinate+0x3e>
		num = (rand() % (upper - lower + 1)) + lower;
 80016b4:	f002 f948 	bl	8003948 <rand>
 80016b8:	4602      	mov	r2, r0
 80016ba:	88b9      	ldrh	r1, [r7, #4]
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	fb92 f1f3 	sdiv	r1, r2, r3
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4413      	add	r3, r2
 80016d2:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < count; i++) {
 80016d4:	89bb      	ldrh	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	81bb      	strh	r3, [r7, #12]
 80016da:	89ba      	ldrh	r2, [r7, #12]
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3e8      	bcc.n	80016b4 <randomCoordinate+0x18>
	}
	return num;
 80016e2:	89fb      	ldrh	r3, [r7, #14]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <generateFruit>:
		return 1;
	}
	return 0;
}

void generateFruit() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
	uint16_t x = randomCoordinate(5, 230, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	21e6      	movs	r1, #230	; 0xe6
 80016f6:	2005      	movs	r0, #5
 80016f8:	f7ff ffd0 	bl	800169c <randomCoordinate>
 80016fc:	4603      	mov	r3, r0
 80016fe:	81fb      	strh	r3, [r7, #14]
	uint16_t y = randomCoordinate(65, 310, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001706:	2041      	movs	r0, #65	; 0x41
 8001708:	f7ff ffc8 	bl	800169c <randomCoordinate>
 800170c:	4603      	mov	r3, r0
 800170e:	81bb      	strh	r3, [r7, #12]

	oFruit fruit = setFruit(x, y);
 8001710:	463b      	mov	r3, r7
 8001712:	89ba      	ldrh	r2, [r7, #12]
 8001714:	89f9      	ldrh	r1, [r7, #14]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff88 	bl	800162c <setFruit>
	displayFruit(fruit);
 800171c:	463b      	mov	r3, r7
 800171e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001722:	f7ff ffa4 	bl	800166e <displayFruit>
	HAL_Delay(500);
 8001726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172a:	f000 f8a9 	bl	8001880 <HAL_Delay>

	lcd_Clear(WHITE);
 800172e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001732:	f7ff f96d 	bl	8000a10 <lcd_Clear>

	HAL_Delay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173a:	f000 f8a1 	bl	8001880 <HAL_Delay>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001772:	f7ff fed7 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f002 fa7d 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fbcd 	bl	8000f18 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800178c:	0800489c 	.word	0x0800489c
  ldr r2, =_sbss
 8001790:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001794:	200002ec 	.word	0x200002ec

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f94f 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fd86 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f967 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f92f 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000008 	.word	0x20000008
 8001838:	20000010 	.word	0x20000010
 800183c:	2000000c 	.word	0x2000000c

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000010 	.word	0x20000010
 8001864:	2000019c 	.word	0x2000019c

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000019c 	.word	0x2000019c

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000010 	.word	0x20000010

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e16b      	b.n	8001de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 815a 	bne.w	8001dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80b4 	beq.w	8001dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a5f      	ldr	r2, [pc, #380]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x314>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_GPIO_Init+0x318>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x222>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_GPIO_Init+0x31c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x21e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x324>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x216>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x328>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x212>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x32c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x20a>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e00e      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e00c      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00a      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f ae90 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e267      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d075      	beq.n	8001f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e76:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d00c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d112      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b82      	ldr	r3, [pc, #520]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	4b7e      	ldr	r3, [pc, #504]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d05b      	beq.n	8001f60 <HAL_RCC_OscConfig+0x108>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d157      	bne.n	8001f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e242      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x74>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xb0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6f      	ldr	r2, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6c      	ldr	r2, [pc, #432]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xb0>
 8001ef0:	4b69      	ldr	r3, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a68      	ldr	r2, [pc, #416]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a65      	ldr	r2, [pc, #404]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fcaa 	bl	8001868 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fca6 	bl	8001868 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e207      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xc0>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fc96 	bl	8001868 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fc92 	bl	8001868 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1f3      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b51      	ldr	r3, [pc, #324]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0xe8>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x152>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1c7      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4937      	ldr	r1, [pc, #220]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCC_OscConfig+0x244>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff fc4b 	bl	8001868 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fc47 	bl	8001868 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1a8      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4925      	ldr	r1, [pc, #148]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_OscConfig+0x244>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fc2a 	bl	8001868 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002018:	f7ff fc26 	bl	8001868 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e187      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d036      	beq.n	80020b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x248>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7ff fc0a 	bl	8001868 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff fc06 	bl	8001868 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e167      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x240>)
 800206c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x200>
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x248>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7ff fbf3 	bl	8001868 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	e00e      	b.n	80020a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002086:	f7ff fbef 	bl	8001868 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d907      	bls.n	80020a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e150      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
 8002098:	40023800 	.word	0x40023800
 800209c:	42470000 	.word	0x42470000
 80020a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ea      	bne.n	8002086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8097 	beq.w	80021ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a7c      	ldr	r2, [pc, #496]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <HAL_RCC_OscConfig+0x474>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a73      	ldr	r2, [pc, #460]	; (80022cc <HAL_RCC_OscConfig+0x474>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7ff fbaf 	bl	8001868 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff fbab 	bl	8001868 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e10c      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x474>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x2ea>
 8002134:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a63      	ldr	r2, [pc, #396]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x324>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x30c>
 800214a:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a5e      	ldr	r2, [pc, #376]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a5b      	ldr	r2, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x324>
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a57      	ldr	r2, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7ff fb70 	bl	8001868 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7ff fb6c 	bl	8001868 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0cb      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCC_OscConfig+0x334>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7ff fb5a 	bl	8001868 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff fb56 	bl	8001868 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0b5      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a1 	beq.w	8002338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d05c      	beq.n	80022bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d141      	bne.n	800228e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_OscConfig+0x478>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fb2a 	bl	8001868 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff fb26 	bl	8001868 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e087      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	3b01      	subs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	491b      	ldr	r1, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x478>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff faff 	bl	8001868 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff fafb 	bl	8001868 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e05c      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x416>
 800228c:	e054      	b.n	8002338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_OscConfig+0x478>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fae8 	bl	8001868 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff fae4 	bl	8001868 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e045      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_OscConfig+0x470>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
 80022ba:	e03d      	b.n	8002338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e038      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4ec>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d11a      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	3b01      	subs	r3, #1
 800231e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0cc      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b68      	ldr	r3, [pc, #416]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d90c      	bls.n	8002384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d044      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e067      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4934      	ldr	r1, [pc, #208]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7ff fa16 	bl	8001868 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7ff fa12 	bl	8001868 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d20c      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f976 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00
 8002504:	40023800 	.word	0x40023800
 8002508:	0800479c 	.word	0x0800479c
 800250c:	20000008 	.word	0x20000008
 8002510:	2000000c 	.word	0x2000000c

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b094      	sub	sp, #80	; 0x50
 800251a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	647b      	str	r3, [r7, #68]	; 0x44
 8002520:	2300      	movs	r3, #0
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002524:	2300      	movs	r3, #0
 8002526:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800252c:	4b79      	ldr	r3, [pc, #484]	; (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d00d      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x40>
 8002538:	2b08      	cmp	r3, #8
 800253a:	f200 80e1 	bhi.w	8002700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x34>
 8002542:	2b04      	cmp	r3, #4
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x3a>
 8002546:	e0db      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCC_GetSysClockFreq+0x204>)
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800254c:	e0db      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_GetSysClockFreq+0x208>)
 8002550:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002552:	e0d8      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002554:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	2200      	movs	r2, #0
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
 8002574:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
 8002582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002586:	4622      	mov	r2, r4
 8002588:	462b      	mov	r3, r5
 800258a:	f04f 0000 	mov.w	r0, #0
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	0159      	lsls	r1, r3, #5
 8002594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002598:	0150      	lsls	r0, r2, #5
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4621      	mov	r1, r4
 80025a0:	1a51      	subs	r1, r2, r1
 80025a2:	6139      	str	r1, [r7, #16]
 80025a4:	4629      	mov	r1, r5
 80025a6:	eb63 0301 	sbc.w	r3, r3, r1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025b8:	4659      	mov	r1, fp
 80025ba:	018b      	lsls	r3, r1, #6
 80025bc:	4651      	mov	r1, sl
 80025be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c2:	4651      	mov	r1, sl
 80025c4:	018a      	lsls	r2, r1, #6
 80025c6:	4651      	mov	r1, sl
 80025c8:	ebb2 0801 	subs.w	r8, r2, r1
 80025cc:	4659      	mov	r1, fp
 80025ce:	eb63 0901 	sbc.w	r9, r3, r1
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025e6:	4690      	mov	r8, r2
 80025e8:	4699      	mov	r9, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	eb18 0303 	adds.w	r3, r8, r3
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	462b      	mov	r3, r5
 80025f4:	eb49 0303 	adc.w	r3, r9, r3
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002606:	4629      	mov	r1, r5
 8002608:	024b      	lsls	r3, r1, #9
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002610:	4621      	mov	r1, r4
 8002612:	024a      	lsls	r2, r1, #9
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261a:	2200      	movs	r2, #0
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
 800261e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002624:	f7fd fe24 	bl	8000270 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002630:	e058      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	2200      	movs	r2, #0
 800263a:	4618      	mov	r0, r3
 800263c:	4611      	mov	r1, r2
 800263e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
 8002648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800264c:	4642      	mov	r2, r8
 800264e:	464b      	mov	r3, r9
 8002650:	f04f 0000 	mov.w	r0, #0
 8002654:	f04f 0100 	mov.w	r1, #0
 8002658:	0159      	lsls	r1, r3, #5
 800265a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265e:	0150      	lsls	r0, r2, #5
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4641      	mov	r1, r8
 8002666:	ebb2 0a01 	subs.w	sl, r2, r1
 800266a:	4649      	mov	r1, r9
 800266c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800267c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002684:	ebb2 040a 	subs.w	r4, r2, sl
 8002688:	eb63 050b 	sbc.w	r5, r3, fp
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	00eb      	lsls	r3, r5, #3
 8002696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269a:	00e2      	lsls	r2, r4, #3
 800269c:	4614      	mov	r4, r2
 800269e:	461d      	mov	r5, r3
 80026a0:	4643      	mov	r3, r8
 80026a2:	18e3      	adds	r3, r4, r3
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	464b      	mov	r3, r9
 80026a8:	eb45 0303 	adc.w	r3, r5, r3
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4629      	mov	r1, r5
 80026bc:	028b      	lsls	r3, r1, #10
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c4:	4621      	mov	r1, r4
 80026c6:	028a      	lsls	r2, r1, #10
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ce:	2200      	movs	r2, #0
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	61fa      	str	r2, [r7, #28]
 80026d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d8:	f7fd fdca 	bl	8000270 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetSysClockFreq+0x204>)
 8002702:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002708:	4618      	mov	r0, r3
 800270a:	3750      	adds	r7, #80	; 0x50
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	00f42400 	.word	0x00f42400
 800271c:	007a1200 	.word	0x007a1200

08002720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07b      	b.n	800282a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d009      	beq.n	8002758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
 800274a:	e005      	b.n	8002758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fd6c 	bl	8001250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0104 	and.w	r1, r3, #4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f003 0210 	and.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002818:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b088      	sub	sp, #32
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_SPI_Transmit+0x22>
 8002850:	2302      	movs	r3, #2
 8002852:	e126      	b.n	8002aa2 <HAL_SPI_Transmit+0x270>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800285c:	f7ff f804 	bl	8001868 <HAL_GetTick>
 8002860:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d002      	beq.n	8002878 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002876:	e10b      	b.n	8002a90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_Transmit+0x52>
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002888:	e102      	b.n	8002a90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d10f      	bne.n	80028f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d007      	beq.n	8002910 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002918:	d14b      	bne.n	80029b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Transmit+0xf6>
 8002922:	8afb      	ldrh	r3, [r7, #22]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d13e      	bne.n	80029a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	1c9a      	adds	r2, r3, #2
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800294c:	e02b      	b.n	80029a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d112      	bne.n	8002982 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002980:	e011      	b.n	80029a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002982:	f7fe ff71 	bl	8001868 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d803      	bhi.n	800299a <HAL_SPI_Transmit+0x168>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d102      	bne.n	80029a0 <HAL_SPI_Transmit+0x16e>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029a4:	e074      	b.n	8002a90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ce      	bne.n	800294e <HAL_SPI_Transmit+0x11c>
 80029b0:	e04c      	b.n	8002a4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Transmit+0x18e>
 80029ba:	8afb      	ldrh	r3, [r7, #22]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d140      	bne.n	8002a42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029e6:	e02c      	b.n	8002a42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d113      	bne.n	8002a1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a1c:	e011      	b.n	8002a42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a1e:	f7fe ff23 	bl	8001868 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d803      	bhi.n	8002a36 <HAL_SPI_Transmit+0x204>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d102      	bne.n	8002a3c <HAL_SPI_Transmit+0x20a>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a40:	e026      	b.n	8002a90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1cd      	bne.n	80029e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f8b3 	bl	8002bbc <SPI_EndRxTxTransaction>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e000      	b.n	8002a90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002abc:	f7fe fed4 	bl	8001868 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002acc:	f7fe fecc 	bl	8001868 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae2:	e054      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d050      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aec:	f7fe febc 	bl	8001868 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d111      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d004      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d10f      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19b      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000008 	.word	0x20000008

08002bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <SPI_EndRxTxTransaction+0x7c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <SPI_EndRxTxTransaction+0x80>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0d5b      	lsrs	r3, r3, #21
 8002bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be6:	d112      	bne.n	8002c0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ff5a 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00f      	b.n	8002c2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d0f2      	beq.n	8002c0e <SPI_EndRxTxTransaction+0x52>
 8002c28:	e000      	b.n	8002c2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c2a:	bf00      	nop
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000008 	.word	0x20000008
 8002c3c:	165e9f81 	.word	0x165e9f81

08002c40 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e038      	b.n	8002cc8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7fd fd50 	bl	8000710 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3308      	adds	r3, #8
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f000 fcaa 	bl	80035d4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	f000 fd0c 	bl	80036a8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6858      	ldr	r0, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	f000 fd39 	bl	8003714 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	f041 0101 	orr.w	r1, r1, #1
 8002cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e041      	b.n	8002d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe fc72 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f000 fa96 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d001      	beq.n	8002d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e04e      	b.n	8002e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d01d      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x80>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d010      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	e007      	b.n	8002e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40010400 	.word	0x40010400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40001800 	.word	0x40001800

08002e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0202 	mvn.w	r2, #2
 8002e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9b5 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9a7 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f9b8 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0204 	mvn.w	r2, #4
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f98b 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f97d 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f98e 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0208 	mvn.w	r2, #8
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f961 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f953 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f964 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0210 	mvn.w	r2, #16
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f937 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f929 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f93a 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0201 	mvn.w	r2, #1
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe f8dc 	bl	800118c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d10e      	bne.n	8003000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d107      	bne.n	8003000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fae0 	bl	80035c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d10e      	bne.n	800302c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d107      	bne.n	800302c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8ff 	bl	800322a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	d10e      	bne.n	8003058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d107      	bne.n	8003058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0220 	mvn.w	r2, #32
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 faaa 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIM_ConfigClockSource+0x1c>
 8003078:	2302      	movs	r3, #2
 800307a:	e0b4      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x186>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800309a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b4:	d03e      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0xd4>
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	f200 8087 	bhi.w	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	f000 8086 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x172>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	d87f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d01a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xa6>
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d87b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d050      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x11a>
 80030d8:	2b60      	cmp	r3, #96	; 0x60
 80030da:	d877      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d03c      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xfa>
 80030e0:	2b50      	cmp	r3, #80	; 0x50
 80030e2:	d873      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d058      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x13a>
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d86f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b30      	cmp	r3, #48	; 0x30
 80030ee:	d064      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	2b30      	cmp	r3, #48	; 0x30
 80030f2:	d86b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d060      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d867      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 8003100:	2b10      	cmp	r3, #16
 8003102:	d05a      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 8003104:	e062      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f000 f9ad 	bl	8003474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	609a      	str	r2, [r3, #8]
      break;
 8003132:	e04f      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f000 f996 	bl	8003474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003156:	609a      	str	r2, [r3, #8]
      break;
 8003158:	e03c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	461a      	mov	r2, r3
 8003168:	f000 f90a 	bl	8003380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2150      	movs	r1, #80	; 0x50
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f963 	bl	800343e <TIM_ITRx_SetConfig>
      break;
 8003178:	e02c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 f929 	bl	80033de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2160      	movs	r1, #96	; 0x60
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f953 	bl	800343e <TIM_ITRx_SetConfig>
      break;
 8003198:	e01c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 f8ea 	bl	8003380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2140      	movs	r1, #64	; 0x40
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f943 	bl	800343e <TIM_ITRx_SetConfig>
      break;
 80031b8:	e00c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f000 f93a 	bl	800343e <TIM_ITRx_SetConfig>
      break;
 80031ca:	e003      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      break;
 80031d0:	e000      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a40      	ldr	r2, [pc, #256]	; (8003354 <TIM_Base_SetConfig+0x114>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d00f      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3d      	ldr	r2, [pc, #244]	; (8003358 <TIM_Base_SetConfig+0x118>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <TIM_Base_SetConfig+0x11c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <TIM_Base_SetConfig+0x120>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3a      	ldr	r2, [pc, #232]	; (8003364 <TIM_Base_SetConfig+0x124>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2f      	ldr	r2, [pc, #188]	; (8003354 <TIM_Base_SetConfig+0x114>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d027      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <TIM_Base_SetConfig+0x118>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d023      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	; (800335c <TIM_Base_SetConfig+0x11c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <TIM_Base_SetConfig+0x120>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a29      	ldr	r2, [pc, #164]	; (8003364 <TIM_Base_SetConfig+0x124>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a28      	ldr	r2, [pc, #160]	; (8003368 <TIM_Base_SetConfig+0x128>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <TIM_Base_SetConfig+0x12c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0x130>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0x134>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <TIM_Base_SetConfig+0x138>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <TIM_Base_SetConfig+0x13c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <TIM_Base_SetConfig+0x114>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_Base_SetConfig+0xf8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <TIM_Base_SetConfig+0x124>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40010400 	.word	0x40010400
 8003368:	40014000 	.word	0x40014000
 800336c:	40014400 	.word	0x40014400
 8003370:	40014800 	.word	0x40014800
 8003374:	40001800 	.word	0x40001800
 8003378:	40001c00 	.word	0x40001c00
 800337c:	40002000 	.word	0x40002000

08003380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 030a 	bic.w	r3, r3, #10
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033de:	b480      	push	{r7}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	031b      	lsls	r3, r3, #12
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800341a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	f043 0307 	orr.w	r3, r3, #7
 8003460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	609a      	str	r2, [r3, #8]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	021a      	lsls	r2, r3, #8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	431a      	orrs	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e05a      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d01d      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	f023 0101 	bic.w	r1, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d102      	bne.n	8003604 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e001      	b.n	8003608 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003614:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800361a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003620:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003626:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800362c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003632:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003638:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800363e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003644:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <FSMC_NORSRAM_Init+0xd0>)
 8003664:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800366c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003674:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	ea02 0103 	and.w	r1, r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4319      	orrs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	0008fb7f 	.word	0x0008fb7f

080036a8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	051b      	lsls	r3, r3, #20
 80036e6:	431a      	orrs	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	3b02      	subs	r3, #2
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	3201      	adds	r2, #1
 80036fc:	4319      	orrs	r1, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003728:	d11d      	bne.n	8003766 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003734:	4013      	ands	r3, r2
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	6852      	ldr	r2, [r2, #4]
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	4311      	orrs	r1, r2
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	0212      	lsls	r2, r2, #8
 8003748:	4311      	orrs	r1, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	6992      	ldr	r2, [r2, #24]
 800374e:	4311      	orrs	r1, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	68d2      	ldr	r2, [r2, #12]
 8003754:	0412      	lsls	r2, r2, #16
 8003756:	430a      	orrs	r2, r1
 8003758:	ea43 0102 	orr.w	r1, r3, r2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003764:	e005      	b.n	8003772 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800376e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	cff00000 	.word	0xcff00000

08003784 <malloc>:
 8003784:	4b02      	ldr	r3, [pc, #8]	; (8003790 <malloc+0xc>)
 8003786:	4601      	mov	r1, r0
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f000 b823 	b.w	80037d4 <_malloc_r>
 800378e:	bf00      	nop
 8003790:	2000006c 	.word	0x2000006c

08003794 <sbrk_aligned>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	4e0e      	ldr	r6, [pc, #56]	; (80037d0 <sbrk_aligned+0x3c>)
 8003798:	460c      	mov	r4, r1
 800379a:	6831      	ldr	r1, [r6, #0]
 800379c:	4605      	mov	r5, r0
 800379e:	b911      	cbnz	r1, 80037a6 <sbrk_aligned+0x12>
 80037a0:	f000 fa40 	bl	8003c24 <_sbrk_r>
 80037a4:	6030      	str	r0, [r6, #0]
 80037a6:	4621      	mov	r1, r4
 80037a8:	4628      	mov	r0, r5
 80037aa:	f000 fa3b 	bl	8003c24 <_sbrk_r>
 80037ae:	1c43      	adds	r3, r0, #1
 80037b0:	d00a      	beq.n	80037c8 <sbrk_aligned+0x34>
 80037b2:	1cc4      	adds	r4, r0, #3
 80037b4:	f024 0403 	bic.w	r4, r4, #3
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d007      	beq.n	80037cc <sbrk_aligned+0x38>
 80037bc:	1a21      	subs	r1, r4, r0
 80037be:	4628      	mov	r0, r5
 80037c0:	f000 fa30 	bl	8003c24 <_sbrk_r>
 80037c4:	3001      	adds	r0, #1
 80037c6:	d101      	bne.n	80037cc <sbrk_aligned+0x38>
 80037c8:	f04f 34ff 	mov.w	r4, #4294967295
 80037cc:	4620      	mov	r0, r4
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	200001a4 	.word	0x200001a4

080037d4 <_malloc_r>:
 80037d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d8:	1ccd      	adds	r5, r1, #3
 80037da:	f025 0503 	bic.w	r5, r5, #3
 80037de:	3508      	adds	r5, #8
 80037e0:	2d0c      	cmp	r5, #12
 80037e2:	bf38      	it	cc
 80037e4:	250c      	movcc	r5, #12
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	4607      	mov	r7, r0
 80037ea:	db01      	blt.n	80037f0 <_malloc_r+0x1c>
 80037ec:	42a9      	cmp	r1, r5
 80037ee:	d905      	bls.n	80037fc <_malloc_r+0x28>
 80037f0:	230c      	movs	r3, #12
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	2600      	movs	r6, #0
 80037f6:	4630      	mov	r0, r6
 80037f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038d0 <_malloc_r+0xfc>
 8003800:	f000 f868 	bl	80038d4 <__malloc_lock>
 8003804:	f8d8 3000 	ldr.w	r3, [r8]
 8003808:	461c      	mov	r4, r3
 800380a:	bb5c      	cbnz	r4, 8003864 <_malloc_r+0x90>
 800380c:	4629      	mov	r1, r5
 800380e:	4638      	mov	r0, r7
 8003810:	f7ff ffc0 	bl	8003794 <sbrk_aligned>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	4604      	mov	r4, r0
 8003818:	d155      	bne.n	80038c6 <_malloc_r+0xf2>
 800381a:	f8d8 4000 	ldr.w	r4, [r8]
 800381e:	4626      	mov	r6, r4
 8003820:	2e00      	cmp	r6, #0
 8003822:	d145      	bne.n	80038b0 <_malloc_r+0xdc>
 8003824:	2c00      	cmp	r4, #0
 8003826:	d048      	beq.n	80038ba <_malloc_r+0xe6>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	4631      	mov	r1, r6
 800382c:	4638      	mov	r0, r7
 800382e:	eb04 0903 	add.w	r9, r4, r3
 8003832:	f000 f9f7 	bl	8003c24 <_sbrk_r>
 8003836:	4581      	cmp	r9, r0
 8003838:	d13f      	bne.n	80038ba <_malloc_r+0xe6>
 800383a:	6821      	ldr	r1, [r4, #0]
 800383c:	1a6d      	subs	r5, r5, r1
 800383e:	4629      	mov	r1, r5
 8003840:	4638      	mov	r0, r7
 8003842:	f7ff ffa7 	bl	8003794 <sbrk_aligned>
 8003846:	3001      	adds	r0, #1
 8003848:	d037      	beq.n	80038ba <_malloc_r+0xe6>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	442b      	add	r3, r5
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	f8d8 3000 	ldr.w	r3, [r8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d038      	beq.n	80038ca <_malloc_r+0xf6>
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	42a2      	cmp	r2, r4
 800385c:	d12b      	bne.n	80038b6 <_malloc_r+0xe2>
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e00f      	b.n	8003884 <_malloc_r+0xb0>
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	1b52      	subs	r2, r2, r5
 8003868:	d41f      	bmi.n	80038aa <_malloc_r+0xd6>
 800386a:	2a0b      	cmp	r2, #11
 800386c:	d917      	bls.n	800389e <_malloc_r+0xca>
 800386e:	1961      	adds	r1, r4, r5
 8003870:	42a3      	cmp	r3, r4
 8003872:	6025      	str	r5, [r4, #0]
 8003874:	bf18      	it	ne
 8003876:	6059      	strne	r1, [r3, #4]
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	bf08      	it	eq
 800387c:	f8c8 1000 	streq.w	r1, [r8]
 8003880:	5162      	str	r2, [r4, r5]
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	4638      	mov	r0, r7
 8003886:	f104 060b 	add.w	r6, r4, #11
 800388a:	f000 f829 	bl	80038e0 <__malloc_unlock>
 800388e:	f026 0607 	bic.w	r6, r6, #7
 8003892:	1d23      	adds	r3, r4, #4
 8003894:	1af2      	subs	r2, r6, r3
 8003896:	d0ae      	beq.n	80037f6 <_malloc_r+0x22>
 8003898:	1b9b      	subs	r3, r3, r6
 800389a:	50a3      	str	r3, [r4, r2]
 800389c:	e7ab      	b.n	80037f6 <_malloc_r+0x22>
 800389e:	42a3      	cmp	r3, r4
 80038a0:	6862      	ldr	r2, [r4, #4]
 80038a2:	d1dd      	bne.n	8003860 <_malloc_r+0x8c>
 80038a4:	f8c8 2000 	str.w	r2, [r8]
 80038a8:	e7ec      	b.n	8003884 <_malloc_r+0xb0>
 80038aa:	4623      	mov	r3, r4
 80038ac:	6864      	ldr	r4, [r4, #4]
 80038ae:	e7ac      	b.n	800380a <_malloc_r+0x36>
 80038b0:	4634      	mov	r4, r6
 80038b2:	6876      	ldr	r6, [r6, #4]
 80038b4:	e7b4      	b.n	8003820 <_malloc_r+0x4c>
 80038b6:	4613      	mov	r3, r2
 80038b8:	e7cc      	b.n	8003854 <_malloc_r+0x80>
 80038ba:	230c      	movs	r3, #12
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4638      	mov	r0, r7
 80038c0:	f000 f80e 	bl	80038e0 <__malloc_unlock>
 80038c4:	e797      	b.n	80037f6 <_malloc_r+0x22>
 80038c6:	6025      	str	r5, [r4, #0]
 80038c8:	e7dc      	b.n	8003884 <_malloc_r+0xb0>
 80038ca:	605b      	str	r3, [r3, #4]
 80038cc:	deff      	udf	#255	; 0xff
 80038ce:	bf00      	nop
 80038d0:	200001a0 	.word	0x200001a0

080038d4 <__malloc_lock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__malloc_lock+0x8>)
 80038d6:	f000 b9f1 	b.w	8003cbc <__retarget_lock_acquire_recursive>
 80038da:	bf00      	nop
 80038dc:	200002e8 	.word	0x200002e8

080038e0 <__malloc_unlock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__malloc_unlock+0x8>)
 80038e2:	f000 b9ec 	b.w	8003cbe <__retarget_lock_release_recursive>
 80038e6:	bf00      	nop
 80038e8:	200002e8 	.word	0x200002e8

080038ec <srand>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <srand+0x44>)
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038f4:	4604      	mov	r4, r0
 80038f6:	b9b3      	cbnz	r3, 8003926 <srand+0x3a>
 80038f8:	2018      	movs	r0, #24
 80038fa:	f7ff ff43 	bl	8003784 <malloc>
 80038fe:	4602      	mov	r2, r0
 8003900:	6328      	str	r0, [r5, #48]	; 0x30
 8003902:	b920      	cbnz	r0, 800390e <srand+0x22>
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <srand+0x48>)
 8003906:	480c      	ldr	r0, [pc, #48]	; (8003938 <srand+0x4c>)
 8003908:	2146      	movs	r1, #70	; 0x46
 800390a:	f000 f9d9 	bl	8003cc0 <__assert_func>
 800390e:	490b      	ldr	r1, [pc, #44]	; (800393c <srand+0x50>)
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <srand+0x54>)
 8003912:	e9c0 1300 	strd	r1, r3, [r0]
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <srand+0x58>)
 8003918:	6083      	str	r3, [r0, #8]
 800391a:	230b      	movs	r3, #11
 800391c:	8183      	strh	r3, [r0, #12]
 800391e:	2100      	movs	r1, #0
 8003920:	2001      	movs	r0, #1
 8003922:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003926:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003928:	2200      	movs	r2, #0
 800392a:	611c      	str	r4, [r3, #16]
 800392c:	615a      	str	r2, [r3, #20]
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	2000006c 	.word	0x2000006c
 8003934:	080047ac 	.word	0x080047ac
 8003938:	080047c3 	.word	0x080047c3
 800393c:	abcd330e 	.word	0xabcd330e
 8003940:	e66d1234 	.word	0xe66d1234
 8003944:	0005deec 	.word	0x0005deec

08003948 <rand>:
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <rand+0x5c>)
 800394a:	b510      	push	{r4, lr}
 800394c:	681c      	ldr	r4, [r3, #0]
 800394e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003950:	b9b3      	cbnz	r3, 8003980 <rand+0x38>
 8003952:	2018      	movs	r0, #24
 8003954:	f7ff ff16 	bl	8003784 <malloc>
 8003958:	4602      	mov	r2, r0
 800395a:	6320      	str	r0, [r4, #48]	; 0x30
 800395c:	b920      	cbnz	r0, 8003968 <rand+0x20>
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <rand+0x60>)
 8003960:	4812      	ldr	r0, [pc, #72]	; (80039ac <rand+0x64>)
 8003962:	2152      	movs	r1, #82	; 0x52
 8003964:	f000 f9ac 	bl	8003cc0 <__assert_func>
 8003968:	4911      	ldr	r1, [pc, #68]	; (80039b0 <rand+0x68>)
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <rand+0x6c>)
 800396c:	e9c0 1300 	strd	r1, r3, [r0]
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <rand+0x70>)
 8003972:	6083      	str	r3, [r0, #8]
 8003974:	230b      	movs	r3, #11
 8003976:	8183      	strh	r3, [r0, #12]
 8003978:	2100      	movs	r1, #0
 800397a:	2001      	movs	r0, #1
 800397c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003980:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003982:	480e      	ldr	r0, [pc, #56]	; (80039bc <rand+0x74>)
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	694c      	ldr	r4, [r1, #20]
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <rand+0x78>)
 800398a:	4358      	muls	r0, r3
 800398c:	fb02 0004 	mla	r0, r2, r4, r0
 8003990:	fba3 3202 	umull	r3, r2, r3, r2
 8003994:	3301      	adds	r3, #1
 8003996:	eb40 0002 	adc.w	r0, r0, r2
 800399a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800399e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80039a2:	bd10      	pop	{r4, pc}
 80039a4:	2000006c 	.word	0x2000006c
 80039a8:	080047ac 	.word	0x080047ac
 80039ac:	080047c3 	.word	0x080047c3
 80039b0:	abcd330e 	.word	0xabcd330e
 80039b4:	e66d1234 	.word	0xe66d1234
 80039b8:	0005deec 	.word	0x0005deec
 80039bc:	5851f42d 	.word	0x5851f42d
 80039c0:	4c957f2d 	.word	0x4c957f2d

080039c4 <std>:
 80039c4:	2300      	movs	r3, #0
 80039c6:	b510      	push	{r4, lr}
 80039c8:	4604      	mov	r4, r0
 80039ca:	e9c0 3300 	strd	r3, r3, [r0]
 80039ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039d2:	6083      	str	r3, [r0, #8]
 80039d4:	8181      	strh	r1, [r0, #12]
 80039d6:	6643      	str	r3, [r0, #100]	; 0x64
 80039d8:	81c2      	strh	r2, [r0, #14]
 80039da:	6183      	str	r3, [r0, #24]
 80039dc:	4619      	mov	r1, r3
 80039de:	2208      	movs	r2, #8
 80039e0:	305c      	adds	r0, #92	; 0x5c
 80039e2:	f000 f8e2 	bl	8003baa <memset>
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <std+0x38>)
 80039e8:	6263      	str	r3, [r4, #36]	; 0x24
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <std+0x3c>)
 80039ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <std+0x40>)
 80039f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <std+0x44>)
 80039f4:	6224      	str	r4, [r4, #32]
 80039f6:	6323      	str	r3, [r4, #48]	; 0x30
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	bf00      	nop
 80039fc:	08003b25 	.word	0x08003b25
 8003a00:	08003b47 	.word	0x08003b47
 8003a04:	08003b7f 	.word	0x08003b7f
 8003a08:	08003ba3 	.word	0x08003ba3

08003a0c <stdio_exit_handler>:
 8003a0c:	4a02      	ldr	r2, [pc, #8]	; (8003a18 <stdio_exit_handler+0xc>)
 8003a0e:	4903      	ldr	r1, [pc, #12]	; (8003a1c <stdio_exit_handler+0x10>)
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <stdio_exit_handler+0x14>)
 8003a12:	f000 b869 	b.w	8003ae8 <_fwalk_sglue>
 8003a16:	bf00      	nop
 8003a18:	20000014 	.word	0x20000014
 8003a1c:	08003ea1 	.word	0x08003ea1
 8003a20:	20000020 	.word	0x20000020

08003a24 <cleanup_stdio>:
 8003a24:	6841      	ldr	r1, [r0, #4]
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <cleanup_stdio+0x34>)
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	b510      	push	{r4, lr}
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	d001      	beq.n	8003a34 <cleanup_stdio+0x10>
 8003a30:	f000 fa36 	bl	8003ea0 <_fflush_r>
 8003a34:	68a1      	ldr	r1, [r4, #8]
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <cleanup_stdio+0x38>)
 8003a38:	4299      	cmp	r1, r3
 8003a3a:	d002      	beq.n	8003a42 <cleanup_stdio+0x1e>
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f000 fa2f 	bl	8003ea0 <_fflush_r>
 8003a42:	68e1      	ldr	r1, [r4, #12]
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <cleanup_stdio+0x3c>)
 8003a46:	4299      	cmp	r1, r3
 8003a48:	d004      	beq.n	8003a54 <cleanup_stdio+0x30>
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a50:	f000 ba26 	b.w	8003ea0 <_fflush_r>
 8003a54:	bd10      	pop	{r4, pc}
 8003a56:	bf00      	nop
 8003a58:	200001a8 	.word	0x200001a8
 8003a5c:	20000210 	.word	0x20000210
 8003a60:	20000278 	.word	0x20000278

08003a64 <global_stdio_init.part.0>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <global_stdio_init.part.0+0x30>)
 8003a68:	4c0b      	ldr	r4, [pc, #44]	; (8003a98 <global_stdio_init.part.0+0x34>)
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <global_stdio_init.part.0+0x38>)
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	4620      	mov	r0, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	2104      	movs	r1, #4
 8003a74:	f7ff ffa6 	bl	80039c4 <std>
 8003a78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2109      	movs	r1, #9
 8003a80:	f7ff ffa0 	bl	80039c4 <std>
 8003a84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a88:	2202      	movs	r2, #2
 8003a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a8e:	2112      	movs	r1, #18
 8003a90:	f7ff bf98 	b.w	80039c4 <std>
 8003a94:	200002e0 	.word	0x200002e0
 8003a98:	200001a8 	.word	0x200001a8
 8003a9c:	08003a0d 	.word	0x08003a0d

08003aa0 <__sfp_lock_acquire>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	; (8003aa8 <__sfp_lock_acquire+0x8>)
 8003aa2:	f000 b90b 	b.w	8003cbc <__retarget_lock_acquire_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	200002e9 	.word	0x200002e9

08003aac <__sfp_lock_release>:
 8003aac:	4801      	ldr	r0, [pc, #4]	; (8003ab4 <__sfp_lock_release+0x8>)
 8003aae:	f000 b906 	b.w	8003cbe <__retarget_lock_release_recursive>
 8003ab2:	bf00      	nop
 8003ab4:	200002e9 	.word	0x200002e9

08003ab8 <__sinit>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	4604      	mov	r4, r0
 8003abc:	f7ff fff0 	bl	8003aa0 <__sfp_lock_acquire>
 8003ac0:	6a23      	ldr	r3, [r4, #32]
 8003ac2:	b11b      	cbz	r3, 8003acc <__sinit+0x14>
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac8:	f7ff bff0 	b.w	8003aac <__sfp_lock_release>
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <__sinit+0x28>)
 8003ace:	6223      	str	r3, [r4, #32]
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <__sinit+0x2c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f5      	bne.n	8003ac4 <__sinit+0xc>
 8003ad8:	f7ff ffc4 	bl	8003a64 <global_stdio_init.part.0>
 8003adc:	e7f2      	b.n	8003ac4 <__sinit+0xc>
 8003ade:	bf00      	nop
 8003ae0:	08003a25 	.word	0x08003a25
 8003ae4:	200002e0 	.word	0x200002e0

08003ae8 <_fwalk_sglue>:
 8003ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aec:	4607      	mov	r7, r0
 8003aee:	4688      	mov	r8, r1
 8003af0:	4614      	mov	r4, r2
 8003af2:	2600      	movs	r6, #0
 8003af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003af8:	f1b9 0901 	subs.w	r9, r9, #1
 8003afc:	d505      	bpl.n	8003b0a <_fwalk_sglue+0x22>
 8003afe:	6824      	ldr	r4, [r4, #0]
 8003b00:	2c00      	cmp	r4, #0
 8003b02:	d1f7      	bne.n	8003af4 <_fwalk_sglue+0xc>
 8003b04:	4630      	mov	r0, r6
 8003b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b0a:	89ab      	ldrh	r3, [r5, #12]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d907      	bls.n	8003b20 <_fwalk_sglue+0x38>
 8003b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b14:	3301      	adds	r3, #1
 8003b16:	d003      	beq.n	8003b20 <_fwalk_sglue+0x38>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	47c0      	blx	r8
 8003b1e:	4306      	orrs	r6, r0
 8003b20:	3568      	adds	r5, #104	; 0x68
 8003b22:	e7e9      	b.n	8003af8 <_fwalk_sglue+0x10>

08003b24 <__sread>:
 8003b24:	b510      	push	{r4, lr}
 8003b26:	460c      	mov	r4, r1
 8003b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2c:	f000 f868 	bl	8003c00 <_read_r>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	bfab      	itete	ge
 8003b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b36:	89a3      	ldrhlt	r3, [r4, #12]
 8003b38:	181b      	addge	r3, r3, r0
 8003b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b3e:	bfac      	ite	ge
 8003b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b42:	81a3      	strhlt	r3, [r4, #12]
 8003b44:	bd10      	pop	{r4, pc}

08003b46 <__swrite>:
 8003b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4a:	461f      	mov	r7, r3
 8003b4c:	898b      	ldrh	r3, [r1, #12]
 8003b4e:	05db      	lsls	r3, r3, #23
 8003b50:	4605      	mov	r5, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	4616      	mov	r6, r2
 8003b56:	d505      	bpl.n	8003b64 <__swrite+0x1e>
 8003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f000 f83c 	bl	8003bdc <_lseek_r>
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b6e:	81a3      	strh	r3, [r4, #12]
 8003b70:	4632      	mov	r2, r6
 8003b72:	463b      	mov	r3, r7
 8003b74:	4628      	mov	r0, r5
 8003b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7a:	f000 b863 	b.w	8003c44 <_write_r>

08003b7e <__sseek>:
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	460c      	mov	r4, r1
 8003b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b86:	f000 f829 	bl	8003bdc <_lseek_r>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	bf15      	itete	ne
 8003b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b9a:	81a3      	strheq	r3, [r4, #12]
 8003b9c:	bf18      	it	ne
 8003b9e:	81a3      	strhne	r3, [r4, #12]
 8003ba0:	bd10      	pop	{r4, pc}

08003ba2 <__sclose>:
 8003ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba6:	f000 b809 	b.w	8003bbc <_close_r>

08003baa <memset>:
 8003baa:	4402      	add	r2, r0
 8003bac:	4603      	mov	r3, r0
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d100      	bne.n	8003bb4 <memset+0xa>
 8003bb2:	4770      	bx	lr
 8003bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb8:	e7f9      	b.n	8003bae <memset+0x4>
	...

08003bbc <_close_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	4d06      	ldr	r5, [pc, #24]	; (8003bd8 <_close_r+0x1c>)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	f7fd fc41 	bl	800144e <_close>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_close_r+0x1a>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_close_r+0x1a>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	200002e4 	.word	0x200002e4

08003bdc <_lseek_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4d07      	ldr	r5, [pc, #28]	; (8003bfc <_lseek_r+0x20>)
 8003be0:	4604      	mov	r4, r0
 8003be2:	4608      	mov	r0, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	602a      	str	r2, [r5, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7fd fc56 	bl	800149c <_lseek>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_lseek_r+0x1e>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_lseek_r+0x1e>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	200002e4 	.word	0x200002e4

08003c00 <_read_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4d07      	ldr	r5, [pc, #28]	; (8003c20 <_read_r+0x20>)
 8003c04:	4604      	mov	r4, r0
 8003c06:	4608      	mov	r0, r1
 8003c08:	4611      	mov	r1, r2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	602a      	str	r2, [r5, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7fd fbe4 	bl	80013dc <_read>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_read_r+0x1e>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_read_r+0x1e>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	200002e4 	.word	0x200002e4

08003c24 <_sbrk_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d06      	ldr	r5, [pc, #24]	; (8003c40 <_sbrk_r+0x1c>)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fd fc42 	bl	80014b8 <_sbrk>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_sbrk_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_sbrk_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200002e4 	.word	0x200002e4

08003c44 <_write_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d07      	ldr	r5, [pc, #28]	; (8003c64 <_write_r+0x20>)
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	602a      	str	r2, [r5, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7fd fbdf 	bl	8001416 <_write>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_write_r+0x1e>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_write_r+0x1e>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	200002e4 	.word	0x200002e4

08003c68 <__errno>:
 8003c68:	4b01      	ldr	r3, [pc, #4]	; (8003c70 <__errno+0x8>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000006c 	.word	0x2000006c

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4d0d      	ldr	r5, [pc, #52]	; (8003cac <__libc_init_array+0x38>)
 8003c78:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <__libc_init_array+0x3c>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	2600      	movs	r6, #0
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	4d0b      	ldr	r5, [pc, #44]	; (8003cb4 <__libc_init_array+0x40>)
 8003c86:	4c0c      	ldr	r4, [pc, #48]	; (8003cb8 <__libc_init_array+0x44>)
 8003c88:	f000 fd7c 	bl	8004784 <_init>
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	2600      	movs	r6, #0
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	08004894 	.word	0x08004894
 8003cb0:	08004894 	.word	0x08004894
 8003cb4:	08004894 	.word	0x08004894
 8003cb8:	08004898 	.word	0x08004898

08003cbc <__retarget_lock_acquire_recursive>:
 8003cbc:	4770      	bx	lr

08003cbe <__retarget_lock_release_recursive>:
 8003cbe:	4770      	bx	lr

08003cc0 <__assert_func>:
 8003cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cc2:	4614      	mov	r4, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <__assert_func+0x2c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4605      	mov	r5, r0
 8003ccc:	68d8      	ldr	r0, [r3, #12]
 8003cce:	b14c      	cbz	r4, 8003ce4 <__assert_func+0x24>
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <__assert_func+0x30>)
 8003cd2:	9100      	str	r1, [sp, #0]
 8003cd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cd8:	4906      	ldr	r1, [pc, #24]	; (8003cf4 <__assert_func+0x34>)
 8003cda:	462b      	mov	r3, r5
 8003cdc:	f000 f908 	bl	8003ef0 <fiprintf>
 8003ce0:	f000 f918 	bl	8003f14 <abort>
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__assert_func+0x38>)
 8003ce6:	461c      	mov	r4, r3
 8003ce8:	e7f3      	b.n	8003cd2 <__assert_func+0x12>
 8003cea:	bf00      	nop
 8003cec:	2000006c 	.word	0x2000006c
 8003cf0:	0800481b 	.word	0x0800481b
 8003cf4:	08004828 	.word	0x08004828
 8003cf8:	08004856 	.word	0x08004856

08003cfc <_free_r>:
 8003cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d044      	beq.n	8003d8c <_free_r+0x90>
 8003d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d06:	9001      	str	r0, [sp, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d0e:	bfb8      	it	lt
 8003d10:	18e4      	addlt	r4, r4, r3
 8003d12:	f7ff fddf 	bl	80038d4 <__malloc_lock>
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <_free_r+0x94>)
 8003d18:	9801      	ldr	r0, [sp, #4]
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	b933      	cbnz	r3, 8003d2c <_free_r+0x30>
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	6014      	str	r4, [r2, #0]
 8003d22:	b003      	add	sp, #12
 8003d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d28:	f7ff bdda 	b.w	80038e0 <__malloc_unlock>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d908      	bls.n	8003d42 <_free_r+0x46>
 8003d30:	6825      	ldr	r5, [r4, #0]
 8003d32:	1961      	adds	r1, r4, r5
 8003d34:	428b      	cmp	r3, r1
 8003d36:	bf01      	itttt	eq
 8003d38:	6819      	ldreq	r1, [r3, #0]
 8003d3a:	685b      	ldreq	r3, [r3, #4]
 8003d3c:	1949      	addeq	r1, r1, r5
 8003d3e:	6021      	streq	r1, [r4, #0]
 8003d40:	e7ed      	b.n	8003d1e <_free_r+0x22>
 8003d42:	461a      	mov	r2, r3
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b10b      	cbz	r3, 8003d4c <_free_r+0x50>
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d9fa      	bls.n	8003d42 <_free_r+0x46>
 8003d4c:	6811      	ldr	r1, [r2, #0]
 8003d4e:	1855      	adds	r5, r2, r1
 8003d50:	42a5      	cmp	r5, r4
 8003d52:	d10b      	bne.n	8003d6c <_free_r+0x70>
 8003d54:	6824      	ldr	r4, [r4, #0]
 8003d56:	4421      	add	r1, r4
 8003d58:	1854      	adds	r4, r2, r1
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	6011      	str	r1, [r2, #0]
 8003d5e:	d1e0      	bne.n	8003d22 <_free_r+0x26>
 8003d60:	681c      	ldr	r4, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	6053      	str	r3, [r2, #4]
 8003d66:	440c      	add	r4, r1
 8003d68:	6014      	str	r4, [r2, #0]
 8003d6a:	e7da      	b.n	8003d22 <_free_r+0x26>
 8003d6c:	d902      	bls.n	8003d74 <_free_r+0x78>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	6003      	str	r3, [r0, #0]
 8003d72:	e7d6      	b.n	8003d22 <_free_r+0x26>
 8003d74:	6825      	ldr	r5, [r4, #0]
 8003d76:	1961      	adds	r1, r4, r5
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	bf04      	itt	eq
 8003d7c:	6819      	ldreq	r1, [r3, #0]
 8003d7e:	685b      	ldreq	r3, [r3, #4]
 8003d80:	6063      	str	r3, [r4, #4]
 8003d82:	bf04      	itt	eq
 8003d84:	1949      	addeq	r1, r1, r5
 8003d86:	6021      	streq	r1, [r4, #0]
 8003d88:	6054      	str	r4, [r2, #4]
 8003d8a:	e7ca      	b.n	8003d22 <_free_r+0x26>
 8003d8c:	b003      	add	sp, #12
 8003d8e:	bd30      	pop	{r4, r5, pc}
 8003d90:	200001a0 	.word	0x200001a0

08003d94 <__sflush_r>:
 8003d94:	898a      	ldrh	r2, [r1, #12]
 8003d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	0710      	lsls	r0, r2, #28
 8003d9e:	460c      	mov	r4, r1
 8003da0:	d458      	bmi.n	8003e54 <__sflush_r+0xc0>
 8003da2:	684b      	ldr	r3, [r1, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	dc05      	bgt.n	8003db4 <__sflush_r+0x20>
 8003da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	dc02      	bgt.n	8003db4 <__sflush_r+0x20>
 8003dae:	2000      	movs	r0, #0
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003db6:	2e00      	cmp	r6, #0
 8003db8:	d0f9      	beq.n	8003dae <__sflush_r+0x1a>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dc0:	682f      	ldr	r7, [r5, #0]
 8003dc2:	6a21      	ldr	r1, [r4, #32]
 8003dc4:	602b      	str	r3, [r5, #0]
 8003dc6:	d032      	beq.n	8003e2e <__sflush_r+0x9a>
 8003dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	075a      	lsls	r2, r3, #29
 8003dce:	d505      	bpl.n	8003ddc <__sflush_r+0x48>
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	1ac0      	subs	r0, r0, r3
 8003dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dd6:	b10b      	cbz	r3, 8003ddc <__sflush_r+0x48>
 8003dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dda:	1ac0      	subs	r0, r0, r3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4602      	mov	r2, r0
 8003de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003de2:	6a21      	ldr	r1, [r4, #32]
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b0      	blx	r6
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	d106      	bne.n	8003dfc <__sflush_r+0x68>
 8003dee:	6829      	ldr	r1, [r5, #0]
 8003df0:	291d      	cmp	r1, #29
 8003df2:	d82b      	bhi.n	8003e4c <__sflush_r+0xb8>
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <__sflush_r+0x108>)
 8003df6:	410a      	asrs	r2, r1
 8003df8:	07d6      	lsls	r6, r2, #31
 8003dfa:	d427      	bmi.n	8003e4c <__sflush_r+0xb8>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	6062      	str	r2, [r4, #4]
 8003e00:	04d9      	lsls	r1, r3, #19
 8003e02:	6922      	ldr	r2, [r4, #16]
 8003e04:	6022      	str	r2, [r4, #0]
 8003e06:	d504      	bpl.n	8003e12 <__sflush_r+0x7e>
 8003e08:	1c42      	adds	r2, r0, #1
 8003e0a:	d101      	bne.n	8003e10 <__sflush_r+0x7c>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b903      	cbnz	r3, 8003e12 <__sflush_r+0x7e>
 8003e10:	6560      	str	r0, [r4, #84]	; 0x54
 8003e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e14:	602f      	str	r7, [r5, #0]
 8003e16:	2900      	cmp	r1, #0
 8003e18:	d0c9      	beq.n	8003dae <__sflush_r+0x1a>
 8003e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	d002      	beq.n	8003e28 <__sflush_r+0x94>
 8003e22:	4628      	mov	r0, r5
 8003e24:	f7ff ff6a 	bl	8003cfc <_free_r>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8003e2c:	e7c0      	b.n	8003db0 <__sflush_r+0x1c>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b0      	blx	r6
 8003e34:	1c41      	adds	r1, r0, #1
 8003e36:	d1c8      	bne.n	8003dca <__sflush_r+0x36>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0c5      	beq.n	8003dca <__sflush_r+0x36>
 8003e3e:	2b1d      	cmp	r3, #29
 8003e40:	d001      	beq.n	8003e46 <__sflush_r+0xb2>
 8003e42:	2b16      	cmp	r3, #22
 8003e44:	d101      	bne.n	8003e4a <__sflush_r+0xb6>
 8003e46:	602f      	str	r7, [r5, #0]
 8003e48:	e7b1      	b.n	8003dae <__sflush_r+0x1a>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	e7ad      	b.n	8003db0 <__sflush_r+0x1c>
 8003e54:	690f      	ldr	r7, [r1, #16]
 8003e56:	2f00      	cmp	r7, #0
 8003e58:	d0a9      	beq.n	8003dae <__sflush_r+0x1a>
 8003e5a:	0793      	lsls	r3, r2, #30
 8003e5c:	680e      	ldr	r6, [r1, #0]
 8003e5e:	bf08      	it	eq
 8003e60:	694b      	ldreq	r3, [r1, #20]
 8003e62:	600f      	str	r7, [r1, #0]
 8003e64:	bf18      	it	ne
 8003e66:	2300      	movne	r3, #0
 8003e68:	eba6 0807 	sub.w	r8, r6, r7
 8003e6c:	608b      	str	r3, [r1, #8]
 8003e6e:	f1b8 0f00 	cmp.w	r8, #0
 8003e72:	dd9c      	ble.n	8003dae <__sflush_r+0x1a>
 8003e74:	6a21      	ldr	r1, [r4, #32]
 8003e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e78:	4643      	mov	r3, r8
 8003e7a:	463a      	mov	r2, r7
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b0      	blx	r6
 8003e80:	2800      	cmp	r0, #0
 8003e82:	dc06      	bgt.n	8003e92 <__sflush_r+0xfe>
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8a:	81a3      	strh	r3, [r4, #12]
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	e78e      	b.n	8003db0 <__sflush_r+0x1c>
 8003e92:	4407      	add	r7, r0
 8003e94:	eba8 0800 	sub.w	r8, r8, r0
 8003e98:	e7e9      	b.n	8003e6e <__sflush_r+0xda>
 8003e9a:	bf00      	nop
 8003e9c:	dfbffffe 	.word	0xdfbffffe

08003ea0 <_fflush_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	690b      	ldr	r3, [r1, #16]
 8003ea4:	4605      	mov	r5, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b913      	cbnz	r3, 8003eb0 <_fflush_r+0x10>
 8003eaa:	2500      	movs	r5, #0
 8003eac:	4628      	mov	r0, r5
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	b118      	cbz	r0, 8003eba <_fflush_r+0x1a>
 8003eb2:	6a03      	ldr	r3, [r0, #32]
 8003eb4:	b90b      	cbnz	r3, 8003eba <_fflush_r+0x1a>
 8003eb6:	f7ff fdff 	bl	8003ab8 <__sinit>
 8003eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f3      	beq.n	8003eaa <_fflush_r+0xa>
 8003ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ec4:	07d0      	lsls	r0, r2, #31
 8003ec6:	d404      	bmi.n	8003ed2 <_fflush_r+0x32>
 8003ec8:	0599      	lsls	r1, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_fflush_r+0x32>
 8003ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ece:	f7ff fef5 	bl	8003cbc <__retarget_lock_acquire_recursive>
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	f7ff ff5d 	bl	8003d94 <__sflush_r>
 8003eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003edc:	07da      	lsls	r2, r3, #31
 8003ede:	4605      	mov	r5, r0
 8003ee0:	d4e4      	bmi.n	8003eac <_fflush_r+0xc>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	d4e1      	bmi.n	8003eac <_fflush_r+0xc>
 8003ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eea:	f7ff fee8 	bl	8003cbe <__retarget_lock_release_recursive>
 8003eee:	e7dd      	b.n	8003eac <_fflush_r+0xc>

08003ef0 <fiprintf>:
 8003ef0:	b40e      	push	{r1, r2, r3}
 8003ef2:	b503      	push	{r0, r1, lr}
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	ab03      	add	r3, sp, #12
 8003ef8:	4805      	ldr	r0, [pc, #20]	; (8003f10 <fiprintf+0x20>)
 8003efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003efe:	6800      	ldr	r0, [r0, #0]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	f000 f837 	bl	8003f74 <_vfiprintf_r>
 8003f06:	b002      	add	sp, #8
 8003f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f0c:	b003      	add	sp, #12
 8003f0e:	4770      	bx	lr
 8003f10:	2000006c 	.word	0x2000006c

08003f14 <abort>:
 8003f14:	b508      	push	{r3, lr}
 8003f16:	2006      	movs	r0, #6
 8003f18:	f000 fb94 	bl	8004644 <raise>
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7fd fa53 	bl	80013c8 <_exit>

08003f22 <__sfputc_r>:
 8003f22:	6893      	ldr	r3, [r2, #8]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	b410      	push	{r4}
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	da08      	bge.n	8003f40 <__sfputc_r+0x1e>
 8003f2e:	6994      	ldr	r4, [r2, #24]
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	db01      	blt.n	8003f38 <__sfputc_r+0x16>
 8003f34:	290a      	cmp	r1, #10
 8003f36:	d103      	bne.n	8003f40 <__sfputc_r+0x1e>
 8003f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f3c:	f000 bac4 	b.w	80044c8 <__swbuf_r>
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	1c58      	adds	r0, r3, #1
 8003f44:	6010      	str	r0, [r2, #0]
 8003f46:	7019      	strb	r1, [r3, #0]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <__sfputs_r>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	4606      	mov	r6, r0
 8003f54:	460f      	mov	r7, r1
 8003f56:	4614      	mov	r4, r2
 8003f58:	18d5      	adds	r5, r2, r3
 8003f5a:	42ac      	cmp	r4, r5
 8003f5c:	d101      	bne.n	8003f62 <__sfputs_r+0x12>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e007      	b.n	8003f72 <__sfputs_r+0x22>
 8003f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f66:	463a      	mov	r2, r7
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f7ff ffda 	bl	8003f22 <__sfputc_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d1f3      	bne.n	8003f5a <__sfputs_r+0xa>
 8003f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f74 <_vfiprintf_r>:
 8003f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f78:	460d      	mov	r5, r1
 8003f7a:	b09d      	sub	sp, #116	; 0x74
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	4698      	mov	r8, r3
 8003f80:	4606      	mov	r6, r0
 8003f82:	b118      	cbz	r0, 8003f8c <_vfiprintf_r+0x18>
 8003f84:	6a03      	ldr	r3, [r0, #32]
 8003f86:	b90b      	cbnz	r3, 8003f8c <_vfiprintf_r+0x18>
 8003f88:	f7ff fd96 	bl	8003ab8 <__sinit>
 8003f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f8e:	07d9      	lsls	r1, r3, #31
 8003f90:	d405      	bmi.n	8003f9e <_vfiprintf_r+0x2a>
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	059a      	lsls	r2, r3, #22
 8003f96:	d402      	bmi.n	8003f9e <_vfiprintf_r+0x2a>
 8003f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f9a:	f7ff fe8f 	bl	8003cbc <__retarget_lock_acquire_recursive>
 8003f9e:	89ab      	ldrh	r3, [r5, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	d501      	bpl.n	8003fa8 <_vfiprintf_r+0x34>
 8003fa4:	692b      	ldr	r3, [r5, #16]
 8003fa6:	b99b      	cbnz	r3, 8003fd0 <_vfiprintf_r+0x5c>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4630      	mov	r0, r6
 8003fac:	f000 faca 	bl	8004544 <__swsetup_r>
 8003fb0:	b170      	cbz	r0, 8003fd0 <_vfiprintf_r+0x5c>
 8003fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb4:	07dc      	lsls	r4, r3, #31
 8003fb6:	d504      	bpl.n	8003fc2 <_vfiprintf_r+0x4e>
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	b01d      	add	sp, #116	; 0x74
 8003fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	0598      	lsls	r0, r3, #22
 8003fc6:	d4f7      	bmi.n	8003fb8 <_vfiprintf_r+0x44>
 8003fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fca:	f7ff fe78 	bl	8003cbe <__retarget_lock_release_recursive>
 8003fce:	e7f3      	b.n	8003fb8 <_vfiprintf_r+0x44>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fde:	2330      	movs	r3, #48	; 0x30
 8003fe0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004194 <_vfiprintf_r+0x220>
 8003fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fe8:	f04f 0901 	mov.w	r9, #1
 8003fec:	4623      	mov	r3, r4
 8003fee:	469a      	mov	sl, r3
 8003ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff4:	b10a      	cbz	r2, 8003ffa <_vfiprintf_r+0x86>
 8003ff6:	2a25      	cmp	r2, #37	; 0x25
 8003ff8:	d1f9      	bne.n	8003fee <_vfiprintf_r+0x7a>
 8003ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8003ffe:	d00b      	beq.n	8004018 <_vfiprintf_r+0xa4>
 8004000:	465b      	mov	r3, fp
 8004002:	4622      	mov	r2, r4
 8004004:	4629      	mov	r1, r5
 8004006:	4630      	mov	r0, r6
 8004008:	f7ff ffa2 	bl	8003f50 <__sfputs_r>
 800400c:	3001      	adds	r0, #1
 800400e:	f000 80a9 	beq.w	8004164 <_vfiprintf_r+0x1f0>
 8004012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004014:	445a      	add	r2, fp
 8004016:	9209      	str	r2, [sp, #36]	; 0x24
 8004018:	f89a 3000 	ldrb.w	r3, [sl]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a1 	beq.w	8004164 <_vfiprintf_r+0x1f0>
 8004022:	2300      	movs	r3, #0
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800402c:	f10a 0a01 	add.w	sl, sl, #1
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	9307      	str	r3, [sp, #28]
 8004034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004038:	931a      	str	r3, [sp, #104]	; 0x68
 800403a:	4654      	mov	r4, sl
 800403c:	2205      	movs	r2, #5
 800403e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004042:	4854      	ldr	r0, [pc, #336]	; (8004194 <_vfiprintf_r+0x220>)
 8004044:	f7fc f8c4 	bl	80001d0 <memchr>
 8004048:	9a04      	ldr	r2, [sp, #16]
 800404a:	b9d8      	cbnz	r0, 8004084 <_vfiprintf_r+0x110>
 800404c:	06d1      	lsls	r1, r2, #27
 800404e:	bf44      	itt	mi
 8004050:	2320      	movmi	r3, #32
 8004052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004056:	0713      	lsls	r3, r2, #28
 8004058:	bf44      	itt	mi
 800405a:	232b      	movmi	r3, #43	; 0x2b
 800405c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004060:	f89a 3000 	ldrb.w	r3, [sl]
 8004064:	2b2a      	cmp	r3, #42	; 0x2a
 8004066:	d015      	beq.n	8004094 <_vfiprintf_r+0x120>
 8004068:	9a07      	ldr	r2, [sp, #28]
 800406a:	4654      	mov	r4, sl
 800406c:	2000      	movs	r0, #0
 800406e:	f04f 0c0a 	mov.w	ip, #10
 8004072:	4621      	mov	r1, r4
 8004074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004078:	3b30      	subs	r3, #48	; 0x30
 800407a:	2b09      	cmp	r3, #9
 800407c:	d94d      	bls.n	800411a <_vfiprintf_r+0x1a6>
 800407e:	b1b0      	cbz	r0, 80040ae <_vfiprintf_r+0x13a>
 8004080:	9207      	str	r2, [sp, #28]
 8004082:	e014      	b.n	80040ae <_vfiprintf_r+0x13a>
 8004084:	eba0 0308 	sub.w	r3, r0, r8
 8004088:	fa09 f303 	lsl.w	r3, r9, r3
 800408c:	4313      	orrs	r3, r2
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	46a2      	mov	sl, r4
 8004092:	e7d2      	b.n	800403a <_vfiprintf_r+0xc6>
 8004094:	9b03      	ldr	r3, [sp, #12]
 8004096:	1d19      	adds	r1, r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	9103      	str	r1, [sp, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	bfbb      	ittet	lt
 80040a0:	425b      	neglt	r3, r3
 80040a2:	f042 0202 	orrlt.w	r2, r2, #2
 80040a6:	9307      	strge	r3, [sp, #28]
 80040a8:	9307      	strlt	r3, [sp, #28]
 80040aa:	bfb8      	it	lt
 80040ac:	9204      	strlt	r2, [sp, #16]
 80040ae:	7823      	ldrb	r3, [r4, #0]
 80040b0:	2b2e      	cmp	r3, #46	; 0x2e
 80040b2:	d10c      	bne.n	80040ce <_vfiprintf_r+0x15a>
 80040b4:	7863      	ldrb	r3, [r4, #1]
 80040b6:	2b2a      	cmp	r3, #42	; 0x2a
 80040b8:	d134      	bne.n	8004124 <_vfiprintf_r+0x1b0>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	1d1a      	adds	r2, r3, #4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	9203      	str	r2, [sp, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfb8      	it	lt
 80040c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ca:	3402      	adds	r4, #2
 80040cc:	9305      	str	r3, [sp, #20]
 80040ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80041a4 <_vfiprintf_r+0x230>
 80040d2:	7821      	ldrb	r1, [r4, #0]
 80040d4:	2203      	movs	r2, #3
 80040d6:	4650      	mov	r0, sl
 80040d8:	f7fc f87a 	bl	80001d0 <memchr>
 80040dc:	b138      	cbz	r0, 80040ee <_vfiprintf_r+0x17a>
 80040de:	9b04      	ldr	r3, [sp, #16]
 80040e0:	eba0 000a 	sub.w	r0, r0, sl
 80040e4:	2240      	movs	r2, #64	; 0x40
 80040e6:	4082      	lsls	r2, r0
 80040e8:	4313      	orrs	r3, r2
 80040ea:	3401      	adds	r4, #1
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f2:	4829      	ldr	r0, [pc, #164]	; (8004198 <_vfiprintf_r+0x224>)
 80040f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040f8:	2206      	movs	r2, #6
 80040fa:	f7fc f869 	bl	80001d0 <memchr>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d03f      	beq.n	8004182 <_vfiprintf_r+0x20e>
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <_vfiprintf_r+0x228>)
 8004104:	bb1b      	cbnz	r3, 800414e <_vfiprintf_r+0x1da>
 8004106:	9b03      	ldr	r3, [sp, #12]
 8004108:	3307      	adds	r3, #7
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	3308      	adds	r3, #8
 8004110:	9303      	str	r3, [sp, #12]
 8004112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004114:	443b      	add	r3, r7
 8004116:	9309      	str	r3, [sp, #36]	; 0x24
 8004118:	e768      	b.n	8003fec <_vfiprintf_r+0x78>
 800411a:	fb0c 3202 	mla	r2, ip, r2, r3
 800411e:	460c      	mov	r4, r1
 8004120:	2001      	movs	r0, #1
 8004122:	e7a6      	b.n	8004072 <_vfiprintf_r+0xfe>
 8004124:	2300      	movs	r3, #0
 8004126:	3401      	adds	r4, #1
 8004128:	9305      	str	r3, [sp, #20]
 800412a:	4619      	mov	r1, r3
 800412c:	f04f 0c0a 	mov.w	ip, #10
 8004130:	4620      	mov	r0, r4
 8004132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004136:	3a30      	subs	r2, #48	; 0x30
 8004138:	2a09      	cmp	r2, #9
 800413a:	d903      	bls.n	8004144 <_vfiprintf_r+0x1d0>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0c6      	beq.n	80040ce <_vfiprintf_r+0x15a>
 8004140:	9105      	str	r1, [sp, #20]
 8004142:	e7c4      	b.n	80040ce <_vfiprintf_r+0x15a>
 8004144:	fb0c 2101 	mla	r1, ip, r1, r2
 8004148:	4604      	mov	r4, r0
 800414a:	2301      	movs	r3, #1
 800414c:	e7f0      	b.n	8004130 <_vfiprintf_r+0x1bc>
 800414e:	ab03      	add	r3, sp, #12
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	462a      	mov	r2, r5
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <_vfiprintf_r+0x22c>)
 8004156:	a904      	add	r1, sp, #16
 8004158:	4630      	mov	r0, r6
 800415a:	f3af 8000 	nop.w
 800415e:	4607      	mov	r7, r0
 8004160:	1c78      	adds	r0, r7, #1
 8004162:	d1d6      	bne.n	8004112 <_vfiprintf_r+0x19e>
 8004164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004166:	07d9      	lsls	r1, r3, #31
 8004168:	d405      	bmi.n	8004176 <_vfiprintf_r+0x202>
 800416a:	89ab      	ldrh	r3, [r5, #12]
 800416c:	059a      	lsls	r2, r3, #22
 800416e:	d402      	bmi.n	8004176 <_vfiprintf_r+0x202>
 8004170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004172:	f7ff fda4 	bl	8003cbe <__retarget_lock_release_recursive>
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	065b      	lsls	r3, r3, #25
 800417a:	f53f af1d 	bmi.w	8003fb8 <_vfiprintf_r+0x44>
 800417e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004180:	e71c      	b.n	8003fbc <_vfiprintf_r+0x48>
 8004182:	ab03      	add	r3, sp, #12
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	462a      	mov	r2, r5
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <_vfiprintf_r+0x22c>)
 800418a:	a904      	add	r1, sp, #16
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f879 	bl	8004284 <_printf_i>
 8004192:	e7e4      	b.n	800415e <_vfiprintf_r+0x1ea>
 8004194:	08004857 	.word	0x08004857
 8004198:	08004861 	.word	0x08004861
 800419c:	00000000 	.word	0x00000000
 80041a0:	08003f51 	.word	0x08003f51
 80041a4:	0800485d 	.word	0x0800485d

080041a8 <_printf_common>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	4616      	mov	r6, r2
 80041ae:	4699      	mov	r9, r3
 80041b0:	688a      	ldr	r2, [r1, #8]
 80041b2:	690b      	ldr	r3, [r1, #16]
 80041b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041b8:	4293      	cmp	r3, r2
 80041ba:	bfb8      	it	lt
 80041bc:	4613      	movlt	r3, r2
 80041be:	6033      	str	r3, [r6, #0]
 80041c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c4:	4607      	mov	r7, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	b10a      	cbz	r2, 80041ce <_printf_common+0x26>
 80041ca:	3301      	adds	r3, #1
 80041cc:	6033      	str	r3, [r6, #0]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	0699      	lsls	r1, r3, #26
 80041d2:	bf42      	ittt	mi
 80041d4:	6833      	ldrmi	r3, [r6, #0]
 80041d6:	3302      	addmi	r3, #2
 80041d8:	6033      	strmi	r3, [r6, #0]
 80041da:	6825      	ldr	r5, [r4, #0]
 80041dc:	f015 0506 	ands.w	r5, r5, #6
 80041e0:	d106      	bne.n	80041f0 <_printf_common+0x48>
 80041e2:	f104 0a19 	add.w	sl, r4, #25
 80041e6:	68e3      	ldr	r3, [r4, #12]
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	42ab      	cmp	r3, r5
 80041ee:	dc26      	bgt.n	800423e <_printf_common+0x96>
 80041f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f4:	1e13      	subs	r3, r2, #0
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	bf18      	it	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	0692      	lsls	r2, r2, #26
 80041fe:	d42b      	bmi.n	8004258 <_printf_common+0xb0>
 8004200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004204:	4649      	mov	r1, r9
 8004206:	4638      	mov	r0, r7
 8004208:	47c0      	blx	r8
 800420a:	3001      	adds	r0, #1
 800420c:	d01e      	beq.n	800424c <_printf_common+0xa4>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	6922      	ldr	r2, [r4, #16]
 8004212:	f003 0306 	and.w	r3, r3, #6
 8004216:	2b04      	cmp	r3, #4
 8004218:	bf02      	ittt	eq
 800421a:	68e5      	ldreq	r5, [r4, #12]
 800421c:	6833      	ldreq	r3, [r6, #0]
 800421e:	1aed      	subeq	r5, r5, r3
 8004220:	68a3      	ldr	r3, [r4, #8]
 8004222:	bf0c      	ite	eq
 8004224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004228:	2500      	movne	r5, #0
 800422a:	4293      	cmp	r3, r2
 800422c:	bfc4      	itt	gt
 800422e:	1a9b      	subgt	r3, r3, r2
 8004230:	18ed      	addgt	r5, r5, r3
 8004232:	2600      	movs	r6, #0
 8004234:	341a      	adds	r4, #26
 8004236:	42b5      	cmp	r5, r6
 8004238:	d11a      	bne.n	8004270 <_printf_common+0xc8>
 800423a:	2000      	movs	r0, #0
 800423c:	e008      	b.n	8004250 <_printf_common+0xa8>
 800423e:	2301      	movs	r3, #1
 8004240:	4652      	mov	r2, sl
 8004242:	4649      	mov	r1, r9
 8004244:	4638      	mov	r0, r7
 8004246:	47c0      	blx	r8
 8004248:	3001      	adds	r0, #1
 800424a:	d103      	bne.n	8004254 <_printf_common+0xac>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004254:	3501      	adds	r5, #1
 8004256:	e7c6      	b.n	80041e6 <_printf_common+0x3e>
 8004258:	18e1      	adds	r1, r4, r3
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	2030      	movs	r0, #48	; 0x30
 800425e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004262:	4422      	add	r2, r4
 8004264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800426c:	3302      	adds	r3, #2
 800426e:	e7c7      	b.n	8004200 <_printf_common+0x58>
 8004270:	2301      	movs	r3, #1
 8004272:	4622      	mov	r2, r4
 8004274:	4649      	mov	r1, r9
 8004276:	4638      	mov	r0, r7
 8004278:	47c0      	blx	r8
 800427a:	3001      	adds	r0, #1
 800427c:	d0e6      	beq.n	800424c <_printf_common+0xa4>
 800427e:	3601      	adds	r6, #1
 8004280:	e7d9      	b.n	8004236 <_printf_common+0x8e>
	...

08004284 <_printf_i>:
 8004284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	7e0f      	ldrb	r7, [r1, #24]
 800428a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800428c:	2f78      	cmp	r7, #120	; 0x78
 800428e:	4691      	mov	r9, r2
 8004290:	4680      	mov	r8, r0
 8004292:	460c      	mov	r4, r1
 8004294:	469a      	mov	sl, r3
 8004296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800429a:	d807      	bhi.n	80042ac <_printf_i+0x28>
 800429c:	2f62      	cmp	r7, #98	; 0x62
 800429e:	d80a      	bhi.n	80042b6 <_printf_i+0x32>
 80042a0:	2f00      	cmp	r7, #0
 80042a2:	f000 80d4 	beq.w	800444e <_printf_i+0x1ca>
 80042a6:	2f58      	cmp	r7, #88	; 0x58
 80042a8:	f000 80c0 	beq.w	800442c <_printf_i+0x1a8>
 80042ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b4:	e03a      	b.n	800432c <_printf_i+0xa8>
 80042b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ba:	2b15      	cmp	r3, #21
 80042bc:	d8f6      	bhi.n	80042ac <_printf_i+0x28>
 80042be:	a101      	add	r1, pc, #4	; (adr r1, 80042c4 <_printf_i+0x40>)
 80042c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	08004331 	.word	0x08004331
 80042cc:	080042ad 	.word	0x080042ad
 80042d0:	080042ad 	.word	0x080042ad
 80042d4:	080042ad 	.word	0x080042ad
 80042d8:	080042ad 	.word	0x080042ad
 80042dc:	08004331 	.word	0x08004331
 80042e0:	080042ad 	.word	0x080042ad
 80042e4:	080042ad 	.word	0x080042ad
 80042e8:	080042ad 	.word	0x080042ad
 80042ec:	080042ad 	.word	0x080042ad
 80042f0:	08004435 	.word	0x08004435
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	080043ef 	.word	0x080043ef
 80042fc:	080042ad 	.word	0x080042ad
 8004300:	080042ad 	.word	0x080042ad
 8004304:	08004457 	.word	0x08004457
 8004308:	080042ad 	.word	0x080042ad
 800430c:	0800435d 	.word	0x0800435d
 8004310:	080042ad 	.word	0x080042ad
 8004314:	080042ad 	.word	0x080042ad
 8004318:	080043f7 	.word	0x080043f7
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800432c:	2301      	movs	r3, #1
 800432e:	e09f      	b.n	8004470 <_printf_i+0x1ec>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	682b      	ldr	r3, [r5, #0]
 8004334:	0607      	lsls	r7, r0, #24
 8004336:	f103 0104 	add.w	r1, r3, #4
 800433a:	6029      	str	r1, [r5, #0]
 800433c:	d501      	bpl.n	8004342 <_printf_i+0xbe>
 800433e:	681e      	ldr	r6, [r3, #0]
 8004340:	e003      	b.n	800434a <_printf_i+0xc6>
 8004342:	0646      	lsls	r6, r0, #25
 8004344:	d5fb      	bpl.n	800433e <_printf_i+0xba>
 8004346:	f9b3 6000 	ldrsh.w	r6, [r3]
 800434a:	2e00      	cmp	r6, #0
 800434c:	da03      	bge.n	8004356 <_printf_i+0xd2>
 800434e:	232d      	movs	r3, #45	; 0x2d
 8004350:	4276      	negs	r6, r6
 8004352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004356:	485a      	ldr	r0, [pc, #360]	; (80044c0 <_printf_i+0x23c>)
 8004358:	230a      	movs	r3, #10
 800435a:	e012      	b.n	8004382 <_printf_i+0xfe>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	1d19      	adds	r1, r3, #4
 8004362:	6029      	str	r1, [r5, #0]
 8004364:	0605      	lsls	r5, r0, #24
 8004366:	d501      	bpl.n	800436c <_printf_i+0xe8>
 8004368:	681e      	ldr	r6, [r3, #0]
 800436a:	e002      	b.n	8004372 <_printf_i+0xee>
 800436c:	0641      	lsls	r1, r0, #25
 800436e:	d5fb      	bpl.n	8004368 <_printf_i+0xe4>
 8004370:	881e      	ldrh	r6, [r3, #0]
 8004372:	4853      	ldr	r0, [pc, #332]	; (80044c0 <_printf_i+0x23c>)
 8004374:	2f6f      	cmp	r7, #111	; 0x6f
 8004376:	bf0c      	ite	eq
 8004378:	2308      	moveq	r3, #8
 800437a:	230a      	movne	r3, #10
 800437c:	2100      	movs	r1, #0
 800437e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004382:	6865      	ldr	r5, [r4, #4]
 8004384:	60a5      	str	r5, [r4, #8]
 8004386:	2d00      	cmp	r5, #0
 8004388:	bfa2      	ittt	ge
 800438a:	6821      	ldrge	r1, [r4, #0]
 800438c:	f021 0104 	bicge.w	r1, r1, #4
 8004390:	6021      	strge	r1, [r4, #0]
 8004392:	b90e      	cbnz	r6, 8004398 <_printf_i+0x114>
 8004394:	2d00      	cmp	r5, #0
 8004396:	d04b      	beq.n	8004430 <_printf_i+0x1ac>
 8004398:	4615      	mov	r5, r2
 800439a:	fbb6 f1f3 	udiv	r1, r6, r3
 800439e:	fb03 6711 	mls	r7, r3, r1, r6
 80043a2:	5dc7      	ldrb	r7, [r0, r7]
 80043a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043a8:	4637      	mov	r7, r6
 80043aa:	42bb      	cmp	r3, r7
 80043ac:	460e      	mov	r6, r1
 80043ae:	d9f4      	bls.n	800439a <_printf_i+0x116>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d10b      	bne.n	80043cc <_printf_i+0x148>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	07de      	lsls	r6, r3, #31
 80043b8:	d508      	bpl.n	80043cc <_printf_i+0x148>
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	6861      	ldr	r1, [r4, #4]
 80043be:	4299      	cmp	r1, r3
 80043c0:	bfde      	ittt	le
 80043c2:	2330      	movle	r3, #48	; 0x30
 80043c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043cc:	1b52      	subs	r2, r2, r5
 80043ce:	6122      	str	r2, [r4, #16]
 80043d0:	f8cd a000 	str.w	sl, [sp]
 80043d4:	464b      	mov	r3, r9
 80043d6:	aa03      	add	r2, sp, #12
 80043d8:	4621      	mov	r1, r4
 80043da:	4640      	mov	r0, r8
 80043dc:	f7ff fee4 	bl	80041a8 <_printf_common>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d14a      	bne.n	800447a <_printf_i+0x1f6>
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	b004      	add	sp, #16
 80043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	f043 0320 	orr.w	r3, r3, #32
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	4833      	ldr	r0, [pc, #204]	; (80044c4 <_printf_i+0x240>)
 80043f8:	2778      	movs	r7, #120	; 0x78
 80043fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	6829      	ldr	r1, [r5, #0]
 8004402:	061f      	lsls	r7, r3, #24
 8004404:	f851 6b04 	ldr.w	r6, [r1], #4
 8004408:	d402      	bmi.n	8004410 <_printf_i+0x18c>
 800440a:	065f      	lsls	r7, r3, #25
 800440c:	bf48      	it	mi
 800440e:	b2b6      	uxthmi	r6, r6
 8004410:	07df      	lsls	r7, r3, #31
 8004412:	bf48      	it	mi
 8004414:	f043 0320 	orrmi.w	r3, r3, #32
 8004418:	6029      	str	r1, [r5, #0]
 800441a:	bf48      	it	mi
 800441c:	6023      	strmi	r3, [r4, #0]
 800441e:	b91e      	cbnz	r6, 8004428 <_printf_i+0x1a4>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f023 0320 	bic.w	r3, r3, #32
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	2310      	movs	r3, #16
 800442a:	e7a7      	b.n	800437c <_printf_i+0xf8>
 800442c:	4824      	ldr	r0, [pc, #144]	; (80044c0 <_printf_i+0x23c>)
 800442e:	e7e4      	b.n	80043fa <_printf_i+0x176>
 8004430:	4615      	mov	r5, r2
 8004432:	e7bd      	b.n	80043b0 <_printf_i+0x12c>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	6826      	ldr	r6, [r4, #0]
 8004438:	6961      	ldr	r1, [r4, #20]
 800443a:	1d18      	adds	r0, r3, #4
 800443c:	6028      	str	r0, [r5, #0]
 800443e:	0635      	lsls	r5, r6, #24
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	d501      	bpl.n	8004448 <_printf_i+0x1c4>
 8004444:	6019      	str	r1, [r3, #0]
 8004446:	e002      	b.n	800444e <_printf_i+0x1ca>
 8004448:	0670      	lsls	r0, r6, #25
 800444a:	d5fb      	bpl.n	8004444 <_printf_i+0x1c0>
 800444c:	8019      	strh	r1, [r3, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	6123      	str	r3, [r4, #16]
 8004452:	4615      	mov	r5, r2
 8004454:	e7bc      	b.n	80043d0 <_printf_i+0x14c>
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	602a      	str	r2, [r5, #0]
 800445c:	681d      	ldr	r5, [r3, #0]
 800445e:	6862      	ldr	r2, [r4, #4]
 8004460:	2100      	movs	r1, #0
 8004462:	4628      	mov	r0, r5
 8004464:	f7fb feb4 	bl	80001d0 <memchr>
 8004468:	b108      	cbz	r0, 800446e <_printf_i+0x1ea>
 800446a:	1b40      	subs	r0, r0, r5
 800446c:	6060      	str	r0, [r4, #4]
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	2300      	movs	r3, #0
 8004474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004478:	e7aa      	b.n	80043d0 <_printf_i+0x14c>
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	462a      	mov	r2, r5
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	47d0      	blx	sl
 8004484:	3001      	adds	r0, #1
 8004486:	d0ad      	beq.n	80043e4 <_printf_i+0x160>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	079b      	lsls	r3, r3, #30
 800448c:	d413      	bmi.n	80044b6 <_printf_i+0x232>
 800448e:	68e0      	ldr	r0, [r4, #12]
 8004490:	9b03      	ldr	r3, [sp, #12]
 8004492:	4298      	cmp	r0, r3
 8004494:	bfb8      	it	lt
 8004496:	4618      	movlt	r0, r3
 8004498:	e7a6      	b.n	80043e8 <_printf_i+0x164>
 800449a:	2301      	movs	r3, #1
 800449c:	4632      	mov	r2, r6
 800449e:	4649      	mov	r1, r9
 80044a0:	4640      	mov	r0, r8
 80044a2:	47d0      	blx	sl
 80044a4:	3001      	adds	r0, #1
 80044a6:	d09d      	beq.n	80043e4 <_printf_i+0x160>
 80044a8:	3501      	adds	r5, #1
 80044aa:	68e3      	ldr	r3, [r4, #12]
 80044ac:	9903      	ldr	r1, [sp, #12]
 80044ae:	1a5b      	subs	r3, r3, r1
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	dcf2      	bgt.n	800449a <_printf_i+0x216>
 80044b4:	e7eb      	b.n	800448e <_printf_i+0x20a>
 80044b6:	2500      	movs	r5, #0
 80044b8:	f104 0619 	add.w	r6, r4, #25
 80044bc:	e7f5      	b.n	80044aa <_printf_i+0x226>
 80044be:	bf00      	nop
 80044c0:	08004868 	.word	0x08004868
 80044c4:	08004879 	.word	0x08004879

080044c8 <__swbuf_r>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	460e      	mov	r6, r1
 80044cc:	4614      	mov	r4, r2
 80044ce:	4605      	mov	r5, r0
 80044d0:	b118      	cbz	r0, 80044da <__swbuf_r+0x12>
 80044d2:	6a03      	ldr	r3, [r0, #32]
 80044d4:	b90b      	cbnz	r3, 80044da <__swbuf_r+0x12>
 80044d6:	f7ff faef 	bl	8003ab8 <__sinit>
 80044da:	69a3      	ldr	r3, [r4, #24]
 80044dc:	60a3      	str	r3, [r4, #8]
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	071a      	lsls	r2, r3, #28
 80044e2:	d525      	bpl.n	8004530 <__swbuf_r+0x68>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	b31b      	cbz	r3, 8004530 <__swbuf_r+0x68>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	6922      	ldr	r2, [r4, #16]
 80044ec:	1a98      	subs	r0, r3, r2
 80044ee:	6963      	ldr	r3, [r4, #20]
 80044f0:	b2f6      	uxtb	r6, r6
 80044f2:	4283      	cmp	r3, r0
 80044f4:	4637      	mov	r7, r6
 80044f6:	dc04      	bgt.n	8004502 <__swbuf_r+0x3a>
 80044f8:	4621      	mov	r1, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f7ff fcd0 	bl	8003ea0 <_fflush_r>
 8004500:	b9e0      	cbnz	r0, 800453c <__swbuf_r+0x74>
 8004502:	68a3      	ldr	r3, [r4, #8]
 8004504:	3b01      	subs	r3, #1
 8004506:	60a3      	str	r3, [r4, #8]
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	701e      	strb	r6, [r3, #0]
 8004510:	6962      	ldr	r2, [r4, #20]
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d004      	beq.n	8004522 <__swbuf_r+0x5a>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	07db      	lsls	r3, r3, #31
 800451c:	d506      	bpl.n	800452c <__swbuf_r+0x64>
 800451e:	2e0a      	cmp	r6, #10
 8004520:	d104      	bne.n	800452c <__swbuf_r+0x64>
 8004522:	4621      	mov	r1, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f7ff fcbb 	bl	8003ea0 <_fflush_r>
 800452a:	b938      	cbnz	r0, 800453c <__swbuf_r+0x74>
 800452c:	4638      	mov	r0, r7
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	f000 f806 	bl	8004544 <__swsetup_r>
 8004538:	2800      	cmp	r0, #0
 800453a:	d0d5      	beq.n	80044e8 <__swbuf_r+0x20>
 800453c:	f04f 37ff 	mov.w	r7, #4294967295
 8004540:	e7f4      	b.n	800452c <__swbuf_r+0x64>
	...

08004544 <__swsetup_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <__swsetup_r+0xac>)
 8004548:	4605      	mov	r5, r0
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	460c      	mov	r4, r1
 800454e:	b118      	cbz	r0, 8004558 <__swsetup_r+0x14>
 8004550:	6a03      	ldr	r3, [r0, #32]
 8004552:	b90b      	cbnz	r3, 8004558 <__swsetup_r+0x14>
 8004554:	f7ff fab0 	bl	8003ab8 <__sinit>
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800455e:	0718      	lsls	r0, r3, #28
 8004560:	d422      	bmi.n	80045a8 <__swsetup_r+0x64>
 8004562:	06d9      	lsls	r1, r3, #27
 8004564:	d407      	bmi.n	8004576 <__swsetup_r+0x32>
 8004566:	2309      	movs	r3, #9
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e034      	b.n	80045e0 <__swsetup_r+0x9c>
 8004576:	0758      	lsls	r0, r3, #29
 8004578:	d512      	bpl.n	80045a0 <__swsetup_r+0x5c>
 800457a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800457c:	b141      	cbz	r1, 8004590 <__swsetup_r+0x4c>
 800457e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004582:	4299      	cmp	r1, r3
 8004584:	d002      	beq.n	800458c <__swsetup_r+0x48>
 8004586:	4628      	mov	r0, r5
 8004588:	f7ff fbb8 	bl	8003cfc <_free_r>
 800458c:	2300      	movs	r3, #0
 800458e:	6363      	str	r3, [r4, #52]	; 0x34
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	2300      	movs	r3, #0
 800459a:	6063      	str	r3, [r4, #4]
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f043 0308 	orr.w	r3, r3, #8
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	6923      	ldr	r3, [r4, #16]
 80045aa:	b94b      	cbnz	r3, 80045c0 <__swsetup_r+0x7c>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b6:	d003      	beq.n	80045c0 <__swsetup_r+0x7c>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4628      	mov	r0, r5
 80045bc:	f000 f884 	bl	80046c8 <__smakebuf_r>
 80045c0:	89a0      	ldrh	r0, [r4, #12]
 80045c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c6:	f010 0301 	ands.w	r3, r0, #1
 80045ca:	d00a      	beq.n	80045e2 <__swsetup_r+0x9e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6963      	ldr	r3, [r4, #20]
 80045d2:	425b      	negs	r3, r3
 80045d4:	61a3      	str	r3, [r4, #24]
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	b943      	cbnz	r3, 80045ec <__swsetup_r+0xa8>
 80045da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045de:	d1c4      	bne.n	800456a <__swsetup_r+0x26>
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	0781      	lsls	r1, r0, #30
 80045e4:	bf58      	it	pl
 80045e6:	6963      	ldrpl	r3, [r4, #20]
 80045e8:	60a3      	str	r3, [r4, #8]
 80045ea:	e7f4      	b.n	80045d6 <__swsetup_r+0x92>
 80045ec:	2000      	movs	r0, #0
 80045ee:	e7f7      	b.n	80045e0 <__swsetup_r+0x9c>
 80045f0:	2000006c 	.word	0x2000006c

080045f4 <_raise_r>:
 80045f4:	291f      	cmp	r1, #31
 80045f6:	b538      	push	{r3, r4, r5, lr}
 80045f8:	4604      	mov	r4, r0
 80045fa:	460d      	mov	r5, r1
 80045fc:	d904      	bls.n	8004608 <_raise_r+0x14>
 80045fe:	2316      	movs	r3, #22
 8004600:	6003      	str	r3, [r0, #0]
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800460a:	b112      	cbz	r2, 8004612 <_raise_r+0x1e>
 800460c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004610:	b94b      	cbnz	r3, 8004626 <_raise_r+0x32>
 8004612:	4620      	mov	r0, r4
 8004614:	f000 f830 	bl	8004678 <_getpid_r>
 8004618:	462a      	mov	r2, r5
 800461a:	4601      	mov	r1, r0
 800461c:	4620      	mov	r0, r4
 800461e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004622:	f000 b817 	b.w	8004654 <_kill_r>
 8004626:	2b01      	cmp	r3, #1
 8004628:	d00a      	beq.n	8004640 <_raise_r+0x4c>
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	d103      	bne.n	8004636 <_raise_r+0x42>
 800462e:	2316      	movs	r3, #22
 8004630:	6003      	str	r3, [r0, #0]
 8004632:	2001      	movs	r0, #1
 8004634:	e7e7      	b.n	8004606 <_raise_r+0x12>
 8004636:	2400      	movs	r4, #0
 8004638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800463c:	4628      	mov	r0, r5
 800463e:	4798      	blx	r3
 8004640:	2000      	movs	r0, #0
 8004642:	e7e0      	b.n	8004606 <_raise_r+0x12>

08004644 <raise>:
 8004644:	4b02      	ldr	r3, [pc, #8]	; (8004650 <raise+0xc>)
 8004646:	4601      	mov	r1, r0
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	f7ff bfd3 	b.w	80045f4 <_raise_r>
 800464e:	bf00      	nop
 8004650:	2000006c 	.word	0x2000006c

08004654 <_kill_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4d07      	ldr	r5, [pc, #28]	; (8004674 <_kill_r+0x20>)
 8004658:	2300      	movs	r3, #0
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	f7fc fea1 	bl	80013a8 <_kill>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	d102      	bne.n	8004670 <_kill_r+0x1c>
 800466a:	682b      	ldr	r3, [r5, #0]
 800466c:	b103      	cbz	r3, 8004670 <_kill_r+0x1c>
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	200002e4 	.word	0x200002e4

08004678 <_getpid_r>:
 8004678:	f7fc be8e 	b.w	8001398 <_getpid>

0800467c <__swhatbuf_r>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	2900      	cmp	r1, #0
 8004686:	b096      	sub	sp, #88	; 0x58
 8004688:	4615      	mov	r5, r2
 800468a:	461e      	mov	r6, r3
 800468c:	da0d      	bge.n	80046aa <__swhatbuf_r+0x2e>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	bf0c      	ite	eq
 800469a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800469e:	2340      	movne	r3, #64	; 0x40
 80046a0:	2000      	movs	r0, #0
 80046a2:	6031      	str	r1, [r6, #0]
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	b016      	add	sp, #88	; 0x58
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	466a      	mov	r2, sp
 80046ac:	f000 f848 	bl	8004740 <_fstat_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	dbec      	blt.n	800468e <__swhatbuf_r+0x12>
 80046b4:	9901      	ldr	r1, [sp, #4]
 80046b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80046ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80046be:	4259      	negs	r1, r3
 80046c0:	4159      	adcs	r1, r3
 80046c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c6:	e7eb      	b.n	80046a0 <__swhatbuf_r+0x24>

080046c8 <__smakebuf_r>:
 80046c8:	898b      	ldrh	r3, [r1, #12]
 80046ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046cc:	079d      	lsls	r5, r3, #30
 80046ce:	4606      	mov	r6, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	d507      	bpl.n	80046e4 <__smakebuf_r+0x1c>
 80046d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	2301      	movs	r3, #1
 80046de:	6163      	str	r3, [r4, #20]
 80046e0:	b002      	add	sp, #8
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	ab01      	add	r3, sp, #4
 80046e6:	466a      	mov	r2, sp
 80046e8:	f7ff ffc8 	bl	800467c <__swhatbuf_r>
 80046ec:	9900      	ldr	r1, [sp, #0]
 80046ee:	4605      	mov	r5, r0
 80046f0:	4630      	mov	r0, r6
 80046f2:	f7ff f86f 	bl	80037d4 <_malloc_r>
 80046f6:	b948      	cbnz	r0, 800470c <__smakebuf_r+0x44>
 80046f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fc:	059a      	lsls	r2, r3, #22
 80046fe:	d4ef      	bmi.n	80046e0 <__smakebuf_r+0x18>
 8004700:	f023 0303 	bic.w	r3, r3, #3
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	e7e3      	b.n	80046d4 <__smakebuf_r+0xc>
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	9b00      	ldr	r3, [sp, #0]
 8004718:	6163      	str	r3, [r4, #20]
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	6120      	str	r0, [r4, #16]
 800471e:	b15b      	cbz	r3, 8004738 <__smakebuf_r+0x70>
 8004720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f81d 	bl	8004764 <_isatty_r>
 800472a:	b128      	cbz	r0, 8004738 <__smakebuf_r+0x70>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	431d      	orrs	r5, r3
 800473c:	81a5      	strh	r5, [r4, #12]
 800473e:	e7cf      	b.n	80046e0 <__smakebuf_r+0x18>

08004740 <_fstat_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d07      	ldr	r5, [pc, #28]	; (8004760 <_fstat_r+0x20>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	4611      	mov	r1, r2
 800474c:	602b      	str	r3, [r5, #0]
 800474e:	f7fc fe8a 	bl	8001466 <_fstat>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d102      	bne.n	800475c <_fstat_r+0x1c>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	b103      	cbz	r3, 800475c <_fstat_r+0x1c>
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	bd38      	pop	{r3, r4, r5, pc}
 800475e:	bf00      	nop
 8004760:	200002e4 	.word	0x200002e4

08004764 <_isatty_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d06      	ldr	r5, [pc, #24]	; (8004780 <_isatty_r+0x1c>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fc fe89 	bl	8001486 <_isatty>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_isatty_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_isatty_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200002e4 	.word	0x200002e4

08004784 <_init>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr

08004790 <_fini>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr
